void sub_1C54CB8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (a28 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose((const void *)(v49 - 176), 8);
  MEMORY[0x1C878DC10](v49 - 144);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleConfigureAudioMediaResponse(unsigned __int8 *a1, unsigned int a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v25, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleConfigureAudioMediaResponse", 33);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v26) < 0) {
    operator delete((void *)v25);
  }
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK((AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK *)&v25, a1);
  if ((ice::isARIResponseValid() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Invalid ConfigureAudioMediaSessionResponse", 42);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK::unpack((AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK *)&v25))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Failed to extract ConfigureAudioMediaSessionResponse : ", 55);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *(unsigned char *)(v7 + 17) = 0;
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    return MEMORY[0x1C878DB40](&v25);
  }
  __p[0] = 0;
  __p[1] = __p;
  uint64_t v23 = 0x2000000000;
  int v24 = 0;
  int v24 = *(_DWORD *)v29;
  v19[0] = 0;
  v19[1] = v19;
  uint64_t v20 = 0x2000000000;
  int v21 = 0;
  int v21 = **((_DWORD **)&v29 + 1);
  memset(&v18, 0, sizeof(v18));
  unsigned int BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
  IBIRTPClient::getMsgName(BufGmid, &v18);
  uint64_t v9 = *a3;
  v10 = *(NSObject **)(*a3 + 80);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN12IBIRTPClient33handleConfigureAudioMediaResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
  block[3] = &unk_1F20D5538;
  unsigned int v17 = a2;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    uint64_t v9 = *a3;
  }
  else
  {
    std::string v14 = v18;
  }
  v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v15 = v9;
  v16 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  block[4] = __p;
  block[5] = v19;
  dispatch_async(v10, block);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(v19, 8);
  _Block_object_dispose(__p, 8);
  return MEMORY[0x1C878DB40](&v25);
}

void sub_1C54CBD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a35, 8);
  MEMORY[0x1C878DB40](v40 - 128);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleAudioCallEventResponse(const unsigned __int8 *a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(v12, "");
  uint64_t v2 = ims::debug((uint64_t)__p, (uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"handleAudioCallEventResponse", 28);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (SBYTE7(v8) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)__p = 0u;
  long long v8 = 0u;
  AriSdk::ARI_CsiIceAudCallEventRespCb_SDK::ARI_CsiIceAudCallEventRespCb_SDK((AriSdk::ARI_CsiIceAudCallEventRespCb_SDK *)__p, a1);
  if (ice::isARIResponseValid())
  {
    if (!AriSdk::ARI_CsiIceAudCallEventRespCb_SDK::unpack((AriSdk::ARI_CsiIceAudCallEventRespCb_SDK *)__p)) {
      return MEMORY[0x1C878D880](__p);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v5, "");
    uint64_t v3 = ims::error((uint64_t)v12, (uint64_t)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Failed to extract CsiIceAudCallEventResponse : ", 47);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v5, "");
    uint64_t v3 = ims::error((uint64_t)v12, (uint64_t)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Invalid AudioCallEventResponse", 30);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v3 + 17) = 0;
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return MEMORY[0x1C878D880](__p);
}

void sub_1C54CC074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 33) < 0) {
    operator delete(*(void **)(v21 - 56));
  }
  MEMORY[0x1C878D880](&__p);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleCallPsRtpResponse(const unsigned __int8 *a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(v12, "");
  uint64_t v2 = ims::debug((uint64_t)__p, (uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"handleCallPsRtpResponse", 23);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (SBYTE7(v8) < 0) {
    operator delete(__p[0]);
  }
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)__p = 0u;
  AriSdk::ARI_IBICallPsRtpRspCb_SDK::ARI_IBICallPsRtpRspCb_SDK((AriSdk::ARI_IBICallPsRtpRspCb_SDK *)__p, a1);
  if (ice::isARIResponseValid())
  {
    if (!AriSdk::ARI_IBICallPsRtpRspCb_SDK::unpack((AriSdk::ARI_IBICallPsRtpRspCb_SDK *)__p)) {
      return MEMORY[0x1C878D770](__p);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v5, "");
    uint64_t v3 = ims::error((uint64_t)v12, (uint64_t)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Failed to extract IBICallPsRtpRspCb: ", 37);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v5, "");
    uint64_t v3 = ims::error((uint64_t)v12, (uint64_t)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Invalid CallPsRtpResponse", 25);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v3 + 17) = 0;
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return MEMORY[0x1C878D770](__p);
}

void sub_1C54CC354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 33) < 0) {
    operator delete(*(void **)(v21 - 56));
  }
  MEMORY[0x1C878D770](&__p);
  _Unwind_Resume(a1);
}

void IBIRTPClient::handleUnknownResponse()
{
  std::string::basic_string[abi:ne180100]<0>(v3, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v0 = ims::error((uint64_t)v3, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v0 + 8), (uint64_t)"handleUnknownResponse", 21);
  *(unsigned char *)(v0 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v0 + 64))(v0, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v0 + 17) = 0;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_1C54CC4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *IBIRTPClient::getMsgName@<X0>(unsigned int a1@<W1>, void *a2@<X8>)
{
  uint64_t v4 = Ari::MsgDefById((Ari *)(a1 >> 26));
  v5 = "Unknown";
  if (v4 && *(void *)(v4 + 48)) {
    v5 = *(char **)(v4 + 48);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

void ___ZN12IBIRTPClient32handleGetMediaCapabilityResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 32))(v2, a1 + 32);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(*(void *)(a1 + 56) + 72);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54CC668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    operator delete(v3);
  }
}

void ___ZN12IBIRTPClient24handleStartMediaResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(void *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 32))(v2, a1 + 6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  uint64_t v3 = a1[9];
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(IBIRTPStackController **)(v3 + 64);
      if (v7) {
        IBIRTPStackController::handleStartMediaResponse(v7, *(_DWORD *)(*(void *)(a1[4] + 8) + 24), *(_DWORD *)(*(void *)(a1[5] + 8) + 24));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C54CC8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(std::string *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = *(void *)(a2 + 80);
  a1[3].__r_.__value_.__r.__words[0] = *(void *)(a2 + 72);
  a1[3].__r_.__value_.__l.__size_ = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 48);
    operator delete(v3);
  }
}

void ___ZN12IBIRTPClient23handleStopMediaResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(void *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 32))(v2, a1 + 6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  uint64_t v3 = a1[9];
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      std::string::size_type v6 = v5;
      uint64_t v7 = *(IBIRTPStackController **)(v3 + 64);
      if (v7) {
        IBIRTPStackController::handleStopMediaResponse(v7, *(_DWORD *)(*(void *)(a1[4] + 8) + 24), *(_DWORD *)(*(void *)(a1[5] + 8) + 24));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C54CCB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient35handleTerminateMediaSessionResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(void *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 32))(v2, a1 + 6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  uint64_t v3 = a1[9];
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      std::string::size_type v6 = v5;
      uint64_t v7 = *(IBIRTPStackController **)(v3 + 64);
      if (v7) {
        IBIRTPStackController::handleTerminateMediaSessionResponse(v7, *(_DWORD *)(*(void *)(a1[4] + 8) + 24), *(_DWORD *)(*(void *)(a1[5] + 8) + 24));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C54CCCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient27handleStartDTMFCodeResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(void *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 32))(v2, a1 + 6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  uint64_t v3 = a1[9];
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      std::string::size_type v6 = v5;
      uint64_t v7 = *(IBIRTPStackController **)(v3 + 64);
      if (v7) {
        IBIRTPStackController::handleStartDTMFCodeResponse(v7, *(_DWORD *)(*(void *)(a1[4] + 8) + 24), *(_DWORD *)(*(void *)(a1[5] + 8) + 24));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C54CCE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient26handleStopDTMFCodeResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(void *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 32))(v2, a1 + 6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  uint64_t v3 = a1[9];
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      std::string::size_type v6 = v5;
      uint64_t v7 = *(IBIRTPStackController **)(v3 + 64);
      if (v7) {
        IBIRTPStackController::handleStopDTMFCodeResponse(v7, *(_DWORD *)(*(void *)(a1[4] + 8) + 24), *(_DWORD *)(*(void *)(a1[5] + 8) + 24));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C54CD02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient37handleCreateAudioMediaSessionResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 72);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      long long v5 = v4;
      std::string::size_type v6 = *(IBIRTPStackController **)(v2 + 64);
      if (v6) {
        IBIRTPStackController::handleCreateAudioMediaSessionResponse(v6, *(unsigned int *)(*(void *)(a1[4] + 8) + 24), *(unsigned int *)(*(void *)(a1[5] + 8) + 24));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C54CD0F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN12IBIRTPClient37handleCreateAudioMediaSessionResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke_56(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 72);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      long long v5 = v4;
      std::string::size_type v6 = *(IBIRTPStackController **)(v2 + 64);
      if (v6) {
        IBIRTPStackController::handleCreateAudioMediaSessionResponse(v6, *(unsigned int *)(*(void *)(a1[4] + 8) + 24), *(unsigned int *)(*(void *)(a1[5] + 8) + 24));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C54CD1B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient33handleConfigureAudioMediaResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(void *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 32))(v2, a1 + 6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  uint64_t v3 = a1[9];
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      std::string::size_type v6 = v5;
      uint64_t v7 = *(IBIRTPStackController **)(v3 + 64);
      if (v7) {
        IBIRTPStackController::handleConfigureAudioMediaSessionResponse(v7, *(_DWORD *)(*(void *)(a1[4] + 8) + 24), *(_DWORD *)(*(void *)(a1[5] + 8) + 24));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C54CD334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient31handleMediaSessionErrIndicationEPhj_block_invoke(void *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 32))(v2, a1 + 7);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  uint64_t v3 = a1[10];
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      std::string::size_type v6 = v5;
      uint64_t v7 = *(IBIRTPStackController **)(v3 + 64);
      if (v7) {
        IBIRTPStackController::handleMediaError(v7, *(_DWORD *)(*(void *)(a1[4] + 8) + 24), *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24), *(unsigned __int8 *)(*(void *)(a1[6] + 8) + 24));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C54CD4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 79) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 56);
    operator delete(v3);
  }
}

__n128 __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = &unk_1F20CFB40;
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a1 + 54) = *(void *)(a2 + 54);
  *(void *)(a1 + 40) = &unk_1F20E0780;
  *(void *)(a1 + 48) = v2;
  uint64_t v3 = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v3;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  __n128 result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  return result;
}

void __Block_byref_object_dispose__4(void *a1)
{
  a1[5] = &unk_1F20E0780;
  v1 = (void *)a1[11];
  if (v1)
  {
    a1[12] = v1;
    operator delete(v1);
  }
}

void ___ZN12IBIRTPClient21handleRTCPSRReportIndEPhj_block_invoke(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v13, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 32))(v2, a1 + 40);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(v3 + 64);
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 48);
        char v9 = *(std::__shared_weak_count **)(v7 + 56);
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = *(void *)(v8 + 296);
        if (v10) {
          AnalyticsLogger::logRemoteRTCPSRPacket(*(AnalyticsLogger **)(v10 + 120), (const RTCPSRPacket *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
        }
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C54CD828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    operator delete(v3);
  }
}

__n128 __Block_byref_object_copy__78(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = &unk_1F20CFB40;
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a1 + 54) = *(void *)(a2 + 54);
  *(void *)(a1 + 40) = &unk_1F20E3660;
  *(void *)(a1 + 48) = v2;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  return result;
}

void __Block_byref_object_dispose__79(void *a1)
{
  a1[5] = &unk_1F20E3660;
  v1 = (void *)a1[9];
  if (v1)
  {
    a1[10] = v1;
    operator delete(v1);
  }
}

void ___ZN12IBIRTPClient21handleRTCPRRReportIndEPhj_block_invoke(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v13, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 32))(v2, a1 + 40);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(v3 + 64);
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 48);
        char v9 = *(std::__shared_weak_count **)(v7 + 56);
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = *(void *)(v8 + 296);
        if (v10) {
          AnalyticsLogger::logRemoteRTCPRRPacket(*(AnalyticsLogger **)(v10 + 120), (const RTCPRRPacket *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), 0);
        }
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C54CDB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient23handleRTCPSDESReportIndEPhj_block_invoke(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v14, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 32))(v2, a1 + 32);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(v3 + 64);
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 48);
        char v9 = *(std::__shared_weak_count **)(v7 + 56);
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = *(void *)(v8 + 296);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 120);
          *(void *)(v11 + 536) = time(0);
        }
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C54CDD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  v22 = v21;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void IBIRTPClient::logPrefix(IBIRTPClient *this, ImsOutStream *a2)
{
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 32));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C54CDE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *IBIRTPClient::loggableName@<X0>(IBIRTPClient *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 32));
}

void std::__shared_ptr_emplace<ImsDebugLogWriter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D5688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsDebugLogWriter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D5688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<ImsDebugLogWriter>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t _GLOBAL__sub_I_IBIRTPClient_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC2F0, "com.apple.ipTelephony.iceClient.");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &qword_1EBBDC2F0, &dword_1C51D1000);
}

void SipSessionTimer::SipSessionTimer(SipSessionTimer *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F20D56D8;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 90;
  *((void *)this + 5) = 0;
  SipTimerContainer::SipTimerContainer((SipSessionTimer *)((char *)this + 48));
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((_WORD *)this + 104) = 256;
  *((void *)this + 19) = this;
}

void sub_1C54CDF9C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void SipSessionTimer::loggableName(SipSessionTimer *this@<X0>, LoggableString *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 25);
  if (!v4)
  {
    long long v5 = 0;
    goto LABEL_6;
  }
  long long v5 = std::__shared_weak_count::lock(v4);
  if (!v5 || (uint64_t v6 = *((void *)this + 24)) == 0)
  {
LABEL_6:
    LoggableString::LoggableString(a2, "Unknown SipSessionTimer");
    if (!v5) {
      return;
    }
    goto LABEL_7;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 320))(v6);
LABEL_7:
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C54CE06C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *SipSessionTimer::initialize(uint64_t a1, void *a2, char a3)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 200);
  *(void *)(a1 + 192) = v7;
  *(void *)(a1 + 200) = v6;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 208) = a3;
  char v9 = (const std::string *)(*a2 + 32);
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(*a2 + 8));
  __n128 result = std::string::operator=((std::string *)(a1 + 120), v9);
  uint64_t v11 = *a2;
  unsigned int v12 = *(_DWORD *)(*a2 + 832);
  unsigned int v13 = *(_DWORD *)(*a2 + 828);
  if (v13 <= v12) {
    unsigned int v13 = *(_DWORD *)(*a2 + 832);
  }
  *(_DWORD *)(a1 + 28) = v13;
  *(_DWORD *)(a1 + 32) = v12;
  unsigned int v14 = *(_DWORD *)(v11 + 824);
  if (v14 < v13 && v14 != 0) {
    unsigned int v14 = v13;
  }
  *(_DWORD *)(a1 + 24) = v14;
  *(unsigned char *)(a1 + 209) = 1;
  return result;
}

void SipSessionTimer::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 200);
  if (v3)
  {
    long long v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(SipSession **)(a1 + 192);
      if (v7)
      {
        uint64_t v8 = a2[23];
        size_t v9 = *((void *)a2 + 1);
        uint64_t v10 = (v8 & 0x80u) == 0 ? a2[23] : *((void *)a2 + 1);
        if (v10 == 19)
        {
          if ((v8 & 0x80) != 0)
          {
            unsigned int v14 = *(const void **)a2;
            if (memcmp(v14, "SessionExpiresTimer", v9))
            {
              if (!memcmp(v14, "SessionRefreshTimer", v9))
              {
LABEL_25:
                SipSession::sendSessionRefresh(v7, (ImsResult *)v21);
                ImsResult::~ImsResult((ImsResult *)v21);
              }
              goto LABEL_26;
            }
          }
          else if (a2[23])
          {
            uint64_t v11 = "SessionExpiresTimer";
            unsigned int v12 = a2;
            uint64_t v13 = a2[23];
            while (*v12 == *(unsigned __int8 *)v11)
            {
              ++v12;
              ++v11;
              if (!--v13) {
                goto LABEL_17;
              }
            }
            v19 = "SessionRefreshTimer";
            while (*a2 == *(unsigned __int8 *)v19)
            {
              ++a2;
              ++v19;
              if (!--v8) {
                goto LABEL_25;
              }
            }
            goto LABEL_26;
          }
LABEL_17:
          uint64_t v15 = *((void *)v7 + 31);
          if (v15
            && (uint64_t v16 = *(void *)(v15 + 216)) != 0
            && (unsigned int v17 = *(SipUserAgent **)(v16 + 136)) != 0
            && !*(unsigned char *)(SipUserAgent::config(v17) + 1153))
          {
            uint64_t v20 = (*(uint64_t (**)(SipSession *))(*(void *)v7 + 32))(v7);
            (*(void (**)(SipSession *, uint64_t))(*(void *)v7 + 16))(v7, v20);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"did not receive session refresh update in time.  Terminating session.", 69);
            *(unsigned char *)(v20 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v20 + 17) = 0;
            std::string::basic_string[abi:ne180100]<0>(__p, "SessionExpired");
            SipSession::bye((std::__shared_weak_count *)v7, (uint64_t)__p, 0);
            ImsResult::~ImsResult((ImsResult *)v24);
            if (v23 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            uint64_t v18 = (*(uint64_t (**)(SipSession *))(*(void *)v7 + 32))(v7);
            (*(void (**)(SipSession *, uint64_t))(*(void *)v7 + 16))(v7, v18);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"ignoring session refresh timeout", 32);
            *(unsigned char *)(v18 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v18 + 17) = 0;
          }
        }
      }
LABEL_26:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C54CE41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

uint64_t SipSessionTimer::handleIntervalTooSmallResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 200);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a1 + 192);
  if (v9 && (uint64_t v10 = SipMessage::header<SipMinSEHeader>(a2)) != 0 && (v11 = v10[26], v11 > *(_DWORD *)(a1 + 28)))
  {
    *(_DWORD *)(a1 + 28) = v11;
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"received 422 response to ", 25);
    *(unsigned char *)(v12 + 17) = 0;
    uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(*(void *)a3 + 296) + 112))(*(void *)(*(void *)a3 + 296));
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 32))(v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" request in confirmed session.  Re-sending with Min-SE = ", 57);
    *(unsigned char *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  return v14;
}

void sub_1C54CE60C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipSessionTimer::validateIncomingRequestAndUpdateResponse(SipSessionTimer *this, const SipRequest *a2, std::string *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = (void *)*((void *)this + 24);
      if (!v9) {
        goto LABEL_70;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "timer");
      SipMessage::addSupportedOption((SipMessage *)a3, (void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "timer");
      BOOL v10 = SipMessage::supportsOption((uint64_t)a2, (void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v10) {
        *((unsigned char *)this + 208) = 1;
      }
      unsigned int v11 = *((_DWORD *)this + 7);
      uint64_t v12 = SipMessage::header<SipMinSEHeader>((uint64_t)a2);
      if (v12 && v12[26] > v11) {
        unsigned int v11 = v12[26];
      }
      uint64_t v13 = SipMessage::header<SipSessionExpiresHeader>((uint64_t)a2);
      if (v13)
      {
        if (v13[26] < v11)
        {
          uint64_t v14 = (*(uint64_t (**)(void *))(*v9 + 32))(v9);
          (*(void (**)(void *, uint64_t))(*v9 + 16))(v9, v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"proposed SessionExpires is less than minimum of ", 48);
          *(unsigned char *)(v14 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v14 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v14 + 17) = 0;
          std::string::basic_string[abi:ne180100]<0>(&__p, "Interval Too Small");
          LODWORD(a3[3].__r_.__value_.__r.__words[2]) = 422;
          std::string::operator=(a3 + 4, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v15 = SipMessage::header<SipMinSEHeader>((SipMessage *)a3);
          uint64_t v16 = 0;
          *((_DWORD *)v15 + 26) = v11;
          goto LABEL_71;
        }
        unsigned int v17 = (SipHeader *)(*(uint64_t (**)(_DWORD *))(*(void *)v13 + 32))(v13);
        SipMessage::addHeader((SipMessage *)a3, v17, 0);
      }
      else
      {
        if (!*((_DWORD *)this + 6)) {
          goto LABEL_70;
        }
        unsigned int v17 = SipMessage::header<SipSessionExpiresHeader>((SipMessage *)a3);
        *((_DWORD *)v17 + 26) = *((_DWORD *)this + 6);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "refresher");
      uint64_t v18 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v17 + 72, (void **)&__p.__r_.__value_.__l.__data_);
      if ((void **)((char *)v17 + 80) == v18) {
        v19 = &ims::kEmptyString;
      }
      else {
        v19 = (long long *)(v18 + 7);
      }
      uint64_t v20 = *((unsigned __int8 *)v19 + 23);
      uint64_t v21 = *((void *)v19 + 1);
      if ((v20 & 0x80u) == 0) {
        uint64_t v22 = v20;
      }
      else {
        uint64_t v22 = v21;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v22) {
          goto LABEL_32;
        }
      }
      else if (!v22)
      {
LABEL_32:
        uint64_t v23 = v9[31];
        uint64_t v24 = *(void *)(v23 + 216);
        long long v25 = *(std::__shared_weak_count **)(v23 + 224);
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v26 = *(void *)(v24 + 136);
        long long v27 = *(std::__shared_weak_count **)(v26 + 16);
        if (v27)
        {
          long long v27 = std::__shared_weak_count::lock(v27);
          long long v28 = v27;
          if (v27) {
            long long v27 = *(std::__shared_weak_count **)(v26 + 8);
          }
        }
        else
        {
          long long v28 = 0;
        }
        long long v29 = (ImsPrefs *)SipStack::prefs((SipStack *)v27);
        UseUacAsRefresherKey = (void **)ImsPrefs::getUseUacAsRefresherKey(v29);
        int v31 = ImsPrefs::BOOLValue(v29, UseUacAsRefresherKey);
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        if (!v31)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "refresher");
          int v36 = *((unsigned __int8 *)this + 209);
          p_p = &__p;
          v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v17 + 9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
          if (v36) {
            v38 = (const std::string *)SipSessionTimer::kRoleUAS;
          }
          else {
            v38 = &SipSessionTimer::kRoleUAC;
          }
          std::string::operator=((std::string *)(v37 + 7), v38);
LABEL_62:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_64;
        }
        v32 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
        uint64_t v33 = v32[23];
        if ((v33 & 0x80u) == 0) {
          uint64_t v34 = v32[23];
        }
        else {
          uint64_t v34 = *((void *)v32 + 1);
        }
        if (v34 == 6)
        {
          if ((v33 & 0x80) == 0)
          {
            if (v32[23])
            {
              v35 = "INVITE";
              while (*v32 == *(unsigned __int8 *)v35)
              {
                ++v32;
                ++v35;
                if (!--v33) {
                  goto LABEL_73;
                }
              }
              goto LABEL_58;
            }
LABEL_73:
            std::string::basic_string[abi:ne180100]<0>(&__p, "timer");
            BOOL v43 = SipMessage::supportsOption((uint64_t)a2, (void **)&__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "refresher");
            if (v43) {
              SipParameterMap::setParameter((uint64_t)v17 + 64, (long long *)&__p, &SipSessionTimer::kRoleUAC);
            }
            else {
              SipParameterMap::setParameter((uint64_t)v17 + 64, (long long *)&__p, (const std::string *)SipSessionTimer::kRoleUAS);
            }
            goto LABEL_62;
          }
          if (!memcmp(*(const void **)v32, "INVITE", *((void *)v32 + 1))) {
            goto LABEL_73;
          }
        }
LABEL_58:
        std::string::basic_string[abi:ne180100]<0>(&__p, "refresher");
        if (*((unsigned char *)this + 209)) {
          v39 = (const std::string *)SipSessionTimer::kRoleUAS;
        }
        else {
          v39 = &SipSessionTimer::kRoleUAC;
        }
        SipParameterMap::setParameter((uint64_t)v17 + 64, (long long *)&__p, v39);
        goto LABEL_62;
      }
LABEL_64:
      std::string::basic_string[abi:ne180100]<0>(&__p, "timer");
      BOOL v40 = SipMessage::supportsOption((uint64_t)a2, (void **)&__p.__r_.__value_.__l.__data_);
      BOOL v41 = v40;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!v40) {
          goto LABEL_70;
        }
LABEL_68:
        std::string::basic_string[abi:ne180100]<0>(&__p, "timer");
        SipMessage::addRequiredOption((SipMessage *)a3, (void **)&__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_70;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v41) {
        goto LABEL_68;
      }
LABEL_70:
      uint64_t v16 = 1;
LABEL_71:
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      return v16;
    }
  }
  return 1;
}

void sub_1C54CEB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void *SipMessage::header<SipSessionExpiresHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "Session-Expires");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

SipHeader *SipMessage::header<SipMinSEHeader>(SipMessage *a1)
{
  __n128 result = SipMessage::headerWithName(a1, "Min-SE", 1);
  if (result)
  {
  }
  return result;
}

SipHeader *SipMessage::header<SipSessionExpiresHeader>(SipMessage *a1)
{
  __n128 result = SipMessage::headerWithName(a1, "Session-Expires", 1);
  if (result)
  {
  }
  return result;
}

void SipSessionTimer::updateFromResponse(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 200);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void **)(a1 + 192);
      if (!v9)
      {
LABEL_54:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return;
      }
      SipTimerContainer::cancelAllTimers((SipTimerContainer *)(a1 + 48));
      uint64_t v11 = *(void *)(a1 + 8);
      BOOL v10 = *(std::__shared_weak_count **)(a1 + 16);
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = SipMessage::header<SipSessionExpiresHeader>(a2);
      uint64_t v13 = v12;
      if (v12)
      {
        *(_DWORD *)(a1 + 24) = v12[26];
        *(void *)(a1 + 40) = time(0) + *(unsigned int *)(a1 + 24);
        uint64_t v14 = (*(uint64_t (**)(void *))(*v9 + 64))(v9);
        (*(void (**)(void *, uint64_t))(*v9 + 16))(v9, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"next session refresh due at ", 28);
        *(unsigned char *)(v14 + 17) = 0;
        ims::formatTimeAndIntervalFromNow(*(ims **)(a1 + 40), v14, v15);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v14 + 17) = 0;
        memset(&v48, 0, sizeof(v48));
        std::string::basic_string[abi:ne180100]<0>(__p, "refresher");
        uint64_t v16 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v13 + 18), __p);
        if (v13 + 20 == (_DWORD *)v16) {
          unsigned int v17 = &ims::kEmptyString;
        }
        else {
          unsigned int v17 = (long long *)(v16 + 7);
        }
        if (*((char *)v17 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)v17, *((void *)v17 + 1));
        }
        else {
          std::string v48 = *(std::string *)v17;
        }
        if (v47 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v21 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v48.__r_.__value_.__l.__size_;
        }
        uint64_t v23 = a3[23];
        int v24 = (char)v23;
        if ((v23 & 0x80u) != 0) {
          uint64_t v23 = *((void *)a3 + 1);
        }
        if (size == v23)
        {
          if (v24 >= 0) {
            long long v25 = a3;
          }
          else {
            long long v25 = *(unsigned __int8 **)a3;
          }
          if ((*((unsigned char *)&v48.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            if (*((unsigned char *)&v48.__r_.__value_.__s + 23))
            {
              uint64_t v26 = &v48;
              while (v26->__r_.__value_.__s.__data_[0] == *v25)
              {
                uint64_t v26 = (std::string *)((char *)v26 + 1);
                ++v25;
                if (!--v21) {
                  goto LABEL_44;
                }
              }
              goto LABEL_41;
            }
LABEL_44:
            uint64_t v31 = (*(uint64_t (**)(void *, unsigned __int8 *))(*v9 + 64))(v9, v25);
            (*(void (**)(void *, uint64_t))(*v9 + 16))(v9, v31);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"I'm responsible for session refresh", 35);
            *(unsigned char *)(v31 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v31 + 17) = 0;
            if (v10) {
              atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            v53 = 0;
            v32 = operator new(0x20uLL);
            void *v32 = &unk_1F20D5758;
            v32[1] = a1;
            v32[2] = v11;
            v32[3] = v10;
            v53 = v32;
            long long v29 = &v52;
            SipTimerContainer::startTimer((int8x8_t *)(a1 + 48), (uint64_t)"SessionRefreshTimer");
            char v30 = 1;
LABEL_47:
            std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v29);
            *(unsigned char *)(a1 + 209) = v30;
            if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v48.__r_.__value_.__l.__data_);
            }
            goto LABEL_49;
          }
          if (!memcmp(v48.__r_.__value_.__l.__data_, v25, v48.__r_.__value_.__l.__size_)) {
            goto LABEL_44;
          }
        }
LABEL_41:
        uint64_t v27 = (*(uint64_t (**)(void *))(*v9 + 64))(v9);
        (*(void (**)(void *, uint64_t))(*v9 + 16))(v9, v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"the other guy is responsible for session refresh", 48);
        *(unsigned char *)(v27 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v27 + 17) = 0;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v51 = 0;
        long long v28 = operator new(0x20uLL);
        *long long v28 = &unk_1F20D5758;
        v28[1] = a1;
        v28[2] = v11;
        v28[3] = v10;
        v51 = v28;
        long long v29 = &v50;
        SipTimerContainer::startTimer((int8x8_t *)(a1 + 48), (uint64_t)"SessionExpiresTimer");
        char v30 = 0;
        goto LABEL_47;
      }
      uint64_t v18 = a3[23];
      if ((v18 & 0x80u) == 0) {
        uint64_t v19 = a3[23];
      }
      else {
        uint64_t v19 = *((void *)a3 + 1);
      }
      if (v19 == 3)
      {
        if ((v18 & 0x80) == 0)
        {
          if (a3[23])
          {
            uint64_t v20 = &SipSessionTimer::kRoleUAC;
            while (*a3 == *v20)
            {
              ++a3;
              ++v20;
              if (!--v18) {
                goto LABEL_57;
              }
            }
            goto LABEL_49;
          }
          goto LABEL_57;
        }
        if (!memcmp(*(const void **)a3, &SipSessionTimer::kRoleUAC, *((void *)a3 + 1)))
        {
LABEL_57:
          if (*(_DWORD *)(a1 + 24))
          {
            uint64_t v35 = v9[31];
            if (v35 && (uint64_t v36 = *(void *)(v35 + 216)) != 0) {
              uint64_t v37 = *(void *)(v36 + 136);
            }
            else {
              uint64_t v37 = 0;
            }
            v38 = *(std::__shared_weak_count **)(v37 + 16);
            if (v38)
            {
              v38 = std::__shared_weak_count::lock(v38);
              v39 = v38;
              if (v38) {
                v38 = *(std::__shared_weak_count **)(v37 + 8);
              }
            }
            else
            {
              v39 = 0;
            }
            BOOL v40 = (ImsPrefs *)SipStack::prefs((SipStack *)v38);
            DoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey = (void **)ImsPrefs::getDoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey(v40);
            char v42 = ImsPrefs::BOOLValue(v40, DoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey);
            if (v39) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v39);
            }
            if ((v42 & 1) == 0)
            {
              uint64_t v43 = (*(uint64_t (**)(void *))(*v9 + 64))(v9);
              (*(void (**)(void *, uint64_t))(*v9 + 16))(v9, v43);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"No Session-Expires in response, but we sent one in our request", 62);
              *(unsigned char *)(v43 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v43 + 17) = 0;
              uint64_t v44 = (*(uint64_t (**)(void *))(*v9 + 64))(v9);
              (*(void (**)(void *, uint64_t))(*v9 + 16))(v9, v44);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"I'm responsible for session refresh", 35);
              *(unsigned char *)(v44 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v44 + 17) = 0;
              if (v10) {
                atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              v45 = operator new(0x20uLL);
              void *v45 = &unk_1F20D5758;
              v45[1] = a1;
              v45[2] = v11;
              v45[3] = v10;
              v49[3] = v45;
              SipTimerContainer::startTimer((int8x8_t *)(a1 + 48), (uint64_t)"SessionRefreshTimer");
              std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v49);
              *(unsigned char *)(a1 + 209) = 1;
            }
          }
        }
      }
LABEL_49:
      uint64_t v33 = SipMessage::header<SipMinSEHeader>(a2);
      if (v33)
      {
        unsigned int v34 = v33[26];
        if (v34 > *(_DWORD *)(a1 + 28)) {
          *(_DWORD *)(a1 + 28) = v34;
        }
      }
      if (v10)
      {
        std::__shared_weak_count::__release_weak(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      goto LABEL_54;
    }
  }
}

void sub_1C54CF59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](&a23);
  if (v32)
  {
    std::__shared_weak_count::__release_weak(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  _Unwind_Resume(a1);
}

void SipSessionTimer::updateFromIncomingResponse(SipSessionTimer *this, const SipResponse *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "timer");
  BOOL v4 = SipMessage::supportsOption((uint64_t)a2, __p);
  BOOL v5 = v4;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (!v4) {
LABEL_3:
  }
    *((unsigned char *)this + 208) = 1;
LABEL_4:
  SipSessionTimer::updateFromResponse((uint64_t)this, (uint64_t)a2, (unsigned __int8 *)&SipSessionTimer::kRoleUAC);
}

void sub_1C54CF6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipSessionTimer::addHeadersToRequest(SipSessionTimer *this, SipRequest *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3)
  {
    BOOL v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (!*((void *)this + 24))
      {
LABEL_22:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "timer");
      SipMessage::addSupportedOption(a2, __p);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      unsigned int v7 = *((_DWORD *)this + 7);
      if (v7 > *((_DWORD *)this + 8))
      {
        uint64_t v8 = SipMessage::header<SipMinSEHeader>(a2);
        unsigned int v9 = *((_DWORD *)v8 + 26);
        if (v9 >= v7) {
          goto LABEL_10;
        }
        *((_DWORD *)v8 + 26) = v7;
      }
      unsigned int v9 = v7;
LABEL_10:
      unsigned int v10 = *((_DWORD *)this + 6);
      if (v10)
      {
        if (v10 <= v9) {
          unsigned int v11 = v9;
        }
        else {
          unsigned int v11 = *((_DWORD *)this + 6);
        }
        uint64_t v12 = SipMessage::header<SipSessionExpiresHeader>(a2);
        uint64_t v13 = v12;
        if (*((_DWORD *)v12 + 26) - 1 >= v11) {
          *((_DWORD *)v12 + 26) = v11;
        }
        if (*((unsigned char *)this + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "refresher");
          int v14 = *((unsigned __int8 *)this + 209);
          uint64_t v19 = __p;
          uint64_t v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v13 + 9, __p, (uint64_t)&std::piecewise_construct, (long long **)&v19);
          if (v14) {
            uint64_t v16 = (const std::string *)&SipSessionTimer::kRoleUAC;
          }
          else {
            uint64_t v16 = (const std::string *)&SipSessionTimer::kRoleUAS;
          }
          std::string::operator=((std::string *)(v15 + 7), v16);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      goto LABEL_22;
    }
  }
}

void sub_1C54CF864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void SipSessionTimer::~SipSessionTimer(SipSessionTimer *this)
{
  *(void *)this = &unk_1F20D56D8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  SipTimerContainer::~SipTimerContainer((SipSessionTimer *)((char *)this + 48));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20D56D8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  SipTimerContainer::~SipTimerContainer((SipSessionTimer *)((char *)this + 48));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20D5758;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20D5758;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x20uLL);
  *(void *)__n128 result = &unk_1F20D5758;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D5758;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      unsigned int v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C54CFBC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void NetworkInterfaceMonitor::_callback(NetworkInterfaceMonitor *this, const __SCDynamicStore *a2, const __CFArray *a3, void *a4)
{
  if (a3)
  {
    *((unsigned char *)a3 + 8) = 1;
    if (!NetworkInterfaceMonotorManager::_instance) {
      operator new();
    }
    BOOL v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((void *)NetworkInterfaceMonotorManager::_instance, (unsigned __int8 *)a3 + 16);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v7 = *((void *)v4 + 5);
      uint64_t v6 = *((void *)v4 + 6);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v5 + 7);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *((void *)v5 + 9);
      if (v7) {
        BOOL v10 = v9 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (!v10 && v6 != 0)
      {
        uint64_t v12 = v7 + 16;
        v17[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 64))(v6, v7 + 16);
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 16))(v9, v12, v17);
        uint64_t v13 = v17[0];
        v17[0] = 0;
        if (v13) {
          (*(void (**)(void *))(*(void *)v13 + 8))(v13);
        }
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::error((uint64_t)v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"No NetworkInterfaceMonitor found", 32);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
}

void sub_1C54CFE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void NetworkInterfaceMonitor::~NetworkInterfaceMonitor(void **this)
{
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

void NetworkInterfaceMonitor::stopMonitoring(NetworkInterfaceMonitor *this)
{
  uint64_t v2 = (const __SCDynamicStore *)*((void *)this + 1);
  if (v2)
  {
    SCDynamicStoreSetDispatchQueue(v2, 0);
    CFRelease(*((CFTypeRef *)this + 1));
    *((void *)this + 1) = 0;
  }
}

uint64_t NetworkInterfaceMonitor::startMonitoring(NetworkInterfaceMonitor *this, std::string *__str, char a3)
{
  if (*((void *)this + 1)) {
    NetworkInterfaceMonitor::stopMonitoring(this);
  }
  std::string::operator=((std::string *)((char *)this + 16), __str);
  memset(&context, 0, sizeof(context));
  context.info = *(void **)this;
  SCDynamicStoreRef v6 = SCDynamicStoreCreate(0, @"ims", (SCDynamicStoreCallBack)NetworkInterfaceMonitor::_callback, &context);
  *((void *)this + 1) = v6;
  if (v6)
  {
    uint64_t v26 = 0;
    size_t v27 = 0;
    uint64_t v28 = 0;
    std::operator+<char>();
    uint64_t v21 = &unk_1F20B3050;
    CFArrayRef keys = 0;
    if ((a3 & 1) == 0) {
      goto LABEL_11;
    }
    if (v28 >= 0) {
      size_t v7 = HIBYTE(v28);
    }
    else {
      size_t v7 = v27;
    }
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    std::string __p = 0;
    p_p = (char *)&__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 5);
    if (v25 < 0) {
      p_p = (char *)__p;
    }
    strcpy(&p_p[v7], "/IPv4");
    ims::CFString::CFString(v19, (char *)&__p, 0x8000100u);
    ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v21, (const ims::CFType *)v19);
    ims::CFType::~CFType((ims::CFType *)v19);
    if (SHIBYTE(v25) < 0)
    {
      operator delete(__p);
      if ((a3 & 2) == 0) {
        goto LABEL_30;
      }
    }
    else
    {
LABEL_11:
      if ((a3 & 2) == 0) {
        goto LABEL_30;
      }
    }
    if (v28 >= 0) {
      size_t v9 = HIBYTE(v28);
    }
    else {
      size_t v9 = v27;
    }
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    std::string __p = 0;
    BOOL v10 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v9 + 5);
    if (v25 < 0) {
      BOOL v10 = __p;
    }
    if (v9)
    {
      if (v28 >= 0) {
        unsigned int v11 = &v26;
      }
      else {
        unsigned int v11 = v26;
      }
      memmove(v10, v11, v9);
    }
    strcpy((char *)v10 + v9, "/IPv6");
    ims::CFString::CFString(v19, (char *)&__p, 0x8000100u);
    ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v21, (const ims::CFType *)v19);
    ims::CFType::~CFType((ims::CFType *)v19);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p);
    }
LABEL_30:
    if (SCDynamicStoreSetNotificationKeys(*((SCDynamicStoreRef *)this + 1), keys, 0))
    {
      uint64_t v14 = (const __SCDynamicStore *)*((void *)this + 1);
      uint64_t v15 = sImsDispatchQueue;
      if (!sImsDispatchQueue)
      {
        uint64_t v15 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
        sImsDispatchQueue = (uint64_t)v15;
      }
      if (SCDynamicStoreSetDispatchQueue(v14, v15))
      {
        uint64_t v13 = 1;
        goto LABEL_45;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "net");
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      uint64_t v17 = ims::error((uint64_t)&__p, (uint64_t)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"NetworkInterfaceMonitor: unable to set dispatch queue for dynamic store", 71);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__p);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "net");
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      uint64_t v16 = ims::error((uint64_t)&__p, (uint64_t)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"NetworkInterfaceMonitor: SetNotificationKeys failed", 51);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__p);
      }
      NetworkInterfaceMonitor::stopMonitoring(this);
    }
    uint64_t v13 = 0;
LABEL_45:
    ims::CFType::~CFType((ims::CFType *)&v21);
    if (SHIBYTE(v28) < 0) {
      operator delete(v26);
    }
    return v13;
  }
  std::string::basic_string[abi:ne180100]<0>(&v26, "net");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v12 = ims::error((uint64_t)&v26, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"NetworkInterfaceMonitor: couldn't create dynamic store", 54);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (SHIBYTE(v25) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v26);
  }
  return 0;
}

void sub_1C54D03C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)&a16);
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t NetworkInterfaceMonotorManager::startMonitoring(void *a1, unsigned __int8 *a2, std::string *a3, char a4)
{
  SCDynamicStoreRef v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1, a2);
  if (v6)
  {
    size_t v7 = (NetworkInterfaceMonitor *)*((void *)v6 + 5);
    if (v7) {
      NetworkInterfaceMonitor::startMonitoring(v7, a3, a4);
    }
  }
  return 0;
}

void NetworkInterfaceMonotorManager::stopMonitoring(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1, a2);
  if (v2)
  {
    uint64_t v3 = (NetworkInterfaceMonitor *)*((void *)v2 + 5);
    if (v3)
    {
      NetworkInterfaceMonitor::stopMonitoring(v3);
    }
  }
}

void NetworkInterfaceMonotorManager::releaseMonitor(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1, a2);
  if (v3)
  {
    BOOL v4 = v3;
    SCDynamicStoreRef v6 = v3 + 40;
    uint64_t v5 = (NetworkInterfaceMonitor *)*((void *)v3 + 5);
    if (v5)
    {
      NetworkInterfaceMonitor::stopMonitoring(v5);
      if (*(void *)v6)
      {
        NetworkInterfaceMonitor::~NetworkInterfaceMonitor(*(void ***)v6);
        MEMORY[0x1C878E320]();
      }
    }
    *((void *)v4 + 9) = 0;
    *(void *)SCDynamicStoreRef v6 = 0;
    *((void *)v6 + 1) = 0;
    size_t v7 = (std::__shared_weak_count *)*((void *)v4 + 7);
    *((void *)v4 + 7) = 0;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    uint64_t v8 = (unsigned char *)*((void *)v4 + 8);
    if (v8)
    {
      if (v8[8])
      {
        (*(void (**)(void))(*(void *)v8 + 8))(*((void *)v4 + 8));
      }
      else
      {
        size_t v9 = sImsDispatchQueue;
        if (!sImsDispatchQueue)
        {
          size_t v9 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
          sImsDispatchQueue = (uint64_t)v9;
        }
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 0x40000000;
        v10[2] = ___ZN30NetworkInterfaceMonotorManager14releaseMonitorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v10[3] = &__block_descriptor_tmp_11_0;
        v10[4] = v8;
        dispatch_async(v9, v10);
      }
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::remove(a1, v4, (uint64_t)v11);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
}

uint64_t ___ZN30NetworkInterfaceMonotorManager14releaseMonitorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void NetworkInterfaceMonotorManager::createMonitor(std::string *a1@<X8>)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  ImsUuid::generate((ImsUuid *)&__p);
  if (SHIBYTE(v4) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)__p_8[0], (std::string::size_type)__p_8[1]);
    std::string __p = &unk_1F20B3708;
    if (SHIBYTE(v4) < 0) {
      operator delete(__p_8[0]);
    }
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)__p_8;
    a1->__r_.__value_.__r.__words[2] = v4;
  }
  operator new();
}

void sub_1C54D0C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (*(char *)(v24 + 23) < 0) {
    operator delete(*(void **)v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void NetworkIntefaceManagerCallback::~NetworkIntefaceManagerCallback(void **this)
{
  *this = &unk_1F20D57D8;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20D57D8;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x1C878E320);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t SipUriHeader::SipUriHeader(uint64_t a1, const std::string *a2)
{
  uint64_t v3 = SipHeader::SipHeader(a1, a2);
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 64) = &unk_1F20B37B0;
  *(void *)(v3 + 72) = v3 + 80;
  *(_WORD *)(v3 + 96) = 256;
  *(void *)uint64_t v3 = &unk_1F20D5808;
  SipUri::SipUri((SipUri *)(v3 + 104));
  return a1;
}

void sub_1C54D0F1C(_Unwind_Exception *a1)
{
  SipParameterHeader::~SipParameterHeader(v1);
  _Unwind_Resume(a1);
}

SipParameterHeader *SipUriHeader::SipUriHeader(SipParameterHeader *a1, uint64_t a2)
{
  SipParameterHeader::SipParameterHeader(a1, (const SipParameterHeader *)a2);
  *std::string::size_type v4 = &unk_1F20D5808;
  SipUri::SipUri((SipUri *)(v4 + 13), (const SipUri *)(a2 + 104));
  return a1;
}

void sub_1C54D0F80(_Unwind_Exception *a1)
{
  SipParameterHeader::~SipParameterHeader(v1);
  _Unwind_Resume(a1);
}

uint64_t SipUriHeader::encodeValue(SipUriHeader *this, ImsOutStream *a2)
{
  return 1;
}

uint64_t SipUriHeader::valueAsString(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t SipUriHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  return SipUri::fromString(a1 + 104, a2);
}

long long *SipUriHeader::tag(SipUriHeader *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "tag");
  uint64_t v2 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 72, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if ((void **)((char *)this + 80) == v2) {
    return &ims::kEmptyString;
  }
  else {
    return (long long *)(v2 + 7);
  }
}

void sub_1C54D1054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipUriHeader::setTag(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "tag");
    uint64_t v8 = __p;
    char v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 72), __p, (uint64_t)&std::piecewise_construct, (long long **)&v8);
    std::string::operator=((std::string *)(v5 + 7), (const std::string *)a2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "tag");
    SipParameterMap::clearParameter(a1 + 64, __p);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C54D1130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type SipUriHeader::findParameterMarker(uint64_t a1, std::string *a2)
{
  return SipUriHeader::findUriHeaderParameterMarker(a2);
}

std::string::size_type SipUriHeader::findUriHeaderParameterMarker(std::string *a1)
{
  std::string::size_type NotQuoted = ims::findNotQuoted((uint64_t *)a1, 0x3Cu);
  std::string::size_type result = ims::findNotQuoted((uint64_t *)a1, 0x3Bu);
  if (NotQuoted != -1 && result >= NotQuoted)
  {
    std::string::size_type v5 = std::string::find(a1, 62, NotQuoted);
    if (v5 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::error((uint64_t)v9, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"No matching close bracket in URI header: ", 41);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 32))(v6, a1);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      return ims::findNotQuoted((uint64_t *)a1, 0x3Bu);
    }
    else
    {
      return std::string::find(a1, 59, v5);
    }
  }
  return result;
}

void sub_1C54D12C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipUriHeader::~SipUriHeader(SipUriHeader *this)
{
  *(void *)this = &unk_1F20D5808;
  SipUri::~SipUri((SipUriHeader *)((char *)this + 104));
  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20D5808;
  SipUri::~SipUri((SipUriHeader *)((char *)this + 104));
  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipUriHeader::clone(SipUriHeader *this)
{
}

void sub_1C54D148C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4072661F37);
  _Unwind_Resume(a1);
}

void SipMessageManager::OutgoingMessage::~OutgoingMessage(SipMessageManager::OutgoingMessage *this)
{
  uint64_t v2 = (void **)((char *)this + 56);
  if (*((_DWORD *)this + 20)) {
    ImsPowerAssertion::deinitialize((uint64_t)this + 56);
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4)
  {
    std::string::size_type v5 = *(std::__shared_weak_count **)(v4 + 360);
    *(void *)(v4 + 352) = 0;
    *(void *)(v4 + 360) = 0;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  ImsPowerAssertion::~ImsPowerAssertion(v2);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  char v7 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void *SipMessageManager::OutgoingMessage::send(void *this)
{
  uint64_t v1 = (SipMessage *)this[3];
  if (v1)
  {
    uint64_t v2 = this;
    int v3 = *(_DWORD *)(*this + 160);
    *(_DWORD *)(*this + 160) = v3 + 1;
    uint64_t v4 = (const std::string *)(*(uint64_t (**)(SipMessage *))(*(void *)v1 + 112))(v1);
    std::string::size_type v5 = SipMessage::header<SipCSeqHeader>(v1, 1);
    *((_DWORD *)v5 + 15) = v3;
    std::string::operator=((std::string *)((char *)v5 + 64), v4);
    uint64_t v6 = *(void *)(*v2 + 144);
    std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v6 + 16));
    uint64_t v7 = *(void *)(*(void *)(v6 + 8) + 152);
    char v8 = (const SipRequest *)v2[3];
    uint64_t v9 = v2[1];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    SipTransactionLayer::sendRequest(v7, v8);
  }
  return this;
}

void sub_1C54D1680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void SipMessageManager::SipMessageManager(SipMessageManager *this, uint64_t **a2)
{
  *(void *)this = &unk_1F20B33E8;
  *((void *)this + 1) = &unk_1F20B3658;
  *((void *)this + 2) = &unk_1F20B3448;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.msg");
  ImsLogContainer::ImsLogContainer((uint64_t)this + 24, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *(void *)this = &unk_1F20D58A8;
  *((void *)this + 1) = &unk_1F20D5908;
  *((void *)this + 2) = &unk_1F20D5950;
  *((void *)this + 3) = &unk_1F20D5980;
  *((void *)this + 21) = (char *)this + 168;
  *((void *)this + 22) = (char *)this + 168;
  *((void *)this + 23) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 24) = (char *)this + 200;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((void *)this + 18) = a2;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0x100000001;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"MESSAGE";
  std::__tree<std::__value_type<std::string,SipUserAgentDelegate *>,std::__map_value_compare<std::string,std::__value_type<std::string,SipUserAgentDelegate *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipUserAgentDelegate *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2 + 16, (void **)"MESSAGE", (uint64_t)&std::piecewise_construct, (long long **)&__p)[7] = (uint64_t)this;
}

void sub_1C54D1850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 271) < 0) {
    operator delete(*(void **)(v14 + 248));
  }
  if (*(char *)(v14 + 247) < 0) {
    operator delete(*v18);
  }
  std::__tree<unsigned int>::destroy(v17, *(void **)(v14 + 200));
  std::__list_imp<unsigned long long>::clear(v16);
  char v20 = *(std::__shared_weak_count **)(v14 + 136);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  ImsLogContainer::~ImsLogContainer(v15);
  _Unwind_Resume(a1);
}

void SipMessageManager::deinitialize(SipMessageManager *this)
{
  long long v3 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  v1[0] = &unk_1F20B2680;
  v1[1] = &_bambiDomain;
  int v2 = 1073741827;
  SipMessageManager::clearQueueWithResult(this, (const ImsResult *)v1);
  ImsResult::~ImsResult((ImsResult *)v1);
}

void sub_1C54D1938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void *SipMessageManager::clearQueueWithResult(SipMessageManager *this, const ImsResult *a2)
{
  uint64_t v4 = *((void *)this + 27);
  if (v4)
  {
    SipMessageManager::generateError(this, *(unsigned int *)(v4 + 16), a2);
    long long v5 = (SipMessageManager::OutgoingMessage *)*((void *)this + 27);
    if (v5)
    {
      SipMessageManager::OutgoingMessage::~OutgoingMessage(v5);
      MEMORY[0x1C878E320]();
    }
    *((void *)this + 27) = 0;
  }
  for (i = (void *)*((void *)this + 22); i != (void *)((char *)this + 168); i = (void *)i[1])
  {
    uint64_t v7 = (unsigned int *)i[2];
    SipMessageManager::generateError(this, v7[4], a2);
    SipMessageManager::OutgoingMessage::~OutgoingMessage((SipMessageManager::OutgoingMessage *)v7);
    MEMORY[0x1C878E320]();
  }
  return std::__list_imp<unsigned long long>::clear((void *)this + 21);
}

void SipMessageManager::endAllMessages(SipMessageManager *this)
{
  SipMessageManager::deinitialize(this);
  uint64_t v2 = *((void *)this + 18);
  long long v3 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v2 + 16));
  uint64_t v4 = *(void *)(*(void *)(v2 + 8) + 152);
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  v45[0] = &unk_1F20B2680;
  v45[1] = &_bambiDomain;
  int v46 = 1073741827;
  uint64_t v57 = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipClientTransaction>>::unordered_map((uint64_t)&v55, v4 + 152);
  uint64_t v44 = v3;
  uint64_t v54 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipServerTransaction>>::unordered_map((uint64_t)&v52, v4 + 192);
  long long v5 = (void *)v56;
  if ((void)v56)
  {
    uint64_t v6 = v4 + 32;
    do
    {
      char v8 = (void **)v5[5];
      uint64_t v7 = (std::__shared_weak_count *)v5[6];
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v8
        && ((uint64_t v9 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*v8[37] + 112))(v8[37]),
             uint64_t v10 = v9[23],
             (v10 & 0x80u) == 0)
          ? (uint64_t v11 = v9[23])
          : (uint64_t v11 = *((void *)v9 + 1)),
            v11 == 7))
      {
        if ((v10 & 0x80) != 0)
        {
          BOOL v20 = memcmp(*(const void **)v9, "MESSAGE", *((void *)v9 + 1)) == 0;
        }
        else if (v9[23])
        {
          uint64_t v12 = v10 - 1;
          uint64_t v13 = "MESSAGE";
          do
          {
            int v15 = *v9++;
            int v14 = v15;
            int v17 = *(unsigned __int8 *)v13++;
            int v16 = v17;
            BOOL v18 = v12-- != 0;
            char v19 = v18;
            BOOL v20 = v14 == v16;
          }
          while (v14 == v16 && (v19 & 1) != 0);
        }
        else
        {
          BOOL v20 = 1;
        }
      }
      else
      {
        BOOL v20 = 0;
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      if (v20)
      {
        int v21 = ((uint64_t (*)(void **))(*v8)[18])(v8);
        uint64_t v22 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 64);
        if (v21)
        {
          uint64_t v23 = v22(v4 + 32);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v4 + 32, v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
          *(unsigned char *)(v23 + 17) = 0;
          ((void (*)(void **__return_ptr, void **))(*v8)[19])(__p, v8);
          (*(void (**)(uint64_t, void **))(*(void *)v23 + 40))(v23, __p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v23 + 17) = 0;
          if (v51 < 0) {
            operator delete(__p[0]);
          }
          ((void (*)(void **, uint64_t))(*v8)[4])(v8, 7);
        }
        else
        {
          uint64_t v24 = v22(v4 + 32);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v4 + 32, v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"Error out transaction ", 22);
          *(unsigned char *)(v24 + 17) = 0;
          ((void (*)(void **__return_ptr, void **))(*v8)[19])(__p, v8);
          (*(void (**)(uint64_t, void **))(*(void *)v24 + 40))(v24, __p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v24 + 17) = 0;
          if (v51 < 0) {
            operator delete(__p[0]);
          }
          ((void (*)(void **, void *))(*v8)[14])(v8, v45);
        }
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      long long v5 = (void *)*v5;
    }
    while (v5);
  }
  uint64_t v25 = (void *)v53;
  if ((void)v53)
  {
    uint64_t v26 = v4 + 32;
    do
    {
      uint64_t v28 = (void **)v25[5];
      size_t v27 = (std::__shared_weak_count *)v25[6];
      if (v27)
      {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v28
        && ((long long v29 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*v28[37] + 112))(v28[37]),
             uint64_t v30 = v29[23],
             (v30 & 0x80u) == 0)
          ? (uint64_t v31 = v29[23])
          : (uint64_t v31 = *((void *)v29 + 1)),
            v31 == 7))
      {
        if ((v30 & 0x80) != 0)
        {
          BOOL v39 = memcmp(*(const void **)v29, "MESSAGE", *((void *)v29 + 1)) == 0;
        }
        else if (v29[23])
        {
          uint64_t v32 = v30 - 1;
          uint64_t v33 = "MESSAGE";
          do
          {
            int v35 = *v29++;
            int v34 = v35;
            int v37 = *(unsigned __int8 *)v33++;
            int v36 = v37;
            BOOL v18 = v32-- != 0;
            char v38 = v18;
            BOOL v39 = v34 == v36;
          }
          while (v34 == v36 && (v38 & 1) != 0);
        }
        else
        {
          BOOL v39 = 1;
        }
      }
      else
      {
        BOOL v39 = 0;
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if (v39)
      {
        int v40 = ((uint64_t (*)(void **))(*v28)[18])(v28);
        BOOL v41 = *(uint64_t (**)(uint64_t))(*(void *)v26 + 64);
        if (v40)
        {
          uint64_t v42 = v41(v4 + 32);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v4 + 32, v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
          *(unsigned char *)(v42 + 17) = 0;
          ((void (*)(void **__return_ptr, void **))(*v28)[20])(__p, v28);
          (*(void (**)(uint64_t, void **))(*(void *)v42 + 40))(v42, __p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v42 + 17) = 0;
          if (v51 < 0) {
            operator delete(__p[0]);
          }
          ((void (*)(void **, uint64_t))(*v28)[4])(v28, 7);
        }
        else
        {
          uint64_t v43 = v41(v4 + 32);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v4 + 32, v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"Error out transaction ", 22);
          *(unsigned char *)(v43 + 17) = 0;
          ((void (*)(void **__return_ptr, void **))(*v28)[20])(__p, v28);
          (*(void (**)(uint64_t, void **))(*(void *)v43 + 40))(v43, __p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v43 + 17) = 0;
          if (v51 < 0) {
            operator delete(__p[0]);
          }
          ((void (*)(void **, void *))(*v28)[14])(v28, v45);
        }
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      uint64_t v25 = (void *)*v25;
    }
    while (v25);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v52);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v55);
  ImsResult::~ImsResult((ImsResult *)v45);
  std::__shared_weak_count::__release_shared[abi:ne180100](v44);
}

void sub_1C54D2238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v26 - 128);
  ImsResult::~ImsResult((ImsResult *)&a11);
  std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

SipMessageManager::OutgoingMessage *SipMessageManager::generateError(SipMessageManager *this, uint64_t a2, const ImsResult *a3)
{
  uint64_t v7 = (char *)this + 200;
  uint64_t v6 = (char *)*((void *)this + 25);
  if (!v6) {
    goto LABEL_12;
  }
  unsigned int v8 = *((_DWORD *)a3 + 4);
  uint64_t v9 = (char *)this + 200;
  do
  {
    unsigned int v10 = *((_DWORD *)v6 + 7);
    BOOL v11 = v10 >= v8;
    if (v10 >= v8) {
      uint64_t v12 = (char **)v6;
    }
    else {
      uint64_t v12 = (char **)(v6 + 8);
    }
    if (v11) {
      uint64_t v9 = v6;
    }
    uint64_t v6 = *v12;
  }
  while (*v12);
  if (v9 == v7 || v8 < *((_DWORD *)v9 + 7)) {
LABEL_12:
  }
    uint64_t v9 = (char *)this + 200;
  uint64_t v13 = *((void *)this + 19);
  if (v13)
  {
    uint64_t v14 = *((void *)this + 18);
    int v15 = *(std::__shared_weak_count **)(v14 + 16);
    if (v15)
    {
      int v16 = std::__shared_weak_count::lock(v15);
      if (v16) {
        uint64_t v17 = *(void *)(v14 + 8);
      }
      else {
        uint64_t v17 = 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
      int v16 = 0;
    }
    if (*(char *)(v17 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v17 + 4160), *(void *)(v17 + 4168));
    }
    else {
      std::string __p = *(std::string *)(v17 + 4160);
    }
    (*(void (**)(uint64_t, std::string *, uint64_t, const ImsResult *, BOOL))(*(void *)v13 + 32))(v13, &__p, a2, a3, v9 != v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  std::string::size_type result = (SipMessageManager::OutgoingMessage *)*((void *)this + 27);
  if (result)
  {
    SipMessageManager::OutgoingMessage::~OutgoingMessage(result);
    std::string::size_type result = (SipMessageManager::OutgoingMessage *)MEMORY[0x1C878E320]();
  }
  *((void *)this + 27) = 0;
  return result;
}

void sub_1C54D2458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void SipMessageManager::initialize(uint64_t a1, SipStack **a2)
{
  uint64_t v3 = a1;
  std::string::operator=((std::string *)(a1 + 224), (const std::string *)((char *)*a2 + 3760));
  std::string::operator=((std::string *)(v3 + 248), (const std::string *)((char *)*a2 + 3784));
  std::string __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v4 = (ImsPrefs *)SipStack::prefs(*a2);
  FatalSmsErrorsKey = (void **)ImsPrefs::getFatalSmsErrorsKey(v4);
  ImsPrefs::stringValue(v4, FatalSmsErrorsKey);
  v3 += 192;
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v3, &SipResponse::kStatusBadRequest, &SipResponse::kStatusBadRequest);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v3, &SipResponse::kStatusNotFound, &SipResponse::kStatusNotFound);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v3, &SipResponse::kStatusServerInternalError, &SipResponse::kStatusServerInternalError);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v3, &SipResponse::kStatusBadGateway, &SipResponse::kStatusBadGateway);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v3, &SipResponse::kStatusServiceUnavailable, &SipResponse::kStatusServiceUnavailable);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v3, &SipResponse::kStatusNotImplemented, &SipResponse::kStatusNotImplemented);
}

void sub_1C54D2628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  *(void *)(v18 - 40) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 40));
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t SipMessageManager::handleNewServerTransaction(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (!v3 || (v4 = *a2, v5 = *(void *)(a1 + 128), (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = v5 + 8;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v9 = *(std::__shared_weak_count **)(v4 + 360);
  if (!v5) {
    uint64_t v8 = 0;
  }
  *(void *)(v4 + 352) = v8;
  *(void *)(v4 + 360) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  return 1;
}

void SipMessageManager::handleRequestError(SipMessageManager *this)
{
  uint64_t v1 = *((void *)this + 19);
  if (v1)
  {
    uint64_t v2 = *((void *)this + 18);
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
    {
      uint64_t v4 = std::__shared_weak_count::lock(v3);
      if (v4) {
        uint64_t v5 = *(void *)(v2 + 8);
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v4 = 0;
    }
    if (*(char *)(v5 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
    }
    else {
      std::string __p = *(std::string *)(v5 + 4160);
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v1 + 56))(v1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54D27C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipMessageManager::handleRequest(uint64_t a1, const SipRequest *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 152);
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v7 = *(void *)(a1 + 144);
  uint64_t v8 = *(std::__shared_weak_count **)(v7 + 16);
  if (!v8)
  {
    uint64_t v9 = 0;
    goto LABEL_6;
  }
  uint64_t v9 = std::__shared_weak_count::lock(v8);
  if (!v9)
  {
LABEL_6:
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(v7 + 8);
LABEL_7:
  if (*(char *)(v10 + 4183) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v100, *(const std::string::value_type **)(v10 + 4160), *(void *)(v10 + 4168));
  }
  else
  {
    uint64_t v11 = v10 + 4160;
    *(_OWORD *)v100 = *(_OWORD *)v11;
    *(void *)&v100[16] = *(void *)(v11 + 16);
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 48))(v6, v100);
  if ((v100[23] & 0x80000000) != 0) {
    operator delete(*(void **)v100);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
LABEL_14:
  uint64_t v12 = a1 + 24;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 16))(a1 + 24, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Received SMS message request ", 29);
  *(unsigned char *)(v13 + 17) = 0;
  uint64_t v14 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a2);
  if (v14) {
    int v15 = (long long *)(v14 + 64);
  }
  else {
    int v15 = &ims::kEmptyString;
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v13 + 32))(v13, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" on stack ", 10);
  *(unsigned char *)(v13 + 17) = 0;
  uint64_t v16 = *(void *)(a1 + 144);
  uint64_t v17 = *(std::__shared_weak_count **)(v16 + 16);
  if (v17)
  {
    uint64_t v18 = std::__shared_weak_count::lock(v17);
    if (v18) {
      uint64_t v19 = *(void *)(v16 + 8);
    }
    else {
      uint64_t v19 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v18 = 0;
  }
  if (*(char *)(v19 + 4183) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v100, *(const std::string::value_type **)(v19 + 4160), *(void *)(v19 + 4168));
  }
  else
  {
    uint64_t v20 = v19 + 4160;
    *(_OWORD *)v100 = *(_OWORD *)v20;
    *(void *)&v100[16] = *(void *)(v20 + 16);
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v13 + 32))(v13, v100);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if ((v100[23] & 0x80000000) != 0) {
    operator delete(*(void **)v100);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (*(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 144)) + 1154)
    && !*(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 144)) + 456))
  {
    uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(a1 + 24, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"Secondary device should not receive SMS.  Faking timeout.", 57);
    *(unsigned char *)(v35 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v35 + 17) = 0;
    int v36 = *(void **)a3;
    std::string::basic_string[abi:ne180100]<0>(v100, "");
    SipServerTransaction::sendResponse(v36, 408, (std::string *)v100);
    int v34 = (ImsResult *)&v110;
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 144);
    uint64_t v22 = *(std::__shared_weak_count **)(v21 + 16);
    if (v22)
    {
      uint64_t v22 = std::__shared_weak_count::lock(v22);
      uint64_t v23 = v22;
      if (v22) {
        uint64_t v22 = *(std::__shared_weak_count **)(v21 + 8);
      }
    }
    else
    {
      uint64_t v23 = 0;
    }
    char v24 = SipStack::registeredForSms((SipStack *)v22);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v24)
    {
      uint64_t v25 = SipUserAgent::config(*(SipUserAgent **)(a1 + 144));
      uint64_t v26 = SipRequest::bestSenderIdentity((uint64_t)a2, *(_DWORD *)(v25 + 804));
      size_t v27 = SipMessage::assertedIdentity((uint64_t)a2, 1);
      uint64_t v28 = (char *)SipMessage::header<SipToHeader>((uint64_t)a2);
      long long v29 = (SipUri *)(v28 + 104);
      if (v28) {
        uint64_t v30 = v28 + 104;
      }
      else {
        uint64_t v30 = 0;
      }
      if (v28)
      {
        uint64_t v31 = v28;
        if (!*(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 144)) + 918) || !*(void *)(a1 + 152)) {
          goto LABEL_118;
        }
        if (!SipUri::isValidUri(v29))
        {
          std::string::basic_string[abi:ne180100]<0>(v100, "sms");
          std::string::basic_string[abi:ne180100]<0>(&v113, "");
          uint64_t v39 = ims::error((uint64_t)v100, (uint64_t)&v113);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"Failed to validate recipient for MT SMS- Invalid URI", 52);
          *(unsigned char *)(v39 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v39 + 17) = 0;
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v113.__r_.__value_.__l.__data_);
          }
          if ((v100[23] & 0x80000000) != 0) {
            operator delete(*(void **)v100);
          }
LABEL_145:
          uint64_t v82 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(a1 + 24);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(a1 + 24, v82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v82 + 8), (uint64_t)"incoming Message not destined for UE. Intended Recipient:", 57);
          *(unsigned char *)(v82 + 17) = 0;
          (*(void (**)(char *, uint64_t))(*(void *)v30 + 40))(v30, v82);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v82 + 17) = 0;
          v83 = *(void **)a3;
          std::string::basic_string[abi:ne180100]<0>(v100, "");
          SipServerTransaction::sendResponse(v83, 404, (std::string *)v100);
          int v34 = (ImsResult *)&v107;
          goto LABEL_146;
        }
        if (*(char *)(a1 + 247) < 0)
        {
          if (!*(void *)(a1 + 232)) {
            goto LABEL_118;
          }
        }
        else if (!*(unsigned char *)(a1 + 247))
        {
          goto LABEL_118;
        }
        int v40 = *(char *)(a1 + 271);
        if (v40 < 0) {
          uint64_t v41 = *(void *)(a1 + 256);
        }
        else {
          uint64_t v41 = *(unsigned __int8 *)(a1 + 271);
        }
        if (!v41)
        {
LABEL_118:
          memset(&v113, 0, sizeof(v113));
          uint64_t v64 = *((void *)a2 + 9);
          if (v64) {
            v65 = (long long *)(*(uint64_t (**)(uint64_t))(*(void *)v64 + 40))(v64);
          }
          else {
            v65 = &SipBody::kGenericContentType;
          }
          if (*((char *)v65 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v65, *((void *)v65 + 1));
          }
          else
          {
            long long v66 = *v65;
            v113.__r_.__value_.__r.__words[2] = *((void *)v65 + 2);
            *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v66;
          }
          uint64_t v67 = SipUserAgent::config(*(SipUserAgent **)(a1 + 144));
          if (!*(void *)(v67 + 1144)) {
            goto LABEL_129;
          }
          uint64_t v68 = v67;
          std::string::size_type size = HIBYTE(v113.__r_.__value_.__r.__words[2]);
          if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v113.__r_.__value_.__l.__size_;
          }
          if (!size
            || (void **)(v67 + 1136) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v67 + 1128, (void **)&v113.__r_.__value_.__l.__data_))
          {
            uint64_t v75 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(a1 + 24);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(a1 + 24, v75);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v75 + 8), (uint64_t)"unsupported SMS content type ", 29);
            *(unsigned char *)(v75 + 17) = 0;
            (*(void (**)(uint64_t, std::string *))(*(void *)v75 + 32))(v75, &v113);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v75 + 64))(v75, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v75 + 17) = 0;
            uint64_t v106 = 0;
            long long v104 = 0u;
            *(_OWORD *)std::string __p = 0u;
            long long v102 = 0u;
            long long v103 = 0u;
            long long v101 = 0u;
            memset(v100, 0, sizeof(v100));
            SipResponse::SipResponse((SipResponse *)v100, 415, a2);
            v76 = SipMessage::header<SipAcceptHeader>((SipMessage *)v100, 1);
            v77 = *(void ***)(v68 + 1128);
            if (v77 != (void **)(v68 + 1136))
            {
              v78 = (uint64_t **)((char *)v76 + 64);
              do
              {
                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v78, v77 + 4, (uint64_t)(v77 + 4));
                v79 = (void **)v77[1];
                if (v79)
                {
                  do
                  {
                    v80 = v79;
                    v79 = (void **)*v79;
                  }
                  while (v79);
                }
                else
                {
                  do
                  {
                    v80 = (void **)v77[2];
                    BOOL v81 = *v80 == v77;
                    v77 = v80;
                  }
                  while (!v81);
                }
                v77 = v80;
              }
              while (v80 != (void **)(v68 + 1136));
            }
            (*(void (**)(void *__return_ptr))(**(void **)a3 + 168))(v99);
            ImsResult::~ImsResult((ImsResult *)v99);
            SipMessageManager::handleRequestError((SipMessageManager *)a1);
            *(void *)v100 = &unk_1F20DD488;
            if (SHIBYTE(v106) < 0) {
              operator delete(__p[0]);
            }
            SipMessage::~SipMessage((SipMessage *)v100);
          }
          else
          {
LABEL_129:
            v70 = *(void **)a3;
            std::string::basic_string[abi:ne180100]<0>(v100, "");
            SipServerTransaction::sendResponse(v70, 200, (std::string *)v100);
            ImsResult::~ImsResult((ImsResult *)v98);
            if ((v100[23] & 0x80000000) != 0) {
              operator delete(*(void **)v100);
            }
            uint64_t v71 = *(void *)(a1 + 144);
            v72 = *(std::__shared_weak_count **)(v71 + 16);
            if (v72)
            {
              v73 = std::__shared_weak_count::lock(v72);
              if (v73) {
                v74 = *(unsigned char **)(v71 + 8);
              }
              else {
                v74 = 0;
              }
            }
            else
            {
              v74 = 0;
              v73 = 0;
            }
            v85 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a2);
            if (v85) {
              v86 = (long long *)(v85 + 64);
            }
            else {
              v86 = &ims::kEmptyString;
            }
            SipStack::saveEmergencyMessageCallId(v74, v86);
            if (v73) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v73);
            }
            uint64_t v87 = *(void *)(a1 + 152);
            if (v87)
            {
              uint64_t v88 = *(void *)(a1 + 144);
              v89 = *(std::__shared_weak_count **)(v88 + 16);
              if (v89)
              {
                v90 = std::__shared_weak_count::lock(v89);
                if (v90) {
                  uint64_t v91 = *(void *)(v88 + 8);
                }
                else {
                  uint64_t v91 = 0;
                }
              }
              else
              {
                uint64_t v91 = 0;
                v90 = 0;
              }
              if (*(char *)(v91 + 4183) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v100, *(const std::string::value_type **)(v91 + 4160), *(void *)(v91 + 4168));
              }
              else
              {
                uint64_t v92 = v91 + 4160;
                *(_OWORD *)v100 = *(_OWORD *)v92;
                *(void *)&v100[16] = *(void *)(v92 + 16);
              }
              v93 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a2);
              v94 = (char *)SipMessage::header<SipInReplyToContributionIdHeader>((uint64_t)a2);
              if (v93) {
                v95 = (long long *)(v93 + 64);
              }
              else {
                v95 = &ims::kEmptyString;
              }
              if (v94) {
                v96 = (long long *)(v94 + 64);
              }
              else {
                v96 = &ims::kEmptyString;
              }
              (*(void (**)(uint64_t, unsigned char *, SipUri *, char *, long long *, long long *, void))(*(void *)v87 + 16))(v87, v100, v26, v27, v95, v96, *((void *)a2 + 9));
              if ((v100[23] & 0x80000000) != 0) {
                operator delete(*(void **)v100);
              }
              if (v90) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v90);
              }
            }
          }
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v113.__r_.__value_.__l.__data_);
          }
          return 1;
        }
        memset(v100, 0, 24);
        if (v31[255] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v100, *((const std::string::value_type **)v31 + 29), *((void *)v31 + 30));
          LOBYTE(v40) = *(unsigned char *)(a1 + 271);
        }
        else
        {
          *(_OWORD *)v100 = *(_OWORD *)(v31 + 232);
          *(void *)&v100[16] = *((void *)v31 + 31);
        }
        v97 = v26;
        if ((v40 & 0x80) != 0)
        {
          uint64_t v42 = *(const void **)(a1 + 248);
          size_t v43 = *(void *)(a1 + 256);
        }
        else
        {
          uint64_t v42 = (const void *)(a1 + 248);
          size_t v43 = v40;
        }
        if (v100[23] >= 0) {
          size_t v44 = v100[23];
        }
        else {
          size_t v44 = *(void *)&v100[8];
        }
        if (v100[23] >= 0) {
          v45 = v100;
        }
        else {
          v45 = *(unsigned char **)v100;
        }
        if (v44 >= v43) {
          size_t v46 = v43;
        }
        else {
          size_t v46 = v44;
        }
        if (!memcmp(v42, v45, v46) && v44 == v43)
        {
          std::string::basic_string[abi:ne180100]<0>(&v113, "sms");
          std::string::basic_string[abi:ne180100]<0>(v111, "");
          uint64_t v26 = v97;
          uint64_t v47 = ims::debug((uint64_t)&v113, (uint64_t)v111);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)"Validated recipient for MT SMS - IMSI match", 43);
          *(unsigned char *)(v47 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_99:
          *(unsigned char *)(v47 + 17) = 0;
          if (v112 < 0) {
            operator delete(v111[0]);
          }
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v113.__r_.__value_.__l.__data_);
          }
          char v55 = 1;
          goto LABEL_115;
        }
        if (SipUri::isTelUri(v29))
        {
          SipUri::normalizedPhoneNumber(v29, &v113);
          if ((v100[23] & 0x80000000) != 0) {
            operator delete(*(void **)v100);
          }
          *(std::string *)v100 = v113;
        }
        long long v48 = (void *)(a1 + 224);
        if (*(char *)(a1 + 247) < 0)
        {
          unint64_t v49 = *(void *)(a1 + 232);
          if (v49 < 4)
          {
            unsigned int v50 = v100[23];
            size_t v51 = *(void *)&v100[8];
            long long v48 = (void *)*v48;
LABEL_87:
            if ((v50 & 0x80u) == 0) {
              size_t v52 = v50;
            }
            else {
              size_t v52 = v51;
            }
            if ((v50 & 0x80u) == 0) {
              long long v53 = v100;
            }
            else {
              long long v53 = *(unsigned char **)v100;
            }
            if (v52 >= v49) {
              size_t v54 = v49;
            }
            else {
              size_t v54 = v52;
            }
            if (memcmp(v48, v53, v54) || v52 != v49)
            {
LABEL_110:
              std::string::basic_string[abi:ne180100]<0>(&v113, "sms");
              std::string::basic_string[abi:ne180100]<0>(v111, "");
              uint64_t v26 = v97;
              uint64_t v63 = ims::error((uint64_t)&v113, (uint64_t)v111);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v63 + 8), (uint64_t)"Failed to validate recipient for MT SMS - MDN mismatch", 54);
              *(unsigned char *)(v63 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v63 + 17) = 0;
              if (v112 < 0) {
                operator delete(v111[0]);
              }
              if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v113.__r_.__value_.__l.__data_);
              }
              char v55 = 0;
LABEL_115:
              if ((v100[23] & 0x80000000) != 0) {
                operator delete(*(void **)v100);
              }
              if (v55) {
                goto LABEL_118;
              }
              goto LABEL_145;
            }
            goto LABEL_98;
          }
          long long v48 = (void *)*v48;
        }
        else
        {
          unint64_t v49 = *(unsigned __int8 *)(a1 + 247);
          if (*(unsigned __int8 *)(a1 + 247) <= 3u)
          {
            unsigned int v50 = v100[23];
            size_t v51 = *(void *)&v100[8];
            goto LABEL_87;
          }
        }
        long long v56 = (void *)((char *)v48 + v49);
        uint64_t v57 = v100[23];
        v58 = v100;
        if (v100[23] < 0)
        {
          uint64_t v57 = *(void *)&v100[8];
          v58 = *(unsigned char **)v100;
        }
        v59 = &v58[v57 - 1];
        while (v56 != (void *)((char *)v48 + v49 - 4))
        {
          int v61 = *((unsigned __int8 *)v56 - 1);
          long long v56 = (void *)((char *)v56 - 1);
          int v60 = v61;
          int v62 = *v59--;
          if (v60 != v62) {
            goto LABEL_110;
          }
        }
LABEL_98:
        std::string::basic_string[abi:ne180100]<0>(&v113, "sms");
        std::string::basic_string[abi:ne180100]<0>(v111, "");
        uint64_t v26 = v97;
        uint64_t v47 = ims::debug((uint64_t)&v113, (uint64_t)v111);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)"Validated recipient for MT SMS - MDN match", 42);
        *(unsigned char *)(v47 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_99;
      }
      uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(a1 + 24);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(a1 + 24, v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"incoming Message missing To: header.", 36);
      *(unsigned char *)(v37 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v37 + 17) = 0;
      char v38 = *(void **)a3;
      std::string::basic_string[abi:ne180100]<0>(v100, "Missing To header");
      SipServerTransaction::sendResponse(v38, 400, (std::string *)v100);
      int v34 = (ImsResult *)&v108;
    }
    else
    {
      uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(a1 + 24);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(a1 + 24, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"not registered for SMS.  Rejecting incoming message.", 52);
      *(unsigned char *)(v32 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v32 + 17) = 0;
      uint64_t v33 = *(void **)a3;
      std::string::basic_string[abi:ne180100]<0>(v100, "");
      SipServerTransaction::sendResponse(v33, 488, (std::string *)v100);
      int v34 = (ImsResult *)&v109;
    }
  }
LABEL_146:
  ImsResult::~ImsResult(v34);
  if ((v100[23] & 0x80000000) != 0) {
    operator delete(*(void **)v100);
  }
  SipMessageManager::handleRequestError((SipMessageManager *)a1);
  return 1;
}

void sub_1C54D37A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (*(char *)(v34 - 89) < 0) {
    operator delete(*(void **)(v34 - 112));
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'SipMessageManager::handleRequest(uint64_t a1, const SipRequest *a2, uint64_t a3)
{
  return 1;
}

void SipMessageManager::processSendQueue(SipMessageManager *this)
{
  if (!*((void *)this + 27))
  {
    uint64_t v2 = (char *)this + 24;
    uint64_t v3 = *((void *)this + 23);
    uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
    (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v4);
    uint64_t v5 = *(void **)(v4 + 8);
    if (v3)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"processing send queue", 21);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      uint64_t v6 = (uint64_t *)*((void *)this + 22);
      *((void *)this + 27) = v6[2];
      uint64_t v7 = *v6;
      *(void *)(v7 + 8) = v6[1];
      *(void *)v6[1] = v7;
      --*((void *)this + 23);
      operator delete(v6);
      uint64_t v8 = *((void *)this + 18);
      uint64_t v9 = *(std::__shared_weak_count **)(v8 + 16);
      if (v9)
      {
        uint64_t v9 = std::__shared_weak_count::lock(v9);
        uint64_t v10 = v9;
        if (v9) {
          uint64_t v9 = *(std::__shared_weak_count **)(v8 + 8);
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      BOOL isRegistrationLimitedAccess = SipStack::isRegistrationLimitedAccess((SipStack *)v9);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      if (isRegistrationLimitedAccess)
      {
        uint64_t v12 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))(v2);
        (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))(v2, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Dropping message in Limited Access mode", 39);
        *(unsigned char *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v12 + 17) = 0;
        uint64_t v13 = *(unsigned int *)(*((void *)this + 27) + 16);
        long long v20 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        v18[0] = &unk_1F20B2680;
        v18[1] = &SipResultDomain::_domain;
        int v19 = 503;
        SipMessageManager::generateError(this, v13, (const ImsResult *)v18);
        ImsResult::~ImsResult((ImsResult *)v18);
      }
      else
      {
        uint64_t v14 = (ImsPowerAssertion *)(*((void *)this + 27) + 56);
        uint64_t v15 = SipUserAgent::config(*((SipUserAgent **)this + 18));
        int v16 = SipTimers::timerValue((SipTimers *)(v15 + 512), (const SipTimer *)&SipTimers::kTimerF, 0);
        ImsPowerAssertion::initialize(v14, (double)(v16 + 30), 0, (uint64_t)v17);
        ImsResult::~ImsResult((ImsResult *)v17);
        SipMessageManager::OutgoingMessage::send(*((void **)this + 27));
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"send queue is empty", 19);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
    }
  }
}

void sub_1C54D3C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipMessageManager::handleAuthChallengeResponse(SipMessageManager *this, const SipAuthInfo *a2)
{
  uint64_t v3 = (SipRequest **)*((void *)this + 27);
  if (v3 && *((unsigned char *)v3 + 48))
  {
    SipAuthClient::addAuthorizationToRequest(*(SipAuthClient **)(*((void *)*v3 + 18) + 280), v3[3], 1, (uint64_t)v6);
    ImsResult::~ImsResult((ImsResult *)v6);
    SipMessageManager::OutgoingMessage::send(v3);
  }
  else
  {
    uint64_t v4 = (char *)this + 24;
    uint64_t v5 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((void *)this + 3) + 56))((char *)this + 24, a2);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))((char *)this + 24, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"received unexpected auth response.  Ignoring it, but checking queue.", 68);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    SipMessageManager::processSendQueue(this);
  }
}

void non-virtual thunk to'SipMessageManager::handleAuthChallengeResponse(SipMessageManager *this, const SipAuthInfo *a2)
{
}

void SipMessageManager::handleAuthChallengeTimeout(SipMessageManager *this, const SipAuthInfo *a2)
{
  uint64_t v3 = *((void *)this + 27);
  if (v3 && *(unsigned char *)(v3 + 48))
  {
    uint64_t v4 = (char *)this + 24;
    uint64_t v5 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((void *)this + 3) + 56))((char *)this + 24, a2);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))((char *)this + 24, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"auth challenge timed out.  Failing current message.", 51);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v6 = *(unsigned int *)(*((void *)this + 27) + 16);
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    v9[0] = &unk_1F20B2680;
    v9[1] = &SipResultDomain::_domain;
    int v10 = 401;
    SipMessageManager::generateError(this, v6, (const ImsResult *)v9);
    ImsResult::~ImsResult((ImsResult *)v9);
    SipMessageManager::processSendQueue(this);
  }
  else
  {
    uint64_t v7 = (char *)this + 24;
    uint64_t v8 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((void *)this + 3) + 56))((char *)this + 24, a2);
    (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))((char *)this + 24, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"received unexpected auth challenge timeout.  Ignoring it, but checking queue.", 77);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    SipMessageManager::processSendQueue(this);
  }
}

void sub_1C54D3FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipMessageManager::handleAuthChallengeTimeout(SipMessageManager *this, const SipAuthInfo *a2)
{
}

uint64_t SipMessageManager::handleResponse(SipMessageManager *this, const SipResponse *a2, void *a3)
{
  uint64_t v3 = *((void *)this + 27);
  if (!v3) {
    return 1;
  }
  if (*a3 != *(void *)(v3 + 32)) {
    return 1;
  }
  unsigned int v5 = *((_DWORD *)a2 + 22);
  if (v5 - 100 < 0x64) {
    return 1;
  }
  if (v5 != 401)
  {
    if (v5 - 200 <= 0x63)
    {
      uint64_t v10 = *((void *)this + 19);
      if (!v10) {
        goto LABEL_28;
      }
      uint64_t v11 = *((void *)this + 18);
      long long v12 = *(std::__shared_weak_count **)(v11 + 16);
      if (v12)
      {
        long long v13 = std::__shared_weak_count::lock(v12);
        if (v13) {
          uint64_t v14 = *(void *)(v11 + 8);
        }
        else {
          uint64_t v14 = 0;
        }
      }
      else
      {
        uint64_t v14 = 0;
        long long v13 = 0;
      }
      if (*(char *)(v14 + 4183) < 0) {
        std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)(v14 + 4160), *(void *)(v14 + 4168));
      }
      else {
        __p[0] = *(std::string *)(v14 + 4160);
      }
      (*(void (**)(uint64_t, std::string *, void))(*(void *)v10 + 40))(v10, __p, *(unsigned int *)(*((void *)this + 27) + 16));
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v3 = *((void *)this + 27);
      if (v3)
      {
LABEL_28:
        SipMessageManager::OutgoingMessage::~OutgoingMessage((SipMessageManager::OutgoingMessage *)v3);
        MEMORY[0x1C878E320]();
      }
      *((void *)this + 27) = 0;
      goto LABEL_30;
    }
    if (v5 < 0x12C)
    {
LABEL_30:
      SipMessageManager::processSendQueue(this);
      return 1;
    }
    goto LABEL_16;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 52);
  if (v7 > 1)
  {
LABEL_16:
    uint64_t v15 = *(unsigned int *)(v3 + 16);
    SipResultDomain::makeResult(a2, (uint64_t)__p);
    SipMessageManager::generateError(this, v15, (const ImsResult *)__p);
    goto LABEL_17;
  }
  *(unsigned char *)(v3 + 48) = 1;
  uint64_t v8 = *(std::__shared_weak_count **)(v3 + 40);
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    unsigned int v7 = *(_DWORD *)(v3 + 52);
  }
  *(_DWORD *)(v3 + 52) = v7 + 1;
  if ((SipAuthClient::handleUnauthorizedResponse(*(SipAuthClient **)(*((void *)this + 18) + 280), a2, (SipMessageManager *)((char *)this + 16)) & 1) == 0)
  {
    uint64_t v9 = *(unsigned int *)(*((void *)this + 27) + 16);
    SipResultDomain::makeResult(a2, (uint64_t)__p);
    SipMessageManager::generateError(this, v9, (const ImsResult *)__p);
LABEL_17:
    ImsResult::~ImsResult((ImsResult *)__p);
    goto LABEL_30;
  }
  return 1;
}

void sub_1C54D41EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'SipMessageManager::handleResponse(uint64_t a1, const SipResponse *a2, void *a3)
{
  return 1;
}

void SipMessageManager::deferError(uint64_t a1, int a2, const std::string *a3)
{
  uint64_t v6 = a1 + 24;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"deferring error: ", 17);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(const std::string *, uint64_t))(a3->__r_.__value_.__r.__words[0] + 16))(a3, v7);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  v8[2] = ___ZN17SipMessageManager10deferErrorEj9ImsResult_block_invoke;
  v8[3] = &__block_descriptor_tmp_47;
  v8[4] = a1;
  v9[18] = a2;
  ImsResult::ImsResult((ImsResult *)v9, a3);
  ims::performBlock((IMSClientManager *)v8);
  ImsResult::~ImsResult((ImsResult *)v9);
}

void sub_1C54D43D8(_Unwind_Exception *a1)
{
  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

SipMessageManager::OutgoingMessage *___ZN17SipMessageManager10deferErrorEj9ImsResult_block_invoke(uint64_t a1)
{
  return SipMessageManager::generateError(*(SipMessageManager **)(a1 + 32), *(unsigned int *)(a1 + 112), (const ImsResult *)(a1 + 40));
}

void SipMessageManager::handleTransactionError(SipMessageManager *a1, const ImsResult *a2, uint64_t a3)
{
  unsigned int v5 = *(void **)a3;
  if (*(void *)a3
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a3 + 8);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *((void *)a1 + 27);
  if (v8 && v5 == *(void **)(v8 + 32)) {
    SipMessageManager::generateError(a1, *(unsigned int *)(v8 + 16), a2);
  }
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C54D44E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipMessageManager::handleTransactionError(uint64_t a1, const ImsResult *a2, uint64_t a3)
{
}

void SipMessageManager::transactionTerminated(SipMessageManager::OutgoingMessage **a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2
  {
    unsigned int v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v6 = a1[27];
  if (v6 && v3 == *((void **)v6 + 4))
  {
    SipMessageManager::OutgoingMessage::~OutgoingMessage(a1[27]);
    MEMORY[0x1C878E320]();
    a1[27] = 0;
    SipMessageManager::processSendQueue((SipMessageManager *)a1);
  }
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C54D45FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipMessageManager::transactionTerminated(uint64_t a1, uint64_t a2)
{
}

void SipMessageManager::send(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 144);
  std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v1 + 16));
  ims::AccessNetwork::isWifi((ims::AccessNetwork *)(*(void *)(v1 + 8) + 3160));
  SipMessageEncodingMap::createRequestFromTemplate();
}

void sub_1C54D4D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipMessageManager::send(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const std::string *a5, uint64_t a6)
{
  uint64_t Body = SipMessageEncodingMap::createBody((SipMessageEncodingMap *)(*(void *)(a1 + 144) + 288), a5);
  if (Body)
  {
    if (*(double *)(a6 + 40) > 0.0) {
      operator new();
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)Body + 88))(Body, a4, *(void *)(a1 + 144) + 288))SipMessageManager::send(a1); {
  }
    }
  else
  {
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v11 = a1 + 24;
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"unknown content type ", 21);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(void *)v13 + 32))(v13, a5);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
  }
  return 0;
}

void sub_1C54D5424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (*(char *)(v13 - 137) < 0) {
    operator delete(*(void **)(v13 - 160));
  }
  if (*(char *)(v13 - 113) < 0) {
    operator delete(*(void **)(v13 - 136));
  }
  if (*(char *)(v13 - 89) < 0) {
    operator delete(*(void **)(v13 - 112));
  }
  _Unwind_Resume(exception_object);
}

void SipMessageManager::logPrefix(SipMessageManager *this, ImsOutStream *a2)
{
  uint64_t v3 = *((void *)this + 18);
  if (v3
    && (unsigned int v5 = *(std::__shared_weak_count **)(v3 + 16)) != 0
    && (uint64_t v6 = std::__shared_weak_count::lock(v5)) != 0
    && (uint64_t v7 = *(void *)(v3 + 8), std::__shared_weak_count::__release_shared[abi:ne180100](v6), v7))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"SipMessageManager[", 18);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t v8 = *((void *)this + 18);
    uint64_t v9 = *(std::__shared_weak_count **)(v8 + 16);
    if (v9)
    {
      uint64_t v10 = std::__shared_weak_count::lock(v9);
      if (v10) {
        uint64_t v11 = *(void *)(v8 + 8);
      }
      else {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v10 = 0;
    }
    if (*(char *)(v11 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 4160), *(void *)(v11 + 4168));
    }
    else {
      std::string __p = *(std::string *)(v11 + 4160);
    }
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 32))(a2, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"]: ", 3);
    *((unsigned char *)a2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"SipMessageManager: ", 19);
    *((unsigned char *)a2 + 17) = 0;
  }
}

void sub_1C54D56B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipMessageManager::logPrefix(SipMessageManager *this, ImsOutStream *a2)
{
}

void SipMessageManager::~SipMessageManager(SipMessageManager *this)
{
  SipMessageManager::~SipMessageManager(this);
  JUMPOUT(0x1C878E320);
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_1F20D58A8;
  *((void *)this + 1) = &unk_1F20D5908;
  *((void *)this + 2) = &unk_1F20D5950;
  *((void *)this + 3) = &unk_1F20D5980;
  if (*((char *)this + 271) < 0) {
    operator delete(*((void **)this + 31));
  }
  if (*((char *)this + 247) < 0) {
    operator delete(*((void **)this + 28));
  }
  std::__tree<unsigned int>::destroy((uint64_t)this + 192, *((void **)this + 25));
  std::__list_imp<unsigned long long>::clear((void *)this + 21);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this + 3) = &unk_1F20C9CA0;
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
}

void non-virtual thunk to'SipMessageManager::~SipMessageManager(SipMessageManager *this)
{
}

{
  uint64_t vars8;

  SipMessageManager::~SipMessageManager((SipMessageManager *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  SipMessageManager::~SipMessageManager((SipMessageManager *)((char *)this - 16));
}

{
  uint64_t vars8;

  SipMessageManager::~SipMessageManager((SipMessageManager *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

{
  SipMessageManager::~SipMessageManager((SipMessageManager *)((char *)this - 24));
}

{
  uint64_t vars8;

  SipMessageManager::~SipMessageManager((SipMessageManager *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

void SipSessionServerUnconfirmedState::handleOutgoingResponse(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 216);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void **)(a1 + 208);
      if (v9)
      {
        SipSession::serverInviteTransaction(*(SipSession **)(a1 + 208), &v22);
        uint64_t v10 = *a3;
        uint64_t v11 = v22;
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        if (v10 == v11)
        {
          unsigned int v12 = a2[22];
          if (v12 - 200 > 0x63)
          {
            if (v12 >= 0x12C)
            {
              uint64_t v15 = (std::__shared_weak_count *)v9[98];
              if (v15)
              {
                uint64_t v16 = v9[97];
                char v17 = 1;
                atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                uint64_t v18 = std::__shared_weak_count::lock(v15);
                if (!v18) {
                  uint64_t v16 = 0;
                }
                std::__shared_weak_count::__release_weak(v15);
                bzero(&v22, 0x250uLL);
                uint64_t v20 = v16;
                long long v21 = v18;
                if (v18)
                {
                  char v17 = 0;
                  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                bzero(&v22, 0x250uLL);
                uint64_t v18 = 0;
                uint64_t v20 = 0;
                long long v21 = 0;
                char v17 = 1;
              }
              BambiCallSessionTerminatedEvent::BambiCallSessionTerminatedEvent(&v22, &v20);
              if (v21) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v21);
              }
              BambiCallSessionTerminationBaseEvent::setReasonFromOutgoingResponse((uint64_t)&v22, a2);
              int v19 = (const BambiCallTerminationReason *)v9[198];
              if (v19) {
                BambiCallSessionTerminationBaseEvent::setReason((BambiCallSessionTerminationBaseEvent *)&v22, v19);
              }
              SipSessionState::terminateSessionWithEvent((SipSessionState *)a1, (BambiCallEvent *)&v22);
              BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&v22);
              if ((v17 & 1) == 0) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v18);
              }
            }
          }
          else
          {
            uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
            if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 24))(v13) <= 5)
            {
              uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 6);
            }
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C54D5B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)va);
  if ((v5 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void SipSessionServerInviteState::handleOutgoingResponse(void *a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[27];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = (SipSession *)a1[26];
      if (v9)
      {
        SipSession::serverInviteTransaction(v9, &v19);
        uint64_t v10 = *a3;
        uint64_t v11 = v19;
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        if (v10 == v11)
        {
          if ((a2[22] - 200) >= 0xFFFFFF9D)
          {
            uint64_t v14 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)a2);
            if (v14)
            {
              uint64_t v15 = SipUriHeader::tag(v14);
              uint64_t v16 = *((unsigned __int8 *)v15 + 23);
              if ((v16 & 0x80u) != 0) {
                uint64_t v16 = *((void *)v15 + 1);
              }
              if (v16)
              {
                uint64_t v17 = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
                (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 5);
              }
            }
          }
          else
          {
            uint64_t v12 = *a3;
            uint64_t v13 = (std::__shared_weak_count *)a3[1];
            v18[0] = v12;
            v18[1] = (uint64_t)v13;
            if (v13) {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipSessionServerUnconfirmedState::handleOutgoingResponse((uint64_t)a1, a2, v18);
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C54D5CF4(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *SipMessage::header<SipToHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), SipHeader::kHeaderTo);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

void SipSessionServerCanceledState::handleOutgoingResponse(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 216);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void **)(a1 + 208);
      if (v9)
      {
        SipSession::serverInviteTransaction(*(SipSession **)(a1 + 208), &v27);
        uint64_t v10 = *a3;
        uint64_t v11 = v27;
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        if (v10 == v11 && a2[22] >= 0x12Cu)
        {
          uint64_t v12 = (std::__shared_weak_count *)v9[98];
          if (v12)
          {
            uint64_t v13 = v9[97];
            char v14 = 1;
            atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            uint64_t v15 = std::__shared_weak_count::lock(v12);
            if (!v15) {
              uint64_t v13 = 0;
            }
            std::__shared_weak_count::__release_weak(v12);
            bzero(&v27, 0x250uLL);
            uint64_t v25 = v13;
            uint64_t v26 = v15;
            if (v15)
            {
              char v14 = 0;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            bzero(&v27, 0x250uLL);
            uint64_t v15 = 0;
            uint64_t v25 = 0;
            uint64_t v26 = 0;
            char v14 = 1;
          }
          BambiCallSessionTerminatedEvent::BambiCallSessionTerminatedEvent(&v27, &v25);
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          uint64_t v16 = v9[199];
          if (v16)
          {
            LODWORD(v28) = *(_DWORD *)(v16 + 8);
            uint64_t v18 = *(void *)(v16 + 16);
            uint64_t v17 = *(std::__shared_weak_count **)(v16 + 24);
            if (v17) {
              atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v19 = v30;
            uint64_t v29 = v18;
            uint64_t v30 = v17;
            if (v19) {
              std::__shared_weak_count::__release_weak(v19);
            }
            uint64_t v31 = *(void *)(v16 + 32);
            char v20 = *(unsigned char *)(v16 + 56);
            long long v32 = *(_OWORD *)(v16 + 40);
            char v33 = v20;
            std::string::operator=(&v34, (const std::string *)(v16 + 64));
            std::string::operator=(&v35, (const std::string *)(v16 + 88));
            int v36 = *(_DWORD *)(v16 + 112);
            std::string::operator=(&v37, (const std::string *)(v16 + 120));
            int v21 = *(_DWORD *)(v16 + 144);
            char v39 = *(unsigned char *)(v16 + 148);
            int v38 = v21;
            std::string::operator=(&v40, (const std::string *)(v16 + 152));
            int v41 = *(_DWORD *)(v16 + 176);
            SipUri::operator=((SipUri *)&v42, v16 + 184);
            uint64_t v22 = (*(uint64_t (**)(void *))(*v9 + 64))(v9);
            (*(void (**)(void *, uint64_t))(*v9 + 16))(v9, v22);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Using existing CancelReason: ", 29);
            *(unsigned char *)(v22 + 17) = 0;
            if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v24, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
            }
            else {
              std::string v24 = v35;
            }
            (*(void (**)(uint64_t, std::string *))(*(void *)v22 + 32))(v22, &v24);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)": ", 2);
            *(unsigned char *)(v22 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v22 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)": ", 2);
            *(unsigned char *)(v22 + 17) = 0;
            if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__p, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
            }
            else {
              std::string __p = v34;
            }
            (*(void (**)(uint64_t, std::string *))(*(void *)v22 + 32))(v22, &__p);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v22 + 17) = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v24.__r_.__value_.__l.__data_);
            }
            if (*((void *)&v32 + 1)) {
              (*(void (**)(void))(**((void **)&v32 + 1) + 8))(*((void *)&v32 + 1));
            }
            *((void *)&v32 + 1) = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 32))(a2);
          }
          else
          {
            BambiCallSessionTerminationBaseEvent::setReasonFromOutgoingResponse((uint64_t)&v27, a2);
            LODWORD(v32) = 5;
          }
          SipSessionState::terminateSessionWithEvent((SipSessionState *)a1, (BambiCallEvent *)&v27);
          BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&v27);
          if ((v14 & 1) == 0) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C54D61D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&a24);
  if ((v26 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void SipSessionServerTerminateAfterAckState::enterState(int8x8_t *this)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)this[27];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int8x8_t v5 = this[26];
      if (v5)
      {
        int8x8_t v7 = this[24];
        uint64_t v6 = (std::__shared_weak_count *)this[25];
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = *(void *)(*(void *)&v5 + 248);
        if (v8 && (uint64_t v9 = *(void *)(v8 + 216)) != 0) {
          uint64_t v10 = *(SipUserAgent **)(v9 + 136);
        }
        else {
          uint64_t v10 = 0;
        }
        if (*(_DWORD *)(SipUserAgent::config(v10) + 604))
        {
          if (v6) {
            atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v11 = operator new(0x20uLL);
          void *v11 = &unk_1F20D5AE0;
          v11[1] = this;
          v11[2] = v7;
          v11[3] = v6;
          v15[3] = v11;
          uint64_t v12 = *(void *)(*(void *)&v5 + 248);
          if (v12 && (uint64_t v13 = *(void *)(v12 + 216)) != 0) {
            char v14 = *(SipUserAgent **)(v13 + 136);
          }
          else {
            char v14 = 0;
          }
          SipUserAgent::config(v14);
          SipTimerContainer::startTimer(this + 3, (uint64_t)&kWaitForAckBeforeEndingCallTimerName);
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v15);
        }
        if (v6)
        {
          std::__shared_weak_count::__release_weak(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54D63B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void SipSessionServerTerminateAfterAckState::handleTimer(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2[23];
  }
  else {
    uint64_t v3 = *((void *)a2 + 1);
  }
  uint64_t v4 = qword_1EBBDBA28;
  if (byte_1EBBDBA37 >= 0) {
    uint64_t v4 = byte_1EBBDBA37;
  }
  if (v3 != v4) {
    return;
  }
  if (byte_1EBBDBA37 >= 0) {
    uint64_t v6 = &kWaitForAckBeforeEndingCallTimerName;
  }
  else {
    uint64_t v6 = (uint64_t *)kWaitForAckBeforeEndingCallTimerName;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v6, *((void *)a2 + 1))) {
      return;
    }
    goto LABEL_16;
  }
  if (!a2[23])
  {
LABEL_16:
    int8x8_t v7 = (std::__shared_weak_count *)a1[27];
    if (v7)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = a1[26];
        if (v10)
        {
          uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v10 + 64))(a1[26]);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"still haven't received an ACK. Terminating our call but keeping the SIP session around.", 87);
          *(unsigned char *)(v11 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v11 + 17) = 0;
          uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 48))(a1);
          SipSession::performPendingTermination(v10, v12, 0);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    return;
  }
  while (*a2 == *(unsigned __int8 *)v6)
  {
    ++a2;
    uint64_t v6 = (uint64_t *)((char *)v6 + 1);
    if (!--v2) {
      goto LABEL_16;
    }
  }
}

void sub_1C54D65D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipSessionServerTerminateAfterAckState::handleRequest(uint64_t a1, SipRequest *a2, uint64_t *a3)
{
  uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
  uint64_t v7 = v6[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v6[23];
  }
  else {
    uint64_t v8 = *((void *)v6 + 1);
  }
  if (v8 == 3)
  {
    if ((v7 & 0x80) == 0)
    {
      if (v6[23])
      {
        uint64_t v9 = &SipRequest::kMethodBye;
        while (*v6 == *(unsigned __int8 *)v9)
        {
          ++v6;
          uint64_t v9 = (long long *)((char *)v9 + 1);
          if (!--v7) {
            goto LABEL_16;
          }
        }
        goto LABEL_12;
      }
LABEL_16:
      uint64_t v13 = *(std::__shared_weak_count **)(a1 + 216);
      if (!v13) {
        return 0;
      }
      char v14 = std::__shared_weak_count::lock(v13);
      if (!v14) {
        return 0;
      }
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)(a1 + 208);
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v16 + 64))(*(void *)(a1 + 208));
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"received a BYE while waiting to send one of our own. Terminating session.", 73);
        *(unsigned char *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v17 + 17) = 0;
        uint64_t v18 = (std::__shared_weak_count *)a3[1];
        uint64_t v21 = *a3;
        uint64_t v22 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = SipSessionState::handleRequest(a1, a2, &v21);
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      return v11;
    }
    if (!memcmp(*(const void **)v6, &SipRequest::kMethodBye, *((void *)v6 + 1))) {
      goto LABEL_16;
    }
  }
LABEL_12:
  uint64_t v10 = (void *)*a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipServerTransaction::sendResponse(v10, 487, &__p);
  ImsResult::~ImsResult((ImsResult *)v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C54D6814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v17 = *(std::__shared_weak_count **)(v15 - 56);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void SipSessionServerTerminateAfterAckState::handleAck(SipSessionServerTerminateAfterAckState *this, const SipRequest *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int8x8_t v5 = v4;
      uint64_t v6 = (SipSession *)*((void *)this + 26);
      if (v6)
      {
        uint64_t v7 = (*(uint64_t (**)(SipSession *))(*(void *)v6 + 64))(v6);
        (*(void (**)(SipSession *, uint64_t))(*(void *)v6 + 16))(v6, v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"received ACK, time to send pending BYE", 38);
        *(unsigned char *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v7 + 17) = 0;
        SipSession::sendPendingBye(v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C54D6974(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipSessionServerUnconfirmedState::~SipSessionServerUnconfirmedState(SipSessionServerUnconfirmedState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipSessionServerUnconfirmedState::~SipSessionServerUnconfirmedState(SipSessionServerUnconfirmedState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionServerUnconfirmedState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipSessionServerInviteState::~SipSessionServerInviteState(SipSessionServerInviteState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionServerInviteState::id(SipSessionServerInviteState *this)
{
  return 3;
}

void non-virtual thunk to'SipSessionServerInviteState::~SipSessionServerInviteState(SipSessionServerInviteState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionServerInviteState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipSessionServerCanceledState::~SipSessionServerCanceledState(SipSessionServerCanceledState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionServerCanceledState::id(SipSessionServerCanceledState *this)
{
  return 9;
}

void non-virtual thunk to'SipSessionServerCanceledState::~SipSessionServerCanceledState(SipSessionServerCanceledState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionServerCanceledState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipSessionServerTerminateAfterAckState::~SipSessionServerTerminateAfterAckState(SipSessionServerTerminateAfterAckState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionServerTerminateAfterAckState::id(SipSessionServerTerminateAfterAckState *this)
{
  return 11;
}

void non-virtual thunk to'SipSessionServerTerminateAfterAckState::~SipSessionServerTerminateAfterAckState(SipSessionServerTerminateAfterAckState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionServerTerminateAfterAckState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D5AE0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D5AE0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  std::string::size_type result = (char *)operator new(0x20uLL);
  *(void *)std::string::size_type result = &unk_1F20D5AE0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D5AE0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 152))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C54D6DE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_SipSessionServerStates_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&kWaitForAckBeforeEndingCallTimerName, "WaitForAckBeforeEndingCallTimer");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &kWaitForAckBeforeEndingCallTimerName, &dword_1C51D1000);
}

uint64_t std::map<XcapCDCondition::Condition,std::string const>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string const>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<XcapCDCondition::Media,std::string const>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void XcapCDCondition::XcapCDCondition(XcapCDCondition *this)
{
  *(void *)this = &unk_1F20C81E8;
  uint64_t v2 = (char *)this + 8;
  unsigned __int8 v4 = 1;
  uint64_t v5 = (char *)&v4;
  uint64_t v3 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v4, (uint64_t)&std::piecewise_construct, &v5);
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v2, (long long *)"conditions", (long long *)(v3 + 5));
  *(void *)this = &unk_1F20D5EE0;
  *((void *)this + 1) = &unk_1F20D5F58;
  *((_WORD *)this + 32) = 256;
  *((unsigned char *)this + 66) = 0;
}

void XcapCDCondition::clone(XcapCDCondition *this)
{
}

void sub_1C54D704C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40BF0C0B6ALL);
  _Unwind_Resume(a1);
}

uint64_t XcapCDCondition::asString@<X0>(XcapCDCondition *this@<X0>, void *a2@<X8>)
{
  uint64_t v33 = 0;
  long long v31 = 0u;
  memset(v32, 0, sizeof(v32));
  *(_OWORD *)std::string __p = 0u;
  long long v30 = 0u;
  memset(v28, 0, sizeof(v28));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
  unsigned __int8 v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Conditions:[", 12);
  uint64_t v5 = std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCDCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCDCondition::Condition const&>,std::tuple<>>(*((unsigned char *)this + 64), (unsigned char *)this + 64);
  uint64_t v8 = v5[5];
  uint64_t v6 = v5 + 5;
  uint64_t v7 = v8;
  int v9 = *((char *)v6 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (uint64_t)v6;
  }
  else {
    uint64_t v10 = v7;
  }
  if (v9 >= 0) {
    uint64_t v11 = *((unsigned __int8 *)v6 + 23);
  }
  else {
    uint64_t v11 = v6[1];
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v10, v11);
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", Media: ", 9);
  unsigned int v14 = *((unsigned __int8 *)this + 66);
  uint64_t v15 = (uint64_t **)&qword_1EBBDC328;
  uint64_t v16 = qword_1EBBDC328;
  if (qword_1EBBDC328)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v17 = (uint64_t *)v16;
        unsigned int v18 = *(unsigned __int8 *)(v16 + 32);
        if (v18 <= v14) {
          break;
        }
        uint64_t v16 = *v17;
        uint64_t v15 = (uint64_t **)v17;
        if (!*v17) {
          goto LABEL_15;
        }
      }
      if (v18 >= v14) {
        break;
      }
      uint64_t v16 = v17[1];
      if (!v16)
      {
        uint64_t v15 = (uint64_t **)(v17 + 1);
        goto LABEL_15;
      }
    }
  }
  else
  {
    uint64_t v17 = &qword_1EBBDC328;
LABEL_15:
    uint64_t v19 = operator new(0x40uLL);
    v19[32] = v14;
    *((void *)v19 + 6) = 0;
    *((void *)v19 + 7) = 0;
    *((void *)v19 + 5) = 0;
    std::__tree<std::__value_type<XcapCDCondition::Media,std::string const>,std::__map_value_compare<XcapCDCondition::Media,std::__value_type<XcapCDCondition::Media,std::string const>,std::less<XcapCDCondition::Media>,true>,std::allocator<std::__value_type<XcapCDCondition::Media,std::string const>>>::__insert_node_at((uint64_t)v17, v15, (uint64_t *)v19);
    uint64_t v17 = (uint64_t *)v19;
  }
  uint64_t v22 = v17[5];
  uint64_t v21 = v17 + 5;
  uint64_t v20 = v22;
  int v23 = *((char *)v21 + 23);
  if (v23 >= 0) {
    uint64_t v24 = (uint64_t)v21;
  }
  else {
    uint64_t v24 = v20;
  }
  if (v23 >= 0) {
    uint64_t v25 = *((unsigned __int8 *)v21 + 23);
  }
  else {
    uint64_t v25 = v21[1];
  }
  char v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v24, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"], Active: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v28 + 8, a2);
  *(void *)&v28[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v28 + *(void *)(*(void *)&v28[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v28[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v32);
}

void sub_1C54D72E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void XcapCDCondition::parseChild(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  memset(&__n, 0, sizeof(__n));
  XcapNs::stripXcapNs(a2, &__n);
  uint64_t v6 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  std::string::size_type size = __n.__r_.__value_.__l.__size_;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = __n.__r_.__value_.__l.__size_;
  }
  if (v8 != 5)
  {
    if (v8 == 16)
    {
      if ((*((unsigned char *)&__n.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        uint64_t v13 = (const std::string::value_type *)__n.__r_.__value_.__r.__words[0];
        if (memcmp(__n.__r_.__value_.__l.__data_, "rule-deactivated", __n.__r_.__value_.__l.__size_)) {
          goto LABEL_24;
        }
      }
      else if (*((unsigned char *)&__n.__r_.__value_.__s + 23))
      {
        p_n = &__n;
        uint64_t v10 = "rule-deactivated";
        while (p_n->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
        {
          p_n = (std::string *)((char *)p_n + 1);
          ++v10;
          if (!--v6) {
            goto LABEL_22;
          }
        }
        goto LABEL_18;
      }
LABEL_22:
      a1[65] = 0;
      goto LABEL_126;
    }
LABEL_18:
    if ((*((unsigned char *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      std::string __s1 = __n;
      goto LABEL_25;
    }
    uint64_t v13 = (const std::string::value_type *)__n.__r_.__value_.__r.__words[0];
LABEL_24:
    std::string::__init_copy_ctor_external(&__s1, v13, size);
LABEL_25:
    LOBYTE(v74) = 1;
    unsigned int v14 = std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCDCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCDCondition::Condition const&>,std::tuple<>>(1u, &v74);
    char v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v16 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v16 = __s1.__r_.__value_.__l.__size_;
    }
    uint64_t v17 = *((unsigned __int8 *)v14 + 63);
    int v18 = (char)v17;
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = v14[6];
    }
    if (v16 != v17) {
      goto LABEL_68;
    }
    uint64_t v21 = v14[5];
    uint64_t v19 = v14 + 5;
    uint64_t v20 = (unsigned __int8 *)v21;
    if (v18 >= 0) {
      uint64_t v22 = v19;
    }
    else {
      uint64_t v22 = (uint64_t *)v20;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__s1.__r_.__value_.__l.__data_, v22, __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_68;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      uint64_t v24 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v22)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        uint64_t v22 = (uint64_t *)((char *)v22 + 1);
        if (!--v24) {
          goto LABEL_83;
        }
      }
LABEL_68:
      LOBYTE(v74) = 2;
      int v41 = std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCDCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCDCondition::Condition const&>,std::tuple<>>(2u, &v74);
      char v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v42 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v42 = __s1.__r_.__value_.__l.__size_;
      }
      uint64_t v43 = *((unsigned __int8 *)v41 + 63);
      int v44 = (char)v43;
      if ((v43 & 0x80u) != 0) {
        uint64_t v43 = v41[6];
      }
      if (v42 != v43) {
        goto LABEL_85;
      }
      uint64_t v47 = v41[5];
      v45 = v41 + 5;
      size_t v46 = (unsigned __int8 *)v47;
      if (v44 >= 0) {
        long long v48 = v45;
      }
      else {
        long long v48 = (uint64_t *)v46;
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(__s1.__r_.__value_.__l.__data_, v48, __s1.__r_.__value_.__l.__size_)) {
          goto LABEL_85;
        }
      }
      else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
      {
        unint64_t v49 = &__s1;
        uint64_t v50 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        while (v49->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v48)
        {
          unint64_t v49 = (std::string *)((char *)v49 + 1);
          long long v48 = (uint64_t *)((char *)v48 + 1);
          if (!--v50) {
            goto LABEL_100;
          }
        }
LABEL_85:
        LOBYTE(v74) = 3;
        size_t v52 = std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCDCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCDCondition::Condition const&>,std::tuple<>>(3u, &v74);
        char v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v53 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v53 = __s1.__r_.__value_.__l.__size_;
        }
        uint64_t v54 = *((unsigned __int8 *)v52 + 63);
        int v55 = (char)v54;
        if ((v54 & 0x80u) != 0) {
          uint64_t v54 = v52[6];
        }
        if (v53 == v54)
        {
          uint64_t v58 = v52[5];
          long long v56 = v52 + 5;
          uint64_t v57 = (unsigned __int8 *)v58;
          if (v55 >= 0) {
            v59 = v56;
          }
          else {
            v59 = (uint64_t *)v57;
          }
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
            {
              int v60 = &__s1;
              uint64_t v61 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
              while (v60->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v59)
              {
                int v60 = (std::string *)((char *)v60 + 1);
                v59 = (uint64_t *)((char *)v59 + 1);
                if (!--v61) {
                  goto LABEL_117;
                }
              }
              goto LABEL_102;
            }
            goto LABEL_117;
          }
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v59, __s1.__r_.__value_.__l.__size_))
          {
LABEL_117:
            char v62 = 3;
            goto LABEL_118;
          }
        }
LABEL_102:
        LOBYTE(v74) = 4;
        uint64_t v63 = std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCDCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCDCondition::Condition const&>,std::tuple<>>(4u, &v74);
        uint64_t v64 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        char v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v65 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v65 = __s1.__r_.__value_.__l.__size_;
        }
        uint64_t v66 = *((unsigned __int8 *)v63 + 63);
        int v67 = (char)v66;
        if ((v66 & 0x80u) != 0) {
          uint64_t v66 = v63[6];
        }
        if (v65 != v66) {
          goto LABEL_119;
        }
        uint64_t v70 = v63[5];
        uint64_t v68 = v63 + 5;
        v69 = (unsigned __int8 *)v70;
        if (v67 >= 0) {
          uint64_t v71 = v68;
        }
        else {
          uint64_t v71 = (uint64_t *)v69;
        }
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (memcmp(__s1.__r_.__value_.__l.__data_, v71, __s1.__r_.__value_.__l.__size_))
          {
LABEL_124:
            std::string v40 = (void *)__s1.__r_.__value_.__r.__words[0];
            goto LABEL_125;
          }
        }
        else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
        {
          v72 = &__s1;
          while (v72->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v71)
          {
            v72 = (std::string *)((char *)v72 + 1);
            uint64_t v71 = (uint64_t *)((char *)v71 + 1);
            if (!--v64) {
              goto LABEL_122;
            }
          }
LABEL_119:
          if ((v15 & 0x80) == 0) {
            goto LABEL_126;
          }
          goto LABEL_124;
        }
LABEL_122:
        char v51 = 4;
LABEL_123:
        a1[64] = v51;
        if ((v15 & 0x80) == 0) {
          goto LABEL_126;
        }
        goto LABEL_124;
      }
LABEL_100:
      char v62 = 2;
LABEL_118:
      a1[64] = v62;
      goto LABEL_119;
    }
LABEL_83:
    char v51 = 1;
    goto LABEL_123;
  }
  if ((*((unsigned char *)&__n.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    uint64_t v13 = (const std::string::value_type *)__n.__r_.__value_.__r.__words[0];
    if (memcmp(__n.__r_.__value_.__l.__data_, "media", __n.__r_.__value_.__l.__size_)) {
      goto LABEL_24;
    }
  }
  else if (*((unsigned char *)&__n.__r_.__value_.__s + 23))
  {
    uint64_t v11 = &__n;
    uint64_t v12 = "media";
    while (v11->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v12)
    {
      uint64_t v11 = (std::string *)((char *)v11 + 1);
      ++v12;
      if (!--v6) {
        goto LABEL_40;
      }
    }
    goto LABEL_18;
  }
LABEL_40:
  v74 = 0;
  size_t v75 = 0;
  uint64_t v76 = 0;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, a3, &v74);
  uint64_t v25 = &qword_1EBBDC328;
  while (1)
  {
    char v26 = (uint64_t *)*v25;
    if (!*v25) {
      break;
    }
    uint64_t v25 = (uint64_t *)*v25;
    if (!*((unsigned char *)v26 + 32)) {
      goto LABEL_45;
    }
  }
  uint64_t v27 = operator new(0x40uLL);
  v27[32] = 0;
  *((void *)v27 + 6) = 0;
  *((void *)v27 + 7) = 0;
  *((void *)v27 + 5) = 0;
  std::__tree<std::__value_type<XcapCDCondition::Media,std::string const>,std::__map_value_compare<XcapCDCondition::Media,std::__value_type<XcapCDCondition::Media,std::string const>,std::less<XcapCDCondition::Media>,true>,std::allocator<std::__value_type<XcapCDCondition::Media,std::string const>>>::__insert_node_at((uint64_t)v25, (uint64_t **)v25, (uint64_t *)v27);
  uint64_t v25 = (uint64_t *)v27;
LABEL_45:
  uint64_t v30 = v25[5];
  uint64_t v29 = v25 + 5;
  uint64_t v28 = (uint64_t *)v30;
  int v31 = *((char *)v29 + 23);
  int v32 = SHIBYTE(v76);
  uint64_t v33 = v74;
  if (v76 >= 0) {
    size_t v34 = HIBYTE(v76);
  }
  else {
    size_t v34 = v75;
  }
  if (v76 >= 0) {
    std::string v35 = &v74;
  }
  else {
    std::string v35 = v74;
  }
  if (v31 >= 0) {
    size_t v36 = *((unsigned __int8 *)v29 + 23);
  }
  else {
    size_t v36 = v29[1];
  }
  if (v31 >= 0) {
    std::string v37 = v29;
  }
  else {
    std::string v37 = v28;
  }
  if (v36 >= v34) {
    size_t v38 = v34;
  }
  else {
    size_t v38 = v36;
  }
  if (memcmp(v35, v37, v38) || v36 != v34) {
    a1[66] = 1;
  }
  if (v32 < 0)
  {
    std::string v40 = v33;
LABEL_125:
    operator delete(v40);
  }
LABEL_126:
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__n.__r_.__value_.__l.__data_);
  }
}

void sub_1C54D77C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void XcapCDCondition::constructTree(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  bambi::XmlTreeItem::makeNode(a1);
}

void sub_1C54D79AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::string::size_type v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'XcapCDCondition::constructTree(void *a1@<X8>)
{
}

void XcapCDCondition::~XcapCDCondition(void **this)
{
}

{
  uint64_t vars8;

  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'XcapCDCondition::~XcapCDCondition(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this);
  JUMPOUT(0x1C878E320);
}

uint64_t *std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)_MergedGlobals_20)
  {
    _MergedGlobals_20 = *(void *)_MergedGlobals_20;
    a3 = *a2;
  }
  std::string::size_type result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBBDC310, a3);
  ++qword_1EBBDC318;
  return result;
}

uint64_t *std::__tree<std::__value_type<XcapCDCondition::Media,std::string const>,std::__map_value_compare<XcapCDCondition::Media,std::__value_type<XcapCDCondition::Media,std::string const>,std::less<XcapCDCondition::Media>,true>,std::allocator<std::__value_type<XcapCDCondition::Media,std::string const>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)qword_1EBBDC320)
  {
    qword_1EBBDC320 = *(void *)qword_1EBBDC320;
    a3 = *a2;
  }
  std::string::size_type result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBBDC328, a3);
  ++qword_1EBBDC330;
  return result;
}

uint64_t *std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCDCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCDCondition::Condition const&>,std::tuple<>>(unsigned __int8 a1, unsigned char *a2)
{
  uint64_t v3 = (uint64_t **)&qword_1EBBDC310;
  uint64_t v4 = qword_1EBBDC310;
  if (qword_1EBBDC310)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (uint64_t *)v4;
        unsigned int v6 = *(unsigned __int8 *)(v4 + 32);
        if (v6 <= a1) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t v3 = (uint64_t **)v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      if (v6 >= a1) {
        break;
      }
      uint64_t v4 = v5[1];
      if (!v4)
      {
        uint64_t v3 = (uint64_t **)(v5 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v5 = &qword_1EBBDC310;
LABEL_9:
    uint64_t v7 = operator new(0x40uLL);
    v7[32] = *a2;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 5) = 0;
    std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__insert_node_at((uint64_t)v5, v3, (uint64_t *)v7);
    return (uint64_t *)v7;
  }
  return v5;
}

uint64_t _GLOBAL__sub_I_XcapCDCondition_cpp()
{
  v72[3] = *MEMORY[0x1E4F143B8];
  LOBYTE(v59[0]) = 0;
  std::string::basic_string[abi:ne180100]<0>(v60, "unconditional");
  LOBYTE(v6bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 1;
  std::string::basic_string[abi:ne180100]<0>(v62, "busy");
  LOBYTE(v63) = 2;
  std::string::basic_string[abi:ne180100]<0>(v64, "no-answer");
  LOBYTE(v65) = 3;
  std::string::basic_string[abi:ne180100]<0>(v66, "not-reachable");
  LOBYTE(v67) = 4;
  std::string::basic_string[abi:ne180100]<0>(v68, "not-registered");
  char v69 = 5;
  std::string::basic_string[abi:ne180100]<0>(v70, "all");
  char v71 = 6;
  std::string::basic_string[abi:ne180100]<0>(v72, "allConditional");
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  qword_1EBBDC318 = 0;
  qword_1EBBDC310 = 0;
  uint64_t v2 = &qword_1EBBDC310;
  _MergedGlobals_20 = (uint64_t)&qword_1EBBDC310;
  while (1)
  {
    uint64_t v3 = (unsigned __int8 *)&v59[16 * v1];
    unsigned int v4 = *v3;
    if (v2 == &qword_1EBBDC310)
    {
      unsigned int v6 = &qword_1EBBDC310;
LABEL_10:
      if (v0)
      {
        std::string::size_type v8 = (uint64_t **)(v6 + 1);
        if (v6[1]) {
          goto LABEL_26;
        }
      }
      else
      {
LABEL_21:
        std::string::size_type v8 = (uint64_t **)&qword_1EBBDC310;
        unsigned int v6 = &qword_1EBBDC310;
      }
LABEL_22:
      uint64_t v11 = (char *)operator new(0x40uLL);
      v11[32] = v4;
      uint64_t v12 = (std::string *)(v11 + 40);
      uint64_t v13 = &v59[16 * v1];
      uint64_t v14 = (const std::string::value_type **)(v13 + 4);
      if ((char)v3[31] < 0)
      {
        std::string::__init_copy_ctor_external(v12, *v14, *((void *)v13 + 2));
      }
      else
      {
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)v14;
        *((void *)v11 + 7) = *((void *)v13 + 3);
      }
      std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__insert_node_at((uint64_t)v6, v8, (uint64_t *)v11);
      goto LABEL_26;
    }
    uint64_t v5 = (uint64_t *)v0;
    if (v0)
    {
      do
      {
        unsigned int v6 = v5;
        uint64_t v5 = (uint64_t *)v5[1];
      }
      while (v5);
    }
    else
    {
      uint64_t v7 = &qword_1EBBDC310;
      do
      {
        unsigned int v6 = (uint64_t *)v7[2];
        BOOL v26 = *v6 == (void)v7;
        uint64_t v7 = v6;
      }
      while (v26);
    }
    if (*((unsigned __int8 *)v6 + 32) < v4) {
      goto LABEL_10;
    }
    if (!v0) {
      goto LABEL_21;
    }
    uint64_t v9 = v0;
    while (1)
    {
      while (1)
      {
        unsigned int v6 = (uint64_t *)v9;
        unsigned int v10 = *(unsigned __int8 *)(v9 + 32);
        if (v10 <= v4) {
          break;
        }
        uint64_t v9 = *v6;
        std::string::size_type v8 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_22;
        }
      }
      if (v10 >= v4) {
        break;
      }
      uint64_t v9 = v6[1];
      if (!v9)
      {
        std::string::size_type v8 = (uint64_t **)(v6 + 1);
        goto LABEL_22;
      }
    }
LABEL_26:
    if (++v1 == 7) {
      break;
    }
    uint64_t v2 = (uint64_t *)_MergedGlobals_20;
    uint64_t v0 = qword_1EBBDC310;
  }
  for (uint64_t i = 0; i != -28; i -= 4)
  {
    if (SHIBYTE(v72[i + 2]) < 0) {
      operator delete((void *)v72[i]);
    }
  }
  __cxa_atexit((void (*)(void *))std::map<XcapCDCondition::Condition,std::string const>::~map[abi:ne180100], &_MergedGlobals_20, &dword_1C51D1000);
  v59[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v60, "CFU");
  __int16 v61 = 1;
  std::string::basic_string[abi:ne180100]<0>(v62, "CFB");
  __int16 v63 = 2;
  std::string::basic_string[abi:ne180100]<0>(v64, "CFNR");
  __int16 v65 = 3;
  std::string::basic_string[abi:ne180100]<0>(v66, "CFNRc");
  __int16 v67 = 4;
  std::string::basic_string[abi:ne180100]<0>(v68, "CFNL");
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  qword_1EBBDB0A0 = 0;
  int v18 = &qword_1EBBDB0A0;
  qword_1EBBDB0A8 = 0;
  XcapCDCondition::kDefaultRuleIds = (uint64_t)&qword_1EBBDB0A0;
  while (2)
  {
    uint64_t v19 = (unsigned __int8 *)&v59[16 * v17];
    if (v18 == &qword_1EBBDB0A0)
    {
      uint64_t v21 = &qword_1EBBDB0A0;
    }
    else
    {
      uint64_t v20 = (uint64_t *)v16;
      if (v16)
      {
        do
        {
          uint64_t v21 = v20;
          uint64_t v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        uint64_t v22 = &qword_1EBBDB0A0;
        do
        {
          uint64_t v21 = (uint64_t *)v22[2];
          BOOL v26 = *v21 == (void)v22;
          uint64_t v22 = v21;
        }
        while (v26);
      }
      unsigned int v23 = *v19;
      unsigned int v24 = v19[1];
      unsigned int v25 = *((unsigned __int8 *)v21 + 32);
      BOOL v26 = v25 == v23;
      if (v25 >= v23) {
        char v27 = 1;
      }
      else {
        char v27 = -1;
      }
      if (v26)
      {
        unsigned int v28 = *((unsigned __int8 *)v21 + 33);
        BOOL v29 = v28 == v24;
        char v27 = v28 >= v24 ? 1 : -1;
        if (v29) {
          char v27 = 0;
        }
      }
      if ((v27 & 0x80) == 0)
      {
        if (v16)
        {
          uint64_t v30 = v16;
          while (1)
          {
            uint64_t v21 = (uint64_t *)v30;
            unsigned int v31 = *(unsigned __int8 *)(v30 + 32);
            if (v31 == v23)
            {
              unsigned int v32 = *((unsigned __int8 *)v21 + 33);
              BOOL v33 = v32 == v24;
              if (v32 <= v24)
              {
                if (v32 >= v24) {
                  char v34 = 1;
                }
                else {
                  char v34 = -1;
                }
                if (v33) {
                  char v34 = 0;
                }
                if ((v34 & 0x80) == 0) {
                  goto LABEL_81;
                }
                goto LABEL_69;
              }
LABEL_63:
              uint64_t v30 = *v21;
              std::string v35 = v21;
              if (!*v21) {
                goto LABEL_75;
              }
            }
            else
            {
              if (v31 > v23) {
                goto LABEL_63;
              }
              if (v31 >= v23) {
                char v36 = 1;
              }
              else {
                char v36 = -1;
              }
              if ((v36 & 0x80) == 0) {
                goto LABEL_81;
              }
LABEL_69:
              uint64_t v30 = v21[1];
              if (!v30)
              {
                std::string v35 = v21 + 1;
                goto LABEL_75;
              }
            }
          }
        }
LABEL_74:
        std::string v35 = &qword_1EBBDB0A0;
        uint64_t v21 = &qword_1EBBDB0A0;
        goto LABEL_75;
      }
    }
    if (!v16) {
      goto LABEL_74;
    }
    std::string v35 = v21 + 1;
    if (!v21[1])
    {
LABEL_75:
      std::string v37 = (char *)operator new(0x40uLL);
      *((_WORD *)v37 + 16) = *(_WORD *)v19;
      size_t v38 = (std::string *)(v37 + 40);
      char v39 = &v59[16 * v17];
      std::string v40 = (const std::string::value_type **)(v39 + 4);
      if ((char)v19[31] < 0)
      {
        std::string::__init_copy_ctor_external(v38, *v40, *((void *)v39 + 2));
      }
      else
      {
        *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)v40;
        *((void *)v37 + 7) = *((void *)v39 + 3);
      }
      *(void *)std::string v37 = 0;
      *((void *)v37 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
      *((void *)v37 + 2) = v21;
      uint64_t *v35 = (uint64_t)v37;
      if (*(void *)XcapCDCondition::kDefaultRuleIds)
      {
        XcapCDCondition::kDefaultRuleIds = *(void *)XcapCDCondition::kDefaultRuleIds;
        std::string v37 = (char *)*v35;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBBDB0A0, (uint64_t *)v37);
      ++qword_1EBBDB0A8;
    }
LABEL_81:
    if (++v17 != 5)
    {
      int v18 = (uint64_t *)XcapCDCondition::kDefaultRuleIds;
      uint64_t v16 = qword_1EBBDB0A0;
      continue;
    }
    break;
  }
  for (uint64_t j = 0; j != -20; j -= 4)
  {
    if (SHIBYTE(v68[j + 2]) < 0) {
      operator delete((void *)v68[j]);
    }
  }
  __cxa_atexit((void (*)(void *))std::map<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string const>::~map[abi:ne180100], &XcapCDCondition::kDefaultRuleIds, &dword_1C51D1000);
  LOBYTE(v59[0]) = 0;
  std::string::basic_string[abi:ne180100]<0>(v60, "audio");
  LOBYTE(v6bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 1;
  std::string::basic_string[abi:ne180100]<0>(v62, "video");
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  qword_1EBBDC330 = 0;
  qword_1EBBDC328 = 0;
  int v44 = &qword_1EBBDC328;
  qword_1EBBDC320 = (uint64_t)&qword_1EBBDC328;
  while (2)
  {
    v45 = (unsigned __int8 *)&v59[16 * v43];
    unsigned int v46 = *v45;
    if (v44 == &qword_1EBBDC328)
    {
      long long v48 = &qword_1EBBDC328;
      goto LABEL_96;
    }
    uint64_t v47 = (uint64_t *)v42;
    if (v42)
    {
      do
      {
        long long v48 = v47;
        uint64_t v47 = (uint64_t *)v47[1];
      }
      while (v47);
    }
    else
    {
      unint64_t v49 = &qword_1EBBDC328;
      do
      {
        long long v48 = (uint64_t *)v49[2];
        BOOL v26 = *v48 == (void)v49;
        unint64_t v49 = v48;
      }
      while (v26);
    }
    if (*((unsigned __int8 *)v48 + 32) >= v46)
    {
      if (v42)
      {
        uint64_t v51 = v42;
        while (1)
        {
          while (1)
          {
            long long v48 = (uint64_t *)v51;
            unsigned int v52 = *(unsigned __int8 *)(v51 + 32);
            if (v52 <= v46) {
              break;
            }
            uint64_t v51 = *v48;
            uint64_t v50 = (uint64_t **)v48;
            if (!*v48) {
              goto LABEL_108;
            }
          }
          if (v52 >= v46) {
            goto LABEL_112;
          }
          uint64_t v51 = v48[1];
          if (!v51)
          {
            uint64_t v50 = (uint64_t **)(v48 + 1);
            goto LABEL_108;
          }
        }
      }
LABEL_107:
      uint64_t v50 = (uint64_t **)&qword_1EBBDC328;
      long long v48 = &qword_1EBBDC328;
      goto LABEL_108;
    }
LABEL_96:
    if (!v42) {
      goto LABEL_107;
    }
    uint64_t v50 = (uint64_t **)(v48 + 1);
    if (!v48[1])
    {
LABEL_108:
      std::string::size_type v53 = (char *)operator new(0x40uLL);
      v53[32] = v46;
      uint64_t v54 = (std::string *)(v53 + 40);
      int v55 = &v59[16 * v43];
      long long v56 = (const std::string::value_type **)(v55 + 4);
      if ((char)v45[31] < 0)
      {
        std::string::__init_copy_ctor_external(v54, *v56, *((void *)v55 + 2));
      }
      else
      {
        *(_OWORD *)&v54->__r_.__value_.__l.__data_ = *(_OWORD *)v56;
        *((void *)v53 + 7) = *((void *)v55 + 3);
      }
      std::__tree<std::__value_type<XcapCDCondition::Media,std::string const>,std::__map_value_compare<XcapCDCondition::Media,std::__value_type<XcapCDCondition::Media,std::string const>,std::less<XcapCDCondition::Media>,true>,std::allocator<std::__value_type<XcapCDCondition::Media,std::string const>>>::__insert_node_at((uint64_t)v48, v50, (uint64_t *)v53);
    }
LABEL_112:
    if (++v43 != 2)
    {
      int v44 = (uint64_t *)qword_1EBBDC320;
      uint64_t v42 = qword_1EBBDC328;
      continue;
    }
    break;
  }
  for (uint64_t k = 0; k != -8; k -= 4)
  {
    if (SHIBYTE(v62[k + 2]) < 0) {
      operator delete((void *)v62[k]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<XcapCDCondition::Media,std::string const>::~map[abi:ne180100], &qword_1EBBDC320, &dword_1C51D1000);
}

void sub_1C54D8324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LazuliContentTypeHeader::create(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = (char *)operator new(0x90uLL);
  *((void *)v4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)unsigned int v4 = &unk_1F20D6078;
  uint64_t v5 = v4 + 24;
  LazuliStringParameterHeader::LazuliStringParameterHeader((uint64_t)(v4 + 24), &LazuliHeader::kHeaderContentType, a1);
  v4[72] = 0;
  *((void *)v4 + 3) = &unk_1F20D60C8;
  unsigned int v6 = (std::__shared_weak_count *)*((void *)v4 + 5);
  if (!v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 2, 1uLL, memory_order_relaxed);
    *((void *)v4 + 4) = v5;
    *((void *)v4 + 5) = v4;
    goto LABEL_5;
  }
  if (v6->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 2, 1uLL, memory_order_relaxed);
    *((void *)v4 + 4) = v5;
    *((void *)v4 + 5) = v4;
    std::__shared_weak_count::__release_weak(v6);
LABEL_5:
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
  }
  *a2 = v5;
  a2[1] = v4;
}

void sub_1C54D8590(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void LazuliContentTypeHeader::~LazuliContentTypeHeader(void **this)
{
  *this = &unk_1F20E8D48;
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  *this = &unk_1F20BAA80;
  this[7] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 8), this[9]);
  LazuliHeader::~LazuliHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20E8D48;
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  *this = &unk_1F20BAA80;
  this[7] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 8), this[9]);
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C878E320);
}

double LazuliContentTypeHeader::clone@<D0>(LazuliContentTypeHeader *this@<X0>, _OWORD *a2@<X8>)
{
  unsigned int v4 = operator new(0x90uLL);
  v4[1] = 0;
  v4[2] = 0;
  *unsigned int v4 = &unk_1F20C2580;
  LazuliStringParameterHeader::LazuliStringParameterHeader((LazuliStringParameterHeader *)(v4 + 3), this);
  v4[3] = &unk_1F20D6008;
  *((unsigned char *)v4 + 72) = 0;
  *(void *)&long long v6 = v4 + 3;
  *((void *)&v6 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v6, v4 + 4, (uint64_t)(v4 + 3));
  double result = *(double *)&v6;
  *a2 = v6;
  return result;
}

void sub_1C54D87B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliContentTypeHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliContentTypeHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D6078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliContentTypeHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliContentTypeHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D6078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliContentTypeHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliContentTypeHeader::create(std::string const&)::HeaderWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void LazuliContentTypeHeader::create(std::string const&)::HeaderWrapper::~HeaderWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1F20E8D48;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  *(void *)a1 = &unk_1F20BAA80;
  *(void *)(a1 + 56) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 64, *(void **)(a1 + 72));
  LazuliHeader::~LazuliHeader((void **)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F20E8D48;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  *(void *)a1 = &unk_1F20BAA80;
  *(void *)(a1 + 56) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 64, *(void **)(a1 + 72));
  LazuliHeader::~LazuliHeader((void **)a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::shared_ptr<IPTelephonyManager>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void DeferredInit::DeferredInit(std::string *this, long long *a2, long long *a3, uint64_t a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v8;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  uint64_t v9 = ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&this[3]);
  *(_OWORD *)&this[30].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[31].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[29].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[29].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[27].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[28].__r_.__value_.__r.__words[1] = 0u;
  LOWORD(this[31].__r_.__value_.__r.__words[2]) = 257;
  HIDWORD(this[32].__r_.__value_.__r.__words[0]) = 0;
  LOWORD(this[32].__r_.__value_.__r.__words[1]) = 256;
  this[32].__r_.__value_.__s.__data_[10] = 1;
  this[247].__r_.__value_.__s.__data_[0] = 0;
  this[32].__r_.__value_.__s.__data_[16] = 0;
  ims::NetworkConfig::operator=((uint64_t)v9, a4 + 24);
  std::string::operator=((std::string *)((char *)this + 664), (const std::string *)(a4 + 616));
  std::string::operator=((std::string *)((char *)this + 688), (const std::string *)(a4 + 640));
  std::string::operator=((std::string *)((char *)this + 712), (const std::string *)(a4 + 664));
  std::string::operator=((std::string *)((char *)this + 736), (const std::string *)(a4 + 688));
  LOWORD(this[31].__r_.__value_.__r.__words[2]) = *(_WORD *)(a4 + 712);
  HIDWORD(this[32].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a4 + 724);
  LOWORD(this[32].__r_.__value_.__r.__words[1]) = *(_WORD *)(a4 + 728);
}

void sub_1C54D8B38(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *DeferredInit::operator=(std::string *this, uint64_t a2)
{
  if (this != (std::string *)a2)
  {
    std::string::operator=(this, (const std::string *)a2);
    std::string::operator=(this + 1, (const std::string *)(a2 + 24));
    ims::NetworkConfig::operator=((uint64_t)&this[3], a2 + 72);
    std::string::operator=((std::string *)((char *)this + 664), (const std::string *)(a2 + 664));
    std::string::operator=((std::string *)((char *)this + 688), (const std::string *)(a2 + 688));
    std::string::operator=((std::string *)((char *)this + 712), (const std::string *)(a2 + 712));
    std::string::operator=((std::string *)((char *)this + 736), (const std::string *)(a2 + 736));
    LOWORD(this[31].__r_.__value_.__r.__words[2]) = *(_WORD *)(a2 + 760);
    HIDWORD(this[32].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 772);
    LOWORD(this[32].__r_.__value_.__r.__words[1]) = *(_WORD *)(a2 + 776);
    unsigned int v4 = (const std::string *)(a2 + 784);
    uint64_t v5 = (void **)&this[32].__r_.__value_.__r.__words[2];
    long long v6 = this + 247;
    if (this[247].__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)(a2 + 5928))
    {
      if (this[247].__r_.__value_.__s.__data_[0])
      {
        std::string::operator=((std::string *)((char *)this + 784), v4);
        LOWORD(this[33].__r_.__value_.__r.__words[2]) = *(_WORD *)(a2 + 808);
        std::string::operator=((std::string *)((char *)this + 824), (const std::string *)(a2 + 824));
        LOWORD(this[35].__r_.__value_.__r.__words[1]) = *(_WORD *)(a2 + 848);
        std::string::operator=((std::string *)((char *)this + 856), (const std::string *)(a2 + 856));
        long long v8 = *(_OWORD *)(a2 + 896);
        long long v7 = *(_OWORD *)(a2 + 912);
        long long v9 = *(_OWORD *)(a2 + 880);
        *(std::string::size_type *)((char *)&this[38].__r_.__value_.__r.__words[1] + 5) = *(void *)(a2 + 925);
        *(_OWORD *)&this[37].__r_.__value_.__r.__words[1] = v8;
        *(_OWORD *)&this[38].__r_.__value_.__l.__data_ = v7;
        *(_OWORD *)&this[36].__r_.__value_.__r.__words[2] = v9;
        std::string::operator=(this + 39, (const std::string *)(a2 + 936));
        std::string::operator=(this + 40, (const std::string *)(a2 + 960));
        this[41].__r_.__value_.__s.__data_[0] = *(unsigned char *)(a2 + 984);
        long long v10 = *(_OWORD *)(a2 + 992);
        long long v11 = *(_OWORD *)(a2 + 1024);
        *(_OWORD *)&this[42].__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 1008);
        *(_OWORD *)&this[42].__r_.__value_.__r.__words[2] = v11;
        *(_OWORD *)&this[41].__r_.__value_.__r.__words[1] = v10;
        std::string::operator=((std::string *)((char *)this + 1040), (const std::string *)(a2 + 1040));
        std::string::operator=((std::string *)((char *)this + 1064), (const std::string *)(a2 + 1064));
        std::string::operator=((std::string *)((char *)this + 1088), (const std::string *)(a2 + 1088));
        std::string::operator=((std::string *)((char *)this + 1112), (const std::string *)(a2 + 1112));
        std::string::operator=((std::string *)((char *)this + 1136), (const std::string *)(a2 + 1136));
        this[48].__r_.__value_.__s.__data_[8] = *(unsigned char *)(a2 + 1160);
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)((char *)this + 1168), (const std::string *)(a2 + 1168));
        BambiEmergencyCallOptions::operator=((uint64_t)&this[50], a2 + 1200);
        std::string::operator=(this + 246, (const std::string *)(a2 + 5904));
      }
    }
    else if (this[247].__r_.__value_.__s.__data_[0])
    {
      IMSCallOptions::~IMSCallOptions((void **)&this[33].__r_.__value_.__r.__words[2]);
      if (this[33].__r_.__value_.__s.__data_[15] < 0) {
        operator delete(*v5);
      }
      v6->__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      if (*(char *)(a2 + 807) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 784), *(const std::string::value_type **)(a2 + 784), *(void *)(a2 + 792));
      }
      else
      {
        long long v12 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
        this[33].__r_.__value_.__l.__size_ = *(void *)(a2 + 800);
        *(_OWORD *)uint64_t v5 = v12;
      }
      IMSCallOptions::IMSCallOptions((IMSCallOptions *)&this[33].__r_.__value_.__r.__words[2], (const IMSCallOptions *)(a2 + 808));
      v6->__r_.__value_.__s.__data_[0] = 1;
    }
  }
  return this;
}

void sub_1C54D8DA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 807) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::createManagers(IPTelephonyManager *this)
{
  uint64_t v1 = (IPTelephonyManager *)IMSClientManager::instance(this);
  IPTelephonyManager::setLoggingEnabled(v1, 1);
  uint64_t v2 = operator new(0x308uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_1F20D65B0;
  BambiClient::BambiClient((BambiClient *)(v2 + 3));
}

void sub_1C54D95F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::IPTelephonyManager(IPTelephonyManager *this)
{
  *(void *)this = &unk_1F20D6480;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20D6520;
  *((void *)this + 2) = &unk_1F20D6548;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ipt");
  ImsLogContainer::ImsLogContainer((uint64_t)this + 24, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *(void *)this = &unk_1F20D6150;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20D6238;
  *((void *)this + 2) = &unk_1F20D6260;
  *((void *)this + 3) = &unk_1F20D6278;
  *((void *)this + 16) = &unk_1F20D62D8;
  *((void *)this + 17) = &unk_1F20D6300;
  *((_DWORD *)this + 40) = 0;
  *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = (char *)this + 264;
  *((void *)this + 34) = (char *)this + 264;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = (char *)this + 312;
  *((void *)this + 4bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 42) = 0;
  IMSiRatClient::IMSiRatClient((IPTelephonyManager *)((char *)this + 344));
}

void sub_1C54D98BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(v15 + 312));
  uint64_t v20 = *(std::__shared_weak_count **)(v15 + 296);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  std::__list_imp<unsigned long long>::clear(v17);
  uint64_t v21 = *v18;
  if (*v18)
  {
    *(void *)(v15 + 248) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v15 + 216);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  unsigned int v23 = *(std::__shared_weak_count **)(v15 + 176);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  unsigned int v24 = *(std::__shared_weak_count **)(v15 + 152);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  ImsLogContainer::~ImsLogContainer(v16);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::setLoggingEnabled(IPTelephonyManager *this, int a2)
{
  uint64_t v3 = (ims *)ims::logger(this);
  if (a2)
  {
    if (*((unsigned char *)v3 + 484)) {
      return;
    }
    unsigned int v4 = (ims *)ims::logger(v3);
    *((unsigned char *)v4 + 484) = 1;
    uint64_t v5 = ims::logger(v4);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    ImsLogger::setPriority(v5, 8, (unsigned __int8 *)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v6 = (ims *)ImsLogger::clearDestinations(v3);
    long long v7 = (ImsLogger *)ims::logger(v6);
    std::string::basic_string[abi:ne180100]<0>(__p, "oslog:ims");
    long long v8 = (ims *)ImsLogger::addDestination(v7, (uint64_t)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(ims::logger(v8) + 484) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ImsLoggingEnabled");
  IPTelephonyPrefs::setBoolValueInRuntimeConfig((uint64_t)__p, a2);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C54D9A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::~IPTelephonyManager(IPTelephonyManager *this)
{
  *(void *)this = &unk_1F20D6150;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20D6238;
  *((void *)this + 2) = &unk_1F20D6260;
  *((void *)this + 3) = &unk_1F20D6278;
  *((void *)this + 16) = &unk_1F20D62D8;
  *((void *)this + 17) = &unk_1F20D6300;
  IPTelephonyManager::deinitialize((uint64_t)this, (uint64_t)&IMSClientManager::kEmergencyStack, 1, 1);
  uint64_t v2 = *((void *)this + 29);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 29) = 0;
  }
  uint64_t v3 = *((void *)this + 23);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
    *((void *)this + 23) = 0;
  }
  uint64_t v4 = *((void *)this + 25);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    *((void *)this + 25) = 0;
  }
  uint64_t v5 = *((void *)this + 24);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    *((void *)this + 24) = 0;
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 27);
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *((void *)this + 28);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    *((void *)this + 28) = 0;
  }
  uint64_t v8 = *((void *)this + 21);
  long long v9 = *(std::__shared_weak_count **)(v8 + 624);
  *(_OWORD *)(v8 + 616) = 0u;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = *((void *)this + 36);
  uint64_t v11 = v10 + 152;
  for (uint64_t i = *(void *)(v10 + 160); i != v11; uint64_t i = *(void *)(i + 8))
    (*(void (**)(void))(**(void **)(i + 16) + 16))(*(void *)(i + 16));
  uint64_t v13 = *((void *)this + 41);
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    *((void *)this + 4bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  }
  std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::destroy(*((void **)this + 50));
  std::__tree<std::string>::destroy((uint64_t)this + 368, *((char **)this + 47));
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  IMSiRatClient::~IMSiRatClient((char ***)this + 43);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 39));
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::__list_imp<unsigned long long>::clear((void *)this + 33);
  uint64_t v16 = (void *)*((void *)this + 30);
  if (v16)
  {
    *((void *)this + 3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  int v18 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  *((void *)this + 3) = &unk_1F20C9CA0;
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
}

{
  uint64_t vars8;

  IPTelephonyManager::~IPTelephonyManager(this);
  JUMPOUT(0x1C878E320);
}

void IPTelephonyManager::deinitialize(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = a1 + 264;
  long long v9 = *(uint64_t **)(a1 + 272);
  if (v9 != (uint64_t *)(a1 + 264))
  {
    do
    {
      uint64_t v10 = v9[2];
      if (v10)
      {
        uint64_t v11 = *(unsigned __int8 *)(v10 + 55);
        if ((v11 & 0x80u) == 0) {
          uint64_t v12 = *(unsigned __int8 *)(v10 + 55);
        }
        else {
          uint64_t v12 = *(void *)(v10 + 40);
        }
        uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
        int v14 = (char)v13;
        if ((v13 & 0x80u) != 0) {
          uint64_t v13 = *(void *)(a2 + 8);
        }
        if (v12 == v13)
        {
          uint64_t v15 = (const void **)(v10 + 32);
          if (v14 >= 0) {
            uint64_t v16 = (unsigned __int8 *)a2;
          }
          else {
            uint64_t v16 = *(unsigned __int8 **)a2;
          }
          if ((v11 & 0x80) != 0)
          {
            if (!memcmp(*v15, v16, *(void *)(v10 + 40)))
            {
LABEL_21:
              int v18 = AuthQueueItem<BambiClient>::~AuthQueueItem((uint64_t *)v10);
              MEMORY[0x1C878E320](v18, 0x1032C403FAF6B48);
              uint64_t v19 = *v9;
              uint64_t v17 = (uint64_t *)v9[1];
              *(void *)(v19 + 8) = v17;
              *(void *)v9[1] = v19;
              --*(void *)(a1 + 280);
              operator delete(v9);
              goto LABEL_19;
            }
          }
          else
          {
            if (!*(unsigned char *)(v10 + 55)) {
              goto LABEL_21;
            }
            while (*(unsigned __int8 *)v15 == *v16)
            {
              uint64_t v15 = (const void **)((char *)v15 + 1);
              ++v16;
              if (!--v11) {
                goto LABEL_21;
              }
            }
          }
        }
      }
      uint64_t v17 = (uint64_t *)v9[1];
LABEL_19:
      long long v9 = v17;
    }
    while (v17 != (uint64_t *)v8);
  }
  if (IMSRegistrationManager::getRegistrationState(*(void *)(a1 + 184), (void **)a2))
  {
    uint64_t v20 = *(void *)(a1 + 288);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 168) + 192))(&v21);
    IMSMetricsManager::logDeRegistration(v20, &v21);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  BambiClient::deinitializeStack(*(void **)(a1 + 168), a2, a4 ^ 1, a3);
  IPTelephonyManager::deinitializeNasClient(a1, (void **)a2);
}

void sub_1C54D9F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IPTelephonyManager::~IPTelephonyManager(IPTelephonyManager *this)
{
}

{
  IPTelephonyManager::~IPTelephonyManager((IPTelephonyManager *)((char *)this - 128));
}

{
  uint64_t vars8;

  IPTelephonyManager::~IPTelephonyManager((IPTelephonyManager *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  IPTelephonyManager::~IPTelephonyManager((IPTelephonyManager *)((char *)this - 128));
  JUMPOUT(0x1C878E320);
}

void IPTelephonyManager::getBBServerConnection(IPTelephonyManager *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sImsDispatchQueue;
  if (!sImsDispatchQueue)
  {
    uint64_t v4 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v4;
  }
  dispatch_assert_queue_V2(v4);
  uint64_t v5 = *((void *)this + 45);
  *a2 = *((void *)this + 44);
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
}

void IPTelephonyManager::addCallEndInfo(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 288);
  xpc_object_t v3 = *a2;
  uint64_t v4 = v3;
  if (v3)
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    uint64_t v4 = v3;
  }
  IMSMetricsManager::addCallEndInfo(v2, &v4);
  xpc_release(v3);
}

void sub_1C54DA0F0(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::initializeNasClient(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 328);
  if (v4)
  {
    if (!*(void *)(a1 + 152)
      || (uint64_t v8 = *(void *)(a1 + 144),
          (long long v9 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 152))) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v10 = v9;
    uint64_t v11 = (std::__shared_weak_count *)(v8 + 136);
    if (!v8) {
      uint64_t v11 = 0;
    }
    uint64_t v13 = v11;
    int v14 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    IMSClientManager::instance((IMSClientManager *)v9);
    IMSClientManager::queue(&object);
    IMSNasDeviceClient::initializeNasClient(v4, a2, a3, &v13, &object, a4);
    if (object) {
      dispatch_release(object);
    }
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C54DA1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, std::__shared_weak_count *a12)
{
  if (object) {
    dispatch_release(object);
  }
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::deinitializeNasClient(uint64_t a1, void **a2)
{
  uint64_t v3 = *(void *)(a1 + 328);
  if (v3)
  {
    IMSNasDeviceClient::deinitializeNasClient(v3, a2);
    std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)(a1 + 368), a2);
    uint64_t v5 = (uint64_t **)(a1 + 392);
    long long v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 392, a2);
    if ((void **)(a1 + 400) != v6)
    {
      uint64_t v7 = (uint64_t *)v6;
      std::string::basic_string[abi:ne180100]<0>(v11, "ipt");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v8 = ims::warn((uint64_t)v11, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"We were waiting to initialize stack ", 36);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)", but it is being deinitialized!", 32);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (v12 < 0) {
        operator delete(v11[0]);
      }
      std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer(v5, v7);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,DeferredInit>,0>((uint64_t)(v7 + 4));
      operator delete(v7);
    }
  }
}

void sub_1C54DA380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::nasSystemInitialized()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v0 + 368), v1, (uint64_t)v1);
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v3 + 392, v2);
  if ((void **)(v3 + 400) != v4)
  {
    uint64_t v5 = v4;
    std::string::basic_string[abi:ne180100]<0>(v12, "ipt");
    std::string::basic_string[abi:ne180100]<0>(v10, "");
    uint64_t v6 = ims::debug((uint64_t)v12, (uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Continuing deferred initialization for stack ", 45);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, v2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    if (*((unsigned char *)v5 + 5984))
    {
      IMSCallOptions::IMSCallOptions((IMSCallOptions *)v9, (const IMSCallOptions *)(v5 + 108));
      IMSCallManager::initializeEmergencyCall();
      IMSCallOptions::~IMSCallOptions(v9);
    }
    else
    {
      IPTelephonyManager::_initializeFromSIM();
    }
    std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer((uint64_t **)(v3 + 392), (uint64_t *)v5);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DeferredInit>,0>((uint64_t)(v5 + 4));
    uint64_t v8 = v5;
    goto LABEL_14;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "ipt");
  std::string::basic_string[abi:ne180100]<0>(v10, "");
  uint64_t v7 = ims::error((uint64_t)v12, (uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"The NAS system has been initialized for an untracked stack ", 59);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, v2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0)
  {
    uint64_t v8 = (void **)v12[0];
LABEL_14:
    operator delete(v8);
  }
}

void sub_1C54DA658(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v2 - 88));
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::_initializeFromSIM()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  std::string v113 = 0;
  char v112 = 0;
  (*(void (**)(SipStack **__return_ptr))(**(void **)(v0 + 168) + 192))(&v112);
  uint64_t v77 = v5;
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v6 = v5 + 24;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 64))(v6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"got initialization request for ", 31);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, v4);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  uint64_t v9 = SipStack::prefs(v112);
  std::string::basic_string[abi:ne180100]<0>(&__p, "MNC");
  ImsPrefs::setRuntimeVar(v9, (uint64_t)&__p, (const std::string *)(v2 + 360), 1);
  if (SBYTE7(v115) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v10 = SipStack::prefs(v112);
  std::string::basic_string[abi:ne180100]<0>(&__p, "MCC");
  ImsPrefs::setRuntimeVar(v10, (uint64_t)&__p, (const std::string *)(v2 + 336), 1);
  if (SBYTE7(v115) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v11 = SipStack::prefs(v112);
  std::string::basic_string[abi:ne180100]<0>(&__p, "MDN");
  ImsPrefs::setRuntimeVar(v11, (uint64_t)&__p, (const std::string *)(v2 + 384), 1);
  if (SBYTE7(v115) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v12 = SipStack::prefs(v112);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DEVICE_ID");
  ImsPrefs::setRuntimeVar(v12, (uint64_t)&__p, (const std::string *)(v2 + 616), 1);
  if (SBYTE7(v115) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v13 = SipStack::prefs(v112);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DEVICE_REF_ID");
  ImsPrefs::setRuntimeVar(v13, (uint64_t)&__p, (const std::string *)(v2 + 640), 1);
  if (SBYTE7(v115) < 0) {
    operator delete((void *)__p);
  }
  memset(&v111, 0, sizeof(v111));
  int v14 = (ImsPrefs *)SipStack::prefs(v112);
  uint64_t v15 = (ImsPrefs *)SipStack::prefs(v112);
  DeviceIMEIKey = (void **)ImsPrefs::getDeviceIMEIKey(v15);
  ImsPrefs::stringValue(v14, DeviceIMEIKey);
  memset(&v110, 0, sizeof(v110));
  uint64_t v17 = (ImsPrefs *)SipStack::prefs(v112);
  int v18 = (ImsPrefs *)SipStack::prefs(v112);
  FeatureTagsEnabledKey = (void **)ImsPrefs::getFeatureTagsEnabledKey(v18);
  if (ImsPrefs::BOOLValue(v17, FeatureTagsEnabledKey))
  {
    std::string::size_type size = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v111.__r_.__value_.__l.__size_;
    }
    if (!size) {
      std::string::operator=(&v111, (const std::string *)(v2 + 616));
    }
    uint64_t v21 = (ImsPrefs *)SipStack::prefs(v112);
    uint64_t v22 = (ImsPrefs *)SipStack::prefs(v112);
    DisableDeviceSVNKey = (void **)ImsPrefs::getDisableDeviceSVNKey(v22);
    if ((ImsPrefs::BOOLValue(v21, DisableDeviceSVNKey) & 1) == 0) {
      std::string::operator=(&v110, (const std::string *)(v2 + 664));
    }
  }
  memset(&v109, 0, sizeof(v109));
  uint64_t v108 = 0;
  memset(v107, 0, sizeof(v107));
  SipUri::SipUri((SipUri *)v107);
  uint64_t v101 = 0;
  uint64_t v100 = 0;
  uint64_t v106 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  v98 = &unk_1F20B2680;
  v99 = &_bambiDomain;
  uint64_t v103 = 0;
  uint64_t v102 = 0;
  bzero(v78, 0x2E0uLL);
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)v79);
  memset(v93, 0, sizeof(v93));
  memset(v92, 0, sizeof(v92));
  __int16 v94 = 257;
  int v95 = 0;
  __int16 v96 = 256;
  char v97 = 1;
  ims::NetworkConfig::operator=((uint64_t)v79, v2 + 24);
  std::string::operator=(v92, (const std::string *)(v2 + 616));
  std::string::operator=(&v92[1], (const std::string *)(v2 + 640));
  std::string::operator=(v93, (const std::string *)(v2 + 664));
  std::string::operator=(&v93[1], (const std::string *)(v2 + 688));
  __int16 v94 = *(_WORD *)(v2 + 712);
  int v95 = *(_DWORD *)(v2 + 724);
  LOBYTE(v96) = *(unsigned char *)(v2 + 728);
  if ((_BYTE)v94)
  {
    unsigned int v24 = (ImsPrefs *)SipStack::prefs(v112);
    unsigned int v25 = (void **)ImsPrefs::getUseDummyImeiCheckDigitKey(v24);
    int v26 = ImsPrefs::BOOLValue(v24, v25);
    ims::makeUrnFromImei((uint64_t)&v111, (uint64_t)&v110, v26, (uint64_t)v107, (uint64_t)&__p);
  }
  else
  {
    ims::makeUrnFromUuid((uint64_t)&v111, (uint64_t)v107, (uint64_t)&__p);
  }
  ImsResult::operator=((uint64_t)&v98, (uint64_t)&__p);
  ImsResult::~ImsResult((ImsResult *)&__p);
  if (((*(uint64_t (**)(uint64_t *, void))(*v99 + 24))(v99, v100) & 1) == 0)
  {
    SipUri::asString((uint64_t)v107, (uint64_t)&v109);
    uint64_t v27 = SipStack::prefs(v112);
    std::string::basic_string[abi:ne180100]<0>(&__p, "INSTANCE_URN");
    ImsPrefs::setRuntimeVar(v27, (uint64_t)&__p, &v109, 1);
    if (SBYTE7(v115) < 0) {
      operator delete((void *)__p);
    }
  }
  uint64_t v28 = SipStack::prefs(v112);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ipt");
  std::string::basic_string[abi:ne180100]<0>(&__s, "");
  BOOL v29 = (ImsOutStream *)ims::debug((uint64_t)&__p, (uint64_t)&__s);
  ImsPrefs::logRuntimeVars(v28, v29);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v115) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v30 = v112;
  unsigned int v31 = v113;
  if (v113) {
    atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long __p = 0uLL;
  *(void *)&long long v115 = 0;
  unsigned int v32 = (ImsPrefs *)SipStack::prefs(v30);
  PcscfOverrideKey = (void **)ImsPrefs::getPcscfOverrideKey(v32);
  ImsPrefs::stringValue(v32, PcscfOverrideKey);
  uint64_t v34 = BYTE7(v115);
  if (SBYTE7(v115) < 0) {
    uint64_t v34 = *((void *)&__p + 1);
  }
  if (v34)
  {
    uint64_t v35 = v87;
    for (uint64_t i = v88; i != v35; i -= 24)
    {
      if (*(char *)(i - 1) < 0) {
        operator delete(*(void **)(i - 24));
      }
    }
    uint64_t v88 = v35;
    ims::tokenize((std::string *)&__p, &v87, 0x2Cu);
    std::string::basic_string[abi:ne180100]<0>(&__s, "ipt");
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    uint64_t v37 = ims::debug((uint64_t)&__s, (uint64_t)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"using P-CSCF list from prefs", 28);
    *(unsigned char *)(v37 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v37 + 17) = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
  }
  memset(&__s, 0, sizeof(__s));
  size_t v38 = (ImsPrefs *)SipStack::prefs(v30);
  ImpuKey = (void **)ImsPrefs::getImpuKey(v38);
  ImsPrefs::stringValue(v38, ImpuKey);
  std::string::size_type v40 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v40 = __s.__r_.__value_.__l.__size_;
  }
  if (v40)
  {
    int v41 = v84;
    for (uint64_t j = v85; j != v41; --j)
    {
      if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(j[-1].__r_.__value_.__l.__data_);
      }
    }
    v85 = v41;
    if ((unint64_t)v41 >= v86)
    {
      int v44 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v84, (long long *)&__s);
    }
    else
    {
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v41, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v43 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
        v41->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v43;
      }
      int v44 = v41 + 1;
    }
    v85 = v44;
    std::string::basic_string[abi:ne180100]<0>(&__str, "ipt");
    std::string::basic_string[abi:ne180100]<0>(&v129, "");
    uint64_t v45 = ims::debug((uint64_t)&__str, (uint64_t)&v129);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"using IMPU list from prefs", 26);
    *(unsigned char *)(v45 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v45 + 17) = 0;
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  memset(&__str, 0, sizeof(__str));
  unsigned int v46 = (ImsPrefs *)SipStack::prefs(v30);
  ImpiKey = (void **)ImsPrefs::getImpiKey(v46);
  ImsPrefs::stringValue(v46, ImpiKey);
  std::string::size_type v48 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v48 = __str.__r_.__value_.__l.__size_;
  }
  if (v48)
  {
    std::string::operator=(&v82, &__str);
    std::string::basic_string[abi:ne180100]<0>(&v129, "ipt");
    std::string::basic_string[abi:ne180100]<0>(&v126, "");
    uint64_t v49 = ims::debug((uint64_t)&v129, (uint64_t)&v126);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v49 + 8), (uint64_t)"using IMPI list from prefs", 26);
    *(unsigned char *)(v49 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v49 + 17) = 0;
    if (SHIBYTE(v128) < 0) {
      operator delete(v126);
    }
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
  }
  std::string::size_type v50 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v50 = v82.__r_.__value_.__l.__size_;
  }
  if (!v50)
  {
    std::string::operator=(&v82, &__s);
    std::string::basic_string[abi:ne180100]<0>(&v129, "ipt");
    std::string::basic_string[abi:ne180100]<0>(&v126, "");
    uint64_t v51 = ims::debug((uint64_t)&v129, (uint64_t)&v126);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v51 + 8), (uint64_t)"no IMPI specified.  Using IMPU for IMPI", 39);
    *(unsigned char *)(v51 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v51 + 17) = 0;
    if (SHIBYTE(v128) < 0) {
      operator delete(v126);
    }
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
  }
  memset(&v129, 0, sizeof(v129));
  unsigned int v52 = (ImsPrefs *)SipStack::prefs(v30);
  DomainKey = (void **)ImsPrefs::getDomainKey(v52);
  ImsPrefs::stringValue(v52, DomainKey);
  std::string::size_type v54 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  char v55 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v54 = v129.__r_.__value_.__l.__size_;
  }
  if (v54)
  {
    std::string::operator=(&v83, &v129);
    std::string::basic_string[abi:ne180100]<0>(&v126, "ipt");
    std::string::basic_string[abi:ne180100]<0>(&v125, "");
    uint64_t v56 = ims::debug((uint64_t)&v126, (uint64_t)&v125);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v56 + 8), (uint64_t)"using domain from prefs", 23);
    *(unsigned char *)(v56 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v56 + 64))(v56, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v56 + 17) = 0;
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v125.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v128) < 0) {
      operator delete(v126);
    }
    char v55 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  }
  if (v55 < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v115) < 0) {
    operator delete((void *)__p);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v91)
  {
    std::string::size_type v57 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v57 = v80.__r_.__value_.__l.__size_;
    }
    if (!v57 && v85 != v84)
    {
      uint64_t v123 = 0;
      long long v121 = 0u;
      memset(v122, 0, sizeof(v122));
      long long v119 = 0u;
      long long v120 = 0u;
      long long v117 = 0u;
      long long v118 = 0u;
      long long v115 = 0u;
      long long v116 = 0u;
      long long __p = 0u;
      SipUri::SipUri((uint64_t)&__p, v84);
      std::string::operator=(&v80, (const std::string *)v122);
      SipUri::~SipUri((SipUri *)&__p);
    }
  }
  uint64_t v58 = v112;
  v59 = v113;
  if (v113) {
    atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v76 = v59;
  if (v90)
  {
    IpAddress::_alwaysCompressIPv6Addresses = 1;
    memset(&__str, 0, sizeof(__str));
  }
  else
  {
    int v60 = (ImsPrefs *)SipStack::prefs(v58);
    CompressIPv6AddressesKey = (void **)ImsPrefs::getCompressIPv6AddressesKey(v60);
    IpAddress::_alwaysCompressIPv6Addresses = ImsPrefs::BOOLValue(v60, CompressIPv6AddressesKey);
    memset(&__str, 0, sizeof(__str));
    if (!v90)
    {
      char v62 = (ImsPrefs *)SipStack::prefs(v58);
      LegacyImpuRankKey = (void **)ImsPrefs::getLegacyImpuRankKey(v62);
      ImsPrefs::stringValue(v62, LegacyImpuRankKey);
      std::string::operator=(&__str, (const std::string *)&__p);
      if (SBYTE7(v115) < 0) {
        operator delete((void *)__p);
      }
    }
  }
  v130[0] = v58;
  v130[1] = (SipStack *)v76;
  if (v76) {
    atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v129, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else {
    std::string v129 = __str;
  }
  IPTelephonyManager::initializeImpuRankings(v77, v130, (uint64_t)&v129);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  if (v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
  uint64_t v64 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v64);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v64 + 8), (uint64_t)"picking IMPU ", 13);
  *(unsigned char *)(v64 + 17) = 0;
  if (v89) {
    __int16 v65 = "USIM";
  }
  else {
    __int16 v65 = "ISIM";
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v64 + 8), (uint64_t)v65, 4);
  *(unsigned char *)(v64 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v64 + 8), (uint64_t)" from list: ", 12);
  *(unsigned char *)(v64 + 17) = 0;
  uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
  std::string::basic_string[abi:ne180100]<0>(&__p, ",");
  ims::join<std::__wrap_iter<std::string const*>>((uint64_t)v84, (uint64_t)v85, v66, (uint64_t)&__p);
  if (SBYTE7(v115) < 0) {
    operator delete((void *)__p);
  }
  __int16 v67 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v67 + 64))(v67, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v67[17] = 0;
  v126 = 0;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  SipStack::carrierIdentifier(v58, (std::string *)&__p);
  char v69 = (uint64_t **)BambiPrefsManager::instance(v68);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v70 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v69, (void **)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__s);
  SipImpuRank::preferredImpu(v70 + 29, (uint64_t *)&v84, (unsigned __int8 *)&v83, v81, (uint64_t)&v80, (uint64_t)&v126);
  if (SBYTE7(v115) < 0) {
    operator delete((void *)__p);
  }
  if (v128 >= 0) {
    uint64_t v71 = HIBYTE(v128);
  }
  else {
    uint64_t v71 = v127;
  }
  uint64_t v72 = *(void *)v6;
  if (v71)
  {
    uint64_t v73 = (*(uint64_t (**)(uint64_t))(v72 + 32))(v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v73 + 8), (uint64_t)"initializing SIP stack ", 23);
    *(unsigned char *)(v73 + 17) = 0;
    if (*((char *)v58 + 4183) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p, *((const std::string::value_type **)v58 + 520), *((void *)v58 + 521));
    }
    else
    {
      long long __p = *((_OWORD *)v58 + 260);
      *(void *)&long long v115 = *((void *)v58 + 522);
    }
    (*(void (**)(uint64_t, long long *))(*(void *)v73 + 32))(v73, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v73 + 64))(v73, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v73 + 17) = 0;
    if (SBYTE7(v115) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v75 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v75 + 8), (uint64_t)"P-CSCF   : ", 11);
    *(unsigned char *)(v75 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v125, ",");
    ims::join<std::__wrap_iter<std::string const*>>();
  }
  uint64_t v74 = (*(uint64_t (**)(uint64_t))(v72 + 56))(v6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v74);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v74 + 8), (uint64_t)"no valid IMPU in IPTelephonyConfig", 34);
  *(unsigned char *)(v74 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v74 + 64))(v74, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v74 + 17) = 0;
  if (SHIBYTE(v128) < 0) {
    operator delete(v126);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
  ims::StackConfig::~StackConfig(v78);
  ImsResult::~ImsResult((ImsResult *)&v98);
  SipUri::~SipUri((SipUri *)v107);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v111.__r_.__value_.__l.__data_);
  }
  if (v113) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v113);
  }
}

void sub_1C54DCE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (SLOBYTE(STACK[0x5B7]) < 0) {
    operator delete((void *)STACK[0x5A0]);
  }
  if (SLOBYTE(STACK[0x5CF]) < 0) {
    operator delete((void *)STACK[0x5B8]);
  }
  if (*(char *)(v8 + 23) < 0) {
    operator delete(*(void **)(v9 - 208));
  }
  SipStackConfig::~SipStackConfig((void **)&STACK[0x5D0]);
  SipRegistrationConfig::~SipRegistrationConfig((void **)&STACK[0xFA8]);
  if (*(char *)(v9 - 161) < 0) {
    operator delete(*(void **)(v9 - 184));
  }
  if (*(char *)(v9 - 97) < 0) {
    operator delete(*(void **)(v9 - 120));
  }
  if (a7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a7);
  }
  ims::StackConfig::~StackConfig((void **)va);
  ImsResult::~ImsResult((ImsResult *)&STACK[0x318]);
  SipUri::~SipUri((SipUri *)&STACK[0x360]);
  if (SLOBYTE(STACK[0x50F]) < 0) {
    operator delete((void *)STACK[0x4F8]);
  }
  if (SLOBYTE(STACK[0x527]) < 0) {
    operator delete((void *)STACK[0x510]);
  }
  if (SLOBYTE(STACK[0x53F]) < 0) {
    operator delete((void *)STACK[0x528]);
  }
  if (STACK[0x548]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x548]);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IPTelephonyManager::nasSystemInitialized()
{
}

void IPTelephonyManager::_deferInit()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ipt");
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  uint64_t v8 = ims::debug((uint64_t)&__p, (uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Deferring initialization for stack ", 35);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v8 + 32))(v8, v6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  DeferredInit::DeferredInit(&__p, v6, v4, v2);
  v15[0] = v6;
  uint64_t v9 = std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v7 + 392), (void **)v6, v15);
  DeferredInit::operator=((std::string *)(v9 + 56), (uint64_t)&__p);
  std::__optional_destruct_base<DeferredEmergency,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v14);
  ims::StackConfig::~StackConfig(&v13);
  if (v12 < 0) {
    operator delete(v11);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C54DD53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DeferredInit::~DeferredInit(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void DeferredEmergency::~DeferredEmergency(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void IPTelephonyManager::auditCarrierPrefs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    unsigned int v31 = 0;
    unsigned int v32 = 0;
    (*(void (**)(SipStack **__return_ptr))(**(void **)(a1 + 168) + 192))(&v31);
    std::string::basic_string[abi:ne180100]<0>(&p_p, "audit");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v7 = ims::info((uint64_t)&p_p, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Performing audit due to ", 24);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" for carrier ", 13);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, a3);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (SHIBYTE(v37) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v40) < 0) {
      operator delete(p_p);
    }
    if (v31)
    {
      std::string::basic_string[abi:ne180100]<0>(&p_p, "audit");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v8 = ims::info((uint64_t)&p_p, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Stack ", 6);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" is using ", 10);
      *(unsigned char *)(v8 + 17) = 0;
      SipStack::carrierIdentifier(v31, &v34);
      (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, &v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" and wants ", 11);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a3);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&p_p, "audit");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v9 = ims::warn((uint64_t)&p_p, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"No stack for ", 13);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a2);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
    }
    if (SHIBYTE(v37) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v40) < 0) {
      operator delete(p_p);
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&p_p, "audit");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v10 = ims::info((uint64_t)&p_p, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Stack Audit:", 12);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(p_p);
  }
  std::string __p = 0;
  char v36 = 0;
  unint64_t v37 = 0;
  BambiClient::sipStacks(*(BambiClient **)(a1 + 168), (uint64_t *)&__p);
  uint64_t v11 = *(void *)(a1 + 168);
  long long v12 = *(_OWORD *)(v11 + 168);
  uint64_t v13 = *(void *)(v11 + 176);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = v36;
  if ((unint64_t)v36 >= v37)
  {
    long long v28 = v12;
    uint64_t v16 = (v36 - (unsigned char *)__p) >> 4;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = v37 - (void)__p;
    if ((uint64_t)(v37 - (void)__p) >> 3 > v17) {
      unint64_t v17 = v18 >> 3;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    uint64_t v42 = &v37;
    uint64_t v20 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)&v37, v19);
    uint64_t v21 = (char *)&v20[2 * v16];
    p_p = v20;
    char v39 = v21;
    int v41 = &v20[2 * v22];
    *(_OWORD *)uint64_t v21 = v28;
    std::string::size_type v40 = v21 + 16;
    std::vector<std::shared_ptr<SipStack>>::__swap_out_circular_buffer((uint64_t *)&__p, &p_p);
    uint64_t v15 = v36;
    std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((void **)&p_p);
  }
  else
  {
    *(void *)char v36 = v12;
    *((void *)v14 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v13;
    uint64_t v15 = v14 + 16;
  }
  char v36 = v15;
  char v39 = 0;
  std::string::size_type v40 = 0;
  p_p = (void **)&v39;
  unsigned int v23 = (SipStack **)__p;
  if (__p != v15)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v34, "audit");
      std::string::basic_string[abi:ne180100]<0>(&v31, "");
      uint64_t v24 = ims::info((uint64_t)&v34, (uint64_t)&v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"  ", 2);
      *(unsigned char *)(v24 + 17) = 0;
      unsigned int v25 = *v23;
      if (*((char *)*v23 + 4183) < 0) {
        std::string::__init_copy_ctor_external(&v30, *((const std::string::value_type **)v25 + 520), *((void *)v25 + 521));
      }
      else {
        std::string v30 = *(std::string *)((char *)v25 + 4160);
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)v24 + 32))(v24, &v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v24 + 17) = 0;
      SipStack::carrierIdentifier(*v23, &v29);
      (*(void (**)(uint64_t, std::string *))(*(void *)v24 + 32))(v24, &v29);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v24 + 17) = 0;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (v33 < 0) {
        operator delete(v31);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      SipStack::carrierIdentifier(*v23, &v34);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&p_p, (void **)&v34.__r_.__value_.__l.__data_, (uint64_t)&v34);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      v23 += 2;
    }
    while (v23 != (SipStack **)v15);
  }
  std::string::basic_string[abi:ne180100]<0>(&v34, "audit");
  std::string::basic_string[abi:ne180100]<0>(&v31, "");
  uint64_t v26 = ims::info((uint64_t)&v34, (uint64_t)&v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"Bundle Audit:", 13);
  *(unsigned char *)(v26 + 17) = 0;
  uint64_t v27 = (BambiPrefsManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v26 + 17) = 0;
  if (v33 < 0) {
    operator delete(v31);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  BambiPrefsManager::audit(v27);
  std::__tree<std::string>::destroy((uint64_t)&p_p, v39);
  p_p = &__p;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&p_p);
}

void sub_1C54DDE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,std::__shared_weak_count *a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v42 - 97) < 0) {
    operator delete(*(void **)(v42 - 120));
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::initializeFromSIM(uint64_t a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 288);
  if (v8)
  {
    uint64_t v9 = v8 + 152;
    uint64_t v10 = *(void *)(v8 + 160);
    if (v10 != v8 + 152)
    {
      int v11 = *(unsigned __int8 *)(a4 + 730);
      do
      {
        (*(void (**)(void, BOOL))(**(void **)(v10 + 16) + 8))(*(void *)(v10 + 16), v11 != 0);
        uint64_t v10 = *(void *)(v10 + 8);
      }
      while (v10 != v9);
    }
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 168) + 192))(&v20);
  uint64_t v13 = a1 + 24;
  uint64_t v12 = *(void *)(a1 + 24);
  if (v20)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(v12 + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(a1 + 24, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Using SIP stack ", 16);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 32))(v14, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    uint64_t v15 = std::string::operator=((std::string *)(v20 + 4184), a3);
    if (*(unsigned char *)(a4 + 729)
      || (uint64_t v17 = BambiPrefsManager::instance((BambiPrefsManager *)v15),
          v18 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v17, (void **)&a3->__r_.__value_.__l.__data_), uint64_t v15 = (std::string *)BambiPrefsManager::instance((BambiPrefsManager *)v18), &v15->__r_.__value_.__r.__words[1] == (std::string::size_type *)v18))
    {
      BambiPrefsManager::instance((BambiPrefsManager *)v15);
      BambiPrefsManager::loadPrefs();
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(a1 + 24, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"skipping loading prefs for carrier ", 35);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v19 + 32))(v19, a3);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    IPTelephonyManager::auditCarrierPrefs(a1, a2, (uint64_t)a3);
    IPTelephonyManager::_deferInit();
    IPTelephonyManager::initializeNasClient(a1, a2, *(unsigned int *)(a4 + 724), *(unsigned __int8 *)(a4 + 730));
  }
  else
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(v12 + 56))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(a1 + 24, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Unable to initialize SIP stack which hasn't been allocated", 58);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_1C54DE384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::initializeFromSIM(uint64_t a1, uint64_t a2, std::string *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 288);
  if (v10)
  {
    uint64_t v11 = v10 + 152;
    uint64_t v12 = *(void *)(v10 + 160);
    if (v12 != v10 + 152)
    {
      int v13 = *(unsigned __int8 *)(a4 + 730);
      do
      {
        (*(void (**)(void, BOOL))(**(void **)(v12 + 16) + 8))(*(void *)(v12 + 16), v13 != 0);
        uint64_t v12 = *(void *)(v12 + 8);
      }
      while (v12 != v11);
    }
  }
  uint64_t v14 = a1 + 24;
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 16))(a1 + 24, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"loading prefs for normal IPTelephony initialization", 51);
  *(unsigned char *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v15 + 17) = 0;
  uint64_t v27 = 0;
  long long v28 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 168) + 192))(&v27);
  uint64_t v16 = *(void *)(a1 + 24);
  if (v27)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(v16 + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(a1 + 24, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Using SIP stack ", 16);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 32))(v17, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    uint64_t v18 = std::string::operator=((std::string *)(v27 + 4184), a3);
    if (a5)
    {
      if (*(unsigned char *)(a4 + 729)
        || (uint64_t v24 = BambiPrefsManager::instance((BambiPrefsManager *)v18),
            unsigned int v25 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v24, (void **)&a3->__r_.__value_.__l.__data_), (void **)(BambiPrefsManager::instance((BambiPrefsManager *)v25) + 8) == v25))
      {
        uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(a1 + 24);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(a1 + 24, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Loading prefs from specified dictionary reference", 49);
        *(unsigned char *)(v19 + 17) = 0;
        uint64_t v20 = (BambiPrefsManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v19 + 17) = 0;
        BambiPrefsManager::instance(v20);
        BambiPrefsManager::loadPrefs();
      }
      uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(a1 + 24);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(a1 + 24, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"skipping loading prefs for carrier ", 35);
      *(unsigned char *)(v26 + 17) = 0;
      unsigned int v23 = (unsigned char *)(v26 + 17);
      (*(void (**)(uint64_t, std::string *))(*(void *)v26 + 32))(v26, a3);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(a1 + 24);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(a1 + 24, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Carrier prefs already in use for ", 33);
      *(unsigned char *)(v22 + 17) = 0;
      unsigned int v23 = (unsigned char *)(v22 + 17);
      (*(void (**)(uint64_t, std::string *))(*(void *)v22 + 32))(v22, a3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)".  Skipping prefs", 17);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *unsigned int v23 = 0;
    IPTelephonyManager::auditCarrierPrefs(a1, a2, (uint64_t)a3);
    IPTelephonyManager::_deferInit();
    IPTelephonyManager::initializeNasClient(a1, a2, *(unsigned int *)(a4 + 724), *(unsigned __int8 *)(a4 + 730));
  }
  else
  {
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(v16 + 56))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(a1 + 24, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Unable to initialize SIP stack which hasn't been allocated", 58);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
}

void sub_1C54DE9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::initializeEmergency()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = (const IMSCallOptions *)v1;
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  memset(&v269, 0, sizeof(v269));
  if (*(char *)(v1 + 5119) < 0) {
    std::string::__init_copy_ctor_external(&v269, *(const std::string::value_type **)(v1 + 5096), *(void *)(v1 + 5104));
  }
  else {
    std::string v269 = *(std::string *)(v1 + 5096);
  }
  v268 = 0;
  v267 = 0;
  (*(void (**)(SipStack **__return_ptr))(**(void **)(v9 + 168) + 192))(&v267);
  if (!v267)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    uint64_t v11 = ims::error((uint64_t)&__p, (uint64_t)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"No sip stack ", 13);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, &v269);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    goto LABEL_55;
  }
  uint64_t v264 = v5;
  uint64_t v10 = *(unsigned __int8 *)(v3 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(v3 + 8);
  }
  if (v10)
  {
    std::string::operator=((std::string *)((char *)v267 + 4184), (const std::string *)v3);
    if (*((char *)v267 + 4183) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v267 + 520), *((void *)v267 + 521));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *((_OWORD *)v267 + 260);
      __p.__r_.__value_.__r.__words[2] = *((void *)v267 + 522);
    }
    IPTelephonyManager::setDelegates((uint64_t *)v9, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(v9 + 288);
    if (v12)
    {
      uint64_t v13 = v12 + 152;
      for (uint64_t i = *(void *)(v12 + 160); i != v13; uint64_t i = *(void *)(i + 8))
        (*(void (**)(void, void))(**(void **)(i + 16) + 8))(*(void *)(i + 16), 0);
    }
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(v9 + 24) + 64))(v9 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 + 24) + 16))(v9 + 24, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"loading prefs for SIM-less emergency", 36);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    *(_OWORD *)&v266.__r_.__value_.__l.__data_ = 0uLL;
    (*(void (**)(std::string *__return_ptr))(**(void **)(v9 + 168) + 192))(&v266);
    std::string::size_type v16 = v266.__r_.__value_.__r.__words[0];
    ImsUuid::generate((ImsUuid *)&__p);
    if (SHIBYTE(v272[0]) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
      __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v272[0];
    }
    uint64_t v17 = std::string::operator=((std::string *)(v16 + 4184), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3708;
    if (SHIBYTE(v272[0]) < 0) {
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    }
    if (!*(void *)(v9 + 336))
    {
      BambiPrefsManager::instance((BambiPrefsManager *)v17);
      SipStack::carrierIdentifier((SipStack *)v266.__r_.__value_.__l.__data_, &__p);
      BambiPrefsManager::loadPrefs();
    }
    SipStack::carrierIdentifier((SipStack *)v266.__r_.__value_.__l.__data_, &__p);
    BambiPrefsManager::setPrefsForCarrier((BambiPrefsManager *)&__p, *(ImsPrefs **)(v9 + 336), 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(void *)(v9 + 33ims::StackConfig::~StackConfig(this + 6) = 0;
    std::string::size_type size = (std::__shared_weak_count *)v266.__r_.__value_.__l.__size_;
    long long v270 = *(_OWORD *)&v266.__r_.__value_.__l.__data_;
    if (v266.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v266.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    IPTelephonyManager::initializeImpuRankings(v9, (SipStack **)&v270, (uint64_t)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (size) {
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
    }
    bzero(&__p, 0x9D0uLL);
    SipStackConfig::SipStackConfig((SipStackConfig *)&__p);
    uint64_t v19 = (const ImsPrefs *)SipStack::prefs((SipStack *)v266.__r_.__value_.__l.__data_);
    SipStackConfig::initializeFromPrefs((SipStackConfig *)&__p, v19, 0, 0, *(unsigned char *)(v266.__r_.__value_.__r.__words[0] + 2689));
    uint64_t v20 = *(void *)(v9 + 168);
    *(_DWORD *)(v20 + 232) = 0x10000;
    uint64_t v21 = *(void *)(v20 + 696);
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 80))(v21);
    }
    IPTelephonyManager::setDelegates((uint64_t *)v9, (uint64_t)&v269, 1);
    SipStackConfig::~SipStackConfig((void **)&__p.__r_.__value_.__l.__data_);
    if (v266.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v266.__r_.__value_.__l.__size_);
    }
  }
  SipStack::carrierIdentifier(v267, &__p);
  uint64_t v23 = BambiPrefsManager::instance(v22);
  uint64_t v24 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v23, (void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v25 = BambiPrefsManager::instance((BambiPrefsManager *)v24) + 8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((void **)v25 == v24)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    uint64_t v29 = ims::error((uint64_t)&__p, (uint64_t)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"unable to resolve preferences for given identifier: ", 52);
    *(unsigned char *)(v29 + 17) = 0;
    SipStack::carrierIdentifier(v267, &v266);
    (*(void (**)(uint64_t, std::string *))(*(void *)v29 + 32))(v29, &v266);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v29 + 17) = 0;
    if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v266.__r_.__value_.__l.__data_);
    }
LABEL_55:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_58;
    }
    goto LABEL_59;
  }
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v265, v6);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ipt");
  uint64_t v26 = v264;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  uint64_t v27 = ims::debug((uint64_t)&__p, (uint64_t)&__str);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"Deferring emergency initialization for stack ", 45);
  *(unsigned char *)(v27 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v27 + 32))(v27, &v269);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v27 + 17) = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  DeferredInit::DeferredInit(&__p, (long long *)&v269, (long long *)v3, v264);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v269;
  long long v28 = std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v9 + 392), (void **)&v269.__r_.__value_.__l.__data_, (long long **)&__str);
  DeferredInit::operator=((std::string *)(v28 + 56), (uint64_t)&__p);
  std::__optional_destruct_base<DeferredEmergency,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v315);
  ims::StackConfig::~StackConfig((void **)&v273 + 1);
  if (SBYTE7(v273) < 0) {
    operator delete(v272[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(char *)(v8 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *(void *)(v8 + 8));
  }
  else {
    std::string __p = *(std::string *)v8;
  }
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v272, (const IMSCallOptions *)v265);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v269;
  std::string v30 = std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v9 + 392), (void **)&v269.__r_.__value_.__l.__data_, (long long **)&__str);
  unsigned int v31 = v30;
  unsigned int v32 = (std::string *)(v30 + 840);
  if (v30[5984])
  {
    if (v30[863] < 0) {
      operator delete(v32->__r_.__value_.__l.__data_);
    }
    std::string *v32 = __p;
    *((unsigned char *)&__p.__r_.__value_.__s + 2IMSCallOptions::~IMSCallOptions(this + 3) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    *((_WORD *)v31 + 432) = v272[0];
    char v33 = (void **)(v31 + 880);
    if (v31[903] < 0) {
      operator delete(*v33);
    }
    *(_OWORD *)char v33 = v273;
    *((void *)v31 + 112) = v274;
    HIBYTE(v274) = 0;
    LOBYTE(v27IMSCallOptions::~IMSCallOptions(this + 3) = 0;
    *((_WORD *)v31 + 452) = v275;
    std::string v34 = (void **)(v31 + 912);
    if (v31[935] < 0) {
      operator delete(*v34);
    }
    *(_OWORD *)std::string v34 = v276;
    *((void *)v31 + 11ims::StackConfig::~StackConfig(this + 6) = v277;
    HIBYTE(v277) = 0;
    LOBYTE(v27ims::StackConfig::~StackConfig(this + 6) = 0;
    long long v35 = v279;
    *(_OWORD *)(v31 + 93ims::StackConfig::~StackConfig(this + 6) = v278;
    *(_OWORD *)(v31 + 952) = v35;
    *(_OWORD *)(v31 + 968) = *(_OWORD *)v280;
    *(void *)(v31 + 98bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *(void *)&v280[13];
    char v36 = (void **)(v31 + 992);
    if (v31[1015] < 0) {
      operator delete(*v36);
    }
    *((void *)v31 + 12ims::StackConfig::~StackConfig(this + 6) = v282;
    *(_OWORD *)char v36 = v281;
    HIBYTE(v282) = 0;
    LOBYTE(v28bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    unint64_t v37 = (void **)(v31 + 1016);
    if (v31[1039] < 0) {
      operator delete(*v37);
    }
    *(_OWORD *)unint64_t v37 = v283;
    *((void *)v31 + 129) = v284;
    HIBYTE(v284) = 0;
    LOBYTE(v28IMSCallOptions::~IMSCallOptions(this + 3) = 0;
    v31[1040] = v285;
    long long v38 = v287;
    *(_OWORD *)(v31 + 1048) = v286;
    *(_OWORD *)(v31 + 1064) = v38;
    *(_OWORD *)(v31 + 1080) = v288;
    char v39 = (void **)(v31 + 1096);
    if (v31[1119] < 0) {
      operator delete(*v39);
    }
    *((void *)v31 + 139) = v290;
    *(_OWORD *)char v39 = v289;
    HIBYTE(v290) = 0;
    LOBYTE(v289) = 0;
    std::string::size_type v40 = (void **)(v31 + 1120);
    if (v31[1143] < 0) {
      operator delete(*v40);
    }
    *((void *)v31 + 142) = v292;
    *(_OWORD *)std::string::size_type v40 = v291;
    HIBYTE(v292) = 0;
    LOBYTE(v29bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    int v41 = (void **)(v31 + 1144);
    if (v31[1167] < 0) {
      operator delete(*v41);
    }
    *((void *)v31 + 145) = v294;
    *(_OWORD *)int v41 = v293;
    HIBYTE(v294) = 0;
    LOBYTE(v29IMSCallOptions::~IMSCallOptions(this + 3) = 0;
    uint64_t v42 = (void **)(v31 + 1168);
    if (v31[1191] < 0) {
      operator delete(*v42);
    }
    *((void *)v31 + 148) = v296;
    *(_OWORD *)uint64_t v42 = v295;
    HIBYTE(v29ims::StackConfig::~StackConfig(this + 6) = 0;
    LOBYTE(v295) = 0;
    long long v43 = (void **)(v31 + 1192);
    if (v31[1215] < 0) {
      operator delete(*v43);
    }
    *(_OWORD *)long long v43 = v297;
    *((void *)v31 + 15bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v298;
    HIBYTE(v298) = 0;
    LOBYTE(v297) = 0;
    v31[1216] = v299;
    int v44 = (void **)(v31 + 1224);
    if (v31[1248] == v302)
    {
      if (v31[1248])
      {
        if (v31[1247] < 0) {
          operator delete(*v44);
        }
        *(_OWORD *)int v44 = v300;
        *((void *)v31 + 155) = v301;
        HIBYTE(v30bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
        LOBYTE(v300) = 0;
      }
    }
    else if (v31[1248])
    {
      if (v31[1247] < 0) {
        operator delete(*v44);
      }
      v31[1248] = 0;
    }
    else
    {
      *(_OWORD *)int v44 = v300;
      *((void *)v31 + 155) = v301;
      uint64_t v301 = 0;
      long long v300 = 0uLL;
      v31[1248] = 1;
    }
    v157 = (void **)(v31 + 1256);
    if (v31[1279] < 0) {
      operator delete(*v157);
    }
    *((void *)v31 + 159) = v304;
    *(_OWORD *)v157 = v303;
    HIBYTE(v304) = 0;
    LOBYTE(v30IMSCallOptions::~IMSCallOptions(this + 3) = 0;
    v158 = (void **)(v31 + 1280);
    if (v31[1303] < 0) {
      operator delete(*v158);
    }
    *((void *)v31 + 162) = v306;
    *(_OWORD *)v158 = v305;
    HIBYTE(v30ims::StackConfig::~StackConfig(this + 6) = 0;
    LOBYTE(v305) = 0;
    v159 = (void **)(v31 + 1304);
    if (v31[1327] < 0) {
      operator delete(*v159);
    }
    *(_OWORD *)v159 = v307;
    *((void *)v31 + 165) = v308;
    HIBYTE(v308) = 0;
    LOBYTE(v307) = 0;
    v31[1328] = v309;
    std::vector<SipUri>::__vdeallocate((void *)v31 + 167);
    *(_OWORD *)(v31 + 133ims::StackConfig::~StackConfig(this + 6) = v310;
    long long v160 = v313[0];
    *((_OWORD *)v31 + 85) = v312;
    *((void *)v31 + 169) = v311;
    uint64_t v311 = 0;
    long long v310 = 0uLL;
    *((_OWORD *)v31 + 8ims::StackConfig::~StackConfig(this + 6) = v160;
    *(_OWORD *)(v31 + 1389) = *(_OWORD *)((char *)v313 + 13);
    SipUri::operator=((SipUri *)(v31 + 1408), (uint64_t)v314);
    SipUri::operator=((SipUri *)(v31 + 1816), (uint64_t)v316);
    v161 = (void **)(v31 + 2224);
    if (v31[2247] < 0) {
      operator delete(*v161);
    }
    *((void *)v31 + 280) = *(void *)v318;
    *(_OWORD *)v161 = v317;
    v318[7] = 0;
    LOBYTE(v317) = 0;
    v162 = (void **)(v31 + 2248);
    if (v31[2271] < 0) {
      operator delete(*v162);
    }
    *((void *)v31 + 28IMSCallOptions::~IMSCallOptions(this + 3) = *(void *)&v318[24];
    *(_OWORD *)v162 = *(_OWORD *)&v318[8];
    v318[31] = 0;
    v318[8] = 0;
    v163 = (void **)(v31 + 2272);
    if (v31[2295] < 0) {
      operator delete(*v163);
    }
    *((void *)v31 + 28ims::StackConfig::~StackConfig(this + 6) = v320;
    *(_OWORD *)v163 = v319;
    HIBYTE(v320) = 0;
    LOBYTE(v319) = 0;
    v164 = v31 + 2296;
    v165 = (void *)*((void *)v31 + 287);
    if (v165)
    {
      *((void *)v31 + 288) = v165;
      operator delete(v165);
      void *v164 = 0;
      *((void *)v31 + 288) = 0;
      *((void *)v31 + 289) = 0;
    }
    *(_OWORD *)v164 = v321;
    *((void *)v31 + 289) = v322;
    uint64_t v322 = 0;
    long long v321 = 0uLL;
    *((void *)v31 + 292) = v324;
    *((_OWORD *)v31 + 145) = v323;
    v166 = (void **)(v31 + 2344);
    if (v31[2367] < 0) {
      operator delete(*v166);
    }
    *((void *)v31 + 295) = v326;
    *(_OWORD *)v166 = v325;
    HIBYTE(v32ims::StackConfig::~StackConfig(this + 6) = 0;
    LOBYTE(v325) = 0;
    v167 = (void **)(v31 + 2368);
    if (v31[2391] < 0) {
      operator delete(*v167);
    }
    *((void *)v31 + 298) = v328;
    *(_OWORD *)v167 = v327;
    HIBYTE(v328) = 0;
    LOBYTE(v327) = 0;
    *(_OWORD *)(v31 + 2392) = v329;
    v31[2408] = v330;
    v168 = (void **)(v31 + 2416);
    if (v31[2439] < 0) {
      operator delete(*v168);
    }
    *((void *)v31 + 304) = v332;
    *(_OWORD *)v168 = v331;
    HIBYTE(v332) = 0;
    LOBYTE(v33bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    v169 = (void **)(v31 + 2440);
    if (v31[2463] < 0) {
      operator delete(*v169);
    }
    *(_OWORD *)v169 = v333;
    *((void *)v31 + 307) = v334;
    HIBYTE(v334) = 0;
    LOBYTE(v33IMSCallOptions::~IMSCallOptions(this + 3) = 0;
    v31[2480] = v336;
    *((_OWORD *)v31 + 154) = v335;
    v170 = (void **)(v31 + 2488);
    if (v31[2511] < 0) {
      operator delete(*v170);
    }
    *((void *)v31 + 31IMSCallOptions::~IMSCallOptions(this + 3) = v338;
    *(_OWORD *)v170 = v337;
    HIBYTE(v338) = 0;
    LOBYTE(v337) = 0;
    v171 = (void **)(v31 + 2512);
    if (v31[2535] < 0) {
      operator delete(*v171);
    }
    *((void *)v31 + 31ims::StackConfig::~StackConfig(this + 6) = v340;
    *(_OWORD *)v171 = v339;
    HIBYTE(v340) = 0;
    LOBYTE(v339) = 0;
    *(_OWORD *)(v31 + 253ims::StackConfig::~StackConfig(this + 6) = v341;
    v31[2552] = v342;
    *((_WORD *)v31 + 1280) = v343;
    v31[2562] = v344;
    v172 = v31 + 2576;
    std::__tree<unsigned int>::destroy((uint64_t)(v31 + 2568), *((void **)v31 + 322));
    *((void *)v31 + 32bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v345;
    uint64_t v173 = v346;
    *((void *)v31 + 322) = v346;
    uint64_t v174 = v347;
    *((void *)v31 + 32IMSCallOptions::~IMSCallOptions(this + 3) = v347;
    if (v174)
    {
      *(void *)(v173 + 1ims::StackConfig::~StackConfig(this + 6) = v172;
      v345 = &v346;
      uint64_t v346 = 0;
      uint64_t v347 = 0;
    }
    else
    {
      *((void *)v31 + 32bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v172;
    }
    v175 = v31 + 2600;
    std::__tree<unsigned int>::destroy((uint64_t)(v31 + 2592), *((void **)v31 + 325));
    *((void *)v31 + 324) = v348;
    uint64_t v176 = v349;
    *((void *)v31 + 325) = v349;
    uint64_t v177 = v350;
    *((void *)v31 + 32ims::StackConfig::~StackConfig(this + 6) = v350;
    if (v177)
    {
      *(void *)(v176 + 1ims::StackConfig::~StackConfig(this + 6) = v175;
      v348 = &v349;
      uint64_t v349 = 0;
      uint64_t v350 = 0;
    }
    else
    {
      *((void *)v31 + 324) = v175;
    }
    v178 = (void **)(v31 + 2616);
    if (v31[2639] < 0) {
      operator delete(*v178);
    }
    *(_OWORD *)v178 = v351;
    *((void *)v31 + 329) = v352;
    HIBYTE(v352) = 0;
    LOBYTE(v35bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    *((void *)v31 + 330) = v353;
    v179 = (void **)(v31 + 2648);
    if (v31[2671] < 0) {
      operator delete(*v179);
    }
    *(_OWORD *)v179 = v354;
    *((void *)v31 + 33IMSCallOptions::~IMSCallOptions(this + 3) = v355;
    long long v180 = v357[0];
    *((_OWORD *)v31 + 167) = v356;
    HIBYTE(v355) = 0;
    LOBYTE(v354) = 0;
    *((_OWORD *)v31 + 168) = v180;
    *(_OWORD *)(v31 + 2699) = *(_OWORD *)((char *)v357 + 11);
    v181 = v31 + 2736;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v31 + 2728), *((void **)v31 + 342));
    *((void *)v31 + 34bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v358;
    uint64_t v182 = v359;
    *((void *)v31 + 342) = v359;
    uint64_t v183 = v360;
    *((void *)v31 + 34IMSCallOptions::~IMSCallOptions(this + 3) = v360;
    if (v183)
    {
      *(void *)(v182 + 1ims::StackConfig::~StackConfig(this + 6) = v181;
      v358 = &v359;
      uint64_t v359 = 0;
      uint64_t v360 = 0;
    }
    else
    {
      *((void *)v31 + 34bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v181;
    }
    v184 = v31 + 2768;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v31 + 2760), *((void **)v31 + 346));
    *((void *)v31 + 345) = v361;
    uint64_t v185 = v362;
    *((void *)v31 + 34ims::StackConfig::~StackConfig(this + 6) = v362;
    uint64_t v186 = v363;
    *((void *)v31 + 347) = v363;
    if (v186)
    {
      *(void *)(v185 + 1ims::StackConfig::~StackConfig(this + 6) = v184;
      v361 = &v362;
      uint64_t v362 = 0;
      uint64_t v363 = 0;
    }
    else
    {
      *((void *)v31 + 345) = v184;
    }
    v187 = v31 + 2800;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v31 + 2792), *((void **)v31 + 350));
    *((void *)v31 + 349) = v364;
    uint64_t v188 = v365;
    *((void *)v31 + 350) = v365;
    uint64_t v189 = v366;
    *((void *)v31 + 35bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v366;
    if (v189)
    {
      *(void *)(v188 + 1ims::StackConfig::~StackConfig(this + 6) = v187;
      v364 = &v365;
      uint64_t v365 = 0;
      uint64_t v366 = 0;
    }
    else
    {
      *((void *)v31 + 349) = v187;
    }
    v190 = v31 + 2832;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v31 + 2824), *((void **)v31 + 354));
    *((void *)v31 + 35IMSCallOptions::~IMSCallOptions(this + 3) = v367;
    uint64_t v191 = v368;
    *((void *)v31 + 354) = v368;
    uint64_t v192 = v369;
    *((void *)v31 + 355) = v369;
    if (v192)
    {
      *(void *)(v191 + 1ims::StackConfig::~StackConfig(this + 6) = v190;
      v367 = &v368;
      uint64_t v368 = 0;
      uint64_t v369 = 0;
    }
    else
    {
      *((void *)v31 + 35IMSCallOptions::~IMSCallOptions(this + 3) = v190;
    }
    v193 = v31 + 2864;
    std::__tree<unsigned int>::destroy((uint64_t)(v31 + 2856), *((void **)v31 + 358));
    *((void *)v31 + 357) = v370;
    uint64_t v194 = v371;
    *((void *)v31 + 358) = v371;
    uint64_t v195 = v372;
    *((void *)v31 + 359) = v372;
    if (v195)
    {
      *(void *)(v194 + 1ims::StackConfig::~StackConfig(this + 6) = v193;
      v370 = &v371;
      uint64_t v371 = 0;
      uint64_t v372 = 0;
    }
    else
    {
      *((void *)v31 + 357) = v193;
    }
    v31[2880] = v373;
    v196 = (void **)(v31 + 2888);
    if (v31[2911] < 0) {
      operator delete(*v196);
    }
    *((void *)v31 + 36IMSCallOptions::~IMSCallOptions(this + 3) = *(void *)&v374[1];
    *(_OWORD *)v196 = v374[0];
    BYTE7(v374[1]) = 0;
    LOBYTE(v374[0]) = 0;
    v197 = (void **)(v31 + 2912);
    if (v31[2935] < 0) {
      operator delete(*v197);
    }
    *((void *)v31 + 36ims::StackConfig::~StackConfig(this + 6) = *((void *)&v374[2] + 1);
    *(_OWORD *)v197 = *(_OWORD *)((char *)&v374[1] + 8);
    HIBYTE(v374[2]) = 0;
    BYTE8(v374[1]) = 0;
    v198 = (void **)(v31 + 2936);
    if (v31[2959] < 0) {
      operator delete(*v198);
    }
    *(_OWORD *)v198 = v375;
    *((void *)v31 + 369) = v376;
    HIBYTE(v37ims::StackConfig::~StackConfig(this + 6) = 0;
    LOBYTE(v375) = 0;
    v31[2960] = v377;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v31 + 2968));
    *(_OWORD *)(v31 + 2968) = v378;
    *((void *)v31 + 37IMSCallOptions::~IMSCallOptions(this + 3) = v379;
    uint64_t v379 = 0;
    long long v378 = 0u;
    *((void *)v31 + 374) = v380;
    *((_WORD *)v31 + 1500) = v381;
    *((_OWORD *)v31 + 188) = v382;
    *((_OWORD *)v31 + 189) = v383[0];
    *(_OWORD *)(v31 + 3034) = *(_OWORD *)((char *)v383 + 10);
    SipUri::operator=((SipUri *)(v31 + 3056), (uint64_t)v384);
    v31[3464] = v385;
    v199 = (void **)(v31 + 3472);
    if (v31[3495] < 0) {
      operator delete(*v199);
    }
    *((void *)v31 + 43ims::StackConfig::~StackConfig(this + 6) = v387;
    *(_OWORD *)v199 = v386;
    HIBYTE(v387) = 0;
    LOBYTE(v38ims::StackConfig::~StackConfig(this + 6) = 0;
    v200 = (void **)(v31 + 3496);
    if (v31[3519] < 0) {
      operator delete(*v200);
    }
    *(_OWORD *)v200 = v388;
    *((void *)v31 + 439) = v389;
    HIBYTE(v389) = 0;
    LOBYTE(v388) = 0;
    if (v32 != &__p)
    {
      std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,unsigned int>,std::__tree_node<std::__value_type<std::string,unsigned int>,void *> *,long>>((uint64_t *)v31 + 441, v390, &v391);
      *((_DWORD *)v31 + 888) = v392;
      v31[3556] = v393;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)v31 + 446, v394, &v395);
    }
    long long v201 = *(_OWORD *)v398;
    *((_OWORD *)v31 + 225) = v397;
    v31[3592] = v396;
    *((_OWORD *)v31 + 22ims::StackConfig::~StackConfig(this + 6) = v201;
    *(_OWORD *)(v31 + 3628) = *(_OWORD *)((char *)&v398[1] + 4);
    v202 = (void **)(v31 + 3648);
    if (v31[3671] < 0) {
      operator delete(*v202);
    }
    *((void *)v31 + 458) = v398[6];
    *(_OWORD *)v202 = *(_OWORD *)&v398[4];
    HIBYTE(v398[6]) = 0;
    LOBYTE(v398[4]) = 0;
    v203 = (void **)(v31 + 3672);
    if (v31[3695] < 0) {
      operator delete(*v203);
    }
    *(_OWORD *)v203 = v399;
    *((void *)v31 + 46bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v400;
    HIBYTE(v400) = 0;
    LOBYTE(v399) = 0;
    *((_WORD *)v31 + 1848) = v401;
    v204 = v31 + 3720;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v31 + 3712), *((void **)v31 + 465));
    *((void *)v31 + 464) = v402;
    uint64_t v205 = v403;
    *((void *)v31 + 465) = v403;
    uint64_t v206 = v404;
    *((void *)v31 + 46ims::StackConfig::~StackConfig(this + 6) = v404;
    if (v206)
    {
      *(void *)(v205 + 1ims::StackConfig::~StackConfig(this + 6) = v204;
      v402 = &v403;
      uint64_t v403 = 0;
      uint64_t v404 = 0;
    }
    else
    {
      *((void *)v31 + 464) = v204;
    }
    v207 = v31 + 3752;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v31 + 3744), *((void **)v31 + 469));
    *((void *)v31 + 468) = v405;
    uint64_t v208 = v406;
    *((void *)v31 + 469) = v406;
    uint64_t v209 = v407;
    *((void *)v31 + 470) = v407;
    if (v209)
    {
      *(void *)(v208 + 1ims::StackConfig::~StackConfig(this + 6) = v207;
      v405 = &v406;
      uint64_t v406 = 0;
      uint64_t v407 = 0;
    }
    else
    {
      *((void *)v31 + 468) = v207;
    }
    v210 = v31 + 3784;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v31 + 3776), *((void **)v31 + 473));
    *((void *)v31 + 472) = v408;
    uint64_t v211 = v409;
    *((void *)v31 + 47IMSCallOptions::~IMSCallOptions(this + 3) = v409;
    uint64_t v212 = v410;
    *((void *)v31 + 474) = v410;
    if (v212)
    {
      *(void *)(v211 + 1ims::StackConfig::~StackConfig(this + 6) = v210;
      v408 = &v409;
      uint64_t v409 = 0;
      uint64_t v410 = 0;
    }
    else
    {
      *((void *)v31 + 472) = v210;
    }
    long long v213 = v412;
    *(_OWORD *)(v31 + 3800) = v411;
    *(_OWORD *)(v31 + 381ims::StackConfig::~StackConfig(this + 6) = v213;
    v214 = v31 + 3848;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v31 + 3840), *((void **)v31 + 481));
    *((void *)v31 + 480) = v413;
    uint64_t v215 = v414;
    *((void *)v31 + 48bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v414;
    uint64_t v216 = v415;
    *((void *)v31 + 482) = v415;
    if (v216)
    {
      *(void *)(v215 + 1ims::StackConfig::~StackConfig(this + 6) = v214;
      v413 = &v414;
      uint64_t v414 = 0;
      uint64_t v415 = 0;
    }
    else
    {
      *((void *)v31 + 480) = v214;
    }
    *((void *)v31 + 48IMSCallOptions::~IMSCallOptions(this + 3) = v416;
    v217 = (void **)(v31 + 3872);
    if (v31[3895] < 0) {
      operator delete(*v217);
    }
    *((void *)v31 + 48ims::StackConfig::~StackConfig(this + 6) = *(void *)&v417[1];
    *(_OWORD *)v217 = v417[0];
    BYTE7(v417[1]) = 0;
    LOBYTE(v417[0]) = 0;
    v218 = (void **)(v31 + 3896);
    if (v31[3919] < 0) {
      operator delete(*v218);
    }
    *(_OWORD *)v218 = *(_OWORD *)((char *)&v417[1] + 8);
    *((void *)v31 + 489) = *((void *)&v417[2] + 1);
    HIBYTE(v417[2]) = 0;
    BYTE8(v417[1]) = 0;
    *((void *)v31 + 490) = v418;
    *((_WORD *)v31 + 1964) = v419;
    v219 = (void **)(v31 + 3936);
    if (v31[3959] < 0) {
      operator delete(*v219);
    }
    *(_OWORD *)v219 = v420;
    *((void *)v31 + 494) = v421;
    HIBYTE(v42bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    LOBYTE(v420) = 0;
    *((_WORD *)v31 + 1980) = v422;
    v220 = (void **)(v31 + 3968);
    if (v31[3991] < 0) {
      operator delete(*v220);
    }
    *(_OWORD *)v220 = v423;
    *((void *)v31 + 498) = v424;
    HIBYTE(v424) = 0;
    LOBYTE(v42IMSCallOptions::~IMSCallOptions(this + 3) = 0;
    *((_DWORD *)v31 + 998) = v425;
    v221 = v31 + 4016;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v31 + 4008), *((void **)v31 + 502));
    *((void *)v31 + 50bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v426;
    uint64_t v222 = v427;
    *((void *)v31 + 502) = v427;
    uint64_t v223 = v428;
    *((void *)v31 + 50IMSCallOptions::~IMSCallOptions(this + 3) = v428;
    if (v223)
    {
      *(void *)(v222 + 1ims::StackConfig::~StackConfig(this + 6) = v221;
      v426 = &v427;
      uint64_t v427 = 0;
      uint64_t v428 = 0;
    }
    else
    {
      *((void *)v31 + 50bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v221;
    }
    v224 = v31 + 4048;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v31 + 4040), *((void **)v31 + 506));
    *((void *)v31 + 505) = v429;
    uint64_t v225 = v430;
    *((void *)v31 + 50ims::StackConfig::~StackConfig(this + 6) = v430;
    uint64_t v226 = v431;
    *((void *)v31 + 507) = v431;
    if (v226)
    {
      *(void *)(v225 + 1ims::StackConfig::~StackConfig(this + 6) = v224;
      v429 = &v430;
      uint64_t v430 = 0;
      uint64_t v431 = 0;
    }
    else
    {
      *((void *)v31 + 505) = v224;
    }
    v227 = v31 + 4080;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v31 + 4072), *((void **)v31 + 510));
    *((void *)v31 + 509) = v432;
    uint64_t v228 = v433;
    *((void *)v31 + 510) = v433;
    uint64_t v229 = v434;
    *((void *)v31 + 51bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v434;
    if (v229)
    {
      *(void *)(v228 + 1ims::StackConfig::~StackConfig(this + 6) = v227;
      v432 = &v433;
      uint64_t v433 = 0;
      uint64_t v434 = 0;
    }
    else
    {
      *((void *)v31 + 509) = v227;
    }
    v230 = v31 + 4112;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v31 + 4104), *((void **)v31 + 514));
    *((void *)v31 + 51IMSCallOptions::~IMSCallOptions(this + 3) = v435;
    uint64_t v231 = v436;
    *((void *)v31 + 514) = v436;
    uint64_t v232 = v437;
    *((void *)v31 + 515) = v437;
    if (v232)
    {
      *(void *)(v231 + 1ims::StackConfig::~StackConfig(this + 6) = v230;
      v435 = &v436;
      uint64_t v436 = 0;
      uint64_t v437 = 0;
    }
    else
    {
      *((void *)v31 + 51IMSCallOptions::~IMSCallOptions(this + 3) = v230;
    }
    *((void *)v31 + 51ims::StackConfig::~StackConfig(this + 6) = v438;
    v233 = v31 + 4144;
    std::__tree<std::string>::destroy((uint64_t)(v31 + 4136), *((char **)v31 + 518));
    *((void *)v31 + 517) = v439;
    uint64_t v234 = v440;
    *((void *)v31 + 518) = v440;
    uint64_t v235 = v441;
    *((void *)v31 + 519) = v441;
    if (v235)
    {
      *(void *)(v234 + 1ims::StackConfig::~StackConfig(this + 6) = v233;
      v439 = &v440;
      uint64_t v440 = 0;
      uint64_t v441 = 0;
    }
    else
    {
      *((void *)v31 + 517) = v233;
    }
    v31[4164] = v443;
    *((_DWORD *)v31 + 1040) = v442;
    v236 = v31 + 4176;
    std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy((uint64_t)(v31 + 4168), *((void **)v31 + 522));
    *((void *)v31 + 52bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v444;
    uint64_t v237 = v445;
    *((void *)v31 + 522) = v445;
    uint64_t v238 = v446;
    *((void *)v31 + 52IMSCallOptions::~IMSCallOptions(this + 3) = v446;
    if (v238)
    {
      *(void *)(v237 + 1ims::StackConfig::~StackConfig(this + 6) = v236;
      v444 = &v445;
      uint64_t v445 = 0;
      uint64_t v446 = 0;
    }
    else
    {
      *((void *)v31 + 52bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v236;
    }
    v239 = v31 + 4208;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v31 + 4200), *((void **)v31 + 526));
    *((void *)v31 + 525) = v447;
    uint64_t v240 = v448;
    *((void *)v31 + 52ims::StackConfig::~StackConfig(this + 6) = v448;
    uint64_t v241 = v449;
    *((void *)v31 + 527) = v449;
    if (v241)
    {
      *(void *)(v240 + 1ims::StackConfig::~StackConfig(this + 6) = v239;
      v447 = &v448;
      uint64_t v448 = 0;
      uint64_t v449 = 0;
    }
    else
    {
      *((void *)v31 + 525) = v239;
    }
    v31[4224] = v450;
    v242 = v31 + 4240;
    std::__tree<unsigned int>::destroy((uint64_t)(v31 + 4232), *((void **)v31 + 530));
    *((void *)v31 + 529) = v451;
    uint64_t v243 = v452;
    *((void *)v31 + 530) = v452;
    uint64_t v244 = v453;
    *((void *)v31 + 53bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v453;
    if (v244)
    {
      *(void *)(v243 + 1ims::StackConfig::~StackConfig(this + 6) = v242;
      v451 = &v452;
      uint64_t v452 = 0;
      uint64_t v453 = 0;
    }
    else
    {
      *((void *)v31 + 529) = v242;
    }
    if (v32 != &__p) {
      std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,ims::SpamCategory>,std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *> *,long>>((uint64_t *)v31 + 532, v454, &v455);
    }
    v31[4312] = v458;
    *(_OWORD *)(v31 + 4280) = v456;
    *(_OWORD *)(v31 + 429ims::StackConfig::~StackConfig(this + 6) = v457;
    v245 = v31 + 4336;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v31 + 4328), *((void **)v31 + 542));
    *((void *)v31 + 54bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v459;
    uint64_t v246 = v460;
    *((void *)v31 + 542) = v460;
    uint64_t v247 = v461;
    *((void *)v31 + 54IMSCallOptions::~IMSCallOptions(this + 3) = v461;
    if (v247)
    {
      *(void *)(v246 + 1ims::StackConfig::~StackConfig(this + 6) = v245;
      v459 = &v460;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
    }
    else
    {
      *((void *)v31 + 54bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v245;
    }
    v248 = (void **)(v31 + 4352);
    if (v31[4375] < 0) {
      operator delete(*v248);
    }
    *((void *)v31 + 54ims::StackConfig::~StackConfig(this + 6) = *(void *)&v462[16];
    *(_OWORD *)v248 = *(_OWORD *)v462;
    v462[23] = 0;
    v462[0] = 0;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v31 + 4376));
    *(_OWORD *)(v31 + 437ims::StackConfig::~StackConfig(this + 6) = v463;
    *((void *)v31 + 549) = v464;
    uint64_t v464 = 0;
    long long v463 = 0uLL;
    *((_DWORD *)v31 + 1100) = v465;
    v249 = (void **)(v31 + 4408);
    if (v31[4431] < 0) {
      operator delete(*v249);
    }
    *(_OWORD *)v249 = v466;
    *((void *)v31 + 55IMSCallOptions::~IMSCallOptions(this + 3) = v467;
    HIBYTE(v467) = 0;
    LOBYTE(v46ims::StackConfig::~StackConfig(this + 6) = 0;
    SipUri::operator=((SipUri *)(v31 + 4432), (uint64_t)v468);
    long long v250 = v470;
    *(_OWORD *)(v31 + 4840) = v469;
    *(_OWORD *)(v31 + 485ims::StackConfig::~StackConfig(this + 6) = v250;
    v251 = (void **)(v31 + 4872);
    if (v31[4895] < 0) {
      operator delete(*v251);
    }
    *(_OWORD *)v251 = v471;
    *((void *)v31 + 61bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v472;
    HIBYTE(v472) = 0;
    LOBYTE(v47bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    *((void *)v31 + 612) = v473;
    *((_DWORD *)v31 + 122ims::StackConfig::~StackConfig(this + 6) = v474;
    std::vector<SipSecurityAgreementConfig>::__vdeallocate((void **)v31 + 614);
    *((_OWORD *)v31 + 307) = v475;
    *((void *)v31 + 61ims::StackConfig::~StackConfig(this + 6) = v476;
    uint64_t v476 = 0;
    long long v475 = 0uLL;
    *((void *)v31 + 617) = v477;
    v252 = v31 + 4960;
    std::__tree<unsigned int>::destroy((uint64_t)(v31 + 4952), *((void **)v31 + 620));
    *((void *)v31 + 619) = v478;
    uint64_t v253 = v479;
    *((void *)v31 + 620) = v479;
    uint64_t v254 = v480;
    *((void *)v31 + 62bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v480;
    if (v254)
    {
      *(void *)(v253 + 1ims::StackConfig::~StackConfig(this + 6) = v252;
      v478 = &v479;
      uint64_t v479 = 0;
      uint64_t v480 = 0;
    }
    else
    {
      *((void *)v31 + 619) = v252;
    }
    *((_DWORD *)v31 + 1248) = v482;
    *((_OWORD *)v31 + 31bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v481;
    if (v32 != &__p)
    {
      long long v255 = v484;
      *(_OWORD *)(v31 + 499ims::StackConfig::~StackConfig(this + 6) = v483;
      *(_OWORD *)(v31 + 5012) = v255;
      *((_DWORD *)v31 + 1257) = v485;
    }
    *((void *)v31 + 629) = v486;
    *((_DWORD *)v31 + 1260) = v487;
    BambiCallTerminationReasonsBase::assign((BambiCallTerminationReasonsBase *)(v31 + 5048), (const BambiCallTerminationReasonsBase *)v488);
    BambiCallIncomingTerminationReasons::assign((BambiCallIncomingTerminationReasons *)(v31 + 5216), (const BambiCallIncomingTerminationReasons *)v489);
    v256 = (void **)(v31 + 5408);
    if (v31[5431] < 0) {
      operator delete(*v256);
    }
    *(_OWORD *)v256 = v490;
    *((void *)v31 + 678) = v491;
    HIBYTE(v49bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    LOBYTE(v490) = 0;
    v31[5440] = v493;
    *((void *)v31 + 679) = v492;
    v257 = v31 + 5456;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v31 + 5448), *((void **)v31 + 682));
    *((void *)v31 + 68bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v494;
    uint64_t v258 = v495;
    *((void *)v31 + 682) = v495;
    uint64_t v259 = v496;
    *((void *)v31 + 68IMSCallOptions::~IMSCallOptions(this + 3) = v496;
    if (v259)
    {
      *(void *)(v258 + 1ims::StackConfig::~StackConfig(this + 6) = v257;
      v494 = &v495;
      uint64_t v495 = 0;
      uint64_t v496 = 0;
    }
    else
    {
      *((void *)v31 + 68bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v257;
    }
    *((void *)v31 + 684) = v497;
    *((_WORD *)v31 + 2740) = v498;
    *((_WORD *)v31 + 2744) = v499;
    v260 = (void **)(v31 + 5496);
    if (v31[5519] < 0) {
      operator delete(*v260);
    }
    *(_OWORD *)v260 = v500;
    *((void *)v31 + 689) = v501;
    HIBYTE(v50bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    LOBYTE(v500) = 0;
    SipUri::operator=((SipUri *)(v31 + 5520), (uint64_t)v502);
    v261 = (void **)(v31 + 5928);
    if (v31[5951] < 0) {
      operator delete(*v261);
    }
    *(_OWORD *)v261 = v503;
    *((void *)v31 + 74IMSCallOptions::~IMSCallOptions(this + 3) = v504;
    HIBYTE(v504) = 0;
    v31[5952] = v505;
    LOBYTE(v50IMSCallOptions::~IMSCallOptions(this + 3) = 0;
    v262 = (void **)(v31 + 5960);
    if (v31[5983] < 0) {
      operator delete(*v262);
    }
    *(_OWORD *)v262 = v506;
    *((void *)v31 + 747) = v507;
    HIBYTE(v507) = 0;
    LOBYTE(v50ims::StackConfig::~StackConfig(this + 6) = 0;
  }
  else
  {
    v263 = v30 + 5984;
    *(_OWORD *)&v32->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v30 + 107) = *((void *)&__p.__r_.__value_.__l + 2);
    memset(&__p, 0, sizeof(__p));
    *((_WORD *)v30 + 432) = v272[0];
    *((void *)v30 + 109) = &unk_1F20B3708;
    *((_OWORD *)v30 + 55) = v273;
    *((void *)v30 + 112) = v274;
    long long v273 = 0uLL;
    *((_WORD *)v30 + 452) = v275;
    long long v45 = v276;
    uint64_t v46 = v282;
    *((void *)v30 + 11ims::StackConfig::~StackConfig(this + 6) = v277;
    *((_OWORD *)v30 + 57) = v45;
    uint64_t v274 = 0;
    long long v276 = 0uLL;
    uint64_t v277 = 0;
    long long v47 = v278;
    long long v48 = v279;
    long long v49 = *(_OWORD *)v280;
    *(void *)(v30 + 98bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *(void *)&v280[13];
    *(_OWORD *)(v30 + 952) = v48;
    *(_OWORD *)(v30 + 968) = v49;
    *(_OWORD *)(v30 + 93ims::StackConfig::~StackConfig(this + 6) = v47;
    long long v50 = v281;
    *((void *)v30 + 12ims::StackConfig::~StackConfig(this + 6) = v46;
    *((_OWORD *)v30 + 62) = v50;
    long long v281 = 0uLL;
    long long v51 = v283;
    uint64_t v52 = v290;
    *((void *)v30 + 129) = v284;
    *(_OWORD *)(v30 + 101ims::StackConfig::~StackConfig(this + 6) = v51;
    uint64_t v282 = 0;
    long long v283 = 0uLL;
    uint64_t v284 = 0;
    v30[1040] = v285;
    *((void *)v30 + 139) = v52;
    uint64_t v53 = v294;
    *((void *)v30 + 142) = v292;
    *((void *)v30 + 145) = v53;
    uint64_t v54 = v298;
    *((void *)v30 + 148) = v296;
    long long v56 = v288;
    long long v55 = v289;
    long long v57 = v286;
    *(_OWORD *)(v30 + 1064) = v287;
    *(_OWORD *)(v30 + 1080) = v56;
    *(_OWORD *)(v30 + 1048) = v57;
    *(_OWORD *)(v30 + 109ims::StackConfig::~StackConfig(this + 6) = v55;
    long long v289 = 0uLL;
    *((_OWORD *)v30 + 70) = v291;
    long long v291 = 0uLL;
    uint64_t v290 = 0;
    *(_OWORD *)(v30 + 1144) = v293;
    uint64_t v292 = 0;
    long long v293 = 0uLL;
    uint64_t v294 = 0;
    *((_OWORD *)v30 + 7IMSCallOptions::~IMSCallOptions(this + 3) = v295;
    long long v295 = 0uLL;
    uint64_t v296 = 0;
    long long v58 = v297;
    *((void *)v30 + 15bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v54;
    *(_OWORD *)(v30 + 1192) = v58;
    long long v297 = 0uLL;
    uint64_t v298 = 0;
    v30[1216] = v299;
    v30[1224] = 0;
    v30[1248] = 0;
    if (v302)
    {
      *(_OWORD *)(v30 + 1224) = v300;
      *((void *)v30 + 155) = v301;
      uint64_t v301 = 0;
      long long v300 = 0uLL;
      v30[1248] = 1;
    }
    uint64_t v59 = v306;
    *((void *)v30 + 159) = v304;
    *(_OWORD *)(v30 + 125ims::StackConfig::~StackConfig(this + 6) = v303;
    long long v60 = v305;
    *(void *)&long long v305 = 0;
    long long v303 = 0uLL;
    *((void *)v30 + 162) = v59;
    *((_OWORD *)v30 + 80) = v60;
    uint64_t v304 = 0;
    *((void *)&v305 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    uint64_t v61 = v311;
    *((void *)v30 + 165) = v308;
    *(_OWORD *)(v30 + 1304) = v307;
    uint64_t v306 = 0;
    long long v307 = 0uLL;
    uint64_t v308 = 0;
    v30[1328] = v309;
    *(_OWORD *)(v30 + 133ims::StackConfig::~StackConfig(this + 6) = v310;
    *((void *)v30 + 169) = v61;
    long long v310 = 0uLL;
    uint64_t v311 = 0;
    long long v62 = v312;
    long long v63 = v313[0];
    *(_OWORD *)(v30 + 1389) = *(_OWORD *)((char *)v313 + 13);
    *((_OWORD *)v30 + 8ims::StackConfig::~StackConfig(this + 6) = v63;
    *((_OWORD *)v30 + 85) = v62;
    SipUri::SipUri((SipUri *)(v30 + 1408), (const SipUri *)v314);
    SipUri::SipUri((SipUri *)(v31 + 1816), (const SipUri *)v316);
    *((_OWORD *)v31 + 139) = v317;
    *((void *)v31 + 280) = *(void *)v318;
    long long v317 = 0u;
    long long v64 = *(_OWORD *)&v318[8];
    *(_OWORD *)v318 = 0u;
    *((void *)v31 + 28IMSCallOptions::~IMSCallOptions(this + 3) = *(void *)&v318[24];
    *(_OWORD *)(v31 + 2248) = v64;
    *(_OWORD *)&v318[16] = 0u;
    *((void *)v31 + 28ims::StackConfig::~StackConfig(this + 6) = v320;
    *((_OWORD *)v31 + 142) = v319;
    long long v319 = 0u;
    uint64_t v320 = 0;
    *(_OWORD *)(v31 + 229ims::StackConfig::~StackConfig(this + 6) = v321;
    *((void *)v31 + 289) = v322;
    long long v321 = 0u;
    uint64_t v322 = 0;
    long long v65 = v323;
    *((void *)v31 + 292) = v324;
    *((_OWORD *)v31 + 145) = v65;
    long long v66 = v325;
    *((void *)v31 + 295) = v326;
    *(_OWORD *)(v31 + 2344) = v66;
    uint64_t v326 = 0;
    long long v325 = 0u;
    long long v67 = v327;
    *((void *)v31 + 298) = v328;
    *((_OWORD *)v31 + 148) = v67;
    long long v327 = 0uLL;
    uint64_t v328 = 0;
    long long v68 = v329;
    v31[2408] = v330;
    *(_OWORD *)(v31 + 2392) = v68;
    long long v69 = v331;
    *((void *)v31 + 304) = v332;
    *((_OWORD *)v31 + 15bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v69;
    long long v331 = 0uLL;
    uint64_t v332 = 0;
    long long v70 = v333;
    *((void *)v31 + 307) = v334;
    *(_OWORD *)(v31 + 2440) = v70;
    long long v333 = 0uLL;
    uint64_t v334 = 0;
    long long v71 = v335;
    v31[2480] = v336;
    *((_OWORD *)v31 + 154) = v71;
    long long v72 = v337;
    *((void *)v31 + 31IMSCallOptions::~IMSCallOptions(this + 3) = v338;
    *(_OWORD *)(v31 + 2488) = v72;
    long long v337 = 0uLL;
    uint64_t v338 = 0;
    long long v73 = v339;
    *((void *)v31 + 31ims::StackConfig::~StackConfig(this + 6) = v340;
    *((_OWORD *)v31 + 157) = v73;
    long long v339 = 0uLL;
    uint64_t v340 = 0;
    long long v74 = v341;
    v31[2552] = v342;
    *(_OWORD *)(v31 + 253ims::StackConfig::~StackConfig(this + 6) = v74;
    __int16 v75 = v343;
    v31[2562] = v344;
    *((_WORD *)v31 + 1280) = v75;
    *((void *)v31 + 32bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v345;
    uint64_t v76 = v31 + 2576;
    uint64_t v77 = v346;
    *((void *)v31 + 322) = v346;
    uint64_t v78 = v347;
    *((void *)v31 + 32IMSCallOptions::~IMSCallOptions(this + 3) = v347;
    if (v78)
    {
      *(void *)(v77 + 1ims::StackConfig::~StackConfig(this + 6) = v76;
      v345 = &v346;
      uint64_t v346 = 0;
      uint64_t v347 = 0;
    }
    else
    {
      *((void *)v31 + 32bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v76;
    }
    *((void *)v31 + 324) = v348;
    v79 = v31 + 2600;
    uint64_t v80 = v349;
    *((void *)v31 + 325) = v349;
    uint64_t v81 = v350;
    *((void *)v31 + 32ims::StackConfig::~StackConfig(this + 6) = v350;
    if (v81)
    {
      *(void *)(v80 + 1ims::StackConfig::~StackConfig(this + 6) = v79;
      v348 = &v349;
      uint64_t v349 = 0;
      uint64_t v350 = 0;
    }
    else
    {
      *((void *)v31 + 324) = v79;
    }
    *((void *)v31 + 329) = v352;
    *(_OWORD *)(v31 + 261ims::StackConfig::~StackConfig(this + 6) = v351;
    long long v351 = 0uLL;
    uint64_t v352 = 0;
    *((void *)v31 + 330) = v353;
    *((void *)v31 + 33IMSCallOptions::~IMSCallOptions(this + 3) = v355;
    *(_OWORD *)(v31 + 2648) = v354;
    long long v354 = 0uLL;
    uint64_t v355 = 0;
    long long v82 = v356;
    long long v83 = v357[0];
    *(_OWORD *)(v31 + 2699) = *(_OWORD *)((char *)v357 + 11);
    *((_OWORD *)v31 + 168) = v83;
    *((_OWORD *)v31 + 167) = v82;
    *((void *)v31 + 340) = &unk_1F20E3DD0;
    *((void *)v31 + 34bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v358;
    v84 = v31 + 2736;
    uint64_t v85 = v359;
    *((void *)v31 + 342) = v359;
    uint64_t v86 = v360;
    *((void *)v31 + 34IMSCallOptions::~IMSCallOptions(this + 3) = v360;
    if (v86)
    {
      *(void *)(v85 + 1ims::StackConfig::~StackConfig(this + 6) = v84;
      v358 = &v359;
      uint64_t v359 = 0;
      uint64_t v360 = 0;
    }
    else
    {
      *((void *)v31 + 34bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v84;
    }
    *((void *)v31 + 344) = &unk_1F20E3DD0;
    *((void *)v31 + 345) = v361;
    uint64_t v87 = v31 + 2768;
    uint64_t v88 = v362;
    *((void *)v31 + 34ims::StackConfig::~StackConfig(this + 6) = v362;
    uint64_t v89 = v363;
    *((void *)v31 + 347) = v363;
    if (v89)
    {
      *(void *)(v88 + 1ims::StackConfig::~StackConfig(this + 6) = v87;
      v361 = &v362;
      uint64_t v362 = 0;
      uint64_t v363 = 0;
    }
    else
    {
      *((void *)v31 + 345) = v87;
    }
    *((void *)v31 + 348) = &unk_1F20E3DD0;
    *((void *)v31 + 349) = v364;
    char v90 = v31 + 2800;
    uint64_t v91 = v365;
    *((void *)v31 + 350) = v365;
    uint64_t v92 = v366;
    *((void *)v31 + 35bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v366;
    if (v92)
    {
      *(void *)(v91 + 1ims::StackConfig::~StackConfig(this + 6) = v90;
      v364 = &v365;
      uint64_t v365 = 0;
      uint64_t v366 = 0;
    }
    else
    {
      *((void *)v31 + 349) = v90;
    }
    *((void *)v31 + 352) = &unk_1F20E3DD0;
    *((void *)v31 + 35IMSCallOptions::~IMSCallOptions(this + 3) = v367;
    v93 = v31 + 2832;
    uint64_t v94 = v368;
    *((void *)v31 + 354) = v368;
    uint64_t v95 = v369;
    *((void *)v31 + 355) = v369;
    if (v95)
    {
      *(void *)(v94 + 1ims::StackConfig::~StackConfig(this + 6) = v93;
      v367 = &v368;
      uint64_t v368 = 0;
      uint64_t v369 = 0;
    }
    else
    {
      *((void *)v31 + 35IMSCallOptions::~IMSCallOptions(this + 3) = v93;
    }
    *((void *)v31 + 35ims::StackConfig::~StackConfig(this + 6) = &unk_1F20D68F0;
    *((void *)v31 + 357) = v370;
    __int16 v96 = v31 + 2864;
    uint64_t v97 = v371;
    *((void *)v31 + 358) = v371;
    uint64_t v98 = v372;
    *((void *)v31 + 359) = v372;
    if (v98)
    {
      *(void *)(v97 + 1ims::StackConfig::~StackConfig(this + 6) = v96;
      v370 = &v371;
      uint64_t v371 = 0;
      uint64_t v372 = 0;
    }
    else
    {
      *((void *)v31 + 357) = v96;
    }
    v31[2880] = v373;
    *((void *)v31 + 36IMSCallOptions::~IMSCallOptions(this + 3) = *(void *)&v374[1];
    *(_OWORD *)(v31 + 2888) = v374[0];
    memset(v374, 0, 24);
    *((void *)v31 + 36ims::StackConfig::~StackConfig(this + 6) = *((void *)&v374[2] + 1);
    *((_OWORD *)v31 + 182) = *(_OWORD *)((char *)&v374[1] + 8);
    memset((char *)&v374[1] + 8, 0, 24);
    long long v99 = v375;
    *((void *)v31 + 369) = v376;
    *(_OWORD *)(v31 + 293ims::StackConfig::~StackConfig(this + 6) = v99;
    uint64_t v376 = 0;
    long long v375 = 0u;
    v31[2960] = v377;
    *(_OWORD *)(v31 + 2968) = v378;
    *((void *)v31 + 37IMSCallOptions::~IMSCallOptions(this + 3) = v379;
    long long v378 = 0u;
    uint64_t v379 = 0;
    uint64_t v100 = v380;
    *((_WORD *)v31 + 1500) = v381;
    *((void *)v31 + 374) = v100;
    long long v101 = v382;
    long long v102 = v383[0];
    *(_OWORD *)(v31 + 3034) = *(_OWORD *)((char *)v383 + 10);
    *((_OWORD *)v31 + 189) = v102;
    *((_OWORD *)v31 + 188) = v101;
    SipUri::SipUri((SipUri *)(v31 + 3056), (const SipUri *)v384);
    v31[3464] = v385;
    *((void *)v31 + 43ims::StackConfig::~StackConfig(this + 6) = v387;
    *((_OWORD *)v31 + 217) = v386;
    uint64_t v387 = 0;
    long long v386 = 0uLL;
    *((void *)v31 + 439) = v389;
    *(_OWORD *)(v31 + 349ims::StackConfig::~StackConfig(this + 6) = v388;
    long long v388 = 0uLL;
    uint64_t v389 = 0;
    *((void *)v31 + 440) = &unk_1F20CA1D0;
    std::map<std::string,unsigned int>::map[abi:ne180100]((uint64_t *)v31 + 441, (uint64_t)&v390);
    *((_DWORD *)v31 + 888) = v392;
    v31[3556] = v393;
    *((void *)v31 + 445) = &unk_1F20B37B0;
    std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)v31 + 446, (void **)v394, (void **)&v395);
    v31[3593] = 1;
    v31[3592] = v396;
    long long v103 = *(_OWORD *)v398;
    *((_OWORD *)v31 + 225) = v397;
    *((_OWORD *)v31 + 22ims::StackConfig::~StackConfig(this + 6) = v103;
    *(_OWORD *)(v31 + 3628) = *(_OWORD *)((char *)&v398[1] + 4);
    *((void *)v31 + 458) = v398[6];
    *((_OWORD *)v31 + 228) = *(_OWORD *)&v398[4];
    memset(&v398[4], 0, 24);
    long long v104 = v399;
    *((void *)v31 + 46bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v400;
    *(_OWORD *)(v31 + 3672) = v104;
    uint64_t v400 = 0;
    long long v399 = 0u;
    *((_WORD *)v31 + 1848) = v401;
    *((void *)v31 + 46IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20E3DD0;
    *((void *)v31 + 464) = v402;
    uint64_t v105 = v31 + 3720;
    uint64_t v106 = v403;
    *((void *)v31 + 465) = v403;
    uint64_t v107 = v404;
    *((void *)v31 + 46ims::StackConfig::~StackConfig(this + 6) = v404;
    if (v107)
    {
      *(void *)(v106 + 1ims::StackConfig::~StackConfig(this + 6) = v105;
      v402 = &v403;
      uint64_t v403 = 0;
      uint64_t v404 = 0;
    }
    else
    {
      *((void *)v31 + 464) = v105;
    }
    *((void *)v31 + 467) = &unk_1F20E3DD0;
    *((void *)v31 + 468) = v405;
    uint64_t v108 = v31 + 3752;
    uint64_t v109 = v406;
    *((void *)v31 + 469) = v406;
    uint64_t v110 = v407;
    *((void *)v31 + 470) = v407;
    if (v110)
    {
      *(void *)(v109 + 1ims::StackConfig::~StackConfig(this + 6) = v108;
      v405 = &v406;
      uint64_t v406 = 0;
      uint64_t v407 = 0;
    }
    else
    {
      *((void *)v31 + 468) = v108;
    }
    *((void *)v31 + 47bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E3DD0;
    *((void *)v31 + 472) = v408;
    std::string v111 = v31 + 3784;
    uint64_t v112 = v409;
    *((void *)v31 + 47IMSCallOptions::~IMSCallOptions(this + 3) = v409;
    uint64_t v113 = v410;
    *((void *)v31 + 474) = v410;
    if (v113)
    {
      *(void *)(v112 + 1ims::StackConfig::~StackConfig(this + 6) = v111;
      v408 = &v409;
      uint64_t v409 = 0;
      uint64_t v410 = 0;
    }
    else
    {
      *((void *)v31 + 472) = v111;
    }
    long long v114 = v412;
    *(_OWORD *)(v31 + 3800) = v411;
    *(_OWORD *)(v31 + 381ims::StackConfig::~StackConfig(this + 6) = v114;
    *((void *)v31 + 479) = &unk_1F20E3DD0;
    *((void *)v31 + 480) = v413;
    long long v115 = v31 + 3848;
    uint64_t v116 = v414;
    *((void *)v31 + 48bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v414;
    uint64_t v117 = v415;
    *((void *)v31 + 482) = v415;
    if (v117)
    {
      *(void *)(v116 + 1ims::StackConfig::~StackConfig(this + 6) = v115;
      v413 = &v414;
      uint64_t v414 = 0;
      uint64_t v415 = 0;
    }
    else
    {
      *((void *)v31 + 480) = v115;
    }
    *((void *)v31 + 48IMSCallOptions::~IMSCallOptions(this + 3) = v416;
    *((void *)v31 + 48ims::StackConfig::~StackConfig(this + 6) = *(void *)&v417[1];
    *((_OWORD *)v31 + 242) = v417[0];
    memset(v417, 0, 24);
    *((void *)v31 + 489) = *((void *)&v417[2] + 1);
    *(_OWORD *)(v31 + 389ims::StackConfig::~StackConfig(this + 6) = *(_OWORD *)((char *)&v417[1] + 8);
    memset((char *)&v417[1] + 8, 0, 24);
    uint64_t v118 = v418;
    *((_WORD *)v31 + 1964) = v419;
    *((void *)v31 + 490) = v118;
    long long v119 = v420;
    *((void *)v31 + 494) = v421;
    *((_OWORD *)v31 + 24ims::StackConfig::~StackConfig(this + 6) = v119;
    long long v420 = 0u;
    uint64_t v421 = 0;
    *((_WORD *)v31 + 1980) = v422;
    long long v120 = v423;
    *((void *)v31 + 498) = v424;
    *((_OWORD *)v31 + 248) = v120;
    long long v423 = 0u;
    uint64_t v424 = 0;
    *((_DWORD *)v31 + 998) = v425;
    *((void *)v31 + 500) = &unk_1F20E3DD0;
    *((void *)v31 + 50bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v426;
    long long v121 = v31 + 4016;
    uint64_t v122 = v427;
    *((void *)v31 + 502) = v427;
    uint64_t v123 = v428;
    *((void *)v31 + 50IMSCallOptions::~IMSCallOptions(this + 3) = v428;
    if (v123)
    {
      *(void *)(v122 + 1ims::StackConfig::~StackConfig(this + 6) = v121;
      v426 = &v427;
      uint64_t v427 = 0;
      uint64_t v428 = 0;
    }
    else
    {
      *((void *)v31 + 50bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v121;
    }
    *((void *)v31 + 504) = &unk_1F20E3DD0;
    *((void *)v31 + 505) = v429;
    v124 = v31 + 4048;
    uint64_t v125 = v430;
    *((void *)v31 + 50ims::StackConfig::~StackConfig(this + 6) = v430;
    uint64_t v126 = v431;
    *((void *)v31 + 507) = v431;
    if (v126)
    {
      *(void *)(v125 + 1ims::StackConfig::~StackConfig(this + 6) = v124;
      v429 = &v430;
      uint64_t v430 = 0;
      uint64_t v431 = 0;
    }
    else
    {
      *((void *)v31 + 505) = v124;
    }
    *((void *)v31 + 508) = &unk_1F20E3DD0;
    *((void *)v31 + 509) = v432;
    uint64_t v127 = v31 + 4080;
    uint64_t v128 = v433;
    *((void *)v31 + 510) = v433;
    uint64_t v129 = v434;
    *((void *)v31 + 51bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v434;
    if (v129)
    {
      *(void *)(v128 + 1ims::StackConfig::~StackConfig(this + 6) = v127;
      v432 = &v433;
      uint64_t v433 = 0;
      uint64_t v434 = 0;
    }
    else
    {
      *((void *)v31 + 509) = v127;
    }
    *((void *)v31 + 512) = &unk_1F20E3DD0;
    *((void *)v31 + 51IMSCallOptions::~IMSCallOptions(this + 3) = v435;
    v130 = v31 + 4112;
    uint64_t v131 = v436;
    *((void *)v31 + 514) = v436;
    uint64_t v132 = v437;
    *((void *)v31 + 515) = v437;
    if (v132)
    {
      *(void *)(v131 + 1ims::StackConfig::~StackConfig(this + 6) = v130;
      v435 = &v436;
      uint64_t v436 = 0;
      uint64_t v437 = 0;
    }
    else
    {
      *((void *)v31 + 51IMSCallOptions::~IMSCallOptions(this + 3) = v130;
    }
    *((void *)v31 + 51ims::StackConfig::~StackConfig(this + 6) = v438;
    *((void *)v31 + 517) = v439;
    v133 = v31 + 4144;
    uint64_t v134 = v440;
    *((void *)v31 + 518) = v440;
    uint64_t v135 = v441;
    *((void *)v31 + 519) = v441;
    if (v135)
    {
      *(void *)(v134 + 1ims::StackConfig::~StackConfig(this + 6) = v133;
      v439 = &v440;
      uint64_t v440 = 0;
      uint64_t v441 = 0;
    }
    else
    {
      *((void *)v31 + 517) = v133;
    }
    v31[4164] = v443;
    *((_DWORD *)v31 + 1040) = v442;
    *((void *)v31 + 52bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v444;
    v136 = v31 + 4176;
    uint64_t v137 = v445;
    *((void *)v31 + 522) = v445;
    uint64_t v138 = v446;
    *((void *)v31 + 52IMSCallOptions::~IMSCallOptions(this + 3) = v446;
    if (v138)
    {
      *(void *)(v137 + 1ims::StackConfig::~StackConfig(this + 6) = v136;
      v444 = &v445;
      uint64_t v445 = 0;
      uint64_t v446 = 0;
    }
    else
    {
      *((void *)v31 + 52bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v136;
    }
    *((void *)v31 + 524) = &unk_1F20E3DD0;
    *((void *)v31 + 525) = v447;
    v139 = v31 + 4208;
    uint64_t v140 = v448;
    *((void *)v31 + 52ims::StackConfig::~StackConfig(this + 6) = v448;
    uint64_t v141 = v449;
    *((void *)v31 + 527) = v449;
    if (v141)
    {
      *(void *)(v140 + 1ims::StackConfig::~StackConfig(this + 6) = v139;
      v447 = &v448;
      uint64_t v448 = 0;
      uint64_t v449 = 0;
    }
    else
    {
      *((void *)v31 + 525) = v139;
    }
    v31[4224] = v450;
    *((void *)v31 + 529) = v451;
    v142 = v31 + 4240;
    uint64_t v143 = v452;
    *((void *)v31 + 530) = v452;
    uint64_t v144 = v453;
    *((void *)v31 + 53bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v453;
    if (v144)
    {
      *(void *)(v143 + 1ims::StackConfig::~StackConfig(this + 6) = v142;
      v451 = &v452;
      uint64_t v452 = 0;
      uint64_t v453 = 0;
    }
    else
    {
      *((void *)v31 + 529) = v142;
    }
    std::map<std::string,ims::SpamCategory>::map[abi:ne180100]((uint64_t *)v31 + 532, (uint64_t)&v454);
    v31[4312] = v458;
    *(_OWORD *)(v31 + 4280) = v456;
    *(_OWORD *)(v31 + 429ims::StackConfig::~StackConfig(this + 6) = v457;
    *((void *)v31 + 540) = &unk_1F20E3DD0;
    *((void *)v31 + 54bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v459;
    v145 = v31 + 4336;
    uint64_t v146 = v460;
    *((void *)v31 + 542) = v460;
    uint64_t v147 = v461;
    *((void *)v31 + 54IMSCallOptions::~IMSCallOptions(this + 3) = v461;
    if (v147)
    {
      *(void *)(v146 + 1ims::StackConfig::~StackConfig(this + 6) = v145;
      v459 = &v460;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
    }
    else
    {
      *((void *)v31 + 54bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v145;
    }
    *((void *)v31 + 54ims::StackConfig::~StackConfig(this + 6) = *(void *)&v462[16];
    *((_OWORD *)v31 + 272) = *(_OWORD *)v462;
    memset(v462, 0, sizeof(v462));
    *(_OWORD *)(v31 + 437ims::StackConfig::~StackConfig(this + 6) = v463;
    *((void *)v31 + 549) = v464;
    long long v463 = 0u;
    uint64_t v464 = 0;
    *((_DWORD *)v31 + 1100) = v465;
    *((void *)v31 + 55IMSCallOptions::~IMSCallOptions(this + 3) = v467;
    *(_OWORD *)(v31 + 4408) = v466;
    uint64_t v467 = 0;
    long long v466 = 0u;
    SipUri::SipUri((SipUri *)(v31 + 4432), (const SipUri *)v468);
    long long v148 = v470;
    *(_OWORD *)(v31 + 4840) = v469;
    *(_OWORD *)(v31 + 485ims::StackConfig::~StackConfig(this + 6) = v148;
    *((void *)v31 + 61bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v472;
    *(_OWORD *)(v31 + 4872) = v471;
    long long v471 = 0uLL;
    uint64_t v472 = 0;
    *((void *)v31 + 612) = v473;
    *((_DWORD *)v31 + 122ims::StackConfig::~StackConfig(this + 6) = v474;
    *((_OWORD *)v31 + 307) = v475;
    *((void *)v31 + 61ims::StackConfig::~StackConfig(this + 6) = v476;
    uint64_t v476 = 0;
    long long v475 = 0uLL;
    *((void *)v31 + 617) = v477;
    *((void *)v31 + 618) = &unk_1F20D68F0;
    *((void *)v31 + 619) = v478;
    v149 = v31 + 4960;
    uint64_t v150 = v479;
    *((void *)v31 + 620) = v479;
    uint64_t v151 = v480;
    *((void *)v31 + 62bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v480;
    if (v151)
    {
      *(void *)(v150 + 1ims::StackConfig::~StackConfig(this + 6) = v149;
      v478 = &v479;
      uint64_t v479 = 0;
      uint64_t v480 = 0;
    }
    else
    {
      *((void *)v31 + 619) = v149;
    }
    long long v152 = v481;
    *((_DWORD *)v31 + 1248) = v482;
    *((_OWORD *)v31 + 31bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v152;
    long long v153 = v484;
    *(_OWORD *)(v31 + 499ims::StackConfig::~StackConfig(this + 6) = v483;
    *(_OWORD *)(v31 + 5012) = v153;
    *((_DWORD *)v31 + 1257) = v485;
    *((void *)v31 + 629) = v486;
    *((_DWORD *)v31 + 1260) = v487;
    BambiCallTerminationReasonsBase::BambiCallTerminationReasonsBase((BambiCallTerminationReasonsBase *)(v31 + 5048), (const BambiCallTerminationReasonsBase *)v488);
    *((void *)v31 + 63bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20DBBE8;
    BambiCallIncomingTerminationReasons::BambiCallIncomingTerminationReasons((BambiCallIncomingTerminationReasons *)(v31 + 5216), (const BambiCallIncomingTerminationReasons *)v489);
    *((void *)v31 + 678) = v491;
    *((_OWORD *)v31 + 338) = v490;
    long long v490 = 0uLL;
    uint64_t v491 = 0;
    v31[5440] = v493;
    *((void *)v31 + 679) = v492;
    *((void *)v31 + 68bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v494;
    v154 = v31 + 5456;
    uint64_t v155 = v495;
    *((void *)v31 + 682) = v495;
    uint64_t v156 = v496;
    *((void *)v31 + 68IMSCallOptions::~IMSCallOptions(this + 3) = v496;
    if (v156)
    {
      *(void *)(v155 + 1ims::StackConfig::~StackConfig(this + 6) = v154;
      v494 = &v495;
      uint64_t v495 = 0;
      uint64_t v496 = 0;
    }
    else
    {
      *((void *)v31 + 68bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v154;
    }
    *((void *)v31 + 684) = v497;
    *((_WORD *)v31 + 2740) = v498;
    *((_WORD *)v31 + 2744) = v499;
    *((void *)v31 + 689) = v501;
    *(_OWORD *)(v31 + 549ims::StackConfig::~StackConfig(this + 6) = v500;
    long long v500 = 0uLL;
    uint64_t v501 = 0;
    SipUri::SipUri((SipUri *)(v31 + 5520), (const SipUri *)v502);
    *((void *)v31 + 74IMSCallOptions::~IMSCallOptions(this + 3) = v504;
    *(_OWORD *)(v31 + 5928) = v503;
    long long v503 = 0uLL;
    uint64_t v504 = 0;
    v31[5952] = v505;
    *((void *)v31 + 747) = v507;
    *(_OWORD *)(v31 + 5960) = v506;
    long long v506 = 0uLL;
    uint64_t v507 = 0;
    unsigned char *v263 = 1;
    uint64_t v26 = v264;
  }
  IMSCallOptions::~IMSCallOptions(v272);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  IMSCallOptions::~IMSCallOptions(v265);
  if (*((char *)v267 + 4183) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v267 + 520), *((void *)v267 + 521));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *((_OWORD *)v267 + 260);
    __p.__r_.__value_.__r.__words[2] = *((void *)v267 + 522);
  }
  IPTelephonyManager::initializeNasClient(v9, (uint64_t)&__p, *(unsigned int *)(v26 + 724), *(unsigned __int8 *)(v26 + 730));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_58:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_59:
  if (v268) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v268);
  }
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v269.__r_.__value_.__l.__data_);
  }
}

void sub_1C54E1B04(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x15A7]) < 0) {
    operator delete((void *)STACK[0x1590]);
  }
  if (STACK[0x1540]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x1540]);
  }
  if (STACK[0x1558]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x1558]);
  }
  if (SLOBYTE(STACK[0x1577]) < 0) {
    operator delete((void *)STACK[0x1560]);
  }
  _Unwind_Resume(a1);
}

void IPTelephonyManager::setDelegates(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v4 = a1[23];
  uint64_t v5 = a1[24];
  if (v4) {
    uint64_t v6 = v4 + 8;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v5) {
    uint64_t v7 = (uint64_t *)(v5 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = a1[26];
  BOOL v9 = v8 == 0;
  if (v8) {
    uint64_t v10 = v8 + 8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v8 + 16;
  if (v9) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }
  BambiClient::setDelegatesForStack(a1[21], a2, v6, v7, a1[29], v10, v12, a3);
}

void IPTelephonyManager::initiateLimitedAccessRegister(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  long long v63 = 0;
  long long v64 = 0;
  (*(void (**)(SipStack **__return_ptr))(**(void **)(a1 + 168) + 192))(&v63);
  if (!v63)
  {
    uint64_t v14 = *(void *)(a1 + 24);
    uint64_t v13 = a1 + 24;
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(v14 + 48))(v13);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Unable to initiate limited access registration on invalid stack ", 64);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 32))(v15, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_10:
    *(unsigned char *)(v15 + 17) = 0;
    goto LABEL_47;
  }
  if (!SipStack::isRegistrationLimitedAccess(v63))
  {
    uint64_t v17 = *(void *)(a1 + 24);
    uint64_t v16 = a1 + 24;
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(v17 + 48))(v16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Not in limited access mode to try LimitedAccess Registration", 60);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_10;
  }
  bzero(v47, 0x2E0uLL);
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)v48);
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  __int16 v59 = 257;
  int v60 = 0;
  __int16 v61 = 256;
  char v62 = 1;
  bzero(&v42, 0x688uLL);
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)&v42);
  SipStack::copyStackConfigs((SipStack *)((char *)v63 + 3376), (const ims::StackConfig *)v47, v10);
  v48[54] = (a3 >> 2) & 1 | (2 * (a3 & 3));
  uint64_t v11 = v49;
  for (uint64_t i = (std::string *)v50; i != v11; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(i[-1].__r_.__value_.__l.__data_);
    }
  }
  uint64_t v50 = (uint64_t)v11;
  if ((unint64_t)v11 >= v51)
  {
    uint64_t v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v49, (long long *)a4);
  }
  else
  {
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else
    {
      long long v18 = *(_OWORD *)a4;
      v11->__r_.__value_.__r.__words[2] = *(void *)(a4 + 16);
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v18;
    }
    uint64_t v19 = (uint64_t)&v11[1];
  }
  uint64_t v50 = v19;
  begin = v52[0].__begin_;
  for (std::vector<std::string>::pointer j = v52[0].__end_; j != begin; --j)
  {
    if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(j[-1].__r_.__value_.__l.__data_);
    }
  }
  v52[0].__end_ = begin;
  if (v52 != (std::vector<std::string> *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v52, *(std::string **)a5, *(long long **)(a5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3));
  }
  uint64_t v22 = *((void *)v63 + 18);
  if (!v22) {
    goto LABEL_34;
  }
  uint64_t v24 = *(void *)(v22 + 248);
  uint64_t v23 = *(std::__shared_weak_count **)(v22 + 256);
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    if (v24)
    {
      uint64_t v25 = *((void *)v63 + 18);
      uint64_t v24 = *(void *)(v25 + 248);
      uint64_t v26 = *(std::__shared_weak_count **)(v25 + 256);
      if (v26)
      {
        char v27 = 0;
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_32;
      }
LABEL_31:
      char v27 = 1;
LABEL_32:
      SipRegistrationConfig::operator=((uint64_t)&v42, v24 + 1112);
      if ((v27 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
    }
  }
  else if (v24)
  {
    uint64_t v26 = 0;
    goto LABEL_31;
  }
LABEL_34:
  long long v28 = v42;
  if (v43 != v42)
  {
    uint64_t v29 = (char *)v43 - 408;
    std::string v30 = (SipUri *)((char *)v43 - 408);
    do
    {
      (**(void (***)(SipUri *))v30)(v30);
      v29 -= 408;
      BOOL v31 = v30 == v28;
      std::string v30 = (SipUri *)((char *)v30 - 408);
    }
    while (!v31);
  }
  long long v43 = v28;
  unsigned int v32 = *(std::string **)a5;
  char v33 = *(std::string **)(a5 + 8);
  while (v32 != v33)
  {
    uint64_t v41 = 0;
    memset(v40, 0, sizeof(v40));
    SipUri::SipUri((uint64_t)v40, v32);
    if (SipUri::isValidUri((SipUri *)v40))
    {
      std::string v34 = v43;
      if ((unint64_t)v43 >= v44)
      {
        long long v35 = (SipUri *)std::vector<SipUri>::__push_back_slow_path<SipUri const&>((uint64_t *)&v42, (const SipUri *)v40);
      }
      else
      {
        SipUri::SipUri(v43, (const SipUri *)v40);
        long long v35 = (SipUri *)((char *)v34 + 408);
      }
      long long v43 = v35;
    }
    SipUri::~SipUri((SipUri *)v40);
    ++v32;
  }
  SipUri::fromString((uint64_t)&v46, (std::string *)a4);
  unsigned int v45 = a3;
  uint64_t v37 = *(void *)(a1 + 24);
  uint64_t v36 = a1 + 24;
  uint64_t v38 = (*(uint64_t (**)(uint64_t))(v37 + 32))(v36);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"Start Limited Access registration", 33);
  *(unsigned char *)(v38 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v38 + 17) = 0;
  SipStack::setSimConfig(v63, (SipStack *)v47, v39);
  SipStack::startRegistration(v63, (const SipRegistrationConfig *)&v42);
  SipRegistrationConfig::~SipRegistrationConfig((void **)&v42);
  ims::StackConfig::~StackConfig(v47);
LABEL_47:
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
}

void sub_1C54E25F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  STACK[0xA08] = v60;
  SipRegistrationConfig::~SipRegistrationConfig(&a60);
  ims::StackConfig::~StackConfig((void **)&STACK[0x820]);
  long long v63 = *(std::__shared_weak_count **)(v61 - 72);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  _Unwind_Resume(a1);
}

void IPTelephonyManager::initializeImpuRankings(uint64_t a1, SipStack **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  if (!*a2) {
    return;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(void *)(a3 + 8))
    {
LABEL_6:
      uint64_t v7 = (ImsPrefs *)SipStack::prefs(v4);
      ImpuRankKey = (void **)ImsPrefs::getImpuRankKey(v7);
      ImsPrefs::stringValue(v7, ImpuRankKey);
      std::string::operator=((std::string *)a3, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      uint64_t v4 = *a2;
    }
  }
  else if (!*(unsigned char *)(a3 + 23))
  {
    goto LABEL_6;
  }
  memset(&__str, 0, sizeof(__str));
  BOOL v9 = (ImsPrefs *)SipStack::prefs(v4);
  EmergencyImpuRankKey = (void **)ImsPrefs::getEmergencyImpuRankKey(v9);
  ImsPrefs::stringValue(v9, EmergencyImpuRankKey);
  SipStack::carrierIdentifier(*a2, &__p);
  uint64_t v12 = (uint64_t **)BambiPrefsManager::instance(v11);
  p_p = &__p;
  uint64_t v13 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  uint64_t v14 = (SipImpuRank *)(v13 + 29);
  if (!SipImpuRank::_setRanksFromString((uint64_t)v13, (int **)v13 + 29, a3)) {
    SipImpuRank::resetNormalRanksToDefault(v14);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  SipStack::carrierIdentifier(*a2, &__p);
  uint64_t v16 = (uint64_t **)BambiPrefsManager::instance(v15);
  p_p = &__p;
  uint64_t v17 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  if (!SipImpuRank::_setRanksFromString((uint64_t)v17, (int **)v17 + 32, (uint64_t)&__str)) {
    SipImpuRank::resetEmergencyRanksToDefault((SipImpuRank *)(v17 + 29));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  SipStack::carrierIdentifier(*a2, &__p);
  uint64_t v19 = (uint64_t **)BambiPrefsManager::instance(v18);
  p_p = &__p;
  uint64_t v20 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  uint64_t v22 = *(void *)(a1 + 24);
  uint64_t v21 = a1 + 24;
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(v22 + 64))(v21);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"Normal IMPU ranking:", 20);
  *(unsigned char *)(v23 + 17) = 0;
  uint64_t v24 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v23 + 17) = 0;
  SipImpuRank::logRanks(v24, v23, v20 + 29, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v25 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 64))(v21);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v21 + 16))(v21, v25);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v25[17] = 0;
  SipStack::carrierIdentifier(*a2, &__p);
  char v27 = (uint64_t **)BambiPrefsManager::instance(v26);
  p_p = &__p;
  long long v28 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 64))(v21);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"Emergency IMPU ranking:", 23);
  *(unsigned char *)(v29 + 17) = 0;
  uint64_t v30 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v29 + 17) = 0;
  SipImpuRank::logRanks(v30, v29, v28 + 32, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  BOOL v31 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 64))(v21);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v21 + 16))(v21, v31);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v31[17] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C54E2B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::updateContactUser(unsigned __int16 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, std::string *a4@<X8>)
{
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  int v5 = (char)v4;
  std::string::size_type v6 = *((void *)a1 + 1);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a1 + 1);
  }
  switch(v4)
  {
    case 3:
      uint64_t v7 = *(unsigned __int16 **)a1;
      if (v5 >= 0) {
        uint64_t v7 = a1;
      }
      int v8 = *v7;
      int v9 = *((unsigned __int8 *)v7 + 2);
      BOOL v10 = v8 == 17485;
      int v11 = 78;
      goto LABEL_16;
    case 4:
      uint64_t v12 = *(_DWORD **)a1;
      if (v5 >= 0) {
        uint64_t v12 = a1;
      }
      if (*v12 == 1313099051) {
        goto LABEL_35;
      }
      if (*v12 != 1230196041) {
        goto LABEL_29;
      }
      if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      {
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
        std::string::size_type v13 = *(void *)(a3 + 16);
        goto LABEL_31;
      }
      uint64_t v21 = *(const std::string::value_type **)a3;
      std::string::size_type v23 = *(void *)(a3 + 8);
LABEL_44:
      uint64_t v22 = a4;
      goto LABEL_34;
    case 6:
      uint64_t v14 = *(unsigned __int16 **)a1;
      if (v5 >= 0) {
        uint64_t v14 = a1;
      }
      int v15 = *(_DWORD *)v14;
      int v9 = v14[2];
      BOOL v10 = v15 == 1397314381;
      int v11 = 20036;
LABEL_16:
      if (!v10 || v9 != v11) {
        goto LABEL_29;
      }
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      uint64_t v21 = *(const std::string::value_type **)a2;
      std::string::size_type v23 = *(void *)(a2 + 8);
      goto LABEL_44;
    case 7:
      uint64_t v17 = *(int **)a1;
      if (v5 >= 0) {
        uint64_t v17 = (int *)a1;
      }
      int v18 = *v17;
      int v19 = *(int *)((char *)v17 + 3);
      if (v18 != 1230196011 || v19 != 1313100617) {
        goto LABEL_29;
      }
LABEL_35:
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      {
        if (!*(unsigned char *)(a2 + 23) || *(unsigned char *)a2 == 43)
        {
LABEL_22:
          *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          std::string::size_type v13 = *(void *)(a2 + 16);
          goto LABEL_31;
        }
        goto LABEL_42;
      }
      uint64_t v21 = *(const std::string::value_type **)a2;
      std::string::size_type v6 = *(void *)(a2 + 8);
      if (v6 && *v21 != 43)
      {
LABEL_42:
        std::operator+<char>();
        return;
      }
LABEL_33:
      uint64_t v22 = a4;
      std::string::size_type v23 = v6;
LABEL_34:
      std::string::__init_copy_ctor_external(v22, v21, v23);
      return;
    default:
LABEL_29:
      if (v5 < 0)
      {
        uint64_t v21 = *(const std::string::value_type **)a1;
        goto LABEL_33;
      }
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      std::string::size_type v13 = *((void *)a1 + 2);
LABEL_31:
      a4->__r_.__value_.__r.__words[2] = v13;
      return;
  }
}

void ims::join<std::__wrap_iter<std::string *>>()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C54E2E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void IPTelephonyManager::handleClientStatusChange(void *a1, void **a2, std::string *a3)
{
  std::string::size_type v6 = (void **)(a1 + 3);
  uint64_t v7 = (*(uint64_t (**)(void *))(a1[3] + 64))(a1 + 3);
  ((void (*)(void **, uint64_t))(*v6)[2])(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"ClientStatusChange for stack ", 29);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" with status ", 13);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = operator<<(v7, a3);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  long long v24 = 0uLL;
  (*(void (**)(long long *__return_ptr))(*v6[18] + 192))(&v24);
  if ((void)v24) {
    BOOL v9 = *(unsigned char *)(v24 + 4337) != 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, (unsigned __int8 *)&BambiClientStatus::kStatusInitialized))
  {
    BOOL v10 = (void (****)(void, void **))a1[30];
    int v11 = (void (****)(void, void **))a1[31];
    while (v10 != v11)
    {
      uint64_t v12 = *v10++;
      (**v12)(v12, a2);
    }
    uint64_t v16 = IMSClientManager::delegateForStack(a2);
    (*(void (**)(void))(*(void *)(v16 + 8) + 56))();
  }
  else if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, (unsigned __int8 *)&BambiClientStatus::kStatusUninitialized)|| a3[1].__r_.__value_.__s.__data_[0])
  {
    std::string::size_type v13 = (uint64_t *)a1[30];
    uint64_t v14 = (uint64_t *)a1[31];
    while (v13 != v14)
    {
      uint64_t v15 = *v13++;
      (*(void (**)(uint64_t, void **))(*(void *)v15 + 8))(v15, a2);
    }
    if (!v9)
    {
      int v25 = 0;
      long long v24 = xmmword_1C56D6E40;
      uint64_t v17 = IMSClientManager::delegateForStack(a2);
      (*(void (**)(void))(*(void *)(v17 + 8) + 32))();
    }
    uint64_t v18 = IMSClientManager::delegateForStack(a2);
    (*(void (**)(void))(*(void *)(v18 + 8) + 64))();
  }
  if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, BambiClientStatus::kStatusInitFailed))
  {
    uint64_t v19 = (*(uint64_t (**)(void **))(a1[3] + 56))(v6);
    (*(void (**)(void **, uint64_t))(a1[3] + 16))(v6, v19);
    uint64_t v20 = *(void **)(v19 + 8);
    uint64_t v21 = "failed to initialize BambiClient";
    uint64_t v22 = 32;
LABEL_23:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    IMSRegistrationManager::setRegistrationTerminated(a1[23], a2, 2, -1, 0);
    IPTelephonyManager::deinitialize((uint64_t)a1, (uint64_t)a2, 0, 0);
    return;
  }
  if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, BambiClientStatus::kStatusFatalError))
  {
    uint64_t v19 = (*(uint64_t (**)(void **))(a1[3] + 56))(v6);
    (*(void (**)(void **, uint64_t))(a1[3] + 16))(v6, v19);
    uint64_t v20 = *(void **)(v19 + 8);
    uint64_t v21 = "received a fatal error from BambiClient";
    uint64_t v22 = 39;
    goto LABEL_23;
  }
  if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, BambiClientStatus::kStatusMediaRequestTimedOut))
  {
    IPTelephonyManager::deinitialize((uint64_t)a1, (uint64_t)a2, 0, 0);
    uint64_t v23 = (*(uint64_t (**)(void **))(a1[3] + 56))(v6);
    (*(void (**)(void **, uint64_t))(a1[3] + 16))(v6, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"received a fatal media error from BambiClient, going to request BB reset", 72);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v23 + 17) = 0;
    IMSRegistrationManager::setRegistrationTerminated(a1[23], a2, 5, -1, 0);
  }
}

void IPTelephonyManager::handleDigestAuthChallenge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(&v16, 0, sizeof(v16));
  memset(&v15, 0, sizeof(v15));
  v14[0] = 0;
  v14[1] = 0;
  (*(void (**)(SipStack **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 192))(v14, a2, a4);
  std::string::basic_string[abi:ne180100]<0>(&__str, "auth");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v5 = ims::debug((uint64_t)&__str, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleDigestAuthChallenge: handling challenge for ", 50);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a4);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (*((char *)v14[0] + 3959) < 0)
  {
    if (!*((void *)v14[0] + 493)) {
      goto LABEL_13;
    }
  }
  else if (!*((unsigned char *)v14[0] + 3959))
  {
    goto LABEL_13;
  }
  if (*((char *)v14[0] + 3983) < 0)
  {
    if (*((void *)v14[0] + 496)) {
      goto LABEL_11;
    }
  }
  else if (*((unsigned char *)v14[0] + 3983))
  {
LABEL_11:
    std::string::operator=(&v16, (const std::string *)v14[0] + 164);
    std::string::operator=(&v15, (const std::string *)v14[0] + 165);
    std::string::basic_string[abi:ne180100]<0>(&__str, "auth");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&__str, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"using Auth from stored config", 29);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v7 = (ImsPrefs *)SipStack::prefs(v14[0]);
  DigestUsernameKey = (void **)ImsPrefs::getDigestUsernameKey(v7);
  ImsPrefs::stringValue(v7, DigestUsernameKey);
  std::string::operator=(&v16, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  BOOL v9 = (ImsPrefs *)SipStack::prefs(v14[0]);
  DigestPasswordKey = (void **)ImsPrefs::getDigestPasswordKey(v9);
  ImsPrefs::stringValue(v9, DigestPasswordKey);
  std::string::operator=(&v15, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "auth");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&__str, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"using Auth from prefs", 21);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_18:
  *(unsigned char *)(v6 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  SipDigestAuthChallenge::createResponse();
}

void sub_1C54E372C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::handleAkaAuthChallenge()
{
}

void sub_1C54E3900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x1C878E320](v14, 0x1032C403FAF6B48);
  _Unwind_Resume(a1);
}

void AuthQueueItem<BambiClient>::sendChallenge(void *a1)
{
  uint64_t v13 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  *(_OWORD *)BOOL v10 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  long long v6 = 0u;
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))(*a1);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v5[1], (char *)(v2 + 184), (char *)(v2 + 200), 0x10uLL);
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v7, (char *)(v3 + 200), (char *)(v3 + 216), 0x10uLL);
  LODWORD(v1IMSCallOptions::~IMSCallOptions(this + 3) = *((_DWORD *)a1 + 6);
  uint64_t v4 = IMSClientManager::delegateForStack((void **)a1 + 4);
  (*(void (**)(void))(*(void *)(v4 + 8) + 96))();
  if (__p[1])
  {
    *(void **)&long long v12 = __p[1];
    operator delete(__p[1]);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  if (v8[1])
  {
    *(void **)&long long v9 = v8[1];
    operator delete(v8[1]);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  if (v5[1])
  {
    *(void **)&long long v6 = v5[1];
    operator delete(v5[1]);
  }
}

void sub_1C54E3A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void IPTelephonyManager::handleAkaAuthResponse(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(const void **)(a3 + 8);
  if (v4
  {
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    ims::aka::Response::Response((ims::aka::Response *)&v32, v6);
    memset(&v31, 0, sizeof(v31));
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v31 = *(std::string *)a2;
    }
    if (BYTE8(v32) == 1)
    {
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 1174405120;
      uint64_t v18[2] = ___ZN18IPTelephonyManager21handleAkaAuthResponseERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3ims21AuthChallengeResponseE_block_invoke;
      v18[3] = &__block_descriptor_tmp_48;
      v18[4] = a1;
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v19, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
      }
      else {
        std::string v19 = v31;
      }
      ims::aka::Response::Response((ims::aka::Response *)&v20, (const ims::aka::Response *)&v32);
      dispatch_async(MEMORY[0x1E4F14428], v18);
      uint64_t v20 = &unk_1F20E4EA0;
      if (__p)
      {
        uint64_t v30 = __p;
        operator delete(__p);
      }
      if (v27)
      {
        uint64_t v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        uint64_t v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        long long v24 = v23;
        operator delete(v23);
      }
      if (v21)
      {
        uint64_t v22 = v21;
        operator delete(v21);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v10 = a1[35];
      if (v10)
      {
        int v11 = (uint64_t *)a1[34];
        long long v12 = (SipAkaAuthChallenge **)v11[2];
        uint64_t v13 = *v11;
        *(void *)(v13 + 8) = v11[1];
        *(void *)v11[1] = v13;
        a1[35] = v10 - 1;
        operator delete(v11);
        switch(HIDWORD(v32))
        {
          case 3:
            SipAkaAuthChallenge::createFailureResponse(*v12);
          case 2:
            SipAkaAuthChallenge::createSyncFailureResponse();
          case 1:
            SipAkaAuthChallenge::createSuccessResponse();
        }
        if (v12)
        {
          uint64_t v17 = AuthQueueItem<BambiClient>::~AuthQueueItem((uint64_t *)v12);
          MEMORY[0x1C878E320](v17, 0x1032C403FAF6B48);
        }
        if (a1[35]) {
          AuthQueueItem<BambiClient>::sendChallenge(*(void **)(a1[34] + 16));
        }
      }
      else
      {
        uint64_t v15 = a1[3];
        uint64_t v14 = a1 + 3;
        uint64_t v16 = (*(uint64_t (**)(void *))(v15 + 56))(v14);
        (*(void (**)(void *, uint64_t))(*v14 + 16))(v14, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"received AKA response from ISIM but don't have any queued challenges", 68);
        *(unsigned char *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v16 + 17) = 0;
      }
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    *(void *)&long long v32 = &unk_1F20E4EA0;
    if ((void)v39)
    {
      *((void *)&v39 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v39;
      operator delete((void *)v39);
    }
    if (*((void *)&v37 + 1))
    {
      *(void *)&long long v38 = *((void *)&v37 + 1);
      operator delete(*((void **)&v37 + 1));
    }
    if ((void)v36)
    {
      *((void *)&v36 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v36;
      operator delete((void *)v36);
    }
    if (*((void *)&v34 + 1))
    {
      *(void *)&long long v35 = *((void *)&v34 + 1);
      operator delete(*((void **)&v34 + 1));
    }
    if ((void)v33)
    {
      *((void *)&v33 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v33;
      operator delete((void *)v33);
    }
  }
  else
  {
    uint64_t v8 = a1[3];
    uint64_t v7 = a1 + 3;
    uint64_t v9 = (*(uint64_t (**)(void *))(v8 + 56))(v7);
    (*(void (**)(void *, uint64_t))(*v7 + 16))(v7, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"received AKA response with wrong Response type", 46);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
  }
}

void sub_1C54E3FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  ims::aka::Response::~Response((ims::aka::Response *)(v43 - 176));
  _Unwind_Resume(a1);
}

ims::aka::Response *ims::aka::Response::Response(ims::aka::Response *this, const ims::aka::Response *a2)
{
  *(void *)this = &unk_1F20E4EA0;
  uint64_t v4 = *((void *)a2 + 1);
  *((void *)this + 2) = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v4;
  *((void *)this + IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  *((void *)this + 4) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 2, *((const void **)a2 + 2), *((void *)a2 + 3), *((void *)a2 + 3) - *((void *)a2 + 2));
  *((void *)this + 5) = 0;
  *((void *)this + ims::StackConfig::~StackConfig(this + 6) = 0;
  *((void *)this + 7) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 5, *((const void **)a2 + 5), *((void *)a2 + 6), *((void *)a2 + 6) - *((void *)a2 + 5));
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 8, *((const void **)a2 + 8), *((void *)a2 + 9), *((void *)a2 + 9) - *((void *)a2 + 8));
  *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 11, *((const void **)a2 + 11), *((void *)a2 + 12), *((void *)a2 + 12) - *((void *)a2 + 11));
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 14, *((const void **)a2 + 14), *((void *)a2 + 15), *((void *)a2 + 15) - *((void *)a2 + 14));
  *((void *)this + 17) = *((void *)a2 + 17);
  return this;
}

void sub_1C54E40D8(_Unwind_Exception *exception_object)
{
  uint64_t v7 = *v5;
  if (*v5)
  {
    v1[12] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v4;
  if (*v4)
  {
    v1[9] = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v3;
  if (*v3)
  {
    v1[6] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v2;
  if (*v2)
  {
    v1[3] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IPTelephonyManager21handleAkaAuthResponseERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3ims21AuthChallengeResponseE_block_invoke(uint64_t a1)
{
}

ims::aka::Response *__copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c23_ZTSN3ims3aka8ResponseE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  return ims::aka::Response::Response((ims::aka::Response *)(a1 + 64), (const ims::aka::Response *)(a2 + 64));
}

void sub_1C54E41BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c23_ZTSN3ims3aka8ResponseE(uint64_t a1)
{
  *(void *)(a1 + 64) = &unk_1F20E4EA0;
  uint64_t v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(void *)(a1 + 184) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(void *)(a1 + 160) = v3;
    operator delete(v3);
  }
  long long v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(void *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 104);
  if (v5)
  {
    *(void *)(a1 + 112) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 80);
  if (v6)
  {
    *(void *)(a1 + 88) = v6;
    operator delete(v6);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v7 = *(void **)(a1 + 40);
    operator delete(v7);
  }
}

void ims::aka::Response::~Response(ims::aka::Response *this)
{
  *(void *)this = &unk_1F20E4EA0;
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 12) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 9) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v5)
  {
    *((void *)this + ims::StackConfig::~StackConfig(this + 6) = v5;
    operator delete(v5);
  }
  long long v6 = (void *)*((void *)this + 2);
  if (v6)
  {
    *((void *)this + IMSCallOptions::~IMSCallOptions(this + 3) = v6;
    operator delete(v6);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F20E4EA0;
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 12) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 9) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v5)
  {
    *((void *)this + ims::StackConfig::~StackConfig(this + 6) = v5;
    operator delete(v5);
  }
  long long v6 = (void *)*((void *)this + 2);
  if (v6)
  {
    *((void *)this + IMSCallOptions::~IMSCallOptions(this + 3) = v6;
    operator delete(v6);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t IPTelephonyManager::handleTransportErrors(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

void IPTelephonyManager::handleEmergencyRegistrationError(IPTelephonyManager *this, const SipRegistrationErrorNotification *a2)
{
  uint64_t v3 = *((void *)this + 36);
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 21) + 192))(&v4);
  IMSMetricsManager::logRegistrationError(v3, &v4, (uint64_t)a2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C54E43C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::handleEmergencyRegistrationActive(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 288);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 168) + 192))(&v4);
  IMSMetricsManager::logRegistrationSuccess(v3, &v4, a2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C54E4454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPTelephonyManager::handleEmergencyStateExited(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(IMSClientManager::delegateForStack(a2) + 16) + 56);
  return v2();
}

uint64_t IPTelephonyManager::handleRequestNetworkReset(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(IMSClientManager::delegateForStack(a2) + 8) + 80);
  return v2();
}

void IPTelephonyManager::handleRequestStateDump(uint64_t a1, uint64_t a2, void **a3)
{
  memset(&v10, 0, sizeof(v10));
  std::string::basic_string[abi:ne180100]<0>(&v10, "IMS pre-alerting call failure");
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    std::string::append(&v10, ": ", 2uLL);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v7 = *(const std::string::value_type **)a2;
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v8 = *(void *)(a2 + 8);
    }
    std::string::append(&v10, v7, v8);
  }
  uint64_t v9 = IMSClientManager::delegateForStack(a3);
  (*(void (**)(void))(*(void *)(v9 + 8) + 88))();
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1C54E45D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPTelephonyManager::handleThumperAuthFailure(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(IMSClientManager::delegateForStack(a2) + 16) + 64);
  return v2();
}

void IPTelephonyManager::handleSystemWake(IPTelephonyManager *this)
{
  uint64_t v1 = (void *)((char *)this + 24);
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
  (*(void (**)(void *, uint64_t))(*v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"handleSystemWake: requesting Barring Info", 41);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = (IMSNasDeviceClient *)v1[38];
  if (v3)
  {
    IMSNasDeviceClient::requestCurrentBarringInfo(v3);
  }
}

void IPTelephonyManager::dumpState(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 24;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"dumping BambiClient state", 25);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "state");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v9 = (uint64_t *)ims::info((uint64_t)v15, (uint64_t)__p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  BambiClient::dumpState(*(void *)(a1 + 168), a2, v9, v8 != 0, 1);
  IMSCallManager::dumpState(*(IMSCallManager **)(a1 + 200), (ImsOutStream *)v9);
  IMSXcapManager::internalDumpState(*(IMSXcapManager **)(a1 + 224), (ImsOutStream *)v9);
  uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a3 + 8);
  }
  if (v11)
  {
    uint64_t v12 = ims::logger(v10);
    ImsLogger::dumpToPath(v12, a3);
  }
}

void sub_1C54E4910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::handleAuthResponse(uint64_t a1, void *a2, uint64_t a3, SipAuthResponse *a4)
{
  if (a2) {
    BambiClient::setAuthResponse(a2, a3, a4);
  }
}

void non-virtual thunk to'IPTelephonyManager::handleAuthResponse(uint64_t a1, void *a2, uint64_t a3, SipAuthResponse *a4)
{
  if (a2) {
    BambiClient::setAuthResponse(a2, a3, a4);
  }
}

uint64_t IPTelephonyManager::makeOutgoingUri(uint64_t a1, SipStack **a2, std::string *a3, SipUri *a4)
{
  uint64_t v5 = *a2;
  if (!*a2)
  {
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v11 = a1 + 24;
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Invalid SIP stack", 17);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v14 = 0;
    *(unsigned char *)(v13 + 17) = 0;
    return v14;
  }
  std::string __p = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v9 = (ImsPrefs *)SipStack::prefs(v5);
  OutgoingUriKey = (void **)ImsPrefs::getOutgoingUriKey(v9);
  ImsPrefs::stringValue(v9, OutgoingUriKey);
  uint64_t v15 = (ImsPrefs *)SipStack::prefs(*a2);
  UseOutgoingSipUriKey = (void **)ImsPrefs::getUseOutgoingSipUriKey(v15);
  if ((ImsPrefs::BOOLValue(v15, UseOutgoingSipUriKey) & 1) == 0)
  {
    uint64_t v17 = (ImsPrefs *)SipStack::prefs(*a2);
    OutgoingDomainKey = (void **)ImsPrefs::getOutgoingDomainKey(v17);
    ImsPrefs::stringValue(v17, OutgoingDomainKey);
    if (SBYTE7(v25) < 0)
    {
      operator delete((void *)v24);
      if (!*((void *)&v24 + 1))
      {
LABEL_11:
        uint64_t v14 = SipUri::fromString((uint64_t)a4, a3);
        goto LABEL_12;
      }
    }
    else if (!BYTE7(v25))
    {
      goto LABEL_11;
    }
  }
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  SipStack::makeOutgoingSipUri(*a2, a3, a4, (uint64_t)&v24);
  if ((*(uint64_t (**)(void, void))(**((void **)&v24 + 1) + 24))(*((void *)&v24 + 1), v25))
  {
    uint64_t v20 = *(void *)(a1 + 24);
    uint64_t v19 = a1 + 24;
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(v20 + 56))(v19);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"unable to create outgoing sip URI: ", 35);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(long long *, uint64_t))(v24 + 16))(&v24, v21);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 56))(v19);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"falling back to tel: URI", 24);
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v22 + 17) = 0;
    ImsResult::~ImsResult((ImsResult *)&v24);
    goto LABEL_11;
  }
  ImsResult::~ImsResult((ImsResult *)&v24);
  uint64_t v14 = 1;
LABEL_12:
  if (SHIBYTE(v31) < 0) {
    operator delete(__p);
  }
  return v14;
}

void sub_1C54E4D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPTelephonyManager::makeOutgoingUriForPull(uint64_t a1, uint64_t a2, const std::string *a3, SipUri *a4)
{
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 168) + 192))(&v12);
  SipStack::makeOutgoingSipUriForPull(v12, (uint64_t)a3, a4, (uint64_t)&v17);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  int v7 = (*(uint64_t (**)(void, void))(**((void **)&v17 + 1) + 24))(*((void *)&v17 + 1), v18);
  if (v7)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v8 = a1 + 24;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"unable to create outgoing sip URI for pull : ", 45);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(long long *, uint64_t))(v17 + 16))(&v17, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" , callId : ", 12);
    *(unsigned char *)(v10 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v12, a3);
    (*(void (**)(uint64_t, void **))(*(void *)v10 + 56))(v10, &v12);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p);
    }
    if (v14 < 0) {
      operator delete(v12);
    }
  }
  ImsResult::~ImsResult((ImsResult *)&v17);
  return v7 ^ 1u;
}

void sub_1C54E4F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::sendUssdData(uint64_t a1, void **a2, const std::string *a3)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 304, a2);
  if ((void **)(a1 + 312) == v6)
  {
    int v7 = *(void **)(a1 + 168);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v8 = BambiClient::initializeUssdSession(v7, (uint64_t)a2);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v8) {
      SipUssdSession::startSession(*(SipUssdSession **)(v8 + 24));
    }
  }
  else
  {
    SipUssdSession::sendAdditionalData(*((void *)v6[7] + 3), a3, (ImsResult *)v11);
    ImsResult::~ImsResult((ImsResult *)v11);
  }
}

void sub_1C54E50C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::handleUssdData(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(unsigned __int8 *)(a3 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a3 + 8);
  }
  if (v4)
  {
    v12[0] = &unk_1F20B35C8;
    v12[1] = 0;
    ims::CFMutableDictionary::setStringValue((ims::CFMutableDictionary *)v12, @"kIncomingUSSDData", (char *)a3);
    if (a4) {
      ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v12, @"kFurtherInfoRequired", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    int v7 = *(std::__shared_weak_count **)(a2 + 16);
    if (v7)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v7);
      if (v8) {
        uint64_t v9 = *(void *)(a2 + 8);
      }
      else {
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v8 = 0;
    }
    if (*(char *)(v9 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 4160), *(void *)(v9 + 4168));
    }
    else {
      std::string __p = *(std::string *)(v9 + 4160);
    }
    uint64_t v10 = IMSClientManager::delegateForStack((void **)&__p.__r_.__value_.__l.__data_);
    (*(void (**)(void))(*(void *)(v10 + 16) + 88))();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    ims::CFType::~CFType((ims::CFType *)v12);
  }
}

void sub_1C54E5240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  ims::CFType::~CFType((ims::CFType *)&a16);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::handleUssdError(int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  v12[0] = &unk_1F20B35C8;
  v12[1] = 0;
  ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)v12, @"kIncomingUSSDError", a4);
  uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  if (v6) {
    ims::CFMutableDictionary::setStringValue((ims::CFMutableDictionary *)v12, @"kIncomingUSSDData", (char *)a3);
  }
  int v7 = *(std::__shared_weak_count **)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  if (*(char *)(v9 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 4160), *(void *)(v9 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v9 + 4160);
  }
  uint64_t v10 = IMSClientManager::delegateForStack((void **)&__p.__r_.__value_.__l.__data_);
  (*(void (**)(void))(*(void *)(v10 + 16) + 96))();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  ims::CFType::~CFType((ims::CFType *)v12);
}

void sub_1C54E53E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  ims::CFType::~CFType((ims::CFType *)&a16);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::handleUssdSessionInvalidated(IPTelephonyManager *this, BambiUssdSession *a2)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
    if (v4)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        uint64_t v6 = *((void *)a2 + 1);
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        if (v6)
        {
          int v7 = (std::__shared_weak_count *)*((void *)a2 + 2);
          if (v7)
          {
            uint64_t v8 = std::__shared_weak_count::lock(v7);
            if (v8) {
              uint64_t v9 = *((void *)a2 + 1);
            }
            else {
              uint64_t v9 = 0;
            }
          }
          else
          {
            uint64_t v9 = 0;
            uint64_t v8 = 0;
          }
          if (*(char *)(v9 + 4183) < 0) {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 4160), *(void *)(v9 + 4168));
          }
          else {
            std::string __p = *(std::string *)(v9 + 4160);
          }
          uint64_t v10 = (void ***)((char *)this + 304);
          uint64_t v11 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 304, (void **)&__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v8) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
          if ((void **)((char *)this + 312) != v11)
          {
            uint64_t v12 = (void **)v11[1];
            if (v12)
            {
              do
              {
                uint64_t v13 = v12;
                uint64_t v12 = (void **)*v12;
              }
              while (v12);
            }
            else
            {
              char v14 = v11;
              do
              {
                uint64_t v13 = (void **)v14[2];
                BOOL v15 = *v13 == v14;
                char v14 = v13;
              }
              while (!v15);
            }
            if (*v10 == v11) {
              ims *v10 = v13;
            }
            char v16 = (uint64_t *)*((void *)this + 39);
            --*((void *)this + 40);
            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v16, (uint64_t *)v11);
            if (*((char *)v11 + 55) < 0) {
              operator delete(v11[4]);
            }
            operator delete(v11);
          }
        }
      }
    }
  }
}

void sub_1C54E5584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IPTelephonyManager::handleUssdSessionInvalidated(IPTelephonyManager *this, BambiUssdSession *a2)
{
}

uint64_t **IPTelephonyManager::delegateForIncomingUssdSession(uint64_t **this, BambiClient *a2, BambiUssdSession *a3)
{
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a3 + 2);
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6) {
      uint64_t v7 = *((void *)a3 + 1);
    }
    else {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  if (*(char *)(v7 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 4160), *(void *)(v7 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v7 + 4160);
  }
  uint64_t v14 = 0;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)(this + 38), &v14, (void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v9 = *v8;
  if (!*v8)
  {
    uint64_t v9 = (uint64_t *)operator new(0x40uLL);
    *((_OWORD *)v9 + 2) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    uint64_t v11 = __p.__r_.__value_.__r.__words[2];
    uint64_t v10 = v14;
    memset(&__p, 0, sizeof(__p));
    v9[6] = v11;
    v9[7] = 0;
    std::__tree<unsigned int>::__insert_node_at(this + 38, v10, v8, v9);
  }
  v9[7] = (uint64_t)a3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return this + 1;
}

void sub_1C54E56D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **non-virtual thunk to'IPTelephonyManager::delegateForIncomingUssdSession(uint64_t **this, BambiClient *a2, BambiUssdSession *a3)
{
  return IPTelephonyManager::delegateForIncomingUssdSession(this - 2, a2, a3);
}

uint64_t IPTelephonyManager::cancelUssdSession(uint64_t a1, void **a2)
{
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 304, a2);
  if ((void **)(a1 + 312) == v4)
  {
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v11 = a1 + 24;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(v12 + 64))(v11);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v7);
    uint64_t v8 = *(void **)(v7 + 8);
    uint64_t v9 = "IPTelephonyManager::cancelUssdSession: session not found for stack ";
    uint64_t v10 = 67;
  }
  else
  {
    SipUssdSession::cancelSession(*((SipUssdSession **)v4[7] + 3), (uint64_t)v14);
    ImsResult::~ImsResult((ImsResult *)v14);
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v5 = a1 + 24;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 64))(v5);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v7);
    uint64_t v8 = *(void **)(v7 + 8);
    uint64_t v9 = "IPTelephonyManager::cancelUssdSession: session canceled for stack ";
    uint64_t v10 = 66;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  return result;
}

void IPTelephonyManager::handleDeviceEvents(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v4 = *(void **)(a1 + 168);
  if (!v4) {
    return;
  }
  int v7 = *a3;
  if ((*a3 & 0x10) != 0)
  {
    unsigned int v9 = 0;
  }
  else if ((v7 & 0x400) != 0)
  {
    unsigned int v9 = 1;
  }
  else
  {
    if ((v7 & 0x800) == 0)
    {
      if ((v7 & 0x1000) != 0)
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(a1 + 24);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 16))(a1 + 24, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"IPTelephonyManager::handleDeviceEvents: KeepAlive wakeup received", 65);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        BambiClient::handleKeepAliveWake(*(BambiClient **)(a1 + 168));
      }
      goto LABEL_12;
    }
    unsigned int v9 = 2;
  }
  BambiClient::handleNetworkEvents(v4, a2, v9);
LABEL_12:
  uint64_t v10 = *(void *)(a1 + 168);
  int v11 = *a3;
  BambiClient::handleDeviceEvents(v10, (uint64_t)a2, v11);
}

void IPTelephonyManager::restoreLoggingState(IPTelephonyManager *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ImsLoggingEnabled");
  BoolValueFromRuntimeConfig = (IPTelephonyManager *)IPTelephonyPrefs::getBoolValueFromRuntimeConfig((uint64_t)__p, 0);
  int v2 = (int)BoolValueFromRuntimeConfig;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  IPTelephonyManager::setLoggingEnabled(BoolValueFromRuntimeConfig, v2);
}

void sub_1C54E5A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::setAutoAnswer(uint64_t a1, uint64_t a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "enableAutoAnswer");
  IPTelephonyPrefs::setBoolValueInRuntimeConfig((uint64_t)__p, a3);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C54E5AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::updateAccessBarringInfo(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 160);
  *(_DWORD *)(a1 + 160) = v1 + 1;
  LODWORD(__p) = v1;
  ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()();
}

void sub_1C54E5CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 73) < 0) {
    operator delete(*(void **)(v28 - 96));
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IPTelephonyManager23updateAccessBarringInfoERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN18BambiAccessBarring4InfoE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v2 + 168) + 192))(&v10);
  uint64_t v3 = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v2 + 168) + 192))(&v10);
    unsigned __int16 v4 = *(_WORD *)(a1 + 64);
    int v5 = *(_DWORD *)(a1 + 68);
    char v6 = *(unsigned char *)(a1 + 72);
    int v7 = *(_DWORD *)(a1 + 76);
    char v8 = *(unsigned char *)(a1 + 80);
    BambiAccessBarring::updateVoiceInfo(v10 + 2928, &v4, (ImsResult *)v9);
    ImsResult::~ImsResult((ImsResult *)v9);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
}

void sub_1C54E5E50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c31_ZTSN18BambiAccessBarring4InfoE(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_WORD *)(a1 + 64) = 100;
  *(_DWORD *)(a1 + 68) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 7ims::StackConfig::~StackConfig(this + 6) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_DWORD *)(a1 + 7ims::StackConfig::~StackConfig(this + 6) = *(_DWORD *)(a2 + 76);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void non-virtual thunk to'IPTelephonyManager::updateAccessBarringInfo(uint64_t a1)
{
}

void IPTelephonyManager::updateUacBarringInfo(uint64_t a1, unsigned __int8 *a2, int a3, unsigned __int16 *a4, int a5)
{
  int v45 = a3;
  uint64_t v10 = a1 + 24;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Received UAC barring info for stack ", 36);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v11 + 32))(v11, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)": UAC resp=", 11);
  *(unsigned char *)(v11 + 17) = 0;
  ims::toString<UacAccessResponse>(&v45, v35);
  (*(void (**)(uint64_t, void **))(*(void *)v11 + 32))(v11, v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)", affected services=", 20);
  *(unsigned char *)(v11 + 17) = 0;
  ims::Services::namesForMask((ims::Services *)*((unsigned int *)a4 + 3), &__p);
  (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v37 < 0) {
    operator delete(v35[0]);
  }
  int v12 = *((_DWORD *)a4 + 3);
  if (v12)
  {
    IMSCallManager::handleUacBarringResponse(*(void **)(a1 + 200), a2, a3);
    int v12 = *((_DWORD *)a4 + 3);
  }
  if ((v12 & 4) != 0) {
    IMSSMSManager::handleUacBarringResponse(*(IMSSMSManager **)(a1 + 208), (void **)a2, a3);
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 168) + 192))(&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    if ((a4[6] & 0x40) != 0)
    {
      uint64_t v13 = *(void *)(__p.__r_.__value_.__r.__words[0] + 144);
      if (v13)
      {
        uint64_t v15 = *(void *)(v13 + 248);
        uint64_t v14 = *(std::__shared_weak_count **)(v13 + 256);
        if (v14)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        if (v15)
        {
          if (a3 == 3)
          {
            uint64_t v19 = *(void *)(__p.__r_.__value_.__r.__words[0] + 144);
            long long v20 = *(SipRegistrationClient **)(v19 + 248);
            std::string::size_type size = *(std::__shared_weak_count **)(v19 + 256);
            if (size) {
              atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipRegistrationClient::handleBarringAccessAlleviated(v20);
            goto LABEL_65;
          }
          if (a3 == 4)
          {
            uint64_t v16 = *(void *)(__p.__r_.__value_.__r.__words[0] + 144);
            long long v17 = *(SipRegistrationClient **)(v16 + 248);
            std::string::size_type size = *(std::__shared_weak_count **)(v16 + 256);
            if (size) {
              atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipRegistrationClient::handleAccessCongested(v17, *((unsigned int *)a4 + 1));
LABEL_65:
            if (size) {
              std::__shared_weak_count::__release_shared[abi:ne180100](size);
            }
            goto LABEL_67;
          }
          uint64_t v21 = *(void *)(__p.__r_.__value_.__r.__words[0] + 144);
          uint64_t v22 = *(SipRegistrationClient **)(v21 + 248);
          uint64_t v23 = *(std::__shared_weak_count **)(v21 + 256);
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          v35[0] = &unk_1F20B2680;
          v35[1] = &_bambiDomain;
          int v36 = (a3 != 0) << 30;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v38 = 0;
          uint64_t v39 = 0;
          SipRegistrationClient::handleAccessCheck(v22, (const ImsResult *)v35, *((unsigned int *)a4 + 1));
          ImsResult::~ImsResult((ImsResult *)v35);
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
        }
      }
    }
    std::string::size_type v24 = __p.__r_.__value_.__r.__words[0];
    if (((*(unsigned char *)(__p.__r_.__value_.__r.__words[0] + 176) != 0) ^ a5)) {
      goto LABEL_67;
    }
    int v25 = *((_DWORD *)a4 + 3);
    std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    int v26 = *a4;
    int v27 = *((_DWORD *)a4 + 1);
    if (v25)
    {
      if (v26 == 100) {
        int v28 = 0;
      }
      else {
        int v28 = v27;
      }
      BambiAccessBarring::setUacBarring(v24 + 2928, 1, v28);
    }
    if ((v25 & 2) != 0)
    {
      if (v26 == 100) {
        int v29 = 0;
      }
      else {
        int v29 = v27;
      }
      BambiAccessBarring::setUacBarring(v24 + 2928, 2, v29);
    }
    if ((v25 & 4) != 0)
    {
      if (v26 == 100) {
        int v30 = 0;
      }
      else {
        int v30 = v27;
      }
      BambiAccessBarring::setUacBarring(v24 + 2928, 4, v30);
    }
    if ((v25 & 8) != 0)
    {
      if (v26 == 100) {
        int v31 = 0;
      }
      else {
        int v31 = v27;
      }
      BambiAccessBarring::setUacBarring(v24 + 2928, 8, v31);
    }
    if ((v25 & 0x10) != 0)
    {
      if (v26 == 100) {
        int v32 = 0;
      }
      else {
        int v32 = v27;
      }
      BambiAccessBarring::setUacBarring(v24 + 2928, 16, v32);
    }
    if ((v25 & 0x20) != 0)
    {
      if (v26 == 100) {
        int v33 = 0;
      }
      else {
        int v33 = v27;
      }
      BambiAccessBarring::setUacBarring(v24 + 2928, 32, v33);
    }
    if ((v25 & 0x40) != 0)
    {
      if (v26 == 100) {
        int v34 = 0;
      }
      else {
        int v34 = v27;
      }
      BambiAccessBarring::setUacBarring(v24 + 2928, 64, v34);
    }
    goto LABEL_65;
  }
LABEL_67:
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
}

void sub_1C54E6370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,std::__shared_weak_count *a23,int a24,__int16 a25,char a26,char a27)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IPTelephonyManager::updateUacBarringInfo(uint64_t a1, unsigned __int8 *a2, int a3, unsigned __int16 *a4, int a5)
{
}

void IPTelephonyManager::sendCallStatusRequest(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, char a6)
{
  int v31 = a3;
  uint64_t v29 = 0;
  int v30 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 168) + 192))(&v29);
  uint64_t v12 = v29;
  if (!v29)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::error((uint64_t)v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Unable to send call status request for invalid stack ", 53);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 32))(v14, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if ((v28 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    uint64_t v15 = __p[0];
    goto LABEL_28;
  }
  uint64_t v13 = *(unsigned int *)(v29 + 4100);
  uint64_t v26 = 0;
  long long v25 = 0u;
  *(_OWORD *)uint64_t v23 = 0u;
  memset(v24, 0, sizeof(v24));
  if (*(char *)(v29 + 3183) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v23, *(const std::string::value_type **)(v29 + 3160), *(void *)(v29 + 3168));
  }
  else
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)(v29 + 3160);
    v24[0] = *(void **)(v29 + 3176);
  }
  if (*(char *)(v12 + 3207) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v24[1], *(const std::string::value_type **)(v12 + 3184), *(void *)(v12 + 3192));
  }
  else
  {
    *(_OWORD *)&v24[1] = *(_OWORD *)(v12 + 3184);
    v24[3] = *(void **)(v12 + 3200);
  }
  LOBYTE(v2ims::StackConfig::~StackConfig(this + 6) = *(unsigned char *)(v12 + 3224);
  long long v25 = *(_OWORD *)(v12 + 3208);
  uint64_t v16 = (a6 & 1) != 0 || *(unsigned char *)(v29 + 176) != 0;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 16))(a1 + 24, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Reporting call status ", 22);
  *(unsigned char *)(v17 + 17) = 0;
  ims::toString<UacCallStatus>(&v31, __p);
  (*(void (**)(uint64_t, void **))(*(void *)v17 + 32))(v17, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" for ", 5);
  *(unsigned char *)(v17 + 17) = 0;
  if (a5) {
    long long v18 = "MO ";
  }
  else {
    long long v18 = "MT ";
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)v18, 3);
  *(unsigned char *)(v17 + 17) = 0;
  if (v16) {
    uint64_t v19 = "emergency call";
  }
  else {
    uint64_t v19 = "call";
  }
  if (v16) {
    uint64_t v20 = 14;
  }
  else {
    uint64_t v20 = 4;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)v19, v20);
  *(unsigned char *)(v17 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" on stack ", 10);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 32))(v17, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" with access network ", 21);
  *(unsigned char *)(v17 + 17) = 0;
  uint64_t v21 = (unsigned char *)ims::operator<<(v17, (uint64_t)v23);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v21[17] = 0;
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v22 = *(void *)(a1 + 328);
  if (v22) {
    IMSNasDeviceClient::reportCallStatus(v22, v13, a3, a4, (uint64_t)v23, a5, v16);
  }
  if (SHIBYTE(v24[3]) < 0)
  {
    uint64_t v15 = v24[1];
LABEL_28:
    operator delete(v15);
  }
LABEL_29:
  if (SHIBYTE(v24[0]) < 0) {
    operator delete(v23[0]);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
}

void sub_1C54E680C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::initializeXcap()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsPrefs::ImsPrefs((ImsPrefs *)v0);
}

void sub_1C54E6C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  ImsResult::~ImsResult((ImsResult *)&a30);
  ImsPrefs::~ImsPrefs((ImsPrefs *)&a39);
  _Unwind_Resume(a1);
}

uint64_t ims::AccessNetwork::isHandover(ims::AccessNetwork *this, const ims::AccessNetwork *a2)
{
  if (*((char *)this + 23) < 0)
  {
    if (!*((void *)this + 1)) {
      return 0;
    }
  }
  else if (!*((unsigned char *)this + 23))
  {
    return 0;
  }
  if (*((char *)this + 47) < 0)
  {
    if (!*((void *)this + 4)) {
      return 0;
    }
  }
  else if (!*((unsigned char *)this + 47))
  {
    return 0;
  }
  uint64_t v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *((void *)a2 + 1);
  }
  if (v3)
  {
    uint64_t v4 = *((unsigned __int8 *)a2 + 47);
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *((void *)a2 + 4);
    }
    if (v4)
    {
      isWifuint64_t i = ims::AccessNetwork::isWifi(this);
      return isWifi ^ ims::AccessNetwork::isWifi(a2);
    }
  }
  return 0;
}

BOOL ims::AccessNetwork::isCellularHandover(ims::AccessNetwork *this, const ims::AccessNetwork *a2)
{
  BOOL result = ims::AccessNetwork::networkTypeChanged(this, a2);
  if (result)
  {
    if (ims::AccessNetwork::isLTE(this) || (BOOL result = ims::AccessNetwork::isNR(this), result))
    {
      if (ims::AccessNetwork::isLTE(a2))
      {
        return 1;
      }
      else
      {
        return ims::AccessNetwork::isNR(a2);
      }
    }
  }
  return result;
}

void IPTelephonyManager::updateSimAccessClass(uint64_t a1, uint64_t a2, const unsigned int *a3)
{
  uint64_t v4 = 0;
  long long v5 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 168) + 192))(&v4);
  if (v4) {
    BambiAccessBarring::updateSimAccessClass((BambiAccessBarring *)(v4 + 2928), a3);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C54E6E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::handleSipTimeoutReport(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
}

void *IPTelephonyManager::logPrefix(IPTelephonyManager *this, ImsOutStream *a2)
{
  BOOL result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"IPTelephonyManager: ", 20);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

uint64_t std::__optional_destruct_base<DeferredEmergency,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 5144))
  {
    IMSCallOptions::~IMSCallOptions((void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void BambiClientDelegate::~BambiClientDelegate(BambiClientDelegate *this)
{
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  long long v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = v7;
  if (v7)
  {
    *(void *)(v6 + 1ims::StackConfig::~StackConfig(this + 6) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void _ZNSt3__115allocate_sharedB8ne180100I18IPTelephonyManagerNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  uint64_t v0 = operator new(0x1B8uLL);
  _ZNSt3__120__shared_ptr_emplaceI18IPTelephonyManagerNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v0);
}

void sub_1C54E7038(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__120__shared_ptr_emplaceI18IPTelephonyManagerNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20D6560;
  IPTelephonyManager::IPTelephonyManager((IPTelephonyManager *)(a1 + 3));
}

void sub_1C54E7094(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<IPTelephonyManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D6560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IPTelephonyManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D6560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<IPTelephonyManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DeferredInit>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,DeferredInit>,0>(uint64_t a1)
{
  std::__optional_destruct_base<DeferredEmergency,false>::~__optional_destruct_base[abi:ne180100](a1 + 808);
  ims::StackConfig::~StackConfig((void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<BambiClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D65B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D65B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiClient>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 288))();
}

void std::__shared_ptr_emplace<IMSSMSManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D6600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IMSSMSManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D6600;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<IMSSMSManager>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

char *std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, long long **a3)
{
  uint64_t v6 = a1 + 1;
  long long v5 = (char *)a1[1];
  uint64_t v7 = (char **)(a1 + 1);
  char v8 = (char **)(a1 + 1);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v7 = (char **)(a1 + 1);
  while (1)
  {
    while (1)
    {
      char v8 = (char **)v5;
      uint64_t v10 = v5 + 32;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      long long v5 = *v8;
      uint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0) {
      break;
    }
    uint64_t v7 = v8 + 1;
    long long v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  uint64_t v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    uint64_t v12 = *a3;
    uint64_t v19 = 0;
    uint64_t v13 = (char *)operator new(0x1768uLL);
    uint64_t v14 = v13;
    v18[0] = v13;
    v18[1] = v6;
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v13 + 32), *(const std::string::value_type **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v15 = *v12;
      *((void *)v13 + ims::StackConfig::~StackConfig(this + 6) = *((void *)v12 + 2);
      *((_OWORD *)v13 + 2) = v15;
    }
    bzero(v14 + 56, 0x1730uLL);
    ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(v14 + 128));
    *((_OWORD *)v14 + 49) = 0u;
    *((_OWORD *)v14 + 50) = 0u;
    *((_OWORD *)v14 + 47) = 0u;
    *((_OWORD *)v14 + 48) = 0u;
    *((_OWORD *)v14 + 45) = 0u;
    *((_OWORD *)v14 + 4ims::StackConfig::~StackConfig(this + 6) = 0u;
    *((_WORD *)v14 + 408) = 257;
    *((_DWORD *)v14 + 207) = 0;
    *((_WORD *)v14 + 41ims::StackConfig::~StackConfig(this + 6) = 256;
    v14[834] = 1;
    v14[840] = 0;
    v14[5984] = 0;
    LOBYTE(v19) = 1;
    *(void *)uint64_t v14 = 0;
    *((void *)v14 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    *((void *)v14 + 2) = v8;
    *uint64_t v7 = v14;
    uint64_t v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      uint64_t v14 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    uint64_t v11 = (char *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,DeferredInit>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DeferredInit>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1C54E74EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,DeferredInit>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DeferredInit>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,DeferredInit>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DeferredInit>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,DeferredInit>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t *AuthQueueItem<BambiClient>::~AuthQueueItem(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)a1 + 55) < 0) {
    operator delete((void *)a1[4]);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,BambiUssdSession *>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiUssdSession *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiUssdSession *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  BOOL result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,BambiUssdSession *>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiUssdSession *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiUssdSession *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BambiUssdSession *>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiUssdSession *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiUssdSession *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *uint64_t v6 = v5;
  *((unsigned char *)a3 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  char v8 = (std::string *)(v7 + 32);
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + ims::StackConfig::~StackConfig(this + 6) = *((void *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  *((void *)v7 + 7) = 0;
  *((unsigned char *)a3 + 1ims::StackConfig::~StackConfig(this + 6) = 1;
}

void sub_1C54E7738(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_IPTelephonyManager_cpp()
{
  __cxa_atexit((void (*)(void *))std::shared_ptr<IPTelephonyManager>::~shared_ptr[abi:ne180100], &gIPTelephonyManager, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&_MergedGlobals_21, "CoreTelephonyTraceScratch/");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  __cxa_atexit(MEMORY[0x1E4FBA210], &_MergedGlobals_21, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&algn_1EBBDC340[16], "/var/mobile/Library/Preferences/com.apple.carrier.plist");
  __cxa_atexit(v0, &algn_1EBBDC340[16], &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&algn_1EBBDC340[40], "/var/mobile/Library/Preferences/com.apple.operator.plist");
  __cxa_atexit(v0, &algn_1EBBDC340[40], &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDC380, "/var/mobile/Library/Preferences/com.apple.carrier.default.plist");
  __cxa_atexit(v0, qword_1EBBDC380, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC380[3], "/var/mobile/Library/Carrier Bundle.bundle");
  __cxa_atexit(v0, &qword_1EBBDC380[3], &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC380[6], "/var/mobile/Library/Operator Bundle.bundle");
  __cxa_atexit(v0, &qword_1EBBDC380[6], &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC380[9], "/var/mobile/Library/CarrierDefault.bundle");
  __cxa_atexit(v0, &qword_1EBBDC380[9], &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC380[12], "/Preferences/com.apple.ims_config.plist");
  __cxa_atexit(v0, &qword_1EBBDC380[12], &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC380[15], "/Preferences/com.apple.ipTelephony_override.plist");
  return __cxa_atexit(v0, &qword_1EBBDC380[15], &dword_1C51D1000);
}

std::string *SipOfferAnswerItem::set(uint64_t a1, uint64_t a2, uint64_t a3, std::string *__str)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return std::string::operator=((std::string *)(a1 + 16), __str);
}

ImsOutStream *SipOfferAnswerExchange::log(std::__shared_weak_count **this, ImsOutStream *a2)
{
  if (SipOfferAnswerExchange::empty((SipOfferAnswerExchange *)this))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"none", 4);
    *((unsigned char *)a2 + 17) = 0;
    return a2;
  }
  uint64_t v5 = this[5];
  uint64_t v4 = this[6];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (v5)
    {
      uint64_t v5 = this[5];
LABEL_7:
      uint64_t v6 = this[1];
      if (v5 == v6) {
        uint64_t v7 = "local";
      }
      else {
        uint64_t v7 = "remote";
      }
      if (v5 == v6) {
        uint64_t v8 = 5;
      }
      else {
        uint64_t v8 = 6;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)v7, v8);
      *((unsigned char *)a2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" offer (", 8);
      *((unsigned char *)a2 + 17) = 0;
      uint64_t v9 = this[5];
      long long v10 = this[6];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      LoggableString::LoggableString(&__p, (const std::string *)&v9->__shared_weak_owners_);
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)")", 1);
      *((unsigned char *)a2 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      LODWORD(v5) = 1;
    }
  }
  else if (v5)
  {
    goto LABEL_7;
  }
  uint64_t v12 = this[7];
  uint64_t v11 = this[8];
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v12)
  {
    if (v5)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" ", 1);
      *((unsigned char *)a2 + 17) = 0;
    }
    uint64_t v13 = this[7];
    uint64_t v14 = this[1];
    if (v13 == v14) {
      long long v15 = "local";
    }
    else {
      long long v15 = "remote";
    }
    if (v13 == v14) {
      uint64_t v16 = 5;
    }
    else {
      uint64_t v16 = 6;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)v15, v16);
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" answer (", 9);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t v17 = this[7];
    long long v18 = this[8];
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LoggableString::LoggableString(&__p, (const std::string *)&v17->__shared_weak_owners_);
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)")", 1);
    *((unsigned char *)a2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    LODWORD(v5) = 1;
  }
  if (*((char *)this + 95) < 0)
  {
    if (!this[10]) {
      return a2;
    }
  }
  else if (!*((unsigned char *)this + 95))
  {
    return a2;
  }
  uint64_t v19 = (const std::string *)(this + 9);
  if (v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" ", 1);
    *((unsigned char *)a2 + 17) = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"(txn ", 5);
  *((unsigned char *)a2 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&__p, v19);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 56))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)")", 1);
  *((unsigned char *)a2 + 17) = 0;
  if (v23 < 0) {
    operator delete(v22);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a2;
}

void sub_1C54E7C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipOfferAnswerExchange::remoteAnswerPending(SipOfferAnswerExchange *this)
{
  if (*((void *)this + 5) != *((void *)this + 1)) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 7);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (!v2) {
    return v3 == 0;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v1 = v3 == 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v1;
}

BOOL SipOfferAnswerExchange::localAnswerPending(SipOfferAnswerExchange *this)
{
  if (*((void *)this + 5) != *((void *)this + 3)) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 7);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (!v2) {
    return v3 == 0;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v1 = v3 == 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v1;
}

BOOL SipOfferAnswerExchange::validateSdpSource(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a3[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a3[23];
  }
  else {
    uint64_t v5 = *((void *)a3 + 1);
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 95);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 80);
  }
  if (v5 == v6)
  {
    long long v10 = *(unsigned __int8 **)(a1 + 72);
    uint64_t v8 = (unsigned __int8 *)(a1 + 72);
    uint64_t v9 = v10;
    if (v7 >= 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v9;
    }
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)a3, v11, *((void *)a3 + 1))) {
        return 1;
      }
    }
    else
    {
      if (!a3[23]) {
        return 1;
      }
      while (*a3 == *v11)
      {
        ++a3;
        ++v11;
        if (!--v4) {
          return 1;
        }
      }
    }
  }
  uint64_t v12 = a2[23];
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = a2[23];
  }
  else {
    uint64_t v13 = *((void *)a2 + 1);
  }
  if (v13 != 3)
  {
    if (v13 != 5) {
      return 0;
    }
    if ((v12 & 0x80) == 0)
    {
      if (a2[23])
      {
        uint64_t v14 = v12 - 1;
        long long v15 = "PRACK";
        do
        {
          int v17 = *a2++;
          int v16 = v17;
          int v19 = *(unsigned __int8 *)v15++;
          int v18 = v19;
          BOOL v20 = v14-- != 0;
          char v21 = v20;
          BOOL result = v16 == v18;
        }
        while (v16 == v18 && (v21 & 1) != 0);
        return result;
      }
      return 1;
    }
    int v30 = (long long *)"PRACK";
    return memcmp(*(const void **)a2, v30, *((void *)a2 + 1)) == 0;
  }
  if ((v12 & 0x80) != 0)
  {
    int v30 = &SipRequest::kMethodAck;
    return memcmp(*(const void **)a2, v30, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v23 = v12 - 1;
  std::string::size_type v24 = &SipRequest::kMethodAck;
  do
  {
    int v26 = *a2++;
    int v25 = v26;
    int v28 = *(unsigned __int8 *)v24;
    std::string::size_type v24 = (long long *)((char *)v24 + 1);
    int v27 = v28;
    BOOL v20 = v23-- != 0;
    char v29 = v20;
    BOOL result = v25 == v27;
  }
  while (v25 == v27 && (v29 & 1) != 0);
  return result;
}

uint64_t SipOfferAnswer::SipOfferAnswer(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1F20B2FA8;
  uint64_t v4 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&v10, "sip.offer.answer");
  (*(void (**)(std::string *__return_ptr))(*(void *)*a2 + 40))(&__p);
  ImsLogContainer::ImsLogContainer(v4, &v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)a1 = &unk_1F20D6680;
  *(void *)(a1 + 8) = &unk_1F20D66B8;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = 0;
  *(unsigned char *)(a1 + 144) = 1;
  *(void *)(a1 + 152) = a1 + 152;
  *(void *)(a1 + 160) = a1 + 152;
  *(void *)(a1 + 168) = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
    int v7 = *(std::__shared_weak_count **)(a1 + 136);
    *(void *)(a1 + 128) = v5;
    *(void *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = v6;
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *(void *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = 0;
    *(void *)(a1 + 128) = v5;
  }
  SipOfferAnswer::startNewExchange((SipOfferAnswer *)a1);
  return a1;
}

void sub_1C54E8044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::string::size_type v24 = v22;
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(v23);
  if (*v24) {
    std::__shared_weak_count::__release_weak(*v24);
  }
  int v26 = *(std::__shared_weak_count **)(v21 + 120);
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  ImsLogContainer::~ImsLogContainer(v20);
  _Unwind_Resume(a1);
}

uint64_t SipOfferAnswer::startNewExchange(SipOfferAnswer *this)
{
  uint64_t v2 = (char *)this + 152;
  if (!*((void *)this + 21)
    || (uint64_t result = SipOfferAnswerExchange::empty(*(SipOfferAnswerExchange **)(*(void *)v2 + 16)), (result & 1) == 0))
  {
    uint64_t v4 = operator new(0x80uLL);
    v4[1] = 0;
    v4[2] = 0;
    *uint64_t v4 = &unk_1F20D67D8;
    v4[3] = &unk_1F20D6650;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + IMSCallOptions::~IMSCallOptions(this + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + ims::StackConfig::~StackConfig(this + 6) = 0u;
    v4[14] = 0;
    uint64_t v5 = (char *)operator new(0x40uLL);
    *((void *)v5 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    *((void *)v5 + 2) = 0;
    *(void *)uint64_t v5 = &unk_1F20D6788;
    *(_OWORD *)(v5 + 40) = 0u;
    *((void *)v5 + 7) = 0;
    *(_OWORD *)(v5 + 24) = 0u;
    v4[4] = v5 + 24;
    v4[5] = v5;
    uint64_t v6 = (char *)operator new(0x40uLL);
    *((void *)v6 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    *((void *)v6 + 2) = 0;
    *(void *)uint64_t v6 = &unk_1F20D6788;
    *(_OWORD *)(v6 + 40) = 0u;
    *((void *)v6 + 7) = 0;
    *(_OWORD *)(v6 + 24) = 0u;
    v4[6] = v6 + 24;
    v4[7] = v6;
    uint64_t result = (uint64_t)operator new(0x20uLL);
    *(void *)(result + 1ims::StackConfig::~StackConfig(this + 6) = v4 + 3;
    *(void *)(result + 24) = v4;
    uint64_t v7 = *((void *)this + 19);
    *(void *)uint64_t result = v7;
    *(void *)(result + 8) = v2;
    *(void *)(v7 + 8) = result;
    *((void *)this + 19) = result;
    ++*((void *)this + 21);
  }
  return result;
}

void sub_1C54E820C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipOfferAnswer::~SipOfferAnswer(SipOfferAnswer *this)
{
  *(void *)this = &unk_1F20D6680;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20D66B8;
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 19);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  SipOfferAnswer::~SipOfferAnswer(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipOfferAnswer::~SipOfferAnswer(SipOfferAnswer *this)
{
}

{
  uint64_t vars8;

  SipOfferAnswer::~SipOfferAnswer((SipOfferAnswer *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void *SipOfferAnswer::logPrefix(SipOfferAnswer *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Offer/Answer: ", 14);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void *non-virtual thunk to'SipOfferAnswer::logPrefix(SipOfferAnswer *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Offer/Answer: ", 14);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void SipOfferAnswer::revert(SipOfferAnswer *this)
{
  BOOL v1 = (char *)this + 8;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
  (*(void (**)(char *, uint64_t))(*(void *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"reverting exchange ", 19);
  *(unsigned char *)(v2 + 17) = 0;
  SipOfferAnswer::debugInfo((SipOfferAnswer *)&__p);
}

void sub_1C54E867C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void SipOfferAnswer::debugInfo(SipOfferAnswer *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C54E8798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SipOfferAnswer::activeRemoteSdp(SipOfferAnswer *this@<X0>, void *a2@<X8>)
{
  if (*((void *)this + 21))
  {
    uint64_t v2 = (void *)((char *)this + 152);
    while (v2 != *((void **)this + 20))
    {
      uint64_t v2 = (void *)*v2;
      uint64_t v3 = (void *)v2[2];
      if (v3[5] && v3[7])
      {
        uint64_t v5 = (uint64_t *)v3[3];
        uint64_t v4 = (std::__shared_weak_count *)v3[4];
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v7 = *v5;
        uint64_t v6 = v5[1];
        *a2 = v7;
        a2[1] = v6;
        if (v6) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
        }
        if (v4) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        }
        return;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
}

void SipOfferAnswer::activeLocalSdp(SipOfferAnswer *this@<X0>, void *a2@<X8>)
{
  if (*((void *)this + 21))
  {
    uint64_t v2 = (void *)((char *)this + 152);
    while (v2 != *((void **)this + 20))
    {
      uint64_t v2 = (void *)*v2;
      uint64_t v3 = (void *)v2[2];
      if (v3[5] && v3[7])
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v4 = (std::__shared_weak_count *)v3[2];
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v7 = *v5;
        uint64_t v6 = v5[1];
        *a2 = v7;
        a2[1] = v6;
        if (v6) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
        }
        if (v4) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        }
        return;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
}

void SipOfferAnswer::updateWithIncomingRequest(SipOfferAnswer *a1@<X0>, SipMessage *a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = SipMessage::body<SipSdpBody>((uint64_t)a2);
  if (v8)
  {
    uint64_t v10 = *((void *)v8 + 1);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 2);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  xpc_object_t v90 = xpc_null_create();
  memset(&v89, 0, sizeof(v89));
  int v11 = SipMessage::headerValueAsString((uint64_t)a2, "P-Asserted-Service");
  uint64_t v12 = MEMORY[0x1E4F14590];
  if (v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v86, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.session.group");
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v89.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = HIBYTE(v88);
    int v15 = SHIBYTE(v88);
    if (v88 < 0) {
      uint64_t v14 = v87;
    }
    if (size != v14)
    {
      BOOL v25 = 0;
      if ((SHIBYTE(v88) & 0x80000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_31;
    }
    if (v88 >= 0) {
      int v16 = (void **)&v86;
    }
    else {
      int v16 = v86;
    }
    if ((*((unsigned char *)&v89.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      BOOL v25 = memcmp(v89.__r_.__value_.__l.__data_, v16, v89.__r_.__value_.__l.__size_) == 0;
    }
    else
    {
      if (!*((unsigned char *)&v89.__r_.__value_.__s + 23))
      {
        BOOL v25 = 1;
        if ((SHIBYTE(v88) & 0x80000000) == 0)
        {
LABEL_28:
          if (!v25) {
            goto LABEL_100;
          }
LABEL_32:
          uint64_t v86 = 0;
          uint64_t v87 = 0;
          uint64_t v88 = 0;
          int v26 = SipMessage::bodyWithContentType((uint64_t)a2, "multipart/mixed");
          if (v26)
          {
            if (v27)
            {
              if (SipMultiPartBody::partWithContentType((uint64_t)v27, (unsigned __int8 *)&SipRecipientListBody::kContentType))
              {
                SipBodyPart::encodeToString();
              }
            }
          }
          xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
          if (v28 || (xpc_object_t v28 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C878F160](v28) == v12)
            {
              xpc_retain(v28);
              xpc_object_t v29 = v28;
            }
            else
            {
              xpc_object_t v29 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v29 = xpc_null_create();
            xpc_object_t v28 = 0;
          }
          xpc_release(v28);
          xpc_object_t v30 = xpc_null_create();
          xpc_object_t v31 = v90;
          xpc_object_t v90 = v29;
          xpc_release(v31);
          xpc_release(v30);
          int v32 = (char *)SipMessage::header<SipConversationIdHeader>((uint64_t)a2);
          int v33 = (long long *)(v32 + 64);
          if (!v32) {
            int v33 = &ims::kEmptyString;
          }
          if (*((char *)v33 + 23) >= 0) {
            int v34 = (const char *)v33;
          }
          else {
            int v34 = *(const char **)v33;
          }
          xpc_object_t v84 = xpc_string_create(v34);
          if (!v84) {
            xpc_object_t v84 = xpc_null_create();
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
          xpc::dict::object_proxy::operator=((uint64_t)&__p, &v84, &v85);
          xpc_release(v85);
          xpc_object_t v85 = 0;
          xpc_release(v84);
          xpc_object_t v84 = 0;
          long long v35 = (char *)SipMessage::header<SipContributionIdHeader>((uint64_t)a2);
          int v36 = (long long *)(v35 + 64);
          if (!v35) {
            int v36 = &ims::kEmptyString;
          }
          if (*((char *)v36 + 23) >= 0) {
            char v37 = (const char *)v36;
          }
          else {
            char v37 = *(const char **)v36;
          }
          xpc_object_t v82 = xpc_string_create(v37);
          if (!v82) {
            xpc_object_t v82 = xpc_null_create();
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kContributionId";
          xpc::dict::object_proxy::operator=((uint64_t)&__p, &v82, &object);
          xpc_release(object);
          xpc_object_t object = 0;
          xpc_release(v82);
          xpc_object_t v82 = 0;
          uint64_t v38 = (char *)SipMessage::header<SipSubjectHeader>((uint64_t)a2);
          uint64_t v39 = (long long *)(v38 + 64);
          if (!v38) {
            uint64_t v39 = &ims::kEmptyString;
          }
          if (*((char *)v39 + 23) >= 0) {
            uint64_t v40 = (const char *)v39;
          }
          else {
            uint64_t v40 = *(const char **)v39;
          }
          xpc_object_t v80 = xpc_string_create(v40);
          if (!v80) {
            xpc_object_t v80 = xpc_null_create();
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kSubject";
          xpc::dict::object_proxy::operator=((uint64_t)&__p, &v80, &v81);
          xpc_release(v81);
          xpc_object_t v81 = 0;
          xpc_release(v80);
          xpc_object_t v80 = 0;
          SipMessage::referredBy(a2, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          xpc_object_t v78 = xpc_string_create((const char *)p_p);
          if (!v78) {
            xpc_object_t v78 = xpc_null_create();
          }
          __int16 v75 = &v90;
          uint64_t v76 = "kReferredBy";
          xpc::dict::object_proxy::operator=((uint64_t)&v75, &v78, &v79);
          xpc_release(v79);
          xpc_object_t v79 = 0;
          xpc_release(v78);
          xpc_object_t v78 = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v42 = SipMessage::header<SipContactHeader>((uint64_t)a2);
          if (v42)
          {
            uint64_t v43 = v42[9];
            if (v43 == v42[10]) {
              uint64_t v43 = 0;
            }
          }
          else
          {
            uint64_t v43 = 0;
          }
          SipUri::asString(v43 + 8, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v44 = &__p;
          }
          else {
            unint64_t v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          xpc_object_t v73 = xpc_string_create((const char *)v44);
          if (!v73) {
            xpc_object_t v73 = xpc_null_create();
          }
          __int16 v75 = &v90;
          uint64_t v76 = "kConferenceFocus";
          xpc::dict::object_proxy::operator=((uint64_t)&v75, &v73, &v74);
          xpc_release(v74);
          xpc_object_t v74 = 0;
          xpc_release(v73);
          xpc_object_t v73 = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v88 >= 0) {
            int v45 = (const char *)&v86;
          }
          else {
            int v45 = (const char *)v86;
          }
          xpc_object_t v71 = xpc_string_create(v45);
          if (!v71) {
            xpc_object_t v71 = xpc_null_create();
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kResourceXml";
          xpc::dict::object_proxy::operator=((uint64_t)&__p, &v71, &v72);
          xpc_release(v72);
          xpc_object_t v72 = 0;
          xpc_release(v71);
          xpc_object_t v71 = 0;
          memset(&__p, 0, sizeof(__p));
          if (!SipMessage::headerValueAsString((uint64_t)a2, "Referred-By")) {
            goto LABEL_96;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            if (__p.__r_.__value_.__l.__size_)
            {
              uint64_t v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_93;
            }
          }
          else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
          {
            uint64_t v46 = &__p;
LABEL_93:
            xpc_object_t v69 = xpc_string_create((const char *)v46);
            if (!v69) {
              xpc_object_t v69 = xpc_null_create();
            }
            __int16 v75 = &v90;
            uint64_t v76 = "kRemoteUri";
            xpc::dict::object_proxy::operator=((uint64_t)&v75, &v69, &v70);
            xpc_release(v70);
            xpc_object_t v70 = 0;
            xpc_release(v69);
            xpc_object_t v69 = 0;
          }
LABEL_96:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v88) < 0) {
            operator delete(v86);
          }
          goto LABEL_100;
        }
LABEL_31:
        operator delete(v86);
        if (!v25) {
          goto LABEL_100;
        }
        goto LABEL_32;
      }
      uint64_t v17 = HIBYTE(v89.__r_.__value_.__r.__words[2]) - 1;
      int v18 = &v89;
      do
      {
        int v20 = v18->__r_.__value_.__s.__data_[0];
        int v18 = (std::string *)((char *)v18 + 1);
        int v19 = v20;
        int v22 = *(unsigned __int8 *)v16;
        int v16 = (void **)((char *)v16 + 1);
        int v21 = v22;
        BOOL v24 = v17-- != 0;
        BOOL v25 = v19 == v21;
      }
      while (v19 == v21 && v24);
    }
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_31;
  }
LABEL_100:
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (MEMORY[0x1C878F160](v90) == v12)
  {
    if (!v10) {
      goto LABEL_117;
    }
    uint64_t v47 = (*(uint64_t (**)(void *))(*((void *)a1 + 1) + 64))((void *)a1 + 1);
    (*(void (**)(void *, uint64_t))(*((void *)a1 + 1) + 16))((void *)a1 + 1, v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)"GroupChat Incoming ", 19);
    *(unsigned char *)(v47 + 17) = 0;
    long long v48 = (char *)SipMessage::header<SipConversationIdHeader>((uint64_t)a2);
    if (v48) {
      long long v49 = (long long *)(v48 + 64);
    }
    else {
      long long v49 = &ims::kEmptyString;
    }
    (*(void (**)(uint64_t, long long *))(*(void *)v47 + 32))(v47, v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)" Subject ", 9);
    *(unsigned char *)(v47 + 17) = 0;
    uint64_t v50 = (char *)SipMessage::header<SipSubjectHeader>((uint64_t)a2);
    if (v50) {
      unint64_t v51 = (long long *)(v50 + 64);
    }
    else {
      unint64_t v51 = &ims::kEmptyString;
    }
    (*(void (**)(uint64_t, long long *))(*(void *)v47 + 32))(v47, v51);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v47 + 17) = 0;
  }
  else if (!v10)
  {
LABEL_117:
    long long v54 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(void *)a2 + 112))(a2);
    uint64_t v55 = v54[23];
    if ((v55 & 0x80u) == 0) {
      uint64_t v56 = v54[23];
    }
    else {
      uint64_t v56 = *((void *)v54 + 1);
    }
    if (v56 == 6)
    {
      if ((v55 & 0x80) == 0)
      {
        if (v54[23])
        {
          long long v57 = "INVITE";
          while (*v54 == *(unsigned __int8 *)v57)
          {
            ++v54;
            ++v57;
            if (!--v55) {
              goto LABEL_136;
            }
          }
          goto LABEL_146;
        }
        goto LABEL_136;
      }
      if (!memcmp(*(const void **)v54, "INVITE", *((void *)v54 + 1)))
      {
LABEL_136:
        uint64_t v59 = *((void *)a1 + 19);
        uint64_t v61 = *(SipOfferAnswerExchange **)(v59 + 16);
        unint64_t v60 = *(std::__shared_weak_count **)(v59 + 24);
        if (v60) {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v62 = SipOfferAnswerExchange::remoteAnswerPending(v61) || SipOfferAnswerExchange::localAnswerPending(v61);
        if (v60) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v60);
        }
        long long v64 = (void *)((char *)a1 + 8);
        uint64_t v63 = *((void *)a1 + 1);
        if (v62)
        {
          uint64_t v65 = (*(uint64_t (**)(void *))(v63 + 32))((void *)a1 + 1);
          (*(void (**)(void *, uint64_t))(*v64 + 16))((void *)a1 + 1, v65);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)"received INVITE w/ no SDP while in state: ", 42);
          *(unsigned char *)(v65 + 17) = 0;
          SipOfferAnswer::debugInfo((SipOfferAnswer *)&v89);
        }
        uint64_t v66 = (*(uint64_t (**)(void *))(v63 + 64))((void *)a1 + 1);
        (*(void (**)(void *, uint64_t))(*v64 + 16))((void *)a1 + 1, v66);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), (uint64_t)"received INVITE w/ no SDP. Starting new offer/answer exchange so we can send an offer", 85);
        *(unsigned char *)(v66 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v66 + 17) = 0;
        SipOfferAnswer::startNewExchange(a1);
      }
    }
LABEL_146:
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
    goto LABEL_147;
  }
  v68[0] = v10;
  v68[1] = (uint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(std::string *__return_ptr, SipMessage *))(*(void *)a2 + 48))(&v89, a2);
  uint64_t v52 = SipMessage::header<SipCSeqHeader>((uint64_t)a2);
  if (v52) {
    int v53 = v52[15];
  }
  else {
    int v53 = 0;
  }
  xpc_object_t v58 = v90;
  long long v67 = v90;
  if (v90)
  {
    xpc_retain(v90);
  }
  else
  {
    xpc_object_t v58 = xpc_null_create();
    long long v67 = v58;
  }
  SipOfferAnswer::updateWithIncomingSdp(a4, a1, v68, &v89, a3, v53, &v67);
  xpc_release(v58);
  long long v67 = 0;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
LABEL_147:
  xpc_release(v90);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C54E93B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  xpc_release(*(xpc_object_t *)(v27 - 88));
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

double SipOfferAnswer::updateWithIncomingSdp(uint64_t a1, SipOfferAnswer *this, uint64_t *a3, std::string *a4, std::string *a5, int a6, void **a7)
{
  if (!SipOfferAnswer::satisfied(this)) {
    goto LABEL_39;
  }
  uint64_t v13 = (void *)*((void *)this + 20);
  if (v13 == (void *)((char *)this + 152))
  {
LABEL_21:
    int v22 = 0;
LABEL_35:
    uint64_t v28 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"starting new offer/answer exchange", 34);
    *(unsigned char *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v28 + 17) = 0;
    SipOfferAnswer::startNewExchange(this);
    goto LABEL_36;
  }
  char v14 = HIBYTE(a5->__r_.__value_.__r.__words[2]);
  if (v14 >= 0) {
    std::string::size_type size = (unsigned __int8 *)HIBYTE(a5->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = (unsigned __int8 *)a5->__r_.__value_.__l.__size_;
  }
  if (v14 >= 0) {
    int v16 = a5;
  }
  else {
    int v16 = (std::string *)a5->__r_.__value_.__r.__words[0];
  }
  while (1)
  {
    uint64_t v17 = v13[2];
    uint64_t v18 = *(unsigned __int8 *)(v17 + 95);
    if ((v18 & 0x80u) == 0) {
      int v19 = (unsigned __int8 *)*(unsigned __int8 *)(v17 + 95);
    }
    else {
      int v19 = *(unsigned __int8 **)(v17 + 80);
    }
    if (v19 != size) {
      goto LABEL_20;
    }
    int v20 = (const void **)(v17 + 72);
    if ((v18 & 0x80) != 0) {
      break;
    }
    if (!*(unsigned char *)(v17 + 95)) {
      goto LABEL_22;
    }
    int v21 = v16;
    while (*(unsigned __int8 *)v20 == v21->__r_.__value_.__s.__data_[0])
    {
      int v20 = (const void **)((char *)v20 + 1);
      int v21 = (std::string *)((char *)v21 + 1);
      if (!--v18) {
        goto LABEL_22;
      }
    }
LABEL_20:
    uint64_t v13 = (void *)v13[1];
    if (v13 == (void *)((char *)this + 152)) {
      goto LABEL_21;
    }
  }
  if (memcmp(*v20, v16, *(void *)(v17 + 80))) {
    goto LABEL_20;
  }
LABEL_22:
  int v22 = (std::__shared_weak_count *)v13[3];
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v17) {
    goto LABEL_35;
  }
  if (!*(void *)(v17 + 40) || (uint64_t v23 = *(uint64_t **)(v17 + 56)) == 0)
  {
    uint64_t v55 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 56))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"received SDP for previous unsatisfied exchange ", 47);
    *(unsigned char *)(v55 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v55);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v55 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v111, "InvalidSdp");
    *(_OWORD *)std::string __p = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v107.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v107.__r_.__value_.__r.__words[2]) = 1073741826;
    BambiCallTerminationResult::makeResult(a1, (long long *)&v111, &v107);
    goto LABEL_83;
  }
  if (v23 == *(uint64_t **)(v17 + 24))
  {
    BOOL v62 = *(std::__shared_weak_count **)(v17 + 32);
    if (v62) {
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v63 = *v23;
    long long v64 = (std::__shared_weak_count *)v23[1];
    if (v64) {
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
    if (v63)
    {
      uint64_t v65 = SDPOrigin::valid((SDPOrigin *)(v63 + 40)) ? *(void *)(v63 + 144) : 0;
      uint64_t v92 = *a3;
      uint64_t v93 = SDPOrigin::valid((SDPOrigin *)(*a3 + 40)) ? *(void *)(v92 + 144) : 0;
      if (v65 == v93)
      {
        uint64_t v94 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
        (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v94);
        uint64_t v95 = ImsOutStream::operator<<(v94, "ignoring duplicate SDP answer in txn ");
        ObfuscatedString::ObfuscatedString((uint64_t)&v107, a5);
        (*(void (**)(uint64_t, std::string *))(*(void *)v95 + 56))(v95, &v107);
        __int16 v96 = (unsigned char *)ImsOutStream::operator<<(v95, " with the same session version");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v96 + 64))(v96, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v96[17] = 0;
        ims::AccessNetwork::~AccessNetwork((void **)&v107.__r_.__value_.__l.__data_);
        double result = 0.0;
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
        *(void *)a1 = &unk_1F20B2680;
        *(void *)(a1 + 8) = &_bambiDomain;
        *(_DWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
        if (v64) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v64);
        }
        goto LABEL_85;
      }
    }
    if (v64) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
    }
LABEL_36:
    char v27 = 1;
    if (!v22) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  BOOL v24 = (char *)this + 8;
  uint64_t v25 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 48))((char *)this + 8);
  (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"already have offer and answer for transaction ", 46);
  *(unsigned char *)(v25 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v107, a5);
  (*(void (**)(uint64_t, std::string *))(*(void *)v25 + 56))(v25, &v107);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v25 + 17) = 0;
  if (SBYTE7(v109) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  int v26 = (unsigned char *)(*(uint64_t (**)(char *))(*(void *)v24 + 48))((char *)this + 8);
  (*(void (**)(char *, unsigned char *))(*(void *)v24 + 16))((char *)this + 8, v26);
  (*(void (**)(SipOfferAnswer *, unsigned char *))(*(void *)this + 16))(this, v26);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v26[17] = 0;
  if (*((unsigned char *)this + 144))
  {
    char v27 = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
    *(void *)a1 = &unk_1F20B2680;
    *(void *)(a1 + 8) = &_bambiDomain;
    *(_DWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
    if (!v22) {
      goto LABEL_38;
    }
LABEL_37:
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    goto LABEL_38;
  }
  std::string::basic_string[abi:ne180100]<0>(&v111, "InvalidSdp");
  *(_OWORD *)std::string __p = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  v107.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  LODWORD(v107.__r_.__value_.__r.__words[2]) = 1073741826;
  BambiCallTerminationResult::makeResult(a1, (long long *)&v111, &v107);
LABEL_83:
  ImsResult::~ImsResult((ImsResult *)&v107);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v111.__r_.__value_.__l.__data_);
  }
LABEL_85:
  char v27 = 0;
  if (v22) {
    goto LABEL_37;
  }
LABEL_38:
  if ((v27 & 1) == 0) {
    return result;
  }
LABEL_39:
  SipOfferAnswer::remote(this, &v107);
  uint64_t v30 = *(void *)v107.__r_.__value_.__l.__data_;
  xpc_object_t v29 = *(std::__shared_weak_count **)(v107.__r_.__value_.__r.__words[0] + 8);
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v107.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v107.__r_.__value_.__l.__size_);
  }
  if (v30)
  {
    if (SDPOrigin::valid((SDPOrigin *)(v30 + 40))) {
      uint64_t v31 = *(void *)(v30 + 144);
    }
    else {
      uint64_t v31 = 0;
    }
    uint64_t v32 = *a3;
    if (SDPOrigin::valid((SDPOrigin *)(*a3 + 40))) {
      uint64_t v33 = *(void *)(v32 + 144);
    }
    else {
      uint64_t v33 = 0;
    }
    long long v35 = (char *)this + 8;
    uint64_t v34 = *((void *)this + 1);
    if (v31 == v33)
    {
      uint64_t v36 = (*(uint64_t (**)(char *))(v34 + 64))((char *)this + 8);
      (*(void (**)(char *, uint64_t))(*(void *)v35 + 16))((char *)this + 8, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"ignoring duplicate SDP offer with the same session version", 58);
      *(unsigned char *)(v36 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v36 + 17) = 0;
      goto LABEL_55;
    }
    uint64_t v37 = (*(uint64_t (**)(char *))(v34 + 48))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*(void *)v35 + 16))((char *)this + 8, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"received duplicate remote offer from ", 37);
    *(unsigned char *)(v37 + 17) = 0;
    LoggableString::LoggableString(&v107, a4);
    (*(void (**)(uint64_t, std::string *))(*(void *)v37 + 40))(v37, &v107);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v37 + 17) = 0;
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v107.__r_.__value_.__l.__data_);
    }
    uint64_t v38 = (unsigned char *)(*(uint64_t (**)(char *))(*(void *)v35 + 48))((char *)this + 8);
    (*(void (**)(char *, unsigned char *))(*(void *)v35 + 16))((char *)this + 8, v38);
    (*(void (**)(SipOfferAnswer *, unsigned char *))(*(void *)this + 16))(this, v38);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v38[17] = 0;
    uint64_t v39 = (*(uint64_t (**)(char *))(*(void *)v35 + 48))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*(void *)v35 + 16))((char *)this + 8, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"ignoreDuplicateSdp == ", 22);
    *(unsigned char *)(v39 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v39 + 17) = 0;
    if (*((unsigned char *)this + 144))
    {
LABEL_55:
      double result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
      *(void *)a1 = &unk_1F20B2680;
      *(void *)(a1 + 8) = &_bambiDomain;
      *(_DWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v111, "InvalidSdp");
      *(_OWORD *)std::string __p = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      v107.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v107.__r_.__value_.__r.__words[2]) = 1073741826;
      BambiCallTerminationResult::makeResult(a1, (long long *)&v111, &v107);
      ImsResult::~ImsResult((ImsResult *)&v107);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (!v30)
  {
    SipOfferAnswer::local(this, &v107);
    uint64_t v41 = *(void *)v107.__r_.__value_.__l.__data_;
    uint64_t v40 = *(std::__shared_weak_count **)(v107.__r_.__value_.__r.__words[0] + 8);
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v107.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v107.__r_.__value_.__l.__size_);
    }
    if (v41)
    {
      uint64_t v42 = *((void *)this + 19);
      uint64_t v43 = *(void *)(v42 + 16);
      unint64_t v44 = *(std::__shared_weak_count **)(v42 + 24);
      if (v44)
      {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v45 = SipOfferAnswerExchange::validateSdpSource(v43, (unsigned __int8 *)a4, (unsigned __int8 *)a5);
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        if (v45) {
          goto LABEL_66;
        }
LABEL_90:
        uint64_t v56 = (char *)this + 8;
        uint64_t v57 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 48))((char *)this + 8);
        (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"received answer in unexpected transaction ", 42);
        *(unsigned char *)(v57 + 17) = 0;
        ObfuscatedString::ObfuscatedString((uint64_t)&v107, a5);
        (*(void (**)(uint64_t, std::string *))(*(void *)v57 + 56))(v57, &v107);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v57 + 17) = 0;
        if (SBYTE7(v109) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        xpc_object_t v58 = (unsigned char *)(*(uint64_t (**)(char *))(*(void *)v56 + 48))((char *)this + 8);
        (*(void (**)(char *, unsigned char *))(*(void *)v56 + 16))((char *)this + 8, v58);
        (*(void (**)(SipOfferAnswer *, unsigned char *))(*(void *)this + 16))(this, v58);
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        int v59 = 0;
        v58[17] = 0;
        double result = 0.0;
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
        *(void *)a1 = &unk_1F20B2680;
        *(void *)(a1 + 8) = &SipResultDomain::_domain;
        *(_DWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 491;
LABEL_168:
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        if (v59)
        {
          uint64_t v87 = (unsigned char *)(*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
          (*(void (**)(char *, unsigned char *))(*((void *)this + 1) + 16))((char *)this + 8, v87);
          (*(void (**)(SipOfferAnswer *, unsigned char *))(*(void *)this + 16))(this, v87);
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v87 + 64))(v87, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v87[17] = 0;
          uint64_t v88 = (std::__shared_weak_count *)*((void *)this + 17);
          if (v88)
          {
            std::string v89 = std::__shared_weak_count::lock(v88);
            if (v89)
            {
              xpc_object_t v90 = v89;
              uint64_t v91 = *((void *)this + 16);
              if (v91)
              {
                if (SipOfferAnswer::satisfied(this)) {
                  (*(void (**)(uint64_t))(*(void *)v91 + 32))(v91);
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v90);
            }
          }
          double result = 0.0;
          *(_OWORD *)(a1 + 24) = 0u;
          *(_OWORD *)(a1 + 40) = 0u;
          *(_OWORD *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
          *(void *)a1 = &unk_1F20B2680;
          *(void *)(a1 + 8) = &_bambiDomain;
          *(_DWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
        }
        return result;
      }
      if (!SipOfferAnswerExchange::validateSdpSource(v43, (unsigned __int8 *)a4, (unsigned __int8 *)a5)) {
        goto LABEL_90;
      }
LABEL_66:
      uint64_t v46 = (std::__shared_weak_count *)*((void *)this + 17);
      if (v46)
      {
        uint64_t v47 = std::__shared_weak_count::lock(v46);
        if (v47)
        {
          uint64_t v48 = *((void *)this + 16);
          if (v48)
          {
            *(void *)(a1 + 64) = 0;
            *(_OWORD *)(a1 + 32) = 0u;
            *(_OWORD *)(a1 + 48) = 0u;
            *(_OWORD *)a1 = 0u;
            *(_OWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0u;
            uint64_t v105 = v41;
            uint64_t v106 = v40;
            if (v40) {
              atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v49 = (std::__shared_weak_count *)a3[1];
            uint64_t v103 = *a3;
            long long v104 = v49;
            if (v49) {
              atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v50 = *a7;
            xpc_object_t v102 = v50;
            if (v50) {
              xpc_retain(v50);
            }
            else {
              xpc_object_t v102 = xpc_null_create();
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t *, xpc_object_t *))(*(void *)v48 + 24))(v48, &v105, &v103, &v102);
            xpc_release(v102);
            xpc_object_t v102 = 0;
            if (v104) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v104);
            }
            if (v106) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v106);
            }
            if ((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16)))
            {
LABEL_145:
              std::__shared_weak_count::__release_shared[abi:ne180100](v47);
              int v59 = 0;
              goto LABEL_168;
            }
            ImsResult::~ImsResult((ImsResult *)a1);
LABEL_147:
            std::__shared_weak_count::__release_shared[abi:ne180100](v47);
LABEL_148:
            uint64_t v77 = *((void *)this + 19);
            xpc_object_t v78 = *(void **)(v77 + 16);
            xpc_object_t v79 = *(std::__shared_weak_count **)(v77 + 24);
            if (v79) {
              atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v81 = *a3;
            xpc_object_t v80 = (std::__shared_weak_count *)a3[1];
            if (v80) {
              atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v82 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
            (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v82);
            uint64_t v83 = v78[3];
            if (v80) {
              atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipOfferAnswerItem::set(v83, v81, (uint64_t)v80, a4);
            if (v80) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v80);
            }
            uint64_t v85 = v78[3];
            uint64_t v84 = v78[4];
            if (v84) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v84 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v86 = (std::__shared_weak_count *)v78[8];
            v78[7] = v85;
            v78[8] = v84;
            if (v86) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v86);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v82 + 8), (uint64_t)"setting remote answer from ", 27);
            *(unsigned char *)(v82 + 17) = 0;
            LoggableString::LoggableString(&v107, a4);
            (*(void (**)(uint64_t, std::string *))(*(void *)v82 + 40))(v82, &v107);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v82 + 17) = 0;
            if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v107.__r_.__value_.__l.__data_);
            }
            if (v80) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v80);
            }
            if (v79)
            {
              uint64_t v76 = v79;
LABEL_166:
              std::__shared_weak_count::__release_shared[abi:ne180100](v76);
            }
            goto LABEL_167;
          }
        }
      }
      else
      {
        uint64_t v47 = 0;
      }
      uint64_t v61 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 56))((char *)this + 8);
      (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)"no delegate to handle incoming answer", 37);
      *(unsigned char *)(v61 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v61 + 17) = 0;
      if (v47) {
        goto LABEL_147;
      }
      goto LABEL_148;
    }
    unint64_t v51 = (std::__shared_weak_count *)*((void *)this + 17);
    if (v51)
    {
      uint64_t v47 = std::__shared_weak_count::lock(v51);
      if (v47)
      {
        uint64_t v52 = *((void *)this + 16);
        if (v52)
        {
          *(void *)(a1 + 64) = 0;
          *(_OWORD *)(a1 + 32) = 0u;
          *(_OWORD *)(a1 + 48) = 0u;
          *(_OWORD *)a1 = 0u;
          *(_OWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0u;
          int v53 = (std::__shared_weak_count *)a3[1];
          uint64_t v100 = *a3;
          long long v101 = v53;
          if (v53) {
            atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v54 = *a7;
          xpc_object_t object = v54;
          if (v54) {
            xpc_retain(v54);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          (*(void (**)(uint64_t, uint64_t *, xpc_object_t *))(*(void *)v52 + 16))(v52, &v100, &object);
          xpc_release(object);
          xpc_object_t object = 0;
          if (v101) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v101);
          }
          if ((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16)))goto LABEL_145; {
          ImsResult::~ImsResult((ImsResult *)a1);
          }
LABEL_116:
          std::__shared_weak_count::__release_shared[abi:ne180100](v47);
LABEL_117:
          uint64_t v66 = *((void *)this + 19);
          uint64_t v67 = *(void *)(v66 + 16);
          long long v68 = *(std::__shared_weak_count **)(v66 + 24);
          if (v68) {
            atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v70 = *a3;
          xpc_object_t v69 = (std::__shared_weak_count *)a3[1];
          if (v69) {
            atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v71 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
          (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v71);
          std::string::operator=((std::string *)(v67 + 72), a5);
          *(_DWORD *)(v67 + 9ims::StackConfig::~StackConfig(this + 6) = a6;
          uint64_t v72 = *(void *)(v67 + 24);
          if (v69) {
            atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          SipOfferAnswerItem::set(v72, v70, (uint64_t)v69, a4);
          if (v69) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v69);
          }
          uint64_t v74 = *(void *)(v67 + 24);
          uint64_t v73 = *(void *)(v67 + 32);
          if (v73) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
          }
          __int16 v75 = *(std::__shared_weak_count **)(v67 + 48);
          *(void *)(v67 + 40) = v74;
          *(void *)(v67 + 48) = v73;
          if (v75) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v75);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v71 + 8), (uint64_t)"setting remote offer from ", 26);
          *(unsigned char *)(v71 + 17) = 0;
          LoggableString::LoggableString(&v111, a4);
          (*(void (**)(uint64_t, std::string *))(*(void *)v71 + 40))(v71, &v111);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v71 + 8), (uint64_t)" in transaction ", 16);
          *(unsigned char *)(v71 + 17) = 0;
          ObfuscatedString::ObfuscatedString((uint64_t)&v107, a5);
          (*(void (**)(uint64_t, std::string *))(*(void *)v71 + 56))(v71, &v107);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v71 + 64))(v71, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v71 + 17) = 0;
          if (SBYTE7(v109) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v107.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v111.__r_.__value_.__l.__data_);
          }
          if (v69) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v69);
          }
          if (v68)
          {
            uint64_t v76 = v68;
            goto LABEL_166;
          }
LABEL_167:
          int v59 = 1;
          goto LABEL_168;
        }
      }
    }
    else
    {
      uint64_t v47 = 0;
    }
    uint64_t v60 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 56))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v60 + 8), (uint64_t)"no delegate to handle incoming offer", 36);
    *(unsigned char *)(v60 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v60 + 17) = 0;
    if (v47) {
      goto LABEL_116;
    }
    goto LABEL_117;
  }
  return result;
}

void sub_1C54EAC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, uint64_t a13, uint64_t a14, xpc_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

void SipOfferAnswer::updateWithIncomingResponse(SipOfferAnswer *a1@<X0>, _DWORD *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = SipMessage::body<SipSdpBody>((uint64_t)a2);
  if (v8)
  {
    uint64_t v10 = *((void *)v8 + 1);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 2);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v10)
    {
      memset(&v32, 0, sizeof(v32));
      SipOfferAnswer::remote(a1, __s1);
      uint64_t v12 = *(void *)__s1[0];
      int v11 = (std::__shared_weak_count *)*((void *)__s1[0] + 1);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (__s1[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__s1[1]);
      }
      if (v12)
      {
        *(_OWORD *)std::string __s1 = 0u;
        memset(v29, 0, 24);
        ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)__s1);
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      long long v30 = 0uLL;
      uint64_t v31 = 0;
      *(_OWORD *)std::string __s1 = 0u;
      memset(v29, 0, 24);
      ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)__s1);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v13 = (*(uint64_t (**)(void *))(*((void *)a1 + 1) + 64))((void *)a1 + 1);
  (*(void (**)(void *, uint64_t))(*((void *)a1 + 1) + 16))((void *)a1 + 1, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Remote answers no SDP", 21);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if ((a2[22] - 200) > 0xFFFFFF9B || !SipOfferAnswer::remoteAnswerPending(a1)) {
    goto LABEL_34;
  }
  uint64_t v14 = *((void *)a1 + 19);
  uint64_t v16 = *(void *)(v14 + 16);
  int v15 = *(std::__shared_weak_count **)(v14 + 24);
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v17 = a3[23];
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = a3[23];
  }
  else {
    uint64_t v18 = *((void *)a3 + 1);
  }
  uint64_t v19 = *(unsigned __int8 *)(v16 + 95);
  int v20 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *(void *)(v16 + 80);
  }
  if (v18 != v19) {
    goto LABEL_34;
  }
  uint64_t v23 = *(unsigned __int8 **)(v16 + 72);
  int v22 = (unsigned __int8 *)(v16 + 72);
  int v21 = v23;
  if (v20 >= 0) {
    BOOL v24 = v22;
  }
  else {
    BOOL v24 = v21;
  }
  if ((v17 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a3, v24, *((void *)a3 + 1))) {
      goto LABEL_38;
    }
LABEL_34:
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
    goto LABEL_35;
  }
  if (a3[23])
  {
    while (*a3 == *v24)
    {
      ++a3;
      ++v24;
      if (!--v17) {
        goto LABEL_38;
      }
    }
    goto LABEL_34;
  }
LABEL_38:
  uint64_t v26 = *((void *)a1 + 1);
  uint64_t v25 = (void *)((char *)a1 + 8);
  uint64_t v27 = (*(uint64_t (**)(void *, unsigned __int8 *))(v26 + 48))(v25, v24);
  (*(void (**)(void *, uint64_t))(*v25 + 16))(v25, v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"expected SDP answer in incoming ", 32);
  *(unsigned char *)(v27 + 17) = 0;
  (*(void (**)(std::string *__return_ptr, _DWORD *))(*(void *)a2 + 48))(&v32, a2);
  LoggableString::LoggableString((std::string *)__s1, &v32);
  (*(void (**)(uint64_t, void **))(*(void *)v27 + 40))(v27, __s1);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v27 + 17) = 0;
  if ((v29[7] & 0x80000000) != 0) {
    operator delete(__s1[0]);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v32, "MissingSdp");
  memset(&v29[8], 0, 48);
  __s1[0] = &unk_1F20B2680;
  __s1[1] = &_bambiDomain;
  *(_DWORD *)xpc_object_t v29 = 1073741826;
  BambiCallTerminationResult::makeResult(a4, (long long *)&v32, (const std::string *)__s1);
  ImsResult::~ImsResult((ImsResult *)__s1);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
LABEL_35:
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C54EBBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,xpc_object_t object)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(a1);
}

void BambiCallTerminationResult::makeResult(uint64_t a1, long long *a2, const std::string *a3)
{
  *(_OWORD *)std::string __p = 0u;
  long long v8 = 0u;
  BambiCallTerminationResult::BambiCallTerminationResult(__p, a2);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0u;
  ImsResult::ImsResult((ImsResult *)a1, a3);
  uint64_t v5 = (*((uint64_t (**)(void **))__p[0] + 4))(__p);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6 != v5)
  {
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *(void *)(a1 + 40) = v5;
  }
  __p[0] = &unk_1F20D6828;
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[1]);
  }
}

void sub_1C54EBE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  ImsResult::~ImsResult(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void SipOfferAnswer::updateWithOutgoingMessage(SipOfferAnswer *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X8>)
{
  long long v8 = SipMessage::body<SipSdpBody>(a2);
  if (!v8)
  {
    int v11 = 0;
    goto LABEL_10;
  }
  uint64_t v10 = *((void *)v8 + 1);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 2);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v10)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      int v11 = v9;
      goto LABEL_7;
    }
    int v11 = v9;
LABEL_10:
    uint64_t v14 = *((void *)a1 + 1);
    uint64_t v13 = (void *)((char *)a1 + 8);
    uint64_t v15 = (*(uint64_t (**)(void *))(v14 + 64))(v13);
    (*(void (**)(void *, uint64_t))(*v13 + 16))(v13, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"outgoing ", 9);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a2 + 48))(&v71, a2);
    LoggableString::LoggableString(&__p, &v71);
    (*(void (**)(uint64_t, std::string *))(*(void *)v15 + 40))(v15, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" message does not contain SDP", 29);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
    if (v11) {
      goto LABEL_99;
    }
    return;
  }
  int v11 = 0;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_7:
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a2 + 48))(&__str, a2);
  uint64_t v12 = SipMessage::header<SipCSeqHeader>(a2);
  if (v12) {
    int v65 = v12[15];
  }
  else {
    int v65 = 0;
  }
  if (SipOfferAnswer::satisfied(a1))
  {
    uint64_t v16 = *((void *)a1 + 19);
    uint64_t v18 = *(void *)(v16 + 16);
    uint64_t v17 = *(std::__shared_weak_count **)(v16 + 24);
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    uint64_t v19 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v19 & 0x80u) == 0) {
      std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = a3->__r_.__value_.__l.__size_;
    }
    uint64_t v21 = *(unsigned __int8 *)(v18 + 95);
    int v22 = (char)v21;
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = *(void *)(v18 + 80);
    }
    if (size == v21)
    {
      uint64_t v25 = *(unsigned __int8 **)(v18 + 72);
      BOOL v24 = (unsigned __int8 *)(v18 + 72);
      uint64_t v23 = v25;
      if (v22 >= 0) {
        uint64_t v26 = v24;
      }
      else {
        uint64_t v26 = v23;
      }
      if ((v19 & 0x80) == 0)
      {
        if (*((unsigned char *)&a3->__r_.__value_.__s + 23))
        {
          uint64_t v27 = a3;
          while (v27->__r_.__value_.__s.__data_[0] == *v26)
          {
            uint64_t v27 = (std::string *)((char *)v27 + 1);
            ++v26;
            if (!--v19) {
              goto LABEL_57;
            }
          }
          goto LABEL_36;
        }
LABEL_57:
        uint64_t v42 = (void *)((char *)a1 + 8);
        uint64_t v43 = (*(uint64_t (**)(void *, unsigned __int8 *))(*((void *)a1 + 1) + 56))((void *)a1 + 1, v26);
        (*(void (**)(void *, uint64_t))(*((void *)a1 + 1) + 16))((void *)a1 + 1, v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"already have offer and answer for transaction ", 46);
        *(unsigned char *)(v43 + 17) = 0;
        ObfuscatedString::ObfuscatedString((uint64_t)&__p, a3);
        (*(void (**)(uint64_t, std::string *))(*(void *)v43 + 56))(v43, &__p);
        if (v70 < 0) {
          operator delete(v69);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        unint64_t v44 = (unsigned char *)(*(uint64_t (**)(void *))(*v42 + 56))((void *)a1 + 1);
        (*(void (**)(void *, unsigned char *))(*v42 + 16))((void *)a1 + 1, v44);
        (*(void (**)(SipOfferAnswer *, unsigned char *))(*(void *)a1 + 16))(a1, v44);
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v44[17] = 0;
        int v45 = 1073741826;
LABEL_94:
        *(_OWORD *)(a4 + 24) = 0u;
        *(_OWORD *)(a4 + 40) = 0u;
        *(_OWORD *)(a4 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
        *(void *)a4 = &unk_1F20B2680;
        *(void *)(a4 + 8) = &_bambiDomain;
        *(_DWORD *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = v45;
        goto LABEL_95;
      }
      if (!memcmp(a3->__r_.__value_.__l.__data_, v26, a3->__r_.__value_.__l.__size_)) {
        goto LABEL_57;
      }
    }
LABEL_36:
    uint64_t v28 = (*(uint64_t (**)(void *))(*((void *)a1 + 1) + 64))((void *)a1 + 1);
    (*(void (**)(void *, uint64_t))(*((void *)a1 + 1) + 16))((void *)a1 + 1, v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"starting new offer/answer", 25);
    *(unsigned char *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v28 + 17) = 0;
    SipOfferAnswer::startNewExchange(a1);
  }
  SipOfferAnswer::local(a1, &__p);
  uint64_t v30 = *(void *)__p.__r_.__value_.__l.__data_;
  xpc_object_t v29 = *(std::__shared_weak_count **)(__p.__r_.__value_.__r.__words[0] + 8);
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  if (v30)
  {
    uint64_t v31 = (void *)((char *)a1 + 8);
    uint64_t v32 = (*(uint64_t (**)(void *))(*((void *)a1 + 1) + 56))((void *)a1 + 1);
    (*(void (**)(void *, uint64_t))(*((void *)a1 + 1) + 16))((void *)a1 + 1, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"received duplicate local offer from ", 36);
    *(unsigned char *)(v32 + 17) = 0;
    LoggableString::LoggableString(&__p, &__str);
    (*(void (**)(uint64_t, std::string *))(*(void *)v32 + 40))(v32, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v32 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v33 = (unsigned char *)(*(uint64_t (**)(void *))(*v31 + 56))((void *)a1 + 1);
    (*(void (**)(void *, unsigned char *))(*v31 + 16))((void *)a1 + 1, v33);
    (*(void (**)(SipOfferAnswer *, unsigned char *))(*(void *)a1 + 16))(a1, v33);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v33[17] = 0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = 1073741826;
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (!v30)
  {
    SipOfferAnswer::remote(a1, &__p);
    uint64_t v35 = *(void *)__p.__r_.__value_.__l.__data_;
    uint64_t v34 = *(std::__shared_weak_count **)(__p.__r_.__value_.__r.__words[0] + 8);
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    uint64_t v36 = *((void *)a1 + 19);
    uint64_t v38 = *(void *)(v36 + 16);
    uint64_t v37 = *(std::__shared_weak_count **)(v36 + 24);
    uint64_t v66 = v11;
    if (!v35)
    {
      if (v37) {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v9) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v46 = (*(uint64_t (**)(void *))(*((void *)a1 + 1) + 64))((void *)a1 + 1);
      (*(void (**)(void *, uint64_t))(*((void *)a1 + 1) + 16))((void *)a1 + 1, v46);
      std::string::operator=((std::string *)(v38 + 72), a3);
      *(_DWORD *)(v38 + 9ims::StackConfig::~StackConfig(this + 6) = v65;
      uint64_t v47 = *(void *)(v38 + 8);
      if (v9) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SipOfferAnswerItem::set(v47, v10, (uint64_t)v11, &__str);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      uint64_t v49 = *(void *)(v38 + 8);
      uint64_t v48 = *(void *)(v38 + 16);
      if (v48) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v50 = *(std::__shared_weak_count **)(v38 + 48);
      *(void *)(v38 + 40) = v49;
      *(void *)(v38 + 48) = v48;
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)"setting local offer from ", 25);
      *(unsigned char *)(v46 + 17) = 0;
      LoggableString::LoggableString(&v71, &__str);
      (*(void (**)(uint64_t, std::string *))(*(void *)v46 + 40))(v46, &v71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)" in transaction ", 16);
      *(unsigned char *)(v46 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)&__p, a3);
      (*(void (**)(uint64_t, std::string *))(*(void *)v46 + 56))(v46, &__p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v46 + 17) = 0;
      if (v70 < 0) {
        operator delete(v69);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      if (!v37)
      {
LABEL_84:
        int v51 = 1;
        if (!v34)
        {
LABEL_86:
          int v11 = v66;
          if (!v51) {
            goto LABEL_95;
          }
          uint64_t v52 = (unsigned char *)(*(uint64_t (**)(void *))(*((void *)a1 + 1) + 64))((void *)a1 + 1);
          (*(void (**)(void *, unsigned char *))(*((void *)a1 + 1) + 16))((void *)a1 + 1, v52);
          (*(void (**)(SipOfferAnswer *, unsigned char *))(*(void *)a1 + 16))(a1, v52);
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v52[17] = 0;
          int v53 = (std::__shared_weak_count *)*((void *)a1 + 17);
          if (v53)
          {
            long long v54 = std::__shared_weak_count::lock(v53);
            if (v54)
            {
              uint64_t v55 = v54;
              uint64_t v56 = *((void *)a1 + 16);
              if (v56 && SipOfferAnswer::satisfied(a1)) {
                (*(void (**)(uint64_t))(*(void *)v56 + 32))(v56);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v55);
            }
          }
          int v45 = 0;
          goto LABEL_94;
        }
LABEL_85:
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        goto LABEL_86;
      }
LABEL_83:
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      goto LABEL_84;
    }
    if (v37)
    {
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v39 = SipOfferAnswerExchange::validateSdpSource(v38, (unsigned __int8 *)&__str, (unsigned __int8 *)a3);
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      if (v39)
      {
        uint64_t v40 = *((void *)a1 + 19);
        uint64_t v38 = *(void *)(v40 + 16);
        uint64_t v37 = *(std::__shared_weak_count **)(v40 + 24);
        if (v37)
        {
          char v41 = 0;
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_104;
        }
LABEL_103:
        char v41 = 1;
LABEL_104:
        if (v9) {
          atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v57 = (*(uint64_t (**)(void *))(*((void *)a1 + 1) + 64))((void *)a1 + 1);
        (*(void (**)(void *, uint64_t))(*((void *)a1 + 1) + 16))((void *)a1 + 1, v57);
        uint64_t v58 = *(void *)(v38 + 8);
        if (v9) {
          atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipOfferAnswerItem::set(v58, v10, (uint64_t)v66, &__str);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v66);
        }
        uint64_t v60 = *(void *)(v38 + 8);
        uint64_t v59 = *(void *)(v38 + 16);
        if (v59) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v59 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v61 = *(std::__shared_weak_count **)(v38 + 64);
        *(void *)(v38 + 5ims::StackConfig::~StackConfig(this + 6) = v60;
        *(void *)(v38 + 64) = v59;
        if (v61) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"setting local answer from ", 26);
        *(unsigned char *)(v57 + 17) = 0;
        LoggableString::LoggableString(&__p, &__str);
        (*(void (**)(uint64_t, std::string *))(*(void *)v57 + 40))(v57, &__p);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v57 + 17) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v66);
        }
        if (v41) {
          goto LABEL_84;
        }
        goto LABEL_83;
      }
    }
    else if (SipOfferAnswerExchange::validateSdpSource(v38, (unsigned __int8 *)&__str, (unsigned __int8 *)a3))
    {
      uint64_t v37 = 0;
      goto LABEL_103;
    }
    BOOL v62 = (void *)((char *)a1 + 8);
    uint64_t v63 = (*(uint64_t (**)(void *))(*((void *)a1 + 1) + 56))((void *)a1 + 1);
    (*(void (**)(void *, uint64_t))(*((void *)a1 + 1) + 16))((void *)a1 + 1, v63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v63 + 8), (uint64_t)"unexpected transaction for local answer: ", 41);
    *(unsigned char *)(v63 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&__p, a3);
    (*(void (**)(uint64_t, std::string *))(*(void *)v63 + 56))(v63, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v63 + 17) = 0;
    if (v70 < 0) {
      operator delete(v69);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    long long v64 = (unsigned char *)(*(uint64_t (**)(void *))(*v62 + 56))((void *)a1 + 1);
    (*(void (**)(void *, unsigned char *))(*v62 + 16))((void *)a1 + 1, v64);
    (*(void (**)(SipOfferAnswer *, unsigned char *))(*(void *)a1 + 16))(a1, v64);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    int v51 = 0;
    v64[17] = 0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = 1073741826;
    if (!v34) {
      goto LABEL_86;
    }
    goto LABEL_85;
  }
LABEL_95:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_99:
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C54ECDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  if (a16 < 0) {
    operator delete(__p);
  }
  if ((a9 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t SipOfferAnswer::log(SipOfferAnswer *this, ImsOutStream *a2)
{
  uint64_t v2 = *((void *)this + 19);
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, ImsOutStream *))(*(void *)v3 + 16))(v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v5;
}

void sub_1C54ED038(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipOfferAnswerExchange::~SipOfferAnswerExchange(void **this)
{
  *this = &unk_1F20D6650;
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[8];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[6];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[4];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[2];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *this = &unk_1F20D6650;
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[8];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[6];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[4];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[2];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  JUMPOUT(0x1C878E320);
}

void SipOfferAnswerExchange::loggableName(LoggableString *a1@<X8>)
{
}

void SipOfferAnswer::loggableName(LoggableString *a1@<X8>)
{
}

void BambiCallTerminationResult::~BambiCallTerminationResult(void **this)
{
  *this = &unk_1F20D6828;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20D6828;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void *BambiCallTerminationResult::BambiCallTerminationResult(void *a1, long long *a2)
{
  *a1 = &unk_1F20D6828;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void BambiCallTerminationResult::clone(BambiCallTerminationResult *this)
{
}

void sub_1C54ED300(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

void BambiCallTerminationResult::resultDescription(BambiCallTerminationResult *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

void std::__shared_ptr_emplace<SipOfferAnswerItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D6788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipOfferAnswerItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D6788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<SipOfferAnswerItem>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::__shared_ptr_emplace<SipOfferAnswerExchange>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D67D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipOfferAnswerExchange>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D67D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipOfferAnswerExchange>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t SDPPrecondition::parse(unsigned int *a1, std::string *a2)
{
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v30, " ");
  unint64_t v4 = ims::tokenize(a2, (uint64_t *)&v31, (char *)&v30);
  unint64_t v5 = v4;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v30.__r_.__value_.__l.__data_);
    if (v5)
    {
LABEL_3:
      memset(&v30, 0, sizeof(v30));
      if (*((char *)v31 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v31, *((void *)v31 + 1));
      }
      else
      {
        long long v6 = *v31;
        v30.__r_.__value_.__r.__words[2] = *((void *)v31 + 2);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v6;
      }
      std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v30.__r_.__value_.__l.__size_;
      }
      if (size != 3) {
        goto LABEL_21;
      }
      uint64_t v10 = &v30;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v10 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      int data_low = LOWORD(v10->__r_.__value_.__l.__data_);
      int v12 = v10->__r_.__value_.__s.__data_[2];
      if (data_low == 28529 && v12 == 115)
      {
        int v15 = 1;
      }
      else
      {
LABEL_21:
        std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parse");
        std::string::basic_string[abi:ne180100]<0>(&v28, "");
        uint64_t v14 = ims::warn((uint64_t)&__p, (uint64_t)&v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Precondition has unsupported type: ", 35);
        *(unsigned char *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 32))(v14, &v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" for status: ", 13);
        *(unsigned char *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 32))(v14, &v27);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v14 + 17) = 0;
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        int v15 = 0;
      }
      a1[1] = v15;
      int v16 = *a1;
      if (*a1 != 2)
      {
        if (v16 == 1)
        {
          uint64_t v18 = (uint64_t)v31;
          if (v32 - (void)v31 == 96)
          {
            memset(&__p, 0, sizeof(__p));
            if (*((char *)v31 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v31 + 3), *((void *)v31 + 4));
              uint64_t v18 = (uint64_t)v31;
            }
            else
            {
              std::string __p = *(std::string *)((unsigned char *)v31 + 1);
            }
            memset(&v28, 0, sizeof(v28));
            if (*(char *)(v18 + 71) < 0)
            {
              std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v18 + 48), *(void *)(v18 + 56));
              uint64_t v18 = (uint64_t)v31;
            }
            else
            {
              std::string v28 = *(std::string *)(v18 + 48);
            }
            memset(&v27, 0, sizeof(v27));
            if (*(char *)(v18 + 95) < 0) {
              std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(v18 + 72), *(void *)(v18 + 80));
            }
            else {
              std::string v27 = *(std::string *)(v18 + 72);
            }
            {
              uint64_t v8 = 0;
            }
            else
            {
              uint64_t v8 = 1;
            }
            if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v27.__r_.__value_.__l.__data_);
            }
            goto LABEL_69;
          }
          goto LABEL_40;
        }
        if (v16)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parse");
          std::string::basic_string[abi:ne180100]<0>(&v28, "");
          uint64_t v19 = ims::error((uint64_t)&__p, (uint64_t)&v28);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Precondition has invalid status: ", 33);
          *(unsigned char *)(v19 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v19 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v19 + 17) = 0;
LABEL_42:
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v28.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v8 = 0;
          goto LABEL_73;
        }
      }
      uint64_t v17 = (uint64_t)v31;
      if (v32 - (void)v31 == 72)
      {
        memset(&__p, 0, sizeof(__p));
        if (*((char *)v31 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v31 + 3), *((void *)v31 + 4));
          uint64_t v17 = (uint64_t)v31;
        }
        else
        {
          std::string __p = *(std::string *)((unsigned char *)v31 + 1);
        }
        memset(&v28, 0, sizeof(v28));
        if (*(char *)(v17 + 71) < 0) {
          std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v17 + 48), *(void *)(v17 + 56));
        }
        else {
          std::string v28 = *(std::string *)(v17 + 48);
        }
        {
          uint64_t v8 = 0;
        }
        else
        {
          uint64_t v8 = 1;
        }
        a1[2] = 0;
LABEL_69:
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
LABEL_73:
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
        goto LABEL_75;
      }
LABEL_40:
      std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parse");
      std::string::basic_string[abi:ne180100]<0>(&v28, "");
      uint64_t v20 = ims::error((uint64_t)&__p, (uint64_t)&v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Precondition has invalid number of tokens: ", 43);
      *(unsigned char *)(v20 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" for status: ", 13);
      *(unsigned char *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v20 + 32))(v20, &v27);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v20 + 17) = 0;
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      goto LABEL_42;
    }
  }
  else if (v4)
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(&v30, "sdp.parse");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v7 = ims::error((uint64_t)&v30, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Precondition has no tokens", 26);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = 0;
LABEL_75:
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  return v8;
}

void sub_1C54EDCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  *(void *)(v28 - 80) = v28 - 56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 80));
  _Unwind_Resume(a1);
}

uint64_t operator<<(uint64_t a1, unsigned int *a2)
{
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 32))(a1, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)":", 1);
  *(unsigned char *)(a1 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)"qos", 3);
  *(unsigned char *)(a1 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)" ", 1);
  *(unsigned char *)(a1 + 17) = 0;
  int v4 = *a2;
  if (*a2 == 2) {
    goto LABEL_6;
  }
  if (v4 == 1)
  {
    (*(void (**)(uint64_t, void **))(*(void *)a1 + 32))(a1, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)" ", 1);
    *(unsigned char *)(a1 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)a1 + 32))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)" ", 1);
    *(unsigned char *)(a1 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)a1 + 32))(a1, v7);
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  else
  {
    if (!v4)
    {
LABEL_6:
      (*(void (**)(uint64_t, void **))(*(void *)a1 + 32))(a1, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)" ", 1);
      *(unsigned char *)(a1 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(void *)a1 + 32))(a1, v9);
      goto LABEL_10;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "sdp");
    std::string::basic_string[abi:ne180100]<0>(v9, "");
    uint64_t v5 = ims::error((uint64_t)__p, (uint64_t)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Precondition has invalid status: ", 33);
    *(unsigned char *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
  }
LABEL_10:
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

{
  std::string __p;

  LoggableString::LoggableString(&__p, (const std::string *)&registrationModeNames[24 * *a2]);
  (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 40))(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54EE12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void SDPPreconditionTable::SDPPreconditionTable(SDPPreconditionTable *this, int a2)
{
  *(void *)this = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v3 = (char **)((char *)this + 16);
  if (a2)
  {
    int v4 = (char *)operator new(0x14uLL);
    *(_DWORD *)int v4 = 0;
    *(_OWORD *)(v4 + 4) = xmmword_1C56D7120;
    *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v4 + 20;
    *((void *)this + 2) = v4 + 20;
    *(void *)this = v4;
    uint64_t v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPPreconditionRow>>((uint64_t)v3, 2uLL);
    *((_DWORD *)v5 + 5) = 0;
    long long v6 = v5 + 20;
    char v8 = &v5[20 * v7];
    *(_OWORD *)(v5 + 24) = xmmword_1C56D7130;
    uint64_t v9 = v5 + 40;
    int v11 = *(char **)this;
    char v10 = (char *)*((void *)this + 1);
    if (v10 != *(char **)this)
    {
      do
      {
        long long v12 = *(_OWORD *)(v10 - 20);
        *((_DWORD *)v6 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *((_DWORD *)v10 - 1);
        *(_OWORD *)(v6 - 20) = v12;
        v6 -= 20;
        v10 -= 20;
      }
      while (v10 != v11);
      char v10 = *(char **)this;
    }
    *(void *)this = v6;
    *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v9;
    *((void *)this + 2) = v8;
    if (v10)
    {
      operator delete(v10);
      char v8 = *v3;
    }
    *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v9;
    if (v9 >= v8)
    {
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v9[-*(void *)this] >> 2);
      if (v23 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        goto LABEL_43;
      }
      unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v8[-*(void *)this] >> 2);
      uint64_t v25 = 2 * v24;
      if (2 * v24 <= v23 + 1) {
        uint64_t v25 = v23 + 1;
      }
      if (v24 >= 0x666666666666666) {
        unint64_t v26 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v26) {
        std::string v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPPreconditionRow>>((uint64_t)v3, v26);
      }
      else {
        std::string v27 = 0;
      }
      uint64_t v28 = &v27[20 * v23];
      xpc_object_t v29 = &v27[20 * v26];
      *(_DWORD *)uint64_t v28 = 0;
      *(_OWORD *)(v28 + 4) = xmmword_1C56D7140;
      uint64_t v13 = v28 + 20;
      uint64_t v31 = *(char **)this;
      std::string v30 = (char *)*((void *)this + 1);
      if (v30 != *(char **)this)
      {
        do
        {
          long long v32 = *(_OWORD *)(v30 - 20);
          *((_DWORD *)v28 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *((_DWORD *)v30 - 1);
          *(_OWORD *)(v28 - 20) = v32;
          v28 -= 20;
          v30 -= 20;
        }
        while (v30 != v31);
        std::string v30 = *(char **)this;
      }
      *(void *)this = v28;
      *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v13;
      *((void *)this + 2) = v29;
      if (v30) {
        operator delete(v30);
      }
    }
    else
    {
      *((_DWORD *)v5 + 10) = 0;
      *(_OWORD *)(v5 + 44) = xmmword_1C56D7140;
      uint64_t v13 = v5 + 60;
    }
    *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v13;
    unint64_t v33 = *((void *)this + 2);
    if ((unint64_t)v13 < v33)
    {
      *(_DWORD *)uint64_t v13 = 0;
      *(_OWORD *)(v13 + 4) = xmmword_1C56D7150;
      uint64_t v19 = v13 + 20;
      goto LABEL_42;
    }
    unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v13[-*(void *)this] >> 2);
    if (v34 + 1 <= 0xCCCCCCCCCCCCCCCLL)
    {
      unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - *(void *)this) >> 2);
      uint64_t v36 = 2 * v35;
      if (2 * v35 <= v34 + 1) {
        uint64_t v36 = v34 + 1;
      }
      if (v35 >= 0x666666666666666) {
        unint64_t v37 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37) {
        uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPPreconditionRow>>((uint64_t)v3, v37);
      }
      else {
        uint64_t v38 = 0;
      }
      int v16 = &v38[20 * v34];
      uint64_t v18 = &v38[20 * v37];
      *(_DWORD *)int v16 = 0;
      *(_OWORD *)(v16 + 4) = xmmword_1C56D7150;
      uint64_t v19 = v16 + 20;
      BOOL v39 = *(char **)this;
      uint64_t v20 = (char *)*((void *)this + 1);
      if (v20 == *(char **)this) {
        goto LABEL_40;
      }
      do
      {
        long long v40 = *(_OWORD *)(v20 - 20);
        *((_DWORD *)v16 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *((_DWORD *)v20 - 1);
        *(_OWORD *)(v16 - 20) = v40;
        v16 -= 20;
        v20 -= 20;
      }
      while (v20 != v39);
      goto LABEL_39;
    }
LABEL_43:
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v14 = (char *)operator new(0x14uLL);
  *(_DWORD *)uint64_t v14 = 0;
  *(_OWORD *)(v14 + 4) = xmmword_1C56D7100;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v14 + 20;
  *((void *)this + 2) = v14 + 20;
  *(void *)this = v14;
  int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPPreconditionRow>>((uint64_t)v3, 2uLL);
  *((_DWORD *)v15 + 5) = 0;
  int v16 = v15 + 20;
  uint64_t v18 = &v15[20 * v17];
  *(_OWORD *)(v15 + 24) = xmmword_1C56D7110;
  uint64_t v19 = v15 + 40;
  uint64_t v21 = *(char **)this;
  uint64_t v20 = (char *)*((void *)this + 1);
  if (v20 == *(char **)this) {
    goto LABEL_40;
  }
  do
  {
    long long v22 = *(_OWORD *)(v20 - 20);
    *((_DWORD *)v16 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *((_DWORD *)v20 - 1);
    *(_OWORD *)(v16 - 20) = v22;
    v16 -= 20;
    v20 -= 20;
  }
  while (v20 != v21);
LABEL_39:
  uint64_t v20 = *(char **)this;
LABEL_40:
  *(void *)this = v16;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v19;
  *((void *)this + 2) = v18;
  if (v20) {
    operator delete(v20);
  }
LABEL_42:
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v19;
}

void sub_1C54EE4E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void SDPPreconditionTable::SDPPreconditionTable(SDPPreconditionTable *this, const SDPPreconditionTable *a2)
{
  *(void *)this = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 2) = 0;
  if (this != a2) {
    std::vector<SDPPreconditionRow>::__assign_with_size[abi:ne180100]<SDPPreconditionRow*,SDPPreconditionRow*>((char *)this, *(char **)a2, *((void *)a2 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 2));
  }
}

void sub_1C54EE55C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPPreconditionTable::rowsAreSatisfied(void *a1, int a2)
{
  uint64_t v3 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 != v3)
  {
    int v4 = (_DWORD *)(*a1 + 16);
    char v5 = 1;
    while (1)
    {
      long long v6 = v4 - 4;
      if (*(v4 - 2) == a2)
      {
        if (*v4 == 3)
        {
          if (!*(v4 - 3))
          {
            char v5 = 0;
            return v5 & 1;
          }
          v5 &= *((unsigned char *)v4 - 16);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v16, "sdp.precon");
          std::string::basic_string[abi:ne180100]<0>(v14, "");
          uint64_t v7 = ims::debug((uint64_t)v16, (uint64_t)v14);
          (*(void (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, __p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" row is not mandatory", 21);
          *(unsigned char *)(v7 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v7 + 17) = 0;
          if (v13 < 0) {
            operator delete(__p[0]);
          }
          if (v15 < 0) {
            operator delete(v14[0]);
          }
          if (v17 < 0) {
            operator delete(v16[0]);
          }
        }
      }
      v4 += 5;
      if (v6 + 5 == v3) {
        goto LABEL_16;
      }
    }
  }
  char v5 = 1;
LABEL_16:
  std::string::basic_string[abi:ne180100]<0>(v16, "sdp.precon");
  std::string::basic_string[abi:ne180100]<0>(v14, "");
  uint64_t v8 = ims::debug((uint64_t)v16, (uint64_t)v14);
  (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" rows of precondition table are ", 32);
  *(unsigned char *)(v8 + 17) = 0;
  if (v5) {
    uint64_t v9 = "";
  }
  else {
    uint64_t v9 = "not ";
  }
  if (v5) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 4;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)v9, v10);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"satisfied", 9);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  return v5 & 1;
}

void sub_1C54EE854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPPreconditionTable::processPrecondition(void **a1, int *a2)
{
  int v4 = *a2;
  int v3 = a2[1];
  int v5 = a2[2];
  int v6 = a2[3];
  int v7 = a2[4];
  uint64_t v8 = (char *)*a1;
  uint64_t v9 = (char *)a1[1];
  if (*a1 == v9)
  {
    char v10 = 0;
  }
  else
  {
    char v10 = 0;
    do
    {
      if (*((_DWORD *)v8 + 1) == v3)
      {
        BOOL v11 = *((_DWORD *)v8 + 3) == v7 || v7 == 3;
        if (v11 && *((_DWORD *)v8 + 2) == v6)
        {
          if (v4)
          {
            if (v4 == 2)
            {
              v8[1] = 1;
            }
            else if (v4 == 1)
            {
              if (*((_DWORD *)v8 + 4) < v5)
              {
                *((_DWORD *)v8 + 4) = v5;
                char v10 = 1;
              }
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v31, "sdp.precon");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v13 = ims::warn((uint64_t)v31, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Received an unknown precondition type, not sure what to do", 58);
              *(unsigned char *)(v13 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v13 + 17) = 0;
              if (v30 < 0) {
                operator delete(__p[0]);
              }
              if (v32 < 0) {
                operator delete(v31[0]);
              }
            }
          }
          else
          {
            char v10 = 1;
            *uint64_t v8 = 1;
          }
        }
      }
      v8 += 20;
    }
    while (v8 != v9);
  }
  if ((v10 & 1) == 0 && !v3 && v4 == 1)
  {
    char v15 = (char *)a1[2];
    int v16 = (char *)a1[1];
    if (v16 >= v15)
    {
      unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (unsigned char *)*a1) >> 2);
      unint64_t v19 = v18 + 1;
      if (v18 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((v15 - (unsigned char *)*a1) >> 2);
      if (2 * v20 > v19) {
        unint64_t v19 = 2 * v20;
      }
      if (v20 >= 0x666666666666666) {
        unint64_t v21 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21) {
        long long v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPPreconditionRow>>((uint64_t)(a1 + 2), v21);
      }
      else {
        long long v22 = 0;
      }
      unint64_t v23 = &v22[20 * v18];
      unint64_t v24 = &v22[20 * v21];
      *(void *)unint64_t v23 = 0;
      *((_DWORD *)v23 + 2) = v6;
      *((_DWORD *)v23 + IMSCallOptions::~IMSCallOptions(this + 3) = v7;
      *((_DWORD *)v23 + 4) = v5;
      char v17 = v23 + 20;
      unint64_t v26 = (char *)*a1;
      uint64_t v25 = (char *)a1[1];
      if (v25 != *a1)
      {
        do
        {
          long long v27 = *(_OWORD *)(v25 - 20);
          *((_DWORD *)v23 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *((_DWORD *)v25 - 1);
          *(_OWORD *)(v23 - 20) = v27;
          v23 -= 20;
          v25 -= 20;
        }
        while (v25 != v26);
        uint64_t v25 = (char *)*a1;
      }
      *a1 = v23;
      a1[1] = v17;
      a1[2] = v24;
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *(void *)int v16 = 0;
      *((_DWORD *)v16 + 2) = v6;
      *((_DWORD *)v16 + IMSCallOptions::~IMSCallOptions(this + 3) = v7;
      char v17 = v16 + 20;
      *((_DWORD *)v16 + 4) = v5;
    }
    a1[1] = v17;
    char v10 = 1;
  }
  return v10 & 1;
}

void sub_1C54EEB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operator<<(uint64_t a1, unsigned __int8 **this)
{
  char v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  SDPPreconditionTable::getPreconditions(this, &v10);
  for (uint64_t i = v11; (unsigned __int8 **)i != &v10; uint64_t i = *(void *)(i + 8))
  {
    char v9 = 0;
    __int16 v8 = 0;
    *(_OWORD *)int v7 = *(_OWORD *)(i + 16);
    *(void *)&v7[13] = *(void *)(i + 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)"\r\n", 2);
    *(unsigned char *)(a1 + 17) = 0;
    int v4 = *(void **)(a1 + 8);
    char v13 = 97;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v13, 1);
    *(unsigned char *)(a1 + 17) = 0;
    int v5 = *(void **)(a1 + 8);
    char v13 = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v13, 1);
    *(unsigned char *)(a1 + 17) = 0;
    operator<<(a1, (unsigned int *)v7);
  }
  std::__list_imp<unsigned long long>::clear(&v10);
  return a1;
}

void sub_1C54EEC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__list_imp<unsigned long long>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 **SDPPreconditionTable::getPreconditions@<X0>(unsigned __int8 **this@<X0>, unsigned __int8 **a2@<X8>)
{
  *a2 = (unsigned __int8 *)a2;
  a2[1] = (unsigned __int8 *)a2;
  a2[2] = 0;
  int v3 = *this;
  unint64_t v19 = this[1];
  if (*this != v19)
  {
    unint64_t v20 = 0;
    int v4 = (unsigned __int8 *)a2;
    do
    {
      int v5 = *((_DWORD *)v3 + 4);
      if (v5 >= 1)
      {
        int v6 = *v3;
        unsigned __int8 v18 = v3[1];
        int v7 = *((_DWORD *)v3 + 1);
        int v8 = *((_DWORD *)v3 + 2);
        int v9 = *((_DWORD *)v3 + 3);
        BOOL v10 = v7 != 0;
        this = (unsigned __int8 **)operator new(0x28uLL);
        uint64_t v11 = (unsigned __int8 *)this;
        *((_DWORD *)this + 4) = 1;
        *((_DWORD *)this + 5) = v7;
        *((_DWORD *)this + ims::StackConfig::~StackConfig(this + 6) = v5;
        *((_DWORD *)this + 7) = v8;
        *((_DWORD *)this + 8) = v9;
        *((unsigned char *)this + 3ims::StackConfig::~StackConfig(this + 6) = v7 != 0;
        *this = v4;
        this[1] = (unsigned __int8 *)a2;
        *((void *)v4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = this;
        *a2 = (unsigned __int8 *)this;
        a2[2] = v20 + 1;
        if (v5 == 4)
        {
          ++v20;
          int v4 = (unsigned __int8 *)this;
        }
        else
        {
          this = (unsigned __int8 **)operator new(0x28uLL);
          int v4 = (unsigned __int8 *)this;
          *((_DWORD *)this + 4) = 0;
          *((_DWORD *)this + 5) = v7;
          *((_DWORD *)this + ims::StackConfig::~StackConfig(this + 6) = 0;
          *((_DWORD *)this + 7) = v8;
          *((_DWORD *)this + 8) = (v6 << 31 >> 31) & v9;
          *((unsigned char *)this + 3ims::StackConfig::~StackConfig(this + 6) = v10;
          *this = v11;
          this[1] = (unsigned __int8 *)a2;
          *((void *)v11 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = this;
          *a2 = (unsigned __int8 *)this;
          a2[2] = v20 + 2;
          if (v18)
          {
            this = (unsigned __int8 **)operator new(0x28uLL);
            *((_DWORD *)this + 4) = 2;
            *((_DWORD *)this + 5) = v7;
            *((_DWORD *)this + ims::StackConfig::~StackConfig(this + 6) = v5;
            *((_DWORD *)this + 7) = v8;
            *((_DWORD *)this + 8) = v9;
            *((unsigned char *)this + 3ims::StackConfig::~StackConfig(this + 6) = v10;
            *this = v4;
            this[1] = (unsigned __int8 *)a2;
            *((void *)v4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = this;
            *a2 = (unsigned __int8 *)this;
            int v4 = (unsigned __int8 *)this;
            v20 += 3;
            a2[2] = v20;
          }
          else
          {
            v20 += 2;
          }
        }
      }
      v3 += 20;
    }
    while (v3 != v19);
    uint64_t v12 = a2[1];
    if (v12 != (unsigned __int8 *)a2)
    {
LABEL_11:
      this = (unsigned __int8 **)*((void *)v12 + 1);
      if (this == a2) {
        return this;
      }
      while (*((_DWORD *)v12 + 4) == *((_DWORD *)this + 4)
           && *((_DWORD *)v12 + 5) == *((_DWORD *)this + 5)
           && *((_DWORD *)v12 + 6) == *((_DWORD *)this + 6)
           && *((_DWORD *)v12 + 7) == *((_DWORD *)this + 7))
      {
        unsigned int v13 = *((_DWORD *)v12 + 8);
        if (v13 != *((_DWORD *)this + 8))
        {
          if (v13 > 3) {
            int v16 = 0;
          }
          else {
            int v16 = dword_1C56D7160[v13];
          }
          int v17 = *((_DWORD *)this + 8);
          if (v16 == v17)
          {
            *((_DWORD *)v12 + 8) = 3;
          }
          else
          {
            if (v13)
            {
              if (v17) {
                break;
              }
            }
            else
            {
              unsigned int v13 = *((_DWORD *)this + 8);
            }
            *((_DWORD *)v12 + 8) = v13;
          }
        }
        uint64_t v14 = *this;
        char v15 = this[1];
        *((void *)v14 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v15;
        *(void *)this[1] = v14;
        --a2[2];
        operator delete(this);
        this = (unsigned __int8 **)v15;
LABEL_29:
        if (this == a2)
        {
          uint64_t v12 = (unsigned __int8 *)*((void *)v12 + 1);
          if (v12 == (unsigned __int8 *)a2) {
            return this;
          }
          goto LABEL_11;
        }
      }
      this = (unsigned __int8 **)this[1];
      goto LABEL_29;
    }
  }
  return this;
}

void sub_1C54EEEF4(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned long long>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SDPPreconditionRow>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(20 * a2);
}

char *std::vector<SDPPreconditionRow>::__assign_with_size[abi:ne180100]<SDPPreconditionRow*,SDPPreconditionRow*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x666666666666666) {
      unint64_t v12 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v12 = v11;
    }
    double result = std::vector<SDPPreconditionRow>::__vallocate[abi:ne180100](v7, v12);
    uint64_t v14 = (char *)v7[1];
    unsigned int v13 = (void **)(v7 + 1);
    int v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unsigned __int8 v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unsigned int v13 = (void **)(result + 8);
  char v15 = (unsigned char *)*((void *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v15 - v9);
    int v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unsigned __int8 v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unsigned int v13 = &v9[v17];
  return result;
}

char *std::vector<SDPPreconditionRow>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPPreconditionRow>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

const char **std::__find_impl[abi:ne180100]<char const* const*,char const* const*,std::string,std::__identity>(const char **a1, const char **a2, const void **a3)
{
  int v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      size_t v6 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v6 = (size_t)a3[1];
    }
    if (v5 >= 0) {
      int v7 = a3;
    }
    else {
      int v7 = *a3;
    }
    while (v6 != strlen(*v3) || memcmp(v7, *v3, v6))
    {
      if (++v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

void SipReplacesHeader::~SipReplacesHeader(void **this)
{
  *this = &unk_1F20C0A78;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20C0A78;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipReplacesHeader::clone(SipReplacesHeader *this)
{
}

void sub_1C54EF348(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4070BFB248);
  _Unwind_Resume(a1);
}

uint64_t ImsResultSet::fromString(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a1 + 16);
  uint64_t v4 = (uint64_t **)(a1 + 8);
  std::__tree<unsigned int>::destroy(a1 + 8, *(void **)(a1 + 16));
  *(v3 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v3;
  *int v3 = 0;
  v3[1] = 0;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    ims::tokenize((std::string *)a2, &v14, 0x2Cu);
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    while (v6 != v7)
    {
      LODWORD(v17) = 0;
      uint64_t v8 = *(unsigned __int8 *)(v6 + 23);
      int v9 = (char)v8;
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = *(void *)(v6 + 8);
      }
      if (v8 != 1) {
        goto LABEL_13;
      }
      unint64_t v10 = *(const char **)v6;
      if (v9 >= 0) {
        unint64_t v10 = (const char *)v6;
      }
      if (*v10 == 42)
      {
        int v11 = -1;
      }
      else
      {
LABEL_13:
        unint64_t v12 = (const char *)v6;
        if (v9 < 0) {
          unint64_t v12 = *(const char **)v6;
        }
        int v11 = strtoul(v12, 0, 10);
      }
      LODWORD(v17) = v11;
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v4, (unsigned int *)&v17, &v17);
      v6 += 24;
    }
    size_t v17 = (void **)&v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
  return 1;
}

void sub_1C54EF47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL ImsResultSet::containsResult(ImsResultSet *this, unsigned int a2)
{
  uint64_t v4 = (char *)*((void *)this + 2);
  uint64_t v2 = (char *)this + 16;
  int v3 = v4;
  uint64_t v5 = v2;
  if (!v4) {
    return v5 != v2;
  }
  uint64_t v6 = v2;
  uint64_t v7 = v3;
  do
  {
    unsigned int v8 = *((_DWORD *)v7 + 7);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      unint64_t v10 = (char **)v7;
    }
    else {
      unint64_t v10 = (char **)(v7 + 8);
    }
    if (v9) {
      uint64_t v6 = v7;
    }
    uint64_t v7 = *v10;
  }
  while (*v10);
  if (v6 == v2 || *((_DWORD *)v6 + 7) > a2)
  {
    do
    {
      int v11 = *((_DWORD *)v3 + 7);
      BOOL v12 = v11 == -1;
      if (v11 == -1) {
        unsigned int v13 = (char **)v3;
      }
      else {
        unsigned int v13 = (char **)(v3 + 8);
      }
      if (v12) {
        uint64_t v5 = v3;
      }
      int v3 = *v13;
    }
    while (*v13);
    return v5 != v2;
  }
  return 1;
}

void ImsResultSet::log(ImsResultSet *this, ImsOutStream *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, ",");
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v3);
}

void sub_1C54EF6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ImsResultSet::operator==(void *a1, uint64_t a2)
{
  if (a1[3] != *(void *)(a2 + 24)) {
    return 0;
  }
  uint64_t v2 = (void *)a1[1];
  int v3 = a1 + 2;
  if (v2 == a1 + 2) {
    return 1;
  }
  uint64_t v4 = *(void **)(a2 + 8);
  do
  {
    int v5 = *((_DWORD *)v2 + 7);
    int v6 = *((_DWORD *)v4 + 7);
    BOOL result = v5 == v6;
    if (v5 != v6) {
      break;
    }
    unsigned int v8 = (void *)v2[1];
    BOOL v9 = v2;
    if (v8)
    {
      do
      {
        uint64_t v2 = v8;
        unsigned int v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v2 = (void *)v9[2];
        BOOL v10 = *v2 == (void)v9;
        BOOL v9 = v2;
      }
      while (!v10);
    }
    int v11 = (void *)v4[1];
    if (v11)
    {
      do
      {
        BOOL v12 = v11;
        int v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        BOOL v12 = (void *)v4[2];
        BOOL v10 = *v12 == (void)v4;
        uint64_t v4 = v12;
      }
      while (!v10);
    }
    uint64_t v4 = v12;
  }
  while (v2 != v3);
  return result;
}

void ImsResultSet::~ImsResultSet(ImsResultSet *this)
{
  *(void *)this = &unk_1F20D68F0;
  std::__tree<unsigned int>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20D68F0;
  std::__tree<unsigned int>::destroy((uint64_t)this + 8, *((void **)this + 2));
  JUMPOUT(0x1C878E320);
}

void ImsResultSet::loggableName(LoggableString *a1@<X8>)
{
}

BOOL SipPLastAccessNetworkInfoHeader::setAccessNetworkInfo(SipPLastAccessNetworkInfoHeader *this, std::string *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_34);
  BOOL v6 = SipPAccessNetworkInfoHeader::setAccessNetworkInfo((uint64_t)this, a2, (uint64_t)__p, 0);
  BOOL v7 = v6;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (!v7) {
      return v7;
    }
    goto LABEL_3;
  }
  if (v6)
  {
LABEL_3:
    *((void *)this + 17) = a2[2].__r_.__value_.__l.__size_;
    *((_DWORD *)this + 3ims::StackConfig::~StackConfig(this + 6) = 0;
    *((_DWORD *)this + 52) = 0;
    gmtime_r((const time_t *)this + 17, (tm *)((char *)this + 152));
    *((void *)this + 27) = a3;
    unsigned int v8 = (char *)this + 216;
    *((_DWORD *)v8 + 2) = 0;
    *((_DWORD *)v8 + 18) = 0;
    gmtime_r((const time_t *)v8, (tm *)(v8 + 16));
  }
  return v7;
}

void sub_1C54EF924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipPLastAccessNetworkInfoHeader::encode(SipPLastAccessNetworkInfoHeader *this, ImsOutStream *a2, int a3)
{
  SipHeader::encode(this, a2, a3);
  SipParameterMap::toStream((SipPLastAccessNetworkInfoHeader *)((char *)this + 64), a2, 0, 0, 0, 0);
  int v5 = (SipPLastAccessNetworkInfoHeader *)((char *)this + 216);
  if (*((void *)this + 27))
  {
    uint64_t v7 = *((void *)this + 17);
    BOOL v6 = (SipPLastAccessNetworkInfoHeader *)((char *)this + 136);
    if (v7)
    {
      std::string __p = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      ImsInternetDateTime::toString(v6, &__p);
      ims::addPercentEscapes((uint64_t)&__p, 0, 0);
      ims::addQuotes((uint64_t)&__p, 0);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)";", 1);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 32))(a2, &__p);
      if (SHIBYTE(v10) < 0) {
        operator delete(__p);
      }
    }
    std::string __p = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    ImsInternetDateTime::toString(v5, &__p);
    ims::addPercentEscapes((uint64_t)&__p, 0, 0);
    ims::addQuotes((uint64_t)&__p, 0);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)";", 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 32))(a2, &__p);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p);
    }
  }
}

void sub_1C54EFAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipPLastAccessNetworkInfoHeader::decode(uint64_t a1, std::string *__str)
{
  uint64_t v2 = __str;
  int v4 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  BOOL v5 = v4 < 0;
  if (v4 >= 0) {
    BOOL v6 = __str;
  }
  else {
    BOOL v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  if (v5) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  if (size)
  {
    unsigned int v8 = (char *)&v6[-1].__r_.__value_.__r.__words[2] + 7;
    while (size)
    {
      int v9 = v8[size--];
      if (v9 == 59) {
        goto LABEL_13;
      }
    }
  }
  std::string::size_type size = -1;
LABEL_13:
  memset(&__stra, 0, sizeof(__stra));
  std::string::basic_string(&__stra, __str, 0, size, (std::allocator<char> *)&v24);
  memset(&v29, 0, sizeof(v29));
  uint64_t v10 = std::string::basic_string(&v29, v2, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v24);
  ims::chomp(v10, "\r\n\t ", 3);
  ims::removeQuotes((uint64_t)&v29);
  ims::removePercentEscapes((uint64_t)&v29);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  ImsInternetDateTime::fromString(&v29, a1 + 216, (uint64_t)&v24);
  if ((*(unsigned int (**)(void, void))(**((void **)&v24 + 1) + 24))(*((void *)&v24 + 1), v25))
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "sip.parse");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_34);
    uint64_t v11 = ims::debug((uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Unable to parse P-Last-Access-Network-Info header reg timestamp: ", 65);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(long long *, uint64_t))(v24 + 16))(&v24, v11);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v21[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::size_type v12 = HIBYTE(__stra.__r_.__value_.__r.__words[2]);
    p_stra = &__stra;
    if ((__stra.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v12 = __stra.__r_.__value_.__l.__size_;
      p_stra = (std::string *)__stra.__r_.__value_.__r.__words[0];
    }
    if (v12)
    {
      std::string::size_type v14 = v12 + 1;
      while (1)
      {
        std::string::size_type v15 = v14 - 1;
        if (v14 == 1) {
          break;
        }
        int v16 = p_stra->__r_.__value_.__s.__data_[v14-- - 2];
        if (v16 == 59)
        {
          if (v15)
          {
            std::string::size_type v17 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
            if ((v17 & 0x80u) != 0) {
              std::string::size_type v17 = v2->__r_.__value_.__l.__size_;
            }
            if (v17 != v15)
            {
              std::string::basic_string(v21, &__stra, v15, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
              if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v29.__r_.__value_.__l.__data_);
              }
              std::string v29 = v21[0];
              ims::chomp(&v29, "\r\n\t ", 3);
              ims::removeQuotes((uint64_t)&v29);
              ims::removePercentEscapes((uint64_t)&v29);
              ImsInternetDateTime::fromString(&v29, a1 + 136, (uint64_t)v21);
              ImsResult::operator=((uint64_t)&v24, (uint64_t)v21);
              ImsResult::~ImsResult((ImsResult *)v21);
              if ((*(unsigned int (**)(void, void))(**((void **)&v24 + 1) + 24))(*((void *)&v24 + 1), v25))
              {
                std::string::basic_string[abi:ne180100]<0>(v21, "sip.parse");
                std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_34);
                uint64_t v18 = ims::debug((uint64_t)v21, (uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Unable to parse P-Last-Access-Network-Info header timestamp: ", 61);
                *(unsigned char *)(v18 + 17) = 0;
                (*(void (**)(long long *, uint64_t))(v24 + 16))(&v24, v18);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v18 + 17) = 0;
                if (v23 < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v21[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v21[0].__r_.__value_.__l.__data_);
                }
              }
              else
              {
                std::string::basic_string(v21, &__stra, 0, v15 - 1, (std::allocator<char> *)__p);
                if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__stra.__r_.__value_.__l.__data_);
                }
                std::string __stra = v21[0];
              }
            }
          }
          break;
        }
      }
    }
    uint64_t v2 = &__stra;
  }
  uint64_t v19 = SipParameterHeader::decode(a1, v2);
  ImsResult::~ImsResult((ImsResult *)&v24);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__stra.__r_.__value_.__l.__data_);
  }
  return v19;
}

void sub_1C54EFF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  ImsResult::~ImsResult((ImsResult *)&a27);
  if (*(char *)(v27 - 73) < 0) {
    operator delete(*(void **)(v27 - 96));
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(a1);
}

void SipPLastAccessNetworkInfoHeader::~SipPLastAccessNetworkInfoHeader(void **this)
{
  *this = &unk_1F20C0A78;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20C0A78;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipPLastAccessNetworkInfoHeader::clone(SipPLastAccessNetworkInfoHeader *this)
{
}

void sub_1C54F01D4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4032491B5CLL);
  _Unwind_Resume(a1);
}

ImsOutStream *SipSecurityAgreementConfig::log(SipSecurityAgreementConfig *this, ImsOutStream *a2)
{
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 8));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  int v4 = (void *)*((void *)a2 + 1);
  char v7 = 59;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v7, 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(char *, ImsOutStream *))(*((void *)this + 4) + 16))((char *)this + 32, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a2;
}

void sub_1C54F02B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipTransportLayerConfig::initializeFromPrefs(SipTransportLayerConfig *this, const ImsPrefs *a2)
{
  int v3 = this;
  MaxUdpMessageSizeKey = (void **)ImsPrefs::getMaxUdpMessageSizeKey(this);
  BOOL v5 = (ImsPrefs *)ImsPrefs::intValue(a2, MaxUdpMessageSizeKey);
  *((_DWORD *)v3 + 124) = v5;
  ForceTcpKey = (void **)ImsPrefs::getForceTcpKey(v5);
  char v7 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, ForceTcpKey);
  *((unsigned char *)v3 + 439) = (_BYTE)v7;
  ForceTlsKey = (void **)ImsPrefs::getForceTlsKey(v7);
  int v9 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, ForceTlsKey);
  *((unsigned char *)v3 + 44bambi::XmlTreeItem::~XmlTreeItem(this + 1) = (_BYTE)v9;
  TLSIdlePingIntervalSecondsKey = (void **)ImsPrefs::getTLSIdlePingIntervalSecondsKey(v9);
  uint64_t v11 = (ImsPrefs *)ImsPrefs::intValue(a2, TLSIdlePingIntervalSecondsKey);
  *((_DWORD *)v3 + 11bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v11;
  TCPIdlePingIntervalSecondsKey = (void **)ImsPrefs::getTCPIdlePingIntervalSecondsKey(v11);
  unsigned int v13 = (ImsPrefs *)ImsPrefs::intValue(a2, TCPIdlePingIntervalSecondsKey);
  *((_DWORD *)v3 + 112) = v13;
  CRLFMinimumPingIntervalSecondsKey = (void **)ImsPrefs::getCRLFMinimumPingIntervalSecondsKey(v13);
  std::string::size_type v15 = (ImsPrefs *)ImsPrefs::intValue(a2, CRLFMinimumPingIntervalSecondsKey);
  *((_DWORD *)v3 + 11IMSCallOptions::~IMSCallOptions(this + 3) = v15;
  CRLFIdlePingThresholdCapSecondsKey = (void **)ImsPrefs::getCRLFIdlePingThresholdCapSecondsKey(v15);
  std::string::size_type v17 = (ImsPrefs *)ImsPrefs::intValue(a2, CRLFIdlePingThresholdCapSecondsKey);
  *((_DWORD *)v3 + 114) = v17;
  UseCrlfIntervalFromRegistrationKeepKey = (void **)ImsPrefs::getUseCrlfIntervalFromRegistrationKeepKey(v17);
  uint64_t v19 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, UseCrlfIntervalFromRegistrationKeepKey);
  *((unsigned char *)v3 + 442) = (_BYTE)v19;
  TLSKeepAliveIntervalSecondsKey = (void **)ImsPrefs::getTLSKeepAliveIntervalSecondsKey(v19);
  unint64_t v21 = (ImsPrefs *)ImsPrefs::intValue(a2, TLSKeepAliveIntervalSecondsKey);
  *((_DWORD *)v3 + 115) = v21;
  PCSCFDomainNameKey = (void **)ImsPrefs::getPCSCFDomainNameKey(v21);
  char v23 = (ImsPrefs *)ImsPrefs::stringValue(a2, PCSCFDomainNameKey);
  long long v24 = (void **)((char *)v3 + 464);
  if (*((char *)v3 + 487) < 0) {
    operator delete(*v24);
  }
  *(_OWORD *)long long v24 = *(_OWORD *)__p;
  *((void **)v3 + 60) = __p[2];
  AllowResponsesOverDifferentTransportKey = (void **)ImsPrefs::getAllowResponsesOverDifferentTransportKey(v23);
  long long v26 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AllowResponsesOverDifferentTransportKey);
  *((unsigned char *)v3 + 440) = (_BYTE)v26;
  TcpIdleTimeoutSecondsKey = (void **)ImsPrefs::getTcpIdleTimeoutSecondsKey(v26);
  uint64_t v28 = (ImsPrefs *)ImsPrefs::intValue(a2, TcpIdleTimeoutSecondsKey);
  *((_DWORD *)v3 + 122) = v28;
  ShutdownWaitTimeSecondsKey = (void **)ImsPrefs::getShutdownWaitTimeSecondsKey(v28);
  char v30 = (ImsPrefs *)ImsPrefs::intValue(a2, ShutdownWaitTimeSecondsKey);
  *((_DWORD *)v3 + 12IMSCallOptions::~IMSCallOptions(this + 3) = v30;
  UseIPSecKey = (void **)ImsPrefs::getUseIPSecKey(v30);
  char v32 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, UseIPSecKey);
  *((unsigned char *)v3 + 438) = (_BYTE)v32;
  EnableLastAccessNetworkInfoKey = (void **)ImsPrefs::getEnableLastAccessNetworkInfoKey(v32);
  unint64_t v34 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, EnableLastAccessNetworkInfoKey);
  *((unsigned char *)v3 + 529) = (_BYTE)v34;
  EnableCellularNetworkInfoKey = (void **)ImsPrefs::getEnableCellularNetworkInfoKey(v34);
  uint64_t v36 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, EnableCellularNetworkInfoKey);
  *((unsigned char *)v3 + 530) = (_BYTE)v36;
  DefaultRemoteSipPortKey = (void **)ImsPrefs::getDefaultRemoteSipPortKey(v36);
  uint64_t v38 = (ImsPrefs *)ImsPrefs::intValue(a2, DefaultRemoteSipPortKey);
  *((_WORD *)v3 + 217) = (_WORD)v38;
  DefaultLocalSipPortKey = (void **)ImsPrefs::getDefaultLocalSipPortKey(v38);
  long long v40 = (ImsPrefs *)ImsPrefs::intValue(a2, DefaultLocalSipPortKey);
  *((_WORD *)v3 + 21ims::StackConfig::~StackConfig(this + 6) = (_WORD)v40;
  UseEphemeralSipSourcePortForTcpKey = (void **)ImsPrefs::getUseEphemeralSipSourcePortForTcpKey(v40);
  uint64_t v42 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, UseEphemeralSipSourcePortForTcpKey);
  *((unsigned char *)v3 + 43ims::StackConfig::~StackConfig(this + 6) = (_BYTE)v42;
  MaxTransportErrorsKey = (void **)ImsPrefs::getMaxTransportErrorsKey(v42);
  unint64_t v44 = (ImsPrefs *)ImsPrefs::intValue(a2, MaxTransportErrorsKey);
  *((_DWORD *)v3 + 13IMSCallOptions::~IMSCallOptions(this + 3) = v44;
  FatalTransportErrorsKey = (void **)ImsPrefs::getFatalTransportErrorsKey(v44);
  ImsPrefs::stringValue(a2, FatalTransportErrorsKey);
  uint64_t v46 = (ImsPrefs *)ImsResultSet::fromString((uint64_t)v3 + 536, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  memset(&v137, 0, sizeof(v137));
  SecurityAgreementOptionsKey = (void **)ImsPrefs::getSecurityAgreementOptionsKey(v46);
  ImsPrefs::stringValue(a2, SecurityAgreementOptionsKey);
  uint64_t v132 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "sip.tport");
  std::string::basic_string[abi:ne180100]<0>(__str, "");
  uint64_t v48 = ims::debug((uint64_t)__p, (uint64_t)__str);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"generating SecurityAgreementOptions", 35);
  *(unsigned char *)(v48 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v48 + 17) = 0;
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  memset(__str, 0, 24);
  std::string::basic_string[abi:ne180100]<0>(__str, "ipsec-3gpp");
  memset(&v148, 0, sizeof(v148));
  uint64_t v49 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(&v148, "mod=trans;prot=esp");
  memset(&v147, 0, sizeof(v147));
  memset(&v146, 0, sizeof(v146));
  SecurityAgreementAlgsKey = ImsPrefs::getSecurityAgreementAlgsKey(v49);
  int v51 = (ImsPrefs *)ImsPrefs::stringArrayValues(a2, (uint64_t)SecurityAgreementAlgsKey, (std::vector<std::string> *)&v147);
  SecurityAgreementEalgsKey = ImsPrefs::getSecurityAgreementEalgsKey(v51);
  ImsPrefs::stringArrayValues(a2, (uint64_t)SecurityAgreementEalgsKey, (std::vector<std::string> *)&v146);
  uint64_t v145 = 0;
  long long v143 = 0u;
  memset(v144, 0, sizeof(v144));
  long long v142 = 0u;
  long long v140 = 0u;
  *(_OWORD *)uint64_t v141 = 0u;
  long long v139 = 0u;
  memset(__p, 0, sizeof(__p));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  *(void *)uint64_t v135 = v147.__r_.__value_.__l.__size_;
  for (std::string::size_type i = v147.__r_.__value_.__r.__words[0]; i != *(void *)v135; i += 24)
  {
    std::string::size_type size = v146.__r_.__value_.__l.__size_;
    for (std::string::size_type j = v146.__r_.__value_.__r.__words[0]; j != size; j += 24)
    {
      if (__str[23] >= 0) {
        uint64_t v56 = __str;
      }
      else {
        uint64_t v56 = *(unsigned char **)__str;
      }
      if (__str[23] >= 0) {
        uint64_t v57 = __str[23];
      }
      else {
        uint64_t v57 = *(void *)&__str[8];
      }
      uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v56, v57);
      uint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)";alg=", 5);
      int v60 = *(char *)(i + 23);
      if (v60 >= 0) {
        uint64_t v61 = i;
      }
      else {
        uint64_t v61 = *(void *)i;
      }
      if (v60 >= 0) {
        uint64_t v62 = *(unsigned __int8 *)(i + 23);
      }
      else {
        uint64_t v62 = *(void *)(i + 8);
      }
      uint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
      long long v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)";ealg=", 6);
      int v65 = *(char *)(j + 23);
      if (v65 >= 0) {
        uint64_t v66 = j;
      }
      else {
        uint64_t v66 = *(void *)j;
      }
      if (v65 >= 0) {
        uint64_t v67 = *(unsigned __int8 *)(j + 23);
      }
      else {
        uint64_t v67 = *(void *)(j + 8);
      }
      long long v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, v66, v67);
      xpc_object_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)";", 1);
      if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v70 = &v148;
      }
      else {
        char v70 = (std::string *)v148.__r_.__value_.__r.__words[0];
      }
      if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v71 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v71 = v148.__r_.__value_.__l.__size_;
      }
      uint64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)",", 1);
    }
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], &v136);
  __p[0] = *(void **)MEMORY[0x1E4FBA418];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
  if (SHIBYTE(v142) < 0) {
    operator delete(v141[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C878E270](v144);
  __p[0] = &v146;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v147;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  std::string v137 = v136;
  std::string::basic_string[abi:ne180100]<0>(__p, "sip.tport");
  std::string::basic_string[abi:ne180100]<0>(__str, "");
  uint64_t v73 = ims::debug((uint64_t)__p, (uint64_t)__str);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v73 + 8), (uint64_t)"configured SecurityAgreementOptions : ", 38);
  *(unsigned char *)(v73 + 17) = 0;
  LoggableString::LoggableString(&v148, &v137);
  (*(void (**)(uint64_t, std::string *))(*(void *)v73 + 40))(v73, &v148);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v73 + 64))(v73, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v73 + 17) = 0;
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  memset(&v148, 0, sizeof(v148));
  ims::tokenize(&v137, (uint64_t *)&v148, 0x2Cu);
  uint64_t v74 = (char *)v3 + 504;
  std::string::size_type v76 = v148.__r_.__value_.__l.__size_;
  __int16 v75 = (const std::string *)v148.__r_.__value_.__r.__words[0];
  if (v148.__r_.__value_.__r.__words[0] != v148.__r_.__value_.__l.__size_)
  {
    uint64_t v134 = v3;
    uint64_t v131 = (uint64_t)v3 + 520;
    do
    {
      std::string::size_type v77 = std::string::find(v75, 59, 0);
      if (v77 == -1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "sip.tport");
        std::string::basic_string[abi:ne180100]<0>(__str, "");
        uint64_t v82 = ims::error((uint64_t)__p, (uint64_t)__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v82 + 8), (uint64_t)"no semicolon in security agreement option ", 42);
        *(unsigned char *)(v82 + 17) = 0;
        LoggableString::LoggableString(&v147, v75);
        (*(void (**)(uint64_t, std::string *))(*(void *)v82 + 40))(v82, &v147);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v82 + 17) = 0;
        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v147.__r_.__value_.__l.__data_);
        }
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
          goto LABEL_91;
        }
        uint64_t v83 = __p[0];
      }
      else
      {
        std::string::size_type v78 = v77;
        v141[0] = (void *)256;
        __p[0] = &unk_1F20D69D8;
        memset(&__p[1], 0, 24);
        long long v140 = 0uLL;
        *(void *)&long long v139 = &unk_1F20B37B0;
        *((void *)&v139 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &v140;
        std::string::basic_string((std::string *)__str, v75, 0, v77, (std::allocator<char> *)&v147);
        if (SHIBYTE(__p[3]) < 0) {
          operator delete(__p[1]);
        }
        *(_OWORD *)&__p[1] = *(_OWORD *)__str;
        std::string __p[3] = *(void **)&__str[16];
        std::string::basic_string((std::string *)__str, v75, v78 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v147);
        SipParameterMap::fromString((uint64_t)&v139, (std::string *)__str, 0, 0);
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        if (*((void *)&v140 + 1))
        {
          unint64_t v79 = *((void *)v3 + 64);
          unint64_t v80 = *((void *)v3 + 65);
          if (v79 >= v80)
          {
            unint64_t v85 = 0x8E38E38E38E38E39 * ((uint64_t)(v79 - *(void *)v74) >> 3);
            unint64_t v86 = v85 + 1;
            if (v85 + 1 > 0x38E38E38E38E38ELL) {
              std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v87 = 0x8E38E38E38E38E39 * ((uint64_t)(v80 - *(void *)v74) >> 3);
            if (2 * v87 > v86) {
              unint64_t v86 = 2 * v87;
            }
            if (v87 >= 0x1C71C71C71C71C7) {
              unint64_t v88 = 0x38E38E38E38E38ELL;
            }
            else {
              unint64_t v88 = v86;
            }
            uint64_t v150 = v131;
            if (v88) {
              std::string v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipSecurityAgreementConfig>>(v131, v88);
            }
            else {
              std::string v89 = 0;
            }
            std::string::size_type v90 = v76;
            uint64_t v91 = v74;
            *(void *)std::string __str = v89;
            *(void *)&__str[8] = &v89[72 * v85];
            *(void *)&__str[16] = *(void *)&__str[8];
            *(void *)&__str[24] = &v89[72 * v88];
            std::construct_at[abi:ne180100]<SipSecurityAgreementConfig,SipSecurityAgreementConfig const&,SipSecurityAgreementConfig*>(*(uint64_t *)&__str[8], (uint64_t)__p);
            uint64_t v92 = 0;
            uint64_t v93 = *(void *)&__str[8];
            *(void *)&__str[16] += 72;
            uint64_t v94 = *((void *)v134 + 63);
            for (uint64_t k = *((void *)v134 + 64);
                  k + v92 != v94;
                  std::construct_at[abi:ne180100]<SipSecurityAgreementConfig,SipSecurityAgreementConfig const&,SipSecurityAgreementConfig*>(v92 + v93, v92 + k))
            {
              v92 -= 72;
            }
            uint64_t v96 = *((void *)v134 + 65);
            unint64_t v133 = *(void *)&__str[16];
            long long v97 = *(_OWORD *)&__str[16];
            uint64_t v74 = v91;
            int v3 = v134;
            long long v98 = *(_OWORD *)v74;
            *((void *)v134 + 6IMSCallOptions::~IMSCallOptions(this + 3) = v93 + v92;
            *(_OWORD *)&__str[8] = v98;
            *((_OWORD *)v134 + 32) = v97;
            *(void *)&__str[24] = v96;
            *(void *)std::string __str = v98;
            std::__split_buffer<SipSecurityAgreementConfig>::~__split_buffer((uint64_t)__str);
            unint64_t v81 = v133;
            a2 = v132;
            std::string::size_type v76 = v90;
          }
          else
          {
            std::construct_at[abi:ne180100]<SipSecurityAgreementConfig,SipSecurityAgreementConfig const&,SipSecurityAgreementConfig*>(*((void *)v3 + 64), (uint64_t)__p);
            unint64_t v81 = v79 + 72;
            *((void *)v3 + 64) = v79 + 72;
          }
          *((void *)v3 + 64) = v81;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__str, "sip.tport");
          std::string::basic_string[abi:ne180100]<0>(&v147, "");
          uint64_t v84 = ims::error((uint64_t)__str, (uint64_t)&v147);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v84 + 8), (uint64_t)"no params in security agreement option ", 39);
          *(unsigned char *)(v84 + 17) = 0;
          LoggableString::LoggableString(&v146, v75);
          (*(void (**)(uint64_t, std::string *))(*(void *)v84 + 40))(v84, &v146);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v84 + 64))(v84, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v84 + 17) = 0;
          if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v146.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v147.__r_.__value_.__l.__data_);
          }
          if ((__str[23] & 0x80000000) != 0) {
            operator delete(*(void **)__str);
          }
        }
        __p[0] = &unk_1F20D69D8;
        *(void *)&long long v139 = &unk_1F20B37B0;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v139 + 8, (void *)v140);
        if ((SHIBYTE(__p[3]) & 0x80000000) == 0) {
          goto LABEL_91;
        }
        uint64_t v83 = __p[1];
      }
      operator delete(v83);
LABEL_91:
      ++v75;
    }
    while (v75 != (const std::string *)v76);
  }
  __p[0] = &v148;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  TransportInitTimeoutSecondsKey = (void **)ImsPrefs::getTransportInitTimeoutSecondsKey(v99);
  long long v101 = (ImsPrefs *)ImsPrefs::intValue(a2, TransportInitTimeoutSecondsKey);
  *((_DWORD *)v3 + 142) = v101;
  DisableAccessNetworkInfoForAckAndCancelKey = (void **)ImsPrefs::getDisableAccessNetworkInfoForAckAndCancelKey(v101);
  uint64_t v103 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, DisableAccessNetworkInfoForAckAndCancelKey);
  *((unsigned char *)v3 + 572) = (_BYTE)v103;
  AddAccessNetworkInfoToInsecureMessagesKey = (void **)ImsPrefs::getAddAccessNetworkInfoToInsecureMessagesKey(v103);
  uint64_t v105 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AddAccessNetworkInfoToInsecureMessagesKey);
  *((unsigned char *)v3 + 580) = (_BYTE)v105;
  EnableRportKey = (void **)ImsPrefs::getEnableRportKey(v105);
  std::string v107 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, EnableRportKey);
  *((unsigned char *)v3 + 58bambi::XmlTreeItem::~XmlTreeItem(this + 1) = (_BYTE)v107;
  ResetConnectionsWhenClosedByPeerKey = (void **)ImsPrefs::getResetConnectionsWhenClosedByPeerKey(v107);
  long long v109 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, ResetConnectionsWhenClosedByPeerKey);
  *((unsigned char *)v3 + 57IMSCallOptions::~IMSCallOptions(this + 3) = (_BYTE)v109;
  RequireExplicitPortsForEmergencyRoutesKey = (void **)ImsPrefs::getRequireExplicitPortsForEmergencyRoutesKey(v109);
  std::string v111 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, RequireExplicitPortsForEmergencyRoutesKey);
  *((unsigned char *)v3 + 574) = (_BYTE)v111;
  IPSecSegmentOffsetKey = (void **)ImsPrefs::getIPSecSegmentOffsetKey(v111);
  uint64_t v113 = (ImsPrefs *)ImsPrefs::intValue(a2, IPSecSegmentOffsetKey);
  *((_DWORD *)v3 + 144) = v113;
  DeferIncomingMessagesUntilWakeKey = (void **)ImsPrefs::getDeferIncomingMessagesUntilWakeKey(v113);
  long long v115 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, DeferIncomingMessagesUntilWakeKey);
  *((unsigned char *)v3 + 582) = (_BYTE)v115;
  SystemWakeWaitTimeoutMillisecondsKey = (void **)ImsPrefs::getSystemWakeWaitTimeoutMillisecondsKey(v115);
  uint64_t v117 = (ImsPrefs *)ImsPrefs::intValue(a2, SystemWakeWaitTimeoutMillisecondsKey);
  *((_DWORD *)v3 + 14ims::StackConfig::~StackConfig(this + 6) = v117;
  NetworkInterfaceKey = (void **)ImsPrefs::getNetworkInterfaceKey(v117);
  long long v119 = (ImsPrefs *)ImsPrefs::stringValue(a2, NetworkInterfaceKey);
  if (*((char *)v3 + 23) < 0) {
    operator delete(*(void **)v3);
  }
  *(_OWORD *)int v3 = *(_OWORD *)__p;
  *((void **)v3 + 2) = __p[2];
  ServiceClassKey = ImsPrefs::getServiceClassKey(v119);
  long long v121 = ImsPrefs::typedPrefWithKey<ImsDictPref>(a2, (void **)ServiceClassKey);
  if (v121) {
    uint64_t v122 = (uint64_t)v121;
  }
  else {
    uint64_t v122 = *((void *)ServiceClassKey + 11);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Hotspot");
  uint64_t v123 = ImsServiceClass::ImsServiceClass((int *)__str, v122, (uint64_t)__p);
  if (v74 + 84 != __str)
  {
    *(void *)(v74 + 84) = *(void *)__str;
    *((_DWORD *)v3 + 149) = *(_DWORD *)&__str[8];
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  v124 = ImsPrefs::getServiceClassKey((ImsPrefs *)v123);
  uint64_t v125 = ImsPrefs::typedPrefWithKey<ImsDictPref>(a2, (void **)v124);
  if (v125) {
    uint64_t v126 = (uint64_t)v125;
  }
  else {
    uint64_t v126 = *((void *)v124 + 11);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Cellular");
  uint64_t v127 = ImsServiceClass::ImsServiceClass((int *)__str, v126, (uint64_t)__p);
  if (v74 + 108 != __str)
  {
    *(void *)(v74 + 108) = *(void *)__str;
    *((_DWORD *)v3 + 155) = *(_DWORD *)&__str[8];
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v128 = ImsPrefs::getServiceClassKey((ImsPrefs *)v127);
  uint64_t v129 = ImsPrefs::typedPrefWithKey<ImsDictPref>(a2, (void **)v128);
  if (v129) {
    uint64_t v130 = (uint64_t)v129;
  }
  else {
    uint64_t v130 = *((void *)v128 + 11);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "WiFi");
  ImsServiceClass::ImsServiceClass((int *)__str, v130, (uint64_t)__p);
  if ((char *)v3 + 600 != __str)
  {
    *((void *)v3 + 75) = *(void *)__str;
    *((_DWORD *)v3 + 152) = *(_DWORD *)&__str[8];
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C54F10E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::ostringstream::~ostringstream((uint64_t)&a28);
  a28 = (void *)(v33 - 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = (void *)(v33 - 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  if (*(char *)(v33 - 145) < 0) {
    operator delete(*(void **)(v33 - 168));
  }
  if (*(char *)(v33 - 113) < 0) {
    operator delete(*(void **)(v33 - 136));
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void SipSecurityAgreementConfig::~SipSecurityAgreementConfig(SipSecurityAgreementConfig *this)
{
  *(void *)this = &unk_1F20D69D8;
  *((void *)this + 4) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 40, *((void **)this + 6));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20D69D8;
  *((void *)this + 4) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 40, *((void **)this + 6));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1C878E320);
}

void SipSecurityAgreementConfig::loggableName(LoggableString *a1@<X8>)
{
}

uint64_t std::construct_at[abi:ne180100]<SipSecurityAgreementConfig,SipSecurityAgreementConfig const&,SipSecurityAgreementConfig*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F20D69D8;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 32) = &unk_1F20B37B0;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)(a1 + 40), *(void ***)(a2 + 40), (void **)(a2 + 48));
  *(unsigned char *)(a1 + 65) = 1;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

void sub_1C54F1500(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<SipSecurityAgreementConfig>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    long long v4 = *(void (***)(void))(i - 72);
    *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = i - 72;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void SipRegistrationMetrics::registrationAttemptStarted(uint64_t a1, _DWORD *a2)
{
  v4.tv_sec = 0;
  *(void *)&v4.tv_usec = 0;
  gettimeofday(&v4, 0);
  *(void *)a1 = 1000 * v4.tv_sec + v4.tv_usec / 1000 + 2208988800000;
  *(void *)(a1 + 8) = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  v4.tv_sec = (__darwin_time_t)&unk_1F20B2680;
  *(void *)&v4.tv_usec = &_bambiDomain;
  int v5 = 0;
  ImsResult::operator=(a1 + 16, (uint64_t)&v4);
  ImsResult::~ImsResult((ImsResult *)&v4);
  *(unsigned char *)(a1 + 88) = *a2 == 2;
  *(unsigned char *)(a1 + 89) = 0;
  *(unsigned char *)(a1 + 92) = 0;
}

void sub_1C54F1670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationMetrics::registrationAttemptCompleted(SipRegistrationMetrics *this, const ImsResult *a2, int a3)
{
  ImsResult::operator=((uint64_t)this + 16, (uint64_t)a2);
  v6.tv_sec = 0;
  *(void *)&v6.tv_usec = 0;
  uint64_t result = gettimeofday(&v6, 0);
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 1000 * v6.tv_sec + v6.tv_usec / 1000 + 2208988800000;
  *((_DWORD *)this + 3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = a3;
  return result;
}

void SipPPreferredIdentityHeader::~SipPPreferredIdentityHeader(void **this)
{
  *this = &unk_1F20BE9C0;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20BE9C0;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipPPreferredIdentityHeader::clone(SipPPreferredIdentityHeader *this)
{
}

void sub_1C54F182C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40B808BD88);
  _Unwind_Resume(a1);
}

void sub_1C54F18D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipAuthResponse::encode(SipAuthResponse *this, ImsOutStream *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(SipAuthResponse *))(*(void *)this + 32))(this)
                           + 48);
  return v2();
}

uint64_t SipAuthResponse::log(SipAuthResponse *this, ImsOutStream *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(SipAuthResponse *))(*(void *)this + 32))(this)
                           + 56);
  return v2();
}

void ims::analytics::CoreLocationState::create(void *a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x30uLL);
  *((void *)v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_1F20D6B20;
  *((void *)v3 + 4) = 0;
  *((void *)v3 + 5) = 0;
  *((void *)v3 + IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20D6B70;
  timeval v4 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  dispatch_queue_t v5 = dispatch_queue_create("com.apple.ipTelephony.locationListener", v4);

  timeval v6 = (void *)*((void *)v3 + 5);
  *((void *)v3 + 5) = v5;

  long long v7 = [CoreLocationDelegate alloc];
  id v8 = *((id *)v3 + 5);
  uint64_t v9 = [(CoreLocationDelegate *)v7 initWithQueue:v8];
  uint64_t v10 = (void *)*((void *)v3 + 4);
  *((void *)v3 + 4) = v9;

  *a1 = v3 + 24;
  a1[1] = v3;
}

void sub_1C54F1AF4(_Unwind_Exception *a1)
{
  timeval v4 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;

  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<anonymous namespace'::CoreLocationStateImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D6B20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::CoreLocationStateImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D6B20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::CoreLocationStateImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::CoreLocationStateImpl::~CoreLocationStateImpl(_anonymous_namespace_::CoreLocationStateImpl *this)
{
  *(void *)this = &unk_1F20D6B70;
  uint64_t v2 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

uint64_t anonymous namespace'::CoreLocationStateImpl::isLocationAuthorized(id *this)
{
  return [this[1] isLocationAuthorized];
}

void SipAuthInfo::SipAuthInfo(SipAuthInfo *this, SipAuthClient *a2, SipAuthenticateHeader *a3, SipAuthChallengeSource *a4)
{
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F20D6BC0;
  SipTimerContainer::SipTimerContainer((SipAuthInfo *)((char *)this + 64));
  *((void *)this + IMSCallOptions::~IMSCallOptions(this + 3) = a2;
  *((void *)this + 4) = a3;
  *((void *)this + 5) = a4;
  *((void *)this + ims::StackConfig::~StackConfig(this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = this;
  std::string::operator=((std::string *)((char *)this + 112), (const std::string *)((char *)a2 + 8));
  std::string::operator=((std::string *)((char *)this + 136), (const std::string *)((char *)a2 + 32));
  uint64_t v8 = *((void *)this + 4);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
  size_t v10 = *(void *)(v8 + 16);
  if ((v9 & 0x80u) == 0) {
    uint64_t v11 = *(unsigned __int8 *)(v8 + 31);
  }
  else {
    uint64_t v11 = *(void *)(v8 + 16);
  }
  if (v11 == 18)
  {
    std::string::size_type v12 = (const void **)(v8 + 8);
    if ((v9 & 0x80) != 0)
    {
      BOOL v21 = memcmp(*v12, "Proxy-Authenticate", v10) == 0;
    }
    else if (v9)
    {
      uint64_t v13 = v9 - 1;
      std::string::size_type v14 = "Proxy-Authenticate";
      do
      {
        int v16 = *(unsigned __int8 *)v12;
        std::string::size_type v12 = (const void **)((char *)v12 + 1);
        int v15 = v16;
        int v18 = *(unsigned __int8 *)v14++;
        int v17 = v18;
        BOOL v20 = v13-- != 0;
        BOOL v21 = v15 == v17;
      }
      while (v21 && v20);
    }
    else
    {
      BOOL v21 = 1;
    }
  }
  else
  {
    BOOL v21 = 0;
  }
  *((unsigned char *)this + 208) = v21;
}

void sub_1C54F1D88(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void SipAuthInfo::~SipAuthInfo(SipAuthInfo *this)
{
  *(void *)this = &unk_1F20D6BC0;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  SipTimerContainer::~SipTimerContainer((SipAuthInfo *)((char *)this + 64));
  timeval v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  uint64_t vars8;

  SipAuthInfo::~SipAuthInfo(this);
  JUMPOUT(0x1C878E320);
}

void SipAuthInfo::loggableName(SipAuthInfo *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C54F2028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void SipAuthInfo::sendChallengeToDelegate(int8x8_t *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)&this[3] + 112);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (v3 && (timeval v4 = std::__shared_weak_count::lock(v3)) != 0)
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 136);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    uint64_t v5 = MEMORY[0x88];
  }
  uint64_t v6 = *(void *)(v5 + 248);
  memset(&__p, 0, sizeof(__p));
  uint64_t v7 = *(void *)(*(void *)&this[3] + 112);
  uint64_t v8 = *(std::__shared_weak_count **)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9) {
      uint64_t v10 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  if (*(char *)(v10 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 4160), *(void *)(v10 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v10 + 4160);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v6)
  {
    int8x8_t v12 = this[1];
    uint64_t v11 = (std::__shared_weak_count *)this[2];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    long long v22 = 0;
    uint64_t v13 = operator new(0x20uLL);
    *uint64_t v13 = &unk_1F20D6C40;
    v13[1] = this;
    v13[2] = v12;
    v13[3] = v11;
    long long v22 = v13;
    SipUserAgent::config(*(SipUserAgent **)(*(void *)&this[3] + 112));
    SipTimerContainer::startTimer(this + 8, (uint64_t)"AuthResponseTimeout");
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v21);
    int8x8_t v14 = this[4];
    if (v14)
    {
      int v15 = *(const void **)(*(void *)&v14 + 64);
      if (v15)
      {
        if (v16)
        {
          (*(void (**)(uint64_t, uint64_t, void *, std::string *))(*(void *)v6 + 24))(v6, v5, v16, &__p);
        }
        else
        {
          if (v19) {
            (*(void (**)(uint64_t, uint64_t, void *, std::string *))(*(void *)v6 + 32))(v6, v5, v19, &__p);
          }
        }
      }
    }
    if (v11)
    {
      std::__shared_weak_count::__release_weak(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    int8x8_t v17 = this[3];
    uint64_t v18 = (*(uint64_t (**)(int8x8_t))(**(void **)&v17 + 56))(v17);
    (*(void (**)(int8x8_t, uint64_t))(**(void **)&v17 + 16))(v17, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"no BambiClientDelegate to handle auth challenge", 47);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    SipAuthInfo::triggerTimeout((SipAuthInfo *)this);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C54F23D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipAuthInfo::triggerTimeout(SipAuthInfo *this)
{
  if (!*((void *)this + 6))
  {
    uint64_t v1 = *((void *)this + 1);
    timeval v4 = (char *)this + 16;
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
    uint64_t v3 = (void *)*((void *)v4 + 1);
    uint64_t v5 = v1;
    if (!v2 || (uint64_t v6 = std::__shared_weak_count::lock(v2)) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    SipAuthClient::handleAuthChallengeTimeout(v3, &v5);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C54F24AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipAuthInfo::setResponse(SipAuthInfo *this, const SipAuthResponse *a2)
{
  SipTimerContainer::cancelAllTimers((SipAuthInfo *)((char *)this + 64));
  uint64_t v4 = *((void *)this + 6);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + ims::StackConfig::~StackConfig(this + 6) = (*(uint64_t (**)(const SipAuthResponse *))(*(void *)a2 + 16))(a2);
  uint64_t result = *((void *)this + 5);
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v6();
  }
  return result;
}

void SipAuthInfo::handleTimer(SipAuthInfo *this, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2[23];
  }
  else {
    uint64_t v3 = *((void *)a2 + 1);
  }
  if (v3 != 19) {
    return;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "AuthResponseTimeout", *((void *)a2 + 1))) {
      return;
    }
    goto LABEL_13;
  }
  if (!a2[23])
  {
LABEL_13:
    SipAuthInfo::triggerTimeout(this);
    return;
  }
  uint64_t v5 = "AuthResponseTimeout";
  while (*a2 == *(unsigned __int8 *)v5)
  {
    ++a2;
    ++v5;
    if (!--v2) {
      goto LABEL_13;
    }
  }
}

_DWORD *SipAuthInfo::updateNonceCount(SipAuthInfo *this)
{
  uint64_t result = (_DWORD *)*((void *)this + 6);
  if (result)
  {
    uint64_t v3 = (const void *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 24))(result);
    if (v3
    {
      ++result[12];
    }
    else
    {
      uint64_t v4 = *((void *)this + 3);
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"current AuthInfo doesn't have a Digest auth scheme", 50);
      *(unsigned char *)(v5 + 17) = 0;
      uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
    }
  }
  return result;
}

void SipAuthInfo::addAuthorizationToRequest(SipAuthInfo *this@<X0>, SipRequest *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)this + 4) + 120))(*((void *)this + 4));
  SipMessage::removeHeadersWithName(a2, v6);
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 6) + 16))(*((void *)this + 6));
  if ((*(uint64_t (**)(uint64_t, SipRequest *))(*(void *)v7 + 40))(v7, a2))
  {
    SipAuthInfo::updateNonceCount(this);
    uint64_t v8 = (SipHeader *)(*(uint64_t (**)(void))(**((void **)this + 4) + 112))(*((void *)this + 4));
    uint64_t v9 = *((void *)v8 + 8);
    if (v9 != v7)
    {
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      *((void *)v8 + 8) = v7;
    }
    SipMessage::addHeader(a2, v8, 0);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    v11[0] = &unk_1F20B2680;
    v11[1] = &_bambiDomain;
    int v12 = 1073741848;
    uint64_t v10 = (const std::string *)ImsResult::operator<<<char [24]>((uint64_t)v11, "compute response failed");
    ImsResult::ImsResult((ImsResult *)a3, v10);
    ImsResult::~ImsResult((ImsResult *)v11);
  }
}

void sub_1C54F2990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void *SipAuthInfo::hasAuthSyncResponse(SipAuthInfo *this)
{
  uint64_t result = (void *)*((void *)this + 6);
  if (result)
  {
    if (result)
    {
      uint64_t v2 = result;
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*(void *)result + 32))(result);
      if (result) {
        return (void *)(*(unsigned char *)((*(uint64_t (**)(void *))(*(void *)v2 + 32))(v2) + 313) != 0);
      }
    }
  }
  return result;
}

void *std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D6C40;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D6C40;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20D6C40;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + IMSCallOptions::~IMSCallOptions(this + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D6C40;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C54F2CB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void SipLegacyUssdDataBody::encode(SipLegacyUssdDataBody *this, ImsOutStream *a2, int a3)
{
  if (a3)
  {
    if (*((void *)this + 2) != *((void *)this + 1))
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = (void *)*((void *)a2 + 1);
        LOBYTE(__p[0]) = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)__p, 1);
        *((unsigned char *)a2 + 17) = 0;
        std::ostream::operator<<();
        *((unsigned char *)a2 + 17) = 0;
        uint64_t v7 = (void *)*((void *)a2 + 1);
        *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
        *((unsigned char *)a2 + 17) = 0;
        LOBYTE(__p[0]) = 48;
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, (char *)__p);
        uint64_t v8 = (void *)*((void *)a2 + 1);
        *(void *)((char *)v8 + *(void *)(*v8 - 24) + 24) = 2;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
        *((unsigned char *)a2 + 17) = 0;
        std::ostream::operator<<();
        *((unsigned char *)a2 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)")", 1);
        *((unsigned char *)a2 + 17) = 0;
        if (80 * (v5 / 0x50) == v5)
        {
          (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *((unsigned char *)a2 + 17) = 0;
        }
        ++v5;
      }
      while (v5 < *((void *)this + 2) - *((void *)this + 1));
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(__p, *((char **)this + 1), *((char **)this + 2), *((void *)this + 2) - *((void *)this + 1));
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 32))(a2, __p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C54F2F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipLegacyUssdDataBody::decode(uint64_t a1, const void **a2)
{
  uint64_t v3 = (char *)*((unsigned __int8 *)a2 + 23);
  if ((char)v3 < 0) {
    uint64_t v3 = (char *)a2[1];
  }
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (void **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16) - v4;
  if ((unint64_t)v3 <= v6)
  {
    if ((unint64_t)v3 < v6) {
      *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = &v3[v4];
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 8), (size_t)&v3[-v6]);
  }
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  if (v8)
  {
    if (v7 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    memmove(*v5, v9, v8);
  }
  return 1;
}

void SipLegacyUssdDataBody::~SipLegacyUssdDataBody(SipLegacyUssdDataBody *this)
{
  *(void *)this = &unk_1F20D6CC0;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20D6CC0;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C878E320);
}

void SipLegacyUssdDataBody::clone(SipLegacyUssdDataBody *this)
{
}

void sub_1C54F30F4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x91C4089455612);
  _Unwind_Resume(a1);
}

const char *SipLegacyUssdDataBody::contentType(SipLegacyUssdDataBody *this)
{
  return "application/ussd";
}

uint64_t SipLegacyUssdDataBody::contentLength(SipLegacyUssdDataBody *this)
{
  return *((void *)this + 2) - *((void *)this + 1);
}

uint64_t SipLegacyUssdDataBody::decode()
{
  return 1;
}

uint64_t TMORegistrationPolicy::TMORegistrationPolicy(uint64_t a1, std::__shared_weak_count **a2, char a3)
{
  *(void *)(a1 + 104) = &unk_1F20B2FA8;
  unint64_t v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  Rfc5626RegistrationPolicy::Rfc5626RegistrationPolicy(a1, (uint64_t *)&off_1F20D7018, v7);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)a1 = &unk_1F20D6D58;
  *(void *)(a1 + 104) = &unk_1F20D6FC0;
  *(void *)(a1 + 184) = &unk_1F20D7008;
  *(void *)(a1 + 2368) = 0;
  *(void *)(a1 + 2384) = 0;
  *(void *)(a1 + 237ims::StackConfig::~StackConfig(this + 6) = 0;
  *(unsigned char *)(a1 + 2392) = 0;
  *(unsigned char *)(a1 + 239IMSCallOptions::~IMSCallOptions(this + 3) = a3;
  *(void *)(a1 + 2408) = 0;
  *(_DWORD *)(a1 + 241ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 245ims::StackConfig::~StackConfig(this + 6) = 0;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(void *)(a1 + 2400) = &unk_1F20B7EA8;
  *(void *)(a1 + 2464) = 0x7800001C20;
  return a1;
}

void sub_1C54F3278(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void TMORegistrationPolicy::clearFailureFlags(TMORegistrationPolicy *this)
{
  *((_DWORD *)this + 590) = 0;
  *((unsigned char *)this + 2392) = 0;
}

uint64_t TMORegistrationPolicy::handleForbiddenUser(TMORegistrationPolicy *this, const SipResponse *a2)
{
  SipResultDomain::makeResult(a2, (uint64_t)v5);
  uint64_t v3 = SipRegistrationPolicy::handleGeneralError(this, (const ImsResult *)v5);
  ImsResult::~ImsResult((ImsResult *)v5);
  return v3;
}

void sub_1C54F330C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t TMORegistrationPolicy::handleGeneralErrorFromAllProxies(TMORegistrationPolicy *this, const ImsResult *a2)
{
  *((unsigned char *)this + 2392) = 1;
  if (*((unsigned char *)this + 2393)) {
    return -1;
  }
  else {
    return Rfc5626RegistrationPolicy::handleGeneralErrorFromAllProxies(this, a2);
  }
}

time_t TMORegistrationPolicy::handleGeneralErrorFromOneProxy(TMORegistrationPolicy *this, const ImsResult *a2)
{
  uint64_t v4 = SipRegistrationPolicy::retryTimeFromResult(this, a2);
  if (v4 == -1)
  {
    if (*((unsigned char *)this + 2392)) {
      uint64_t v5 = Rfc5626RegistrationPolicy::computeRetryInterval(this);
    }
    else {
      uint64_t v5 = (*(uint64_t (**)(TMORegistrationPolicy *))(*(void *)this + 208))(this);
    }
    uint64_t v4 = v5;
  }
  int v6 = (*(uint64_t (**)(TMORegistrationPolicy *))(*(void *)this + 328))(this);
  uint64_t v7 = (*(uint64_t (**)(TMORegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(TMORegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v7);
  if (v6)
  {
    size_t v8 = "time to switch proxies";
    uint64_t v9 = 22;
  }
  else
  {
    size_t v8 = "will try again with the same proxy.";
    uint64_t v9 = 35;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)v8, v9);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  return SipRegistrationPolicy::scheduleRetry(this, a2, v4, v6);
}

uint64_t TMORegistrationPolicy::maxRetryInterval(TMORegistrationPolicy *this)
{
  if (*((unsigned char *)this + 2392)) {
    return *((unsigned int *)this + 460);
  }
  else {
    return *(void *)(*((void *)this + 297) - 16) + *(unsigned int *)(*((void *)this + 297) - 8);
  }
}

uint64_t TMORegistrationPolicy::generalErrorRetryInterval(TMORegistrationPolicy *this)
{
  if (*((unsigned char *)this + 2392)) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 52);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = (v3 - 1);
  uint64_t v5 = *((void *)this + 297);
  uint64_t v6 = *((void *)this + 296);
  uint64_t v7 = v5 - v6;
  size_t v8 = (uint64_t *)(v6 + 16 * v4);
  uint64_t v9 = (uint64_t *)(v5 - 16);
  if (v4 >= v7 >> 4) {
    char v10 = v9;
  }
  else {
    char v10 = v8;
  }
  uint64_t v1 = *v10;
  if (*((_DWORD *)v10 + 2)) {
    v1 += random() % *((unsigned int *)v10 + 2);
  }
  return v1;
}

uint64_t TMORegistrationPolicy::fatalErrorRetryInterval(TMORegistrationPolicy *this)
{
  if (*((unsigned char *)this + 2392)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)*((void *)this + 296);
  uint64_t v1 = *v2;
  if (*((_DWORD *)v2 + 2)) {
    v1 += random() % *((unsigned int *)v2 + 2);
  }
  return v1;
}

uint64_t TMORegistrationPolicy::forbiddenErrorRetryInterval(TMORegistrationPolicy *this)
{
  if (*((unsigned char *)this + 2392)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)*((void *)this + 296);
  uint64_t v1 = *v2;
  if (*((_DWORD *)v2 + 2)) {
    v1 += random() % *((unsigned int *)v2 + 2);
  }
  return v1;
}

void TMORegistrationPolicy::updateConfig(TMORegistrationPolicy *this, const SipRegistrationConfig *a2)
{
  unint64_t v4 = (_DWORD **)((char *)this + 2368);
  if ((char *)this + 2368 != (char *)a2 + 960) {
    std::vector<SipRetryInfo>::__assign_with_size[abi:ne180100]<SipRetryInfo*,SipRetryInfo*>((char *)this + 2368, *((char **)a2 + 120), *((void *)a2 + 121), (uint64_t)(*((void *)a2 + 121) - *((void *)a2 + 120)) >> 4);
  }
  unint64_t v5 = *((void *)this + 296);
  if (v5 == *((void *)this + 297))
  {
    unint64_t v6 = *((void *)this + 298);
    if (v5 >= v6)
    {
      uint64_t v8 = v6 - v5;
      uint64_t v9 = v8 >> 3;
      if ((unint64_t)(v8 >> 3) <= 1) {
        uint64_t v9 = 1;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)this + 2384, v10);
      int v12 = (_DWORD *)*((void *)this + 297);
      long long v13 = (_DWORD *)*((void *)this + 296);
      long long v15 = &v11[16 * v14];
      *(void *)uint64_t v11 = 30;
      *((_DWORD *)v11 + 2) = 0;
      uint64_t v7 = v11 + 16;
      if (v12 != v13)
      {
        do
        {
          uint64_t v16 = *((void *)v12 - 2);
          v12 -= 4;
          int v17 = v12[2];
          *((void *)v11 - 2) = v16;
          v11 -= 16;
          *((_DWORD *)v11 + 2) = v17;
        }
        while (v12 != v13);
        int v12 = *v4;
      }
      *((void *)this + 29ims::StackConfig::~StackConfig(this + 6) = v11;
      *((void *)this + 297) = v7;
      *((void *)this + 298) = v15;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(void *)unint64_t v5 = 30;
      *(_DWORD *)(v5 + 8) = 0;
      uint64_t v7 = (char *)(v5 + 16);
    }
    *((void *)this + 297) = v7;
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v20, (void *)this + 24);
  uint64_t v18 = v21;
  if (v20) {
    std::string::size_type v19 = v20 + 184;
  }
  else {
    std::string::size_type v19 = 0;
  }
  v22[0] = v19;
  v22[1] = (std::string::size_type)v21;
  uint64_t v20 = 0;
  BOOL v21 = 0;
  Rfc5626BackoffTimer::initialize((uint64_t)this + 2400, (std::string::size_type)this + 232, v22, (std::string *)&SipRegistrationPolicy::kSubscriptionRetryTimerName, *((_DWORD *)a2 + 338), *((_DWORD *)a2 + 339));
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  SipRegistrationPolicy::updateConfig((ims **)this, a2);
}

void sub_1C54F37A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void TMORegistrationPolicy::~TMORegistrationPolicy(TMORegistrationPolicy *this)
{
  *(void *)this = &unk_1F20D6D58;
  *((void *)this + 1IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20D6FC0;
  *((void *)this + 2IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20D7008;
  SipBackoffTimer::~SipBackoffTimer((TMORegistrationPolicy *)((char *)this + 2400));
  uint64_t v2 = (void *)*((void *)this + 296);
  if (v2)
  {
    *((void *)this + 297) = v2;
    operator delete(v2);
  }
  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1F20D7020);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20D6D58;
  *((void *)this + 1IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20D6FC0;
  *((void *)this + 2IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20D7008;
  SipBackoffTimer::~SipBackoffTimer((TMORegistrationPolicy *)((char *)this + 2400));
  uint64_t v2 = (void *)*((void *)this + 296);
  if (v2)
  {
    *((void *)this + 297) = v2;
    operator delete(v2);
  }
  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1F20D7020);
  JUMPOUT(0x1C878E320);
}

uint64_t TMORegistrationPolicy::subscriptionRetryTimer(TMORegistrationPolicy *this)
{
  return (uint64_t)this + 2400;
}

char *TMORegistrationPolicy::name(TMORegistrationPolicy *this)
{
  return &TMORegistrationPolicy::kPolicyName;
}

void non-virtual thunk to'TMORegistrationPolicy::~TMORegistrationPolicy(TMORegistrationPolicy *this)
{
  uint64_t v2 = (TMORegistrationPolicy *)((char *)this - 104);
  *((void *)this - 1IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20D6D58;
  *(void *)this = &unk_1F20D6FC0;
  *((void *)this + 10) = &unk_1F20D7008;
  SipBackoffTimer::~SipBackoffTimer((TMORegistrationPolicy *)((char *)this + 2296));
  int v3 = (void *)*((void *)this + 283);
  if (v3)
  {
    *((void *)this + 284) = v3;
    operator delete(v3);
  }
  SipRegistrationPolicy::~SipRegistrationPolicy(v2, (uint64_t *)&off_1F20D7020);
}

{
  SipRegistrationPolicy *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v2 = (TMORegistrationPolicy *)((char *)this - 104);
  *((void *)this - 1IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20D6D58;
  *(void *)this = &unk_1F20D6FC0;
  *((void *)this + 10) = &unk_1F20D7008;
  SipBackoffTimer::~SipBackoffTimer((TMORegistrationPolicy *)((char *)this + 2296));
  int v3 = (void *)*((void *)this + 283);
  if (v3)
  {
    *((void *)this + 284) = v3;
    operator delete(v3);
  }
  SipRegistrationPolicy::~SipRegistrationPolicy(v2, (uint64_t *)&off_1F20D7020);
  JUMPOUT(0x1C878E320);
}

uint64_t HttpClient::HttpClient(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, long long *a5)
{
  *(void *)a1 = &unk_1F20D7660;
  *(void *)(a1 + 8) = &unk_1F20D76D8;
  *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = &unk_1F20D7710;
  *(void *)(a1 + 24) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v8 = *a4;
    *(void *)(a1 + 48) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v8;
  }
  *(void *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = a2;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v9 = *a5;
    *(void *)(a1 + 112) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 9ims::StackConfig::~StackConfig(this + 6) = v9;
  }
  *(_DWORD *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  std::string::basic_string[abi:ne180100]<0>(v14, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v10 = ims::debug((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Creating HttpClient: ", 21);
  *(unsigned char *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  return a1;
}

void sub_1C54F3C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 + 95) < 0) {
    operator delete(*(void **)(v20 + 72));
  }
  if (*(char *)(v20 + 55) < 0) {
    operator delete(*v21);
  }
  _Unwind_Resume(exception_object);
}

void HttpClient::~HttpClient(HttpClient *this)
{
  *(void *)this = &unk_1F20D7660;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20D76D8;
  *((void *)this + 2) = &unk_1F20D7710;
  std::string::basic_string[abi:ne180100]<0>(v6, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Deleting HttpClient: ", 21);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  HttpClient::deinitialize(this);
  int v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    *((void *)this + 18) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
}

{
  uint64_t vars8;

  HttpClient::~HttpClient(this);
  JUMPOUT(0x1C878E320);
}

void HttpClient::deinitialize(HttpClient *this)
{
  uint64_t v2 = *((void *)this + 16);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 88))(v2);
    uint64_t v3 = *((void *)this + 16);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    *((void *)this + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  }
  unint64_t v4 = (HttpStreamPair *)*((void *)this + 8);
  if (v4)
  {
    HttpStreamPair::~HttpStreamPair(v4);
    MEMORY[0x1C878E320]();
    *((void *)this + 8) = 0;
  }
  char v5 = (void *)*((void *)this + 17);
  unint64_t v6 = (void *)*((void *)this + 18);
  if (v5 != v6)
  {
    do
    {
      if (*v5) {
        (*(void (**)(void))(*(void *)*v5 + 8))(*v5);
      }
      ++v5;
    }
    while (v5 != v6);
    char v5 = (void *)*((void *)this + 17);
  }
  *((void *)this + 18) = v5;
  char v7 = (const void *)*((void *)this + 20);
  if (v7)
  {
    CFRelease(v7);
    *((void *)this + 20) = 0;
  }
}

void non-virtual thunk to'HttpClient::~HttpClient(HttpClient *this)
{
}

{
  uint64_t vars8;

  HttpClient::~HttpClient((HttpClient *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void HttpClient::initialize(uint64_t a1, uint64_t a2, const std::string *a3, int a4)
{
  std::string::operator=((std::string *)(a1 + 72), a3);
  *(_DWORD *)(a1 + 120) = a4;
  operator new();
}

void sub_1C54F4250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C878E320](v17, 0x10B3C4074CAE73CLL);
  _Unwind_Resume(a1);
}

uint64_t HttpClient::sendRequest(HttpClient *this, const HttpRequest *a2)
{
  if (CFWriteStreamCanAcceptBytes(*(CFWriteStreamRef *)(*((void *)this + 8) + 40)))
  {
    unint64_t v4 = (HttpRequest *)(*(uint64_t (**)(const HttpRequest *))(*(void *)a2 + 16))(a2);
    HttpClient::_sendRequest(this, v4);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v22, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::info((uint64_t)v22, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Stream not ready for data to be written. Buffering request..", 60);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    uint64_t v6 = (*(uint64_t (**)(const HttpRequest *))(*(void *)a2 + 16))(a2);
    uint64_t v7 = v6;
    long long v9 = (uint64_t *)*((void *)this + 18);
    unint64_t v8 = *((void *)this + 19);
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = (void *)*((void *)this + 17);
      uint64_t v12 = v9 - v11;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v8 - (void)v11;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        if (v15 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v16 = (char *)operator new(8 * v15);
      }
      else
      {
        uint64_t v16 = 0;
      }
      uint64_t v17 = (uint64_t *)&v16[8 * v12];
      *uint64_t v17 = v7;
      uint64_t v10 = v17 + 1;
      if (v9 != v11)
      {
        do
        {
          uint64_t v18 = *--v9;
          *--uint64_t v17 = v18;
        }
        while (v9 != v11);
        long long v9 = (uint64_t *)*((void *)this + 17);
      }
      *((void *)this + 17) = v17;
      *((void *)this + 18) = v10;
      *((void *)this + 19) = &v16[8 * v15];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *long long v9 = v6;
      uint64_t v10 = v9 + 1;
    }
    *((void *)this + 18) = v10;
  }
  return 1;
}

void sub_1C54F4524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HttpClient::_sendRequest(HttpClient *this, HttpRequest *a2)
{
  if (a2)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    HttpMessage::copySerializedMessage(a2, &v13);
    uint64_t v4 = HIBYTE(v15);
    if (v15 < 0) {
      uint64_t v4 = v14;
    }
    if (v4)
    {
      std::string::basic_string[abi:ne180100]<0>(v11, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v5 = ims::debug((uint64_t)v11, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v5 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Sending HTTP request", 20);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (v12 < 0) {
        operator delete(v11[0]);
      }
      HttpClient::_logMsg(this, a2);
      (*(void (**)(void, void **))(**((void **)this + 16) + 136))(*((void *)this + 16), &v13);
      uint64_t v6 = (const void *)*((void *)this + 20);
      if (v6)
      {
        CFRelease(v6);
        *((void *)this + 20) = 0;
      }
      goto LABEL_16;
    }
    std::string::basic_string[abi:ne180100]<0>(v11, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Failed to serialize HTTP request", 32);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    uint64_t v7 = ims::error((uint64_t)&v13, (uint64_t)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"NULL HTTP request!", 18);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
LABEL_16:
  if (SHIBYTE(v15) < 0) {
    operator delete(v13);
  }
}

void sub_1C54F4830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HttpClient::getConnectionServiceType(HttpClient *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7) + 24))();
}

uint64_t non-virtual thunk to'HttpClient::getConnectionServiceType(HttpClient *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 24))();
}

void HttpClient::bytesAvailable(HttpClient *this)
{
  uint64_t v1 = this;
  v53[7] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (const void *)*((void *)this + 16);
  if (v2)
  {
    if (v3)
    {
      uint64_t v4 = v3;
      if (((*(uint64_t (**)(void *))(*(void *)v3 + 104))(v3) & 1) == 0
        && !(*(unsigned int (**)(void *))(*(void *)v4 + 112))(v4))
      {
        *((_WORD *)v1 + 84) = (*(uint64_t (**)(void *))(*(void *)v4 + 120))(v4);
        std::string::basic_string[abi:ne180100]<0>(&v52, (char *)kXcapLoggingFacility);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v5 = ims::debug((uint64_t)&v52, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)": ", 2);
        *(unsigned char *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Negotiated Cipher: ", 19);
        *(unsigned char *)(v5 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v5 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v5 + 17) = 0;
        if (v49 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  memset(&v47, 0, sizeof(v47));
  int v6 = (*(uint64_t (**)(void, std::string *))(**((void **)v1 + 16) + 128))(*((void *)v1 + 16), &v47);
  std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v47.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)&v52, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"***** INCOMING DATA *****", 25);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v52, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::debug((uint64_t)&v52, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 32))(v9, &v47);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v52, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::debug((uint64_t)&v52, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"*************************", 25);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v46, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
    }
    else {
      std::string v46 = v47;
    }
    unint64_t v50 = 0;
    uint64_t v51 = 0;
    if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_22, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&_MergedGlobals_22))
    {
      uint64_t v42 = v1;
      int v43 = v6;
      std::string::basic_string[abi:ne180100]<0>(&v52, "1.0");
      std::string::basic_string[abi:ne180100]<0>(v53, "1.1");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)&qword_1EBBDC418, (long long *)&v52, 2uLL);
      for (uint64_t i = 0; i != -6; i -= 3)
      {
        if (SHIBYTE(v53[i + 2]) < 0) {
          operator delete(*(void **)((char *)&v52 + i * 8 + 24));
        }
      }
      __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &qword_1EBBDC418, &dword_1C51D1000);
      __cxa_guard_release(&_MergedGlobals_22);
      int v6 = v43;
      uint64_t v1 = v42;
    }
    int v45 = v6;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    {
      char v12 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if (v46.__r_.__value_.__l.__size_ >= 4) {
        size_t v11 = 4;
      }
      else {
        size_t v11 = v46.__r_.__value_.__l.__size_;
      }
    }
    else
    {
      if ((*((unsigned char *)&v46.__r_.__value_.__s + 23) & 0xFC) != 0) {
        size_t v11 = 4;
      }
      else {
        size_t v11 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      char v12 = &v46;
    }
    int v13 = memcmp(v12, "HTTP", v11);
    BOOL v14 = v11 >= 4 && v13 == 0;
    if (!v14 || (uint64_t v15 = qword_1EBBDC418, v16 = unk_1EBBDC420, qword_1EBBDC418 == unk_1EBBDC420))
    {
LABEL_80:
      uint64_t v28 = (__CFHTTPMessage *)*((void *)v1 + 20);
      if (!v28)
      {
        std::string::basic_string[abi:ne180100]<0>(&v52, (char *)kXcapLoggingFacility);
        int v6 = v45;
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v32 = ims::error((uint64_t)&v52, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)": ", 2);
        *(unsigned char *)(v32 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"Ignoring body without HTTP response", 35);
        *(unsigned char *)(v32 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v32 + 17) = 0;
        if (v49 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        uint64_t v33 = *((void *)v1 + 7);
        v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
        v52.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
        LODWORD(v52.__r_.__value_.__r.__words[2]) = 0x40000000;
        memset(v53, 0, 48);
        (*(void (**)(uint64_t, HttpClient *, std::string *))(*(void *)v33 + 64))(v33, v1, &v52);
        ImsResult::~ImsResult((ImsResult *)&v52);
        goto LABEL_103;
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v29 = &v46;
      }
      else {
        std::string v29 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex v30 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex v30 = v46.__r_.__value_.__l.__size_;
      }
      CFHTTPMessageAppendBytes(v28, (const UInt8 *)v29, v30);
      int v6 = v45;
      if (CFHTTPMessageIsHeaderComplete(*((CFHTTPMessageRef *)v1 + 20)))
      {
        if (!HttpClient::_isFullBodyPresentInMessage((CFHTTPMessageRef *)v1, (__CFHTTPMessage *)&v51, (CFIndex *)&v50, v31))goto LABEL_128; {
        goto LABEL_89;
        }
      }
    }
    else
    {
      while (1)
      {
        memset(&v52, 0, sizeof(v52));
        if (*(char *)(v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)v15, *(void *)(v15 + 8));
        }
        else
        {
          long long v17 = *(_OWORD *)v15;
          v52.__r_.__value_.__r.__words[2] = *(void *)(v15 + 16);
          *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v17;
        }
        int v18 = SHIBYTE(v52.__r_.__value_.__r.__words[2]);
        std::string::size_type v19 = (void *)v52.__r_.__value_.__r.__words[0];
        std::string::size_type v20 = (v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v52.__r_.__value_.__r.__words[2])
            : v52.__r_.__value_.__l.__size_;
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v20 == -1 || v46.__r_.__value_.__l.__size_ < 5) {
LABEL_130:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          size_t v22 = v46.__r_.__value_.__l.__size_ - 5 >= v20 ? v20 : v46.__r_.__value_.__l.__size_ - 5;
          char v23 = (std::string::value_type *)(v46.__r_.__value_.__r.__words[0] + 5);
        }
        else
        {
          if (v20 == -1 || HIBYTE(v46.__r_.__value_.__r.__words[2]) < 5u) {
            goto LABEL_130;
          }
          size_t v22 = (unint64_t)HIBYTE(v46.__r_.__value_.__r.__words[2]) - 5 >= v20
              ? v20
              : HIBYTE(v46.__r_.__value_.__r.__words[2]) - 5;
          char v23 = &v46.__r_.__value_.__s.__data_[5];
        }
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v25 = &v52;
        }
        else {
          long long v25 = (std::string *)v52.__r_.__value_.__r.__words[0];
        }
        BOOL v27 = !memcmp(v23, v25, v22) && v22 == v20;
        if (v18 < 0) {
          operator delete(v19);
        }
        if (v27) {
          break;
        }
        v15 += 24;
        if (v15 == v16) {
          goto LABEL_80;
        }
      }
      if (*((void *)v1 + 20))
      {
        std::string::basic_string[abi:ne180100]<0>(&v52, (char *)kXcapLoggingFacility);
        int v6 = v45;
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v34 = ims::error((uint64_t)&v52, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)": ", 2);
        *(unsigned char *)(v34 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"Ignoring HTTP response since one is already pending", 51);
        *(unsigned char *)(v34 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_99;
      }
      Empty = CFHTTPMessageCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      int v6 = v45;
      *((void *)v1 + 20) = Empty;
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v39 = &v46;
      }
      else {
        BOOL v39 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex v40 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex v40 = v46.__r_.__value_.__l.__size_;
      }
      CFHTTPMessageAppendBytes(Empty, (const UInt8 *)v39, v40);
      if (CFHTTPMessageIsHeaderComplete(*((CFHTTPMessageRef *)v1 + 20)))
      {
        if (!HttpClient::_isFullBodyPresentInMessage((CFHTTPMessageRef *)v1, (__CFHTTPMessage *)&v51, (CFIndex *)&v50, v41))
        {
LABEL_128:
          std::string::basic_string[abi:ne180100]<0>(&v52, (char *)kXcapLoggingFacility);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v34 = ims::debug((uint64_t)&v52, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)": ", 2);
          *(unsigned char *)(v34 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"HTTP response doesn't have full body. Waiting for more data. Expected:", 70);
          *(unsigned char *)(v34 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v34 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)", Actual:", 9);
          *(unsigned char *)(v34 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v34 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_99;
        }
LABEL_89:
        HttpClient::_handleHttpResponse(v1, *((__CFHTTPMessage **)v1 + 20));
LABEL_103:
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        goto LABEL_105;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v52, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v34 = ims::warn((uint64_t)&v52, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v34 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"Incomplete headers for HTTP response. Waiting for more data", 59);
    *(unsigned char *)(v34 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_99:
    *(unsigned char *)(v34 + 17) = 0;
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    goto LABEL_103;
  }
LABEL_105:
  if (v6 != -9805 && v6 != -9803 && v6 != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v37 = ims::error((uint64_t)&v52, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v37 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"App data read from transport failed. Error: ", 44);
    *(unsigned char *)(v37 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v37 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v37 + 17) = 0;
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
}

void sub_1C54F56E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v39 = 0;
  while (1)
  {
    if (*(char *)(v37 + v39 + 47) < 0) {
      operator delete(*(void **)(v37 + v39 + 24));
    }
    v39 -= 24;
    if (v39 == -48)
    {
      __cxa_guard_abort(&_MergedGlobals_22);
      if (a16 < 0) {
        operator delete(__p);
      }
      if (a23 < 0) {
        operator delete(a18);
      }
      _Unwind_Resume(a1);
    }
  }
}

void non-virtual thunk to'HttpClient::bytesAvailable(HttpClient *this)
{
}

void HttpClient::canAcceptBytes(HttpClient *this)
{
  uint64_t v2 = (const void *)*((void *)this + 16);
  if (v2)
  {
    if (v3)
    {
      uint64_t v4 = v3;
      if (((*(uint64_t (**)(void *))(*(void *)v3 + 104))(v3) & 1) == 0
        && !(*(unsigned int (**)(void *))(*(void *)v4 + 112))(v4))
      {
        *((_WORD *)this + 84) = (*(uint64_t (**)(void *))(*(void *)v4 + 120))(v4);
        std::string::basic_string[abi:ne180100]<0>(v11, (char *)kXcapLoggingFacility);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v5 = ims::debug((uint64_t)v11, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)": ", 2);
        *(unsigned char *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Negotiated Cipher: ", 19);
        *(unsigned char *)(v5 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v5 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v5 + 17) = 0;
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        if (v12 < 0) {
          operator delete(v11[0]);
        }
      }
    }
  }
  if ((*(unsigned int (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16)))
  {
    int v6 = (HttpRequest **)*((void *)this + 17);
    uint64_t v7 = (HttpRequest **)*((void *)this + 18);
    if (v6 != v7)
    {
      do
      {
        uint64_t v8 = *v6;
        HttpClient::_sendRequest(this, *v6);
        if (v8) {
          (*(void (**)(HttpRequest *))(*(void *)v8 + 8))(v8);
        }
        ++v6;
      }
      while (v6 != v7);
      int v6 = (HttpRequest **)*((void *)this + 17);
    }
    *((void *)this + 18) = v6;
  }
}

void sub_1C54F5AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'HttpClient::canAcceptBytes(HttpClient *this)
{
}

void HttpClient::errorOccured(uint64_t a1, int a2, __CFError *a3)
{
  if (a2) {
    uint64_t v5 = "Write";
  }
  else {
    uint64_t v5 = "Read";
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, v5);
  int v6 = std::string::append(&v15, "Stream Callback", 0xFuLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  std::string::size_type v20 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string::size_type v19 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if (!a3) {
      goto LABEL_24;
    }
  }
  else if (!a3)
  {
    goto LABEL_24;
  }
  memset(&v15, 0, sizeof(v15));
  memset(&v25, 0, sizeof(v25));
  CFStringRef Domain = CFErrorGetDomain(a3);
  if (Domain) {
    ims::convertCFString(Domain, &v15, 0x8000100u);
  }
  CFErrorGetCode(a3);
  CFStringRef v9 = CFErrorCopyFailureReason(a3);
  CFStringRef v10 = v9;
  if (v9)
  {
    ims::convertCFString(v9, &v25, 0x8000100u);
    CFRelease(v10);
  }
  std::string::basic_string[abi:ne180100]<0>(v23, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::error((uint64_t)v23, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Error while connecting to ", 26);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 32))(v11, a1 + 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)":", 1);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v23, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v12 = ims::error((uint64_t)v23, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Context: ", 9);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 32))(v12, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" - Domain: ", 11);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v12 + 32))(v12, &v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)", Code: ", 8);
  *(unsigned char *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)", Reason: ", 10);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v12 + 32))(v12, &v25);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
LABEL_24:
  uint64_t v13 = *(void *)(a1 + 56);
  int Code = CFErrorGetCode(a3);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)&_posixDomain;
  LODWORD(v15.__r_.__value_.__r.__words[2]) = Code;
  (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v13 + 64))(v13, a1, &v15);
  ImsResult::~ImsResult((ImsResult *)&v15);
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[0]);
  }
}

void sub_1C54F5F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'HttpClient::errorOccured(uint64_t a1, int a2, __CFError *a3)
{
}

void HttpClient::endEncountered(uint64_t a1, int a2)
{
  std::string::basic_string[abi:ne180100]<0>(v9, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v7, "");
  uint64_t v3 = ims::debug((uint64_t)v9, (uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"End of ", 7);
  *(unsigned char *)(v3 + 17) = 0;
  if (a2) {
    uint64_t v4 = "Write";
  }
  else {
    uint64_t v4 = "Read";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 32))(v3, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" stream", 7);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_1C54F6164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void HttpClient::_logMsg(HttpClient *this, const HttpMessage *a2)
{
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  HttpMessage::copySerializedMessage(a2, &v57);
  int v4 = (*(uint64_t (**)(const HttpMessage *))(*(void *)a2 + 24))(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(&v54, "");
  uint64_t v5 = ims::debug((uint64_t)__p, (uint64_t)&v54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if ((char)v56 < 0) {
    operator delete(v54.__locale_);
  }
  if (SBYTE7(v46) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v53 = 0;
  long long v51 = 0u;
  memset(v52, 0, sizeof(v52));
  *(_OWORD *)char v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v46 = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"==================== ", 21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"[SID:", 5);
  long long v7 = (void *)std::ostream::operator<<();
  int v8 = *((char *)this + 55);
  if (v8 >= 0) {
    CFStringRef v9 = (char *)this + 32;
  }
  else {
    CFStringRef v9 = (char *)*((void *)this + 4);
  }
  if (v8 >= 0) {
    uint64_t v10 = *((unsigned __int8 *)this + 55);
  }
  else {
    uint64_t v10 = *((void *)this + 5);
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] ", 2);
  if (*((unsigned char *)this + 124)) {
    uint64_t v13 = "HTTPS";
  }
  else {
    uint64_t v13 = "HTTP";
  }
  if (*((unsigned char *)this + 124)) {
    uint64_t v14 = 5;
  }
  else {
    uint64_t v14 = 4;
  }
  std::string v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  if (v4) {
    long long v16 = " Request ";
  }
  else {
    long long v16 = " Response ";
  }
  if (v4) {
    uint64_t v17 = 9;
  }
  else {
    uint64_t v17 = 10;
  }
  long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  HttpStreamPair::localHostPortInfo(*((HttpStreamPair **)this + 8), &v54);
  if ((v56 & 0x80u) == 0) {
    locale = &v54;
  }
  else {
    locale = v54.__locale_;
  }
  if ((v56 & 0x80u) == 0) {
    uint64_t v20 = v56;
  }
  else {
    uint64_t v20 = v55;
  }
  uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)locale, v20);
  if (v4) {
    char v22 = " -----> ";
  }
  else {
    char v22 = " <----- ";
  }
  char v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, 8);
  HttpStreamPair::remoteHostPortInfo(*((HttpStreamPair **)this + 8), v43);
  if ((v44 & 0x80u) == 0) {
    char v24 = v43;
  }
  else {
    char v24 = (void **)v43[0];
  }
  if ((v44 & 0x80u) == 0) {
    uint64_t v25 = v44;
  }
  else {
    uint64_t v25 = (uint64_t)v43[1];
  }
  long long v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
  BOOL v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" [", 2);
  int v28 = *((char *)this + 95);
  if (v28 >= 0) {
    std::string v29 = (char *)this + 72;
  }
  else {
    std::string v29 = (char *)*((void *)this + 9);
  }
  if (v28 >= 0) {
    uint64_t v30 = *((unsigned __int8 *)this + 95);
  }
  else {
    uint64_t v30 = *((void *)this + 10);
  }
  uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)":", 1);
  uint64_t v32 = (void *)std::ostream::operator<<();
  uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"] ====================", 22);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
  uint64_t v34 = std::locale::use_facet((const std::locale *)v41, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale((std::locale *)v41);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v44 < 0) {
    operator delete(v43[0]);
  }
  if ((char)v56 < 0) {
    operator delete(v54.__locale_);
  }
  if (v59 >= 0) {
    unint64_t v35 = (void **)&v57;
  }
  else {
    unint64_t v35 = v57;
  }
  if (v59 >= 0) {
    uint64_t v36 = HIBYTE(v59);
  }
  else {
    uint64_t v36 = v58;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v35, v36);
  std::ios_base::getloc((const std::ios_base *)((char *)__p + *((void *)__p[0] - 3)));
  uint64_t v37 = std::locale::use_facet(&v54, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
  std::locale::~locale(&v54);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"==============================================================================================================================================", 142);
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
  uint64_t v39 = std::locale::use_facet(&v54, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v54);
  std::ostream::put();
  std::ostream::flush();
  std::string::basic_string[abi:ne180100]<0>(&v54, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v43, "");
  CFIndex v40 = (unsigned char *)ims::debug((uint64_t)&v54, (uint64_t)v43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v40 + 1), (uint64_t)": ", 2);
  v40[17] = 0;
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v40[17] = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], v41);
  (*(void (**)(unsigned char *, void **))(*(void *)v40 + 32))(v40, v41);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v40[17] = 0;
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  if ((char)v44 < 0) {
    operator delete(v43[0]);
  }
  if ((char)v56 < 0) {
    operator delete(v54.__locale_);
  }
  __p[0] = *(void **)MEMORY[0x1E4FBA418];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
  if (SHIBYTE(v50) < 0) {
    operator delete(v49[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C878E270](v52);
  if (SHIBYTE(v59) < 0) {
    operator delete(v57);
  }
}

void sub_1C54F687C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 81) < 0) {
    operator delete(*(void **)(v26 - 104));
  }
  std::ostringstream::~ostringstream((uint64_t)&a21);
  if (*(char *)(v26 - 57) < 0) {
    operator delete(*(void **)(v26 - 80));
  }
  _Unwind_Resume(a1);
}

BOOL HttpClient::_isFullBodyPresentInMessage(CFHTTPMessageRef *this, __CFHTTPMessage *a2, CFIndex *a3, unint64_t *a4)
{
  CFStringRef v7 = CFHTTPMessageCopyHeaderFieldValue(this[20], @"Content-Length");
  v14[0] = &unk_1F20E3908;
  v14[1] = v7;
  if (!v7)
  {
    ims::CFType::~CFType((ims::CFType *)v14);
    *(void *)a2 = 0;
    return 1;
  }
  ims::CFString::asString(v7, (const void *)0x8000100, &__str);
  int v8 = std::stoi(&__str, 0, 10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  ims::CFType::~CFType((ims::CFType *)v14);
  *(void *)a2 = v8;
  if (!v8) {
    return 1;
  }
  CFDataRef v9 = CFHTTPMessageCopyBody(this[20]);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20D2EE0;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  if (v9)
  {
    CFIndex Length = CFDataGetLength(v9);
    *a3 = Length;
    BOOL v11 = Length == *(void *)a2;
  }
  else
  {
    BOOL v11 = 0;
  }
  ims::CFType::~CFType((ims::CFType *)&__str);
  return v11;
}

void sub_1C54F6A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void HttpClient::_handleHttpResponse(HttpClient *this, __CFHTTPMessage *a2)
{
  *(_OWORD *)uint64_t v14 = 0u;
  long long v15 = 0u;
  memset(v13, 0, sizeof(v13));
  std::string::basic_string[abi:ne180100]<0>(&__p, "1.1");
  HttpMessage::HttpMessage(v13, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)&v13[0] = &unk_1F20CCA78;
  v14[1] = 0;
  long long v15 = 0uLL;
  v14[0] = (void *)CFHTTPMessageGetResponseStatusCode(a2);
  if ((HttpMessage::deserialize((HttpMessage *)v13, a2) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&v23, "");
    uint64_t v7 = ims::error((uint64_t)&__p, (uint64_t)&v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Failed to deserialize Http response", 35);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_12;
  }
  HttpClient::_logMsg(this, (const HttpMessage *)v13);
  int v4 = (char *)v14[0];
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(&v23, "");
  uint64_t v5 = ims::debug((uint64_t)&__p, (uint64_t)&v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Received ", 9);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" response", 9);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((unint64_t)(v4 - 200) <= 0x63)
  {
    uint64_t v6 = *((void *)this + 7);
    if (SHIBYTE(v13[4]) < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)&v13[3] + 1), *(std::string::size_type *)&v13[4]);
    }
    else {
      std::string __p = *(std::string *)((char *)&v13[3] + 8);
    }
    (*(void (**)(uint64_t, HttpClient *, std::string *))(*(void *)v6 + 40))(v6, this, &__p);
LABEL_29:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    CFDataRef v9 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_31;
  }
  if ((unint64_t)(v4 - 300) <= 0x63)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::basic_string[abi:ne180100]<0>(&v23, "Location");
    HttpMessage::findHeader((uint64_t)v13, (uint64_t)&v23, &__p);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v23, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&v22, "");
    uint64_t v8 = ims::debug((uint64_t)&v23, (uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"HTTP request to be redirected: ", 31);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    (*(void (**)(void, HttpClient *, std::string *))(**((void **)this + 7) + 56))(*((void *)this + 7), this, &__p);
    goto LABEL_29;
  }
  if (v4 != (char *)407 && v4 != (char *)401)
  {
    if ((unint64_t)(v4 - 400) <= 0x12B)
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&SipResultDomain::_domain;
      LODWORD(__p.__r_.__value_.__r.__words[2]) = v4;
      (*(void (**)(void, HttpClient *, std::string *))(**((void **)this + 7) + 64))(*((void *)this + 7), this, &__p);
      ImsResult::~ImsResult((ImsResult *)&__p);
      goto LABEL_32;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&v23, "");
    uint64_t v7 = ims::debug((uint64_t)&__p, (uint64_t)&v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"HTTP Response code ", 19);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" not handled", 12);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_12:
    *(unsigned char *)(v7 + 17) = 0;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    goto LABEL_29;
  }
  memset(&v23, 0, sizeof(v23));
  memset(&v22, 0, sizeof(v22));
  if (v14[0] == (void *)407)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "Proxy-Authenticate");
    HttpMessage::findHeader((uint64_t)v13, (uint64_t)v20, &__p);
  }
  else
  {
    if (v14[0] != (void *)401) {
      goto LABEL_40;
    }
    std::string::basic_string[abi:ne180100]<0>(v20, "WWW-Authenticate");
    HttpMessage::findHeader((uint64_t)v13, (uint64_t)v20, &__p);
  }
  std::string v23 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 2IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (v21 < 0) {
    operator delete(v20[0]);
  }
LABEL_40:
  std::string::basic_string[abi:ne180100]<0>(v20, "Set-Cookie");
  HttpMessage::findHeader((uint64_t)v13, (uint64_t)v20, &__p);
  std::string v22 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 2IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v23.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    (*(void (**)(void, HttpClient *, std::string *, std::string *))(**((void **)this + 7) + 48))(*((void *)this + 7), this, &v23, &v22);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v20, "");
    uint64_t v11 = ims::error((uint64_t)&__p, (uint64_t)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Challenge response doesn't have WWW/Proxy authentication header", 63);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v12 = *((void *)this + 7);
    long long v19 = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 0x40000000;
    long long v18 = 0uLL;
    long long v17 = 0uLL;
    (*(void (**)(uint64_t, HttpClient *, std::string *))(*(void *)v12 + 64))(v12, this, &__p);
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    CFDataRef v9 = (void *)v23.__r_.__value_.__r.__words[0];
LABEL_31:
    operator delete(v9);
  }
LABEL_32:
  *(void *)&v13[0] = &unk_1F20CCA78;
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[1]);
  }
  HttpMessage::~HttpMessage((void **)v13);
}

void sub_1C54F72E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  HttpResponse::~HttpResponse((void **)&a9);
  _Unwind_Resume(a1);
}

uint64_t HttpClient::readDataFromStream(HttpStreamPair **this, void *a2, unint64_t *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v10, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"readDataFromStream: Expected length: ", 37);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  return HttpStreamPair::readData(this[8], a2, a3);
}

void sub_1C54F7548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'HttpClient::readDataFromStream(HttpStreamPair **this, void *a2, unint64_t *a3)
{
  return HttpClient::readDataFromStream(this - 1, a2, a3);
}

uint64_t HttpClient::writeDataToStream(HttpStreamPair **this, const UInt8 *a2, CFIndex *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v10, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"writeDataToStream: Max length: ", 31);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  return HttpStreamPair::writeData(this[8], a2, a3);
}

void sub_1C54F7698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'HttpClient::writeDataToStream(HttpStreamPair **this, const UInt8 *a2, CFIndex *a3)
{
  return HttpClient::writeDataToStream(this - 1, a2, a3);
}

void HttpClient::onConnected(HttpClient *this)
{
  *((_WORD *)this + 84) = (*(uint64_t (**)(void))(**((void **)this + 16) + 120))(*((void *)this + 16));
  std::string::basic_string[abi:ne180100]<0>(v8, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Negotiated Cipher: ", 19);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v3 = (HttpRequest **)*((void *)this + 17);
  int v4 = (HttpRequest **)*((void *)this + 18);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      HttpClient::_sendRequest(this, *v3);
      if (v5) {
        (*(void (**)(HttpRequest *))(*(void *)v5 + 8))(v5);
      }
      ++v3;
    }
    while (v3 != v4);
    uint64_t v3 = (HttpRequest **)*((void *)this + 17);
  }
  *((void *)this + 18) = v3;
}

void sub_1C54F7858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'HttpClient::onConnected(HttpClient *this)
{
}

uint64_t HttpClient::fetchNegotiatedCipher(HttpClient *this)
{
  return *((unsigned __int16 *)this + 84);
}

void AVCRTPStackController::initialize(uint64_t a1, long long *a2, char a3)
{
  v54[1] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 80))(a1))
  {
    long long task_info_out = 0uLL;
    *(void *)&long long v45 = 0;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&task_info_out, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long task_info_out = *a2;
      *(void *)&long long v45 = *((void *)a2 + 2);
    }
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 3321888768;
    v48[2] = ___ZN21AVCRTPStackController10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh_block_invoke;
    v48[3] = &__block_descriptor_65_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e5_v8__0l;
    v48[4] = a1;
    if (SBYTE7(v45) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, (const std::string::value_type *)task_info_out, *((std::string::size_type *)&task_info_out + 1));
    }
    else
    {
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = task_info_out;
      v49.__r_.__value_.__r.__words[2] = v45;
    }
    char v50 = a3;
    ims::performBlock((IMSClientManager *)v48);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v10 = (void *)v49.__r_.__value_.__r.__words[0];
LABEL_74:
      operator delete(v10);
      goto LABEL_75;
    }
    goto LABEL_75;
  }
  std::string::basic_string[abi:ne180100]<0>(&task_info_out, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&task_info_out, (uint64_t)__p);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" created", 8);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v45) < 0) {
    operator delete((void *)task_info_out);
  }
  char v9 = (void *)MEMORY[0x1C878EAB0](v8);
  long long task_info_out = 0u;
  long long v45 = 0u;
  task_info_outCnt[0] = 8;
  if (!task_info(*MEMORY[0x1E4F14960], 0xFu, (task_info_t)&task_info_out, task_info_outCnt)
    && (uint64_t v11 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&task_info_out length:32]) != 0
    && (uint64_t v12 = *MEMORY[0x1E4F767C8]) != 0
    && (uint64_t v13 = *MEMORY[0x1E4F767D0]) != 0
    && (uint64_t v14 = *MEMORY[0x1E4F761A8]) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(v42, "");
    uint64_t v15 = ims::debug((uint64_t)__p, (uint64_t)v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"initialize", 10);
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" [HostProcessAttribution=", 25);
    *(unsigned char *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" AuditToken=", 12);
    *(unsigned char *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" BundleID=", 10);
    *(unsigned char *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (v43 < 0) {
      operator delete(v42[0]);
    }
    if (v47 < 0) {
      operator delete(__p[0]);
    }
    v51[0] = v12;
    v51[1] = v13;
    v52[0] = v11;
    v52[1] = @"com.apple.mobilephone";
    uint64_t v53 = v14;
    v54[0] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v52 forKeys:v51 count:2];
    uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v54 forKeys:&v53 count:1];
    [MEMORY[0x1E4F47900] setAudioSessionProperties:v16];
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(v42, "");
    uint64_t v17 = ims::error((uint64_t)__p, (uint64_t)v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"initialize", 10);
    *(unsigned char *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" auditTokenData is null", 23);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    if (v43 < 0) {
      operator delete(v42[0]);
    }
    if (v47 < 0) {
      operator delete(__p[0]);
    }
  }
  long long v18 = (void *)[MEMORY[0x1E4F47930] getDaemonProcessInfo];
  long long v19 = (capabilities::radio *)objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", *MEMORY[0x1E4F478F8]), "longLongValue");
  *(void *)(a1 + 120) = v19;
  if (!*(unsigned char *)(a1 + 161) || *(unsigned char *)(a1 + 160) || !capabilities::radio::mav20Plus(v19)) {
    goto LABEL_65;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ims::AVCRTPStackController::Audio");
  uint64_t v20 = sImsDispatchQueue;
  if (sImsDispatchQueue)
  {
    dispatch_object_t object = (dispatch_object_t)sImsDispatchQueue;
  }
  else
  {
    uint64_t v20 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v20;
    dispatch_object_t object = v20;
    if (!v20) {
      goto LABEL_36;
    }
  }
  dispatch_retain(v20);
LABEL_36:
  std::string::basic_string[abi:ne180100]<0>(v42, "ims");
  char v21 = *(std::__shared_weak_count **)(a1 + 16);
  if (v21)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v39 = 0;
    CFIndex v40 = 0;
    std::string v23 = std::__shared_weak_count::lock(v21);
    char v24 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v25 = v40;
    uint64_t v39 = v22;
    CFIndex v40 = v24;
    if (v25) {
      std::__shared_weak_count::__release_weak(v25);
    }
    std::__shared_weak_count::__release_weak(v21);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
  }
  else
  {
    uint64_t v39 = 0;
    CFIndex v40 = 0;
  }
  IPTelephonyManager::getInstance((uint64_t *)task_info_outCnt);
  IPTelephonyManager::getBBServerConnection(*(IPTelephonyManager **)task_info_outCnt, &v37);
  qmi::Client::createWithQueueLocal();
  long long v26 = v45;
  long long v45 = 0uLL;
  BOOL v27 = *(std::__shared_weak_count **)(a1 + 152);
  *(_OWORD *)(a1 + 144) = v26;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  qmi::Client::~Client((qmi::Client *)&task_info_out);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (v40) {
    std::__shared_weak_count::__release_weak(v40);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  if (*(void *)(a1 + 144))
  {
    std::string::basic_string[abi:ne180100]<0>(&task_info_out, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v28 = ims::debug((uint64_t)&task_info_out, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"AVC AUDIO client successfully created", 37);
    *(unsigned char *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v28 + 17) = 0;
    if (v47 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v45) < 0) {
      operator delete((void *)task_info_out);
    }
    qmi::Client::start((qmi::Client *)(a1 + 128));
    *(unsigned char *)(a1 + 160) = 1;
LABEL_65:
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, 2);
    char v29 = 1;
    goto LABEL_66;
  }
  std::string::basic_string[abi:ne180100]<0>(&task_info_out, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v30 = ims::error((uint64_t)&task_info_out, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"AVC Audio client creation failed", 32);
  *(unsigned char *)(v30 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v30 + 17) = 0;
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v45) < 0) {
    operator delete((void *)task_info_out);
  }
  char v29 = 0;
LABEL_66:
  long long task_info_out = 0uLL;
  *(void *)&long long v45 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&task_info_out, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long task_info_out = *a2;
    *(void *)&long long v45 = *((void *)a2 + 2);
  }
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3321888768;
  v31[2] = ___ZN21AVCRTPStackController10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh_block_invoke_17;
  v31[3] = &__block_descriptor_66_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e5_v8__0l;
  v31[4] = a1;
  if (SBYTE7(v45) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)task_info_out, *((std::string::size_type *)&task_info_out + 1));
  }
  else
  {
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = task_info_out;
    v32.__r_.__value_.__r.__words[2] = v45;
  }
  char v33 = a3;
  char v34 = v29;
  ims::performBlock((IMSClientManager *)v31);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v10 = (void *)v32.__r_.__value_.__r.__words[0];
    goto LABEL_74;
  }
LABEL_75:
  if (SBYTE7(v45) < 0) {
    operator delete((void *)task_info_out);
  }
}

void sub_1C54F81CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,dispatch_object_t object,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21AVCRTPStackController10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[4];
  if (v3)
  {
    int v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (void (***)(void, uint64_t *, uint64_t, uint64_t, void *))v2[3];
      if (v6)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v16, v2 + 1);
        uint64_t v7 = *(unsigned __int8 *)(a1 + 64);
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        v8[0] = &unk_1F20B2680;
        v8[1] = &_bambiDomain;
        int v9 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        (**v6)(v6, &v16, a1 + 40, v7, v8);
        ImsResult::~ImsResult((ImsResult *)v8);
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C54F83D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 - 40);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

uint64_t AVCRTPStackController::getClientUniquePID(AVCRTPStackController *this)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F47930] getDaemonProcessInfo];
  uint64_t result = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F478F8]), "longLongValue");
  *((void *)this + 15) = result;
  return result;
}

void ___ZN21AVCRTPStackController10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh_block_invoke_17(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  long long v3 = (std::__shared_weak_count *)v2[4];
  if (v3)
  {
    int v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (void (***)(void, uint64_t *, uint64_t, uint64_t, void *))v2[3];
      if (v6)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v17, v2 + 1);
        uint64_t v7 = *(unsigned __int8 *)(a1 + 64);
        int v8 = *(unsigned char *)(a1 + 65) == 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        v9[0] = &unk_1F20B2680;
        v9[1] = &_bambiDomain;
        int v10 = v8 << 30;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        (**v6)(v6, &v17, a1 + 40, v7, v9);
        ImsResult::~ImsResult((ImsResult *)v9);
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C54F859C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 - 40);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void AVCRTPStackController::~AVCRTPStackController(AVCRTPStackController *this)
{
  *(void *)this = &unk_1F20D7920;
  std::string::basic_string[abi:ne180100]<0>(v5, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"~AVCRTPStackController", 22);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  qmi::Client::~Client((qmi::Client *)((char *)this + 128));
  std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::destroy((uint64_t)this + 96, *((void **)this + 13));
  std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  RTPStackController::~RTPStackController((RTPStackController *)this);
}

{
  uint64_t vars8;

  AVCRTPStackController::~AVCRTPStackController(this);
  JUMPOUT(0x1C878E320);
}

uint64_t AVCRTPStackController::getClientUniquePIDStatic(AVCRTPStackController *this)
{
  uint64_t v1 = (void *)[MEMORY[0x1E4F47930] getDaemonProcessInfo];
  uint64_t v2 = (void *)[v1 objectForKeyedSubscript:*MEMORY[0x1E4F478F8]];
  return [v2 longLongValue];
}

void AVCRTPStackController::sendNotifyIpVersionReq(uint64_t a1, uint64_t *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v26, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v26, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  char v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"sendNotifyIpVersionReq", 22);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (*(unsigned char *)(a1 + 160))
  {
    int v8 = (std::__shared_weak_count *)a2[1];
    if (v8)
    {
      int v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        uint64_t v10 = *a2;
        if (*a2)
        {
          if (*(unsigned char *)(v10 + 584))
          {
            uint64_t v11 = v10 + 152;
          }
          else
          {
            if (!*(unsigned char *)(v10 + 1328))
            {
              std::string::basic_string[abi:ne180100]<0>(v26, "avc.rtp.controller");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v22 = ims::warn((uint64_t)v26, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Not enough information to configure with", 40);
              *(unsigned char *)(v22 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v22 + 17) = 0;
              if (v25 < 0) {
                operator delete(__p[0]);
              }
              if (v27 < 0) {
                operator delete(v26[0]);
              }
LABEL_52:
              std::__shared_weak_count::__release_shared[abi:ne180100](v9);
              return;
            }
            uint64_t v11 = v10 + 1032;
          }
          uint64_t v14 = *(void *)(v11 + 8);
          uint64_t v15 = *(std::__shared_weak_count **)(v11 + 16);
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!v14)
          {
            std::string::basic_string[abi:ne180100]<0>(v26, "avc.rtp.controller");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v21 = ims::error((uint64_t)v26, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"local address is null", 21);
            *(unsigned char *)(v21 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v21 + 17) = 0;
            if (v25 < 0) {
              operator delete(__p[0]);
            }
            if (v27 < 0) {
              operator delete(v26[0]);
            }
            goto LABEL_49;
          }
          uint64_t v16 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 128))(v14);
          uint64_t v17 = v16[23];
          if ((v17 & 0x80u) == 0) {
            uint64_t v18 = v16[23];
          }
          else {
            uint64_t v18 = *((void *)v16 + 1);
          }
          if (v18 == 3)
          {
            if ((v17 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v16, &IpAddress::kAddressTypeIPv6, *((void *)v16 + 1))) {
                int v20 = 1;
              }
              else {
                int v20 = 2;
              }
              goto LABEL_48;
            }
            if (!v16[23])
            {
LABEL_35:
              int v20 = 1;
LABEL_48:
              std::string v23 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v10 + 128));
              AVCRTPStackController::sendNotifyIpVersionReq((AVCRTPStackController *)a1, *(_DWORD *)(*(void *)(v10 + 120) + 4100), v20);
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
LABEL_49:
              if (v15) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v15);
              }
              goto LABEL_51;
            }
            long long v19 = &IpAddress::kAddressTypeIPv6;
            while (*v16 == *(unsigned __int8 *)v19)
            {
              ++v16;
              long long v19 = (long long *)((char *)v19 + 1);
              if (!--v17) {
                goto LABEL_35;
              }
            }
          }
          int v20 = 2;
          goto LABEL_48;
        }
      }
    }
    else
    {
      int v9 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(v26, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v13 = ims::error((uint64_t)v26, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"SDPSession expired in AVCRTPStackController::sendNotifyIpVersionReq", 67);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
LABEL_51:
    if (!v9) {
      return;
    }
    goto LABEL_52;
  }
  std::string::basic_string[abi:ne180100]<0>(v26, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v12 = ims::error((uint64_t)v26, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"SVC_AUDIO service is not initialized.", 37);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
}

void sub_1C54F8C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void AVCRTPStackController::sendNotifyIpVersionReq(AVCRTPStackController *this, int a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(aBlock, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v6 = ims::debug((uint64_t)aBlock, (uint64_t)&__p);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"sendNotifyIpVersionReq", 22);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(aBlock[0]);
  }
  if (*((unsigned char *)this + 160))
  {
    *(_OWORD *)uint64_t v22 = 0u;
    long long v23 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v22);
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = ___ZN21AVCRTPStackController22sendNotifyIpVersionReqEjj_block_invoke;
    v19[3] = &__block_descriptor_40_e26_v16__0__IpVersionInfo_II_8l;
    int v20 = a3;
    int v21 = a2;
    int v8 = (const void **)v22[1];
    if (v22[1] != (void *)v23)
    {
      while (*((unsigned char *)*v8 + 8) != 1)
      {
        if (++v8 == (const void **)v23) {
          goto LABEL_17;
        }
      }
    }
    if (v8 == (const void **)v23) {
LABEL_17:
    }
      operator new();
    if (!v9) {
      __cxa_bad_cast();
    }
    ___ZN21AVCRTPStackController22sendNotifyIpVersionReqEjj_block_invoke((uint64_t)v19, v9 + 3);
    std::string __p = (char *)this + 128;
    uint64_t v14 = QMIServiceMsg::create();
    int v15 = 25000;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = ___ZN21AVCRTPStackController22sendNotifyIpVersionReqEjj_block_invoke_2;
    v12[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v12[4] = this;
    aBlock[0] = (void *)MEMORY[0x1E4F143A8];
    aBlock[1] = (void *)3221225472;
    char v25 = ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio15NotifyIpVersion8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    long long v26 = &unk_1E6511900;
    char v27 = v12;
    uint64_t v11 = _Block_copy(aBlock);
    uint64_t v18 = v11;
    if (v14)
    {
      qmi::Client::send();
      uint64_t v11 = v18;
    }
    if (v11) {
      _Block_release(v11);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(aBlock, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v10 = ims::error((uint64_t)aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"SVC_AUDIO service is not initialized.", 37);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v25) < 0) {
      operator delete(aBlock[0]);
    }
  }
}

void sub_1C54F9250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (*(char *)(v28 - 97) < 0) {
    operator delete(*(void **)(v28 - 120));
  }
  _Unwind_Resume(exception_object);
}

void AVCRTPStackController::sendNotifyIpVersionReq(AVCRTPStackController *this, int a2)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v10, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"sendNotifyIpVersionReq", 22);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  AVCRTPStackController::sendNotifyIpVersionReq(this, a2, 0);
}

void sub_1C54F9404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN21AVCRTPStackController22sendNotifyIpVersionReqEjj_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  a2[1] = *(_DWORD *)(result + 36);
  return result;
}

void ___ZN21AVCRTPStackController22sendNotifyIpVersionReqEjj_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v10, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::debug((uint64_t)v10, (uint64_t)&__p);
  if (!v3) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*v3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*v3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleNotifyIpVersionResp", 25);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  BOOL v8 = *(_DWORD *)(a2 + 4) != 0;
  memset(&__p, 0, sizeof(__p));
  char v9 = (char *)qmi::asString();
  std::string::basic_string[abi:ne180100]<0>(&__p, v9);
  v10[0] = (void *)MEMORY[0x1E4F143A8];
  v10[1] = (void *)3321888768;
  char v11 = ___ZN21AVCRTPStackController25handleNotifyIpVersionRespERKN5audio15NotifyIpVersion8ResponseE_block_invoke;
  uint64_t v12 = &__block_descriptor_65_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e5_v8__0l;
  uint64_t v13 = v3;
  BOOL v15 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = __p;
  }
  ims::performBlock((IMSClientManager *)v10);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C54F964C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21AVCRTPStackController25handleNotifyIpVersionRespERKN5audio15NotifyIpVersion8ResponseE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 64))
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::error((uint64_t)v19, (uint64_t)__p);
    if (!v1) {
      __cxa_bad_typeid();
    }
    uint64_t v4 = v3;
    uint64_t v5 = *(void **)(v3 + 8);
    size_t v6 = strlen((const char *)(*(void *)(*(void *)(*(void *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, *(void *)(*(void *)(*(void *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v6);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"handleNotifyIpVersionResp_block_invoke", 38);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" Error  ", 8);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, a1 + 40);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    v12[0] = &unk_1F20B2680;
    v12[1] = &_bambiDomain;
    int v13 = 0x40000000;
    (*(void (**)(uint64_t, void *))(*(void *)v1 + 48))(v1, v12);
    ImsResult::~ImsResult((ImsResult *)v12);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v19, (uint64_t)__p);
    if (!v1) {
      __cxa_bad_typeid();
    }
    uint64_t v8 = v7;
    char v9 = (const char *)(*(void *)(*(void *)(*(void *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = *(void **)(v7 + 8);
    size_t v11 = strlen(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v9, v11);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"handleNotifyIpVersionResp_block_invoke", 38);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" Success", 8);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
  }
}

void sub_1C54F99C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 49) < 0) {
    operator delete(*(void **)(v24 - 72));
  }
  _Unwind_Resume(exception_object);
}

void AVCRTPStackController::stackError(void *a1, const std::string *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___ZN21AVCRTPStackController10stackErrorE9ImsResult_block_invoke;
  v5[3] = &__block_descriptor_40_e5_v8__0l;
  v5[4] = a1;
  ims::performBlock((IMSClientManager *)v5);
  ImsResult::ImsResult((ImsResult *)v4, a2);
  RTPStackController::stackError(a1, v4);
  ImsResult::~ImsResult((ImsResult *)v4);
}

void sub_1C54F9AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ___ZN21AVCRTPStackController10stackErrorE9ImsResult_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (void *)[MEMORY[0x1E4F47930] getDaemonProcessInfo];
  uint64_t result = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F478F8]), "longLongValue");
  *(void *)(v1 + 120) = result;
  return result;
}

void AVCRTPStackController::cleanup(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v45, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v45, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  size_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"cleanup", 7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  char v41 = a2;
  uint64_t v42 = a1;
  v45[0] = a2;
  uint64_t v39 = (uint64_t **)(a1 + 72);
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 72), (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)v45);
  char v9 = (uint64_t *)v8[7];
  uint64_t v10 = v8 + 8;
  if (v9 != v8 + 8)
  {
    do
    {
      uint64_t v11 = v9[5];
      uint64_t v12 = (std::__shared_weak_count *)v9[6];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v45, "avc.rtp.controller");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v13 = ims::debug((uint64_t)v45, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Removing cached audio session ", 30);
      *(unsigned char *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (v44 < 0) {
        operator delete(__p[0]);
      }
      if (v46 < 0)
      {
        operator delete(v45[0]);
        if (v12)
        {
LABEL_15:
          long long v14 = std::__shared_weak_count::lock(v12);
          if (v14)
          {
            long long v15 = v14;
            if (v11)
            {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
              MediaSessionDriver::cancelAllTimers((MediaSessionDriver *)(v11 + 24));
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      else if (v12)
      {
        goto LABEL_15;
      }
      long long v16 = (uint64_t *)v9[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          long long v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (uint64_t *)v9[2];
          BOOL v18 = *v17 == (void)v9;
          char v9 = v17;
        }
        while (!v18);
      }
      char v9 = v17;
    }
    while (v17 != v10);
  }
  if ((void **)(v42 + 80) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v39, (void **)v41))
  {
    v45[0] = v41;
    long long v19 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39, (void **)v41, (uint64_t)&std::piecewise_construct, (long long **)v45);
    char v20 = v19 + 8;
    std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy((uint64_t)(v19 + 7), (void *)v19[8]);
    *(v20 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v20;
    *char v20 = 0;
    v20[1] = 0;
    std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__erase_unique<std::string>((void ***)v39, (void **)v41);
  }
  v45[0] = v41;
  CFIndex v40 = (uint64_t **)(v42 + 96);
  int v21 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v42 + 96), (void **)v41, (long long **)v45);
  uint64_t v22 = (uint64_t *)v21[7];
  long long v23 = v21 + 8;
  if (v22 != v21 + 8)
  {
    do
    {
      uint64_t v24 = v22[5];
      char v25 = (std::__shared_weak_count *)v22[6];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v45, "avc.rtp.controller");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v26 = ims::debug((uint64_t)v45, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"Removing cached text session ", 29);
      *(unsigned char *)(v26 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v26 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v26 + 17) = 0;
      if (v44 < 0) {
        operator delete(__p[0]);
      }
      if (v46 < 0)
      {
        operator delete(v45[0]);
        if (v25)
        {
LABEL_37:
          char v27 = std::__shared_weak_count::lock(v25);
          if (v27)
          {
            uint64_t v28 = v27;
            if (v24)
            {
              atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
              MediaSessionDriver::cancelAllTimers((MediaSessionDriver *)(v24 + 24));
              std::__shared_weak_count::__release_shared[abi:ne180100](v28);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      else if (v25)
      {
        goto LABEL_37;
      }
      char v29 = (uint64_t *)v22[1];
      if (v29)
      {
        do
        {
          uint64_t v30 = v29;
          char v29 = (uint64_t *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          uint64_t v30 = (uint64_t *)v22[2];
          BOOL v18 = *v30 == (void)v22;
          uint64_t v22 = v30;
        }
        while (!v18);
      }
      uint64_t v22 = v30;
    }
    while (v30 != v23);
  }
  if ((void **)(v42 + 104) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v40, (void **)v41))
  {
    v45[0] = v41;
    uint64_t v31 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40, (void **)v41, (long long **)v45);
    std::string v32 = v31 + 8;
    std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy((uint64_t)(v31 + 7), (void *)v31[8]);
    *(v32 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v32;
    void *v32 = 0;
    v32[1] = 0;
    char v33 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v40, (void **)v41);
    if ((void **)(v42 + 104) != v33)
    {
      char v34 = (uint64_t *)v33;
      unint64_t v35 = (uint64_t *)v33[1];
      if (v35)
      {
        do
        {
          uint64_t v36 = v35;
          unint64_t v35 = (uint64_t *)*v35;
        }
        while (v35);
      }
      else
      {
        uint64_t v37 = v33;
        do
        {
          uint64_t v36 = (uint64_t *)v37[2];
          BOOL v18 = *v36 == (void)v37;
          uint64_t v37 = (void **)v36;
        }
        while (!v18);
      }
      if (*v40 == (uint64_t *)v33) {
        *CFIndex v40 = v36;
      }
      uint64_t v38 = *(uint64_t **)(v42 + 104);
      --*(void *)(v42 + 112);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v38, v34);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,0>((uint64_t)(v34 + 4));
      operator delete(v34);
    }
  }
}

void sub_1C54FA0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AVCRTPStackController::cleanupAfterHandover(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v25, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v25, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  size_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"cleanupAfterHandover", 20);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  v25[0] = a2;
  int v21 = (uint64_t **)(a1 + 72);
  uint64_t v22 = a1;
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 72), (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)v25);
  char v9 = (uint64_t *)v8[7];
  uint64_t v10 = v8 + 8;
  if (v9 != v8 + 8)
  {
    do
    {
      uint64_t v11 = v9[5];
      uint64_t v12 = (std::__shared_weak_count *)v9[6];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v25, "avc.rtp.controller");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v13 = ims::debug((uint64_t)v25, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Removing cached audio session ", 30);
      *(unsigned char *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0)
      {
        operator delete(v25[0]);
        if (v12)
        {
LABEL_15:
          long long v14 = std::__shared_weak_count::lock(v12);
          if (v14)
          {
            long long v15 = v14;
            if (v11)
            {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
              MediaSessionDriver::cancelAllTimers((MediaSessionDriver *)(v11 + 24));
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      else if (v12)
      {
        goto LABEL_15;
      }
      long long v16 = (uint64_t *)v9[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          long long v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (uint64_t *)v9[2];
          BOOL v18 = *v17 == (void)v9;
          char v9 = v17;
        }
        while (!v18);
      }
      char v9 = v17;
    }
    while (v17 != v10);
  }
  if ((void **)(v22 + 80) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v21, (void **)a2))
  {
    v25[0] = a2;
    long long v19 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)v25);
    char v20 = v19 + 8;
    std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy((uint64_t)(v19 + 7), (void *)v19[8]);
    *(v20 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v20;
    *char v20 = 0;
    v20[1] = 0;
    std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__erase_unique<std::string>((void ***)v21, (void **)a2);
  }
}

void sub_1C54FA534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AVCRTPStackController::createRTPSession(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, long long *a6@<X5>, dispatch_object_t *a7@<X6>, void *a8@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v104, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v15 = ims::debug((uint64_t)&v104, (uint64_t)&__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v16 = v15;
  uint64_t v17 = *(void **)(v15 + 8);
  size_t v18 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v18);
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"createRTPSession", 16);
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" stackId=", 9);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v16 + 32))(v16, a6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  if (v103 < 0) {
    operator delete(__p);
  }
  if (v106 < 0) {
    operator delete(v104);
  }
  long long v19 = (std::__shared_weak_count *)a4[1];
  if (v19)
  {
    char v20 = std::__shared_weak_count::lock(v19);
    if (v20)
    {
      uint64_t v21 = *a4;
      if (*a4)
      {
        uint64_t v22 = *(std::__shared_weak_count **)(v21 + 128);
        std::string::size_type v90 = v20;
        uint64_t v87 = *a4;
        if (a5 == 4)
        {
          if (v22 && (uint64_t v22 = std::__shared_weak_count::lock(v22)) != 0)
          {
            unint64_t v88 = v22;
            uint64_t v22 = *(std::__shared_weak_count **)(v21 + 120);
          }
          else
          {
            unint64_t v88 = 0;
          }
          unint64_t v85 = a8;
          char v24 = (ImsPrefs *)SipStack::prefs((SipStack *)v22);
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v104, (void *)(a1 + 8));
          char v26 = v104;
          char v25 = v105;
          uint64_t v28 = *(long long **)a2;
          char v27 = *(std::__shared_weak_count **)(a2 + 8);
          char v29 = (std::__shared_weak_count *)operator new(0x2A0uLL);
          uint64_t v30 = v29;
          v29->__shared_owners_ = 0;
          v29->__shared_weak_owners_ = 0;
          v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D7880;
          long long v104 = v28;
          uint64_t v105 = v27;
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v31 = *(std::__shared_weak_count **)(a1 + 56);
          std::string __p = *(void **)(a1 + 48);
          xpc_object_t v102 = v31;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string v107 = v26;
          uint64_t v108 = v25;
          std::string v32 = &v29[1].__vftable;
          AVCRTTSession::AVCRTTSession((uint64_t)&v29[1], (uint64_t *)&v104, a3, (uint64_t *)&__p, v24, (uint64_t *)&v107, a6, a7);
          char v20 = v90;
          if (v108) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v108);
          }
          if (v102) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v102);
          }
          if (v105) {
            std::__shared_weak_count::__release_weak(v105);
          }
          shared_weak_owners = (std::__shared_weak_count *)v30[1].__shared_weak_owners_;
          if (shared_weak_owners)
          {
            if (shared_weak_owners->__shared_owners_ != -1) {
              goto LABEL_53;
            }
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            v30[1].__shared_owners_ = (uint64_t)v32;
            v30[1].__shared_weak_owners_ = (uint64_t)v30;
            std::__shared_weak_count::__release_weak(shared_weak_owners);
          }
          else
          {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            v30[1].__shared_owners_ = (uint64_t)v32;
            v30[1].__shared_weak_owners_ = (uint64_t)v30;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
LABEL_53:
          if (v88) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v88);
          }
          long long v104 = a6;
          char v41 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 96), (void **)a6, &v104);
          uint64_t v42 = v41;
          char v44 = (uint64_t **)(v41 + 8);
          char v43 = (uint64_t *)v41[8];
          if (v43)
          {
            while (1)
            {
              while (1)
              {
                long long v45 = (uint64_t **)v43;
                unint64_t v46 = v43[4];
                if (v46 <= a3) {
                  break;
                }
                char v43 = *v45;
                char v44 = v45;
                if (!*v45) {
                  goto LABEL_74;
                }
              }
              if (v46 >= a3) {
                break;
              }
              char v43 = v45[1];
              if (!v43)
              {
                char v44 = v45 + 1;
                goto LABEL_74;
              }
            }
            uint64_t v53 = (uint64_t *)v45;
          }
          else
          {
            long long v45 = (uint64_t **)(v41 + 8);
LABEL_74:
            uint64_t v53 = (uint64_t *)operator new(0x38uLL);
            v53[5] = 0;
            v53[6] = 0;
            v53[4] = a3;
            uint64_t *v53 = 0;
            v53[1] = 0;
            v53[2] = (uint64_t)v45;
            *char v44 = v53;
            uint64_t v54 = *(void *)v42[7];
            uint64_t v55 = v53;
            if (v54)
            {
              v42[7] = v54;
              uint64_t v55 = *v44;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v42[8], v55);
            ++v42[9];
          }
          atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          unint64_t v80 = (std::__shared_weak_count *)v53[6];
          v53[5] = (uint64_t)v32;
          v53[6] = (uint64_t)v30;
          if (v80) {
            std::__shared_weak_count::__release_weak(v80);
          }
          void *v85 = 0;
          v85[1] = 0;
          long long v99 = v30 + 2;
          uint64_t v100 = v30;
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v81 = *(std::__shared_weak_count **)(v87 + 128);
          if (v81)
          {
            unint64_t v81 = std::__shared_weak_count::lock(v81);
            uint64_t v82 = v81;
            if (v81) {
              unint64_t v81 = *(std::__shared_weak_count **)(v87 + 120);
            }
          }
          else
          {
            uint64_t v82 = 0;
          }
          uint64_t v83 = (ImsPrefs *)SipStack::prefs((SipStack *)v81);
          ims::rtp::createMediaSessionStateMachine((uint64_t *)&v99, v83, 0, v85);
          if (v82) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v82);
          }
          if (v100) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v100);
          }
          uint64_t v84 = *(std::__shared_weak_count **)(a2 + 8);
          long long v97 = *(long long **)a2;
          long long v98 = v84;
          if (v84) {
            atomic_fetch_add_explicit(&v84->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          ((void (*)(std::__shared_weak_count *, long long **))v30[2].__vftable[4].~__shared_weak_count)(&v30[2], &v97);
          unint64_t v79 = v98;
          if (!v98) {
            goto LABEL_141;
          }
          goto LABEL_140;
        }
        if (v22 && (uint64_t v22 = std::__shared_weak_count::lock(v22)) != 0)
        {
          std::string v89 = v22;
          uint64_t v22 = *(std::__shared_weak_count **)(v21 + 120);
        }
        else
        {
          std::string v89 = 0;
        }
        unint64_t v86 = (ImsPrefs *)SipStack::prefs((SipStack *)v22);
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v104, (void *)(a1 + 8));
        unint64_t v35 = v104;
        char v34 = v105;
        uint64_t v37 = *(long long **)a2;
        uint64_t v36 = *(std::__shared_weak_count **)(a2 + 8);
        uint64_t v30 = (std::__shared_weak_count *)operator new(0x2C8uLL);
        v30->__shared_owners_ = 0;
        v30->__shared_weak_owners_ = 0;
        v30->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D78D0;
        long long v104 = v37;
        uint64_t v105 = v36;
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v38 = *(std::__shared_weak_count **)(a1 + 56);
        std::string __p = *(void **)(a1 + 48);
        xpc_object_t v102 = v38;
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string v107 = v35;
        uint64_t v108 = v34;
        uint64_t v39 = v30 + 1;
        AVCAudioSession::AVCAudioSession((uint64_t)&v30[1], (uint64_t *)&v104, a3, (uint64_t *)&__p, v86, (uint64_t *)&v107, a6, a7);
        char v20 = v90;
        if (v108) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v108);
        }
        if (v102) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v102);
        }
        if (v105) {
          std::__shared_weak_count::__release_weak(v105);
        }
        CFIndex v40 = (std::__shared_weak_count *)v30[1].__shared_weak_owners_;
        if (v40)
        {
          if (v40->__shared_owners_ != -1) {
            goto LABEL_64;
          }
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v30[1].__shared_owners_ = (uint64_t)v39;
          v30[1].__shared_weak_owners_ = (uint64_t)v30;
          std::__shared_weak_count::__release_weak(v40);
        }
        else
        {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v30[1].__shared_owners_ = (uint64_t)v39;
          v30[1].__shared_weak_owners_ = (uint64_t)v30;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
LABEL_64:
        if (v89) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v89);
        }
        long long v104 = a6;
        char v47 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 72), (void **)a6, (uint64_t)&std::piecewise_construct, &v104);
        std::string v49 = v47 + 8;
        long long v48 = (uint64_t *)v47[8];
        if (v48)
        {
          while (1)
          {
            while (1)
            {
              char v50 = (uint64_t **)v48;
              unint64_t v51 = v48[4];
              if (v51 <= a3) {
                break;
              }
              long long v48 = *v50;
              std::string v52 = v50;
              if (!*v50) {
                goto LABEL_78;
              }
            }
            if (v51 >= a3) {
              break;
            }
            long long v48 = v50[1];
            if (!v48)
            {
              std::string v52 = v50 + 1;
              goto LABEL_78;
            }
          }
        }
        else
        {
          std::string v52 = (uint64_t **)(v47 + 8);
          char v50 = (uint64_t **)(v47 + 8);
LABEL_78:
          unsigned __int8 v56 = (uint64_t *)operator new(0x38uLL);
          v56[5] = 0;
          v56[6] = 0;
          v56[4] = a3;
          std::__tree<unsigned int>::__insert_node_at((uint64_t **)v49 - 1, (uint64_t)v50, v52, v56);
          char v50 = (uint64_t **)v56;
        }
        atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v57 = (std::__shared_weak_count *)v50[6];
        v50[5] = (uint64_t *)v39;
        v50[6] = (uint64_t *)v30;
        if (v57) {
          std::__shared_weak_count::__release_weak(v57);
        }
        uint64_t v58 = *(void *)(a1 + 48);
        uint64_t v59 = *(void **)(v58 + 232);
        if (!v59) {
          goto LABEL_92;
        }
        int v60 = (void *)(v58 + 232);
        do
        {
          unint64_t v61 = v59[4];
          BOOL v62 = v61 >= a3;
          if (v61 >= a3) {
            uint64_t v63 = v59;
          }
          else {
            uint64_t v63 = v59 + 1;
          }
          if (v62) {
            int v60 = v59;
          }
          uint64_t v59 = (void *)*v63;
        }
        while (*v63);
        if (v60 == (void *)(v58 + 232) || v60[4] > a3)
        {
LABEL_92:
          long long v64 = *(void **)(v58 + 256);
          if (!v64) {
            goto LABEL_103;
          }
          int v65 = (void *)(v58 + 256);
          uint64_t v66 = (void *)(v58 + 256);
          do
          {
            unint64_t v67 = v64[4];
            BOOL v68 = v67 >= a3;
            if (v67 >= a3) {
              xpc_object_t v69 = v64;
            }
            else {
              xpc_object_t v69 = v64 + 1;
            }
            if (v68) {
              uint64_t v66 = v64;
            }
            long long v64 = (void *)*v69;
          }
          while (*v69);
          if (v66 == v65 || v66[4] > a3)
          {
LABEL_103:
            std::string::basic_string[abi:ne180100]<0>(&v104, "avc.rtp.controller");
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            uint64_t v70 = ims::debug((uint64_t)&v104, (uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v70 + 8), (uint64_t)"Protecting WiFi call with a delayed start", 41);
            *(unsigned char *)(v70 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v70 + 17) = 0;
            if (v103 < 0) {
              operator delete(__p);
            }
            if (v106 < 0) {
              operator delete(v104);
            }
            std::string::size_type v71 = *(int64x2_t **)(a1 + 48);
            v96[0] = (uint64_t)&v30[24].__shared_owners_;
            v96[1] = (uint64_t)v30;
            atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            RTPManager::registerAudioReadyHandler(v71, v96);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        *a8 = 0;
        a8[1] = 0;
        uint64_t v94 = v30 + 2;
        uint64_t v95 = v30;
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v72 = *(std::__shared_weak_count **)(v87 + 128);
        if (v72)
        {
          uint64_t v72 = std::__shared_weak_count::lock(v72);
          uint64_t v73 = v72;
          if (v72) {
            uint64_t v72 = *(std::__shared_weak_count **)(v87 + 120);
          }
        }
        else
        {
          uint64_t v73 = 0;
        }
        uint64_t v74 = (ImsPrefs *)SipStack::prefs((SipStack *)v72);
        ims::rtp::createMediaSessionStateMachine((uint64_t *)&v94, v74, 1, a8);
        if (v73) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v73);
        }
        if (v95) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v95);
        }
        __int16 v75 = (std::__shared_weak_count_vtbl *)*a8;
        std::string::size_type v76 = (std::__shared_weak_count *)a8[1];
        if (v76)
        {
          atomic_fetch_add_explicit(&v76->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v76->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v30[25].__vftable = v75;
        shared_owners = (std::__shared_weak_count *)v30[25].__shared_owners_;
        v30[25].__shared_owners_ = (uint64_t)v76;
        if (shared_owners) {
          std::__shared_weak_count::__release_weak(shared_owners);
        }
        if (v76) {
          std::__shared_weak_count::__release_weak(v76);
        }
        std::string::size_type v78 = *(std::__shared_weak_count **)(a2 + 8);
        uint64_t v92 = *(long long **)a2;
        uint64_t v93 = v78;
        if (v78) {
          atomic_fetch_add_explicit(&v78->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        ((void (*)(std::__shared_weak_count *, long long **))v30[2].__vftable[4].~__shared_weak_count)(&v30[2], &v92);
        unint64_t v79 = v93;
        if (!v93) {
          goto LABEL_141;
        }
LABEL_140:
        std::__shared_weak_count::__release_weak(v79);
LABEL_141:
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
LABEL_142:
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        return;
      }
    }
  }
  else
  {
    char v20 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v104, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v23 = ims::error((uint64_t)&v104, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"SDPSession expired in AVCRTPStackController::createRTPSession", 61);
  *(unsigned char *)(v23 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v23 + 17) = 0;
  if (v103 < 0) {
    operator delete(__p);
  }
  if (v106 < 0) {
    operator delete(v104);
  }
  *a8 = 0;
  a8[1] = 0;
  if (v20) {
    goto LABEL_142;
  }
}

void sub_1C54FAFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__shared_weak_count::__release_weak(v29);
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  _Unwind_Resume(a1);
}

uint64_t AVCRTPStackController::audioSessionCount(AVCRTPStackController *this)
{
  uint64_t v1 = (long long *)*((void *)this + 9);
  uint64_t v2 = (char *)this + 80;
  if (v1 == (long long *)((char *)this + 80)) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)std::string __p = 0u;
    std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>::pair[abi:ne180100]((std::string *)__p, v1 + 2);
    uint64_t v4 = (long long *)*((void *)&v14 + 1);
    if (*((long long **)&v14 + 1) != &v15)
    {
      do
      {
        uint64_t v5 = (std::__shared_weak_count *)*((void *)v4 + 6);
        if (v5)
        {
          size_t v6 = std::__shared_weak_count::lock(v5);
          if (v6)
          {
            if (*((void *)v4 + 5)) {
              ++v3;
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v6);
          }
        }
        size_t v7 = (long long *)*((void *)v4 + 1);
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            size_t v7 = *(long long **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (long long *)*((void *)v4 + 2);
            BOOL v9 = *(void *)v8 == (void)v4;
            uint64_t v4 = v8;
          }
          while (!v9);
        }
        uint64_t v4 = v8;
      }
      while (v8 != &v15);
    }
    std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy((uint64_t)&v14 + 8, (void *)v15);
    if (SBYTE7(v14) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = (long long *)*((void *)v1 + 1);
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = *(long long **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = (long long *)*((void *)v1 + 2);
        BOOL v9 = *(void *)v11 == (void)v1;
        uint64_t v1 = v11;
      }
      while (!v9);
    }
    uint64_t v1 = v11;
  }
  while (v11 != (long long *)v2);
  return v3;
}

char *AVCRTPStackController::removeSessionFromCache(uint64_t a1, void **a2, unint64_t a3)
{
  unint64_t v17 = a3;
  size_t v6 = (uint64_t **)(a1 + 72);
  uint64_t result = (char *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 72, a2);
  if ((char *)(a1 + 80) != result)
  {
    size_t v18 = a2;
    uint64_t v8 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v18);
    uint64_t v11 = v8[8];
    BOOL v9 = v8 + 8;
    uint64_t v10 = (void *)v11;
    if (!v11) {
      goto LABEL_13;
    }
    uint64_t v12 = v9;
    do
    {
      unint64_t v13 = v10[4];
      BOOL v14 = v13 >= a3;
      if (v13 >= a3) {
        long long v15 = v10;
      }
      else {
        long long v15 = v10 + 1;
      }
      if (v14) {
        uint64_t v12 = v10;
      }
      uint64_t v10 = (void *)*v15;
    }
    while (*v15);
    if (v12 == v9 || v12[4] > a3) {
LABEL_13:
    }
      uint64_t v12 = v9;
    size_t v18 = a2;
    uint64_t result = (char *)std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v18);
    if (v12 != (uint64_t *)(result + 64))
    {
      size_t v18 = a2;
      uint64_t v16 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v18);
      return (char *)std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::__erase_unique<unsigned long long>((uint64_t)(v16 + 7), &v17);
    }
  }
  return result;
}

BOOL AVCRTPStackController::sessionExists(uint64_t a1, void **a2, unint64_t a3)
{
  uint64_t v3 = (void *)(a1 + 80);
  uint64_t v4 = *(void **)(a1 + 80);
  if (!v4) {
    return 0;
  }
  size_t v7 = (void *)(a1 + 80);
  do
  {
    char v8 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4 + 4, a2);
    if (v8 >= 0) {
      BOOL v9 = v4;
    }
    else {
      BOOL v9 = v4 + 1;
    }
    if (v8 >= 0) {
      size_t v7 = v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v7 == v3) {
    return 0;
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v7 + 4) & 0x80) != 0) {
    return 0;
  }
  uint64_t v12 = (void *)v7[8];
  uint64_t v11 = v7 + 8;
  uint64_t v10 = v12;
  if (!v12) {
    return 0;
  }
  unint64_t v13 = v11;
  do
  {
    unint64_t v14 = v10[4];
    BOOL v15 = v14 >= a3;
    if (v14 >= a3) {
      uint64_t v16 = v10;
    }
    else {
      uint64_t v16 = v10 + 1;
    }
    if (v15) {
      unint64_t v13 = v10;
    }
    uint64_t v10 = (void *)*v16;
  }
  while (*v16);
  if (v13 == v11) {
    return 0;
  }
  if (v13[4] > a3) {
    return 0;
  }
  unint64_t v17 = (std::__shared_weak_count *)v13[6];
  if (!v17) {
    return 0;
  }
  size_t v18 = std::__shared_weak_count::lock(v17);
  if (!v18) {
    return 0;
  }
  BOOL v19 = v13[5] != 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  return v19;
}

void AVCRTPStackController::setRelayMode(uint64_t a1, void **a2, unint64_t a3, char a4)
{
  std::string::basic_string[abi:ne180100]<0>(v23, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v23, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"setRelayMode", 12);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" sessionId=", 11);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" isRelayMode=", 13);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  BOOL v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 72, a2);
  if ((void **)(a1 + 80) != v9)
  {
    uint64_t v12 = v9[8];
    uint64_t v10 = v9 + 8;
    uint64_t v11 = v12;
    if (v12)
    {
      unint64_t v13 = v10;
      do
      {
        unint64_t v14 = v11[4];
        BOOL v15 = v14 >= a3;
        if (v14 >= a3) {
          uint64_t v16 = v11;
        }
        else {
          uint64_t v16 = v11 + 1;
        }
        if (v15) {
          unint64_t v13 = (void **)v11;
        }
        uint64_t v11 = (void *)*v16;
      }
      while (*v16);
      if (v13 != v10 && (unint64_t)v13[4] <= a3)
      {
        unint64_t v17 = (std::__shared_weak_count *)v13[6];
        if (v17)
        {
          size_t v18 = std::__shared_weak_count::lock(v17);
          if (v18)
          {
            BOOL v19 = v18;
            char v20 = (AVCAudioSession *)v13[5];
            if (v20) {
              AVCAudioSession::setRelayMode(v20, a4);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
        }
      }
    }
  }
}

void sub_1C54FB6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void AVCRTPStackController::setScreeningMode(uint64_t a1, void **a2, unint64_t a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(v23, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v23, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"setScreeningMode", 16);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" sessionId=", 11);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" isScreeningMode=", 17);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  BOOL v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 72, a2);
  if ((void **)(a1 + 80) != v9)
  {
    uint64_t v12 = v9[8];
    uint64_t v10 = v9 + 8;
    uint64_t v11 = v12;
    if (v12)
    {
      unint64_t v13 = v10;
      do
      {
        unint64_t v14 = v11[4];
        BOOL v15 = v14 >= a3;
        if (v14 >= a3) {
          uint64_t v16 = v11;
        }
        else {
          uint64_t v16 = v11 + 1;
        }
        if (v15) {
          unint64_t v13 = (void **)v11;
        }
        uint64_t v11 = (void *)*v16;
      }
      while (*v16);
      if (v13 != v10 && (unint64_t)v13[4] <= a3)
      {
        unint64_t v17 = (std::__shared_weak_count *)v13[6];
        if (v17)
        {
          size_t v18 = std::__shared_weak_count::lock(v17);
          if (v18)
          {
            BOOL v19 = v18;
            char v20 = (AVCAudioSession *)v13[5];
            if (v20) {
              AVCAudioSession::setScreeningMode(v20, a4);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
        }
      }
    }
  }
}

void sub_1C54FB91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>::map[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1C54FB9BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__tree_node<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1C54FBA18(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__tree_node<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    size_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::weak_ptr<AVCAudioSession>> const&>(v5, v6, v4 + 4, v4 + 4);
      size_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          size_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::weak_ptr<AVCAudioSession>> const&>(uint64_t **a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  unint64_t v7 = *a3;
  uint64_t v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2 || (unint64_t v9 = a2[4], v9 > v7))
  {
    uint64_t v10 = *a2;
    if (*a1 == a2)
    {
      uint64_t v12 = a2;
      goto LABEL_16;
    }
    if (v10)
    {
      uint64_t v11 = (uint64_t *)*a2;
      do
      {
        uint64_t v12 = v11;
        uint64_t v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      unint64_t v17 = a2;
      do
      {
        uint64_t v12 = (uint64_t *)v17[2];
        BOOL v18 = *v12 == (void)v17;
        unint64_t v17 = v12;
      }
      while (v18);
    }
    if (v12[4] < v7)
    {
LABEL_16:
      if (v10) {
        BOOL v15 = (uint64_t **)v12;
      }
      else {
        BOOL v15 = (uint64_t **)a2;
      }
      if (v10) {
        unint64_t v14 = (uint64_t **)(v12 + 1);
      }
      else {
        unint64_t v14 = (uint64_t **)a2;
      }
      uint64_t v5 = *v14;
      if (*v14) {
        return v5;
      }
      goto LABEL_43;
    }
    BOOL v19 = *v8;
    unint64_t v14 = a1 + 1;
    BOOL v15 = a1 + 1;
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          BOOL v15 = (uint64_t **)v19;
          unint64_t v20 = v19[4];
          if (v20 <= v7) {
            break;
          }
          BOOL v19 = (uint64_t *)*v19;
          unint64_t v14 = v15;
          if (!*v15) {
            goto LABEL_43;
          }
        }
        if (v20 >= v7) {
          return (uint64_t *)v15;
        }
        BOOL v19 = (uint64_t *)v19[1];
        if (!v19) {
          goto LABEL_30;
        }
      }
    }
  }
  else
  {
    if (v9 >= v7) {
      return v5;
    }
    unint64_t v14 = (uint64_t **)(a2 + 1);
    unint64_t v13 = (uint64_t *)a2[1];
    if (v13)
    {
      do
      {
        unint64_t v14 = (uint64_t **)v13;
        unint64_t v13 = (uint64_t *)*v13;
        BOOL v15 = v14;
        uint64_t v16 = v14;
      }
      while (v13);
    }
    else
    {
      uint64_t v16 = (uint64_t **)a2;
      do
      {
        uint64_t v21 = v16;
        uint64_t v16 = (uint64_t **)v16[2];
      }
      while (*v16 != (uint64_t *)v21);
      BOOL v15 = (uint64_t **)a2;
    }
    if (v16 != v8 && (unint64_t)v16[4] <= v7)
    {
      char v22 = *v8;
      unint64_t v14 = a1 + 1;
      BOOL v15 = a1 + 1;
      if (*v8)
      {
        while (1)
        {
          while (1)
          {
            BOOL v15 = (uint64_t **)v22;
            unint64_t v23 = v22[4];
            if (v23 <= v7) {
              break;
            }
            char v22 = (uint64_t *)*v22;
            unint64_t v14 = v15;
            if (!*v15) {
              goto LABEL_43;
            }
          }
          if (v23 >= v7) {
            return (uint64_t *)v15;
          }
          char v22 = (uint64_t *)v22[1];
          if (!v22)
          {
LABEL_30:
            unint64_t v14 = v15 + 1;
            break;
          }
        }
      }
    }
  }
LABEL_43:
  uint64_t v5 = (uint64_t *)operator new(0x38uLL);
  uint64_t v24 = a4[1];
  v5[4] = *a4;
  void v5[5] = v24;
  uint64_t v25 = a4[2];
  v5[6] = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 16), 1uLL, memory_order_relaxed);
  }
  std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v15, v14, v5);
  return v5;
}

void std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy(a1, a2[1]);
    long long v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::IpVersionInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::IpVersionInfo>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::IpVersionInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + IMSCallOptions::~IMSCallOptions(this + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 8;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::IpVersionInfo>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio15NotifyIpVersion8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    size_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      size_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C54FBF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  size_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size_t v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *((unsigned char *)a3 + 1ims::StackConfig::~StackConfig(this + 6) = 1;
}

void sub_1C54FC0C0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__erase_unique<std::string>(void ***a1, void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (void ***)v3)
  {
    long long v4 = (uint64_t *)v3;
    uint64_t v5 = (void **)v3[1];
    if (v5)
    {
      do
      {
        size_t v6 = v5;
        uint64_t v5 = (void **)*v5;
      }
      while (v5);
    }
    else
    {
      uint64_t v7 = v3;
      do
      {
        size_t v6 = (void **)v7[2];
        BOOL v8 = *v6 == v7;
        uint64_t v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3) {
      *a1 = v6;
    }
    long long v9 = (uint64_t *)a1[1];
    a1[2] = (void **)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, long long **a3)
{
  size_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  BOOL v8 = a1 + 1;
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      BOOL v8 = (uint64_t **)v5;
      uint64_t v10 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v8;
      uint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0) {
      break;
    }
    uint64_t v7 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  uint64_t v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    uint64_t v12 = *a3;
    uint64_t v19 = 0;
    unint64_t v13 = (uint64_t *)operator new(0x50uLL);
    v18[0] = v13;
    v18[1] = v6;
    unint64_t v14 = (std::string *)(v13 + 4);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v15 = *v12;
      v13[6] = *((void *)v12 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    v13[9] = 0;
    v13[8] = 0;
    v13[7] = (uint64_t)(v13 + 8);
    LOBYTE(v19) = 1;
    *unint64_t v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v8;
    *uint64_t v7 = v13;
    uint64_t v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      unint64_t v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    uint64_t v11 = (uint64_t *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1C54FC338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<AVCRTTSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D7880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AVCRTTSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D7880;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<AVCRTTSession>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AVCAudioSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D78D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AVCAudioSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D78D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<AVCAudioSession>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::__erase_unique<unsigned long long>(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  long long v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      long long v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::erase((uint64_t **)a1, v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  unint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1, a2);
  long long v4 = (std::__shared_weak_count *)a2[6];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(a2);
  return v3;
}

void SipAkaAuthChallenge::SipAkaAuthChallenge(SipAkaAuthChallenge *this, SipAkaDigestAuthScheme *a2)
{
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F20D79B8;
  if (!a2) {
    operator new();
  }
  *((void *)this + 8) = a2;
}

void sub_1C54FC608(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v2, 0x10B3C4074E51C00);
  SipAuthChallenge::~SipAuthChallenge(v1);
  _Unwind_Resume(a1);
}

void SipAuthChallenge::~SipAuthChallenge(void **this)
{
  *this = &unk_1F20D7A10;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void SipAuthChallenge::SipAuthChallenge(SipAuthChallenge *this, const SipAuthChallenge *a2)
{
  *(void *)this = &unk_1F20D7A10;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  std::string::operator=((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
}

void sub_1C54FC704(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*(void **)(v1 + 32));
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void SipAkaAuthChallenge::~SipAkaAuthChallenge(SipAkaAuthChallenge *this)
{
  *(void *)this = &unk_1F20D79B8;
  uint64_t v2 = *((void *)this + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  SipAuthChallenge::~SipAuthChallenge((void **)this);
}

{
  uint64_t vars8;

  SipAkaAuthChallenge::~SipAkaAuthChallenge(this);
  JUMPOUT(0x1C878E320);
}

void SipAkaAuthChallenge::createSuccessResponse()
{
}

void sub_1C54FC90C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

void SipAkaAuthChallenge::createSyncFailureResponse()
{
}

void sub_1C54FC9E0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

void SipAkaAuthChallenge::createFailureResponse(SipAkaAuthChallenge *this)
{
}

void sub_1C54FCA4C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

uint64_t SipAkaAuthChallenge::scheme(SipAkaAuthChallenge *this)
{
  return *((void *)this + 8);
}

{
  return *((void *)this + 8);
}

void SipAkaAuthChallenge::clone(SipAkaAuthChallenge *this)
{
}

void sub_1C54FCB10(_Unwind_Exception *a1)
{
  SipAuthChallenge::~SipAuthChallenge(v1);
  MEMORY[0x1C878E320](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

uint64_t SipAkaAuthChallenge::isValid(SipAkaAuthChallenge *this)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 80))();
  }
  return result;
}

uint64_t SipTransactionLayer::SipTransactionLayer(uint64_t a1, uint64_t *a2)
{
  long long v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipStackLayer::SipStackLayer((void *)a1, &v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  *(void *)(a1 + 24) = &unk_1F20D7BA0;
  std::string::basic_string[abi:ne180100]<0>(&v8, "sip.txn");
  uint64_t v5 = *a2;
  if (*(char *)(*a2 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v5 + 4160);
  }
  ImsLogContainer::ImsLogContainer(a1 + 32, &v8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F20D7A50;
  *(void *)(a1 + 24) = &unk_1F20D7A88;
  *(void *)(a1 + 32) = &unk_1F20D7AB8;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(void *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 144) = 0;
  return a1;
}

void sub_1C54FCCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  *unint64_t v20 = &unk_1F20BC510;
  char v22 = (std::__shared_weak_count *)v20[2];
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  _Unwind_Resume(exception_object);
}

void SipTransactionLayer::~SipTransactionLayer(SipTransactionLayer *this)
{
  *(void *)this = &unk_1F20D7A50;
  *((void *)this + IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20D7A88;
  *((void *)this + 4) = &unk_1F20D7AB8;
  uint64_t v2 = *((void *)this + 17);
  if (v2) {
    *(void *)(v2 + 272) = 0;
  }
  SipTransactionLayer::deinitialize(this);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)this + 192);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)this + 152);
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *((void *)this + 4) = &unk_1F20C9CA0;
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  *(void *)this = &unk_1F20BC510;
  long long v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  uint64_t vars8;

  SipTransactionLayer::~SipTransactionLayer(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipTransactionLayer::deinitialize(SipTransactionLayer *this)
{
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v2 = (void *)((char *)this + 152);
  std::unordered_map<std::string,std::shared_ptr<SipClientTransaction>>::unordered_map((uint64_t)&v23, (uint64_t)this + 152);
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipServerTransaction>>::unordered_map((uint64_t)&v20, (uint64_t)this + 192);
  unint64_t v3 = (void *)v24;
  if ((void)v24)
  {
    long long v4 = (char *)this + 32;
    do
    {
      uint64_t v6 = v3[5];
      uint64_t v5 = (std::__shared_weak_count *)v3[6];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = (*(uint64_t (**)(char *))(*(void *)v4 + 64))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))((char *)this + 32, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"forcing termination of transaction ", 35);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v6 + 152))(__p, v6);
      (*(void (**)(uint64_t, void **))(*(void *)v7 + 40))(v7, __p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 7);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      unint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  std::string v8 = (void *)v21;
  if ((void)v21)
  {
    uint64_t v9 = (char *)this + 32;
    do
    {
      uint64_t v11 = v8[5];
      uint64_t v10 = (std::__shared_weak_count *)v8[6];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)v9 + 64))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*(void *)v9 + 16))((char *)this + 32, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"forcing termination of transaction ", 35);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v11 + 160))(__p, v11);
      (*(void (**)(uint64_t, void **))(*(void *)v12 + 40))(v12, __p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 7);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      std::string v8 = (void *)*v8;
    }
    while (v8);
  }
  if (*((void *)this + 22))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__deallocate_node((uint64_t)v2, *((void **)this + 21));
    *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    uint64_t v13 = *((void *)this + 20);
    if (v13)
    {
      for (uint64_t i = 0; i != v13; ++i)
        *(void *)(*v2 + 8 * i) = 0;
    }
    *((void *)this + 22) = 0;
  }
  if (*((void *)this + 27))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__deallocate_node((uint64_t)this + 192, *((void **)this + 26));
    *((void *)this + 2ims::StackConfig::~StackConfig(this + 6) = 0;
    uint64_t v15 = *((void *)this + 25);
    if (v15)
    {
      for (uint64_t j = 0; j != v15; ++j)
        *(void *)(*((void *)this + 24) + 8 * j) = 0;
    }
    *((void *)this + 27) = 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v20);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v23);
}

void sub_1C54FD26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

void non-virtual thunk to'SipTransactionLayer::~SipTransactionLayer(SipTransactionLayer *this)
{
}

{
  SipTransactionLayer::~SipTransactionLayer((SipTransactionLayer *)((char *)this - 32));
}

{
  uint64_t vars8;

  SipTransactionLayer::~SipTransactionLayer((SipTransactionLayer *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipTransactionLayer::~SipTransactionLayer((SipTransactionLayer *)((char *)this - 32));
  JUMPOUT(0x1C878E320);
}

void SipTransactionLayer::initialize(SipTransactionLayer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    unint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      long long v4 = v3;
      uint64_t v5 = *((void *)this + 1);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 160);
        uint64_t v7 = *(void *)(v5 + 168);
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        std::string v8 = (std::__shared_weak_count *)*((void *)this + 18);
        *((void *)this + 17) = v6;
        *((void *)this + 18) = v7;
        if (v8)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          uint64_t v6 = *((void *)this + 17);
        }
        *(void *)(v6 + 272) = (char *)this + 24;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

uint64_t SipTransactionLayer::errorOutAllTransactions(SipTransactionLayer *this, const ImsResult *a2)
{
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipClientTransaction>>::unordered_map((uint64_t)&v26, (uint64_t)this + 152);
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipServerTransaction>>::unordered_map((uint64_t)&v23, (uint64_t)this + 192);
  long long v4 = (void *)v27;
  if ((void)v27)
  {
    uint64_t v5 = (char *)this + 32;
    do
    {
      uint64_t v7 = v4[5];
      uint64_t v6 = (std::__shared_weak_count *)v4[6];
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 144))(v7);
      uint64_t v9 = *(uint64_t (**)(char *))(*(void *)v5 + 64);
      if (v8)
      {
        uint64_t v10 = v9((char *)this + 32);
        (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 32, v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 152))(__p, v7);
        (*(void (**)(uint64_t, void **))(*(void *)v10 + 40))(v10, __p);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v10 + 17) = 0;
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 7);
      }
      else
      {
        uint64_t v11 = v9((char *)this + 32);
        (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 32, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Error out transaction ", 22);
        *(unsigned char *)(v11 + 17) = 0;
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 152))(__p, v7);
        (*(void (**)(uint64_t, void **))(*(void *)v11 + 40))(v11, __p);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v11 + 17) = 0;
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        (*(void (**)(uint64_t, const ImsResult *))(*(void *)v7 + 112))(v7, a2);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      long long v4 = (void *)*v4;
    }
    while (v4);
  }
  uint64_t v12 = (void *)v24;
  if ((void)v24)
  {
    uint64_t v13 = (char *)this + 32;
    do
    {
      uint64_t v15 = v12[5];
      unint64_t v14 = (std::__shared_weak_count *)v12[6];
      if (v14)
      {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 144))(v15);
      unint64_t v17 = *(uint64_t (**)(char *))(*(void *)v13 + 64);
      if (v16)
      {
        uint64_t v18 = v17(v13);
        (*(void (**)(char *, uint64_t))(*(void *)v13 + 16))(v13, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
        *(unsigned char *)(v18 + 17) = 0;
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v15 + 160))(__p, v15);
        (*(void (**)(uint64_t, void **))(*(void *)v18 + 40))(v18, __p);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v18 + 17) = 0;
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 7);
      }
      else
      {
        uint64_t v19 = v17(v13);
        (*(void (**)(char *, uint64_t))(*(void *)v13 + 16))(v13, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Error out transaction ", 22);
        *(unsigned char *)(v19 + 17) = 0;
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v15 + 160))(__p, v15);
        (*(void (**)(uint64_t, void **))(*(void *)v19 + 40))(v19, __p);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v19 + 17) = 0;
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        (*(void (**)(uint64_t, const ImsResult *))(*(void *)v15 + 112))(v15, a2);
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v23);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v26);
}

void sub_1C54FDA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

void SipTransactionLayer::clientTransactionFromFirstViaHop(SipTransactionLayer *this, const SipMessage *a2, uint64_t a3)
{
  HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>(a3);
  if (!HeaderWith
    || (uint64_t v7 = (SipViaHop **)*((void *)HeaderWith + 8), v7 == *((SipViaHop ***)HeaderWith + 9))
    || (int v8 = *v7) == 0)
  {
    uint64_t v15 = *((void *)a2 + 4);
    unint64_t v14 = (char *)a2 + 32;
    uint64_t v16 = (*(uint64_t (**)(char *))(v15 + 56))(v14);
    (*(void (**)(char *, uint64_t))(*(void *)v14 + 16))(v14, v16);
    unint64_t v17 = *(void **)(v16 + 8);
    uint64_t v18 = "couldn't get first via header from message";
    uint64_t v19 = 42;
LABEL_14:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    *(void *)this = 0;
    *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    return;
  }
  uint64_t v9 = SipViaHop::branch(*v7);
  uint64_t v10 = *((unsigned __int8 *)v9 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)v9 + 1);
  }
  if (!v10)
  {
    uint64_t v21 = *((void *)a2 + 4);
    long long v20 = (char *)a2 + 32;
    uint64_t v16 = (*(uint64_t (**)(char *))(v21 + 56))(v20);
    (*(void (**)(char *, uint64_t))(*(void *)v20 + 16))(v20, v16);
    unint64_t v17 = *(void **)(v16 + 8);
    uint64_t v18 = "no branch param in Via header";
    uint64_t v19 = 29;
    goto LABEL_14;
  }
  uint64_t v11 = SipViaHop::branch(v8);
  uint64_t v12 = (char *)SipMessage::header<SipCSeqHeader>(a3);
  if (v12) {
    uint64_t v13 = (long long *)(v12 + 64);
  }
  else {
    uint64_t v13 = &ims::kEmptyString;
  }
  SipTransactionLayer::clientTransactionWithIdAndMethod(this, (uint64_t)a2, (uint64_t)v11, (uint64_t)v13);
}

void SipTransactionLayer::clientTransactionWithIdAndMethod(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v14 = 0;
  SipTransaction::transactionMapKey(a3, a4, (uint64_t)__p);
  int v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((void *)(a2 + 152), (unsigned __int8 *)__p);
  if (v8)
  {
    uint64_t v9 = *((void *)v8 + 6);
    *a1 = *((void *)v8 + 5);
    a1[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 32);
    uint64_t v10 = a2 + 32;
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v10);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"can't find client transaction with id ", 38);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 32))(v12, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" and method ", 12);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 32))(v12, a4);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    *a1 = 0;
    a1[1] = 0;
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C54FDE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipTransactionLayer::serverTransactionFromFirstViaHop(SipTransactionLayer *this, const SipMessage *a2, uint64_t a3)
{
  HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>(a3);
  if (!HeaderWith
    || (uint64_t v7 = (SipViaHop **)*((void *)HeaderWith + 8), v7 == *((SipViaHop ***)HeaderWith + 9))
    || (int v8 = *v7) == 0)
  {
    uint64_t v16 = *((void *)a2 + 4);
    uint64_t v15 = (char *)a2 + 32;
    uint64_t v17 = (*(uint64_t (**)(char *))(v16 + 56))(v15);
    (*(void (**)(char *, uint64_t))(*(void *)v15 + 16))(v15, v17);
    uint64_t v18 = *(void **)(v17 + 8);
    uint64_t v19 = "couldn't get first via header from message";
    uint64_t v20 = 42;
LABEL_13:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    *(void *)this = 0;
    *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    return;
  }
  uint64_t v9 = SipViaHop::branch(*v7);
  uint64_t v10 = *((unsigned __int8 *)v9 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)v9 + 1);
  }
  if (!v10)
  {
    uint64_t v22 = *((void *)a2 + 4);
    uint64_t v21 = (char *)a2 + 32;
    uint64_t v17 = (*(uint64_t (**)(char *))(v22 + 56))(v21);
    (*(void (**)(char *, uint64_t))(*(void *)v21 + 16))(v21, v17);
    uint64_t v18 = *(void **)(v17 + 8);
    uint64_t v19 = "no branch param in Via header";
    uint64_t v20 = 29;
    goto LABEL_13;
  }
  uint64_t v11 = SipViaHop::branch(v8);
  uint64_t v12 = (char *)SipMessage::header<SipCSeqHeader>(a3);
  if (v12) {
    uint64_t v13 = (long long *)(v12 + 64);
  }
  else {
    uint64_t v13 = &ims::kEmptyString;
  }
  memset(&v29, 0, sizeof(v29));
  LODWORD(v14) = *((unsigned __int8 *)v13 + 23);
  if ((v14 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v13, *((void *)v13 + 1));
    LODWORD(v14) = *((unsigned __int8 *)v13 + 23);
  }
  else
  {
    std::string v29 = *(std::string *)v13;
  }
  __p[1] = 0;
  uint64_t v28 = 0;
  __p[0] = 0;
  uint64_t v14 = v14;
  if ((v14 & 0x80u) == 0) {
    uint64_t v23 = v14;
  }
  else {
    uint64_t v23 = *((void *)v13 + 1);
  }
  if (v23 != 3) {
    goto LABEL_29;
  }
  if ((v14 & 0x80) == 0)
  {
    if (v14)
    {
      long long v24 = &SipRequest::kMethodAck;
      while (*(unsigned __int8 *)v13 == *(unsigned __int8 *)v24)
      {
        uint64_t v13 = (long long *)((char *)v13 + 1);
        long long v24 = (long long *)((char *)v24 + 1);
        if (!--v14) {
          goto LABEL_28;
        }
      }
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (!memcmp(*(const void **)v13, &SipRequest::kMethodAck, *((void *)v13 + 1))) {
LABEL_28:
  }
    std::string::operator=(&v29, (const std::string *)"INVITE");
LABEL_29:
  SipTransaction::transactionMapKey((uint64_t)v11, (uint64_t)&v29, (uint64_t)__p);
  uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((void *)a2 + 24, (unsigned __int8 *)__p);
  if (v25)
  {
    uint64_t v26 = *((void *)v25 + 6);
    *(void *)this = *((void *)v25 + 5);
    *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v26;
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
}

void sub_1C54FE150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTransactionLayer::updateViaHeaderForRequest(SipTransactionLayer *this, SipRequest *a2)
{
  HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>(a2, 0);
  if (!HeaderWith || (long long v4 = (uint64_t *)*((void *)HeaderWith + 8), v4 == *((uint64_t **)HeaderWith + 9))) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  if (((*(uint64_t (**)(SipRequest *))(*(void *)a2 + 72))(a2) & 1) != 0 || !v5)
  {
    SipMessage::removeHeadersWithName(a2, SipHeader::kHeaderVia);
    operator new();
  }
  return v5;
}

void sub_1C54FE468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void SipTransactionLayer::sendRequest(uint64_t a1, const SipRequest *a2)
{
  bzero(v3, 0x210uLL);
  SipRequest::SipRequest((SipRequest *)v3, a2);
  SipRequest::clone((SipRequest *)v3);
}

void sub_1C54FEEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v60 - 89) < 0) {
    operator delete(*(void **)(v60 - 112));
  }
  BOOL v62 = *(std::__shared_weak_count **)(a11 + 8);
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a41);
  }
  ImsResult::~ImsResult((ImsResult *)&a42);
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a53);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  SipRequest::~SipRequest(&a60);
  _Unwind_Resume(a1);
}

void ___ZN19SipTransactionLayer11sendRequestERK10SipRequestNSt3__110shared_ptrI18SipTransactionUserEENS4_I21SipTransportInterfaceEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 40;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = v2 + 32;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 32) + 64))(v2 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"triggering error in client transaction ", 39);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" method ", 8);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)": ", 2);
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v7 = a1 + 88;
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v7, v6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  SipTransactionLayer::clientTransactionWithIdAndMethod(&v11, v2, v3, v4);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 112))(v11, v7);
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 64))(v5);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"triggerClientTransactionError: client transaction ", 50);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" no longer exists", 17);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
  }
  uint64_t v10 = v12;
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C54FF36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c14_ZTS9ImsResult(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }
  ImsResult::ImsResult((ImsResult *)(a1 + 88), (const std::string *)(a2 + 88));
}

void sub_1C54FF41C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c14_ZTS9ImsResult(uint64_t a1)
{
  ImsResult::~ImsResult((ImsResult *)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    operator delete(v2);
  }
}

void SipTransactionLayer::processMessageFromTransportLayer(uint64_t a1, void *lpsrc, uint64_t a3, uint64_t a4)
{
  if (v7)
  {
    uint64_t v8 = (uint64_t)v7;
    uint64_t v10 = *(SipServerTransaction **)a4;
    uint64_t v9 = *(atomic_ullong **)(a4 + 8);
    if (v9) {
      atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(void *)v7 + 112))(v7);
    uint64_t v12 = v11[23];
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = v11[23];
    }
    else {
      uint64_t v13 = *((void *)v11 + 1);
    }
    if (v13 != 3) {
      goto LABEL_21;
    }
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, &SipRequest::kMethodAck, *((void *)v11 + 1))) {
        goto LABEL_21;
      }
    }
    else if (v11[23])
    {
      uint64_t v14 = &SipRequest::kMethodAck;
      while (*v11 == *(unsigned __int8 *)v14)
      {
        ++v11;
        uint64_t v14 = (long long *)((char *)v14 + 1);
        if (!--v12) {
          goto LABEL_40;
        }
      }
LABEL_21:
      unint64_t v81 = 0;
      uint64_t v82 = 0;
      SipTransactionLayer::serverTransactionFromFirstViaHop((SipTransactionLayer *)&v81, (const SipMessage *)a1, v8);
      long long v27 = v81;
      if (v81) {
        goto LABEL_52;
      }
      if (v9) {
        atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
      }
      HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>(v8);
      if (HeaderWith
        && (std::string v29 = (SipViaHop **)*((void *)HeaderWith + 8), v29 != *((SipViaHop ***)HeaderWith + 9))
        && (uint64_t v30 = *v29) != 0)
      {
        uint64_t v31 = SipViaHop::branch(*v29);
        uint64_t v32 = *((unsigned __int8 *)v31 + 23);
        if ((v32 & 0x80u) != 0) {
          uint64_t v32 = *((void *)v31 + 1);
        }
        if (v32)
        {
          char v33 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 112))(v8);
          uint64_t v34 = v33[23];
          if ((v34 & 0x80u) == 0) {
            uint64_t v35 = v33[23];
          }
          else {
            uint64_t v35 = *((void *)v33 + 1);
          }
          if (v35 == 6)
          {
            if ((v34 & 0x80) == 0)
            {
              if (v33[23])
              {
                uint64_t v36 = "INVITE";
                while (*v33 == *(unsigned __int8 *)v36)
                {
                  ++v33;
                  ++v36;
                  if (!--v34) {
                    goto LABEL_80;
                  }
                }
                goto LABEL_79;
              }
LABEL_80:
              (*(void (**)(void **__return_ptr, SipViaHop *))(*(void *)v30 + 48))(__p, v30);
              std::string v52 = SipViaHop::branch(v30);
              SipServerInviteTransaction::create(a1, v8, (uint64_t)__p, (const std::string *)v52, v85);
              goto LABEL_81;
            }
            if (!memcmp(*(const void **)v33, "INVITE", *((void *)v33 + 1))) {
              goto LABEL_80;
            }
          }
LABEL_79:
          (*(void (**)(void **__return_ptr, SipViaHop *))(*(void *)v30 + 48))(__p, v30);
          unint64_t v51 = SipViaHop::branch(v30);
          SipServerNonInviteTransaction::create(a1, v8, (uint64_t)__p, (const std::string *)v51, v85);
LABEL_81:
          long long v27 = v85[0];
          CFIndex v40 = (std::__shared_weak_count *)v85[1];
          v85[0] = 0;
          v85[1] = 0;
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(SipServerTransaction *))(*(void *)v27 + 96))(v27);
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v84 = 0;
          uint64_t v53 = (*(uint64_t (**)(void))(**((void **)v27 + 37) + 112))(*((void *)v27 + 37));
          SipTransaction::transactionMapKey((uint64_t)v27 + 328, v53, (uint64_t)__p);
          uint64_t v54 = (void *)(a1 + 192);
          unint64_t v55 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 216, (uint64_t)__p);
          unint64_t v56 = v55;
          unint64_t v57 = *(void *)(a1 + 200);
          if (v57)
          {
            uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)v57);
            v58.i16[0] = vaddlv_u8(v58);
            unint64_t v78 = v58.u32[0];
            if (v58.u32[0] > 1uLL)
            {
              unint64_t v59 = v55;
              if (v55 >= v57) {
                unint64_t v59 = v55 % v57;
              }
            }
            else
            {
              unint64_t v59 = (v57 - 1) & v55;
            }
            uint64_t v60 = *(SipServerTransaction ***)(*v54 + 8 * v59);
            unint64_t v80 = v59;
            if (v60)
            {
              for (uint64_t i = *v60; i; uint64_t i = *(SipServerTransaction **)i)
              {
                unint64_t v62 = *((void *)i + 1);
                if (v62 == v56)
                {
                  char v63 = std::equal_to<std::string>::operator()[abi:ne180100](a1 + 224, (unsigned __int8 *)i + 16, (unsigned __int8 *)__p);
                  unint64_t v59 = v80;
                  if (v63) {
                    goto LABEL_127;
                  }
                }
                else
                {
                  if (v78 > 1)
                  {
                    if (v62 >= v57) {
                      v62 %= v57;
                    }
                  }
                  else
                  {
                    v62 &= v57 - 1;
                  }
                  if (v62 != v59) {
                    break;
                  }
                }
              }
              uint64_t v54 = (void *)(a1 + 192);
            }
          }
          else
          {
            unint64_t v80 = 0;
          }
          *(void *)&long long v86 = 0;
          long long v64 = operator new(0x38uLL);
          v85[0] = (SipServerTransaction *)v64;
          v85[1] = (SipServerTransaction *)(a1 + 208);
          unint64_t v79 = (void *)(a1 + 208);
          LOBYTE(v8ims::StackConfig::~StackConfig(this + 6) = 0;
          *long long v64 = 0;
          v64[1] = v56;
          int v65 = (std::string *)(v64 + 2);
          if (SHIBYTE(v84) < 0)
          {
            std::string::__init_copy_ctor_external(v65, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v65->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
            v64[4] = v84;
          }
          v64[5] = 0;
          v64[6] = 0;
          LOBYTE(v8ims::StackConfig::~StackConfig(this + 6) = 1;
          float v66 = (float)(unint64_t)(*(void *)(a1 + 216) + 1);
          float v67 = *(float *)(a1 + 224);
          unint64_t v68 = v80;
          if (!v57 || (float)(v67 * (float)v57) < v66)
          {
            BOOL v69 = 1;
            if (v57 >= 3) {
              BOOL v69 = (v57 & (v57 - 1)) != 0;
            }
            unint64_t v70 = v69 | (2 * v57);
            unint64_t v71 = vcvtps_u32_f32(v66 / v67);
            if (v70 <= v71) {
              size_t v72 = v71;
            }
            else {
              size_t v72 = v70;
            }
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>((uint64_t)v54, v72);
            unint64_t v57 = *(void *)(a1 + 200);
            if ((v57 & (v57 - 1)) != 0)
            {
              if (v56 >= v57) {
                unint64_t v68 = v56 % v57;
              }
              else {
                unint64_t v68 = v56;
              }
            }
            else
            {
              unint64_t v68 = (v57 - 1) & v56;
            }
          }
          uint64_t v73 = *(void **)(*v54 + 8 * v68);
          if (v73)
          {
            *(void *)v85[0] = *v73;
            void *v73 = v85[0];
            uint64_t v74 = (void *)(a1 + 216);
          }
          else
          {
            *(void *)v85[0] = *v79;
            void *v79 = v85[0];
            *(void *)(*v54 + 8 * v68) = v79;
            uint64_t v74 = (void *)(a1 + 216);
            if (*(void *)v85[0])
            {
              unint64_t v75 = *(void *)(*(void *)v85[0] + 8);
              if ((v57 & (v57 - 1)) != 0)
              {
                if (v75 >= v57) {
                  v75 %= v57;
                }
              }
              else
              {
                v75 &= v57 - 1;
              }
              *(SipServerTransaction **)(*v54 + 8 * v75) = v85[0];
            }
          }
          uint64_t i = v85[0];
          v85[0] = 0;
          ++*v74;
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v85, 0);
LABEL_127:
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::size_type v76 = (std::__shared_weak_count *)*((void *)i + 6);
          *((void *)i + 5) = v27;
          *((void *)i + ims::StackConfig::~StackConfig(this + 6) = v40;
          if (v76) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v76);
          }
          if (SHIBYTE(v84) < 0) {
            operator delete(__p[0]);
          }
          if (v40) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v40);
          }
          if (v10)
          {
            v85[0] = v10;
            v85[1] = (SipServerTransaction *)v9;
            if (v9) {
              atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, SipServerTransaction **, uint64_t))(*((void *)v27 + 9) + 48))((uint64_t)v27 + 72, v85, 1);
            if (v85[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v85[1]);
            }
          }
          uint64_t v77 = SipTransportLayer::userAgent((SipTransportLayer *)a1);
          __p[0] = v27;
          __p[1] = v40;
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          SipUserAgent::handleNewServerTransaction(v77, (uint64_t *)__p);
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
LABEL_47:
          char v41 = v82;
          uint64_t v82 = v40;
          if (v41) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v41);
          }
          if (v9) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
          }
          if (!v27) {
            goto LABEL_69;
          }
LABEL_52:
          uint64_t v89 = 0;
          long long v87 = 0u;
          long long v88 = 0u;
          *(_OWORD *)unint64_t v85 = 0u;
          long long v86 = 0u;
          (*(void (**)(SipServerTransaction **__return_ptr, uint64_t))(*(void *)v8 + 88))(v85, v8);
          if ((*(unsigned int (**)(SipServerTransaction *, void))(*(void *)v85[1] + 24))(v85[1], v86))
          {
            uint64_t v43 = *(void *)(a1 + 32);
            uint64_t v42 = a1 + 32;
            uint64_t v44 = (*(uint64_t (**)(uint64_t))(v43 + 64))(v42);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v44);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"request is not valid: ", 22);
            *(unsigned char *)(v44 + 17) = 0;
            (*((void (**)(SipServerTransaction **, uint64_t))v85[0] + 2))(v85, v44);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v44 + 17) = 0;
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            SipServerTransaction::rejectTransactionWithStatus((uint64_t)v27, 400, (uint64_t)__p);
          }
          else
          {
            if (SipUri::isValidUri((SipUri *)(v8 + 112)))
            {
              SipServerTransaction::handleRequest(v27, (const SipRequest *)v8);
LABEL_68:
              ImsResult::~ImsResult((ImsResult *)v85);
              CFIndex v40 = v82;
LABEL_69:
              if (!v40) {
                goto LABEL_72;
              }
              char v47 = v40;
              goto LABEL_71;
            }
            uint64_t v49 = *(void *)(a1 + 32);
            uint64_t v48 = a1 + 32;
            uint64_t v50 = (*(uint64_t (**)(uint64_t))(v49 + 64))(v48);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 16))(v48, v50);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)"request URI is not valid", 24);
            *(unsigned char *)(v50 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v50 + 17) = 0;
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            SipServerTransaction::rejectTransactionWithStatus((uint64_t)v27, 416, (uint64_t)__p);
          }
          if (SHIBYTE(v84) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_68;
        }
        uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 48))(a1 + 32);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(a1 + 32, v39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"incoming request has no branch in via header: ", 46);
        *(unsigned char *)(v39 + 17) = 0;
        (*(void (**)(SipViaHop *, uint64_t))(*(void *)v30 + 40))(v30, v39);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 48))(a1 + 32);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(a1 + 32, v39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"incoming request has no via header", 34);
        *(unsigned char *)(v39 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      CFIndex v40 = 0;
      long long v27 = 0;
      *(unsigned char *)(v39 + 17) = 0;
      goto LABEL_47;
    }
LABEL_40:
    v85[0] = 0;
    v85[1] = 0;
    SipTransactionLayer::serverTransactionFromFirstViaHop((SipTransactionLayer *)v85, (const SipMessage *)a1, v8);
    if (v85[0] && (uint64_t v37 = *((void *)v85[0] + 71)) != 0 && *(_DWORD *)(v37 + 88) >= 0x12Cu)
    {
      SipServerTransaction::handleRequest(v85[0], (const SipRequest *)v8);
    }
    else
    {
      uint64_t v38 = SipTransportLayer::userAgent((SipTransportLayer *)a1);
      SipDialogManager::handleAck(*(SipDialogManager **)(v38 + 176), (const SipRequest *)v8);
    }
  }
  else
  {
    if (!v15)
    {
      uint64_t v23 = *(void *)(a1 + 32);
      uint64_t v22 = a1 + 32;
      uint64_t v24 = (*(uint64_t (**)(uint64_t))(v23 + 56))(v22);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"unknown sip message type: ", 26);
      *(unsigned char *)(v24 + 17) = 0;
      uint64_t v25 = (const char *)(*(void *)(*(void *)(*lpsrc - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      size_t v26 = strlen(v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)v25, v26);
      *(unsigned char *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v24 + 17) = 0;
      return;
    }
    uint64_t v16 = v15;
    uint64_t v17 = *(SipServerTransaction **)a4;
    uint64_t v9 = *(atomic_ullong **)(a4 + 8);
    if (v9) {
      atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(SipServerTransaction **__return_ptr, const SipResponse *))(*(void *)v15 + 88))(v85, v15);
    int v18 = (*(uint64_t (**)(SipServerTransaction *, void))(*(void *)v85[1] + 24))(v85[1], v86);
    ImsResult::~ImsResult((ImsResult *)v85);
    if (v18)
    {
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v19 = a1 + 32;
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(v20 + 48))(v19);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"dropping invalid response", 25);
      *(unsigned char *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v21 + 17) = 0;
      goto LABEL_72;
    }
    v85[0] = 0;
    v85[1] = 0;
    SipTransactionLayer::clientTransactionFromFirstViaHop((SipTransactionLayer *)v85, (const SipMessage *)a1, (uint64_t)v16);
    long long v45 = v85[0];
    if (v85[0])
    {
      if (v17)
      {
        unint64_t v46 = (char *)v85[0] + 72;
        __p[0] = v17;
        __p[1] = v9;
        if (v9) {
          atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(char *, void **, uint64_t))(*(void *)v46 + 48))(v46, __p, 1);
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
      }
      SipClientTransaction::handleResponse(v45, v16);
    }
  }
  char v47 = (std::__shared_weak_count *)v85[1];
  if (v85[1]) {
LABEL_71:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
LABEL_72:
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
  }
}

void sub_1C55002D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipTransactionLayer::processMessageFromTransportLayer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t SipTransactionLayer::determineIncomingMessageCategory(SipTransactionLayer *this, const SipMessage *a2)
{
  long long v4 = (char *)this + 32;
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"SipTransactionLayer::determineIncomingMessageCategory", 53);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (!v6)
  {
    uint64_t v23 = (*(uint64_t (**)(char *))(*(void *)v4 + 64))(v4);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v23);
    uint64_t v24 = *(void **)(v23 + 8);
    if (!v22)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Not a SipRequest or SipResponse", 31);
      *(unsigned char *)(v23 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      unsigned __int8 v36 = 0;
      *(unsigned char *)(v23 + 17) = 0;
      return v36;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Is a SipResponse", 16);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v23 + 17) = 0;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    SipTransactionLayer::clientTransactionFromFirstViaHop((SipTransactionLayer *)&v99, this, (uint64_t)v22);
    uint64_t v25 = v99;
    if (!v99)
    {
      uint64_t v45 = (*(uint64_t (**)(char *))(*(void *)v4 + 64))(v4);
      (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"Didn't get a client transaction", 31);
      *(unsigned char *)(v45 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      unsigned __int8 v36 = 0;
      *(unsigned char *)(v45 + 17) = 0;
LABEL_161:
      if (v100) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v100);
      }
      return v36;
    }
    bzero(v94, 0x210uLL);
    SipRequest::SipRequest((SipRequest *)v94, *(const SipRequest **)(v25 + 296));
    size_t v26 = (char *)SipMessage::header<SipConversationIdHeader>((uint64_t)v94);
    long long v27 = (long long *)(v26 + 64);
    if (!v26) {
      long long v27 = &ims::kEmptyString;
    }
    uint64_t v28 = *((unsigned __int8 *)v27 + 23);
    uint64_t v29 = *((void *)v27 + 1);
    if ((v28 & 0x80u) == 0) {
      uint64_t v29 = v28;
    }
    if (v29) {
      goto LABEL_35;
    }
    uint64_t v30 = (char *)SipMessage::header<SipContributionIdHeader>((uint64_t)v94);
    uint64_t v31 = (long long *)(v30 + 64);
    if (!v30) {
      uint64_t v31 = &ims::kEmptyString;
    }
    uint64_t v32 = *((unsigned __int8 *)v31 + 23);
    uint64_t v33 = *((void *)v31 + 1);
    if ((v32 & 0x80u) == 0) {
      uint64_t v33 = v32;
    }
    if (v33)
    {
LABEL_35:
      BOOL v34 = 1;
    }
    else
    {
      std::string::size_type v76 = (char *)SipMessage::header<SipInReplyToContributionIdHeader>((uint64_t)v94);
      uint64_t v77 = (long long *)(v76 + 64);
      if (!v76) {
        uint64_t v77 = &ims::kEmptyString;
      }
      uint64_t v78 = *((unsigned __int8 *)v77 + 23);
      uint64_t v79 = *((void *)v77 + 1);
      if ((v78 & 0x80u) == 0) {
        uint64_t v79 = v78;
      }
      BOOL v34 = v79 != 0;
    }
    uint64_t v35 = (*(uint64_t (**)(char *))(*(void *)v4 + 64))(v4);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"Has Lazuli headers? : ", 22);
    *(unsigned char *)(v35 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v35 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v35 + 17) = 0;
    if (v34)
    {
      unsigned __int8 v36 = 3;
LABEL_158:
      v94[0] = &unk_1F20D3808;
      SipUri::~SipUri((SipUri *)&v98);
      if ((char)v97 < 0) {
        operator delete(__s1);
      }
      SipMessage::~SipMessage((SipMessage *)v94);
      goto LABEL_161;
    }
    uint64_t v50 = v97;
    if ((v97 & 0x80u) == 0) {
      size_t v51 = v97;
    }
    else {
      size_t v51 = __n;
    }
    if (v51 == 7)
    {
      if ((v97 & 0x80) == 0)
      {
        if (v97)
        {
          p_s1 = &__s1;
          uint64_t v53 = "MESSAGE";
          while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v53)
          {
            p_s1 = (void **)((char *)p_s1 + 1);
            ++v53;
            if (!--v50) {
              goto LABEL_154;
            }
          }
          goto LABEL_152;
        }
LABEL_154:
        unsigned __int8 v36 = 1;
        goto LABEL_158;
      }
      if (!memcmp(__s1, "MESSAGE", __n)) {
        goto LABEL_154;
      }
    }
LABEL_152:
    uint64_t v84 = (*(uint64_t (**)(char *))(*(void *)v4 + 64))(v4);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v84 + 8), (uint64_t)"determining based on transaction", 32);
    *(unsigned char *)(v84 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v84 + 64))(v84, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v84 + 17) = 0;
    unint64_t v85 = (SipUserAgent *)SipTransportLayer::userAgent(this);
    long long v86 = v85;
    if (v85) {
      LOBYTE(v85) = SipUserAgent::determineIncomingMessageCategory(v85, (const SipRequest *)v94, v22);
    }
    if (v86) {
      unsigned __int8 v36 = v85;
    }
    else {
      unsigned __int8 v36 = 0;
    }
    goto LABEL_158;
  }
  uint64_t v7 = v6;
  uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)v4 + 64))(v4);
  (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Is a SipRequest", 15);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  uint64_t v9 = (char *)SipMessage::header<SipConversationIdHeader>((uint64_t)a2);
  uint64_t v10 = (long long *)(v9 + 64);
  if (!v9) {
    uint64_t v10 = &ims::kEmptyString;
  }
  uint64_t v11 = *((unsigned __int8 *)v10 + 23);
  uint64_t v12 = *((void *)v10 + 1);
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = v11;
  }
  if (v12) {
    goto LABEL_12;
  }
  uint64_t v13 = (char *)SipMessage::header<SipContributionIdHeader>((uint64_t)a2);
  uint64_t v14 = (long long *)(v13 + 64);
  if (!v13) {
    uint64_t v14 = &ims::kEmptyString;
  }
  uint64_t v15 = *((unsigned __int8 *)v14 + 23);
  uint64_t v16 = *((void *)v14 + 1);
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v15;
  }
  if (v16)
  {
LABEL_12:
    BOOL v17 = 1;
  }
  else
  {
    char v41 = (char *)SipMessage::header<SipInReplyToContributionIdHeader>((uint64_t)a2);
    uint64_t v42 = (long long *)(v41 + 64);
    if (!v41) {
      uint64_t v42 = &ims::kEmptyString;
    }
    uint64_t v43 = *((unsigned __int8 *)v42 + 23);
    uint64_t v44 = *((void *)v42 + 1);
    if ((v43 & 0x80u) == 0) {
      uint64_t v44 = v43;
    }
    BOOL v17 = v44 != 0;
  }
  int v18 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)v7 + 112))(v7);
  uint64_t v19 = v18[23];
  if ((v19 & 0x80u) == 0) {
    uint64_t v20 = v18[23];
  }
  else {
    uint64_t v20 = *((void *)v18 + 1);
  }
  if (v20 == 6)
  {
    if ((v19 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v18, "INVITE", *((void *)v18 + 1))) {
        goto LABEL_110;
      }
    }
    else
    {
      if (!v18[23]) {
        goto LABEL_110;
      }
      uint64_t v21 = "INVITE";
      while (*v18 == *(unsigned __int8 *)v21)
      {
        ++v18;
        ++v21;
        if (!--v19) {
          goto LABEL_110;
        }
      }
    }
  }
  uint64_t v37 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)v7 + 112))(v7);
  uint64_t v38 = v37[23];
  if ((v38 & 0x80u) == 0) {
    uint64_t v39 = v37[23];
  }
  else {
    uint64_t v39 = *((void *)v37 + 1);
  }
  if (v39 == 3)
  {
    if ((v38 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v37, &SipRequest::kMethodBye, *((void *)v37 + 1))) {
        goto LABEL_110;
      }
    }
    else
    {
      if (!v37[23]) {
        goto LABEL_110;
      }
      CFIndex v40 = &SipRequest::kMethodBye;
      while (*v37 == *(unsigned __int8 *)v40)
      {
        ++v37;
        CFIndex v40 = (long long *)((char *)v40 + 1);
        if (!--v38) {
          goto LABEL_110;
        }
      }
    }
  }
  unint64_t v46 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)v7 + 112))(v7);
  uint64_t v47 = v46[23];
  if ((v47 & 0x80u) == 0) {
    uint64_t v48 = v46[23];
  }
  else {
    uint64_t v48 = *((void *)v46 + 1);
  }
  if (v48 == 5)
  {
    if ((v47 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v46, "REFER", *((void *)v46 + 1))) {
        goto LABEL_110;
      }
    }
    else
    {
      if (!v46[23]) {
        goto LABEL_110;
      }
      uint64_t v49 = "REFER";
      while (*v46 == *(unsigned __int8 *)v49)
      {
        ++v46;
        ++v49;
        if (!--v47) {
          goto LABEL_110;
        }
      }
    }
  }
  uint64_t v54 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)v7 + 112))(v7);
  uint64_t v55 = v54[23];
  if ((v55 & 0x80u) == 0) {
    uint64_t v56 = v54[23];
  }
  else {
    uint64_t v56 = *((void *)v54 + 1);
  }
  if (v56 == 6)
  {
    if ((v55 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v54, "CANCEL", *((void *)v54 + 1))) {
        goto LABEL_110;
      }
    }
    else
    {
      if (!v54[23]) {
        goto LABEL_110;
      }
      unint64_t v57 = "CANCEL";
      while (*v54 == *(unsigned __int8 *)v57)
      {
        ++v54;
        ++v57;
        if (!--v55) {
          goto LABEL_110;
        }
      }
    }
  }
  uint8x8_t v58 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)v7 + 112))(v7);
  uint64_t v59 = v58[23];
  if ((v59 & 0x80u) == 0) {
    uint64_t v60 = v58[23];
  }
  else {
    uint64_t v60 = *((void *)v58 + 1);
  }
  if (v60 != 7) {
    goto LABEL_100;
  }
  if ((v59 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v58, "MESSAGE", *((void *)v58 + 1))) {
      goto LABEL_100;
    }
    goto LABEL_110;
  }
  if (!v58[23])
  {
LABEL_110:
    uint64_t v66 = (*(uint64_t (**)(char *))(*(void *)v4 + 64))(v4);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), (uint64_t)"Is a ", 5);
    *(unsigned char *)(v66 + 17) = 0;
    uint64_t v67 = (*(uint64_t (**)(const SipRequest *))(*(void *)v7 + 112))(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v66 + 32))(v66, v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), (uint64_t)". HasLazuliHeaders: ", 20);
    *(unsigned char *)(v66 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v66 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v66 + 17) = 0;
    if (v17)
    {
      return 3;
    }
    else
    {
      unint64_t v68 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)v7 + 112))(v7);
      uint64_t v69 = v68[23];
      if ((v69 & 0x80u) == 0) {
        uint64_t v70 = v68[23];
      }
      else {
        uint64_t v70 = *((void *)v68 + 1);
      }
      if (v70 != 7) {
        return 2;
      }
      if ((v69 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v68, "MESSAGE", *((void *)v68 + 1))) {
          return 2;
        }
      }
      else if (v68[23])
      {
        for (uint64_t i = "MESSAGE"; *v68 == *(unsigned __int8 *)i; ++i)
        {
          ++v68;
          if (!--v69) {
            return 1;
          }
        }
        return 2;
      }
      return 1;
    }
  }
  unint64_t v61 = "MESSAGE";
  while (*v58 == *(unsigned __int8 *)v61)
  {
    ++v58;
    ++v61;
    if (!--v59) {
      goto LABEL_110;
    }
  }
LABEL_100:
  unint64_t v62 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)v7 + 112))(v7);
  uint64_t v63 = v62[23];
  if ((v63 & 0x80u) == 0) {
    uint64_t v64 = v62[23];
  }
  else {
    uint64_t v64 = *((void *)v62 + 1);
  }
  if (v64 == 4)
  {
    if ((v63 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v62, "INFO", *((void *)v62 + 1))) {
        return 2;
      }
    }
    else
    {
      if (!v62[23]) {
        return 2;
      }
      int v65 = "INFO";
      unsigned __int8 v36 = 2;
      while (*v62 == *(unsigned __int8 *)v65)
      {
        ++v62;
        ++v65;
        if (!--v63) {
          return v36;
        }
      }
    }
  }
  size_t v72 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)v7 + 112))(v7);
  uint64_t v73 = v72[23];
  if ((v73 & 0x80u) == 0) {
    uint64_t v74 = v72[23];
  }
  else {
    uint64_t v74 = *((void *)v72 + 1);
  }
  if (v74 == 5)
  {
    if ((v73 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v72, "PRACK", *((void *)v72 + 1))) {
        return 2;
      }
    }
    else
    {
      if (!v72[23]) {
        return 2;
      }
      unint64_t v75 = "PRACK";
      unsigned __int8 v36 = 2;
      while (*v72 == *(unsigned __int8 *)v75)
      {
        ++v72;
        ++v75;
        if (!--v73) {
          return v36;
        }
      }
    }
  }
  unint64_t v80 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)v7 + 112))(v7);
  uint64_t v81 = v80[23];
  if ((v81 & 0x80u) == 0) {
    uint64_t v82 = v80[23];
  }
  else {
    uint64_t v82 = *((void *)v80 + 1);
  }
  if (v82 != 6) {
    goto LABEL_164;
  }
  if ((v81 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v80, "UPDATE", *((void *)v80 + 1))) {
      goto LABEL_164;
    }
    return 2;
  }
  if (!v80[23]) {
    return 2;
  }
  uint64_t v83 = "UPDATE";
  unsigned __int8 v36 = 2;
  while (*v80 == *(unsigned __int8 *)v83)
  {
    ++v80;
    ++v83;
    if (!--v81) {
      return v36;
    }
  }
LABEL_164:
  long long v87 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)v7 + 112))(v7);
  if (!std::operator==[abi:ne180100]<std::allocator<char>>(v87, (unsigned __int8 *)&SipRequest::kMethodAck))
  {
    long long v88 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)v7 + 112))(v7);
    if (!std::operator==[abi:ne180100]<std::allocator<char>>(v88, "NOTIFY"))
    {
      uint64_t v89 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)v7 + 112))(v7);
      if (!std::operator==[abi:ne180100]<std::allocator<char>>(v89, "OPTIONS"))
      {
        std::string::size_type v90 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)v7 + 112))(v7);
        if (!std::operator==[abi:ne180100]<std::allocator<char>>(v90, "REGISTER"))
        {
          uint64_t v91 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)v7 + 112))(v7);
          if (!std::operator==[abi:ne180100]<std::allocator<char>>(v91, "SUBSCRIBE")) {
            return 0;
          }
        }
      }
    }
  }
  uint64_t v92 = (SipUserAgent *)SipTransportLayer::userAgent(this);
  if (!v92) {
    return 0;
  }
  return SipUserAgent::determineIncomingMessageCategory(v92, v7, 0);
}

void sub_1C5501344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  SipRequest::~SipRequest(&a9);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 - 56);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'SipTransactionLayer::determineIncomingMessageCategory(SipTransactionLayer *this, const SipMessage *a2)
{
  return SipTransactionLayer::determineIncomingMessageCategory((SipTransactionLayer *)((char *)this - 24), a2);
}

void SipTransactionLayer::transactionTerminated(void *a1, uint64_t a2, uint64_t a3)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v34 = 0;
  SipTransaction::transactionMapKey(a2, a3, (uint64_t)__p);
  long long v4 = a1 + 19;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1 + 19, (unsigned __int8 *)__p);
  if (v5)
  {
    int8x8_t v6 = (int8x8_t)a1[20];
    unint64_t v7 = *((void *)v5 + 1);
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= *(void *)&v6) {
        v7 %= *(void *)&v6;
      }
    }
    else
    {
      v7 &= *(void *)&v6 - 1;
    }
    uint64_t v14 = *(unsigned __int8 **)(*v4 + 8 * v7);
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = *(unsigned __int8 **)v14;
    }
    while (v14 != v5);
    if (v15 == (unsigned __int8 *)(a1 + 21)) {
      goto LABEL_28;
    }
    unint64_t v16 = *((void *)v15 + 1);
    if (v8.u32[0] > 1uLL)
    {
      if (v16 >= *(void *)&v6) {
        v16 %= *(void *)&v6;
      }
    }
    else
    {
      v16 &= *(void *)&v6 - 1;
    }
    if (v16 != v7)
    {
LABEL_28:
      if (!*(void *)v5) {
        goto LABEL_29;
      }
      unint64_t v17 = *(void *)(*(void *)v5 + 8);
      if (v8.u32[0] > 1uLL)
      {
        if (v17 >= *(void *)&v6) {
          v17 %= *(void *)&v6;
        }
      }
      else
      {
        v17 &= *(void *)&v6 - 1;
      }
      if (v17 != v7) {
LABEL_29:
      }
        *(void *)(*v4 + 8 * v7) = 0;
    }
    uint64_t v25 = *(void *)v5;
    if (*(void *)v5)
    {
      unint64_t v26 = *(void *)(v25 + 8);
      if (v8.u32[0] > 1uLL)
      {
        if (v26 >= *(void *)&v6) {
          v26 %= *(void *)&v6;
        }
      }
      else
      {
        v26 &= *(void *)&v6 - 1;
      }
      if (v26 != v7)
      {
        *(void *)(*v4 + 8 * v2ims::StackConfig::~StackConfig(this + 6) = v15;
        uint64_t v25 = *(void *)v5;
      }
    }
    *(void *)uint64_t v15 = v25;
    *(void *)uint64_t v5 = 0;
    --a1[22];
    uint64_t v35 = v5;
    unsigned __int8 v36 = a1 + 21;
    char v37 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v35, 0);
  }
  else
  {
    uint64_t v9 = a1 + 24;
    uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1 + 24, (unsigned __int8 *)__p);
    if (v10)
    {
      int8x8_t v11 = (int8x8_t)a1[25];
      unint64_t v12 = *((void *)v10 + 1);
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v11) {
          v12 %= *(void *)&v11;
        }
      }
      else
      {
        v12 &= *(void *)&v11 - 1;
      }
      long long v27 = *(unsigned __int8 **)(*v9 + 8 * v12);
      do
      {
        uint64_t v28 = v27;
        long long v27 = *(unsigned __int8 **)v27;
      }
      while (v27 != v10);
      if (v28 == (unsigned __int8 *)(a1 + 26)) {
        goto LABEL_53;
      }
      unint64_t v29 = *((void *)v28 + 1);
      if (v13.u32[0] > 1uLL)
      {
        if (v29 >= *(void *)&v11) {
          v29 %= *(void *)&v11;
        }
      }
      else
      {
        v29 &= *(void *)&v11 - 1;
      }
      if (v29 != v12)
      {
LABEL_53:
        if (!*(void *)v10) {
          goto LABEL_54;
        }
        unint64_t v30 = *(void *)(*(void *)v10 + 8);
        if (v13.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&v11) {
            v30 %= *(void *)&v11;
          }
        }
        else
        {
          v30 &= *(void *)&v11 - 1;
        }
        if (v30 != v12) {
LABEL_54:
        }
          *(void *)(*v9 + 8 * v12) = 0;
      }
      uint64_t v31 = *(void *)v10;
      if (*(void *)v10)
      {
        unint64_t v32 = *(void *)(v31 + 8);
        if (v13.u32[0] > 1uLL)
        {
          if (v32 >= *(void *)&v11) {
            v32 %= *(void *)&v11;
          }
        }
        else
        {
          v32 &= *(void *)&v11 - 1;
        }
        if (v32 != v12)
        {
          *(void *)(*v9 + 8 * v32) = v28;
          uint64_t v31 = *(void *)v10;
        }
      }
      *(void *)uint64_t v28 = v31;
      *(void *)uint64_t v10 = 0;
      --a1[27];
      uint64_t v35 = v10;
      unsigned __int8 v36 = a1 + 26;
      char v37 = 1;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v35, 0);
    }
    else
    {
      int v18 = (std::__shared_weak_count *)a1[2];
      if (v18)
      {
        uint64_t v19 = std::__shared_weak_count::lock(v18);
        if (v19)
        {
          uint64_t v20 = v19;
          uint64_t v21 = a1[1];
          if (v21 && *(_DWORD *)(v21 + 200) == 2)
          {
            uint64_t v23 = a1[4];
            uint64_t v22 = a1 + 4;
            uint64_t v24 = (*(uint64_t (**)(void *))(v23 + 56))(v22);
            (*(void (**)(void *, uint64_t))(*v22 + 16))(v22, v24);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"transactionTerminated: unknown transaction ", 43);
            *(unsigned char *)(v24 + 17) = 0;
            (*(void (**)(uint64_t, void **))(*(void *)v24 + 32))(v24, __p);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v24 + 17) = 0;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
      }
    }
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5501788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t SipTransactionLayer::printTransactions(uint64_t this, ImsOutStream *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 176) || *(void *)(this + 216))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Current transactions:", 21);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    for (uint64_t i = *(long long **)(v3 + 168); i; uint64_t i = *(long long **)i)
    {
      unint64_t v16 = 0;
      memset(v15, 0, sizeof(v15));
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)v15, i + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  ", 2);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(void **__return_ptr))(**(void **)&v15[24] + 152))(v13);
      (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
      *((unsigned char *)a2 + 17) = 0;
      uint64_t v5 = *(void *)&v15[24];
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)&v15[24] + 24))(*(void *)&v15[24]);
      unint64_t v7 = (const std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v6);
      LoggableString::LoggableString(&__p, v7);
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v14 < 0) {
        operator delete(v13[0]);
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if ((v15[23] & 0x80000000) != 0) {
        operator delete(*(void **)v15);
      }
    }
    for (uint64_t j = *(long long **)(v3 + 208); j; uint64_t j = *(long long **)j)
    {
      unint64_t v16 = 0;
      memset(v15, 0, sizeof(v15));
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)v15, j + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  ", 2);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(void **__return_ptr))(**(void **)&v15[24] + 160))(v13);
      (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
      *((unsigned char *)a2 + 17) = 0;
      uint64_t v9 = *(void *)&v15[24];
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)&v15[24] + 24))(*(void *)&v15[24]);
      int8x8_t v11 = (const std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v10);
      LoggableString::LoggableString(&__p, v11);
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v14 < 0) {
        operator delete(v13[0]);
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if ((v15[23] & 0x80000000) != 0) {
        operator delete(*(void **)v15);
      }
    }
    this = (*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
  return this;
}

void sub_1C5501C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void SipTransactionLayer::sendMessageInTransaction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint8x8_t v8 = *(std::__shared_weak_count **)(*(void *)a3 + 88);
  if (v8)
  {
    uint64_t v9 = *(void *)(*(void *)a3 + 80);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v26 = 0;
    long long v27 = std::__shared_weak_count::lock(v8);
    if (v27) {
      uint64_t v26 = v9;
    }
    std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
    uint64_t v26 = 0;
    long long v27 = 0;
  }
  uint64_t v10 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  *(void *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = 0u;
  SipTransportLayer::sendMessage(*(void *)(a1 + 136), v10, &v26, 0, (ImsResult *)a4);
  if (v10) {
    (*(void (**)(const void *))(*(void *)v10 + 8))(v10);
  }
  int8x8_t v11 = *(std::__shared_weak_count **)(*(void *)a3 + 88);
  if (v11)
  {
    uint64_t v12 = *(void *)(*(void *)a3 + 80);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint8x8_t v13 = std::__shared_weak_count::lock(v11);
    uint64_t v14 = v26;
    if (v13)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      std::__shared_weak_count::__release_weak(v11);
      if (v14 == v12) {
        goto LABEL_25;
      }
    }
    else
    {
      std::__shared_weak_count::__release_weak(v11);
      if (!v14) {
        goto LABEL_25;
      }
    }
    uint64_t v15 = v26;
    if (!v26) {
      goto LABEL_21;
    }
  }
  else if (!v26)
  {
    goto LABEL_25;
  }
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v16 = a1 + 32;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(v17 + 64))(v16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"changed to ", 11);
  *(unsigned char *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 104))(v26, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" for transaction ", 17);
  *(unsigned char *)(v18 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v22, (const std::string *)(*(void *)a3 + 328));
  (*(void (**)(uint64_t, void **))(*(void *)v18 + 56))(v18, v22);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v18 + 17) = 0;
  if (v25 < 0) {
    operator delete(__p);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  uint64_t v15 = v26;
LABEL_21:
  uint64_t v19 = *(void *)a3 + 72;
  uint64_t v20 = v15;
  uint64_t v21 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v19 + 48))(v19, &v20, 1);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
LABEL_25:
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
}

void sub_1C5501FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  ImsResult::~ImsResult(v18);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

void SipTransactionLayer::logPrefix(SipTransactionLayer *this, ImsOutStream *a2)
{
  long long v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v4)
  {
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5 || (uint64_t v6 = *((void *)this + 1)) == 0 || !*(unsigned char *)(v6 + 176))
  {
LABEL_7:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"TransactionLayer: ", 18);
    *((unsigned char *)a2 + 17) = 0;
    if (!v5) {
      return;
    }
    goto LABEL_8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"TransactionLayer(EMERGENCY): ", 29);
  *((unsigned char *)a2 + 17) = 0;
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C55020C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipTransactionLayer::logPrefix(SipTransactionLayer *this, ImsOutStream *a2)
{
}

uint64_t SipTransactionLayer::activeTransactionCount(SipTransactionLayer *this)
{
  uint64_t v2 = (long long *)*((void *)this + 21);
  if (v2)
  {
    LODWORD(vIMSCallOptions::~IMSCallOptions(this + 3) = 0;
    do
    {
      uint64_t v10 = 0;
      *(_OWORD *)std::string __p = 0u;
      long long v9 = 0u;
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, v2 + 1);
      int v4 = (*(uint64_t (**)(void))(**((void **)&v9 + 1) + 144))(*((void *)&v9 + 1));
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      if (SBYTE7(v9) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v3 = v3 + (v4 ^ 1);
      uint64_t v2 = *(long long **)v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  for (uint64_t i = (long long *)*((void *)this + 26); i; uint64_t i = *(long long **)i)
  {
    uint64_t v10 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v9 = 0u;
    std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, i + 1);
    int v6 = (*(uint64_t (**)(void))(**((void **)&v9 + 1) + 144))(*((void *)&v9 + 1));
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (SBYTE7(v9) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v3 = v3 + (v6 ^ 1);
  }
  return v3;
}

void sub_1C550221C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void IBISessionHelper::sendCreateMediaRequest(IBISessionHelper *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5 && *(void *)this)
    {
      std::string::basic_string[abi:ne180100]<0>(v10, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)v10, (uint64_t)__p);
      size_t v7 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v7);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"sendCreateMediaRequest", 22);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v36 < 0) {
        operator delete(__p[0]);
      }
      if (SBYTE7(v11) < 0) {
        operator delete(v10[0]);
      }
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      *(_OWORD *)uint64_t v10 = 0u;
      AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK::ARI_IBIImsMECreateAudioMediaSessionReq_SDK((AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK *)v10);
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v10, (uint64_t)__p);
  size_t v9 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"sendCreateMediaRequest", 22);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=0]", 14);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v11) < 0) {
    operator delete(v10[0]);
  }
  *(void *)(a2 + 5ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 1ims::StackConfig::~StackConfig(this + 6) = 0x40000000;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5502EC8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C55030C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  JUMPOUT(0x1C55030ACLL);
}

void AriSdk::Tlv<IBIImsMERtcpProfile>::operator=<IBIImsMERtcpProfile,void>()
{
}

void ibiUtils::ibiSetValue<IBIImsMEAudioCodec,4ul,std::vector<IBIImsMEAudioCodec>>(uint64_t a1, const char *a2, const char *a3)
{
  long long v12 = 0;
  __dst = 0;
  uint64_t v14 = 0;
  int64_t v4 = a3 - a2;
  if (a3 == a2)
  {
    uint64_t v8 = 0;
    size_t v7 = 0;
  }
  else
  {
    std::vector<bambi::XmlTreeNs>::__vallocate[abi:ne180100](&v12, 0xAAAAAAAAAAAAAAABLL * (v4 >> 4));
    uint64_t v6 = (char *)__dst;
    memmove(__dst, a2, v4);
    size_t v7 = &v6[16 * (v4 >> 4)];
    __dst = v7;
    uint64_t v8 = v12;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 4) < 5)
  {
    long long v11 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v11;
      operator delete(v11);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
      uint64_t v8 = v12;
      size_t v7 = (char *)__dst;
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = v14;
  }
  else
  {
    AriOsa::LogSrcInfo((uint64_t *)__p, (AriOsa *)"/AppleInternal/Library/BuildRoots/9f16a0bb-a2ea-11ef-bacb-1e361567c031/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", a3);
    if (v16 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v9, v10, 360, a1, 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__dst - (unsigned char *)v12) >> 4), 4);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v12)
    {
      __dst = v12;
      operator delete(v12);
    }
  }
}

void sub_1C55032C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void ibiUtils::ibiSetValue<IBIImsMEAudioEVSCodec,2ul,std::vector<IBIImsMEAudioEVSCodec>>(uint64_t a1, const char *a2, const char *a3)
{
  long long v12 = 0;
  __dst = 0;
  uint64_t v14 = 0;
  int64_t v4 = a3 - a2;
  if (a3 == a2)
  {
    uint64_t v8 = 0;
    size_t v7 = 0;
  }
  else
  {
    std::vector<IBIImsMEAudioEVSCodec>::__vallocate[abi:ne180100](&v12, 0xCCCCCCCCCCCCCCCDLL * (v4 >> 4));
    uint64_t v6 = (char *)__dst;
    memmove(__dst, a2, v4);
    size_t v7 = &v6[16 * (v4 >> 4)];
    __dst = v7;
    uint64_t v8 = v12;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((v7 - v8) >> 4) < 3)
  {
    long long v11 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v11;
      operator delete(v11);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
      uint64_t v8 = v12;
      size_t v7 = (char *)__dst;
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = v14;
  }
  else
  {
    AriOsa::LogSrcInfo((uint64_t *)__p, (AriOsa *)"/AppleInternal/Library/BuildRoots/9f16a0bb-a2ea-11ef-bacb-1e361567c031/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", a3);
    if (v16 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v9, v10, 360, a1, 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)__dst - (unsigned char *)v12) >> 4), 2);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v12)
    {
      __dst = v12;
      operator delete(v12);
    }
  }
}

void sub_1C5503458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void IBISessionHelper::sendConfigureRequest(IBISessionHelper *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5 && *(void *)this)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(v32, "");
      uint64_t v6 = ims::debug((uint64_t)__p, (uint64_t)v32);
      size_t v7 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v7);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"sendConfigureRequest", 20);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      if (SBYTE7(v11) < 0) {
        operator delete(__p[0]);
      }
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v11 = 0u;
      AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK::ARI_IBIImsMEConfigureAudioMediaReq_SDK((AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK *)__p);
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v32, "");
  uint64_t v8 = ims::debug((uint64_t)__p, (uint64_t)v32);
  size_t v9 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"sendConfigureRequest", 20);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=0]", 14);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (SBYTE7(v11) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a2 + 5ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 1ims::StackConfig::~StackConfig(this + 6) = 0x40000000;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5504054(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C550424C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(*(void **)(v16 + 480));
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  JUMPOUT(0x1C5504238);
}

void IBISessionHelper::sendTerminateRequest(IBISessionHelper *this@<X0>, uint64_t a2@<X8>)
{
  int64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5 && *(void *)this)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(&v15, "");
      uint64_t v6 = ims::debug((uint64_t)__p, (uint64_t)&v15);
      size_t v7 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v7);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"sendTerminateRequest", 20);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v16 < 0) {
        operator delete(v15);
      }
      if (SBYTE7(v11) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v14 = 0;
      long long v12 = 0u;
      long long v13 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v11 = 0u;
      AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK::ARI_IBIImsMETerminateMediaSessionReq_SDK((AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK *)__p);
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&v15, "");
  uint64_t v8 = ims::debug((uint64_t)__p, (uint64_t)&v15);
  size_t v9 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"sendTerminateRequest", 20);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=0]", 14);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v16 < 0) {
    operator delete(v15);
  }
  if (SBYTE7(v11) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a2 + 5ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 1ims::StackConfig::~StackConfig(this + 6) = 0x40000000;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5504890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  uint64_t v45 = *(std::__shared_weak_count **)(v43 - 80);
  if (v45)
  {
    std::__shared_weak_count::__release_weak(v45);
    if (!v42)
    {
LABEL_5:
      if (!v41) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if (!v42)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v42);
  if (!v41)
  {
LABEL_6:
    if (!v40) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_11:
  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  if (!v40)
  {
LABEL_8:
    MEMORY[0x1C878DB60](&a9);
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    _Unwind_Resume(a1);
  }
LABEL_7:
  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  goto LABEL_8;
}

void IBISessionHelper::sendStartRequest(IBISessionHelper *this@<X0>, uint64_t a2@<X8>)
{
  int64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5 && *(void *)this)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(&v15, "");
      uint64_t v6 = ims::debug((uint64_t)__p, (uint64_t)&v15);
      size_t v7 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v7);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"sendStartRequest", 16);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v16 < 0) {
        operator delete(v15);
      }
      if (SBYTE7(v11) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v14 = 0;
      long long v12 = 0u;
      long long v13 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v11 = 0u;
      AriSdk::ARI_IBIImsMEStartMediaReq_SDK::ARI_IBIImsMEStartMediaReq_SDK((AriSdk::ARI_IBIImsMEStartMediaReq_SDK *)__p);
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&v15, "");
  uint64_t v8 = ims::debug((uint64_t)__p, (uint64_t)&v15);
  size_t v9 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"sendStartRequest", 16);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=0]", 14);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v16 < 0) {
    operator delete(v15);
  }
  if (SBYTE7(v11) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a2 + 5ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 1ims::StackConfig::~StackConfig(this + 6) = 0x40000000;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5505038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  uint64_t v45 = *(std::__shared_weak_count **)(v43 - 80);
  if (v45)
  {
    std::__shared_weak_count::__release_weak(v45);
    if (!v42)
    {
LABEL_5:
      if (!v41) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if (!v42)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v42);
  if (!v41)
  {
LABEL_6:
    if (!v40) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_11:
  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  if (!v40)
  {
LABEL_8:
    MEMORY[0x1C878D7D0](&a9);
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    _Unwind_Resume(a1);
  }
LABEL_7:
  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  goto LABEL_8;
}

void IBISessionHelper::sendStopRequest(IBISessionHelper *this@<X0>, uint64_t a2@<X8>)
{
  int64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5 && *(void *)this)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(&v15, "");
      uint64_t v6 = ims::debug((uint64_t)__p, (uint64_t)&v15);
      size_t v7 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v7);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"sendStopRequest", 15);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v16 < 0) {
        operator delete(v15);
      }
      if (SBYTE7(v11) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v14 = 0;
      long long v12 = 0u;
      long long v13 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v11 = 0u;
      AriSdk::ARI_IBIImsMEStopMediaReq_SDK::ARI_IBIImsMEStopMediaReq_SDK((AriSdk::ARI_IBIImsMEStopMediaReq_SDK *)__p);
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&v15, "");
  uint64_t v8 = ims::debug((uint64_t)__p, (uint64_t)&v15);
  size_t v9 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"sendStopRequest", 15);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=0]", 14);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v16 < 0) {
    operator delete(v15);
  }
  if (SBYTE7(v11) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a2 + 5ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 1ims::StackConfig::~StackConfig(this + 6) = 0x40000000;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C55057E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  uint64_t v45 = *(std::__shared_weak_count **)(v43 - 80);
  if (v45)
  {
    std::__shared_weak_count::__release_weak(v45);
    if (!v42)
    {
LABEL_5:
      if (!v41) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if (!v42)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v42);
  if (!v41)
  {
LABEL_6:
    if (!v40) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_11:
  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  if (!v40)
  {
LABEL_8:
    MEMORY[0x1C878D790](&a9);
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    _Unwind_Resume(a1);
  }
LABEL_7:
  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  goto LABEL_8;
}

void IBISessionHelper::sendStartDTMFDigitRequest(IBISessionHelper *this@<X0>, uint64_t a2@<X8>)
{
  int64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5 && *(void *)this)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(&v15, "");
      uint64_t v6 = ims::debug((uint64_t)__p, (uint64_t)&v15);
      size_t v7 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v7);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"sendStartDTMFDigitRequest", 25);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v16 < 0) {
        operator delete(v15);
      }
      if (SBYTE7(v11) < 0) {
        operator delete(__p[0]);
      }
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      *(_OWORD *)std::string __p = 0u;
      AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK::ARI_IBIImsMEStartDTMFCodeReq_SDK((AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK *)__p);
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&v15, "");
  uint64_t v8 = ims::debug((uint64_t)__p, (uint64_t)&v15);
  size_t v9 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"sendStartDTMFDigitRequest", 25);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=0]", 14);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v16 < 0) {
    operator delete(v15);
  }
  if (SBYTE7(v11) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a2 + 5ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 1ims::StackConfig::~StackConfig(this + 6) = 0x40000000;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5505FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  uint64_t v47 = *(std::__shared_weak_count **)(v45 - 80);
  if (v47)
  {
    std::__shared_weak_count::__release_weak(v47);
    if (!v44)
    {
LABEL_5:
      if (!v43) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if (!v44)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v44);
  if (!v43)
  {
LABEL_6:
    if (!v42) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_11:
  std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  if (!v42)
  {
LABEL_8:
    MEMORY[0x1C878D8A0](&a9);
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    _Unwind_Resume(a1);
  }
LABEL_7:
  std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  goto LABEL_8;
}

void IBISessionHelper::sendStopDTMFDigitRequest(IBISessionHelper *this@<X0>, uint64_t a2@<X8>)
{
  int64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5 && *(void *)this)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(&v15, "");
      uint64_t v6 = ims::debug((uint64_t)__p, (uint64_t)&v15);
      size_t v7 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v7);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"sendStopDTMFDigitRequest", 24);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v16 < 0) {
        operator delete(v15);
      }
      if (SBYTE7(v11) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v14 = 0;
      long long v12 = 0u;
      long long v13 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v11 = 0u;
      AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK::ARI_IBIImsMEStopDTMFCodeReq_SDK((AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK *)__p);
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&v15, "");
  uint64_t v8 = ims::debug((uint64_t)__p, (uint64_t)&v15);
  size_t v9 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"sendStopDTMFDigitRequest", 24);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=0]", 14);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v16 < 0) {
    operator delete(v15);
  }
  if (SBYTE7(v11) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a2 + 5ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 1ims::StackConfig::~StackConfig(this + 6) = 0x40000000;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5506778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  uint64_t v45 = *(std::__shared_weak_count **)(v43 - 80);
  if (v45)
  {
    std::__shared_weak_count::__release_weak(v45);
    if (!v42)
    {
LABEL_5:
      if (!v41) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if (!v42)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v42);
  if (!v41)
  {
LABEL_6:
    if (!v40) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_11:
  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  if (!v40)
  {
LABEL_8:
    MEMORY[0x1C878D850](&a9);
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    _Unwind_Resume(a1);
  }
LABEL_7:
  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  goto LABEL_8;
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C5506964(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk42ARI_IBIImsMECreateAudioMediaSessionReq_SDKEEE9ImsResultRT__block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      if (a1[4])
      {
        size_t v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        uint64_t v11 = a1[4];
        long long v12 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        v9(a2, a3, &v11);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return 0;
}

void sub_1C5506A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk38ARI_IBIImsMEConfigureAudioMediaReq_SDKEEE9ImsResultRT__block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      if (a1[4])
      {
        size_t v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        uint64_t v11 = a1[4];
        long long v12 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        v9(a2, a3, &v11);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return 0;
}

void sub_1C5506AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk40ARI_IBIImsMETerminateMediaSessionReq_SDKEEE9ImsResultRT__block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      if (a1[4])
      {
        size_t v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        uint64_t v11 = a1[4];
        long long v12 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        v9(a2, a3, &v11);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return 0;
}

void sub_1C5506B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk29ARI_IBIImsMEStartMediaReq_SDKEEE9ImsResultRT__block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      if (a1[4])
      {
        size_t v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        uint64_t v11 = a1[4];
        long long v12 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        v9(a2, a3, &v11);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return 0;
}

void sub_1C5506C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk28ARI_IBIImsMEStopMediaReq_SDKEEE9ImsResultRT__block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      if (a1[4])
      {
        size_t v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        uint64_t v11 = a1[4];
        long long v12 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        v9(a2, a3, &v11);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return 0;
}

void sub_1C5506CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk32ARI_IBIImsMEStartDTMFCodeReq_SDKEEE9ImsResultRT__block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      if (a1[4])
      {
        size_t v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        uint64_t v11 = a1[4];
        long long v12 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        v9(a2, a3, &v11);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return 0;
}

void sub_1C5506D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk31ARI_IBIImsMEStopDTMFCodeReq_SDKEEE9ImsResultRT__block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      if (a1[4])
      {
        size_t v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        uint64_t v11 = a1[4];
        long long v12 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        v9(a2, a3, &v11);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return 0;
}

void sub_1C5506E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t SipUint32ParameterHeader::encodeValue(SipUint32ParameterHeader *this, ImsOutStream *a2)
{
  *((unsigned char *)a2 + 17) = 0;
  return 1;
}

uint64_t SipUint32ParameterHeader::setValueFromString(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v3 = (const char *)a2;
  }
  else {
    uint64_t v3 = *(const char **)a2;
  }
  *(_DWORD *)(a1 + 104) = strtoul(v3, 0, 10);
  return 1;
}

void ims::analytics::MessageSessionSendReceiveEvent::create(BOOL a1@<W0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, BOOL a6@<W5>, BOOL a7@<W6>, BOOL a8@<W7>, void *a9@<X8>, int64_t value)
{
  long long v19 = operator new(0x90uLL);
  v19[1] = 0;
  v19[2] = 0;
  void *v19 = &unk_1F20D7D38;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v28 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v27 = *(std::string *)a5;
  }
  v19[3] = &unk_1F20D7E70;
  std::string::basic_string[abi:ne180100]<0>(&v47, "ims.ca.sessionsendreceiveevent");
  ImsLogContainer::ImsLogContainer((uint64_t)(v19 + 4), &v47);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  long long v26 = a9;
  v19[3] = &unk_1F20D7D88;
  void v19[4] = &unk_1F20D7DC0;
  xpc_object_t v20 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v21 = v20;
  long long v22 = v19 + 17;
  if (v20)
  {
    void *v22 = v20;
  }
  else
  {
    xpc_object_t v21 = xpc_null_create();
    void *v22 = v21;
    if (!v21)
    {
      xpc_object_t v23 = xpc_null_create();
      xpc_object_t v21 = 0;
      goto LABEL_16;
    }
  }
  if (MEMORY[0x1C878F160](v21) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v21);
    goto LABEL_17;
  }
  xpc_object_t v23 = xpc_null_create();
LABEL_16:
  void *v22 = v23;
LABEL_17:
  xpc_release(v21);
  xpc_object_t v45 = xpc_BOOL_create(a1);
  if (!v45) {
    xpc_object_t v45 = xpc_null_create();
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v47.__r_.__value_.__l.__size_ = (std::string::size_type)"is_success";
  xpc::dict::object_proxy::operator=((uint64_t)&v47, &v45, &v46);
  xpc_release(v46);
  xpc_object_t v46 = 0;
  xpc_release(v45);
  xpc_object_t v45 = 0;
  xpc_object_t v43 = xpc_int64_create(a2);
  if (!v43) {
    xpc_object_t v43 = xpc_null_create();
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v47.__r_.__value_.__l.__size_ = (std::string::size_type)"latency";
  xpc::dict::object_proxy::operator=((uint64_t)&v47, &v43, &v44);
  xpc_release(v44);
  xpc_object_t v44 = 0;
  xpc_release(v43);
  xpc_object_t v43 = 0;
  if (a3)
  {
    xpc_object_t v41 = xpc_int64_create(a3);
    if (!v41) {
      xpc_object_t v41 = xpc_null_create();
    }
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
    v47.__r_.__value_.__l.__size_ = (std::string::size_type)"msrp_error_code";
    xpc::dict::object_proxy::operator=((uint64_t)&v47, &v41, &v42);
    xpc_release(v42);
    xpc_object_t v42 = 0;
    xpc_release(v41);
    xpc_object_t v41 = 0;
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v28.__r_.__value_.__l.__size_) {
      goto LABEL_33;
    }
    long long v24 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&v28.__r_.__value_.__s + 23)) {
      goto LABEL_33;
    }
    long long v24 = &v28;
  }
  xpc_object_t v39 = xpc_string_create((const char *)v24);
  if (!v39) {
    xpc_object_t v39 = xpc_null_create();
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v47.__r_.__value_.__l.__size_ = (std::string::size_type)"msrp_end_reason";
  xpc::dict::object_proxy::operator=((uint64_t)&v47, &v39, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v39);
  xpc_object_t v39 = 0;
LABEL_33:
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v25 = &v27;
  }
  else {
    long long v25 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v37 = xpc_string_create((const char *)v25);
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v47.__r_.__value_.__l.__size_ = (std::string::size_type)"direction";
  xpc::dict::object_proxy::operator=((uint64_t)&v47, &v37, &v38);
  xpc_release(v38);
  xpc_object_t v38 = 0;
  xpc_release(v37);
  xpc_object_t v37 = 0;
  xpc_object_t v35 = xpc_BOOL_create(a6);
  if (!v35) {
    xpc_object_t v35 = xpc_null_create();
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v47.__r_.__value_.__l.__size_ = (std::string::size_type)"is_group";
  xpc::dict::object_proxy::operator=((uint64_t)&v47, &v35, &v36);
  xpc_release(v36);
  xpc_object_t v36 = 0;
  xpc_release(v35);
  xpc_object_t v35 = 0;
  xpc_object_t v33 = xpc_BOOL_create(a7);
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v47.__r_.__value_.__l.__size_ = (std::string::size_type)"is_chatbot";
  xpc::dict::object_proxy::operator=((uint64_t)&v47, &v33, &v34);
  xpc_release(v34);
  xpc_object_t v34 = 0;
  xpc_release(v33);
  xpc_object_t v33 = 0;
  xpc_object_t v31 = xpc_BOOL_create(a8);
  if (!v31) {
    xpc_object_t v31 = xpc_null_create();
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v47.__r_.__value_.__l.__size_ = (std::string::size_type)"is_large_message_mode";
  xpc::dict::object_proxy::operator=((uint64_t)&v47, &v31, &v32);
  xpc_release(v32);
  xpc_object_t v32 = 0;
  xpc_release(v31);
  xpc_object_t v31 = 0;
  xpc_object_t v29 = xpc_int64_create(value);
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v47.__r_.__value_.__l.__size_ = (std::string::size_type)"number_of_chunks";
  xpc::dict::object_proxy::operator=((uint64_t)&v47, &v29, &v30);
  xpc_release(v30);
  xpc_object_t v30 = 0;
  xpc_release(v29);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  *long long v26 = v19 + 3;
  v26[1] = v19;
}

void sub_1C55073D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v25);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<anonymous namespace'::MessageSessionSendReceiveEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D7D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::MessageSessionSendReceiveEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D7D38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::MessageSessionSendReceiveEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::MessageSessionSendReceiveEventImpl::~MessageSessionSendReceiveEventImpl(_anonymous_namespace_::MessageSessionSendReceiveEventImpl *this)
{
  *(void *)this = &unk_1F20D7D88;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20D7DC0;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20D7D88;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20D7DC0;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  JUMPOUT(0x1C878E320);
}

xpc_object_t anonymous namespace'::MessageSessionSendReceiveEventImpl::getDict@<X0>(_anonymous_namespace_::MessageSessionSendReceiveEventImpl *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  *a2 = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void *anonymous namespace'::MessageSessionSendReceiveEventImpl::getName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "RCSMSRPMessageSendReceive");
}

void non-virtual thunk to'anonymous namespace'::MessageSessionSendReceiveEventImpl::~MessageSessionSendReceiveEventImpl(_anonymous_namespace_::MessageSessionSendReceiveEventImpl *this)
{
  *((void *)this - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20D7D88;
  *(void *)this = &unk_1F20D7DC0;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 1IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *((void *)this - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20D7D88;
  *(void *)this = &unk_1F20D7DC0;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 1IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1C878E320);
}

std::string *LazuliHeader::LazuliHeader(std::string *a1, const std::string *a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20D7EA8;
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  a1[2].__r_.__value_.__s.__data_[0] = 1;
  std::string::operator=(a1 + 1, a2);
  return a1;
}

void sub_1C55078F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  int64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *LazuliHeader::log(LazuliHeader *this, ImsOutStream *a2)
{
  return a2;
}

void LazuliHeader::valueAsString()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C5507A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)va);
  _Unwind_Resume(a1);
}

uint64_t LazuliHeader::encode(const std::string *this, ImsOutStream *a2)
{
  LoggableString::LoggableString((std::string *)__p, this + 1);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (SBYTE7(v6) < 0) {
    operator delete(__p[0]);
  }
  if (!this[2].__r_.__value_.__s.__data_[0])
  {
    uint64_t v7 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v6 = 0u;
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)__p);
  }
  return (*(uint64_t (**)(const std::string *, ImsOutStream *))(this->__r_.__value_.__r.__words[0] + 40))(this, a2);
}

void sub_1C5507C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a21);
  _Unwind_Resume(a1);
}

uint64_t LazuliHeader::decode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

void SipDialogEventClient::SipDialogEventClient(SipDialogEventClient *this, SipUserAgent *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.dialog-event");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *(void *)this = &unk_1F20D7F50;
  *((void *)this + 1IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20D7FF0;
  *((void *)this + 1ims::StackConfig::~StackConfig(this + 6) = a2;
  *((void *)this + 17) = 0;
  *((unsigned char *)this + 144) = 0;
  *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 19) = (char *)this + 160;
  *((unsigned char *)this + 17ims::StackConfig::~StackConfig(this + 6) = 1;
  *((_DWORD *)this + 45) = 0;
  *((unsigned char *)this + 184) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 2ims::StackConfig::~StackConfig(this + 6) = 0;
  *((void *)this + 27) = &qword_1EBBDAF60;
  *((unsigned char *)this + 224) = 0;
}

void sub_1C5507DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipDialogEventClient::~SipDialogEventClient(SipDialogEventClient *this)
{
  *(void *)this = &unk_1F20D7F50;
  *((void *)this + 1IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20D7FF0;
  SipDialogEventClient::terminateExistingDialogs(this);
  uint64_t v2 = (*(uint64_t (**)(SipDialogEventClient *))(*(void *)this + 64))(this);
  (*(void (**)(SipDialogEventClient *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"~SipDialogEventClient", 21);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  SipDialogEventClient::~SipDialogEventClient(this);
  JUMPOUT(0x1C878E320);
}

void SipDialogEventClient::terminateExistingDialogs(SipDialogEventClient *this)
{
  uint64_t v2 = (*(uint64_t (**)(SipDialogEventClient *))(*(void *)this + 64))(this);
  (*(void (**)(SipDialogEventClient *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"terminateExistingDialogs", 24);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" : ", 3);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v14 = (char *)this + 152;
  SipDialogTable::getAllDialogs((void *)this + 19, (uint64_t)&v37);
  uint64_t v3 = v37;
  if (v38 != v37)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      std::string::basic_string[abi:ne180100]<0>(v34, "");
      SipDialogState::SipDialogState((uint64_t)__p, 5, &__str, (uint64_t)v34);
      uint64_t v6 = v3 + v4;
      *(_DWORD *)(v3 + v4 + 13ims::StackConfig::~StackConfig(this + 6) = __p[0];
      std::string::operator=((std::string *)(v3 + v4 + 144), (const std::string *)&__p[1]);
      *(_WORD *)(v6 + 168) = v17;
      *(unsigned char *)(v6 + 170) = BYTE2(v17);
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[1]);
      }
      if (v35 < 0) {
        operator delete(v34[0]);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      uint64_t v33 = 0;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v16 = 0u;
      SipDialogInfo::event((SipDialogInfo *)(v3 + v4), (uint64_t)__p);
      uint64_t v7 = *((void *)this + 27);
      uint64_t v8 = *((void *)this + 16);
      size_t v9 = *(std::__shared_weak_count **)(v8 + 16);
      if (v9)
      {
        uint64_t v10 = std::__shared_weak_count::lock(v9);
        uint64_t v11 = v10 ? *(void *)(v8 + 8) : 0;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v10 = 0;
      }
      if (*(char *)(v11 + 4183) < 0) {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v11 + 4160), *(void *)(v11 + 4168));
      }
      else {
        std::string __str = *(std::string *)(v11 + 4160);
      }
      (*(void (**)(uint64_t, std::string *, void **))(*(void *)v7 + 16))(v7, &__str, __p);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v10) {
        goto LABEL_19;
      }
LABEL_20:
      SipDialogEventData::~SipDialogEventData(__p);
      ++v5;
      uint64_t v3 = v37;
      v4 += 600;
      if (v5 >= 0x2FC962FC962FC963 * ((v38 - v37) >> 3)) {
        goto LABEL_24;
      }
    }
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v10) {
      goto LABEL_20;
    }
LABEL_19:
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    goto LABEL_20;
  }
LABEL_24:
  long long v13 = (void *)*((void *)this + 20);
  long long v12 = (char *)this + 160;
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy((uint64_t)v14, v13);
  *((void *)v12 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v12;
  *(void *)long long v12 = 0;
  *((void *)v12 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  v12[24] = 0;
  __p[0] = &v37;
  std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1C5508284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  a11 = v17 - 112;
  std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

BOOL SipDialogEventClient::handleNotification(SipDialogEventClient *this, const SipDialogInfoBody *a2)
{
  int v3 = *((unsigned __int8 *)a2 + 240);
  if (*((unsigned char *)a2 + 240))
  {
    uint64_t v4 = (const SipDialogInfoBody *)((char *)a2 + 248);
    uint64_t v5 = (*(uint64_t (**)(SipDialogEventClient *))(*(void *)this + 64))(this);
    (*(void (**)(SipDialogEventClient *, uint64_t))(*(void *)this + 16))(this, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleNotification", 18);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" : incoming dialog info: ", 25);
    *(unsigned char *)(v5 + 17) = 0;
    SipDialogTable::str(v4, &v66);
    (*(void (**)(uint64_t, std::__split_buffer<std::string> *))(*(void *)v5 + 32))(v5, &v66);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    int v57 = v3;
    *(unsigned char *)(v5 + 17) = 0;
    if (SHIBYTE(v66.__end_) < 0) {
      operator delete(v66.__first_);
    }
    uint64_t v6 = (*(uint64_t (**)(SipDialogEventClient *))(*(void *)this + 64))(this);
    (*(void (**)(SipDialogEventClient *, uint64_t))(*(void *)this + 16))(this, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleNotification", 18);
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" : incoming dialog state: ", 26);
    *(unsigned char *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    BOOL v58 = SipDialogTable::update((uint64_t)this + 152, (uint64_t)v4, &v62);
    if (v63 != v62)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = (*(uint64_t (**)(SipDialogEventClient *))(*(void *)this + 64))(this);
        (*(void (**)(SipDialogEventClient *, uint64_t))(*(void *)this + 16))(this, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"handleNotification", 18);
        *(unsigned char *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" event[", 7);
        *(unsigned char *)(v9 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]=", 2);
        *(unsigned char *)(v9 + 17) = 0;
        SipDialogEventData::str((SipDialogEventData *)&v66, v62 + v7);
        (*(void (**)(uint64_t, std::__split_buffer<std::string> *))(*(void *)v9 + 32))(v9, &v66);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v9 + 17) = 0;
        if (SHIBYTE(v66.__end_) < 0) {
          operator delete(v66.__first_);
        }
        uint64_t v10 = *((void *)this + 27);
        uint64_t v11 = *((void *)this + 16);
        long long v12 = *(std::__shared_weak_count **)(v11 + 16);
        if (v12)
        {
          long long v13 = std::__shared_weak_count::lock(v12);
          uint64_t v14 = v13 ? *(void *)(v11 + 8) : 0;
        }
        else
        {
          uint64_t v14 = 0;
          long long v13 = 0;
        }
        if (*(char *)(v14 + 4183) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v66, *(const std::string::value_type **)(v14 + 4160), *(void *)(v14 + 4168));
        }
        else
        {
          uint64_t v15 = v14 + 4160;
          *(_OWORD *)&v66.__first_ = *(_OWORD *)v15;
          v66.__end_ = *(std::__split_buffer<std::string>::pointer *)(v15 + 16);
        }
        (*(void (**)(uint64_t, std::__split_buffer<std::string> *, uint64_t))(*(void *)v10 + 16))(v10, &v66, v62 + v7);
        if (SHIBYTE(v66.__end_) < 0) {
          break;
        }
        if (v13) {
          goto LABEL_18;
        }
LABEL_19:
        ++v8;
        v7 += 296;
        if (v8 >= 0x14C1BACF914C1BADLL * ((v63 - v62) >> 3)) {
          goto LABEL_23;
        }
      }
      operator delete(v66.__first_);
      if (!v13) {
        goto LABEL_19;
      }
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      goto LABEL_19;
    }
LABEL_23:
    if (v58)
    {
      uint64_t v16 = *((void *)this + 14);
      uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 15);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = *((void *)this + 16);
      long long v19 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v18 + 16));
      uint64_t v20 = *(void *)(*(void *)(v18 + 8) + 136);
      LoggableString::LoggableString((LoggableString *)&v66, "dialogEventResubscribeOnLatePartialUpdate");
      v60[0] = MEMORY[0x1E4F143A8];
      v60[1] = 1174405120;
      v60[2] = ___ZN20SipDialogEventClient18handleNotificationERK17SipDialogInfoBody_block_invoke;
      void v60[3] = &__block_descriptor_tmp_51;
      v60[4] = this;
      v60[5] = v16;
      unint64_t v61 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, std::__split_buffer<std::string> *, void *))(*(void *)v20 + 208))(v20, &v66, v60);
      if (SHIBYTE(v66.__end_) < 0) {
        operator delete(v66.__first_);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      if (v61) {
        std::__shared_weak_count::__release_weak(v61);
      }
      if (v17) {
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    uint64_t v21 = (*(uint64_t (**)(SipDialogEventClient *))(*(void *)this + 64))(this);
    (*(void (**)(SipDialogEventClient *, uint64_t))(*(void *)this + 16))(this, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"handleNotification", 18);
    *(unsigned char *)(v21 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)" : updated dialog info: ", 24);
    *(unsigned char *)(v21 + 17) = 0;
    SipDialogTable::str((SipDialogEventClient *)((char *)this + 152), &v66);
    (*(void (**)(uint64_t, std::__split_buffer<std::string> *))(*(void *)v21 + 32))(v21, &v66);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    if (SHIBYTE(v66.__end_) < 0) {
      operator delete(v66.__first_);
    }
    memset(&v59, 0, sizeof(v59));
    long long v22 = (SipDialogEventClient *)*((void *)this + 19);
    if (v22 != (SipDialogEventClient *)((char *)this + 160))
    {
      do
      {
        long long v23 = (long long *)((char *)v22 + 32);
        std::vector<std::string>::pointer end = v59.__end_;
        if (v59.__end_ < v59.__end_cap_.__value_)
        {
          if (*((char *)v22 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v59.__end_, *((const std::string::value_type **)v22 + 4), *((void *)v22 + 5));
          }
          else
          {
            long long v34 = *v23;
            v59.__end_->__r_.__value_.__r.__words[2] = *((void *)v22 + 6);
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v34;
          }
          v59.__end_ = end + 1;
        }
        else
        {
          std::vector<std::string>::pointer begin = v59.__begin_;
          int64_t v26 = (char *)v59.__end_ - (char *)v59.__begin_;
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59.__end_ - (char *)v59.__begin_) >> 3);
          unint64_t v28 = v27 + 1;
          if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v29 = 0x5555555555555556 * (((char *)v59.__end_cap_.__value_ - (char *)v59.__begin_) >> 3);
          if (v29 <= v28) {
            unint64_t v29 = v27 + 1;
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v59.__end_cap_.__value_ - (char *)v59.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v30 = v29;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v59.__end_cap_;
          if (v30)
          {
            long long v31 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v59.__end_cap_, v30);
            uint64_t v33 = v32;
          }
          else
          {
            long long v31 = 0;
            uint64_t v33 = 0;
          }
          std::__split_buffer<std::string>::pointer v35 = v31 + v27;
          __v.__first_ = v31;
          __v.__begin_ = v35;
          __v.__end_ = v35;
          __v.__end_cap_.__value_ = &v31[v33];
          if (v27 == v33)
          {
            if (v26 < 1)
            {
              if (begin == end) {
                unint64_t v36 = 1;
              }
              else {
                unint64_t v36 = 2 * v27;
              }
              v66.__end_cap_.__value_ = (std::allocator<std::string> *)&v59.__end_cap_;
              uint64_t v37 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v59.__end_cap_, v36);
              uint64_t v39 = __v.__begin_;
              std::__split_buffer<std::string>::pointer v40 = __v.__end_;
              xpc_object_t v41 = __v.__begin_;
              xpc_object_t v42 = &v37[v36 >> 2];
              int64_t v43 = (char *)__v.__end_ - (char *)__v.__begin_;
              if (__v.__end_ != __v.__begin_)
              {
                xpc_object_t v42 = &v37[(v36 >> 2) + v43 / 24];
                uint64_t v44 = 24 * (v43 / 24);
                xpc_object_t v45 = &v37[v36 >> 2];
                std::__split_buffer<std::string>::pointer v46 = __v.__begin_;
                do
                {
                  long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
                  v45->__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v47;
                  ++v45;
                  v46->__r_.__value_.__l.__size_ = 0;
                  v46->__r_.__value_.__r.__words[2] = 0;
                  v46->__r_.__value_.__r.__words[0] = 0;
                  ++v46;
                  v44 -= 24;
                }
                while (v44);
                xpc_object_t v41 = v40;
              }
              first = __v.__first_;
              value = __v.__end_cap_.__value_;
              __v.__first_ = v37;
              __v.__begin_ = &v37[v36 >> 2];
              v66.__first_ = first;
              v66.__begin_ = v39;
              __v.__end_ = v42;
              __v.__end_cap_.__value_ = &v37[v38];
              v66.__end_ = v41;
              v66.__end_cap_.__value_ = value;
              std::__split_buffer<std::string>::~__split_buffer(&v66);
              std::__split_buffer<std::string>::pointer v35 = __v.__end_;
            }
            else
            {
              std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v66, (long long *)v35, (long long *)v35, (uint64_t)&v35[-(v28 >> 1)]);
              __v.__begin_ -= v28 >> 1;
              __v.__end_ = v35;
            }
          }
          if (*((char *)v22 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v35, *((const std::string::value_type **)v22 + 4), *((void *)v22 + 5));
          }
          else
          {
            long long v50 = *v23;
            v35->__r_.__value_.__r.__words[2] = *((void *)v22 + 6);
            *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v50;
          }
          ++__v.__end_;
          std::vector<std::string>::__swap_out_circular_buffer(&v59, &__v, end);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        size_t v51 = (SipDialogEventClient *)*((void *)v22 + 1);
        if (v51)
        {
          do
          {
            std::string v52 = v51;
            size_t v51 = *(SipDialogEventClient **)v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            std::string v52 = (SipDialogEventClient *)*((void *)v22 + 2);
            BOOL v53 = *(void *)v52 == (void)v22;
            long long v22 = v52;
          }
          while (!v53);
        }
        long long v22 = v52;
      }
      while (v52 != (SipDialogEventClient *)((char *)this + 160));
    }
    uint64_t v54 = (*(uint64_t (**)(SipDialogEventClient *))(*(void *)this + 64))(this);
    (*(void (**)(SipDialogEventClient *, uint64_t))(*(void *)this + 16))(this, v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)"handleNotification", 18);
    *(unsigned char *)(v54 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)" : updated dialog id container, size: ", 38);
    *(unsigned char *)(v54 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v54 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v54 + 17) = 0;
    v66.__first_ = (std::__split_buffer<std::string>::pointer)&v59;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
    v66.__first_ = (std::__split_buffer<std::string>::pointer)&v62;
    std::vector<SipDialogEventData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
    int v3 = v57;
  }
  else
  {
    uint64_t v55 = (*(uint64_t (**)(SipDialogEventClient *))(*(void *)this + 64))(this);
    (*(void (**)(SipDialogEventClient *, uint64_t))(*(void *)this + 16))(this, v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"handleNotification", 18);
    *(unsigned char *)(v55 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)" : wrong dialog info ", 21);
    *(unsigned char *)(v55 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v55 + 17) = 0;
  }
  return v3 != 0;
}

void sub_1C5508EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, std::__shared_weak_count *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__split_buffer<std::string> *a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,char a22)
{
  if (a21) {
    std::__shared_weak_count::__release_weak(a21);
  }
  if (*(char *)(v24 - 105) < 0) {
    operator delete(*(void **)(v24 - 128));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  a12 = &a22;
  std::vector<SipDialogEventData>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t SipDialogEventData::str(SipDialogEventData *this, uint64_t a2)
{
  uint64_t v65 = 0;
  long long v63 = 0u;
  memset(v64, 0, sizeof(v64));
  *(_OWORD *)unint64_t v61 = 0u;
  long long v62 = 0u;
  memset(v60, 0, sizeof(v60));
  long long v59 = 0u;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v59);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v5, v6);
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)":: call-id : ", 13);
  int v9 = *(char *)(a2 + 47);
  if (v9 >= 0) {
    uint64_t v10 = a2 + 24;
  }
  else {
    uint64_t v10 = *(void *)(a2 + 24);
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 47);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 32);
  }
  long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", local : ", 10);
  int v14 = *(char *)(a2 + 71);
  if (v14 >= 0) {
    uint64_t v15 = a2 + 48;
  }
  else {
    uint64_t v15 = *(void *)(a2 + 48);
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a2 + 71);
  }
  else {
    uint64_t v16 = *(void *)(a2 + 56);
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
  uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", remote : ", 11);
  int v19 = *(char *)(a2 + 95);
  if (v19 >= 0) {
    uint64_t v20 = a2 + 72;
  }
  else {
    uint64_t v20 = *(void *)(a2 + 72);
  }
  if (v19 >= 0) {
    uint64_t v21 = *(unsigned __int8 *)(a2 + 95);
  }
  else {
    uint64_t v21 = *(void *)(a2 + 80);
  }
  long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
  long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", localSessionDescription : ", 28);
  int v24 = *(char *)(a2 + 119);
  if (v24 >= 0) {
    uint64_t v25 = a2 + 96;
  }
  else {
    uint64_t v25 = *(void *)(a2 + 96);
  }
  if (v24 >= 0) {
    uint64_t v26 = *(unsigned __int8 *)(a2 + 119);
  }
  else {
    uint64_t v26 = *(void *)(a2 + 104);
  }
  unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
  unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", remoteSessionDescription : ", 29);
  int v29 = *(char *)(a2 + 143);
  if (v29 >= 0) {
    uint64_t v30 = a2 + 120;
  }
  else {
    uint64_t v30 = *(void *)(a2 + 120);
  }
  if (v29 >= 0) {
    uint64_t v31 = *(unsigned __int8 *)(a2 + 143);
  }
  else {
    uint64_t v31 = *(void *)(a2 + 128);
  }
  uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
  uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", localURI : ", 13);
  int v34 = *(char *)(a2 + 167);
  if (v34 >= 0) {
    uint64_t v35 = a2 + 144;
  }
  else {
    uint64_t v35 = *(void *)(a2 + 144);
  }
  if (v34 >= 0) {
    uint64_t v36 = *(unsigned __int8 *)(a2 + 167);
  }
  else {
    uint64_t v36 = *(void *)(a2 + 152);
  }
  uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
  uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)", remoteURI : ", 14);
  int v39 = *(char *)(a2 + 191);
  if (v39 >= 0) {
    uint64_t v40 = a2 + 168;
  }
  else {
    uint64_t v40 = *(void *)(a2 + 168);
  }
  if (v39 >= 0) {
    uint64_t v41 = *(unsigned __int8 *)(a2 + 191);
  }
  else {
    uint64_t v41 = *(void *)(a2 + 176);
  }
  xpc_object_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)", duration : ", 13);
  int64_t v43 = (void *)std::ostream::operator<<();
  uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", ", 2);
  SipDialogDirection::str((SipDialogDirection *)(a2 + 200), v57);
  if ((v58 & 0x80u) == 0) {
    xpc_object_t v45 = v57;
  }
  else {
    xpc_object_t v45 = (void **)v57[0];
  }
  if ((v58 & 0x80u) == 0) {
    uint64_t v46 = v58;
  }
  else {
    uint64_t v46 = (uint64_t)v57[1];
  }
  long long v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
  uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", state : ", 10);
  SipDialogState::stateStr((SipDialogState *)(a2 + 248), __p);
  if ((v56 & 0x80u) == 0) {
    uint64_t v49 = __p;
  }
  else {
    uint64_t v49 = (void **)__p[0];
  }
  if ((v56 & 0x80u) == 0) {
    uint64_t v50 = v56;
  }
  else {
    uint64_t v50 = (uint64_t)__p[1];
  }
  size_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", onHold : ", 11);
  std::string v52 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)", emergency : ", 14);
  std::ostream::operator<<();
  if ((char)v56 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v58 < 0) {
    operator delete(v57[0]);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v60 + 8, this);
  *(void *)&long long v59 = *MEMORY[0x1E4FBA408];
  uint64_t v53 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v60[-1] + *(void *)(v59 - SipTransactionLayer::~SipTransactionLayer((SipTransactionLayer *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v60[0] = v53;
  *((void *)&v60[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v62) < 0) {
    operator delete(v61[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C878E270](v64);
}

void sub_1C55093D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void ___ZN20SipDialogEventClient18handleNotificationERK17SipDialogInfoBody_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    int v3 = (SipDialogEventClient *)a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        SipDialogEventClient::subscribe(v3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5509490(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipDialogEventClient::subscribe(SipDialogEventClient *this)
{
  uint64_t v2 = *((void *)this + 16);
  if (v2)
  {
    int v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3 && (int v4 = std::__shared_weak_count::lock(v3)) != 0)
    {
      int v5 = *(unsigned __int8 *)(*(void *)(v2 + 8) + 176);
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      if (v5) {
        return;
      }
    }
    else if (MEMORY[0xB0])
    {
      return;
    }
  }
  uint64_t v6 = *((void *)this + 16);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 16);
  if (v7 && (unint64_t v8 = std::__shared_weak_count::lock(v7)) != 0)
  {
    int v9 = *(_DWORD *)(*(void *)(v6 + 8) + 200);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (v9 != 2)
    {
LABEL_10:
      uint64_t v10 = (*(uint64_t (**)(SipDialogEventClient *))(*(void *)this + 64))(this);
      (*(void (**)(SipDialogEventClient *, uint64_t))(*(void *)this + 16))(this, v10);
      uint64_t v11 = *(void **)(v10 + 8);
      long long v12 = "stack is not initialized.  Skipping dialog-event subscription.";
      uint64_t v13 = 62;
LABEL_20:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      return;
    }
  }
  else if (MEMORY[0xC8] != 2)
  {
    goto LABEL_10;
  }
  if (!*(unsigned char *)(*((void *)this + 16) + 672))
  {
    uint64_t v10 = (*(uint64_t (**)(SipDialogEventClient *))(*(void *)this + 64))(this);
    (*(void (**)(SipDialogEventClient *, uint64_t))(*(void *)this + 16))(this, v10);
    uint64_t v11 = *(void **)(v10 + 8);
    long long v12 = "Thumper is disabled.  Skipping dialog-event subscription.";
    uint64_t v13 = 57;
    goto LABEL_20;
  }
  int v14 = (SipDialogEventPackage *)*((void *)this + 17);
  if (!v14) {
    operator new();
  }
  if (!SipDialogEventPackage::subscribe(v14, 600000))
  {
    uint64_t v15 = (*(uint64_t (**)(SipDialogEventClient *))(*(void *)this + 48))(this);
    (*(void (**)(SipDialogEventClient *, uint64_t))(*(void *)this + 16))(this, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"unable to subscribe to dialog events", 36);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    uint64_t v16 = *((void *)this + 17);
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    *((void *)this + 17) = 0;
  }
}

void sub_1C5509818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20SipDialogEventClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20SipDialogEventClientEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void SipDialogEventClient::registered(SipDialogEventClient *this, char a2)
{
  *((unsigned char *)this + 144) = a2;
  if ((a2 & 1) == 0)
  {
    *((unsigned char *)this + 224) = 1;
    SipDialogEventClient::subscribe(this);
  }
}

void non-virtual thunk to'SipDialogEventClient::registered(SipDialogEventClient *this, char a2)
{
  *((unsigned char *)this + 40) = a2;
  if ((a2 & 1) == 0)
  {
    *((unsigned char *)this + 120) = 1;
    SipDialogEventClient::subscribe((SipDialogEventClient *)((char *)this - 104));
  }
}

void SipDialogEventClient::regEventSubscriptionSuccess(SipDialogEventClient *this)
{
  *((unsigned char *)this + 224) = 1;
  SipDialogEventClient::subscribe(this);
}

void non-virtual thunk to'SipDialogEventClient::regEventSubscriptionSuccess(SipDialogEventClient *this)
{
  *((unsigned char *)this + 120) = 1;
  SipDialogEventClient::subscribe((SipDialogEventClient *)((char *)this - 104));
}

void SipDialogEventClient::regEventSubscriptionFailed(SipDialogEventClient *this)
{
  *((unsigned char *)this + 224) = 1;
  SipDialogEventClient::subscribe(this);
}

void non-virtual thunk to'SipDialogEventClient::regEventSubscriptionFailed(SipDialogEventClient *this)
{
  *((unsigned char *)this + 120) = 1;
  SipDialogEventClient::subscribe((SipDialogEventClient *)((char *)this - 104));
}

void SipDialogEventClient::terminate(SipDialogEventClient *this)
{
  uint64_t v2 = (SipEventPackage *)*((void *)this + 17);
  if (v2) {
    SipEventPackage::terminateWithoutUnsubscribing(v2);
  }
  SipDialogEventClient::terminateExistingDialogs(this);
}

void non-virtual thunk to'SipDialogEventClient::regEventSubscriptionTerminated(SipDialogEventClient *this)
{
}

void SipDialogEventClient::beforeRegEventUnsubscription(SipDialogEventClient *this)
{
  uint64_t v2 = (SipDialogEventPackage *)*((void *)this + 17);
  if (v2)
  {
    SipDialogEventPackage::unsubscribe(v2);
    *((void *)this + 17) = 0;
  }
}

void non-virtual thunk to'SipDialogEventClient::beforeRegEventUnsubscription(SipDialogEventClient *this)
{
  uint64_t v2 = (SipDialogEventPackage *)*((void *)this + 4);
  if (v2)
  {
    SipDialogEventPackage::unsubscribe(v2);
    *((void *)this + 4) = 0;
  }
}

void SipDialogEventClient::terminateRegEvents(SipDialogEventClient *this)
{
  *((unsigned char *)this + 224) = 0;
}

void non-virtual thunk to'SipDialogEventClient::terminateRegEvents(SipDialogEventClient *this)
{
  *((unsigned char *)this + 120) = 0;
}

void SipDialogEventClient::beforeDeregistration(SipDialogEventClient *this)
{
  uint64_t v2 = (SipDialogEventPackage *)*((void *)this + 17);
  if (v2)
  {
    SipDialogEventPackage::unsubscribe(v2);
    *((void *)this + 17) = 0;
  }
}

void non-virtual thunk to'SipDialogEventClient::beforeDeregistration(SipDialogEventClient *this)
{
  uint64_t v2 = (SipDialogEventPackage *)*((void *)this + 4);
  if (v2)
  {
    SipDialogEventPackage::unsubscribe(v2);
    *((void *)this + 4) = 0;
  }
}

void SipDialogEventClient::deregistered(SipDialogEventClient *this)
{
  *((unsigned char *)this + 224) = 0;
}

void non-virtual thunk to'SipDialogEventClient::deregistered(SipDialogEventClient *this)
{
  *((unsigned char *)this + 120) = 0;
}

void SipDialogEventClient::setThumperEnabled(SipDialogEventPackage **this, int a2)
{
  if (*((unsigned char *)this + 224))
  {
    if (a2)
    {
      SipDialogEventClient::subscribe((SipDialogEventClient *)this);
    }
    else
    {
      int v3 = this[17];
      if (v3)
      {
        SipDialogEventPackage::unsubscribe(v3);
        this[17] = 0;
      }
    }
  }
}

uint64_t SipDialogEventClient::dialogEventSubscriptionFailed(SipDialogEventClient *this, SipDialogEventPackage *a2, ImsResult *a3)
{
  uint64_t v4 = (*(uint64_t (**)(SipDialogEventClient *, SipDialogEventPackage *, ImsResult *))(*(void *)this + 64))(this, a2, a3);
  (*(void (**)(SipDialogEventClient *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"dialog event subscription failed", 32);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  *((void *)this + 17) = 0;
  return result;
}

void SipDialogEventClient::dialogEventSubscriptionTerminated(SipDialogEventClient *this, SipDialogEventPackage *a2)
{
  uint64_t v3 = (*(uint64_t (**)(SipDialogEventClient *, SipDialogEventPackage *))(*(void *)this + 64))(this, a2);
  (*(void (**)(SipDialogEventClient *, uint64_t))(*(void *)this + 16))(this, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"dialog event subscription terminated", 36);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  SipDialogEventClient::terminateExistingDialogs(this);
  *((void *)this + 17) = 0;
}

void SipDialogTable::getAllDialogs(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v5 = *(void *)a2;
    for (uint64_t i = *(void *)(a2 + 8); i != v5; SipDialogInfo::~SipDialogInfo((void **)(i - 600)))
      ;
    *(void *)(a2 + 8) = v5;
    unint64_t v8 = (void *)*a1;
    uint64_t v6 = a1 + 1;
    uint64_t v7 = v8;
    if (v8 != v6)
    {
      do
      {
        std::vector<SipDialogInfo>::insert((uint64_t *)a2, *(std::string **)(a2 + 8), (SipDialogInfo *)(v7 + 7));
        int v9 = (void *)v7[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            int v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v7[2];
            BOOL v11 = *v10 == (void)v7;
            uint64_t v7 = v10;
          }
          while (!v11);
        }
        uint64_t v7 = v10;
      }
      while (v10 != v6);
    }
  }
}

void StubDialogEventDelegate::~StubDialogEventDelegate(void **this)
{
  ImsLogContainer::~ImsLogContainer(this);
  JUMPOUT(0x1C878E320);
}

void StubDialogEventDelegate::handleDialogEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"StubDialogEventDelegate: got a dialog event: <<<", 48);
    *(unsigned char *)(v5 + 17) = 0;
    SipDialogEventData::str((SipDialogEventData *)&v6, a3);
    LoggableString::LoggableString(&__p, &v6);
    (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 40))(v5, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)">>>, but a real delegate object has not been set.\n", 50);
    *(unsigned char *)(v5 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5509E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'StubDialogEventDelegate::~StubDialogEventDelegate(void **this)
{
}

{
  uint64_t vars8;

  ImsLogContainer::~ImsLogContainer(this - 13);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'StubDialogEventDelegate::handleDialogEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((unsigned char *)v5 + 2IMSCallOptions::~IMSCallOptions(this + 3) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      uint64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<SipDialogEventData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        SipDialogEventData::~SipDialogEventData(v4 - 37);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::vector<SipDialogInfo>::insert(uint64_t *a1, std::string *this, SipDialogInfo *a3)
{
  uint64_t v4 = this;
  std::string v6 = (std::string *)a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = 0x2FC962FC962FC963 * (((uint64_t)v6 - *a1) >> 3) + 1;
    if (v11 > 0x6D3A06D3A06D3ALL) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = 0x2FC962FC962FC963 * (((uint64_t)this - v10) >> 3);
    unint64_t v13 = 0x2FC962FC962FC963 * ((uint64_t)(v8 - v10) >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= v11) {
      uint64_t v14 = 0x2FC962FC962FC963 * (((uint64_t)v6 - *a1) >> 3) + 1;
    }
    if (v13 >= 0x369D0369D0369DLL) {
      unint64_t v15 = 0x6D3A06D3A06D3ALL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v22 = v7;
    if (v15) {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogInfo>>(v7, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v18 = v16;
    int v19 = &v16[600 * v12];
    uint64_t v20 = v19;
    uint64_t v21 = &v16[600 * v15];
    std::__split_buffer<SipDialogInfo>::push_back[abi:ne180100](&v18, a3);
    uint64_t v4 = (std::string *)std::vector<SipDialogInfo>::__swap_out_circular_buffer(a1, &v18, (uint64_t)v4);
    std::__split_buffer<SipDialogInfo>::~__split_buffer((uint64_t)&v18);
  }
  else if (this == v6)
  {
    SipDialogInfo::SipDialogInfo(this, a3);
    a1[1] = (uint64_t)&v4[25];
  }
  else
  {
    std::vector<SipDialogInfo>::__move_range((uint64_t)a1, (long long *)this, (unint64_t)v6, (uint64_t)&this[25]);
    if (v4 <= (std::string *)a3) {
      a3 = (SipDialogInfo *)((char *)a3 + 600 * (a1[1] > (unint64_t)a3));
    }
    SipDialogInfo::operator=((uint64_t)v4, (uint64_t)a3);
  }
  return v4;
}

void sub_1C550A19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

long long *std::vector<SipDialogInfo>::__move_range(uint64_t a1, long long *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (long long *)((char *)a2 + v6 - a4);
  uint64_t v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v10 = (long long *)((char *)a2 + v6 - a4);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      SipDialogInfo::SipDialogInfo(v8, v10);
      uint64_t v10 = (long long *)((char *)v10 + 600);
      v8 += 600;
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,SipDialogInfo *,SipDialogInfo *,SipDialogInfo *,0>(a2, v7, v6);
}

void sub_1C550A258(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__split_buffer<SipDialogInfo>::push_back[abi:ne180100](void *a1, SipDialogInfo *a2)
{
  uint64_t v4 = (long long *)a1[2];
  if (v4 == (long long *)a1[3])
  {
    uint64_t v6 = (char *)*a1;
    uint64_t v5 = (long long *)a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      uint64_t v12 = (char *)v4 - v6;
      BOOL v11 = v12 == 0;
      uint64_t v13 = 0x5F92C5F92C5F92C6 * (v12 >> 3);
      if (v11) {
        unint64_t v14 = 1;
      }
      else {
        unint64_t v14 = v13;
      }
      unint64_t v15 = v14 >> 2;
      uint64_t v29 = a1[4];
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogInfo>>(v29, v14);
      uint64_t v17 = (uint64_t)&v16[600 * v15];
      uint64_t v26 = v16;
      v27.i64[0] = v17;
      int v19 = &v16[600 * v18];
      v27.i64[1] = v17;
      unint64_t v28 = v19;
      uint64_t v20 = (long long *)a1[1];
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v22 = v17 + 600 * (v21 / 600);
        uint64_t v23 = 600 * (v21 / 600);
        do
        {
          SipDialogInfo::SipDialogInfo(v17, v20);
          v17 += 600;
          uint64_t v20 = (long long *)((char *)v20 + 600);
          v23 -= 600;
        }
        while (v23);
        uint64_t v16 = v26;
        uint64_t v17 = v27.i64[0];
        int64x2_t v24 = *(int64x2_t *)(a1 + 1);
        int v19 = v28;
      }
      else
      {
        int64x2_t v24 = vdupq_n_s64((unint64_t)v20);
        uint64_t v22 = v17;
      }
      uint64_t v26 = (char *)*a1;
      *a1 = v16;
      a1[1] = v17;
      int64x2_t v27 = v24;
      uint64_t v25 = (char *)a1[3];
      a1[2] = v22;
      a1[3] = v19;
      unint64_t v28 = v25;
      std::__split_buffer<SipDialogInfo>::~__split_buffer((uint64_t)&v26);
      uint64_t v4 = (long long *)a1[2];
    }
    else
    {
      uint64_t v7 = 0x2FC962FC962FC963 * (((uint64_t)v5 - *a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -600 * v9;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SipDialogInfo *,SipDialogInfo *,SipDialogInfo *,0>(v5, v4, (uint64_t)v5 - 600 * v9);
      a1[1] += v10;
      a1[2] = v4;
    }
  }
  SipDialogInfo::SipDialogInfo((std::string *)v4, a2);
  a1[2] += 600;
}

void sub_1C550A3E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SipDialogInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SipDialogInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipDialogInfo>,std::reverse_iterator<SipDialogInfo*>,std::reverse_iterator<SipDialogInfo*>,std::reverse_iterator<SipDialogInfo*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipDialogInfo>,SipDialogInfo*,SipDialogInfo*,SipDialogInfo*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t SipDialogInfo::SipDialogInfo(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v5 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v5;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  long long v6 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)(a1 + 48) = v6;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + ims::StackConfig::~StackConfig(this + 6) = 0;
  long long v7 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v7;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  SipDialogDirection::SipDialogDirection((unsigned char *)(a1 + 96), (uint64_t)(a2 + 6));
  SipDialogState::SipDialogState(a1 + 136, (uint64_t)a2 + 136);
  uint64_t v8 = *((void *)a2 + 22);
  *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
  *(void *)(a1 + 17ims::StackConfig::~StackConfig(this + 6) = v8;
  long long v9 = a2[12];
  *(void *)(a1 + 208) = *((void *)a2 + 26);
  *(_OWORD *)(a1 + 192) = v9;
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 2ims::StackConfig::~StackConfig(this + 6) = 0;
  *((void *)a2 + 24) = 0;
  long long v10 = *(long long *)((char *)a2 + 216);
  *(void *)(a1 + 232) = *((void *)a2 + 29);
  *(_OWORD *)(a1 + 21ims::StackConfig::~StackConfig(this + 6) = v10;
  *((void *)a2 + 28) = 0;
  *((void *)a2 + 29) = 0;
  *((void *)a2 + 27) = 0;
  long long v11 = a2[15];
  *(void *)(a1 + 25ims::StackConfig::~StackConfig(this + 6) = *((void *)a2 + 32);
  *(_OWORD *)(a1 + 240) = v11;
  *((void *)a2 + 30) = 0;
  *((void *)a2 + 3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)a2 + 32) = 0;
  *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
  long long v12 = a2[17];
  *(void *)(a1 + 288) = *((void *)a2 + 36);
  *(_OWORD *)(a1 + 272) = v12;
  *((void *)a2 + 35) = 0;
  *((void *)a2 + 3ims::StackConfig::~StackConfig(this + 6) = 0;
  *((void *)a2 + 34) = 0;
  long long v13 = *(long long *)((char *)a2 + 296);
  *(void *)(a1 + 312) = *((void *)a2 + 39);
  *(_OWORD *)(a1 + 29ims::StackConfig::~StackConfig(this + 6) = v13;
  *((void *)a2 + 38) = 0;
  *((void *)a2 + 39) = 0;
  *((void *)a2 + 37) = 0;
  *(unsigned char *)(a1 + 320) = *((unsigned char *)a2 + 320);
  *(void *)(a1 + 33ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = 0;
  uint64_t v14 = *((void *)a2 + 42);
  *(void *)(a1 + 328) = *((void *)a2 + 41);
  *(void *)(a1 + 33ims::StackConfig::~StackConfig(this + 6) = v14;
  *(void *)(a1 + 344) = *((void *)a2 + 43);
  *((void *)a2 + 4bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)a2 + 42) = 0;
  *((void *)a2 + 4IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  long long v15 = a2[22];
  *(void *)(a1 + 368) = *((void *)a2 + 46);
  *(_OWORD *)(a1 + 352) = v15;
  *((void *)a2 + 45) = 0;
  *((void *)a2 + 4ims::StackConfig::~StackConfig(this + 6) = 0;
  *((void *)a2 + 44) = 0;
  *(void *)(a1 + 37ims::StackConfig::~StackConfig(this + 6) = *((void *)a2 + 47);
  uint64_t v16 = a1 + 384;
  uint64_t v17 = *((void *)a2 + 48);
  *(void *)(a1 + 384) = v17;
  uint64_t v18 = *((void *)a2 + 49);
  *(void *)(a1 + 392) = v18;
  if (v18)
  {
    *(void *)(v17 + 1ims::StackConfig::~StackConfig(this + 6) = v16;
    *((void *)a2 + 47) = a2 + 24;
    *((void *)a2 + 48) = 0;
    *((void *)a2 + 49) = 0;
  }
  else
  {
    *(void *)(a1 + 37ims::StackConfig::~StackConfig(this + 6) = v16;
  }
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 41ims::StackConfig::~StackConfig(this + 6) = 0;
  *(_OWORD *)(a1 + 400) = a2[25];
  *(void *)(a1 + 41ims::StackConfig::~StackConfig(this + 6) = *((void *)a2 + 52);
  *((void *)a2 + 50) = 0;
  *((void *)a2 + 5bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)a2 + 52) = 0;
  *(unsigned char *)(a1 + 424) = *((unsigned char *)a2 + 424);
  long long v19 = a2[27];
  *(void *)(a1 + 448) = *((void *)a2 + 56);
  *(_OWORD *)(a1 + 432) = v19;
  *((void *)a2 + 55) = 0;
  *((void *)a2 + 5ims::StackConfig::~StackConfig(this + 6) = 0;
  *((void *)a2 + 54) = 0;
  *(unsigned char *)(a1 + 45ims::StackConfig::~StackConfig(this + 6) = *((unsigned char *)a2 + 456);
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 464) = a2[29];
  *(void *)(a1 + 480) = *((void *)a2 + 60);
  *((void *)a2 + 58) = 0;
  *((void *)a2 + 59) = 0;
  *((void *)a2 + 60) = 0;
  long long v20 = *(long long *)((char *)a2 + 488);
  *(void *)(a1 + 504) = *((void *)a2 + 63);
  *(_OWORD *)(a1 + 488) = v20;
  *((void *)a2 + 6bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)a2 + 62) = 0;
  *((void *)a2 + 6IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  *(void *)(a1 + 512) = *((void *)a2 + 64);
  uint64_t v21 = a1 + 520;
  uint64_t v22 = *((void *)a2 + 65);
  *(void *)(a1 + 520) = v22;
  uint64_t v23 = *((void *)a2 + 66);
  *(void *)(a1 + 528) = v23;
  if (v23)
  {
    *(void *)(v22 + 1ims::StackConfig::~StackConfig(this + 6) = v21;
    *((void *)a2 + 64) = (char *)a2 + 520;
    *((void *)a2 + 65) = 0;
    *((void *)a2 + 6ims::StackConfig::~StackConfig(this + 6) = 0;
  }
  else
  {
    *(void *)(a1 + 512) = v21;
  }
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 53ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 53ims::StackConfig::~StackConfig(this + 6) = *((void *)a2 + 67);
  *(void *)(a1 + 544) = *((void *)a2 + 68);
  *(void *)(a1 + 552) = *((void *)a2 + 69);
  *((void *)a2 + 68) = 0;
  *((void *)a2 + 67) = 0;
  *((void *)a2 + 69) = 0;
  *(unsigned char *)(a1 + 560) = *((unsigned char *)a2 + 560);
  long long v24 = *(long long *)((char *)a2 + 568);
  *(void *)(a1 + 584) = *((void *)a2 + 73);
  *(_OWORD *)(a1 + 568) = v24;
  *((void *)a2 + 7IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  *((void *)a2 + 72) = 0;
  *((void *)a2 + 7bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *(unsigned char *)(a1 + 592) = *((unsigned char *)a2 + 592);
  return a1;
}

void sub_1C550A788(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*(void **)(v1 + 104));
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*(void **)(v1 + 72));
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*(void **)(v1 + 48));
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,SipDialogInfo *,SipDialogInfo *,SipDialogInfo *,0>(long long *a1, long long *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    long long v6 = a2;
    do
    {
      long long v6 = (long long *)((char *)v6 - 600);
      a3 -= 600;
      SipDialogInfo::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t SipDialogInfo::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 2IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  *(unsigned char *)a2 = 0;
  long long v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)long long v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  long long v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)long long v7 = v8;
  *((unsigned char *)a2 + 7bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((unsigned char *)a2 + 48) = 0;
  long long v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)long long v9 = v10;
  *((unsigned char *)a2 + 95) = 0;
  *((unsigned char *)a2 + 72) = 0;
  *(unsigned char *)(a1 + 9ims::StackConfig::~StackConfig(this + 6) = *((unsigned char *)a2 + 96);
  std::string::operator=((std::string *)(a1 + 104), (const std::string *)((char *)a2 + 104));
  *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
  *(_DWORD *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = *((_DWORD *)a2 + 34);
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)a2 + 6);
  *(_WORD *)(a1 + 168) = *((_WORD *)a2 + 84);
  *(unsigned char *)(a1 + 170) = *((unsigned char *)a2 + 170);
  char v11 = *((unsigned char *)a2 + 184);
  *(void *)(a1 + 17ims::StackConfig::~StackConfig(this + 6) = *((void *)a2 + 22);
  *(unsigned char *)(a1 + 184) = v11;
  long long v12 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*v12);
  }
  long long v13 = a2[12];
  *(void *)(a1 + 208) = *((void *)a2 + 26);
  *(_OWORD *)long long v12 = v13;
  *((unsigned char *)a2 + 215) = 0;
  *((unsigned char *)a2 + 192) = 0;
  uint64_t v14 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*v14);
  }
  long long v15 = *(long long *)((char *)a2 + 216);
  *(void *)(a1 + 232) = *((void *)a2 + 29);
  *(_OWORD *)uint64_t v14 = v15;
  *((unsigned char *)a2 + 239) = 0;
  *((unsigned char *)a2 + 21ims::StackConfig::~StackConfig(this + 6) = 0;
  uint64_t v16 = (void **)(a1 + 240);
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*v16);
  }
  long long v17 = a2[15];
  *(void *)(a1 + 25ims::StackConfig::~StackConfig(this + 6) = *((void *)a2 + 32);
  *(_OWORD *)uint64_t v16 = v17;
  *((unsigned char *)a2 + 26IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  *((unsigned char *)a2 + 240) = 0;
  *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
  uint64_t v18 = (void **)(a1 + 272);
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*v18);
  }
  long long v19 = a2[17];
  *(void *)(a1 + 288) = *((void *)a2 + 36);
  *(_OWORD *)uint64_t v18 = v19;
  *((unsigned char *)a2 + 295) = 0;
  *((unsigned char *)a2 + 272) = 0;
  long long v20 = (void **)(a1 + 296);
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*v20);
  }
  long long v21 = *(long long *)((char *)a2 + 296);
  *(void *)(a1 + 312) = *((void *)a2 + 39);
  *(_OWORD *)long long v20 = v21;
  *((unsigned char *)a2 + 319) = 0;
  *((unsigned char *)a2 + 29ims::StackConfig::~StackConfig(this + 6) = 0;
  *(unsigned char *)(a1 + 320) = *((unsigned char *)a2 + 320);
  std::vector<SipDialogParticipantIdentity>::__vdeallocate((void **)(a1 + 328));
  uint64_t v22 = *((void *)a2 + 42);
  *(void *)(a1 + 328) = *((void *)a2 + 41);
  *(void *)(a1 + 33ims::StackConfig::~StackConfig(this + 6) = v22;
  *(void *)(a1 + 344) = *((void *)a2 + 43);
  *((void *)a2 + 4bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)a2 + 42) = 0;
  *((void *)a2 + 4IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  uint64_t v23 = (void **)(a1 + 352);
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*v23);
  }
  long long v24 = a2[22];
  *(void *)(a1 + 368) = *((void *)a2 + 46);
  *(_OWORD *)uint64_t v23 = v24;
  *((unsigned char *)a2 + 375) = 0;
  *((unsigned char *)a2 + 352) = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(a1 + 376, (void *)a2 + 47);
  std::vector<unsigned char>::__move_assign(a1 + 400, (__n128 *)a2 + 25);
  *(unsigned char *)(a1 + 424) = *((unsigned char *)a2 + 424);
  uint64_t v25 = (void **)(a1 + 432);
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*v25);
  }
  long long v26 = a2[27];
  *(void *)(a1 + 448) = *((void *)a2 + 56);
  *(_OWORD *)uint64_t v25 = v26;
  *((unsigned char *)a2 + 455) = 0;
  *((unsigned char *)a2 + 432) = 0;
  *(unsigned char *)(a1 + 45ims::StackConfig::~StackConfig(this + 6) = *((unsigned char *)a2 + 456);
  std::vector<SipDialogParticipantIdentity>::__vdeallocate((void **)(a1 + 464));
  *(_OWORD *)(a1 + 464) = a2[29];
  *(void *)(a1 + 480) = *((void *)a2 + 60);
  *((void *)a2 + 58) = 0;
  *((void *)a2 + 59) = 0;
  *((void *)a2 + 60) = 0;
  int64x2_t v27 = (void **)(a1 + 488);
  if (*(char *)(a1 + 511) < 0) {
    operator delete(*v27);
  }
  long long v28 = *(long long *)((char *)a2 + 488);
  *(void *)(a1 + 504) = *((void *)a2 + 63);
  *(_OWORD *)int64x2_t v27 = v28;
  *((unsigned char *)a2 + 51bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((unsigned char *)a2 + 488) = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(a1 + 512, (void *)a2 + 64);
  std::vector<unsigned char>::__move_assign(a1 + 536, (__n128 *)((char *)a2 + 536));
  *(unsigned char *)(a1 + 560) = *((unsigned char *)a2 + 560);
  uint64_t v29 = (void **)(a1 + 568);
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*v29);
  }
  long long v30 = *(long long *)((char *)a2 + 568);
  *(void *)(a1 + 584) = *((void *)a2 + 73);
  *(_OWORD *)uint64_t v29 = v30;
  *((unsigned char *)a2 + 59bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((unsigned char *)a2 + 568) = 0;
  *(unsigned char *)(a1 + 592) = *((unsigned char *)a2 + 592);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x6D3A06D3A06D3BLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(600 * a2);
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SipDialogInfo *,SipDialogInfo *,SipDialogInfo *,0>(long long *a1, long long *a2, uint64_t a3)
{
  long long v4 = a1;
  if (a1 != a2)
  {
    do
    {
      SipDialogInfo::operator=(a3, v4);
      long long v4 = (long long *)((char *)v4 + 600);
      a3 += 600;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipDialogInfo>,std::reverse_iterator<SipDialogInfo*>,std::reverse_iterator<SipDialogInfo*>,std::reverse_iterator<SipDialogInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 600;
  while (a3 + v10 != a5)
  {
    long long v12 = (std::string *)(v11 + v10);
    v10 -= 600;
    SipDialogInfo::SipDialogInfo(v12, (const SipDialogInfo *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipDialogInfo>,SipDialogInfo*,SipDialogInfo*,SipDialogInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      SipDialogInfo::SipDialogInfo((std::string *)(a4 + v7), (const SipDialogInfo *)(a2 + v7));
      v7 += 600;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C550AD78(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 600;
    do
    {
      SipDialogInfo::~SipDialogInfo((void **)(v4 + v2));
      v2 -= 600;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<SipDialogInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = i - 600;
    SipDialogInfo::~SipDialogInfo((void **)(i - 600));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    long long v5 = v2;
    if (v4 != v2)
    {
      do
        SipDialogInfo::~SipDialogInfo(v4 - 75);
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t _GLOBAL__sub_I_SipDialogEventClient_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.dialog-event");
  ImsLogContainer::ImsLogContainer((uint64_t)&_stubDelegate, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  _stubDelegate = (uint64_t)&unk_1F20D80D8;
  qword_1EBBDAF60 = (uint64_t)&unk_1F20D8140;
  return __cxa_atexit((void (*)(void *))StubDialogEventDelegate::~StubDialogEventDelegate, &_stubDelegate, &dword_1C51D1000);
}

void sub_1C550AF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AVCRTPSession<AVCAudioStream>::AVCRTPSession(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, ImsPrefs *a6, void *a7, long long *a8, dispatch_object_t *a9)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)a1 = &unk_1F20C1128;
  long long v12 = (std::__shared_weak_count *)a3[1];
  uint64_t v24 = *a3;
  uint64_t v25 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v13 = (std::__shared_weak_count *)a5[1];
  uint64_t v22 = *a5;
  uint64_t v23 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MediaSessionDriver::MediaSessionDriver(a1 + 24, a2 + 1, &v24, a4, &v22, a6, a8, a9);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v14 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 24) = a2[8];
  *(void *)(a1 + 112) = a2[9];
  *(void *)(a1 + *(void *)(v14 - SipTransactionLayer::~SipTransactionLayer((SipTransactionLayer *)((char *)this - 24)) = a2[10];
  *(unsigned char *)(a1 + 485) = 0;
  *(_DWORD *)(a1 + 48bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *(void *)(a1 + 49ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 512) = *a7;
  uint64_t v15 = a7[1];
  *(void *)(a1 + 520) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  std::string::basic_string[abi:ne180100]<0>(v20, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v16 = ims::debug((uint64_t)v20, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"AVCRTPSession", 13);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  return a1;
}

void sub_1C550B1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v24 + 551) < 0) {
    operator delete(*(void **)(v24 + 528));
  }
  long long v28 = *(std::__shared_weak_count **)(v24 + 520);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }

  MediaSessionDriver::~MediaSessionDriver(v25, v26);
  uint64_t v29 = *(std::__shared_weak_count **)(v24 + 16);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t AVCRTPSession<AVCAudioStream>::~AVCRTPSession(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  long long v5 = (MediaSessionDriver *)(a1 + 24);
  *(void *)(a1 + 24) = a2[8];
  *(void *)(a1 + 112) = a2[9];
  *(void *)(a1 + *(void *)(v4 - SipTransactionLayer::~SipTransactionLayer((SipTransactionLayer *)((char *)this - 24)) = a2[10];
  std::string::basic_string[abi:ne180100]<0>(v12, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"~AVCRTPSession", 14);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (*(char *)(a1 + 551) < 0) {
    operator delete(*(void **)(a1 + 528));
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 520);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }

  MediaSessionDriver::~MediaSessionDriver(v5, a2 + 1);
  long long v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  return a1;
}

uint64_t AVCRTPSession<AVCAudioStream>::terminate(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&v21, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  uint64_t v2 = ims::debug((uint64_t)&v21, (uint64_t)v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"terminate", 9);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v23 < 0) {
    operator delete(v21);
  }
  uint64_t v4 = (void *)MEMORY[0x1C878EAB0](v3);
  if (*(unsigned char *)(a1 + 481))
  {
    *(_WORD *)(a1 + 48IMSCallOptions::~IMSCallOptions(this + 3) = 0;
    char v21 = 0;
    uint64_t v22 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v21);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 104))(a1 + 24);
    RTPSharedPointerBase::getShared<AVCRTPSession<AVCAudioStream>>(v19, a1);
    if (v5 == 2) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 3;
    }
    if (v19[0]) {
      uint64_t v7 = (char *)v19[0] + 24;
    }
    else {
      uint64_t v7 = 0;
    }
    long long v17 = v7;
    uint64_t v18 = (std::__shared_weak_count *)v19[1];
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3321888768;
    v15[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE9terminateEb_block_invoke;
    v15[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
    v15[4] = a1;
    void v15[5] = v21;
    uint64_t v16 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MediaSessionDriver::startTimerForRequest(a1 + 24, v6, (uint64_t *)&v17, v15);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    [*(id *)(a1 + 488) stop];
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  char v21 = 0;
  uint64_t v22 = 0;
  RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v21);
  long long v8 = *(std::__shared_weak_count **)(a1 + 40);
  if (v8)
  {
    long long v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)(a1 + 32);
      if (v11)
      {
        char v13 = v21;
        uint64_t v14 = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, void **, void))(*(void *)v11 + 8))(v11, &v13, 0);
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  return 1;
}

void sub_1C550B7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  uint64_t v14 = *(std::__shared_weak_count **)(v12 - 48);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void RTPSharedPointerBase::getShared<AVCRTPSession<AVCAudioStream>>(void **p_lpsrc, uint64_t a2)
{
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (void *)(a2 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v6;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE9terminateEb_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        uint64_t v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        long long v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 32))(v6, &v8, 9);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C550B9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t non-virtual thunk to'AVCRTPSession<AVCAudioStream>::terminate(uint64_t a1)
{
  return AVCRTPSession<AVCAudioStream>::terminate(a1 - 24);
}

uint64_t AVCRTPSession<AVCAudioStream>::start(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v80, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v83, "");
  uint64_t v2 = ims::debug((uint64_t)v80, (uint64_t)&v83);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"start", 5);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = a1 + 24;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v85 < 0) {
    operator delete(v83);
  }
  if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80[0].__r_.__value_.__l.__data_);
  }
  int v5 = (void *)MEMORY[0x1C878EAB0](v4);
  if (!*(void *)(a1 + 496)) {
    goto LABEL_71;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 104))(a1 + 24) == 2)
  {
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    RTPManager::sdpSessionForSession(*(RTPManager **)(a1 + 56), *(void *)(a1 + 48), &v83);
    uint64_t v6 = v83;
    if (v83)
    {
      uint64_t v7 = v83[16];
      if (v7)
      {
        uint64_t v8 = std::__shared_weak_count::lock(v7);
        if (v8)
        {
          long long v9 = v6[15];
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          if (v9)
          {
            uint64_t v82 = 0;
            long long v81 = 0u;
            memset(v80, 0, sizeof(v80));
            uint64_t v10 = v83;
            uint64_t v11 = v83[16];
            if (v11)
            {
              uint64_t v12 = std::__shared_weak_count::lock(v11);
              if (v12) {
                char v13 = v10[15];
              }
              else {
                char v13 = 0;
              }
            }
            else
            {
              char v13 = 0;
              uint64_t v12 = 0;
            }
            if (SHIBYTE(v13[132].__shared_owners_) < 0) {
              std::string::__init_copy_ctor_external(v80, (const std::string::value_type *)v13[131].__shared_weak_owners_, (std::string::size_type)v13[132].__vftable);
            }
            else {
              v80[0] = *(std::string *)((char *)v13 + 3160);
            }
            if (SHIBYTE(v13[133].__shared_owners_) < 0) {
              std::string::__init_copy_ctor_external(&v80[1], (const std::string::value_type *)v13[132].__shared_weak_owners_, (std::string::size_type)v13[133].__vftable);
            }
            else {
              v80[1] = *(std::string *)((char *)v13 + 3184);
            }
            LOBYTE(v82) = v13[134].__shared_owners_;
            long long v81 = *(_OWORD *)&v13[133].__shared_weak_owners_;
            if (v12) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
            unint64_t v14 = *(void *)(a1 + 48);
            uint64_t v15 = *(void *)(a1 + 56);
            uint64_t v16 = *(void **)(v15 + 232);
            if (v16)
            {
              long long v17 = (void *)(v15 + 232);
              do
              {
                unint64_t v18 = v16[4];
                BOOL v19 = v18 >= v14;
                if (v18 >= v14) {
                  char v20 = v16;
                }
                else {
                  char v20 = v16 + 1;
                }
                if (v19) {
                  long long v17 = v16;
                }
                uint64_t v16 = (void *)*v20;
              }
              while (*v20);
              if (v17 != (void *)(v15 + 232) && v17[4] <= v14) {
                goto LABEL_49;
              }
            }
            char v21 = *(void **)(v15 + 256);
            if (!v21) {
              goto LABEL_46;
            }
            uint64_t v22 = (void *)(v15 + 256);
            char v23 = (void *)(v15 + 256);
            do
            {
              unint64_t v24 = v21[4];
              BOOL v25 = v24 >= v14;
              if (v24 >= v14) {
                long long v26 = v21;
              }
              else {
                long long v26 = v21 + 1;
              }
              if (v25) {
                char v23 = v21;
              }
              char v21 = (void *)*v26;
            }
            while (*v26);
            if (v23 != v22 && v23[4] <= v14)
            {
LABEL_49:
              isWifuint64_t i = ims::AccessNetwork::isWifi((ims::AccessNetwork *)v80);
              long long v28 = [*(id *)(a1 + 496) audio];
              uint64_t v29 = v28;
              if (isWifi) {
                uint64_t v30 = 2;
              }
              else {
                uint64_t v30 = 9;
              }
            }
            else
            {
LABEL_46:
              BOOL v27 = ims::AccessNetwork::isWifi((ims::AccessNetwork *)v80);
              long long v28 = [*(id *)(a1 + 496) audio];
              uint64_t v29 = v28;
              if (v27) {
                uint64_t v30 = 0;
              }
              else {
                uint64_t v30 = 6;
              }
            }
            [v28 setAudioStreamMode:v30];

            [*(id *)(a1 + 496) setJitterBufferMode:ims::AccessNetwork::isWifi((ims::AccessNetwork *)v80)];
            uint64_t v32 = *(void *)(a1 + 56);
            uint64_t v33 = (void *)(v32 + 256);
            int v34 = *(void **)(v32 + 256);
            if (!v34) {
              goto LABEL_63;
            }
            unint64_t v35 = *(void *)(a1 + 48);
            uint64_t v36 = (void *)(v32 + 256);
            do
            {
              unint64_t v37 = v34[4];
              BOOL v38 = v37 >= v35;
              if (v37 >= v35) {
                int v39 = v34;
              }
              else {
                int v39 = v34 + 1;
              }
              if (v38) {
                uint64_t v36 = v34;
              }
              int v34 = (void *)*v39;
            }
            while (*v39);
            if (v36 == v33 || v36[4] > v35) {
LABEL_63:
            }
              uint64_t v36 = v33;
            [*(id *)(a1 + 496) setOutOfProcessCodecsEnabled:v36 != v33];
            if (SHIBYTE(v80[1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v80[1].__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v80[0].__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }
    if (v84) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v84);
    }
  }
  uint64_t v40 = *(void **)(a1 + 496);
  if (!v40)
  {
LABEL_71:
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 104))(a1 + 24) == 4)
    {
      std::string::basic_string[abi:ne180100]<0>(v80, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(&v83, "");
      uint64_t v41 = ims::warn((uint64_t)v80, (uint64_t)&v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"Text media session is not configured, possibly due to incomplete upgrade.  Waiting for upper layers to generate new offer.", 122);
      *(unsigned char *)(v41 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v41 + 17) = 0;
      if (v85 < 0) {
        operator delete(v83);
      }
      if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80[0].__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v80[0].__r_.__value_.__l.__data_ = 0uLL;
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, (void **)&v80[0].__r_.__value_.__l.__data_);
      xpc_object_t v42 = *(NSObject **)(a1 + 72);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3321888768;
      block[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE5startEb_block_invoke;
      block[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
      block[4] = a1;
      long long v79 = *(_OWORD *)&v80[0].__r_.__value_.__l.__data_;
      if (v80[0].__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v80[0].__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_async(v42, block);
      if (*((void *)&v79 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v79 + 1));
      }
      std::string::size_type size = (std::__shared_weak_count *)v80[0].__r_.__value_.__l.__size_;
      if (!v80[0].__r_.__value_.__l.__size_) {
        goto LABEL_125;
      }
LABEL_124:
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
      goto LABEL_125;
    }
    uint64_t v40 = *(void **)(a1 + 496);
  }
  objc_storeStrong((id *)(a1 + 504), v40);
  uint64_t v44 = *(void *)(a1 + 504);
  if (v44)
  {
    xpc_object_t v45 = *(void **)(a1 + 488);
    id v77 = 0;
    [v45 configure:v44 error:&v77];
    id v46 = v77;
    if (v46)
    {
      long long v47 = v46;
      uint64_t v48 = [v46 description];
      std::string::basic_string[abi:ne180100]<0>(v80, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(&v83, "");
      uint64_t v49 = ims::error((uint64_t)v80, (uint64_t)&v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v49 + 8), (uint64_t)"Session config error: ", 22);
      *(unsigned char *)(v49 + 17) = 0;
      id v50 = v48;
      size_t v51 = (const char *)[v50 UTF8String];
      size_t v52 = strlen(v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v49 + 8), (uint64_t)v51, v52);
      *(unsigned char *)(v49 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v49 + 17) = 0;
      if (v85 < 0) {
        operator delete(v83);
      }
      if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80[0].__r_.__value_.__l.__data_);
      }
      uint64_t v53 = *(std::__shared_weak_count **)(a1 + 40);
      if (v53)
      {
        uint64_t v54 = std::__shared_weak_count::lock(v53);
        if (v54)
        {
          uint64_t v55 = v54;
          uint64_t v56 = *(void *)(a1 + 32);
          if (v56)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v73);
            (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v56 + 24))(v56, &v73, 9);
            if (v74) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v74);
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v55);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v80, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(&v83, "");
      uint64_t v62 = ims::debug((uint64_t)v80, (uint64_t)&v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v62 + 8), (uint64_t)"Clear reconfigureNeeded", 23);
      *(unsigned char *)(v62 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v62 + 17) = 0;
      if (v85 < 0) {
        operator delete(v83);
      }
      if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80[0].__r_.__value_.__l.__data_);
      }
      *(unsigned char *)(a1 + 484) = 0;
      unint64_t v71 = 0;
      size_t v72 = 0;
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v71);
      int v63 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 104))(a1 + 24);
      RTPSharedPointerBase::getShared<AVCRTPSession<AVCAudioStream>>((void **)&v80[0].__r_.__value_.__l.__data_, a1);
      if (v80[0].__r_.__value_.__r.__words[0]) {
        std::string::size_type v64 = v80[0].__r_.__value_.__r.__words[0] + 24;
      }
      else {
        std::string::size_type v64 = 0;
      }
      std::string::size_type v69 = v64;
      uint64_t v70 = (std::__shared_weak_count *)v80[0].__r_.__value_.__l.__size_;
      v67[0] = MEMORY[0x1E4F143A8];
      v67[1] = 3321888768;
      v67[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE5startEb_block_invoke_2;
      v67[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
      v67[4] = a1;
      v67[5] = v71;
      unint64_t v68 = v72;
      if (v72) {
        atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MediaSessionDriver::startTimerForRequest(a1 + 24, v63 != 2, (uint64_t *)&v69, v67);
      if (v70) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v70);
      }
      std::string::basic_string[abi:ne180100]<0>(v80, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(&v83, "");
      uint64_t v65 = ims::debug((uint64_t)v80, (uint64_t)&v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)"Starting session ", 17);
      *(unsigned char *)(v65 + 17) = 0;
      (*(void (**)(uint64_t))(*(void *)v3 + 176))(a1 + 24);
      std::ostream::operator<<();
      *(unsigned char *)(v65 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v65 + 17) = 0;
      if (v85 < 0) {
        operator delete(v83);
      }
      if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80[0].__r_.__value_.__l.__data_);
      }
      [*(id *)(a1 + 488) start];
      if (v68) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v68);
      }
      std::string::size_type size = v72;
      if (v72) {
        goto LABEL_124;
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&v83, "");
    uint64_t v57 = ims::error((uint64_t)v80, (uint64_t)&v83);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"_activeAvcSessionConfig is null", 31);
    *(unsigned char *)(v57 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v57 + 17) = 0;
    if (v85 < 0) {
      operator delete(v83);
    }
    if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80[0].__r_.__value_.__l.__data_);
    }
    unsigned __int8 v58 = *(std::__shared_weak_count **)(a1 + 40);
    if (v58)
    {
      long long v59 = std::__shared_weak_count::lock(v58);
      if (v59)
      {
        uint64_t v60 = v59;
        uint64_t v61 = *(void *)(a1 + 32);
        if (v61)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v75);
          (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v61 + 24))(v61, &v75, 9);
          if (v76) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v76);
          }
        }
        std::string::size_type size = v60;
        goto LABEL_124;
      }
    }
  }
LABEL_125:
  return 1;
}

void sub_1C550C4AC(_Unwind_Exception *a1)
{
  ims::AccessNetwork::~AccessNetwork((void **)(v2 - 176));
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 96);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE5startEb_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        uint64_t v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        long long v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 24))(v6, &v8, 2);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C550C714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE5startEb_block_invoke_2(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        uint64_t v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        long long v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 24))(v6, &v8, 9);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C550C7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'AVCRTPSession<AVCAudioStream>::start(uint64_t a1)
{
  return AVCRTPSession<AVCAudioStream>::start(a1 - 24);
}

uint64_t AVCRTPSession<AVCAudioStream>::stop(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&v18, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"stop", 4);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = a1 + 24;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v20 < 0) {
    operator delete(v18);
  }
  int v5 = (void *)MEMORY[0x1C878EAB0](v4);
  if (*(unsigned char *)(a1 + 481))
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Stopping session ", 17);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 176))(a1 + 24);
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v18);
    }
    *(_WORD *)(a1 + 48IMSCallOptions::~IMSCallOptions(this + 3) = 0;
    unint64_t v18 = 0;
    BOOL v19 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v18);
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 104))(a1 + 24);
    RTPSharedPointerBase::getShared<AVCRTPSession<AVCAudioStream>>(__p, a1);
    if (v7 == 2) {
      uint64_t v8 = 2;
    }
    else {
      uint64_t v8 = 3;
    }
    if (__p[0]) {
      long long v9 = (char *)__p[0] + 24;
    }
    else {
      long long v9 = 0;
    }
    unint64_t v14 = v9;
    uint64_t v15 = (std::__shared_weak_count *)__p[1];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3321888768;
    void v12[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE4stopEb_block_invoke;
    v12[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
    v12[4] = a1;
    void v12[5] = v18;
    char v13 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MediaSessionDriver::startTimerForRequest(a1 + 24, v8, (uint64_t *)&v14, v12);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    [*(id *)(a1 + 488) stop];
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::warn((uint64_t)&v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Stop called on session ", 23);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 176))(v3);
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" which isn't active. Ignoring.", 30);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v18);
    }
  }
  return 1;
}

void sub_1C550CC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 33) < 0) {
    operator delete(*(void **)(v24 - 56));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE4stopEb_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        int v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        long long v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 32))(v6, &v8, 9);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C550CD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'AVCRTPSession<AVCAudioStream>::stop(uint64_t a1)
{
  return AVCRTPSession<AVCAudioStream>::stop(a1 - 24);
}

uint64_t AVCRTPSession<AVCAudioStream>::setDirection(uint64_t a1, int *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v63, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v60, "");
  uint64_t v4 = ims::debug((uint64_t)&v63, (uint64_t)&v60);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"setDirection", 12);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v5 = a1 + 24;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v62 < 0) {
    operator delete(v60);
  }
  if (v65 < 0) {
    operator delete(v63);
  }
  int v6 = *a2;
  if (*a2 == 2)
  {
    char v7 = 0;
    uint64_t v8 = 2;
  }
  else if (v6 == 4)
  {
    char v7 = 0;
    uint64_t v8 = 0;
  }
  else if (v6 == 3)
  {
    char v7 = 0;
    uint64_t v8 = 1;
  }
  else
  {
    char v7 = 1;
    uint64_t v8 = 3;
  }
  uint64_t v9 = [*(id *)(a1 + 488) direction];
  *(_DWORD *)(a1 + 25ims::StackConfig::~StackConfig(this + 6) = *a2;
  std::string::basic_string[abi:ne180100]<0>(&v63, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v60, "");
  uint64_t v10 = ims::debug((uint64_t)&v63, (uint64_t)&v60);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Setting direction to ", 21);
  *(unsigned char *)(v10 + 17) = 0;
  ims::toString<MediaDirection>((unsigned int *)(a1 + 256), &v58);
  LoggableString::LoggableString(&v59, &v58);
  (*(void (**)(uint64_t, std::string *))(*(void *)v10 + 40))(v10, &v59);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" for session ", 13);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (v62 < 0) {
    operator delete(v60);
  }
  if (v65 < 0) {
    operator delete(v63);
  }
  if (!*(unsigned char *)(a1 + 481))
  {
    if (*(void *)(a1 + 496))
    {
      std::string::basic_string[abi:ne180100]<0>(&v63, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(&v60, "");
      uint64_t v16 = ims::debug((uint64_t)&v63, (uint64_t)&v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Setting direction on session configuration for session ", 55);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t))(*(void *)v5 + 176))(a1 + 24);
      std::ostream::operator<<();
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if (v62 < 0) {
        operator delete(v60);
      }
      if (v65 < 0) {
        operator delete(v63);
      }
      [*(id *)(a1 + 496) setDirection:v8];
      [*(id *)(a1 + 496) setRtpTimeOutEnabled:*(_DWORD *)(a1 + 256) == 1];
      [*(id *)(a1 + 496) setRtcpTimeOutEnabled:*(_DWORD *)(a1 + 256) != 1];
      BOOL v17 = *(_DWORD *)(a1 + 256) != 1 || *(_DWORD *)(a1 + 432) != 0;
      [*(id *)(a1 + 496) setRtcpEnabled:v17];
      uint64_t v23 = 436;
      if (*(_DWORD *)(a1 + 256) == 1) {
        uint64_t v23 = 432;
      }
      LODWORD(v22) = *(_DWORD *)(a1 + v23);
      [*(id *)(a1 + 496) setRtcpSendInterval:(double)v22];
    }
    uint64_t v24 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v24) {
      return 1;
    }
    BOOL v25 = std::__shared_weak_count::lock(v24);
    if (!v25) {
      return 1;
    }
    char v13 = v25;
    uint64_t v26 = *(void *)(a1 + 32);
    if (!v26) {
      goto LABEL_54;
    }
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v41);
    (*(void (**)(uint64_t, void **, void))(*(void *)v26 + 32))(v26, &v41, 0);
    uint64_t v15 = v42;
    if (!v42) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  if (v8 != [*(id *)(a1 + 488) direction])
  {
    uint64_t v18 = [*(id *)(a1 + 488) direction];
    [*(id *)(a1 + 488) setDirection:v8];
    [*(id *)(a1 + 496) setDirection:v8];
    if (v18)
    {
      if (*a2 == 4)
      {
        [*(id *)(a1 + 488) pause];
        return 1;
      }
      char v29 = v7 ^ 1;
      if (v9 == 3) {
        char v29 = 1;
      }
      if (v29)
      {
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, (void **)&v60);
        uint64_t v37 = *(void *)(a1 + 56);
        LoggableString::LoggableString((LoggableString *)&v63, "avc.rtp.session");
        BOOL v38 = v60;
        int v39 = v61;
        v45[0] = (uint64_t)v60;
        v45[1] = (uint64_t)v61;
        if (v61)
        {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v40 = v61;
        }
        else
        {
          uint64_t v40 = 0;
        }
        v43[0] = MEMORY[0x1E4F143A8];
        v43[1] = 3321888768;
        v43[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE12setDirectionERK14MediaDirectionb_block_invoke_3;
        v43[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
        v43[4] = a1;
        v43[5] = v38;
        uint64_t v44 = v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        RTPManager::performBlock(v37, (uint64_t)&v63, v45, (uint64_t)v43);
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
        if (v65 < 0) {
          operator delete(v63);
        }
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
        BOOL v27 = v61;
        if (v61) {
          goto LABEL_55;
        }
        return 1;
      }
      *(unsigned char *)(a1 + 484) = 1;
      int v63 = 0;
      std::string::size_type v64 = 0;
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v63);
      int v30 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 104))(a1 + 24);
      RTPSharedPointerBase::getShared<AVCRTPSession<AVCAudioStream>>((void **)&v60, a1);
      if (v30 == 2) {
        uint64_t v31 = 2;
      }
      else {
        uint64_t v31 = 3;
      }
      if (v60) {
        uint64_t v32 = v60 + 24;
      }
      else {
        uint64_t v32 = 0;
      }
      uint64_t v48 = v32;
      uint64_t v49 = v61;
      v46[0] = MEMORY[0x1E4F143A8];
      v46[1] = 3321888768;
      v46[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE12setDirectionERK14MediaDirectionb_block_invoke_2;
      v46[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
      v46[4] = a1;
      v46[5] = v63;
      long long v47 = v64;
      if (v64) {
        atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MediaSessionDriver::startTimerForRequest(a1 + 24, v31, (uint64_t *)&v48, v46);
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      [*(id *)(a1 + 488) stop];
      uint64_t v33 = v47;
      if (!v47)
      {
LABEL_72:
        BOOL v27 = v64;
        if (!v64) {
          return 1;
        }
        goto LABEL_55;
      }
LABEL_71:
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      goto LABEL_72;
    }
    if ((unint64_t)AVCRTPStackController::audioSessionCount(*(AVCRTPStackController **)(a1 + 512)) >= 2) {
      *(unsigned char *)(a1 + 484) = 1;
    }
    if (*a2 != 4)
    {
      if (!*(unsigned char *)(a1 + 484))
      {
        [*(id *)(a1 + 488) resume];
        return 1;
      }
      int v63 = 0;
      std::string::size_type v64 = 0;
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v63);
      int v34 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 104))(a1 + 24);
      RTPSharedPointerBase::getShared<AVCRTPSession<AVCAudioStream>>((void **)&v60, a1);
      if (v34 == 2) {
        uint64_t v35 = 2;
      }
      else {
        uint64_t v35 = 3;
      }
      if (v60) {
        uint64_t v36 = v60 + 24;
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v54 = v36;
      uint64_t v55 = v61;
      v52[0] = MEMORY[0x1E4F143A8];
      v52[1] = 3321888768;
      void v52[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE12setDirectionERK14MediaDirectionb_block_invoke;
      v52[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
      std::vector<std::string> v52[4] = a1;
      v52[5] = v63;
      uint64_t v53 = v64;
      if (v64) {
        atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MediaSessionDriver::startTimerForRequest(a1 + 24, v35, (uint64_t *)&v54, v52);
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
      [*(id *)(a1 + 488) stop];
      uint64_t v33 = v53;
      if (!v53) {
        goto LABEL_72;
      }
      goto LABEL_71;
    }
    BOOL v19 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v19) {
      return 1;
    }
    char v20 = std::__shared_weak_count::lock(v19);
    if (!v20) {
      return 1;
    }
    char v13 = v20;
    uint64_t v21 = *(void *)(a1 + 32);
    if (!v21) {
      goto LABEL_54;
    }
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v50);
    (*(void (**)(uint64_t, void **, void))(*(void *)v21 + 24))(v21, &v50, 0);
    uint64_t v15 = v51;
    if (!v51) {
      goto LABEL_54;
    }
LABEL_53:
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_54:
    BOOL v27 = v13;
LABEL_55:
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    return 1;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 40);
  if (v11)
  {
    uint64_t v12 = std::__shared_weak_count::lock(v11);
    if (v12)
    {
      char v13 = v12;
      uint64_t v14 = *(void *)(a1 + 32);
      if (!v14) {
        goto LABEL_54;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v56);
      (*(void (**)(uint64_t, void **, void))(*(void *)v14 + 24))(v14, &v56, 0);
      uint64_t v15 = v57;
      if (!v57) {
        goto LABEL_54;
      }
      goto LABEL_53;
    }
  }
  return 1;
}

void sub_1C550D6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE12setDirectionERK14MediaDirectionb_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        char v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        uint64_t v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 32))(v6, &v8, 9);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C550D8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE12setDirectionERK14MediaDirectionb_block_invoke_2(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        char v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        uint64_t v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 32))(v6, &v8, 9);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C550D9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE12setDirectionERK14MediaDirectionb_block_invoke_3(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        char v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        uint64_t v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v6 + 24))(v6, &v8, 0);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C550DA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'AVCRTPSession<AVCAudioStream>::setDirection(uint64_t a1, int *a2)
{
  return AVCRTPSession<AVCAudioStream>::setDirection(a1 - 24, a2);
}

void AVCRTPSession<AVCAudioStream>::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v47, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v47, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"setConfiguration", 16);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  uint64_t v8 = (void *)MEMORY[0x1C878EAB0](v7);
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v9);
    if (v10) {
      uint64_t v11 = *a2;
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 104))(a1 + 24);
  if (v12 == 2)
  {
    if (*(unsigned char *)(v11 + 584))
    {
      uint64_t v13 = v11 + 152;
      goto LABEL_18;
    }
  }
  else if (v12 == 6 && *(unsigned char *)(v11 + 1856))
  {
    uint64_t v13 = v11 + 1496;
    goto LABEL_18;
  }
  if (*(unsigned char *)(v11 + 1328))
  {
    uint64_t v13 = v11 + 1032;
LABEL_18:
    uint64_t v15 = *(void *)(v13 + 8);
    uint64_t v14 = *(std::__shared_weak_count **)(v13 + 16);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v15)
    {
      uint64_t v16 = *(std::__shared_weak_count **)(v11 + 128);
      if (v16)
      {
        uint64_t v16 = std::__shared_weak_count::lock(v16);
        BOOL v17 = v16;
        if (v16) {
          uint64_t v16 = *(std::__shared_weak_count **)(v11 + 120);
        }
      }
      else
      {
        BOOL v17 = 0;
      }
      BOOL v19 = (ImsPrefs *)SipStack::prefs((SipStack *)v16);
      IgnoreLocalhostRemoteRtpAddressKey = (void **)ImsPrefs::getIgnoreLocalhostRemoteRtpAddressKey(v19);
      int v21 = ImsPrefs::BOOLValue(v19, IgnoreLocalhostRemoteRtpAddressKey);
      char v22 = v21;
      if (v17)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        if ((v22 & 1) == 0) {
LABEL_38:
        }
          IpAddress::asString(v47);
      }
      else if (!v21)
      {
        goto LABEL_38;
      }
      IpAddress::asString(v47);
    }
    if (*(char *)(a1 + 551) < 0)
    {
      if (!*(void *)(a1 + 536))
      {
LABEL_68:
        std::string::basic_string[abi:ne180100]<0>(v47, "avc.rtp.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v42 = ims::error((uint64_t)v47, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"No remote connection found for session", 38);
        *(unsigned char *)(v42 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_69;
      }
    }
    else if (!*(unsigned char *)(a1 + 551))
    {
      goto LABEL_68;
    }
    if (*(void *)(a1 + 496))
    {
      id v23 = [NSString alloc];
      uint64_t v24 = (void *)(a1 + 528);
      if (*(char *)(a1 + 551) < 0) {
        uint64_t v24 = (void *)*v24;
      }
      BOOL v25 = (void *)[v23 initWithUTF8String:v24];
      uint64_t v26 = [*(id *)(a1 + 496) remoteAddress];
      [v26 setIp:v25];

      int v27 = *(unsigned __int8 *)(a1 + 552);
      long long v28 = [*(id *)(a1 + 496) remoteAddress];
      [v28 setIsIPv6:v27 != 0];

      char v29 = [*(id *)(a1 + 496) remoteAddress];
      [v29 setInterfaceName:&stru_1F20EAF20];

      uint64_t v30 = *(unsigned __int16 *)(v13 + 26);
      uint64_t v31 = [*(id *)(a1 + 496) remoteAddress];
      [v31 setPort:v30];

      uint64_t v32 = (*(_DWORD *)(a1 + 256) - 2);
      if (v32 >= 3) {
        uint64_t v33 = 3;
      }
      else {
        uint64_t v33 = 2 - v32;
      }
      [*(id *)(a1 + 496) setDirection:v33];
      std::string::basic_string[abi:ne180100]<0>(v47, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v34 = ims::debug((uint64_t)v47, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"direction set to ", 17);
      *(unsigned char *)(v34 + 17) = 0;
      ims::toString<MediaDirection>((unsigned int *)(a1 + 256), &v43);
      LoggableString::LoggableString(&v44, &v43);
      (*(void (**)(uint64_t, std::string *))(*(void *)v34 + 40))(v34, &v44);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v34 + 17) = 0;
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      if (v46 < 0) {
        operator delete(__p[0]);
      }
      if (v48 < 0) {
        operator delete(v47[0]);
      }
      if (*(unsigned char *)(v13 + 184))
      {
        uint64_t v35 = 2;
        if (*(unsigned char *)(v13 + 179)) {
          uint64_t v35 = 3;
        }
        if (*(unsigned char *)(v13 + 177)) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = *(unsigned __int8 *)(v13 + 179);
        }
        [*(id *)(a1 + 496) setSRTPCipherSuite:v36];
        if (*(unsigned char *)(v13 + 178)) {
          uint64_t v37 = 3;
        }
        else {
          uint64_t v37 = 1;
        }
        [*(id *)(a1 + 496) setSRTCPCipherSuite:v37];
        BOOL v38 = [MEMORY[0x1E4F1C9B8] dataWithBytes:*(void *)(v13 + 152) length:*(void *)(v13 + 160) - *(void *)(v13 + 152)];
        [*(id *)(a1 + 496) setSendMasterKey:v38];
      }
      if (*(unsigned char *)(v13 + 272))
      {
        int v39 = [MEMORY[0x1E4F1C9B8] dataWithBytes:*(void *)(v13 + 240) length:*(void *)(v13 + 248) - *(void *)(v13 + 240)];
        [*(id *)(a1 + 496) setReceiveMasterKey:v39];
      }
      char isConfigEqualToActiveConfig = AVCRTPSession<AVCAudioStream>::isConfigEqualToActiveConfig(a1, *(void **)(a1 + 496));
      int v41 = 0;
      *(unsigned char *)(a1 + 484) = isConfigEqualToActiveConfig ^ 1;
      goto LABEL_74;
    }
    std::string::basic_string[abi:ne180100]<0>(v47, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v42 = ims::error((uint64_t)v47, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"AVC config is null. Was supposed to be allocated in Audio or RTT session.", 73);
    *(unsigned char *)(v42 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_69:
    *(unsigned char *)(v42 + 17) = 0;
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    int v41 = 1073741825;
LABEL_74:
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = v41;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    goto LABEL_76;
  }
  std::string::basic_string[abi:ne180100]<0>(v47, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v18 = ims::warn((uint64_t)v47, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Not enough information to configure with", 40);
  *(unsigned char *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v18 + 17) = 0;
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = 1073741825;
LABEL_76:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C550E330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AVCRTPSession<AVCAudioStream>::isConfigEqualToActiveConfig(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (*(void *)(a1 + 504))
    {
      uint64_t v5 = [v3 description];
      uint64_t v6 = [*(id *)(a1 + 504) description];
      uint64_t v7 = [v5 isEqualToString:v6];
      std::string::basic_string[abi:ne180100]<0>(v13, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v8 = ims::debug((uint64_t)v13, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"isConfigEqualToActiveConfig", 27);
      *(unsigned char *)(v8 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=", 12);
      *(unsigned char *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v8 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" isEqual=", 9);
      *(unsigned char *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (v14 < 0) {
        operator delete(v13[0]);
      }

      goto LABEL_15;
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::warn((uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"isConfigEqualToActiveConfig", 27);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" activeAvcSessionConfig is null", 31);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::warn((uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"isConfigEqualToActiveConfig", 27);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" config is null", 15);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v9 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  uint64_t v7 = 0;
LABEL_15:

  return v7;
}

void sub_1C550E7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void non-virtual thunk to'AVCRTPSession<AVCAudioStream>::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t AVCRTPSession<AVCAudioStream>::configure(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&v23, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  uint64_t v2 = ims::debug((uint64_t)&v23, (uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"configure", 9);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = a1 + 24;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" _reconfigureNeeded=", 20);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v25 < 0) {
    operator delete(v23);
  }
  if (*(unsigned char *)(a1 + 481) && *(unsigned char *)(a1 + 484))
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(v21, "");
    uint64_t v4 = ims::debug((uint64_t)&v23, (uint64_t)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Reconfiguring session ", 22);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 176))(a1 + 24);
    std::ostream::operator<<();
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    if (v25 < 0) {
      operator delete(v23);
    }
    *(unsigned char *)(a1 + 48IMSCallOptions::~IMSCallOptions(this + 3) = 1;
    id v23 = 0;
    uint64_t v24 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v23);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 104))(a1 + 24);
    RTPSharedPointerBase::getShared<AVCRTPSession<AVCAudioStream>>(v21, a1);
    if (v5 == 2) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 3;
    }
    if (v21[0]) {
      uint64_t v7 = (char *)v21[0] + 24;
    }
    else {
      uint64_t v7 = 0;
    }
    BOOL v19 = v7;
    char v20 = (std::__shared_weak_count *)v21[1];
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3321888768;
    v17[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE9configureEb_block_invoke;
    v17[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
    v17[4] = a1;
    v17[5] = v23;
    uint64_t v18 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MediaSessionDriver::startTimerForRequest(a1 + 24, v6, (uint64_t *)&v19, v17);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    [*(id *)(a1 + 488) stop];
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    uint64_t v8 = v24;
    if (!v24) {
      return 1;
    }
LABEL_35:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  uint64_t v9 = ims::debug((uint64_t)&v23, (uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Ignoring configure request for session ", 39);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v25 < 0) {
    operator delete(v23);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 40);
  if (v10)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      char v12 = v11;
      uint64_t v13 = *(void *)(a1 + 32);
      if (v13)
      {
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v15);
        (*(void (**)(uint64_t, void **, void))(*(void *)v13 + 16))(v13, &v15, 0);
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
      }
      uint64_t v8 = v12;
      goto LABEL_35;
    }
  }
  return 1;
}

void sub_1C550ED18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE9configureEb_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        uint64_t v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        uint64_t v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 32))(v6, &v8, 9);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C550EE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'AVCRTPSession<AVCAudioStream>::configure(uint64_t a1)
{
  return AVCRTPSession<AVCAudioStream>::configure(a1 - 24);
}

uint64_t AVCRTPSession<AVCAudioStream>::active(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"active", 6);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(void))(*(void *)(a1 + 24) + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" active=", 8);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  return *(unsigned __int8 *)(a1 + 481);
}

void sub_1C550EFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'AVCRTPSession<AVCAudioStream>::active(uint64_t a1)
{
  return AVCRTPSession<AVCAudioStream>::active(a1 - 24);
}

uint64_t AVCRTPSession<AVCAudioStream>::paused(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"paused", 6);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(void))(*(void *)(a1 + 24) + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" paused=", 8);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  return *(unsigned __int8 *)(a1 + 482);
}

void sub_1C550F190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'AVCRTPSession<AVCAudioStream>::paused(uint64_t a1)
{
  return AVCRTPSession<AVCAudioStream>::paused(a1 - 24);
}

void AVCRTPSession<AVCAudioStream>::pauseAVCSession(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v8, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"pauseAVCSession", 15);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v4 = (void *)MEMORY[0x1C878EAB0](v3);
  std::string::basic_string[abi:ne180100]<0>(v8, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v5 = ims::debug((uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Pausing session ", 16);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  [*(id *)(a1 + 488) pause];
}

void sub_1C550F400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *AVCRTPSession<AVCAudioStream>::toTimerIdString@<X0>(int a1@<W1>, void *a2@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v2 = "AUDIO_SESSION_START";
      break;
    case 1:
      uint64_t v2 = "TEXT_SESSION_START";
      break;
    case 2:
      uint64_t v2 = "AUDIO_SESSION_STOP";
      break;
    case 3:
      uint64_t v2 = "TEXT_SESSION_STOP";
      break;
    default:
      ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()();
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void *non-virtual thunk to'AVCRTPSession<AVCAudioStream>::toTimerIdString@<X0>(int a1@<W1>, void *a2@<X8>)
{
  return AVCRTPSession<AVCAudioStream>::toTimerIdString(a1, a2);
}

uint64_t AVCRTPSession<AVCTextStream>::AVCRTPSession(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, ImsPrefs *a6, void *a7, long long *a8, dispatch_object_t *a9)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)a1 = &unk_1F20C1128;
  char v12 = (std::__shared_weak_count *)a3[1];
  uint64_t v24 = *a3;
  char v25 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)a5[1];
  uint64_t v22 = *a5;
  id v23 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MediaSessionDriver::MediaSessionDriver(a1 + 24, a2 + 1, &v24, a4, &v22, a6, a8, a9);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v14 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 24) = a2[8];
  *(void *)(a1 + 112) = a2[9];
  *(void *)(a1 + *(void *)(v14 - SipTransactionLayer::~SipTransactionLayer((SipTransactionLayer *)((char *)this - 24)) = a2[10];
  *(unsigned char *)(a1 + 485) = 0;
  *(_DWORD *)(a1 + 48bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *(void *)(a1 + 49ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 512) = *a7;
  uint64_t v15 = a7[1];
  *(void *)(a1 + 520) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  std::string::basic_string[abi:ne180100]<0>(v20, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v16 = ims::debug((uint64_t)v20, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"AVCRTPSession", 13);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  return a1;
}

void sub_1C550F7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v24 + 551) < 0) {
    operator delete(*(void **)(v24 + 528));
  }
  long long v28 = *(std::__shared_weak_count **)(v24 + 520);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }

  MediaSessionDriver::~MediaSessionDriver(v25, v26);
  char v29 = *(std::__shared_weak_count **)(v24 + 16);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t AVCRTPSession<AVCTextStream>::~AVCRTPSession(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  uint64_t v5 = (MediaSessionDriver *)(a1 + 24);
  *(void *)(a1 + 24) = a2[8];
  *(void *)(a1 + 112) = a2[9];
  *(void *)(a1 + *(void *)(v4 - SipTransactionLayer::~SipTransactionLayer((SipTransactionLayer *)((char *)this - 24)) = a2[10];
  std::string::basic_string[abi:ne180100]<0>(v12, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"~AVCRTPSession", 14);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (*(char *)(a1 + 551) < 0) {
    operator delete(*(void **)(a1 + 528));
  }
  char v7 = *(std::__shared_weak_count **)(a1 + 520);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }

  MediaSessionDriver::~MediaSessionDriver(v5, a2 + 1);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  return a1;
}

uint64_t AVCRTPSession<AVCTextStream>::terminate(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&v21, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  uint64_t v2 = ims::debug((uint64_t)&v21, (uint64_t)v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"terminate", 9);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v23 < 0) {
    operator delete(v21);
  }
  uint64_t v4 = (void *)MEMORY[0x1C878EAB0](v3);
  if (*(unsigned char *)(a1 + 481))
  {
    *(_WORD *)(a1 + 48IMSCallOptions::~IMSCallOptions(this + 3) = 0;
    char v21 = 0;
    uint64_t v22 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v21);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 104))(a1 + 24);
    RTPSharedPointerBase::getShared<AVCRTPSession<AVCTextStream>>(v19, a1);
    if (v5 == 2) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 3;
    }
    if (v19[0]) {
      char v7 = (char *)v19[0] + 24;
    }
    else {
      char v7 = 0;
    }
    BOOL v17 = v7;
    uint64_t v18 = (std::__shared_weak_count *)v19[1];
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3321888768;
    v15[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE9terminateEb_block_invoke;
    v15[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
    v15[4] = a1;
    void v15[5] = v21;
    uint64_t v16 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MediaSessionDriver::startTimerForRequest(a1 + 24, v6, (uint64_t *)&v17, v15);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    [*(id *)(a1 + 488) stop];
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  char v21 = 0;
  uint64_t v22 = 0;
  RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v21);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 40);
  if (v8)
  {
    char v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)(a1 + 32);
      if (v11)
      {
        char v13 = v21;
        uint64_t v14 = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, void **, void))(*(void *)v11 + 8))(v11, &v13, 0);
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  return 1;
}

void sub_1C550FD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  uint64_t v14 = *(std::__shared_weak_count **)(v12 - 48);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void RTPSharedPointerBase::getShared<AVCRTPSession<AVCTextStream>>(void **p_lpsrc, uint64_t a2)
{
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (void *)(a2 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v6;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE9terminateEb_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        char v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        char v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 32))(v6, &v8, 9);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C550FF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'AVCRTPSession<AVCTextStream>::terminate(uint64_t a1)
{
  return AVCRTPSession<AVCTextStream>::terminate(a1 - 24);
}

uint64_t AVCRTPSession<AVCTextStream>::start(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v80, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v83, "");
  uint64_t v2 = ims::debug((uint64_t)v80, (uint64_t)&v83);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"start", 5);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = a1 + 24;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v85 < 0) {
    operator delete(v83);
  }
  if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80[0].__r_.__value_.__l.__data_);
  }
  int v5 = (void *)MEMORY[0x1C878EAB0](v4);
  if (!*(void *)(a1 + 496)) {
    goto LABEL_71;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 104))(a1 + 24) == 2)
  {
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    RTPManager::sdpSessionForSession(*(RTPManager **)(a1 + 56), *(void *)(a1 + 48), &v83);
    uint64_t v6 = v83;
    if (v83)
    {
      char v7 = v83[16];
      if (v7)
      {
        uint64_t v8 = std::__shared_weak_count::lock(v7);
        if (v8)
        {
          char v9 = v6[15];
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          if (v9)
          {
            uint64_t v82 = 0;
            long long v81 = 0u;
            memset(v80, 0, sizeof(v80));
            uint64_t v10 = v83;
            uint64_t v11 = v83[16];
            if (v11)
            {
              uint64_t v12 = std::__shared_weak_count::lock(v11);
              if (v12) {
                char v13 = v10[15];
              }
              else {
                char v13 = 0;
              }
            }
            else
            {
              char v13 = 0;
              uint64_t v12 = 0;
            }
            if (SHIBYTE(v13[132].__shared_owners_) < 0) {
              std::string::__init_copy_ctor_external(v80, (const std::string::value_type *)v13[131].__shared_weak_owners_, (std::string::size_type)v13[132].__vftable);
            }
            else {
              v80[0] = *(std::string *)((char *)v13 + 3160);
            }
            if (SHIBYTE(v13[133].__shared_owners_) < 0) {
              std::string::__init_copy_ctor_external(&v80[1], (const std::string::value_type *)v13[132].__shared_weak_owners_, (std::string::size_type)v13[133].__vftable);
            }
            else {
              v80[1] = *(std::string *)((char *)v13 + 3184);
            }
            LOBYTE(v82) = v13[134].__shared_owners_;
            long long v81 = *(_OWORD *)&v13[133].__shared_weak_owners_;
            if (v12) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
            unint64_t v14 = *(void *)(a1 + 48);
            uint64_t v15 = *(void *)(a1 + 56);
            uint64_t v16 = *(void **)(v15 + 232);
            if (v16)
            {
              BOOL v17 = (void *)(v15 + 232);
              do
              {
                unint64_t v18 = v16[4];
                BOOL v19 = v18 >= v14;
                if (v18 >= v14) {
                  char v20 = v16;
                }
                else {
                  char v20 = v16 + 1;
                }
                if (v19) {
                  BOOL v17 = v16;
                }
                uint64_t v16 = (void *)*v20;
              }
              while (*v20);
              if (v17 != (void *)(v15 + 232) && v17[4] <= v14) {
                goto LABEL_49;
              }
            }
            char v21 = *(void **)(v15 + 256);
            if (!v21) {
              goto LABEL_46;
            }
            uint64_t v22 = (void *)(v15 + 256);
            char v23 = (void *)(v15 + 256);
            do
            {
              unint64_t v24 = v21[4];
              BOOL v25 = v24 >= v14;
              if (v24 >= v14) {
                uint64_t v26 = v21;
              }
              else {
                uint64_t v26 = v21 + 1;
              }
              if (v25) {
                char v23 = v21;
              }
              char v21 = (void *)*v26;
            }
            while (*v26);
            if (v23 != v22 && v23[4] <= v14)
            {
LABEL_49:
              isWifuint64_t i = ims::AccessNetwork::isWifi((ims::AccessNetwork *)v80);
              long long v28 = [*(id *)(a1 + 496) audio];
              char v29 = v28;
              if (isWifi) {
                uint64_t v30 = 2;
              }
              else {
                uint64_t v30 = 9;
              }
            }
            else
            {
LABEL_46:
              BOOL v27 = ims::AccessNetwork::isWifi((ims::AccessNetwork *)v80);
              long long v28 = [*(id *)(a1 + 496) audio];
              char v29 = v28;
              if (v27) {
                uint64_t v30 = 0;
              }
              else {
                uint64_t v30 = 6;
              }
            }
            [v28 setAudioStreamMode:v30];

            [*(id *)(a1 + 496) setJitterBufferMode:ims::AccessNetwork::isWifi((ims::AccessNetwork *)v80)];
            uint64_t v32 = *(void *)(a1 + 56);
            uint64_t v33 = (void *)(v32 + 256);
            uint64_t v34 = *(void **)(v32 + 256);
            if (!v34) {
              goto LABEL_63;
            }
            unint64_t v35 = *(void *)(a1 + 48);
            uint64_t v36 = (void *)(v32 + 256);
            do
            {
              unint64_t v37 = v34[4];
              BOOL v38 = v37 >= v35;
              if (v37 >= v35) {
                int v39 = v34;
              }
              else {
                int v39 = v34 + 1;
              }
              if (v38) {
                uint64_t v36 = v34;
              }
              uint64_t v34 = (void *)*v39;
            }
            while (*v39);
            if (v36 == v33 || v36[4] > v35) {
LABEL_63:
            }
              uint64_t v36 = v33;
            [*(id *)(a1 + 496) setOutOfProcessCodecsEnabled:v36 != v33];
            if (SHIBYTE(v80[1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v80[1].__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v80[0].__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }
    if (v84) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v84);
    }
  }
  uint64_t v40 = *(void **)(a1 + 496);
  if (!v40)
  {
LABEL_71:
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 104))(a1 + 24) == 4)
    {
      std::string::basic_string[abi:ne180100]<0>(v80, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(&v83, "");
      uint64_t v41 = ims::warn((uint64_t)v80, (uint64_t)&v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"Text media session is not configured, possibly due to incomplete upgrade.  Waiting for upper layers to generate new offer.", 122);
      *(unsigned char *)(v41 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v41 + 17) = 0;
      if (v85 < 0) {
        operator delete(v83);
      }
      if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80[0].__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v80[0].__r_.__value_.__l.__data_ = 0uLL;
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, (void **)&v80[0].__r_.__value_.__l.__data_);
      uint64_t v42 = *(NSObject **)(a1 + 72);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3321888768;
      block[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE5startEb_block_invoke;
      block[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
      block[4] = a1;
      long long v79 = *(_OWORD *)&v80[0].__r_.__value_.__l.__data_;
      if (v80[0].__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v80[0].__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_async(v42, block);
      if (*((void *)&v79 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v79 + 1));
      }
      std::string::size_type size = (std::__shared_weak_count *)v80[0].__r_.__value_.__l.__size_;
      if (!v80[0].__r_.__value_.__l.__size_) {
        goto LABEL_125;
      }
LABEL_124:
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
      goto LABEL_125;
    }
    uint64_t v40 = *(void **)(a1 + 496);
  }
  objc_storeStrong((id *)(a1 + 504), v40);
  uint64_t v44 = *(void *)(a1 + 504);
  if (v44)
  {
    xpc_object_t v45 = *(void **)(a1 + 488);
    id v77 = 0;
    [v45 configure:v44 error:&v77];
    id v46 = v77;
    if (v46)
    {
      long long v47 = v46;
      char v48 = [v46 description];
      std::string::basic_string[abi:ne180100]<0>(v80, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(&v83, "");
      uint64_t v49 = ims::error((uint64_t)v80, (uint64_t)&v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v49 + 8), (uint64_t)"Session config error: ", 22);
      *(unsigned char *)(v49 + 17) = 0;
      id v50 = v48;
      size_t v51 = (const char *)[v50 UTF8String];
      size_t v52 = strlen(v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v49 + 8), (uint64_t)v51, v52);
      *(unsigned char *)(v49 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v49 + 17) = 0;
      if (v85 < 0) {
        operator delete(v83);
      }
      if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80[0].__r_.__value_.__l.__data_);
      }
      uint64_t v53 = *(std::__shared_weak_count **)(a1 + 40);
      if (v53)
      {
        uint64_t v54 = std::__shared_weak_count::lock(v53);
        if (v54)
        {
          uint64_t v55 = v54;
          uint64_t v56 = *(void *)(a1 + 32);
          if (v56)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v73);
            (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v56 + 24))(v56, &v73, 9);
            if (v74) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v74);
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v55);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v80, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(&v83, "");
      uint64_t v62 = ims::debug((uint64_t)v80, (uint64_t)&v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v62 + 8), (uint64_t)"Clear reconfigureNeeded", 23);
      *(unsigned char *)(v62 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v62 + 17) = 0;
      if (v85 < 0) {
        operator delete(v83);
      }
      if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80[0].__r_.__value_.__l.__data_);
      }
      *(unsigned char *)(a1 + 484) = 0;
      unint64_t v71 = 0;
      size_t v72 = 0;
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v71);
      int v63 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 104))(a1 + 24);
      RTPSharedPointerBase::getShared<AVCRTPSession<AVCTextStream>>((void **)&v80[0].__r_.__value_.__l.__data_, a1);
      if (v80[0].__r_.__value_.__r.__words[0]) {
        std::string::size_type v64 = v80[0].__r_.__value_.__r.__words[0] + 24;
      }
      else {
        std::string::size_type v64 = 0;
      }
      std::string::size_type v69 = v64;
      uint64_t v70 = (std::__shared_weak_count *)v80[0].__r_.__value_.__l.__size_;
      v67[0] = MEMORY[0x1E4F143A8];
      v67[1] = 3321888768;
      v67[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE5startEb_block_invoke_2;
      v67[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
      v67[4] = a1;
      v67[5] = v71;
      unint64_t v68 = v72;
      if (v72) {
        atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MediaSessionDriver::startTimerForRequest(a1 + 24, v63 != 2, (uint64_t *)&v69, v67);
      if (v70) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v70);
      }
      std::string::basic_string[abi:ne180100]<0>(v80, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(&v83, "");
      uint64_t v65 = ims::debug((uint64_t)v80, (uint64_t)&v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)"Starting session ", 17);
      *(unsigned char *)(v65 + 17) = 0;
      (*(void (**)(uint64_t))(*(void *)v3 + 176))(a1 + 24);
      std::ostream::operator<<();
      *(unsigned char *)(v65 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v65 + 17) = 0;
      if (v85 < 0) {
        operator delete(v83);
      }
      if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80[0].__r_.__value_.__l.__data_);
      }
      [*(id *)(a1 + 488) start];
      if (v68) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v68);
      }
      std::string::size_type size = v72;
      if (v72) {
        goto LABEL_124;
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&v83, "");
    uint64_t v57 = ims::error((uint64_t)v80, (uint64_t)&v83);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"_activeAvcSessionConfig is null", 31);
    *(unsigned char *)(v57 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v57 + 17) = 0;
    if (v85 < 0) {
      operator delete(v83);
    }
    if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80[0].__r_.__value_.__l.__data_);
    }
    std::string v58 = *(std::__shared_weak_count **)(a1 + 40);
    if (v58)
    {
      std::string v59 = std::__shared_weak_count::lock(v58);
      if (v59)
      {
        uint64_t v60 = v59;
        uint64_t v61 = *(void *)(a1 + 32);
        if (v61)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v75);
          (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v61 + 24))(v61, &v75, 9);
          if (v76) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v76);
          }
        }
        std::string::size_type size = v60;
        goto LABEL_124;
      }
    }
  }
LABEL_125:
  return 1;
}

void sub_1C5510A2C(_Unwind_Exception *a1)
{
  ims::AccessNetwork::~AccessNetwork((void **)(v2 - 176));
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 96);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE5startEb_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        char v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        char v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 24))(v6, &v8, 2);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5510C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE5startEb_block_invoke_2(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        char v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        char v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 24))(v6, &v8, 9);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5510D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'AVCRTPSession<AVCTextStream>::start(uint64_t a1)
{
  return AVCRTPSession<AVCTextStream>::start(a1 - 24);
}

uint64_t AVCRTPSession<AVCTextStream>::stop(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&v18, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"stop", 4);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = a1 + 24;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v20 < 0) {
    operator delete(v18);
  }
  int v5 = (void *)MEMORY[0x1C878EAB0](v4);
  if (*(unsigned char *)(a1 + 481))
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Stopping session ", 17);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 176))(a1 + 24);
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v18);
    }
    *(_WORD *)(a1 + 48IMSCallOptions::~IMSCallOptions(this + 3) = 0;
    unint64_t v18 = 0;
    BOOL v19 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v18);
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 104))(a1 + 24);
    RTPSharedPointerBase::getShared<AVCRTPSession<AVCTextStream>>(__p, a1);
    if (v7 == 2) {
      uint64_t v8 = 2;
    }
    else {
      uint64_t v8 = 3;
    }
    if (__p[0]) {
      char v9 = (char *)__p[0] + 24;
    }
    else {
      char v9 = 0;
    }
    unint64_t v14 = v9;
    uint64_t v15 = (std::__shared_weak_count *)__p[1];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3321888768;
    void v12[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE4stopEb_block_invoke;
    v12[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
    v12[4] = a1;
    void v12[5] = v18;
    char v13 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MediaSessionDriver::startTimerForRequest(a1 + 24, v8, (uint64_t *)&v14, v12);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    [*(id *)(a1 + 488) stop];
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::warn((uint64_t)&v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Stop called on session ", 23);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 176))(v3);
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" which isn't active. Ignoring.", 30);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v18);
    }
  }
  return 1;
}

void sub_1C55111C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 33) < 0) {
    operator delete(*(void **)(v24 - 56));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE4stopEb_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        int v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        char v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 32))(v6, &v8, 9);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C55112F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'AVCRTPSession<AVCTextStream>::stop(uint64_t a1)
{
  return AVCRTPSession<AVCTextStream>::stop(a1 - 24);
}

uint64_t AVCRTPSession<AVCTextStream>::setDirection(uint64_t a1, int *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v63, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v60, "");
  uint64_t v4 = ims::debug((uint64_t)&v63, (uint64_t)&v60);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"setDirection", 12);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v5 = a1 + 24;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v62 < 0) {
    operator delete(v60);
  }
  if (v65 < 0) {
    operator delete(v63);
  }
  int v6 = *a2;
  if (*a2 == 2)
  {
    char v7 = 0;
    uint64_t v8 = 2;
  }
  else if (v6 == 4)
  {
    char v7 = 0;
    uint64_t v8 = 0;
  }
  else if (v6 == 3)
  {
    char v7 = 0;
    uint64_t v8 = 1;
  }
  else
  {
    char v7 = 1;
    uint64_t v8 = 3;
  }
  uint64_t v9 = [*(id *)(a1 + 488) direction];
  *(_DWORD *)(a1 + 25ims::StackConfig::~StackConfig(this + 6) = *a2;
  std::string::basic_string[abi:ne180100]<0>(&v63, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v60, "");
  uint64_t v10 = ims::debug((uint64_t)&v63, (uint64_t)&v60);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Setting direction to ", 21);
  *(unsigned char *)(v10 + 17) = 0;
  ims::toString<MediaDirection>((unsigned int *)(a1 + 256), &v58);
  LoggableString::LoggableString(&v59, &v58);
  (*(void (**)(uint64_t, std::string *))(*(void *)v10 + 40))(v10, &v59);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" for session ", 13);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (v62 < 0) {
    operator delete(v60);
  }
  if (v65 < 0) {
    operator delete(v63);
  }
  if (!*(unsigned char *)(a1 + 481))
  {
    if (*(void *)(a1 + 496))
    {
      std::string::basic_string[abi:ne180100]<0>(&v63, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(&v60, "");
      uint64_t v16 = ims::debug((uint64_t)&v63, (uint64_t)&v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Setting direction on session configuration for session ", 55);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t))(*(void *)v5 + 176))(a1 + 24);
      std::ostream::operator<<();
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if (v62 < 0) {
        operator delete(v60);
      }
      if (v65 < 0) {
        operator delete(v63);
      }
      [*(id *)(a1 + 496) setDirection:v8];
      [*(id *)(a1 + 496) setRtpTimeOutEnabled:*(_DWORD *)(a1 + 256) == 1];
      [*(id *)(a1 + 496) setRtcpTimeOutEnabled:*(_DWORD *)(a1 + 256) != 1];
      BOOL v17 = *(_DWORD *)(a1 + 256) != 1 || *(_DWORD *)(a1 + 432) != 0;
      [*(id *)(a1 + 496) setRtcpEnabled:v17];
      uint64_t v23 = 436;
      if (*(_DWORD *)(a1 + 256) == 1) {
        uint64_t v23 = 432;
      }
      LODWORD(v22) = *(_DWORD *)(a1 + v23);
      [*(id *)(a1 + 496) setRtcpSendInterval:(double)v22];
    }
    uint64_t v24 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v24) {
      return 1;
    }
    BOOL v25 = std::__shared_weak_count::lock(v24);
    if (!v25) {
      return 1;
    }
    char v13 = v25;
    uint64_t v26 = *(void *)(a1 + 32);
    if (!v26) {
      goto LABEL_54;
    }
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v41);
    (*(void (**)(uint64_t, void **, void))(*(void *)v26 + 32))(v26, &v41, 0);
    uint64_t v15 = v42;
    if (!v42) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  if (v8 != [*(id *)(a1 + 488) direction])
  {
    uint64_t v18 = [*(id *)(a1 + 488) direction];
    [*(id *)(a1 + 488) setDirection:v8];
    [*(id *)(a1 + 496) setDirection:v8];
    if (v18)
    {
      if (*a2 == 4)
      {
        [*(id *)(a1 + 488) pause];
        return 1;
      }
      char v29 = v7 ^ 1;
      if (v9 == 3) {
        char v29 = 1;
      }
      if (v29)
      {
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, (void **)&v60);
        uint64_t v37 = *(void *)(a1 + 56);
        LoggableString::LoggableString((LoggableString *)&v63, "avc.rtp.session");
        BOOL v38 = v60;
        int v39 = v61;
        v45[0] = (uint64_t)v60;
        v45[1] = (uint64_t)v61;
        if (v61)
        {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v40 = v61;
        }
        else
        {
          uint64_t v40 = 0;
        }
        v43[0] = MEMORY[0x1E4F143A8];
        v43[1] = 3321888768;
        v43[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE12setDirectionERK14MediaDirectionb_block_invoke_3;
        v43[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
        v43[4] = a1;
        v43[5] = v38;
        uint64_t v44 = v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        RTPManager::performBlock(v37, (uint64_t)&v63, v45, (uint64_t)v43);
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
        if (v65 < 0) {
          operator delete(v63);
        }
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
        BOOL v27 = v61;
        if (v61) {
          goto LABEL_55;
        }
        return 1;
      }
      *(unsigned char *)(a1 + 484) = 1;
      int v63 = 0;
      std::string::size_type v64 = 0;
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v63);
      int v30 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 104))(a1 + 24);
      RTPSharedPointerBase::getShared<AVCRTPSession<AVCTextStream>>((void **)&v60, a1);
      if (v30 == 2) {
        uint64_t v31 = 2;
      }
      else {
        uint64_t v31 = 3;
      }
      if (v60) {
        uint64_t v32 = v60 + 24;
      }
      else {
        uint64_t v32 = 0;
      }
      char v48 = v32;
      uint64_t v49 = v61;
      v46[0] = MEMORY[0x1E4F143A8];
      v46[1] = 3321888768;
      v46[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE12setDirectionERK14MediaDirectionb_block_invoke_2;
      v46[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
      v46[4] = a1;
      v46[5] = v63;
      long long v47 = v64;
      if (v64) {
        atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MediaSessionDriver::startTimerForRequest(a1 + 24, v31, (uint64_t *)&v48, v46);
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      [*(id *)(a1 + 488) stop];
      uint64_t v33 = v47;
      if (!v47)
      {
LABEL_72:
        BOOL v27 = v64;
        if (!v64) {
          return 1;
        }
        goto LABEL_55;
      }
LABEL_71:
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      goto LABEL_72;
    }
    if ((unint64_t)AVCRTPStackController::audioSessionCount(*(AVCRTPStackController **)(a1 + 512)) >= 2) {
      *(unsigned char *)(a1 + 484) = 1;
    }
    if (*a2 != 4)
    {
      if (!*(unsigned char *)(a1 + 484))
      {
        [*(id *)(a1 + 488) resume];
        return 1;
      }
      int v63 = 0;
      std::string::size_type v64 = 0;
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v63);
      int v34 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 104))(a1 + 24);
      RTPSharedPointerBase::getShared<AVCRTPSession<AVCTextStream>>((void **)&v60, a1);
      if (v34 == 2) {
        uint64_t v35 = 2;
      }
      else {
        uint64_t v35 = 3;
      }
      if (v60) {
        uint64_t v36 = v60 + 24;
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v54 = v36;
      uint64_t v55 = v61;
      v52[0] = MEMORY[0x1E4F143A8];
      v52[1] = 3321888768;
      void v52[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE12setDirectionERK14MediaDirectionb_block_invoke;
      v52[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
      std::vector<std::string> v52[4] = a1;
      v52[5] = v63;
      uint64_t v53 = v64;
      if (v64) {
        atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MediaSessionDriver::startTimerForRequest(a1 + 24, v35, (uint64_t *)&v54, v52);
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
      [*(id *)(a1 + 488) stop];
      uint64_t v33 = v53;
      if (!v53) {
        goto LABEL_72;
      }
      goto LABEL_71;
    }
    BOOL v19 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v19) {
      return 1;
    }
    char v20 = std::__shared_weak_count::lock(v19);
    if (!v20) {
      return 1;
    }
    char v13 = v20;
    uint64_t v21 = *(void *)(a1 + 32);
    if (!v21) {
      goto LABEL_54;
    }
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v50);
    (*(void (**)(uint64_t, void **, void))(*(void *)v21 + 24))(v21, &v50, 0);
    uint64_t v15 = v51;
    if (!v51) {
      goto LABEL_54;
    }
LABEL_53:
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_54:
    BOOL v27 = v13;
LABEL_55:
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    return 1;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 40);
  if (v11)
  {
    uint64_t v12 = std::__shared_weak_count::lock(v11);
    if (v12)
    {
      char v13 = v12;
      uint64_t v14 = *(void *)(a1 + 32);
      if (!v14) {
        goto LABEL_54;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v56);
      (*(void (**)(uint64_t, void **, void))(*(void *)v14 + 24))(v14, &v56, 0);
      uint64_t v15 = v57;
      if (!v57) {
        goto LABEL_54;
      }
      goto LABEL_53;
    }
  }
  return 1;
}

void sub_1C5511C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE12setDirectionERK14MediaDirectionb_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        char v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        uint64_t v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 32))(v6, &v8, 9);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5511E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE12setDirectionERK14MediaDirectionb_block_invoke_2(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        char v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        uint64_t v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 32))(v6, &v8, 9);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5511F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE12setDirectionERK14MediaDirectionb_block_invoke_3(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        char v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        uint64_t v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v6 + 24))(v6, &v8, 0);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5512004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'AVCRTPSession<AVCTextStream>::setDirection(uint64_t a1, int *a2)
{
  return AVCRTPSession<AVCTextStream>::setDirection(a1 - 24, a2);
}

void AVCRTPSession<AVCTextStream>::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v54, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v54, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"setConfiguration", 16);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v53 < 0) {
    operator delete(__p[0]);
  }
  if (v55 < 0) {
    operator delete(v54[0]);
  }
  uint64_t v8 = (void *)MEMORY[0x1C878EAB0](v7);
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v9);
    if (v10) {
      uint64_t v11 = *a2;
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 104))(a1 + 24);
  if (v12 == 2)
  {
    if (*(unsigned char *)(v11 + 584))
    {
      uint64_t v13 = v11 + 152;
      goto LABEL_18;
    }
  }
  else if (v12 == 6 && *(unsigned char *)(v11 + 1856))
  {
    uint64_t v13 = v11 + 1496;
    goto LABEL_18;
  }
  if (*(unsigned char *)(v11 + 1328))
  {
    uint64_t v13 = v11 + 1032;
LABEL_18:
    uint64_t v15 = *(void *)(v13 + 8);
    uint64_t v14 = *(std::__shared_weak_count **)(v13 + 16);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v15)
    {
      uint64_t v16 = *(std::__shared_weak_count **)(v11 + 128);
      if (v16)
      {
        uint64_t v16 = std::__shared_weak_count::lock(v16);
        BOOL v17 = v16;
        if (v16) {
          uint64_t v16 = *(std::__shared_weak_count **)(v11 + 120);
        }
      }
      else
      {
        BOOL v17 = 0;
      }
      BOOL v19 = (ImsPrefs *)SipStack::prefs((SipStack *)v16);
      IgnoreLocalhostRemoteRtpAddressKey = (void **)ImsPrefs::getIgnoreLocalhostRemoteRtpAddressKey(v19);
      int v21 = ImsPrefs::BOOLValue(v19, IgnoreLocalhostRemoteRtpAddressKey);
      char v22 = v21;
      if (v17)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        if ((v22 & 1) == 0) {
LABEL_38:
        }
          IpAddress::asString(v54);
      }
      else if (!v21)
      {
        goto LABEL_38;
      }
      IpAddress::asString(v54);
    }
    if (*(char *)(a1 + 551) < 0)
    {
      if (!*(void *)(a1 + 536))
      {
LABEL_75:
        std::string::basic_string[abi:ne180100]<0>(v54, "avc.rtp.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v47 = ims::error((uint64_t)v54, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)"No remote connection found for session", 38);
        *(unsigned char *)(v47 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_76;
      }
    }
    else if (!*(unsigned char *)(a1 + 551))
    {
      goto LABEL_75;
    }
    if (!*(void *)(a1 + 496))
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v47 = ims::error((uint64_t)v54, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)"AVC config is null. Was supposed to be allocated in Audio or RTT session.", 73);
      *(unsigned char *)(v47 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_76:
      *(unsigned char *)(v47 + 17) = 0;
      if (v53 < 0) {
        operator delete(__p[0]);
      }
      if (v55 < 0) {
        operator delete(v54[0]);
      }
      int v49 = 1073741825;
      goto LABEL_88;
    }
    id v23 = [NSString alloc];
    uint64_t v24 = (void *)(a1 + 528);
    if (*(char *)(a1 + 551) < 0) {
      uint64_t v24 = (void *)*v24;
    }
    BOOL v25 = (void *)[v23 initWithUTF8String:v24];
    uint64_t v26 = [*(id *)(a1 + 496) remoteAddress];
    [v26 setIp:v25];

    int v27 = *(unsigned __int8 *)(a1 + 552);
    long long v28 = [*(id *)(a1 + 496) remoteAddress];
    [v28 setIsIPv6:v27 != 0];

    char v29 = [*(id *)(a1 + 496) remoteAddress];
    [v29 setInterfaceName:&stru_1F20EAF20];

    uint64_t v30 = *(unsigned __int16 *)(v13 + 26);
    uint64_t v31 = [*(id *)(a1 + 496) remoteAddress];
    [v31 setPort:v30];

    uint64_t v32 = (*(_DWORD *)(a1 + 256) - 2);
    if (v32 >= 3) {
      uint64_t v33 = 3;
    }
    else {
      uint64_t v33 = 2 - v32;
    }
    [*(id *)(a1 + 496) setDirection:v33];
    std::string::basic_string[abi:ne180100]<0>(v54, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v34 = ims::debug((uint64_t)v54, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"direction set to ", 17);
    *(unsigned char *)(v34 + 17) = 0;
    ims::toString<MediaDirection>((unsigned int *)(a1 + 256), &v50);
    LoggableString::LoggableString(&v51, &v50);
    (*(void (**)(uint64_t, std::string *))(*(void *)v34 + 40))(v34, &v51);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v34 + 17) = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (v53 < 0) {
      operator delete(__p[0]);
    }
    if (v55 < 0) {
      operator delete(v54[0]);
    }
    if (*(unsigned char *)(v13 + 184))
    {
      uint64_t v35 = 2;
      if (*(unsigned char *)(v13 + 179)) {
        uint64_t v35 = 3;
      }
      if (*(unsigned char *)(v13 + 177)) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = *(unsigned __int8 *)(v13 + 179);
      }
      [*(id *)(a1 + 496) setSRTPCipherSuite:v36];
      if (*(unsigned char *)(v13 + 178)) {
        uint64_t v37 = 3;
      }
      else {
        uint64_t v37 = 1;
      }
      [*(id *)(a1 + 496) setSRTCPCipherSuite:v37];
      BOOL v38 = [MEMORY[0x1E4F1C9B8] dataWithBytes:*(void *)(v13 + 152) length:*(void *)(v13 + 160) - *(void *)(v13 + 152)];
      [*(id *)(a1 + 496) setSendMasterKey:v38];
    }
    if (*(unsigned char *)(v13 + 272))
    {
      int v39 = [MEMORY[0x1E4F1C9B8] dataWithBytes:*(void *)(v13 + 240) length:*(void *)(v13 + 248) - *(void *)(v13 + 240)];
      [*(id *)(a1 + 496) setReceiveMasterKey:v39];
    }
    id v40 = *(id *)(a1 + 496);
    uint64_t v41 = v40;
    if (v40)
    {
      if (*(void *)(a1 + 504))
      {
        uint64_t v42 = [v40 description];
        std::string v43 = [*(id *)(a1 + 504) description];
        char v44 = [v42 isEqualToString:v43];
        std::string::basic_string[abi:ne180100]<0>(v54, "avc.rtp.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v45 = ims::debug((uint64_t)v54, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"isConfigEqualToActiveConfig", 27);
        *(unsigned char *)(v45 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)" [sessionId=", 12);
        *(unsigned char *)(v45 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v45 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)" isEqual=", 9);
        *(unsigned char *)(v45 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v45 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v45 + 17) = 0;
        if (v53 < 0) {
          operator delete(__p[0]);
        }
        if (v55 < 0) {
          operator delete(v54[0]);
        }

        char v46 = v44 ^ 1;
LABEL_87:

        int v49 = 0;
        *(unsigned char *)(a1 + 484) = v46;
LABEL_88:
        *(_OWORD *)(a3 + 24) = 0u;
        *(_OWORD *)(a3 + 40) = 0u;
        *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
        *(void *)a3 = &unk_1F20B2680;
        *(void *)(a3 + 8) = &_bambiDomain;
        *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = v49;
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        goto LABEL_90;
      }
      std::string::basic_string[abi:ne180100]<0>(v54, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v48 = ims::warn((uint64_t)v54, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"isConfigEqualToActiveConfig", 27);
      *(unsigned char *)(v48 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)" [sessionId=", 12);
      *(unsigned char *)(v48 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v48 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)" activeAvcSessionConfig is null", 31);
      *(unsigned char *)(v48 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v48 = ims::warn((uint64_t)v54, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"isConfigEqualToActiveConfig", 27);
      *(unsigned char *)(v48 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)" [sessionId=", 12);
      *(unsigned char *)(v48 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v48 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)" config is null", 15);
      *(unsigned char *)(v48 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(unsigned char *)(v48 + 17) = 0;
    if (v53 < 0) {
      operator delete(__p[0]);
    }
    if (v55 < 0) {
      operator delete(v54[0]);
    }
    char v46 = 1;
    goto LABEL_87;
  }
  std::string::basic_string[abi:ne180100]<0>(v54, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v18 = ims::warn((uint64_t)v54, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Not enough information to configure with", 40);
  *(unsigned char *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v18 + 17) = 0;
  if (v53 < 0) {
    operator delete(__p[0]);
  }
  if (v55 < 0) {
    operator delete(v54[0]);
  }
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = 1073741825;
LABEL_90:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C5512B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }

  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'AVCRTPSession<AVCTextStream>::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t AVCRTPSession<AVCTextStream>::configure(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&v23, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  uint64_t v2 = ims::debug((uint64_t)&v23, (uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"configure", 9);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = a1 + 24;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" _reconfigureNeeded=", 20);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v25 < 0) {
    operator delete(v23);
  }
  if (*(unsigned char *)(a1 + 481) && *(unsigned char *)(a1 + 484))
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(v21, "");
    uint64_t v4 = ims::debug((uint64_t)&v23, (uint64_t)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Reconfiguring session ", 22);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 176))(a1 + 24);
    std::ostream::operator<<();
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    if (v25 < 0) {
      operator delete(v23);
    }
    *(unsigned char *)(a1 + 48IMSCallOptions::~IMSCallOptions(this + 3) = 1;
    id v23 = 0;
    uint64_t v24 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v23);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 104))(a1 + 24);
    RTPSharedPointerBase::getShared<AVCRTPSession<AVCTextStream>>(v21, a1);
    if (v5 == 2) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 3;
    }
    if (v21[0]) {
      uint64_t v7 = (char *)v21[0] + 24;
    }
    else {
      uint64_t v7 = 0;
    }
    BOOL v19 = v7;
    char v20 = (std::__shared_weak_count *)v21[1];
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3321888768;
    v17[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE9configureEb_block_invoke;
    v17[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
    v17[4] = a1;
    v17[5] = v23;
    uint64_t v18 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MediaSessionDriver::startTimerForRequest(a1 + 24, v6, (uint64_t *)&v19, v17);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    [*(id *)(a1 + 488) stop];
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    uint64_t v8 = v24;
    if (!v24) {
      return 1;
    }
LABEL_35:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  uint64_t v9 = ims::debug((uint64_t)&v23, (uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Ignoring configure request for session ", 39);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v25 < 0) {
    operator delete(v23);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 40);
  if (v10)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      int v12 = v11;
      uint64_t v13 = *(void *)(a1 + 32);
      if (v13)
      {
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v15);
        (*(void (**)(uint64_t, void **, void))(*(void *)v13 + 16))(v13, &v15, 0);
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
      }
      uint64_t v8 = v12;
      goto LABEL_35;
    }
  }
  return 1;
}

void sub_1C5513240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE9configureEb_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = *(void *)(v2 + 32);
      if (v6)
      {
        uint64_t v7 = (std::__shared_weak_count *)a1[6];
        uint64_t v8 = a1[5];
        uint64_t v9 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 32))(v6, &v8, 9);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5513394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'AVCRTPSession<AVCTextStream>::configure(uint64_t a1)
{
  return AVCRTPSession<AVCTextStream>::configure(a1 - 24);
}

uint64_t AVCRTPSession<AVCTextStream>::active(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"active", 6);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(void))(*(void *)(a1 + 24) + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" active=", 8);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  return *(unsigned __int8 *)(a1 + 481);
}

void sub_1C551351C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'AVCRTPSession<AVCTextStream>::active(uint64_t a1)
{
  return AVCRTPSession<AVCTextStream>::active(a1 - 24);
}

uint64_t AVCRTPSession<AVCTextStream>::paused(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"paused", 6);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(void))(*(void *)(a1 + 24) + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" paused=", 8);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  return *(unsigned __int8 *)(a1 + 482);
}

void sub_1C55136B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'AVCRTPSession<AVCTextStream>::paused(uint64_t a1)
{
  return AVCRTPSession<AVCTextStream>::paused(a1 - 24);
}

void AVCRTPSession<AVCTextStream>::pauseAVCSession(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v8, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"pauseAVCSession", 15);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v4 = (void *)MEMORY[0x1C878EAB0](v3);
  std::string::basic_string[abi:ne180100]<0>(v8, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v5 = ims::debug((uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Pausing session ", 16);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  [*(id *)(a1 + 488) pause];
}

void sub_1C5513928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *AVCRTPSession<AVCTextStream>::toTimerIdString@<X0>(int a1@<W1>, void *a2@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v2 = "AUDIO_SESSION_START";
      break;
    case 1:
      uint64_t v2 = "TEXT_SESSION_START";
      break;
    case 2:
      uint64_t v2 = "AUDIO_SESSION_STOP";
      break;
    case 3:
      uint64_t v2 = "TEXT_SESSION_STOP";
      break;
    default:
      ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()();
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void *non-virtual thunk to'AVCRTPSession<AVCTextStream>::toTimerIdString@<X0>(int a1@<W1>, void *a2@<X8>)
{
  return AVCRTPSession<AVCTextStream>::toTimerIdString(a1, a2);
}

void _GLOBAL__sub_I_AVCRTPSession_mm()
{
  uint64_t v0 = (void *)MEMORY[0x1C878EAB0]();
}

void MediaSessionQueue::initialize(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  uint64_t v8 = (std::__shared_weak_count *)a1[18];
  if (v8)
  {
    uint64_t v15 = std::__shared_weak_count::lock(v8);
    if (v15)
    {
      uint64_t v16 = a1[17];
      if (v16)
      {
        std::string::basic_string[abi:ne180100]<0>(v27, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v17 = ims::debug((uint64_t)v27, (uint64_t)__p);
        uint64_t v18 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v19 = strlen(v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)v18, v19);
        *(unsigned char *)(v17 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v17 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"initialize", 10);
        *(unsigned char *)(v17 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" [queuedInterface=", 18);
        *(unsigned char *)(v17 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v17 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" sessionId=", 11);
        *(unsigned char *)(v17 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v16 + 176))(v16);
        std::ostream::operator<<();
        *(unsigned char *)(v17 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v17 + 17) = 0;
        if (v26 < 0) {
          operator delete(__p[0]);
        }
        if (v28 < 0) {
          operator delete(v27[0]);
        }
        char v20 = (std::__shared_weak_count *)a7[1];
        uint64_t v23 = *a7;
        uint64_t v24 = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t *))(*(void *)v16 + 16))(v16, a2, a3, a4, a5, a6, &v23);
        if (v24) {
          std::__shared_weak_count::__release_weak(v24);
        }
LABEL_18:
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        return;
      }
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v21 = ims::warn((uint64_t)v27, (uint64_t)__p);
  size_t v22 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v22);
  *(unsigned char *)(v21 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v21 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"initialize", 10);
  *(unsigned char *)(v21 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(unsigned char *)(v21 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v21 + 17) = 0;
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v15) {
    goto LABEL_18;
  }
}

void sub_1C5513DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MediaSessionQueue::initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
}

uint64_t MediaSessionQueue::terminate(MediaSessionQueue *this, uint64_t a2)
{
  return 1;
}

uint64_t non-virtual thunk to'MediaSessionQueue::terminate(MediaSessionQueue *this)
{
  return 1;
}

uint64_t MediaSessionQueue::start(MediaSessionQueue *this)
{
  return 1;
}

uint64_t non-virtual thunk to'MediaSessionQueue::start(MediaSessionQueue *this)
{
  return 1;
}

uint64_t MediaSessionQueue::stop(MediaSessionQueue *this, uint64_t a2)
{
  return 1;
}

uint64_t non-virtual thunk to'MediaSessionQueue::stop(MediaSessionQueue *this)
{
  return 1;
}

uint64_t MediaSessionQueue::setDirection(_DWORD *a1, _DWORD *a2)
{
  a1[38] = *a2;
  (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 232))(a1, 4);
  return 1;
}

uint64_t non-virtual thunk to'MediaSessionQueue::setDirection(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(a1 - 24);
  *(_DWORD *)(a1 + 128) = *a2;
  (*(void (**)(void))(v2 + 232))();
  return 1;
}

double MediaSessionQueue::setConfiguration@<D0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[18];
  if (v5)
  {
    char v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[17];
      if (v9)
      {
        std::string::basic_string[abi:ne180100]<0>(v21, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v10 = ims::debug((uint64_t)v21, (uint64_t)__p);
        uint64_t v11 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v12 = strlen(v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)v11, v12);
        *(unsigned char *)(v10 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v10 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"setConfiguration", 16);
        *(unsigned char *)(v10 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" [sessionId=", 12);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v9 + 176))(v9);
        std::ostream::operator<<();
        *(unsigned char *)(v10 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v10 + 17) = 0;
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        if (v22 < 0) {
          operator delete(v21[0]);
        }
        uint64_t v13 = (std::__shared_weak_count *)a2[1];
        uint64_t v17 = *a2;
        uint64_t v18 = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 56))(v9, &v17);
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return result;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v21, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v15 = ims::warn((uint64_t)v21, (uint64_t)__p);
  size_t v16 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v16);
  *(unsigned char *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"setConfiguration", 16);
  *(unsigned char *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(unsigned char *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v15 + 17) = 0;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = 0x40000000;
  return result;
}

void sub_1C5514418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

double non-virtual thunk to'MediaSessionQueue::setConfiguration@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return MediaSessionQueue::setConfiguration((void *)(a1 - 24), a2, a3);
}

uint64_t MediaSessionQueue::configure(MediaSessionQueue *this, uint64_t a2)
{
  return 1;
}

uint64_t non-virtual thunk to'MediaSessionQueue::configure(MediaSessionQueue *this)
{
  return 1;
}

BOOL MediaSessionQueue::pop(MediaSessionQueue *this)
{
  std::string::basic_string[abi:ne180100]<0>(v30, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v30, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"pop", 3);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [actionQueueSize=", 18);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  uint64_t v6 = *((void *)this + 16);
  if (!v6) {
    return 0;
  }
  char v7 = (uint64_t *)*((void *)this + 15);
  int v8 = *((_DWORD *)v7 + 4);
  uint64_t v10 = v7[3];
  uint64_t v9 = (std::__shared_weak_count *)v7[4];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v7 = (uint64_t *)*((void *)this + 15);
    uint64_t v6 = *((void *)this + 16);
    uint64_t v11 = (std::__shared_weak_count *)v7[4];
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v13 = *v7;
  *(void *)(v13 + 8) = v7[1];
  *(void *)v7[1] = v13;
  *((void *)this + 1ims::StackConfig::~StackConfig(this + 6) = v6 - 1;
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(v7);
  if (v9)
  {
    uint64_t v14 = std::__shared_weak_count::lock(v9);
    if (v14)
    {
      uint64_t v15 = v14;
      if (v10)
      {
        switch(v8)
        {
          case 0:
            std::string::basic_string[abi:ne180100]<0>(v30, "rtp.queue");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v16 = ims::debug((uint64_t)v30, (uint64_t)__p);
            size_t v17 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v17);
            *(unsigned char *)(v16 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"::", 2);
            *(unsigned char *)(v16 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"pop", 3);
            *(unsigned char *)(v16 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" [sessionId=", 12);
            *(unsigned char *)(v16 + 17) = 0;
            (*(void (**)(uint64_t))(*(void *)v10 + 176))(v10);
            std::ostream::operator<<();
            *(unsigned char *)(v16 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"]", 1);
            *(unsigned char *)(v16 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v16 + 17) = 0;
            if (v29 < 0) {
              operator delete(__p[0]);
            }
            if (v31 < 0) {
              operator delete(v30[0]);
            }
            char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 64))(v10, 1);
            break;
          case 1:
            std::string::basic_string[abi:ne180100]<0>(v30, "rtp.queue");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v25 = ims::debug((uint64_t)v30, (uint64_t)__p);
            size_t v26 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v26);
            *(unsigned char *)(v25 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"::", 2);
            *(unsigned char *)(v25 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"pop", 3);
            *(unsigned char *)(v25 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)" [sessionId=", 12);
            *(unsigned char *)(v25 + 17) = 0;
            (*(void (**)(uint64_t))(*(void *)v10 + 176))(v10);
            std::ostream::operator<<();
            *(unsigned char *)(v25 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"]", 1);
            *(unsigned char *)(v25 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v25 + 17) = 0;
            if (v29 < 0) {
              operator delete(__p[0]);
            }
            if (v31 < 0) {
              operator delete(v30[0]);
            }
            char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 24))(v10, 1);
            break;
          case 2:
            std::string::basic_string[abi:ne180100]<0>(v30, "rtp.queue");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v21 = ims::debug((uint64_t)v30, (uint64_t)__p);
            size_t v22 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v22);
            *(unsigned char *)(v21 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"::", 2);
            *(unsigned char *)(v21 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"pop", 3);
            *(unsigned char *)(v21 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)" [sessionId=", 12);
            *(unsigned char *)(v21 + 17) = 0;
            (*(void (**)(uint64_t))(*(void *)v10 + 176))(v10);
            std::ostream::operator<<();
            *(unsigned char *)(v21 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"]", 1);
            *(unsigned char *)(v21 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v21 + 17) = 0;
            if (v29 < 0) {
              operator delete(__p[0]);
            }
            if (v31 < 0) {
              operator delete(v30[0]);
            }
            char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 1);
            break;
          case 3:
            std::string::basic_string[abi:ne180100]<0>(v30, "rtp.queue");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v23 = ims::debug((uint64_t)v30, (uint64_t)__p);
            size_t v24 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v24);
            *(unsigned char *)(v23 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"::", 2);
            *(unsigned char *)(v23 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"pop", 3);
            *(unsigned char *)(v23 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" [sessionId=", 12);
            *(unsigned char *)(v23 + 17) = 0;
            (*(void (**)(uint64_t))(*(void *)v10 + 176))(v10);
            std::ostream::operator<<();
            *(unsigned char *)(v23 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"]", 1);
            *(unsigned char *)(v23 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v23 + 17) = 0;
            if (v29 < 0) {
              operator delete(__p[0]);
            }
            if (v31 < 0) {
              operator delete(v30[0]);
            }
            char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, 1);
            break;
          case 4:
            std::string::basic_string[abi:ne180100]<0>(v30, "rtp.queue");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v19 = ims::debug((uint64_t)v30, (uint64_t)__p);
            size_t v20 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v20);
            *(unsigned char *)(v19 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"::", 2);
            *(unsigned char *)(v19 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"pop", 3);
            *(unsigned char *)(v19 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" [sessionId=", 12);
            *(unsigned char *)(v19 + 17) = 0;
            (*(void (**)(uint64_t))(*(void *)v10 + 176))(v10);
            std::ostream::operator<<();
            *(unsigned char *)(v19 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"]", 1);
            *(unsigned char *)(v19 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v19 + 17) = 0;
            if (v29 < 0) {
              operator delete(__p[0]);
            }
            if (v31 < 0) {
              operator delete(v30[0]);
            }
            char v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)v10 + 48))(v10, (char *)this + 152, 1);
            break;
          default:
            goto LABEL_44;
        }
        if ((v18 & 1) == 0)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          BOOL v12 = 0;
          goto LABEL_46;
        }
      }
LABEL_44:
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    BOOL v12 = *((void *)this + 16) != 0;
LABEL_46:
    std::__shared_weak_count::__release_weak(v9);
    return v12;
  }
  return *((void *)this + 16) != 0;
}

void sub_1C5514F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueue::flush(MediaSessionQueue *this)
{
  std::string::basic_string[abi:ne180100]<0>(v9, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v9, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"flush", 5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [actionQueueSize=", 18);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  do
    uint64_t result = (*(uint64_t (**)(MediaSessionQueue *))(*(void *)this + 184))(this);
  while ((result & 1) != 0);
  return result;
}

void sub_1C55151D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionQueue::clear(MediaSessionQueue *this)
{
  std::string::basic_string[abi:ne180100]<0>(v8, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v8, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"clear", 5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [actionQueueSize=", 18);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::__list_imp<std::pair<MediaSessionQueue::Action,std::weak_ptr<MediaSessionInterface>>>::clear((uint64_t *)this + 14);
}

void sub_1C5515384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueue::contains(void *a1, unsigned int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[18];
  if (!v3) {
    return 0;
  }
  size_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = a1[17];
  if (!v7 || (uint64_t v8 = a1[15], (void *)v8 == a1 + 14))
  {
LABEL_13:
    uint64_t v14 = 0;
    goto LABEL_14;
  }
  while (1)
  {
    char v9 = *(std::__shared_weak_count **)(v8 + 32);
    if (v9) {
      break;
    }
LABEL_12:
    uint64_t v8 = *(void *)(v8 + 8);
    if ((void *)v8 == a1 + 14) {
      goto LABEL_13;
    }
  }
  uint64_t v10 = *(void *)(v8 + 24);
  int v11 = *(_DWORD *)(v8 + 16);
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (v11 != a2 || (BOOL v12 = std::__shared_weak_count::lock(v9)) == 0)
  {
LABEL_11:
    std::__shared_weak_count::__release_weak(v9);
    goto LABEL_12;
  }
  uint64_t v13 = v12;
  if (!v10 || v7 != v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    goto LABEL_11;
  }
  std::string::basic_string[abi:ne180100]<0>(v26, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(v24, "");
  uint64_t v16 = ims::debug((uint64_t)v26, (uint64_t)v24);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v17 = v16;
  char v18 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v19 = *(void **)(v16 + 8);
  size_t v20 = strlen(v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v18, v20);
  *(unsigned char *)(v17 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v17 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"contains", 8);
  *(unsigned char *)(v17 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Found [action=", 14);
  *(unsigned char *)(v17 + 17) = 0;
  if (a2 > 3) {
    uint64_t v21 = "setDirection";
  }
  else {
    uint64_t v21 = off_1E6511920[a2];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v21);
  (*(void (**)(uint64_t, void **))(*(void *)v17 + 32))(v17, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" sessionId=", 11);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 176))(v7);
  std::ostream::operator<<();
  *(unsigned char *)(v17 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  std::__shared_weak_count::__release_weak(v9);
  uint64_t v14 = 1;
LABEL_14:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v14;
}

void sub_1C55156A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  std::__shared_weak_count::__release_weak(v28);
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

void MediaSessionQueue::queueAction(void *a1, uint64_t a2, int a3)
{
  size_t v5 = (std::__shared_weak_count *)a1[18];
  if (v5)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      uint64_t v8 = a1[17];
      if (v8)
      {
        std::string::basic_string[abi:ne180100]<0>(v37, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(v35, "");
        uint64_t v9 = ims::debug((uint64_t)v37, (uint64_t)v35);
        size_t v10 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v10);
        *(unsigned char *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"queueAction", 11);
        *(unsigned char *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" [action=", 9);
        *(unsigned char *)(v9 + 17) = 0;
        if (a2 > 3) {
          int v11 = "setDirection";
        }
        else {
          int v11 = off_1E6511920[(int)a2];
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v11);
        (*(void (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, __p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" sessionId=", 11);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v8 + 176))(v8);
        std::ostream::operator<<();
        *(unsigned char *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" actionQueueSize=", 17);
        *(unsigned char *)(v9 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v9 + 17) = 0;
        if (v34 < 0) {
          operator delete(__p[0]);
        }
        if (v36 < 0) {
          operator delete(v35[0]);
        }
        if (v38 < 0) {
          operator delete(v37[0]);
        }
        if (a1[16] && (*(unsigned int (**)(void *, uint64_t))(*a1 + 208))(a1, 1))
        {
          std::string::basic_string[abi:ne180100]<0>(v37, "rtp.queue");
          std::string::basic_string[abi:ne180100]<0>(v35, "");
          uint64_t v16 = ims::debug((uint64_t)v37, (uint64_t)v35);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Not queuing request for terminated sessionId=", 45);
          *(unsigned char *)(v16 + 17) = 0;
          (*(void (**)(uint64_t))(*(void *)v8 + 176))(v8);
          std::ostream::operator<<();
          *(unsigned char *)(v16 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v16 + 17) = 0;
          if (v36 < 0) {
            operator delete(v35[0]);
          }
          if (v38 < 0) {
            operator delete(v37[0]);
          }
          goto LABEL_57;
        }
        uint64_t v17 = (uint64_t)(a1 + 14);
        if ((a2 & 0xFFFFFFFE) == 2)
        {
          if (a2 == 2) {
            int v18 = 3;
          }
          else {
            int v18 = 2;
          }
          for (uint64_t i = a1[15]; i != v17; uint64_t i = *(void *)(i + 8))
          {
            if (*(_DWORD *)(i + 16) == v18)
            {
              size_t v20 = *(std::__shared_weak_count **)(i + 32);
              if (v20)
              {
                uint64_t v21 = std::__shared_weak_count::lock(v20);
                if (v21)
                {
                  size_t v22 = v21;
                  uint64_t v23 = *(void *)(i + 24);
                  if (v23 && v8 == v23)
                  {
                    std::string::basic_string[abi:ne180100]<0>(v37, "rtp.queue");
                    std::string::basic_string[abi:ne180100]<0>(v35, "");
                    uint64_t v31 = ims::debug((uint64_t)v37, (uint64_t)v35);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"Complementary action found and removed instead of inserting new action [action=", 79);
                    *(unsigned char *)(v31 + 17) = 0;
                    if (a2 > 3) {
                      uint64_t v32 = "setDirection";
                    }
                    else {
                      uint64_t v32 = off_1E6511920[(int)a2];
                    }
                    std::string::basic_string[abi:ne180100]<0>(__p, v32);
                    (*(void (**)(uint64_t, void **))(*(void *)v31 + 32))(v31, __p);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)" sessionId=", 11);
                    *(unsigned char *)(v31 + 17) = 0;
                    (*(void (**)(uint64_t))(*(void *)v8 + 176))(v8);
                    std::ostream::operator<<();
                    *(unsigned char *)(v31 + 17) = 0;
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"]", 1);
                    *(unsigned char *)(v31 + 17) = 0;
                    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(unsigned char *)(v31 + 17) = 0;
                    if (v34 < 0) {
                      operator delete(__p[0]);
                    }
                    if (v36 < 0) {
                      operator delete(v35[0]);
                    }
                    if (v38 < 0) {
                      operator delete(v37[0]);
                    }
                    std::list<std::pair<MediaSessionQueue::Action,std::weak_ptr<MediaSessionInterface>>>::erase(v17, (uint64_t *)i);
                    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
                    goto LABEL_57;
                  }
                  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
                }
              }
            }
          }
        }
        if (((*(uint64_t (**)(void *, uint64_t))(*a1 + 208))(a1, a2) & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(v37, "rtp.queue");
          std::string::basic_string[abi:ne180100]<0>(v35, "");
          uint64_t v24 = ims::info((uint64_t)v37, (uint64_t)v35);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"Adding [action=", 15);
          *(unsigned char *)(v24 + 17) = 0;
          if (a2 > 3) {
            char v25 = "setDirection";
          }
          else {
            char v25 = off_1E6511920[(int)a2];
          }
          std::string::basic_string[abi:ne180100]<0>(__p, v25);
          (*(void (**)(uint64_t, void **))(*(void *)v24 + 32))(v24, __p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" sessionId=", 11);
          *(unsigned char *)(v24 + 17) = 0;
          (*(void (**)(uint64_t))(*(void *)v8 + 176))(v8);
          std::ostream::operator<<();
          *(unsigned char *)(v24 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"]", 1);
          *(unsigned char *)(v24 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v24 + 17) = 0;
          if (v34 < 0) {
            operator delete(__p[0]);
          }
          if (v36 < 0) {
            operator delete(v35[0]);
          }
          if (v38 < 0) {
            operator delete(v37[0]);
          }
          atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (a3)
          {
            size_t v26 = operator new(0x28uLL);
            v26[4] = a2;
            *((void *)v26 + IMSCallOptions::~IMSCallOptions(this + 3) = v8;
            *((void *)v26 + 4) = v7;
            char v27 = (void *)a1[15];
            *(void *)size_t v26 = v17;
            *((void *)v26 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v27;
            *char v27 = v26;
            uint64_t v28 = a1[16] + 1;
            a1[15] = v26;
            a1[16] = v28;
            goto LABEL_57;
          }
          char v29 = operator new(0x28uLL);
          v29[4] = a2;
          *((void *)v29 + IMSCallOptions::~IMSCallOptions(this + 3) = v8;
          *((void *)v29 + 4) = v7;
          uint64_t v30 = a1[14];
          *(void *)char v29 = v30;
          *((void *)v29 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v17;
          *(void *)(v30 + 8) = v29;
          a1[14] = v29;
          ++a1[16];
        }
LABEL_15:
        if (!v7) {
          return;
        }
LABEL_57:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(v35, "");
  uint64_t v12 = ims::warn((uint64_t)v37, (uint64_t)v35);
  uint64_t v13 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  size_t v14 = strlen(v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)v13, v14);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"queueAction", 11);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" [action=", 9);
  *(unsigned char *)(v12 + 17) = 0;
  if (a2 > 3) {
    uint64_t v15 = "setDirection";
  }
  else {
    uint64_t v15 = off_1E6511920[(int)a2];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v15);
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 32))(v12, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" queuedInterface=0x0]", 21);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  if ((v38 & 0x80000000) == 0) {
    goto LABEL_15;
  }
  operator delete(v37[0]);
  if (v7) {
    goto LABEL_57;
  }
}

void sub_1C5516040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(a1);
}

void std::list<std::pair<MediaSessionQueue::Action,std::weak_ptr<MediaSessionInterface>>>::erase(uint64_t a1, uint64_t *__p)
{
  uint64_t v3 = *__p;
  *(void *)(v3 + 8) = __p[1];
  *(void *)__p[1] = v3;
  --*(void *)(a1 + 16);
  uint64_t v4 = (std::__shared_weak_count *)__p[4];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(__p);
}

void MediaSessionQueue::setQueuedInterface(void *a1, uint64_t *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[18];
  if (v4)
  {
    size_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = a1[17];
      if (v7)
      {
        std::string::basic_string[abi:ne180100]<0>(v21, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v8 = ims::debug((uint64_t)v21, (uint64_t)__p);
        size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"setQueuedInterface", 18);
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [oldQueuedInterfaceSessionId=", 30);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v7 + 176))(v7);
        std::ostream::operator<<();
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        if (v22 < 0) {
          operator delete(v21[0]);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  size_t v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
    int v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *a2;
      if (*a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v21, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v14 = ims::debug((uint64_t)v21, (uint64_t)__p);
        size_t v15 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v15);
        *(unsigned char *)(v14 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v14 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"setQueuedInterface", 18);
        *(unsigned char *)(v14 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" [newQueuedInterfaceSessionId=", 30);
        *(unsigned char *)(v14 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v13 + 176))(v13);
        std::ostream::operator<<();
        *(unsigned char *)(v14 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v14 + 17) = 0;
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        if (v22 < 0) {
          operator delete(v21[0]);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    uint64_t v16 = *a2;
    uint64_t v17 = a2[1];
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 16), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v16 = *a2;
  }
  int v18 = (std::__shared_weak_count *)a1[18];
  a1[17] = v16;
  a1[18] = v17;
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
}

void sub_1C5516564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueue::sessionId(MediaSessionQueue *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 17);
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v15, (uint64_t)__p);
        uint64_t v7 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v8 = strlen(v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"sessionId", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v5 + 176))(v5);
        std::ostream::operator<<();
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 176))(v5);
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return v9;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v10 = ims::warn((uint64_t)v15, (uint64_t)__p);
  size_t v11 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"sessionId", 9);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return 0;
}

void sub_1C55168C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'MediaSessionQueue::sessionId(MediaSessionQueue *this)
{
  return MediaSessionQueue::sessionId((MediaSessionQueue *)((char *)this - 24));
}

void MediaSessionQueue::clearDelegate(MediaSessionQueue *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *((void *)this + 17);
      if (v4)
      {
        std::string::basic_string[abi:ne180100]<0>(v13, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v5 = ims::debug((uint64_t)v13, (uint64_t)__p);
        uint64_t v6 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v7 = strlen(v6);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)v6, v7);
        *(unsigned char *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"clearDelegate", 13);
        *(unsigned char *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
        *(unsigned char *)(v5 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v4 + 176))(v4);
        std::ostream::operator<<();
        *(unsigned char *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v5 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v5 + 17) = 0;
        if (v12 < 0) {
          operator delete(__p[0]);
        }
        if (v14 < 0) {
          operator delete(v13[0]);
        }
        (*(void (**)(uint64_t))(*(void *)v4 + 168))(v4);
LABEL_15:
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
        return;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::warn((uint64_t)v13, (uint64_t)__p);
  uint64_t v9 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  size_t v10 = strlen(v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)v9, v10);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"clearDelegate", 13);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v3) {
    goto LABEL_15;
  }
}

void sub_1C5516C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MediaSessionQueue::clearDelegate(MediaSessionQueue *this)
{
}

void MediaSessionQueue::setDelegate(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[18];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = a1[17];
      if (v6)
      {
        std::string::basic_string[abi:ne180100]<0>(v17, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v7 = ims::debug((uint64_t)v17, (uint64_t)__p);
        uint64_t v8 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v9 = strlen(v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)v8, v9);
        *(unsigned char *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"setDelegate", 11);
        *(unsigned char *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
        *(unsigned char *)(v7 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v6 + 176))(v6);
        std::ostream::operator<<();
        *(unsigned char *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v7 + 17) = 0;
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        if (v18 < 0) {
          operator delete(v17[0]);
        }
        size_t v10 = (std::__shared_weak_count *)a2[1];
        uint64_t v13 = *a2;
        char v14 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 160))(v6, &v13);
        if (v14) {
          std::__shared_weak_count::__release_weak(v14);
        }
LABEL_18:
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        return;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::warn((uint64_t)v17, (uint64_t)__p);
  size_t v12 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v12);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"setDelegate", 11);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v5) {
    goto LABEL_18;
  }
}

void sub_1C5516FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MediaSessionQueue::setDelegate(uint64_t a1, uint64_t *a2)
{
}

void MediaSessionQueue::delegate(MediaSessionQueue *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 17);
      if (v7)
      {
        std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v8 = ims::debug((uint64_t)v15, (uint64_t)__p);
        size_t v9 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v10 = strlen(v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)v9, v10);
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"delegate", 8);
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v7 + 176))(v7);
        std::ostream::operator<<();
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        (*(void (**)(uint64_t))(*(void *)v7 + 152))(v7);
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        return;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::warn((uint64_t)v15, (uint64_t)__p);
  size_t v12 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v12);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"delegate", 8);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  *a2 = 0;
  a2[1] = 0;
}

void sub_1C55173A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MediaSessionQueue::delegate(MediaSessionQueue *this@<X0>, void *a2@<X8>)
{
}

double MediaSessionQueue::sendDTMFDigits@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[18];
  if (v5)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[17];
      if (v9)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v10 = ims::debug((uint64_t)v18, (uint64_t)__p);
        uint64_t v11 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v12 = strlen(v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)v11, v12);
        *(unsigned char *)(v10 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v10 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"sendDTMFDigits", 14);
        *(unsigned char *)(v10 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v9 + 176))(v9);
        std::ostream::operator<<();
        *(unsigned char *)(v10 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v10 + 17) = 0;
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 144))(v9, a2);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return result;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v14 = ims::warn((uint64_t)v18, (uint64_t)__p);
  size_t v15 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v15);
  *(unsigned char *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"sendDTMFDigits", 14);
  *(unsigned char *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = 1073741836;
  return result;
}

void sub_1C5517778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

double non-virtual thunk to'MediaSessionQueue::sendDTMFDigits@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MediaSessionQueue::sendDTMFDigits((void *)(a1 - 24), a2, a3);
}

double MediaSessionQueue::stopSendingDTMF@<D0>(MediaSessionQueue *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 17);
      if (v7)
      {
        std::string::basic_string[abi:ne180100]<0>(v16, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v8 = ims::debug((uint64_t)v16, (uint64_t)__p);
        uint64_t v9 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v10 = strlen(v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)v9, v10);
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"stopSendingDTMF", 15);
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v7 + 176))(v7);
        std::ostream::operator<<();
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        if (v17 < 0) {
          operator delete(v16[0]);
        }
        (*(void (**)(uint64_t))(*(void *)v7 + 136))(v7);
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        return result;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v12 = ims::warn((uint64_t)v16, (uint64_t)__p);
  size_t v13 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v13);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"stopSendingDTMF", 15);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a2 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 1ims::StackConfig::~StackConfig(this + 6) = 1073741836;
  return result;
}

void sub_1C5517B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

double non-virtual thunk to'MediaSessionQueue::stopSendingDTMF@<D0>(MediaSessionQueue *this@<X0>, uint64_t a2@<X8>)
{
  return MediaSessionQueue::stopSendingDTMF((MediaSessionQueue *)((char *)this - 24), a2);
}

double MediaSessionQueue::startSendingDTMF@<D0>(MediaSessionQueue *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v5)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *((void *)this + 17);
      if (v9)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v10 = ims::debug((uint64_t)v18, (uint64_t)__p);
        uint64_t v11 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v12 = strlen(v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)v11, v12);
        *(unsigned char *)(v10 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v10 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"startSendingDTMF", 16);
        *(unsigned char *)(v10 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v9 + 176))(v9);
        std::ostream::operator<<();
        *(unsigned char *)(v10 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v10 + 17) = 0;
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 128))(v9, a2);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return result;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v14 = ims::warn((uint64_t)v18, (uint64_t)__p);
  size_t v15 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v15);
  *(unsigned char *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"startSendingDTMF", 16);
  *(unsigned char *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = 1073741836;
  return result;
}

void sub_1C5517F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

double non-virtual thunk to'MediaSessionQueue::startSendingDTMF@<D0>(MediaSessionQueue *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MediaSessionQueue::startSendingDTMF((MediaSessionQueue *)((char *)this - 24), a2, a3);
}

uint64_t MediaSessionQueue::mediaSupportEnabled(void *a1, uint64_t a2)
{
  if (a2 == 2) {
    return 1;
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[18];
  if (v4)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[17];
      if (v8)
      {
        std::string::basic_string[abi:ne180100]<0>(v17, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v9 = ims::debug((uint64_t)v17, (uint64_t)__p);
        uint64_t v10 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v11 = strlen(v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)v10, v11);
        *(unsigned char *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"mediaSupportEnabled", 19);
        *(unsigned char *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v8 + 176))(v8);
        std::ostream::operator<<();
        *(unsigned char *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v9 + 17) = 0;
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        if (v18 < 0) {
          operator delete(v17[0]);
        }
        uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 112))(v8, a2);
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return v2;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v12 = ims::warn((uint64_t)v17, (uint64_t)__p);
  size_t v13 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v13);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"mediaSupportEnabled", 19);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  return 0;
}

void sub_1C55182BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'MediaSessionQueue::mediaSupportEnabled(uint64_t a1, uint64_t a2)
{
  return MediaSessionQueue::mediaSupportEnabled((void *)(a1 - 24), a2);
}

uint64_t MediaSessionQueue::mediaType(MediaSessionQueue *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 17);
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v15, (uint64_t)__p);
        uint64_t v7 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v8 = strlen(v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"mediaType", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v5 + 176))(v5);
        std::ostream::operator<<();
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5);
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return v9;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v10 = ims::warn((uint64_t)v15, (uint64_t)__p);
  size_t v11 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"mediaType", 9);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return 2;
}

void sub_1C5518648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'MediaSessionQueue::mediaType(MediaSessionQueue *this)
{
  return MediaSessionQueue::mediaType((MediaSessionQueue *)((char *)this - 24));
}

uint64_t MediaSessionQueue::direction(MediaSessionQueue *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 17);
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v15, (uint64_t)__p);
        uint64_t v7 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v8 = strlen(v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"direction", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v5 + 176))(v5);
        std::ostream::operator<<();
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return v9;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v10 = ims::warn((uint64_t)v15, (uint64_t)__p);
  size_t v11 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"direction", 9);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return 4;
}

void sub_1C55189D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'MediaSessionQueue::direction(MediaSessionQueue *this)
{
  return MediaSessionQueue::direction((MediaSessionQueue *)((char *)this - 24));
}

uint64_t MediaSessionQueue::active(MediaSessionQueue *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 17);
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v15, (uint64_t)__p);
        uint64_t v7 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v8 = strlen(v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"active", 6);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v5 + 176))(v5);
        std::ostream::operator<<();
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 80))(v5);
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return v9;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v10 = ims::warn((uint64_t)v15, (uint64_t)__p);
  size_t v11 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"active", 6);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return 0;
}

void sub_1C5518D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'MediaSessionQueue::active(MediaSessionQueue *this)
{
  return MediaSessionQueue::active((MediaSessionQueue *)((char *)this - 24));
}

uint64_t MediaSessionQueue::transactionPending(MediaSessionQueue *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 17);
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v15, (uint64_t)__p);
        uint64_t v7 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v8 = strlen(v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"transactionPending", 18);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v5 + 176))(v5);
        std::ostream::operator<<();
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 72))(v5);
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return v9;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v10 = ims::warn((uint64_t)v15, (uint64_t)__p);
  size_t v11 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"transactionPending", 18);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return 0;
}

void sub_1C55190EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'MediaSessionQueue::transactionPending(MediaSessionQueue *this)
{
  return MediaSessionQueue::transactionPending((MediaSessionQueue *)((char *)this - 24));
}

uint64_t MediaSessionQueue::paused(MediaSessionQueue *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 17);
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v15, (uint64_t)__p);
        uint64_t v7 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v8 = strlen(v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"paused", 6);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v5 + 176))(v5);
        std::ostream::operator<<();
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 88))(v5);
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return v9;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v10 = ims::warn((uint64_t)v15, (uint64_t)__p);
  size_t v11 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"paused", 6);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return 0;
}

void sub_1C5519478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'MediaSessionQueue::paused(MediaSessionQueue *this)
{
  return MediaSessionQueue::paused((MediaSessionQueue *)((char *)this - 24));
}

uint64_t MediaSessionQueue::canChangeMediaStack(MediaSessionQueue *this)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v3 && (uint64_t v4 = std::__shared_weak_count::lock(v3)) != 0)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *((void *)this + 17);
    if (v6) {
      char v1 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 184))(v6);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    char v7 = (v6 == 0) | v1;
  }
  else
  {
    char v7 = 1;
  }
  return v7 & 1;
}

void sub_1C55195C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MediaSessionQueue::~MediaSessionQueue(MediaSessionQueue *this)
{
}

{
  uint64_t vars8;

  MediaSessionQueue::~MediaSessionQueue((MediaSessionQueue *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

uint64_t non-virtual thunk to'MediaSessionQueue::canChangeMediaStack(MediaSessionQueue *this)
{
  return MediaSessionQueue::canChangeMediaStack((MediaSessionQueue *)((char *)this - 24));
}

uint64_t SipConferenceEventPackage::handleNotification(SipConferenceEventPackage *this, const SipRequest *a2, SipResponse *a3)
{
  uint64_t v4 = (const void *)*((void *)a2 + 9);
  if (v4
  {
    char v7 = v6;
    size_t v8 = (std::__shared_weak_count *)*((void *)this + 5);
    if (v8)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        uint64_t v10 = *((void *)this + 4);
        if (v10)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, (uint64_t)v7 + 32);
          char v34 = 0;
          uint64_t v35 = 0;
          uint64_t v36 = 0;
          (*(void (**)(void *, void ***))(*(void *)v7 + 56))(v7, &v34);
          uint64_t v33 = 0;
          long long v31 = 0u;
          memset(v32, 0, sizeof(v32));
          *(_OWORD *)char v29 = 0u;
          long long v30 = 0u;
          memset(v28, 0, sizeof(v28));
          *(_OWORD *)char v27 = 0u;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v27);
          size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Content-Type", 12);
          uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
          if (byte_1EBBDB297 >= 0) {
            size_t v13 = &SipConferenceInfoBody::kContentType;
          }
          else {
            size_t v13 = (uint64_t *)SipConferenceInfoBody::kContentType;
          }
          if (byte_1EBBDB297 >= 0) {
            uint64_t v14 = byte_1EBBDB297;
          }
          else {
            uint64_t v14 = unk_1EBBDB288;
          }
          size_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
          char v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\r\n\r\n", 4);
          if (v36 >= 0) {
            char v17 = (void **)&v34;
          }
          else {
            char v17 = v34;
          }
          if (v36 >= 0) {
            uint64_t v18 = HIBYTE(v36);
          }
          else {
            uint64_t v18 = v35;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
          char v19 = (char *)SipMessage::header<SipFromHeader>((uint64_t)a2);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v28 + 8, __p);
          if (v19) {
            char v20 = v19 + 104;
          }
          else {
            char v20 = 0;
          }
          (*(void (**)(uint64_t, char *, void **))(*(void *)v10 + 24))(v10, v20, __p);
          if (v26 < 0) {
            operator delete(__p[0]);
          }
          v27[0] = *(void **)MEMORY[0x1E4FBA408];
          uint64_t v21 = *(void *)(MEMORY[0x1E4FBA408] + 72);
          *(void **)((char *)v27 + *((void *)v27[0] - 3)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
          *(void *)&v28[0] = v21;
          *((void *)&v28[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
          if (SHIBYTE(v30) < 0) {
            operator delete(v29[1]);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1C878E270](v32);
          if (SHIBYTE(v36) < 0) {
            operator delete(v34);
          }
LABEL_37:
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          return 1;
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(v27, "sip.conf");
    std::string::basic_string[abi:ne180100]<0>(&v34, "");
    uint64_t v23 = ims::debug((uint64_t)v27, (uint64_t)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"No conference call to handle notification", 41);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v23 + 17) = 0;
    if (SHIBYTE(v36) < 0) {
      operator delete(v34);
    }
    if (SBYTE7(v28[0]) < 0) {
      operator delete(v27[0]);
    }
    if (v9) {
      goto LABEL_37;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "sip.conf");
    std::string::basic_string[abi:ne180100]<0>(&v34, "");
    uint64_t v22 = ims::warn((uint64_t)v27, (uint64_t)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Missing body in conference event", 32);
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v22 + 17) = 0;
    if (SHIBYTE(v36) < 0) {
      operator delete(v34);
    }
    if (SBYTE7(v28[0]) < 0) {
      operator delete(v27[0]);
    }
  }
  return 1;
}

void sub_1C5519AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  if (*(char *)(v22 - 57) < 0) {
    operator delete(*(void **)(v22 - 80));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

uint64_t SipConferenceEventPackage::desiredExpirationInterval(SipConferenceEventPackage *this)
{
  return 3600;
}

void SipConferenceEventPackage::handleSubscriptionFailed(SipConferenceEventPackage *this, ImsResult *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *((void *)this + 4);
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5519C20(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipConferenceEventPackage::handleSubscriptionSuccess(SipConferenceEventPackage *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 4);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5519CB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipConferenceEventPackage::acceptedContentTypes(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[1];
  if (v3 >= a2[2])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (long long *)&SipConferenceInfoBody::kContentType);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, (long long *)&SipConferenceInfoBody::kContentType);
    uint64_t result = v3 + 24;
  }
  a2[1] = result;
  return result;
}

uint64_t SipConferenceEventPackage::determineIncomingMessageCategory(SipConferenceEventPackage *this, const SipRequest *a2)
{
  if (*((unsigned char *)this + 48)) {
    return 3;
  }
  else {
    return 2;
  }
}

void SipConferenceEventPackage::~SipConferenceEventPackage(SipConferenceEventPackage *this)
{
  *(void *)this = &unk_1F20D83E0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  SipEventPackage::~SipEventPackage(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20D83E0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  SipEventPackage::~SipEventPackage(this);
  JUMPOUT(0x1C878E320);
}

const char *SipConferenceEventPackage::name(SipConferenceEventPackage *this)
{
  return "conference";
}

unsigned __int8 *SipReason::SipReason(unsigned __int8 *a1, const std::string *a2, int a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *((void *)a1 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20B37B0;
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 4) = a1 + 40;
  char v7 = (uint64_t **)(a1 + 32);
  *((void *)a1 + ims::StackConfig::~StackConfig(this + 6) = 0;
  *((_WORD *)a1 + 28) = 256;
  std::string::operator=((std::string *)a1, a2);
  if (!a3)
  {
    uint64_t v8 = a1[23];
    uint64_t v9 = (v8 & 0x80u) == 0 ? a1[23] : *((void *)a1 + 1);
    if (v9 == 5)
    {
      if ((v8 & 0x80) != 0)
      {
        memcmp(*(const void **)a1, "Q.850", *((void *)a1 + 1));
      }
      else if (a1[23])
      {
        uint64_t v10 = "Q.850";
        size_t v11 = a1;
        do
        {
          if (*v11 != *(unsigned __int8 *)v10) {
            break;
          }
          ++v11;
          ++v10;
          --v8;
        }
        while (v8);
      }
    }
  }
  uint64_t v24 = 0;
  long long v22 = 0u;
  memset(v23, 0, sizeof(v23));
  *(_OWORD *)char v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  memset(__str, 0, sizeof(__str));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__str);
  std::ostream::operator<<();
  std::string::basic_string[abi:ne180100]<0>(v25, "cause");
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__str[8], &__p);
  char v27 = v25;
  uint64_t v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, v25, (uint64_t)&std::piecewise_construct, (long long **)&v27);
  std::string::operator=((std::string *)(v12 + 7), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  *(void *)std::string __str = *MEMORY[0x1E4FBA418];
  *(void *)&__str[*(void *)(*(void *)__str - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&__str[8] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C878E270](v23);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::size_type v13 = *(void *)(a4 + 8);
    if (!v13) {
      return a1;
    }
    memset(&__p, 0, sizeof(__p));
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, v13);
  }
  else
  {
    if (!*(unsigned char *)(a4 + 23)) {
      return a1;
    }
    std::string __p = *(std::string *)a4;
  }
  ims::addQuotes((uint64_t)&__p, 1);
  memset(__str, 0, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)std::string __str = __p;
  }
  ims::addQuotes((uint64_t)__str, 1);
  std::string::basic_string[abi:ne180100]<0>(v25, "text");
  char v27 = v25;
  uint64_t v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, v25, (uint64_t)&std::piecewise_construct, (long long **)&v27);
  std::string::operator=((std::string *)(v14 + 7), (const std::string *)__str);
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C551A194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)(v21 + 24) = v22;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v23, *(void **)(v21 + 40));
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(a1);
}

uint64_t SipReason::rankForProtocol(unsigned __int8 *a1)
{
  uint64_t v1 = a1[23];
  size_t v2 = *((void *)a1 + 1);
  if ((v1 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  if (v3 == 5)
  {
    if ((v1 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a1, "Q.850", v2)) {
        return 2;
      }
    }
    else if (a1[23])
    {
      for (uint64_t i = "Q.850"; *a1 == *(unsigned __int8 *)i; ++i)
      {
        ++a1;
        if (!--v1) {
          return 1;
        }
      }
      return 2;
    }
    return 1;
  }
  if (v3 != 3) {
    return 2;
  }
  if ((v1 & 0x80) == 0)
  {
    if (!a1[23]) {
      return 0;
    }
    for (uint64_t j = &SipReason::kProtocolSip;
          *a1 == j->__r_.__value_.__s.__data_[0];
          uint64_t j = (std::string *)((char *)j + 1))
    {
      ++a1;
      if (!--v1) {
        return 0;
      }
    }
    return 2;
  }
  uint64_t result = memcmp(*(const void **)a1, &SipReason::kProtocolSip, v2);
  if (result) {
    return 2;
  }
  return result;
}

unint64_t SipReason::cause(SipReason *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "cause");
  size_t v2 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 32, __p);
  if ((void **)((char *)this + 40) == v2) {
    uint64_t v3 = &ims::kEmptyString;
  }
  else {
    uint64_t v3 = (long long *)(v2 + 7);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)v3 + 23)) {
      return 0;
    }
    return strtoul((const char *)v3, 0, 10);
  }
  if (*((void *)v3 + 1))
  {
    uint64_t v3 = *(long long **)v3;
    return strtoul((const char *)v3, 0, 10);
  }
  return 0;
}

void sub_1C551A3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double SipReason::text@<D0>(SipReason *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "text");
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 32, __p);
  if ((void **)((char *)this + 40) == v4) {
    uint64_t v5 = &ims::kEmptyString;
  }
  else {
    uint64_t v5 = (long long *)(v4 + 7);
  }
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *((void *)v5 + 1));
  }
  else
  {
    long long v6 = *v5;
    a2->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return ims::removeQuotes((uint64_t)a2);
}

void sub_1C551A494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void SipReasonHeader::addReason()
{
}

void sub_1C551A544(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B2C406DDFD988);
  _Unwind_Resume(a1);
}

void SipVectorHeader<SipReason *>::addItem(void *a1, void *a2)
{
  unint64_t v6 = a1[10];
  uint64_t v4 = (uint64_t)(a1 + 10);
  unint64_t v5 = v6;
  char v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    char v9 = (void **)(v4 - 16);
    uint64_t v10 = *(void *)(v4 - 16);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<SipReason *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v4, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    char v16 = &v15[8 * v11];
    char v17 = &v15[8 * v14];
    *(void *)char v16 = *a2;
    uint64_t v8 = v16 + 8;
    long long v19 = (char *)a1[8];
    long long v18 = (char *)a1[9];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      long long v18 = (char *)*v9;
    }
    a1[8] = v16;
    a1[9] = v8;
    a1[10] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *char v7 = *a2;
    uint64_t v8 = v7 + 1;
  }
  a1[9] = v8;
}

void SipReasonHeader::addReason(SipReasonHeader *this, const SipReason *a2)
{
}

void sub_1C551A718(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B2C406DDFD988);
  _Unwind_Resume(a1);
}

unsigned __int8 *SipReasonHeader::bestReason(SipReasonHeader *this)
{
  uint64_t v1 = *((void *)this + 8);
  uint64_t v2 = *((void *)this + 9);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = v1 + 8;
  int v5 = 0xFFFF;
  do
  {
    unint64_t v6 = *(unsigned __int8 **)(v4 - 8);
    int v7 = SipReason::rankForProtocol(v6);
    if (v3) {
      BOOL v8 = v7 < v5;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      int v5 = v7;
      uint64_t v3 = v6;
    }
    if (v5) {
      BOOL v10 = v4 == v2;
    }
    else {
      BOOL v10 = 1;
    }
    v4 += 8;
  }
  while (!v10);
  return v3;
}

void SipReasonHeader::~SipReasonHeader(SipReasonHeader *this)
{
  SipPointerVectorHeader<SipReason>::~SipPointerVectorHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipReasonHeader::clone(SipReasonHeader *this)
{
}

void sub_1C551AAB0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40888A45CFLL);
  _Unwind_Resume(a1);
}

uint64_t SipVectorHeader<SipReason *>::encodeValue(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[8];
  if (a1[9] != v2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      if (v6)
      {
        int v7 = *(void **)(a2 + 8);
        char v9 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v9, 1);
        *(unsigned char *)(a2 + 17) = 0;
        uint64_t v2 = a1[8];
      }
      (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 112))(a1, v2 + v5, a2);
      ++v6;
      uint64_t v2 = a1[8];
      v5 += 8;
    }
    while (v6 < (a1[9] - v2) >> 3);
  }
  return 1;
}

BOOL SipVectorHeader<SipReason *>::setValueFromString(void *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v4 = (*(uint64_t (**)(void *, uint64_t, uint64_t, void **, uint64_t))(*a1 + 128))(a1, a2, v4, __p, 44);
    if (v4 == -1) {
      break;
    }
    uint64_t v6 = 0;
    if (((*(uint64_t (**)(void *, void **, uint64_t *))(*a1 + 120))(a1, __p, &v6) & 1) == 0) {
      break;
    }
    SipVectorHeader<SipReason *>::addItem(a1, &v6);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return v4 == -1;
}

void sub_1C551ACE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipVectorHeader<SipReason *>::allowsDuplicates()
{
  return 1;
}

uint64_t SipVectorHeader<SipReason *>::allowsMerging()
{
  return 1;
}

BOOL SipPointerVectorHeader<SipReason>::mergeHeader(int a1, void *lpsrc)
{
  if (v2 && v2[9] != v2[8]) {
    operator new();
  }
  return v2 != 0;
}

void sub_1C551AE68(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B2C406DDFD988);
  _Unwind_Resume(a1);
}

ImsOutStream *SipPointerVectorHeader<SipReason>::itemToStream(uint64_t a1, std::string **a2, ImsOutStream *a3)
{
  uint64_t v4 = *a2;
  if (SHIBYTE((*a2)->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = v4->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE((*a2)->__r_.__value_.__r.__words[2]);
  }
  if (size) {
    uint64_t v6 = *a2;
  }
  else {
    uint64_t v6 = &SipReason::kProtocolSip;
  }
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a3 + 32))(a3, v6);
  return SipParameterMap::toStream((SipParameterMap *)&v4[1], a3, 0, 0, 0, 0);
}

void SipPointerVectorHeader<SipReason>::itemFromString()
{
}

unint64_t SipVectorHeader<SipReason *>::nextToken(int a1, std::string *__str, std::string::size_type __pos, std::string *this, unsigned __int8 a5)
{
  return ims::nextTokenQ(__str, __pos, this, a5);
}

BOOL SipVectorHeader<SipReason *>::mergeHeader(void *a1, void *lpsrc)
{
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = (void *)v3[8];
    uint64_t v6 = (void *)v3[9];
    while (v5 != v6)
      SipVectorHeader<SipReason *>::addItem(a1, v5++);
  }
  return v4 != 0;
}

void SipVectorHeader<SipReason *>::~SipVectorHeader(SipHeader *this)
{
  *(void *)this = &unk_1F20D85E0;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

void std::vector<SipReason *>::__throw_length_error[abi:ne180100]()
{
}

void SipPointerVectorHeader<SipReason>::~SipPointerVectorHeader(SipHeader *this)
{
  *(void *)this = &unk_1F20D8548;
  uint64_t v4 = (char *)this + 64;
  uint64_t v2 = (void *)*((void *)this + 8);
  uint64_t v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        *(void *)(v6 + 24) = &unk_1F20B37B0;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v6 + 32, *(void **)(v6 + 40));
        if (*(char *)(v6 + 23) < 0) {
          operator delete(*(void **)v6);
        }
        MEMORY[0x1C878E320](v6, 0x10B2C406DDFD988);
        uint64_t v2 = (void *)*((void *)this + 8);
        uint64_t v3 = (void *)*((void *)this + 9);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  *(void *)this = &unk_1F20D85E0;
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

uint64_t SipIPSec3gppSecurityMechanism::matches(SipIPSec3gppSecurityMechanism *this, const SipSecurityMechanism *lpsrc)
{
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  unint64_t v5 = (char *)this + 40;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 40, (void **)&SipIPSec3gppSecurityMechanism::kParameterAlgorithm);
  int v7 = (void **)((char *)this + 48);
  if ((void **)((char *)this + 48) == v6) {
    uint64_t v8 = &ims::kEmptyString;
  }
  else {
    uint64_t v8 = (long long *)(v6 + 7);
  }
  uint64_t v9 = v4 + 40;
  BOOL v10 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v4 + 40, (void **)&SipIPSec3gppSecurityMechanism::kParameterAlgorithm);
  uint64_t v11 = (void **)(v4 + 48);
  if ((void **)(v4 + 48) == v10) {
    uint64_t v12 = &ims::kEmptyString;
  }
  else {
    uint64_t v12 = (long long *)(v10 + 7);
  }
  uint64_t v13 = *((unsigned __int8 *)v8 + 23);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = *((unsigned __int8 *)v8 + 23);
  }
  else {
    uint64_t v14 = *((void *)v8 + 1);
  }
  uint64_t v15 = *((unsigned __int8 *)v12 + 23);
  int v16 = (char)v15;
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *((void *)v12 + 1);
  }
  if (v14 != v15) {
    return 0;
  }
  if (v16 >= 0) {
    char v17 = v12;
  }
  else {
    char v17 = *(long long **)v12;
  }
  if ((v13 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v8, v17, *((void *)v8 + 1))) {
      return 0;
    }
  }
  else if (*((unsigned char *)v8 + 23))
  {
    while (*(unsigned __int8 *)v8 == *(unsigned __int8 *)v17)
    {
      uint64_t v8 = (long long *)((char *)v8 + 1);
      char v17 = (long long *)((char *)v17 + 1);
      if (!--v13) {
        goto LABEL_23;
      }
    }
    return 0;
  }
LABEL_23:
  long long v18 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v5, (void **)"ealg");
  long long v19 = (long long *)(v18 + 7);
  if (v7 == v18) {
    long long v19 = &ims::kEmptyString;
  }
  uint64_t v20 = *((unsigned __int8 *)v19 + 23);
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = *((void *)v19 + 1);
  }
  if (v20) {
    uint64_t v21 = (const char *)v19;
  }
  else {
    uint64_t v21 = "null";
  }
  uint64_t v22 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9, (void **)"ealg");
  uint64_t v23 = (long long *)(v22 + 7);
  if (v11 == v22) {
    uint64_t v23 = &ims::kEmptyString;
  }
  uint64_t v24 = *((unsigned __int8 *)v23 + 23);
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *((void *)v23 + 1);
  }
  if (v24) {
    char v25 = (const char *)v23;
  }
  else {
    char v25 = "null";
  }
  uint64_t v26 = *((unsigned __int8 *)v21 + 23);
  if ((v26 & 0x80u) == 0) {
    uint64_t v27 = *((unsigned __int8 *)v21 + 23);
  }
  else {
    uint64_t v27 = *((void *)v21 + 1);
  }
  uint64_t v28 = *((unsigned __int8 *)v25 + 23);
  int v29 = (char)v28;
  if ((v28 & 0x80u) != 0) {
    uint64_t v28 = *((void *)v25 + 1);
  }
  if (v27 != v28) {
    return 0;
  }
  if (v29 >= 0) {
    long long v30 = v25;
  }
  else {
    long long v30 = *(const char **)v25;
  }
  if ((v26 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v21, v30, *((void *)v21 + 1))) {
      return 0;
    }
  }
  else if (v21[23])
  {
    while (*(unsigned __int8 *)v21 == *(unsigned __int8 *)v30)
    {
      ++v21;
      ++v30;
      if (!--v26) {
        goto LABEL_52;
      }
    }
    return 0;
  }
LABEL_52:
  long long v31 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v5, (void **)"prot");
  uint64_t v32 = (long long *)(v31 + 7);
  if (v7 == v31) {
    uint64_t v32 = &ims::kEmptyString;
  }
  uint64_t v33 = *((unsigned __int8 *)v32 + 23);
  if ((v33 & 0x80u) != 0) {
    uint64_t v33 = *((void *)v32 + 1);
  }
  if (v33) {
    char v34 = (char *)v32;
  }
  else {
    char v34 = &SipIPSec3gppSecurityMechanism::kProtocolESP;
  }
  uint64_t v35 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9, (void **)"prot");
  uint64_t v36 = (long long *)(v35 + 7);
  if (v11 == v35) {
    uint64_t v36 = &ims::kEmptyString;
  }
  uint64_t v37 = *((unsigned __int8 *)v36 + 23);
  if ((v37 & 0x80u) != 0) {
    uint64_t v37 = *((void *)v36 + 1);
  }
  if (v37) {
    char v38 = (char *)v36;
  }
  else {
    char v38 = &SipIPSec3gppSecurityMechanism::kProtocolESP;
  }
  uint64_t v39 = v34[23];
  if ((v39 & 0x80u) == 0) {
    uint64_t v40 = v34[23];
  }
  else {
    uint64_t v40 = *((void *)v34 + 1);
  }
  uint64_t v41 = v38[23];
  int v42 = (char)v41;
  if ((v41 & 0x80u) != 0) {
    uint64_t v41 = *((void *)v38 + 1);
  }
  if (v40 != v41) {
    return 0;
  }
  if (v42 >= 0) {
    std::string v43 = v38;
  }
  else {
    std::string v43 = *(char **)v38;
  }
  if ((v39 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v34, v43, *((void *)v34 + 1))) {
      goto LABEL_81;
    }
    return 0;
  }
  if (v34[23])
  {
    while (*v34 == *v43)
    {
      ++v34;
      ++v43;
      if (!--v39) {
        goto LABEL_81;
      }
    }
    return 0;
  }
LABEL_81:
  char v44 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v5, (void **)&SipIPSec3gppSecurityMechanism::kParameterMode);
  uint64_t v45 = (long long *)(v44 + 7);
  if (v7 == v44) {
    uint64_t v45 = &ims::kEmptyString;
  }
  uint64_t v46 = *((unsigned __int8 *)v45 + 23);
  if ((v46 & 0x80u) != 0) {
    uint64_t v46 = *((void *)v45 + 1);
  }
  if (v46) {
    uint64_t v47 = (const char *)v45;
  }
  else {
    uint64_t v47 = "trans";
  }
  uint64_t v48 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9, (void **)&SipIPSec3gppSecurityMechanism::kParameterMode);
  int v49 = (long long *)(v48 + 7);
  if (v11 == v48) {
    int v49 = &ims::kEmptyString;
  }
  uint64_t v50 = *((unsigned __int8 *)v49 + 23);
  if ((v50 & 0x80u) != 0) {
    uint64_t v50 = *((void *)v49 + 1);
  }
  if (v50) {
    std::string v51 = (const char *)v49;
  }
  else {
    std::string v51 = "trans";
  }
  uint64_t v52 = *((unsigned __int8 *)v47 + 23);
  if ((v52 & 0x80u) == 0) {
    uint64_t v53 = *((unsigned __int8 *)v47 + 23);
  }
  else {
    uint64_t v53 = *((void *)v47 + 1);
  }
  uint64_t v54 = *((unsigned __int8 *)v51 + 23);
  int v55 = (char)v54;
  if ((v54 & 0x80u) != 0) {
    uint64_t v54 = *((void *)v51 + 1);
  }
  if (v53 != v54) {
    return 0;
  }
  if (v55 >= 0) {
    uint64_t v56 = v51;
  }
  else {
    uint64_t v56 = *(const char **)v51;
  }
  if ((v52 & 0x80) != 0) {
    return memcmp(*(const void **)v47, v56, *((void *)v47 + 1)) == 0;
  }
  if (!v47[23]) {
    return 1;
  }
  uint64_t v57 = v52 - 1;
  do
  {
    int v59 = *(unsigned __int8 *)v47++;
    int v58 = v59;
    int v61 = *(unsigned __int8 *)v56++;
    int v60 = v61;
    BOOL v63 = v57-- != 0;
    uint64_t result = v58 == v60;
  }
  while (v58 == v60 && v63);
  return result;
}

void SipIPSec3gppSecurityMechanism::initializeFromTransport(SipIPSec3gppSecurityMechanism *this, const SipIPSecTransportGroup *a2)
{
  uint64_t v3 = (char *)this + 32;
  SipParameterMap::setParameter((uint64_t)this + 32, (long long *)"spi-c");
  SipParameterMap::setParameter((uint64_t)v3, (long long *)"spi-s");
  (*(void (**)(uint64_t *__return_ptr, const SipIPSecTransportGroup *))(*(void *)a2 + 192))(&v4, a2);
  (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  SipParameterMap::setParameter((uint64_t)v3, (long long *)"port-s");
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  (*(void (**)(uint64_t *__return_ptr, const SipIPSecTransportGroup *))(*(void *)a2 + 184))(&v4, a2);
  (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  SipParameterMap::setParameter((uint64_t)v3, (long long *)"port-c");
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C551B880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

double SipIPSec3gppSecurityMechanism::fillIPSecAuthKey@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 40, (void **)&SipIPSec3gppSecurityMechanism::kParameterAlgorithm);
  if ((void **)(a1 + 48) == v8) {
    uint64_t v9 = &ims::kEmptyString;
  }
  else {
    uint64_t v9 = (long long *)(v8 + 7);
  }
  uint64_t v10 = *((unsigned __int8 *)v9 + 23);
  size_t v11 = *((void *)v9 + 1);
  if ((v10 & 0x80u) == 0) {
    uint64_t v12 = *((unsigned __int8 *)v9 + 23);
  }
  else {
    uint64_t v12 = *((void *)v9 + 1);
  }
  if (v12 == 13)
  {
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v9, "hmac-sha-1-96", v11)) {
        goto LABEL_24;
      }
    }
    else if (*((unsigned char *)v9 + 23))
    {
      int v16 = "hmac-sha-1-96";
      unint64_t v14 = 20;
      char v17 = v9;
      while (*(unsigned __int8 *)v17 == *(unsigned __int8 *)v16)
      {
        char v17 = (long long *)((char *)v17 + 1);
        ++v16;
        if (!--v10) {
          goto LABEL_26;
        }
      }
      goto LABEL_24;
    }
    unint64_t v14 = 20;
    goto LABEL_26;
  }
  if (v12 != 11) {
    goto LABEL_24;
  }
  if ((v10 & 0x80) == 0)
  {
    if (*((unsigned char *)v9 + 23))
    {
      uint64_t v13 = "hmac-md5-96";
      unint64_t v14 = 16;
      uint64_t v15 = v9;
      while (*(unsigned __int8 *)v15 == *(unsigned __int8 *)v13)
      {
        uint64_t v15 = (long long *)((char *)v15 + 1);
        ++v13;
        if (!--v10) {
          goto LABEL_26;
        }
      }
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  if (memcmp(*(const void **)v9, "hmac-md5-96", v11))
  {
LABEL_24:
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    v25[0] = &unk_1F20B2680;
    v25[1] = &_bambiDomain;
    int v26 = 0x40000000;
    uint64_t v18 = ImsResult::operator<<<char [44]>((uint64_t)v25, "Can't fill IPSec key for unknown algorithm ");
    long long v19 = (const std::string *)ImsResult::operator<<<std::string>(v18, (uint64_t)v9);
    ImsResult::ImsResult((ImsResult *)a4, v19);
    ImsResult::~ImsResult((ImsResult *)v25);
    return result;
  }
LABEL_22:
  unint64_t v14 = 16;
LABEL_26:
  uint64_t v21 = (_OWORD *)*a3;
  unint64_t v22 = a3[1] - *a3;
  if (v14 <= v22)
  {
    if (v14 < v22) {
      a3[1] = (unint64_t)v21 + v14;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a3, v14 - v22);
    uint64_t v21 = (_OWORD *)*a3;
  }
  *uint64_t v21 = *a2;
  uint64_t v23 = (void *)(*a3 + 16);
  int64_t v24 = a3[1] - (void)v23;
  if (v24 >= 1) {
    bzero(v23, v24);
  }
  double result = 0.0;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a4 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)a4 = &unk_1F20B2680;
  *(void *)(a4 + 8) = &_bambiDomain;
  *(_DWORD *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  return result;
}

void sub_1C551BAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

double SipIPSec3gppSecurityMechanism::fillIPSecEncryptionKey@<D0>(uint64_t a1@<X0>, void *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 40, (void **)"ealg");
  if ((void **)(a1 + 48) == v8) {
    uint64_t v9 = &ims::kEmptyString;
  }
  else {
    uint64_t v9 = (long long *)(v8 + 7);
  }
  uint64_t v10 = *((unsigned __int8 *)v9 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)v9 + 1);
  }
  if (v10) {
    size_t v11 = (const char *)v9;
  }
  else {
    size_t v11 = "null";
  }
  uint64_t v12 = *((unsigned __int8 *)v11 + 23);
  size_t v13 = *((void *)v11 + 1);
  if ((v12 & 0x80u) == 0) {
    uint64_t v14 = *((unsigned __int8 *)v11 + 23);
  }
  else {
    uint64_t v14 = *((void *)v11 + 1);
  }
  if (v14 == 12)
  {
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, "des-ede3-cbc", v13)) {
        goto LABEL_30;
      }
    }
    else if (v11[23])
    {
      char v17 = "des-ede3-cbc";
      uint64_t v18 = v11;
      while (*(unsigned __int8 *)v18 == *(unsigned __int8 *)v17)
      {
        ++v18;
        ++v17;
        if (!--v12) {
          goto LABEL_31;
        }
      }
      goto LABEL_30;
    }
LABEL_31:
    int64_t v24 = (void *)*a3;
    unint64_t v25 = a3[1] - *a3;
    if (v25 > 0x17)
    {
      if (v25 != 24) {
        a3[1] = (unint64_t)(v24 + 3);
      }
    }
    else
    {
      std::vector<unsigned char>::__append(a3, 24 - v25);
      int64_t v24 = (void *)*a3;
    }
    *int64_t v24 = *a2;
    v24[1] = a2[1];
    v24[2] = *a2;
    goto LABEL_39;
  }
  if (v14 != 7) {
    goto LABEL_30;
  }
  if ((v12 & 0x80) == 0)
  {
    if (v11[23])
    {
      uint64_t v15 = "aes-cbc";
      int v16 = v11;
      while (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v15)
      {
        ++v16;
        ++v15;
        if (!--v12) {
          goto LABEL_27;
        }
      }
      goto LABEL_30;
    }
    goto LABEL_27;
  }
  if (memcmp(*(const void **)v11, "aes-cbc", v13))
  {
LABEL_30:
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    v26[0] = &unk_1F20B2680;
    v26[1] = &_bambiDomain;
    int v27 = 0x40000000;
    uint64_t v21 = ImsResult::operator<<<char [49]>((uint64_t)v26, "Unable to generate key for encryption algorithm ");
    unint64_t v22 = (const std::string *)ImsResult::operator<<<std::string>(v21, (uint64_t)v11);
    ImsResult::ImsResult((ImsResult *)a4, v22);
    ImsResult::~ImsResult((ImsResult *)v26);
    return result;
  }
LABEL_27:
  long long v19 = (_OWORD *)*a3;
  unint64_t v20 = a3[1] - *a3;
  if (v20 > 0xF)
  {
    if (v20 != 16) {
      a3[1] = (unint64_t)(v19 + 1);
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a3, 16 - v20);
    long long v19 = (_OWORD *)*a3;
  }
  _OWORD *v19 = *(_OWORD *)a2;
LABEL_39:
  double result = 0.0;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a4 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)a4 = &unk_1F20B2680;
  *(void *)(a4 + 8) = &_bambiDomain;
  *(_DWORD *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  return result;
}

void sub_1C551BD50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipIPSec3gppSecurityMechanism::~SipIPSec3gppSecurityMechanism(SipIPSec3gppSecurityMechanism *this)
{
  SipSecurityMechanism::~SipSecurityMechanism(this);
  JUMPOUT(0x1C878E320);
}

void SipIPSec3gppSecurityMechanism::clone(SipIPSec3gppSecurityMechanism *this)
{
}

void sub_1C551BE9C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40D6137D5ALL);
  _Unwind_Resume(a1);
}

void SipSecurityMechanism::~SipSecurityMechanism(SipSecurityMechanism *this)
{
  *(void *)this = &unk_1F20CDEC0;
  *((void *)this + 4) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 40, *((void **)this + 6));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t SipConferenceEndpoint::setAttribute(uint64_t result, uint64_t *a2, std::string *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  if (v4 == 5)
  {
    if (v5 >= 0) {
      size_t v11 = (int *)a2;
    }
    else {
      size_t v11 = (int *)*a2;
    }
    int v12 = *v11;
    int v13 = *((unsigned __int8 *)v11 + 4);
    if (v12 == 1952543859 && v13 == 101)
    {
      double result = conferenceStateFromName((uint64_t)a3);
      *(_DWORD *)(v3 + 41ims::StackConfig::~StackConfig(this + 6) = result;
    }
  }
  else if (v4 == 6)
  {
    uint64_t v6 = v5 >= 0 ? (int *)a2 : (int *)*a2;
    int v7 = *v6;
    int v8 = *((unsigned __int16 *)v6 + 2);
    if (v7 == 1769238117 && v8 == 31092)
    {
      uint64_t v10 = result + 8;
      return SipUri::fromString(v10, a3);
    }
  }
  return result;
}

uint64_t conferenceStateFromName(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (v1 == 7)
  {
    if (v2 >= 0) {
      int v5 = (unsigned int *)a1;
    }
    else {
      int v5 = *(unsigned int **)a1;
    }
    if (*v5 == 1953653104 && *(unsigned int *)((char *)v5 + 3) == 1818323316)
    {
      return 2;
    }
    else
    {
      unsigned int v7 = 1684368485;
      unsigned int v8 = bswap32(*v5);
      if (v8 == 1684368485 && (unsigned int v7 = 1702126948, v8 = bswap32(*(unsigned int *)((char *)v5 + 3)), v8 == 1702126948))
      {
        int v9 = 0;
      }
      else if (v8 < v7)
      {
        int v9 = -1;
      }
      else
      {
        int v9 = 1;
      }
      if (v9) {
        return 0;
      }
      else {
        return 3;
      }
    }
  }
  else if (v1 == 4)
  {
    if (v2 >= 0) {
      uint64_t v3 = (_DWORD *)a1;
    }
    else {
      uint64_t v3 = *(_DWORD **)a1;
    }
    return *v3 == 1819047270;
  }
  else
  {
    return 0;
  }
}

void SipConferenceEndpoint::setText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3 == 6)
  {
    int v5 = v4 >= 0 ? (int *)a2 : *(int **)a2;
    int v6 = *v5;
    int v7 = *((unsigned __int16 *)v5 + 2);
    if (v6 == 1952543859 && v7 == 29557)
    {
      memset(&__p, 0, sizeof(__p));
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string __p = *(std::string *)a3;
      }
      ims::chomp(&__p, "\r\n\t ", 3);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = __p.__r_.__value_.__l.__size_;
      }
      switch(size)
      {
        case 7uLL:
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (LODWORD(p_p->__r_.__value_.__l.__data_) == 1747807855
            && *(_DWORD *)((char *)p_p->__r_.__value_.__r.__words + 3) == 1684828008)
          {
            int v16 = 2;
            goto LABEL_70;
          }
          int data = (int)p_p->__r_.__value_.__l.__data_;
          int v14 = *(_DWORD *)((char *)p_p->__r_.__value_.__r.__words + 3);
          if (data == 1684956528 && v14 == 1735289188)
          {
            int v16 = 4;
            goto LABEL_70;
          }
          goto LABEL_68;
        case 8uLL:
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v17 = &__p;
          }
          else {
            char v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (memcmp(v17, "alerting", size)) {
            goto LABEL_68;
          }
          int v16 = 5;
          goto LABEL_70;
        case 9uLL:
          unint64_t v22 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
          int v24 = v22->__r_.__value_.__s.__data_[8];
          if (v23 != 0x657463656E6E6F63 || v24 != 100) {
            goto LABEL_68;
          }
          int v16 = 1;
          goto LABEL_70;
        case 0xAuLL:
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v26 = &__p;
          }
          else {
            int v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (memcmp(v26, "dialing-in", size)) {
            goto LABEL_68;
          }
          int v16 = 6;
          goto LABEL_70;
        case 0xBuLL:
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v27 = &__p;
          }
          else {
            int v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (memcmp(v27, "dialing-out", size)) {
            goto LABEL_68;
          }
          int v16 = 7;
          goto LABEL_70;
        case 0xCuLL:
          uint64_t v18 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
          int v20 = v18->__r_.__value_.__r.__words[1];
          if (v19 != 0x656E6E6F63736964 || v20 != 1684370531) {
            goto LABEL_68;
          }
          int v16 = 9;
          goto LABEL_70;
        case 0xFuLL:
          long long v28 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v29 = v28->__r_.__value_.__r.__words[0];
          uint64_t v30 = *(std::string::size_type *)((char *)v28->__r_.__value_.__r.__words + 7);
          if (v29 != 0x69762D646574756DLL || v30 != 0x7375636F662D6169) {
            goto LABEL_68;
          }
          int v16 = 3;
          goto LABEL_70;
        default:
LABEL_68:
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p.__r_.__value_.__l.__data_, "disconnecting"))
          {
            int v16 = 8;
LABEL_70:
            *(_DWORD *)(a1 + 448) = v16;
          }
          else
          {
            *(_DWORD *)(a1 + 448) = 0;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          break;
      }
    }
  }
}

void sub_1C551C3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipConferenceEndpoint::createChild(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = a2[1];
  }
  if (v2 != 6) {
    return 0;
  }
  if (v3 >= 0) {
    int v4 = a2;
  }
  else {
    int v4 = (uint64_t *)*a2;
  }
  unsigned int v5 = 1937006964;
  unsigned int v6 = bswap32(*(_DWORD *)v4);
  if (v6 == 1937006964 && (unsigned int v6 = bswap32(*((unsigned __int16 *)v4 + 2)) >> 16, v5 = 30067, v6 == 30067))
  {
    int v7 = 0;
  }
  else if (v6 < v5)
  {
    int v7 = -1;
  }
  else
  {
    int v7 = 1;
  }
  if (v7) {
    return 0;
  }
  return result;
}

uint64_t SipConferenceEndpoint::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3 == 12
    && (v4 >= 0 ? (uint64_t v5 = a2) : (uint64_t v5 = *(void *)a2),
        (uint64_t v6 = *(void *)v5, v7 = *(_DWORD *)(v5 + 8), v6 == 0x2D79616C70736964) ? (v8 = v7 == 1954047348) : (v8 = 0),
        v8))
  {
    return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
  }
  else
  {
    return bambi::XmlParserItem::parseChild(a1, a2, a3);
  }
}

void *SipConferenceEndpoint::statusAsString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if ((a1 - 1) > 8) {
    uint64_t v2 = "unknown";
  }
  else {
    uint64_t v2 = off_1E6511940[a1 - 1];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void SipConferenceUser::~SipConferenceUser(SipConferenceUser *this)
{
  *(void *)this = &unk_1F20D8740;
  uint64_t v2 = (void *)*((void *)this + 57);
  uint64_t v3 = (void *)*((void *)this + 58);
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)*((void *)this + 57);
  }
  if (v2)
  {
    *((void *)this + 58) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  SipUri::~SipUri((SipConferenceUser *)((char *)this + 8));
}

{
  uint64_t vars8;

  SipConferenceUser::~SipConferenceUser(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipConferenceUser::setAttribute(uint64_t result, uint64_t *a2, std::string *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  if (v4 == 5)
  {
    if (v5 >= 0) {
      size_t v11 = (int *)a2;
    }
    else {
      size_t v11 = (int *)*a2;
    }
    int v12 = *v11;
    int v13 = *((unsigned __int8 *)v11 + 4);
    if (v12 == 1952543859 && v13 == 101)
    {
      uint64_t result = conferenceStateFromName((uint64_t)a3);
      *(_DWORD *)(v3 + 41ims::StackConfig::~StackConfig(this + 6) = result;
    }
  }
  else if (v4 == 6)
  {
    uint64_t v6 = v5 >= 0 ? (int *)a2 : (int *)*a2;
    int v7 = *v6;
    int v8 = *((unsigned __int16 *)v6 + 2);
    if (v7 == 1769238117 && v8 == 31092)
    {
      uint64_t v10 = result + 8;
      return SipUri::fromString(v10, a3);
    }
  }
  return result;
}

uint64_t SipConferenceUser::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3 == 12
    && (v4 >= 0 ? (uint64_t v5 = a2) : (uint64_t v5 = *(void *)a2),
        (uint64_t v6 = *(void *)v5, v7 = *(_DWORD *)(v5 + 8), v6 == 0x2D79616C70736964) ? (v8 = v7 == 1954047348) : (v8 = 0),
        v8))
  {
    return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
  }
  else
  {
    return bambi::XmlParserItem::parseChild(a1, a2, a3);
  }
}

uint64_t SipConferenceUser::createChild(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2 == 8)
  {
    if (v3 >= 0) {
      int v4 = (void *)a2;
    }
    else {
      int v4 = *(void **)a2;
    }
    if (*v4 == 0x746E696F70646E65) {
      operator new();
    }
  }
  return 0;
}

void sub_1C551C8F0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40EE3AF133);
  _Unwind_Resume(a1);
}

uint64_t SipConferenceUsers::createChild(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2 == 4)
  {
    if (v3 >= 0) {
      int v4 = (_DWORD *)a2;
    }
    else {
      int v4 = *(_DWORD **)a2;
    }
    if (*v4 == 1919251317) {
      operator new();
    }
  }
  return 0;
}

void sub_1C551CA78(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40BA49582ALL);
  _Unwind_Resume(a1);
}

uint64_t SipConferenceUsers::operator=(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 16);
  if (v4 != v5)
  {
    do
    {
      if (*v4) {
        (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
      }
      ++v4;
    }
    while (v4 != v5);
    int v4 = *(void **)(a1 + 8);
  }
  *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = v4;
  if (*(void *)(a2 + 8) != *(void *)(a2 + 16)) {
    operator new();
  }
  return a1;
}

void sub_1C551CDD0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40BA49582ALL);
  _Unwind_Resume(a1);
}

void SipConferenceUsers::~SipConferenceUsers(SipConferenceUsers *this)
{
  *(void *)this = &unk_1F20D87B0;
  uint64_t v2 = (void *)*((void *)this + 1);
  int v3 = (void *)*((void *)this + 2);
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)*((void *)this + 1);
  }
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  SipConferenceUsers::~SipConferenceUsers(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipConferenceDescription::createChild()
{
  return 0;
}

uint64_t SipConferenceDescription::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3 == 7)
  {
    if (v4 >= 0) {
      uint64_t v10 = (int *)a2;
    }
    else {
      uint64_t v10 = *(int **)a2;
    }
    int v11 = *v10;
    int v12 = *(int *)((char *)v10 + 3);
    if (v11 != 1784837491 || v12 != 1952671082) {
      return bambi::XmlParserItem::parseChild(a1, a2, a3);
    }
    uint64_t v9 = *(void *)a1;
    return (*(uint64_t (**)(void))(v9 + 72))();
  }
  if (v3 != 18)
  {
    if (v3 != 12) {
      return bambi::XmlParserItem::parseChild(a1, a2, a3);
    }
    uint64_t v5 = v4 >= 0 ? a2 : *(void *)a2;
    uint64_t v6 = *(void *)v5;
    int v7 = *(_DWORD *)(v5 + 8);
    if (v6 != 0x2D79616C70736964 || v7 != 1954047348) {
      return bambi::XmlParserItem::parseChild(a1, a2, a3);
    }
    uint64_t v9 = *(void *)a1;
    return (*(uint64_t (**)(void))(v9 + 72))();
  }
  if (v4 >= 0) {
    uint64_t v15 = (int *)a2;
  }
  else {
    uint64_t v15 = *(int **)a2;
  }
  uint64_t v16 = *(void *)v15;
  uint64_t v17 = *((void *)v15 + 1);
  int v18 = *((unsigned __int16 *)v15 + 8);
  if (v16 != 0x2D6D756D6978616DLL || v17 != 0x756F632D72657375 || v18 != 29806) {
    return bambi::XmlParserItem::parseChild(a1, a2, a3);
  }
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t SipConferenceInfo::SipConferenceInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F20D8820;
  SipUri::SipUri((SipUri *)(a1 + 8));
  *(void *)(a1 + 432) = &unk_1F20D87B0;
  *(void *)(a1 + 44(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 45ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 464) = a1;
  *(void *)(a1 + 472) = &unk_1F20D88A8;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 52(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  SipUri::operator=(v4, a2 + 8);
  *(void *)(a1 + 41ims::StackConfig::~StackConfig(this + 6) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  SipConferenceUsers::operator=(a1 + 432, a2 + 432);
  return a1;
}

void sub_1C551D164(_Unwind_Exception *a1)
{
  SipConferenceDescription::~SipConferenceDescription(v3);
  SipConferenceUsers::~SipConferenceUsers(v2);
  SipUri::~SipUri(v1);
  _Unwind_Resume(a1);
}

void SipConferenceDescription::~SipConferenceDescription(void **this)
{
  *this = &unk_1F20D88A8;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20D88A8;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t SipConferenceInfo::setAttribute(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  switch(v4)
  {
    case 5:
      if (v5 >= 0) {
        int v11 = (int *)a2;
      }
      else {
        int v11 = (int *)*a2;
      }
      int v12 = *v11;
      int v13 = *((unsigned __int8 *)v11 + 4);
      if (v12 == 1952543859 && v13 == 101)
      {
        uint64_t result = conferenceStateFromName(a3);
        *(_DWORD *)(v3 + 41ims::StackConfig::~StackConfig(this + 6) = result;
      }
      break;
    case 7:
      if (v5 >= 0) {
        uint64_t v15 = (int *)a2;
      }
      else {
        uint64_t v15 = (int *)*a2;
      }
      int v16 = *v15;
      int v17 = *(int *)((char *)v15 + 3);
      if (v16 == 1936876918 && v17 == 1852795251)
      {
        if (*(char *)(a3 + 23) >= 0) {
          std::string::size_type v19 = (const char *)a3;
        }
        else {
          std::string::size_type v19 = *(const char **)a3;
        }
        uint64_t result = strtoul(v19, 0, 10);
        *(_DWORD *)(v3 + 42(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = result;
      }
      break;
    case 6:
      uint64_t v6 = v5 >= 0 ? (int *)a2 : (int *)*a2;
      int v7 = *v6;
      int v8 = *((unsigned __int16 *)v6 + 2);
      if (v7 == 1769238117 && v8 == 31092)
      {
        uint64_t v10 = result + 8;
        return SipUri::fromString(v10, (std::string *)a3);
      }
      break;
  }
  return result;
}

uint64_t SipConferenceInfo::createChild(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2 == 22)
  {
    if (v3 >= 0) {
      uint64_t v6 = (unint64_t *)a2;
    }
    else {
      uint64_t v6 = *(unint64_t **)a2;
    }
    unint64_t v7 = 0x636F6E666572656ELL;
    unint64_t v8 = bswap64(*v6);
    if (v8 == 0x636F6E666572656ELL
      && (unint64_t v7 = 0x63652D6465736372, v8 = bswap64(v6[1]), v8 == 0x63652D6465736372)
      && (unint64_t v7 = 0x6372697074696F6ELL, v8 = bswap64(*(unint64_t *)((char *)v6 + 14)), v8 == 0x6372697074696F6ELL))
    {
      int v9 = 0;
    }
    else if (v8 < v7)
    {
      int v9 = -1;
    }
    else
    {
      int v9 = 1;
    }
    if (v9) {
      return 0;
    }
    else {
      return a1 + 472;
    }
  }
  else if (v2 == 5)
  {
    if (v3 >= 0) {
      unint64_t v4 = a2;
    }
    else {
      unint64_t v4 = *(void *)a2;
    }
    if (*(_DWORD *)v4 ^ 0x72657375 | *(unsigned __int8 *)(v4 + 4) ^ 0x73) {
      return 0;
    }
    else {
      return a1 + 432;
    }
  }
  else
  {
    return 0;
  }
}

void SipConferenceEndpoint::~SipConferenceEndpoint(void **this)
{
  *this = &unk_1F20D86D0;
  if (*((char *)this + 447) < 0) {
    operator delete(this[53]);
  }
  SipUri::~SipUri((SipUri *)(this + 1));
}

{
  uint64_t vars8;

  *this = &unk_1F20D86D0;
  if (*((char *)this + 447) < 0) {
    operator delete(this[53]);
  }
  SipUri::~SipUri((SipUri *)(this + 1));
  JUMPOUT(0x1C878E320);
}

void LazuliGroupParticipant::~LazuliGroupParticipant(void **this)
{
  *this = &unk_1F20D8978;
  if (*((char *)this + 207) < 0) {
    operator delete(this[23]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[20];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  int v3 = (std::__shared_weak_count *)this[14];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  *this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  LazuliGroupParticipant::~LazuliGroupParticipant(this);
  JUMPOUT(0x1C878E320);
}

void LazuliGroupParticipant::init(ImsResult *a1, std::chrono::steady_clock::time_point *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v27 = 0;
  long long v28 = 0;
  SipDialog::sipSession(*(SipDialog **)a3, &v27);
  uint64_t v10 = 0;
  if (*(void *)(*(void *)a3 + 2064) != 1) {
    goto LABEL_17;
  }
  uint64_t v11 = *(void *)(*(void *)a3 + 2048);
  uint64_t v12 = *(void *)(v11 + 56);
  uint64_t v10 = *(std::__shared_weak_count **)(v11 + 64);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12)
  {
    a2[21].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v13 = (*(uint64_t (**)(std::chrono::steady_clock::time_point *))(a2->__d_.__rep_ + 64))(a2);
    (*(void (**)(std::chrono::steady_clock::time_point *, uint64_t))(a2->__d_.__rep_ + 16))(a2, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"refer/", 6);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, a5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" ", 1);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 40))(a4, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" for group ", 11);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)a3 + 232) + 40))(*(void *)a3 + 232, v13);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    int v14 = v27;
    rep = (std::__shared_weak_count *)a2[14].__d_.__rep_;
    uint64_t v21 = rep;
    if (rep) {
      atomic_fetch_add_explicit(&rep->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    int v16 = *(std::__shared_weak_count **)(a3 + 8);
    int v20 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipSession::lazuliRefer(v14, a4, a1);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v21) {
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
LABEL_17:
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    v22[0] = &unk_1F20B2680;
    v22[1] = &_bambiDomain;
    int v23 = 0x40000000;
    uint64_t v17 = ImsResult::operator<<<char [45]>((uint64_t)v22, "No fork for group participant refer for trx ");
    int v18 = (ImsResult *)ImsResult::operator<<<std::string>(v17, (uint64_t)&a2[15]);
    std::string::size_type v19 = ImsLogContainer::logResult((ImsLogContainer *)a2, v18);
    ImsResult::ImsResult(a1, (const std::string *)v19);
    ImsResult::~ImsResult((ImsResult *)v22);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
}

void sub_1C551D994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, char a16)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::string::size_type v19 = *(std::__shared_weak_count **)(v17 - 72);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void LazuliGroupParticipant::initAdd(uint64_t a1, void *a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 148) = 1;
  uint64_t v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  v7[0] = *a2;
  v7[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LazuliGroupParticipant::init((ImsResult *)&v8, (std::chrono::steady_clock::time_point *)a1, (uint64_t)v7, a3, (uint64_t)"INVITE");
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if ((*(uint64_t (**)(void, void))(**((void **)&v8 + 1) + 24))(*((void *)&v8 + 1), v9))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Group Chat participant add failure: ", 36);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(long long *, uint64_t))(v8 + 16))(&v8, v5);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    int v6 = 3;
  }
  else
  {
    int v6 = 1;
  }
  LazuliGroupParticipant::setState((std::__shared_weak_count **)a1, v6);
  ImsResult::~ImsResult((ImsResult *)&v8);
}

void sub_1C551DB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void LazuliGroupParticipant::setState(std::__shared_weak_count **a1, int a2)
{
  int v2 = *((_DWORD *)a1 + 36);
  if (v2 != a2)
  {
    *((_DWORD *)a1 + 3ims::StackConfig::~StackConfig(this + 6) = a2;
    uint64_t v5 = ((uint64_t (*)(std::__shared_weak_count **))(*a1)[2].__shared_weak_owners_)(a1);
    ((void (*)(std::__shared_weak_count **, uint64_t))(*a1)->__shared_weak_owners_)(a1, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"state change for ", 17);
    *(unsigned char *)(v5 + 17) = 0;
    operator<<(v5, *((_DWORD *)a1 + 37));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" from ", 6);
    *(unsigned char *)(v5 + 17) = 0;
    operator<<(v5, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" to ", 4);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v6 = operator<<(v5, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if ((a1[18] & 0xFFFFFFFE) == 2)
    {
      unint64_t v7 = a1[20];
      if (v7)
      {
        long long v8 = std::__shared_weak_count::lock(v7);
        if (v8)
        {
          long long v9 = v8;
          long long v10 = (SipDialog **)a1[19];
          if (v10)
          {
            int v11 = *((_DWORD *)a1 + 37);
            v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            MessageSession::handleParticipantStateChange(v10, (uint64_t)(a1 + 15), v11, a2, (uint64_t)((double)(v12.__d_.__rep_ - (uint64_t)a1[21]) / 1000000.0), *((unsigned int *)a1 + 44), (uint64_t)(a1 + 23));
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
    }
  }
}

void sub_1C551DD94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void LazuliGroupParticipant::initRemove(uint64_t a1, void *a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 148) = 2;
  uint64_t v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  v7[0] = *a2;
  v7[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LazuliGroupParticipant::init((ImsResult *)&v8, (std::chrono::steady_clock::time_point *)a1, (uint64_t)v7, a3, (uint64_t)&SipRequest::kMethodBye);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if ((*(uint64_t (**)(void, void))(**((void **)&v8 + 1) + 24))(*((void *)&v8 + 1), v9))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Group Chat participant remove failure: ", 39);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(long long *, uint64_t))(v8 + 16))(&v8, v5);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    int v6 = 3;
  }
  else
  {
    int v6 = 1;
  }
  LazuliGroupParticipant::setState((std::__shared_weak_count **)a1, v6);
  ImsResult::~ImsResult((ImsResult *)&v8);
}

void sub_1C551DF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void LazuliGroupParticipant::create(uint64_t *a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  long long v10 = (char *)operator new(0xE8uLL);
  *((void *)v10 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)long long v10 = &unk_1F20D8A20;
  uint64_t v12 = *a1;
  long long v11 = (std::__shared_weak_count *)a1[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a4 + 8);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "msg.participant");
  int v14 = v10 + 24;
  ImsLogContainer::ImsLogContainer((uint64_t)(v10 + 24), &__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)v10 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  *((void *)v10 + 17) = 0;
  *((void *)v10 + IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20D8978;
  uint64_t v15 = (std::string *)(v10 + 144);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v10 + 2(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *(void *)(a3 + 16);
  }
  *((void *)v10 + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)v10 + 22) = v12;
  *((void *)v10 + 2IMSCallOptions::~IMSCallOptions(this + 3) = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v10 + 24) = 0;
  *((_DWORD *)v10 + 5(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *((void *)v10 + 27) = 0;
  *((void *)v10 + 28) = 0;
  *((void *)v10 + 2ims::StackConfig::~StackConfig(this + 6) = 0;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  *int v14 = &unk_1F20D8A70;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  int v16 = (std::__shared_weak_count *)*((void *)v10 + 17);
  if (!v16)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 2, 1uLL, memory_order_relaxed);
    *((void *)v10 + 1ims::StackConfig::~StackConfig(this + 6) = v14;
    *((void *)v10 + 17) = v10;
    goto LABEL_28;
  }
  if (v16->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 2, 1uLL, memory_order_relaxed);
    *((void *)v10 + 1ims::StackConfig::~StackConfig(this + 6) = v14;
    *((void *)v10 + 17) = v10;
    std::__shared_weak_count::__release_weak(v16);
LABEL_28:
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
  }
  *a5 = v14;
  a5[1] = v10;
}

void sub_1C551E184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  shared_weak_owners = (std::__shared_weak_count *)v15[5].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  ImsLogContainer::~ImsLogContainer(v18);
  if (v17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    if (!v16)
    {
LABEL_5:
      if (!v17) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if (!v16)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v16);
  if (!v17)
  {
LABEL_6:
    if (!v16) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_11:
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  if (!v16)
  {
LABEL_8:
    std::__shared_weak_count::~__shared_weak_count(v15);
    operator delete(v21);
    _Unwind_Resume(a1);
  }
LABEL_7:
  std::__shared_weak_count::__release_weak(v16);
  goto LABEL_8;
}

void LazuliGroupParticipant::addParticipant(uint64_t *a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  long long v9 = (std::__shared_weak_count *)a1[1];
  v16[0] = *a1;
  v16[1] = (uint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v10 = (std::__shared_weak_count *)a5[1];
  v15[0] = *a5;
  v15[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LazuliGroupParticipant::create(v16, a2, a3, (uint64_t)v15, a6);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v11 = *a6;
  uint64_t v12 = *a5;
  uint64_t v13 = (std::__shared_weak_count *)a5[1];
  v14[0] = v12;
  v14[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LazuliGroupParticipant::initAdd(v11, v14, a4);
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1C551E310(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void LazuliGroupParticipant::removeParticipant(uint64_t *a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  long long v9 = (std::__shared_weak_count *)a1[1];
  v16[0] = *a1;
  v16[1] = (uint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v10 = (std::__shared_weak_count *)a5[1];
  v15[0] = *a5;
  v15[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LazuliGroupParticipant::create(v16, a2, a3, (uint64_t)v15, a6);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v11 = *a6;
  uint64_t v12 = *a5;
  uint64_t v13 = (std::__shared_weak_count *)a5[1];
  v14[0] = v12;
  v14[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LazuliGroupParticipant::initRemove(v11, v14, a4);
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1C551E448(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operator<<(uint64_t a1, int a2)
{
  if (a2 == 3)
  {
    int v3 = *(void **)(a1 + 8);
    unint64_t v4 = "ResponseError";
    uint64_t v5 = 13;
  }
  else if (a2 == 2)
  {
    int v3 = *(void **)(a1 + 8);
    unint64_t v4 = "ResponseSuccess";
    uint64_t v5 = 15;
  }
  else
  {
    int v3 = *(void **)(a1 + 8);
    if (a2 == 1)
    {
      unint64_t v4 = "RequestSent";
      uint64_t v5 = 11;
    }
    else
    {
      unint64_t v4 = "??";
      uint64_t v5 = 2;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  *(unsigned char *)(a1 + 17) = 0;
  return a1;
}

{
  void *v3;
  const char *v4;
  uint64_t v5;

  if (a2 == 2)
  {
    int v3 = *(void **)(a1 + 8);
    unint64_t v4 = "Remove";
    uint64_t v5 = 6;
  }
  else
  {
    int v3 = *(void **)(a1 + 8);
    if (a2 == 1)
    {
      unint64_t v4 = "Add";
      uint64_t v5 = 3;
    }
    else
    {
      unint64_t v4 = "??";
      uint64_t v5 = 2;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  *(unsigned char *)(a1 + 17) = 0;
  return a1;
}

void LazuliGroupParticipant::handleResponse(std::__shared_weak_count **a1, uint64_t a2)
{
  uint64_t v4 = ((uint64_t (*)(std::__shared_weak_count **))(*a1)[2].__shared_weak_owners_)(a1);
  ((void (*)(std::__shared_weak_count **, uint64_t))(*a1)->__shared_weak_owners_)(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"partcipant action ", 18);
  *(unsigned char *)(v4 + 17) = 0;
  operator<<(v4, *((_DWORD *)a1 + 37));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" result ", 8);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" for ", 5);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count **))(*(void *)v4 + 32))(v4, a1 + 15);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  *((_DWORD *)a1 + 44) = *(_DWORD *)(a2 + 16);
  if ((*(unsigned int (**)(void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8)))
  {
    (*(void (**)(long long *__return_ptr))(**(void **)(a2 + 8) + 16))(&v7);
    uint64_t v5 = (void **)(a1 + 23);
    if (*((char *)a1 + 207) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)uint64_t v5 = v7;
    a1[25] = v8;
  }
  if ((*(unsigned int (**)(void, void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16)))
  {
    int v6 = 3;
  }
  else
  {
    int v6 = 2;
  }
  LazuliGroupParticipant::setState(a1, v6);
}

void std::__shared_ptr_emplace<LazuliGroupParticipant::create(std::weak_ptr<MessageSession>,std::string const&,std::string const&,SipUri const&,std::shared_ptr<SipDialog>)::LazuliGroupParticipantWrapper,std::allocator<LazuliGroupParticipant::create(std::weak_ptr<MessageSession>,std::string const&,std::string const&,SipUri const&,std::shared_ptr<SipDialog>)::LazuliGroupParticipantWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D8A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliGroupParticipant::create(std::weak_ptr<MessageSession>,std::string const&,std::string const&,SipUri const&,std::shared_ptr<SipDialog>)::LazuliGroupParticipantWrapper,std::allocator<LazuliGroupParticipant::create(std::weak_ptr<MessageSession>,std::string const&,std::string const&,SipUri const&,std::shared_ptr<SipDialog>)::LazuliGroupParticipantWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D8A20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliGroupParticipant::create(std::weak_ptr<MessageSession>,std::string const&,std::string const&,SipUri const&,std::shared_ptr<SipDialog>)::LazuliGroupParticipantWrapper,std::allocator<LazuliGroupParticipant::create(std::weak_ptr<MessageSession>,std::string const&,std::string const&,SipUri const&,std::shared_ptr<SipDialog>)::LazuliGroupParticipantWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void LazuliGroupParticipant::create(std::weak_ptr<MessageSession>,std::string const&,std::string const&,SipUri const&,std::shared_ptr<SipDialog>)::LazuliGroupParticipantWrapper::~LazuliGroupParticipantWrapper(void **a1)
{
  LazuliGroupParticipant::~LazuliGroupParticipant(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t MediaSessionSRVCCHandover::MediaSessionSRVCCHandover(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5, dispatch_object_t *a6)
{
  long long v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v32 = *a2;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v10 = *(void **)a4;
  uint64_t v11 = *(std::__shared_weak_count **)(a4 + 8);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)a1 = &unk_1F20C1128;
  MediaSessionCollection::MediaSessionCollection((MediaSessionCollection *)(a1 + 24));
  long long v31 = a3;
  *(void *)a1 = &unk_1F20B7990;
  *(void *)(a1 + 24) = &unk_1F20B7A00;
  *(void *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 48) = 0;
  uint64_t v12 = operator new(0xB8uLL);
  uint64_t v13 = v12;
  v12[1] = 0;
  void v12[2] = 0;
  *uint64_t v12 = &unk_1F20D8F28;
  uint64_t v14 = (uint64_t)(v12 + 3);
  uint64_t v36 = v10;
  uint64_t v37 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MediaSessionQueue::MediaSessionQueue((uint64_t)(v12 + 3), 0, (uint64_t *)&v36, (long long *)a5, a6);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  *(void *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = v14;
  *(void *)(a1 + 64) = v13;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>(a1 + 56, v13 + 4, v14);
  *(void *)(a1 + 72) = v32;
  *(void *)(a1 + 8(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v9;
  uint64_t v15 = (long long *)a5;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 12(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v10;
  *(void *)(a1 + 128) = v11;
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(void *)a1 = &unk_1F20D8AE8;
  *(void *)(a1 + 24) = &unk_1F20D8B70;
  *(void *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = *v31;
  int v16 = v31 + 1;
  uint64_t v17 = v31[1];
  *(void *)(a1 + 144) = v17;
  uint64_t v18 = a1 + 144;
  uint64_t v19 = v31[2];
  *(void *)(a1 + 152) = v19;
  if (v19)
  {
    *(void *)(v17 + 1ims::StackConfig::~StackConfig(this + 6) = v18;
    *long long v31 = v16;
    void *v16 = 0;
    v31[2] = 0;
  }
  else
  {
    *(void *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = v18;
  }
  if (*(char *)(a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 160), *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else
  {
    long long v20 = *(_OWORD *)a5;
    *(void *)(a1 + 17ims::StackConfig::~StackConfig(this + 6) = *(void *)(a5 + 16);
    *(_OWORD *)(a1 + 16(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v20;
  }
  std::string::basic_string[abi:ne180100]<0>(&v36, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v21 = ims::debug((uint64_t)&v36, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"MediaSessionSRVCCHandover", 25);
  *(unsigned char *)(v21 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v21 + 17) = 0;
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v36);
  }
  unint64_t v22 = *(void **)a4;
  int v23 = *(std::__shared_weak_count **)(a4 + 8);
  long long v24 = (std::__shared_weak_count *)operator new(0xB8uLL);
  long long v25 = v24;
  v24->__shared_owners_ = 0;
  v24->__shared_weak_owners_ = 0;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D8F78;
  long long v26 = &v24[1].__vftable;
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v36 = v22;
  uint64_t v37 = v23;
  MediaSessionQueue::MediaSessionQueue((uint64_t)&v24[1], 0, (uint64_t *)&v36, v15, a6);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  v25[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D8D08;
  v25[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D8E08;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  shared_weak_owners = (std::__shared_weak_count *)v25[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_36;
    }
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v25[1].__shared_owners_ = (uint64_t)v26;
    v25[1].__shared_weak_owners_ = (uint64_t)v25;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v25[1].__shared_owners_ = (uint64_t)v26;
    v25[1].__shared_weak_owners_ = (uint64_t)v25;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
LABEL_36:
  long long v28 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = v26;
  *(void *)(a1 + 64) = v25;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  return a1;
}

void sub_1C551ECD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__tree<unsigned int>::destroy(v25, *((void **)v24 + 18));
  MediaSessionQueuedCollectionIterator::~MediaSessionQueuedCollectionIterator(v24);
  _Unwind_Resume(a1);
}

void MediaSessionSRVCCHandover::~MediaSessionSRVCCHandover(MediaSessionSRVCCHandover *this)
{
  *(void *)this = &unk_1F20D8AE8;
  *((void *)this + IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20D8B70;
  std::string::basic_string[abi:ne180100]<0>(v5, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"~MediaSessionSRVCCHandover", 26);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  std::__tree<unsigned int>::destroy((uint64_t)this + 136, *((void **)this + 18));
  MediaSessionQueuedCollectionIterator::~MediaSessionQueuedCollectionIterator(this);
}

{
  uint64_t vars8;

  MediaSessionSRVCCHandover::~MediaSessionSRVCCHandover(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'MediaSessionSRVCCHandover::~MediaSessionSRVCCHandover(MediaSessionSRVCCHandover *this)
{
}

{
  uint64_t vars8;

  MediaSessionSRVCCHandover::~MediaSessionSRVCCHandover((MediaSessionSRVCCHandover *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

void MediaSessionSRVCCHandover::srvccHandoverStarted(MediaSessionSRVCCHandover *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v8, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(v7, "");
  uint64_t v2 = ims::debug((uint64_t)&v8, (uint64_t)v7);
  if (this)
  {
    uint64_t v3 = v2;
    char v4 = *(void **)(v2 + 8);
    size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"srvccHandoverStarted", 20);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [activeSessionId=", 18);
    *(unsigned char *)(v3 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v6, ", ");
    ims::join<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>();
  }
  __cxa_bad_typeid();
}

void sub_1C551F240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionSRVCCHandover::srvccHandoverFailed(MediaSessionSRVCCHandover *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v8, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(v7, "");
  uint64_t v2 = ims::debug((uint64_t)&v8, (uint64_t)v7);
  if (this)
  {
    uint64_t v3 = v2;
    char v4 = *(void **)(v2 + 8);
    size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"srvccHandoverFailed", 19);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [activeSessionId=", 18);
    *(unsigned char *)(v3 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v6, ", ");
    ims::join<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>();
  }
  __cxa_bad_typeid();
}

void sub_1C551F62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *MediaSessionSRVCCHandover::srvccHandoverCompleted(MediaSessionSRVCCHandover *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v19, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v19, (uint64_t)&__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  char v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"srvccHandoverCompleted", 22);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v3 + 32))(v3, (char *)this + 160);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v18 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v19);
  }
  uint64_t v6 = *((void *)this + 15);
  if (v6)
  {
    RTPSharedPointerBase::getShared<MediaSessionCollectionIterator>((uint64_t)this, &v12);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v6 + 152))(&v14, v6, &v12);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  uint64_t result = (void *)*((void *)this + 9);
  if (result)
  {
    uint64_t v19 = 0;
    long long v20 = 0;
    uint64_t v21 = 0;
    (*(void (**)(void **__return_ptr))(*result + 80))(&v19);
    uint64_t v8 = v20;
    if (v20 != &v19)
    {
      long long v9 = 0;
      do
      {
        (*(void (**)(void **__return_ptr))(**((void **)this + 9) + 24))(&__p);
        uint64_t v11 = __p;
        long long v10 = v17;
        std::string __p = 0;
        uint64_t v17 = 0;
        if (v9)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
        }
        if (v11) {
          (*(void (**)(void *, void))(*(void *)v11 + 24))(v11, 0);
        }
        uint64_t v8 = (void **)v8[1];
        long long v9 = v10;
      }
      while (v8 != &v19);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
    return std::__list_imp<unsigned long long>::clear(&v19);
  }
  return result;
}

void sub_1C551F9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionSRVCCHandover::remove(std::__shared_weak_count **this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v18, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)((*this)[-1].__shared_weak_owners_ + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)((*this)[-1].__shared_weak_owners_ + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"remove", 6);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" collection=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  *a3 = 0;
  a3[1] = 0;
  MediaSessionQueuedCollectionIterator::remove((MediaSessionQueuedCollectionIterator *)this, a2);
  if (!((uint64_t (*)(std::__shared_weak_count *))this[9]->__vftable[1].__on_zero_shared)(this[9]))
  {
    uint64_t v11 = this[15];
    long long v10 = this[16];
    uint64_t v12 = v11;
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = this[15];
    }
    shared_owners = v12[14].__shared_owners_;
    if (shared_owners) {
      dispatch_retain((dispatch_object_t)v12[14].__shared_owners_);
    }
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1174405120;
    void v14[2] = ___ZN25MediaSessionSRVCCHandover6removeEy_block_invoke;
    v14[3] = &__block_descriptor_tmp_52;
    v14[4] = v11;
    uint64_t v15 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_async(shared_owners, v14);
    if (shared_owners) {
      dispatch_release(shared_owners);
    }
    if (v15) {
      std::__shared_weak_count::__release_weak(v15);
    }
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1C551FCB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  long long v28 = *(std::__shared_weak_count **)(v26 + 8);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN25MediaSessionSRVCCHandover6removeEy_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      char v4 = v3;
      size_t v5 = *(RTPManager **)(a1 + 32);
      if (v5) {
        RTPManager::srvccHandoverCompleted(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C551FD5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10RTPManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10RTPManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void non-virtual thunk to'MediaSessionSRVCCHandover::remove(std::__shared_weak_count **this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

uint64_t MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::terminate(MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *((void *)this + 17);
      if (v4)
      {
        std::string::basic_string[abi:ne180100]<0>(v14, "rtp.srvcc");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v5 = ims::debug((uint64_t)v14, (uint64_t)__p);
        uint64_t v6 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        size_t v7 = strlen(v6);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)v6, v7);
        *(unsigned char *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"terminate", 9);
        *(unsigned char *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
        *(unsigned char *)(v5 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v4 + 176))(v4);
        std::ostream::operator<<();
        *(unsigned char *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v5 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v5 + 17) = 0;
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        (*(void (**)(uint64_t, void))(*(void *)v4 + 24))(v4, 0);
LABEL_15:
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
        return 1;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v14, (uint64_t)__p);
  size_t v9 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  size_t v10 = strlen(v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)v9, v10);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"terminate", 9);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=0]", 14);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (v3) {
    goto LABEL_15;
  }
  return 1;
}

void sub_1C55200AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::terminate(MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *this)
{
  return 1;
}

void *MediaSessionQMISRVCCHandover::MediaSessionQMISRVCCHandover(void *a1, uint64_t *a2, void *a3, void *a4, uint64_t a5, dispatch_object_t *a6)
{
  size_t v7 = (std::__shared_weak_count *)a2[1];
  v22[0] = *a2;
  v22[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a3 + 1;
  size_t v9 = (void *)a3[1];
  char v19 = (void **)*a3;
  long long v20 = v9;
  if (a3[2])
  {
    void v9[2] = &v20;
    *a3 = v8;
    *uint64_t v8 = 0;
    a3[2] = 0;
  }
  else
  {
    char v19 = &v20;
  }
  size_t v10 = (std::__shared_weak_count *)a4[1];
  v18[0] = *a4;
  v18[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MediaSessionSRVCCHandover::MediaSessionSRVCCHandover((uint64_t)a1, v22, &v19, (uint64_t)v18, a5, a6);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__tree<unsigned int>::destroy((uint64_t)&v19, v20);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *a1 = &unk_1F20D8C10;
  a1[3] = &unk_1F20D8C98;
  std::string::basic_string[abi:ne180100]<0>(v16, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::debug((uint64_t)v16, (uint64_t)__p);
  size_t v12 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v12);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" created", 8);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  return a1;
}

void sub_1C5520344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  MediaSessionSRVCCHandover::~MediaSessionSRVCCHandover(v25);
  _Unwind_Resume(a1);
}

void MediaSessionQMISRVCCHandover::~MediaSessionQMISRVCCHandover(MediaSessionQMISRVCCHandover *this)
{
  *(void *)this = &unk_1F20D8C10;
  *((void *)this + IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20D8C98;
  std::string::basic_string[abi:ne180100]<0>(v6, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v6, (uint64_t)__p);
  size_t v3 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v3);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" destroyed", 10);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  MediaSessionSRVCCHandover::~MediaSessionSRVCCHandover(this);
}

{
  uint64_t vars8;

  MediaSessionQMISRVCCHandover::~MediaSessionQMISRVCCHandover(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'MediaSessionQMISRVCCHandover::~MediaSessionQMISRVCCHandover(MediaSessionQMISRVCCHandover *this)
{
}

{
  uint64_t vars8;

  MediaSessionQMISRVCCHandover::~MediaSessionQMISRVCCHandover((MediaSessionQMISRVCCHandover *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

void *MediaSessionQMISRVCCHandover::srvccHandoverStarted(MediaSessionQMISRVCCHandover *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v14, (uint64_t)&__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"srvccHandoverStarted", 20);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v3 + 32))(v3, (char *)this + 160);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" collection=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v14);
  }
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  (*(void (**)(void **__return_ptr))(**((void **)this + 9) + 80))(&v14);
  uint64_t v6 = v15;
  if (v15 != &v14)
  {
    char v7 = 0;
    do
    {
      (*(void (**)(void **__return_ptr))(**((void **)this + 9) + 24))(&__p);
      size_t v9 = __p;
      uint64_t v8 = v12;
      std::string __p = 0;
      size_t v12 = 0;
      if (v7)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      (*(void (**)(void *, void))(*(void *)v9 + 40))(v9, 0);
      uint64_t v6 = (void **)v6[1];
      char v7 = v8;
    }
    while (v6 != &v14);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return std::__list_imp<unsigned long long>::clear(&v14);
}

void sub_1C5520840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionQMISRVCCHandover::srvccHandoverFailed(MediaSessionQMISRVCCHandover *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v8, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  uint64_t v2 = ims::debug((uint64_t)&v8, (uint64_t)&v7);
  if (this)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void **)(v2 + 8);
    size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"srvccHandoverFailed", 19);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v3 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v6, ", ");
    ims::join<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>();
  }
  __cxa_bad_typeid();
}

void sub_1C5520C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  std::__list_imp<unsigned long long>::clear(&a27);
  _Unwind_Resume(a1);
}

void MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::~MediaSessionSRVCCQueue(MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *this)
{
  MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::~MediaSessionSRVCCQueue(this);
  JUMPOUT(0x1C878E320);
}

{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  *(void *)this = &unk_1F20D8D08;
  *((void *)this + IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20D8E08;
  std::string::basic_string[abi:ne180100]<0>(v5, "rtp.srvcc.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"~MediaSessionSRVCCQueue", 23);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  MediaSessionQueue::~MediaSessionQueue(this);
}

void non-virtual thunk to'MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::~MediaSessionSRVCCQueue(MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *this)
{
}

{
  uint64_t vars8;

  MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::~MediaSessionSRVCCQueue((MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

void MediaSessionCollection::MediaSessionCollection(MediaSessionCollection *this)
{
  *(void *)this = &unk_1F20B6458;
  std::string::basic_string[abi:ne180100]<0>(v4, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v1 = ims::debug((uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v1 + 8), (uint64_t)"MediaSessionCollection", 22);
  *(unsigned char *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v1 + 17) = 0;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1C5520E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<MediaSessionQueue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D8F28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MediaSessionQueue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D8F28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<MediaSessionQueue>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t MediaSessionQueue::MediaSessionQueue(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, dispatch_object_t *a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)a1 = &unk_1F20C1128;
  char v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = *a3;
  char v15 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MediaSessionInterface::MediaSessionInterface(a1 + 24, a2, &v14, a4, a5);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  *(void *)a1 = &unk_1F20D81D0;
  *(void *)(a1 + 24) = &unk_1F20D82D0;
  *(void *)(a1 + 112) = a1 + 112;
  *(void *)(a1 + 12(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = a1 + 112;
  *(void *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 152) = 4;
  std::string::basic_string[abi:ne180100]<0>(v12, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::info((uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"MediaSessionQueue", 17);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" stackId=", 9);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v8 + 32))(v8, a4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return a1;
}

void sub_1C5521114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(v22 + 144);
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  std::__list_imp<std::pair<MediaSessionQueue::Action,std::weak_ptr<MediaSessionInterface>>>::clear(v24);
  MediaSessionInterface::~MediaSessionInterface(v23);
  int v27 = *(std::__shared_weak_count **)(v22 + 16);
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MediaSessionSRVCCHandover::MediaSessionSRVCCQueue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D8F78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MediaSessionSRVCCHandover::MediaSessionSRVCCQueue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D8F78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<MediaSessionSRVCCHandover::MediaSessionSRVCCQueue>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void ims::join<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C552148C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SipStack::SipStack(uint64_t a1, uint64_t a2, uint64_t a3, char a4, const std::string *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.stack");
  ImsLogContainer::ImsLogContainer(a1, &__p, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 12(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)a1 = &unk_1F20D8FC8;
  *(void *)(a1 + 104) = &unk_1F20D9048;
  *(void *)(a1 + 112) = &unk_1F20D9078;
  *(void *)(a1 + 16(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  SipStackConfig::SipStackConfig((SipStackConfig *)(a1 + 208));
  *(void *)(a1 + 272(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 2728));
  std::operator+<char>();
  ImsPowerAssertion::ImsPowerAssertion(a1 + 2880, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  BambiAccessBarring::BambiAccessBarring((BambiAccessBarring *)(a1 + 2928));
  *(void *)(a1 + 321ims::StackConfig::~StackConfig(this + 6) = 0;
  *(unsigned char *)(a1 + 3224) = 0;
  *(void *)(a1 + 3288) = 0;
  *(unsigned char *)(a1 + 329ims::StackConfig::~StackConfig(this + 6) = 0;
  *(_OWORD *)(a1 + 3232) = 0u;
  *(_OWORD *)(a1 + 3248) = 0u;
  *(_OWORD *)(a1 + 3264) = 0u;
  *(unsigned char *)(a1 + 328(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 336(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(unsigned char *)(a1 + 3368) = 0;
  *(unsigned char *)(a1 + 3352) = 0;
  *(_OWORD *)(a1 + 3304) = 0u;
  *(_OWORD *)(a1 + 332(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a1 + 333ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)(a1 + 337ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 3392) = 0;
  *(void *)(a1 + 3384) = 0;
  *(unsigned char *)(a1 + 3208) = 0;
  *(_OWORD *)(a1 + 317ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(_OWORD *)(a1 + 3192) = 0u;
  *(_OWORD *)(a1 + 3144) = 0u;
  *(_OWORD *)(a1 + 316(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(a1 + 3400));
  *(_OWORD *)(a1 + 405ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(_OWORD *)(a1 + 4072) = 0u;
  *(_OWORD *)(a1 + 4024) = 0u;
  *(_OWORD *)(a1 + 404(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a1 + 3992) = 0u;
  *(_OWORD *)(a1 + 4008) = 0u;
  *(_WORD *)(a1 + 4088) = 257;
  *(_DWORD *)(a1 + 410(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(_WORD *)(a1 + 4104) = 256;
  *(unsigned char *)(a1 + 410ims::StackConfig::~StackConfig(this + 6) = 1;
  *(_OWORD *)(a1 + 4112) = 0u;
  *(_OWORD *)(a1 + 4128) = 0u;
  *(_OWORD *)(a1 + 4144) = 0u;
  *(_OWORD *)(a1 + 416(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a1 + 417ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(_OWORD *)(a1 + 4192) = 0u;
  *(_OWORD *)(a1 + 4208) = 0u;
  *(void *)(a1 + 4224) = 0;
  *(unsigned char *)(a1 + 4232) = 1;
  *(void *)(a1 + 4292) = 0;
  *(_OWORD *)(a1 + 424(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a1 + 425ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(_OWORD *)(a1 + 4272) = 0u;
  *(_DWORD *)(a1 + 4287) = 0;
  *(_OWORD *)(a1 + 4304) = 0u;
  *(_OWORD *)(a1 + 432(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_WORD *)(a1 + 433ims::StackConfig::~StackConfig(this + 6) = 1;
  *(unsigned char *)(a1 + 4338) = 0;
  *(unsigned char *)(a1 + 4344) = 0;
  *(void *)(a1 + 4352) = 0;
  *(_DWORD *)(a1 + 436(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = a3;
  *(void *)(a1 + 2872) = 0;
  *(unsigned char *)(a1 + 17ims::StackConfig::~StackConfig(this + 6) = a4;
  *(unsigned char *)(a1 + 177) = -1;
  std::string::operator=((std::string *)(a1 + 4160), a5);
  *(void *)(a1 + 2832) = a1 + 104;
  std::string::operator=((std::string *)(a1 + 2776), (const std::string *)(a1 + 8));
  std::string::operator=((std::string *)(a1 + 2800), a5);
  *(void *)(a1 + 2912) = a2;
  *(_DWORD *)(a1 + 361ims::StackConfig::~StackConfig(this + 6) = 0;
  *(_DWORD *)(a1 + 369ims::StackConfig::~StackConfig(this + 6) = 1;
  size_t v10 = *(std::__shared_weak_count **)(a1 + 3152);
  *(void *)(a1 + 3144) = 0;
  *(void *)(a1 + 3152) = 0;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return a1;
}

void sub_1C5521768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, ims::StackConfig *a10, void **a11, SipTimerContainer *a12, void **a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  ims::PrefsContainer::release((ims::PrefsContainer *)(v19 + 3384));
  ims::AccessNetworks::~AccessNetworks(v21);
  int v23 = *(std::__shared_weak_count **)(v19 + 3152);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  BambiAccessBarring::~BambiAccessBarring(v20);
  ImsPowerAssertion::~ImsPowerAssertion(a11);
  SipTimerContainer::~SipTimerContainer(a12);
  SipStackConfig::~SipStackConfig(a13);
  long long v24 = *(std::__shared_weak_count **)(v19 + 192);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v19 + 168);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(v19 + 128);
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  ImsLogContainer::~ImsLogContainer((void **)v19);
  _Unwind_Resume(a1);
}

void SipStack::construct(SipStack *this)
{
}

void sub_1C5521C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v17);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void SipStack::create(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, const std::string *a4@<X3>, SipStack **a5@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  char v6 = a3;
  *a5 = 0;
  a5[1] = 0;
  std::allocate_shared[abi:ne180100]<SipStack,std::allocator<SipStack>,BambiCallHandler *&,BambiClient *&,BOOL &,std::string const&,void>(&v8, &v7, &v6, a4, a5);
  SipStack::construct(*a5);
}

void sub_1C5521D1C(_Unwind_Exception *exception_object)
{
  char v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::destroy(SipStack *this)
{
  uint64_t v2 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"destroy ", 8);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v2 + 32))(v2, (char *)this + 4160);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = *((void *)this + 18);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *((void *)this + 18) = 0;
  }
  uint64_t v4 = *((void *)this + 19);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *((void *)this + 19) = 0;
  }
  char v5 = (std::__shared_weak_count *)*((void *)this + 21);
  *((void *)this + 2(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  char v6 = (std::__shared_weak_count *)*((void *)this + 394);
  long long v7 = 0uLL;
  *(_OWORD *)((char *)this + 3144) = 0u;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    long long v7 = 0uLL;
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 531);
  *((_OWORD *)this + 265) = v7;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  size_t v9 = (std::__shared_weak_count *)*((void *)this + 533);
  *((_OWORD *)this + 26ims::StackConfig::~StackConfig(this + 6) = 0u;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  size_t v10 = (void **)*((void *)this + 340);
  if (v10)
  {
    SipStackConfig::~SipStackConfig(v10);
    size_t v10 = (void **)MEMORY[0x1C878E320]();
    *((void *)this + 34(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  }
  uint64_t v11 = ims::logger((ims *)v10);
  ImsLogger::removeStackFromLogTagMap(v11, (unsigned __int8 *)this + 4160);
}

void SipStack::~SipStack(SipStack *this)
{
  *(void *)this = &unk_1F20D8FC8;
  *((void *)this + 1IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20D9048;
  *((void *)this + 14) = &unk_1F20D9078;
  SipStack::destroy(this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 541);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 539);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 535);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  char v5 = (std::__shared_weak_count *)*((void *)this + 533);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  char v6 = (std::__shared_weak_count *)*((void *)this + 531);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 4231) < 0) {
    operator delete(*((void **)this + 526));
  }
  if (*((char *)this + 4207) < 0) {
    operator delete(*((void **)this + 523));
  }
  if (*((char *)this + 4183) < 0) {
    operator delete(*((void **)this + 520));
  }
  if (*((char *)this + 4159) < 0) {
    operator delete(*((void **)this + 517));
  }
  if (*((char *)this + 4135) < 0) {
    operator delete(*((void **)this + 514));
  }
  ims::StackConfig::~StackConfig((void **)this + 422);
  if (*((char *)this + 3351) < 0) {
    operator delete(*((void **)this + 416));
  }
  if (*((char *)this + 3327) < 0) {
    operator delete(*((void **)this + 413));
  }
  if (*((char *)this + 3279) < 0) {
    operator delete(*((void **)this + 407));
  }
  if (*((char *)this + 3255) < 0) {
    operator delete(*((void **)this + 404));
  }
  if (*((char *)this + 3207) < 0) {
    operator delete(*((void **)this + 398));
  }
  if (*((char *)this + 3183) < 0) {
    operator delete(*((void **)this + 395));
  }
  long long v7 = (std::__shared_weak_count *)*((void *)this + 394);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  BambiAccessBarring::~BambiAccessBarring((BambiAccessBarring *)((char *)this + 2928));
  ImsPowerAssertion::~ImsPowerAssertion((void **)this + 360);
  SipTimerContainer::~SipTimerContainer((SipTimerContainer *)((char *)this + 2728));
  SipStackConfig::~SipStackConfig((void **)this + 26);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  size_t v9 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  size_t v10 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  SipStack::~SipStack(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipStack::~SipStack(SipStack *this)
{
}

{
  SipStack::~SipStack((SipStack *)((char *)this - 112));
}

{
  uint64_t vars8;

  SipStack::~SipStack((SipStack *)((char *)this - 104));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipStack::~SipStack((SipStack *)((char *)this - 112));
  JUMPOUT(0x1C878E320);
}

void SipStack::handleTimer(SipStack *this, unsigned __int8 *a2)
{
  uint64_t v2 = (const void **)a2;
  uint64_t v4 = (char *)this + 4288;
  uint64_t v5 = a2[23];
  size_t v6 = *((void *)a2 + 1);
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = a2[23];
  }
  else {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (v7 == 22)
  {
    if ((v5 & 0x80u) == 0) {
      uint64_t v11 = (uint64_t *)a2;
    }
    else {
      uint64_t v11 = *(uint64_t **)a2;
    }
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    uint64_t v14 = *(uint64_t *)((char *)v11 + 14);
    if (v12 == 0x697463656E6E6F43 && v13 == 0x7473794879746976 && v14 == 0x7369736572657473)
    {
      SipStack::handleConnectivityHysteresisTimeout(this);
      return;
    }
  }
  else
  {
    if (v7 != 14) {
      goto LABEL_32;
    }
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, "MediaInitTimer", v6)) {
        goto LABEL_32;
      }
    }
    else if (a2[23])
    {
      uint64_t v8 = "MediaInitTimer";
      size_t v9 = a2;
      uint64_t v10 = a2[23];
      while (*v9 == *(unsigned __int8 *)v8)
      {
        ++v9;
        ++v8;
        if (!--v10) {
          goto LABEL_27;
        }
      }
      goto LABEL_32;
    }
LABEL_27:
    if (*((_DWORD *)this + 50) == 1)
    {
      *((_DWORD *)this + 5(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
      v4[50] = 0;
      uint64_t v17 = *((void *)this + 359);
      if (v17)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v44, (void *)this + 15);
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        v39[0] = &unk_1F20B2680;
        v39[1] = &_bambiDomain;
        int v40 = 1073741830;
        uint64_t v18 = ImsResult::operator<<<char [21]>((uint64_t)v39, "media init timed out");
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v17 + 16))(v17, &v44, v18);
        ImsResult::~ImsResult((ImsResult *)v39);
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
      }
      ImsPowerAssertion::deinitialize((uint64_t)this + 2880);
      return;
    }
  }
LABEL_32:
  uint64_t v19 = qword_1EBBDAFB8;
  if (byte_1EBBDAFC7 >= 0) {
    uint64_t v19 = byte_1EBBDAFC7;
  }
  if (v7 != v19) {
    goto LABEL_45;
  }
  if (byte_1EBBDAFC7 >= 0) {
    long long v20 = &kAccessNetworkRefreshDelayTimer;
  }
  else {
    long long v20 = (uint64_t *)kAccessNetworkRefreshDelayTimer;
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*v2, v20, v6)) {
      goto LABEL_45;
    }
LABEL_56:
    uint64_t v25 = (void *)*((void *)this + 17);
    ims::AccessNetworks::AccessNetworks(&v28, (long long *)((char *)this + 3160));
    BambiClient::notifyCallsOfAccessNetworkChange(v25, (uint64_t)this + 4160, (uint64_t)&v28, 0);
    if (v38 < 0) {
      operator delete(__p);
    }
    if (v36 < 0) {
      operator delete(v35);
    }
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (v30 < 0) {
      operator delete(v29);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (!v5) {
    goto LABEL_56;
  }
  uint64_t v21 = v2;
  uint64_t v22 = v5;
  while (*(unsigned __int8 *)v21 == *(unsigned __int8 *)v20)
  {
    uint64_t v21 = (const void **)((char *)v21 + 1);
    long long v20 = (uint64_t *)((char *)v20 + 1);
    if (!--v22) {
      goto LABEL_56;
    }
  }
LABEL_45:
  uint64_t v23 = qword_1EBBDB9C8;
  if (byte_1EBBDB9D7 >= 0) {
    uint64_t v23 = byte_1EBBDB9D7;
  }
  if (v7 != v23) {
    return;
  }
  if (byte_1EBBDB9D7 >= 0) {
    long long v24 = &kWaitForDeregistrationTimer;
  }
  else {
    long long v24 = (uint64_t *)kWaitForDeregistrationTimer;
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*v2, v24, v6)) {
      return;
    }
    goto LABEL_69;
  }
  if (!v5)
  {
LABEL_69:
    int v26 = *v4;
    *uint64_t v4 = 0;
    if (*((_DWORD *)this + 50) == 3)
    {
      if (v26)
      {
        SipStack::internalDeinitialize(this, 1);
      }
      else
      {
        uint64_t v27 = (*(uint64_t (**)(SipStack *, uint64_t *))(*(void *)this + 64))(this, v24);
        (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"registration terminated, but I wasn't waiting for deregistration", 64);
        *(unsigned char *)(v27 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v27 + 17) = 0;
      }
    }
    return;
  }
  while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v24)
  {
    uint64_t v2 = (const void **)((char *)v2 + 1);
    long long v24 = (uint64_t *)((char *)v24 + 1);
    if (!--v5) {
      goto LABEL_69;
    }
  }
}

void sub_1C5522688(_Unwind_Exception *a1)
{
  ImsResult::~ImsResult((ImsResult *)(v1 - 152));
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 72);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

void SipStack::handleConnectivityHysteresisTimeout(SipStack *this)
{
  uint64_t v1 = (char *)this + 4232;
  if (!*((unsigned char *)this + 4232))
  {
    char *v1 = 1;
    uint64_t v3 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Connectivity hysteresis timer expired, dropping registration", 60);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    uint64_t v4 = *((void *)this + 18);
    uint64_t v5 = *(void *)(v4 + 248);
    size_t v6 = *(std::__shared_weak_count **)(v4 + 256);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v5 + 168))(v5, 17, 0, 1);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    SipTransportLayer::removeConnections(*((SipTransportLayer **)this + 20), 0, 1, 1);
    v1[112] = 1;
    SipStack::reportDeferralMetric(this);
  }
}

void sub_1C5522834(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::internalDeinitialize(SipStack *this, int a2)
{
  if (*((_DWORD *)this + 50) == 3)
  {
    uint64_t v3 = (char *)this + 4183;
    if (a2 && *((unsigned char *)this + 4288))
    {
      uint64_t v4 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v4);
      uint64_t v5 = *(void **)(v4 + 8);
      size_t v6 = "waiting for deregistration before deinitializing";
      uint64_t v7 = 48;
    }
    else
    {
      uint64_t v8 = (char *)this + 4289;
      if (!*((unsigned char *)this + 4289))
      {
        *uint64_t v8 = 1;
        if (*((unsigned char *)this + 2681)) {
          SipStack::cleanUpLazuliMessagesAndSessions(this);
        }
        *((_DWORD *)this + 5(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
        BambiDeregisterHandler::stop(*((int8x8_t **)this + 532));
        v3[155] = 0;
        SipTimerContainer::cancelAllTimers((SipTimerContainer *)((char *)this + 2728));
        SipUserAgent::deinitialize(*((SipUserAgent **)this + 18));
        SipTransactionLayer::deinitialize(*((SipTransactionLayer **)this + 19));
        SipTransportLayer::deinitialize(*((SipTransportLayer **)this + 20));
        *((unsigned char *)this + 177) = -1;
        size_t v9 = (std::__shared_weak_count *)*((void *)this + 24);
        *((void *)this + 2IMSCallOptions::~IMSCallOptions(this + 3) = 0;
        *((void *)this + 24) = 0;
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        v3[105] = 0;
        uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 535);
        *((_OWORD *)this + 267) = 0u;
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        if (*((unsigned char *)this + 176)) {
          std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(*((void *)this + 17) + 728));
        }
        uint64_t v11 = *((void *)this + 17);
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v18, (void *)this + 15);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 240))(v11, &v18);
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        SipStack::carrierIdentifier(this, &__p);
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v15, (void *)this + 15);
        BambiPrefsManager::unsubscribe((BambiPrefsManager *)&__p, &v15);
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v12 = (const SipStackConfig *)*((void *)this + 340);
        if (v12)
        {
          uint64_t v13 = (void *)*((void *)this + 17);
          if (*v3 < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 520), *((void *)this + 521));
            uint64_t v12 = (const SipStackConfig *)*((void *)this + 340);
          }
          else
          {
            std::string __p = *(std::string *)((char *)this + 4160);
          }
          BambiClient::initializeStack(v13, (unsigned __int8 *)&__p, v12);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v14 = (void **)*((void *)this + 340);
          if (v14)
          {
            SipStackConfig::~SipStackConfig(v14);
            MEMORY[0x1C878E320]();
          }
          *((void *)this + 34(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
        }
        goto LABEL_8;
      }
      uint64_t v4 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v4);
      uint64_t v5 = *(void **)(v4 + 8);
      size_t v6 = "already in internalDeinitialize";
      uint64_t v7 = 31;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    *(unsigned char *)(v4 + 17) = 0;
    uint64_t v8 = (unsigned char *)(v4 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_8:
    *uint64_t v8 = 0;
  }
}

void sub_1C5522B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  unsigned char *v19 = 0;
  _Unwind_Resume(exception_object);
}

void SipStack::initialize(SipStack *this, const SipStackConfig *a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)this + 2880;
  ImsPowerAssertion::initialize((ImsPowerAssertion *)((char *)this + 2880), 300.0, *((_DWORD *)a2 + 508) == 2, (uint64_t)v73);
  ImsResult::~ImsResult((ImsResult *)v73);
  *((unsigned char *)this + 429(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  int v5 = *((_DWORD *)this + 50);
  if ((v5 - 1) >= 2)
  {
    if (v5 == 3)
    {
      BOOL v12 = *((void *)this + 340) == 0;
      uint64_t v13 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v13);
      uint64_t v14 = *(void **)(v13 + 8);
      if (v12)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"deferring initialization until we've finished previous deinitialize", 67);
        *(unsigned char *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v13 + 17) = 0;
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"we already have an initialize pending. Hang on.", 47);
        *(unsigned char *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v13 + 17) = 0;
        unint64_t v15 = (void **)*((void *)this + 340);
        if (v15)
        {
          SipStackConfig::~SipStackConfig(v15);
          MEMORY[0x1C878E320]();
        }
      }
      operator new();
    }
    goto LABEL_207;
  }
  if (*(_DWORD *)a2 != *((_DWORD *)this + 52)
    || *((_DWORD *)a2 + 1) != *((_DWORD *)this + 53)
    || *((_DWORD *)a2 + 2) != *((_DWORD *)this + 54)
    || *((_DWORD *)a2 + 3) != *((_DWORD *)this + 55)
    || *((_DWORD *)a2 + 4) != *((_DWORD *)this + 56)
    || *((_DWORD *)a2 + 5) != *((_DWORD *)this + 57)
    || *((_DWORD *)a2 + 6) != *((_DWORD *)this + 58)
    || *((_DWORD *)a2 + 7) != *((_DWORD *)this + 59)
    || *((unsigned __int8 *)a2 + 35) != *((unsigned __int8 *)this + 243)
    || *((unsigned __int8 *)a2 + 33) != *((unsigned __int8 *)this + 241)
    || *((unsigned __int8 *)a2 + 34) != *((unsigned __int8 *)this + 242)
    || *((unsigned __int8 *)a2 + 32) != *((unsigned __int8 *)this + 240)
    || *((_DWORD *)a2 + 9) != *((_DWORD *)this + 61)
    || *((unsigned __int8 *)a2 + 40) != *((unsigned __int8 *)this + 248)
    || *((unsigned __int8 *)a2 + 41) != *((unsigned __int8 *)this + 249)
    || !SipUri::equals((const SipStackConfig *)((char *)a2 + 48), (const SipUri *)((char *)this + 256), 1)
    || *((unsigned __int8 *)a2 + 456) != *((unsigned __int8 *)this + 664)
    || !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 464, (unsigned __int8 *)this + 672)
    || !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 488, (unsigned __int8 *)this + 696)
    || !SipTimers::operator==((void *)a2 + 64, *((void **)this + 91), *((void *)this + 93))
    || *((unsigned __int8 *)a2 + 544) != *((unsigned __int8 *)this + 752)
    || *((unsigned __int8 *)a2 + 545) != *((unsigned __int8 *)this + 753)
    || *((unsigned __int8 *)a2 + 546) != *((unsigned __int8 *)this + 754)
    || *((unsigned __int8 *)a2 + 547) != *((unsigned __int8 *)this + 755)
    || *((unsigned __int8 *)a2 + 548) != *((unsigned __int8 *)this + 756)
    || !SipParameterMap::operator==((void *)a2 + 69, (uint64_t)this + 760)
    || *((_DWORD *)a2 + 148) != *((_DWORD *)this + 200)
    || *((_DWORD *)a2 + 149) != *((_DWORD *)this + 201)
    || *((_DWORD *)a2 + 150) != *((_DWORD *)this + 202)
    || *((_DWORD *)a2 + 151) != *((_DWORD *)this + 203)
    || *((unsigned __int8 *)a2 + 608) != *((unsigned __int8 *)this + 816)
    || *((unsigned __int8 *)a2 + 609) != *((unsigned __int8 *)this + 817)
    || *((unsigned __int8 *)a2 + 610) != *((unsigned __int8 *)this + 818)
    || *((unsigned __int8 *)a2 + 611) != *((unsigned __int8 *)this + 819)
    || *((unsigned __int8 *)a2 + 612) != *((unsigned __int8 *)this + 820)
    || *((unsigned __int8 *)a2 + 613) != *((unsigned __int8 *)this + 821)
    || *((unsigned __int8 *)a2 + 614) != *((unsigned __int8 *)this + 822)
    || *((unsigned __int8 *)a2 + 615) != *((unsigned __int8 *)this + 823)
    || *((unsigned __int8 *)a2 + 616) != *((unsigned __int8 *)this + 824)
    || *((unsigned __int8 *)a2 + 617) != *((unsigned __int8 *)this + 825)
    || *((unsigned __int8 *)a2 + 618) != *((unsigned __int8 *)this + 826)
    || *((unsigned __int8 *)a2 + 619) != *((unsigned __int8 *)this + 827)
    || *((unsigned __int8 *)a2 + 620) != *((unsigned __int8 *)this + 828)
    || *((unsigned __int8 *)a2 + 621) != *((unsigned __int8 *)this + 829)
    || *((unsigned __int8 *)a2 + 622) != *((unsigned __int8 *)this + 830)
    || *((_DWORD *)a2 + 156) != *((_DWORD *)this + 208)
    || *((unsigned __int8 *)a2 + 628) != *((unsigned __int8 *)this + 836)
    || *((_DWORD *)a2 + 158) != *((_DWORD *)this + 210)
    || !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 640, (unsigned __int8 *)this + 848)
    || !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 664, (unsigned __int8 *)this + 872)
    || *((unsigned __int8 *)a2 + 688) != *((unsigned __int8 *)this + 896)
    || *((unsigned __int8 *)a2 + 689) != *((unsigned __int8 *)this + 897)
    || !SipResponseCodeMap::operator==((void *)a2 + 87, (uint64_t)this + 904)
    || !SipResponseCodeMap::operator==((void *)a2 + 91, (uint64_t)this + 936)
    || !SipResponseCodeMap::operator==((void *)a2 + 95, (uint64_t)this + 968)
    || *((unsigned __int8 *)a2 + 792) != *((unsigned __int8 *)this + 1000)
    || *((unsigned __int8 *)a2 + 793) != *((unsigned __int8 *)this + 1001)
    || *((_DWORD *)a2 + 199) != *((_DWORD *)this + 251)
    || *((_DWORD *)a2 + 200) != *((_DWORD *)this + 252)
    || *((_DWORD *)a2 + 201) != *((_DWORD *)this + 253)
    || *((_DWORD *)a2 + 202) != *((_DWORD *)this + 254)
    || *((unsigned __int8 *)a2 + 812) != *((unsigned __int8 *)this + 1020)
    || *((unsigned __int8 *)a2 + 813) != *((unsigned __int8 *)this + 1021)
    || *((unsigned __int8 *)a2 + 814) != *((unsigned __int8 *)this + 1022)
    || *((unsigned __int8 *)a2 + 815) != *((unsigned __int8 *)this + 1023)
    || !SipAuthConfig::operator==((unsigned __int8 *)a2 + 1344, (unsigned __int8 *)this + 1552)
    || *((unsigned __int8 *)a2 + 816) != *((unsigned __int8 *)this + 1024)
    || *((_DWORD *)a2 + 205) != *((_DWORD *)this + 257)
    || !SipResponseCodeMap::operator==((void *)a2 + 103, (uint64_t)this + 1032)
    || *((unsigned __int8 *)a2 + 856) != *((unsigned __int8 *)this + 1064)
    || *((unsigned __int8 *)a2 + 857) != *((unsigned __int8 *)this + 1065)
    || *((unsigned __int8 *)a2 + 858) != *((unsigned __int8 *)this + 1066)
    || *((unsigned __int8 *)a2 + 859) != *((unsigned __int8 *)this + 1067)
    || *((_DWORD *)a2 + 215) != *((_DWORD *)this + 267)
    || !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 864, (unsigned __int8 *)this + 1072)
    || !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 888, (unsigned __int8 *)this + 1096)
    || *((unsigned __int8 *)a2 + 912) != *((unsigned __int8 *)this + 1120)
    || *((unsigned __int8 *)a2 + 913) != *((unsigned __int8 *)this + 1121)
    || *((unsigned __int8 *)a2 + 914) != *((unsigned __int8 *)this + 1122)
    || *((unsigned __int8 *)a2 + 915) != *((unsigned __int8 *)this + 1123)
    || *((unsigned __int8 *)a2 + 918) != *((unsigned __int8 *)this + 1126)
    || *((unsigned __int8 *)a2 + 919) != *((unsigned __int8 *)this + 1127)
    || *((unsigned __int8 *)a2 + 920) != *((unsigned __int8 *)this + 1128)
    || !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 928, (unsigned __int8 *)this + 1136)
    || *((unsigned __int8 *)a2 + 921) != *((unsigned __int8 *)this + 1129)
    || *((unsigned __int8 *)a2 + 952) != *((unsigned __int8 *)this + 1160)
    || *((unsigned __int8 *)a2 + 916) != *((unsigned __int8 *)this + 1124)
    || *((unsigned __int8 *)a2 + 917) != *((unsigned __int8 *)this + 1125)
    || *((unsigned __int8 *)a2 + 953) != *((unsigned __int8 *)this + 1161)
    || !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 960, (unsigned __int8 *)this + 1168)
    || *((unsigned __int8 *)a2 + 984) != *((unsigned __int8 *)this + 1192)
    || *((unsigned __int8 *)a2 + 985) != *((unsigned __int8 *)this + 1193)
    || *((unsigned __int8 *)a2 + 986) != *((unsigned __int8 *)this + 1194)
    || !SipResponseCodeMap::operator==((void *)a2 + 124, (uint64_t)this + 1200)
    || *((unsigned __int8 *)a2 + 1120) != *((unsigned __int8 *)this + 1328)
    || *((unsigned __int8 *)a2 + 1121) != *((unsigned __int8 *)this + 1329)
    || *((unsigned __int8 *)a2 + 1122) != *((unsigned __int8 *)this + 1330)
    || *((_DWORD *)a2 + 281) != *((_DWORD *)this + 333)
    || !std::operator==[abi:ne180100]<std::string,std::less<std::string>,std::allocator<std::string>>((void *)a2 + 141, *((unsigned __int8 **)this + 167), *((void *)this + 169))|| *((unsigned __int8 *)a2 + 1152) != *((unsigned __int8 *)this + 1360)|| *((unsigned __int8 *)a2 + 1153) != *((unsigned __int8 *)this + 1361)|| *((unsigned __int8 *)a2 + 1154) != *((unsigned __int8 *)this + 1362)|| *((unsigned __int8 *)a2 + 1155) != *((unsigned __int8 *)this + 1363)|| *((unsigned __int8 *)a2 + 1156) != *((unsigned __int8 *)this + 1364)|| !SipResponseCodeMap::operator==((void *)a2 + 148, (uint64_t)this + 1392)|| *((unsigned __int8 *)a2 + 987) != *((unsigned __int8 *)this + 1195)|| *((unsigned __int8 *)a2 + 1216) != *((unsigned __int8 *)this + 1424)|| !std::operator==[abi:ne180100]<unsigned int,std::less<unsigned int>,std::allocator<unsigned int>>((void *)a2 + 153, *((void **)this + 179), *((void *)this + 181))|| !SipResponseCodeMap::operator==((void *)a2 + 136, (uint64_t)this + 1296)|| !SpamCategoryMap::operator==((void *)a2 + 156, (void *)this + 182)|| !SpamRiskMap::operator==((uint64_t)a2 + 1272, (uint64_t)this + 1480)|| !SipResponseCodeMap::operator==((void *)a2 + 164, (uint64_t)this + 1520))
  {
    goto LABEL_199;
  }
  uint64_t v6 = *((unsigned __int8 *)a2 + 1423);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = *((unsigned __int8 *)a2 + 1423);
  }
  else {
    uint64_t v7 = *((void *)a2 + 176);
  }
  uint64_t v8 = *((unsigned __int8 *)this + 1631);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)this + 202);
  }
  if (v7 != v8) {
    goto LABEL_199;
  }
  uint64_t v10 = (const void **)((char *)a2 + 1400);
  if (v9 >= 0) {
    uint64_t v11 = (unsigned __int8 *)this + 1608;
  }
  else {
    uint64_t v11 = (unsigned __int8 *)*((void *)this + 201);
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v10, v11, *((void *)a2 + 176))) {
      goto LABEL_199;
    }
  }
  else if (*((unsigned char *)a2 + 1423))
  {
    while (*(unsigned __int8 *)v10 == *v11)
    {
      uint64_t v10 = (const void **)((char *)v10 + 1);
      ++v11;
      if (!--v6) {
        goto LABEL_135;
      }
    }
    goto LABEL_199;
  }
LABEL_135:
  if (!SipUri::equals((const SipStackConfig *)((char *)a2 + 1424), (const SipUri *)((char *)this + 1632), 1)|| *((unsigned __int16 *)a2 + 916) != *((unsigned __int16 *)this + 1020)|| *((unsigned __int16 *)a2 + 917) != *((unsigned __int16 *)this + 1021)|| *((unsigned __int8 *)a2 + 1837) != *((unsigned __int8 *)this + 2045)|| *((unsigned __int8 *)a2 + 1981) != *((unsigned __int8 *)this + 2189)|| *((unsigned __int8 *)a2 + 1838) != *((unsigned __int8 *)this + 2046)|| *((unsigned __int8 *)a2 + 1839) != *((unsigned __int8 *)this + 2047)|| *((unsigned __int8 *)a2 + 1841) != *((unsigned __int8 *)this + 2049)|| *((_DWORD *)a2 + 461) != *((_DWORD *)this + 513)|| *((_DWORD *)a2 + 462) != *((_DWORD *)this + 514)|| *((_DWORD *)a2 + 465) != *((_DWORD *)this + 517)|| *((unsigned __int8 *)a2 + 1840) != *((unsigned __int8 *)this + 2048)|| *((_DWORD *)a2 + 472) != *((_DWORD *)this + 524)|| *((_DWORD *)a2 + 473) != *((_DWORD *)this + 525)|| *((_DWORD *)a2 + 474) != *((_DWORD *)this + 526)|| !std::operator==[abi:ne180100]<SipSecurityAgreementConfig,std::allocator<SipSecurityAgreementConfig>>(*((void *)a2 + 238),
                        *((void *)a2 + 239),
                        *((void *)this + 264),
                        *((void *)this + 265))
    || *((unsigned __int8 *)a2 + 1928) != *((unsigned __int8 *)this + 2136)
    || *((unsigned __int8 *)a2 + 1929) != *((unsigned __int8 *)this + 2137)
    || *((unsigned __int8 *)a2 + 1930) != *((unsigned __int8 *)this + 2138)
    || *((_DWORD *)a2 + 483) != *((_DWORD *)this + 535)
    || !ImsResultSet::operator==((void *)a2 + 242, (uint64_t)this + 2144)
    || *((_DWORD *)a2 + 492) != *((_DWORD *)this + 544)
    || *((unsigned __int8 *)a2 + 1972) != *((unsigned __int8 *)this + 2180)
    || *((unsigned __int8 *)a2 + 1973) != *((unsigned __int8 *)this + 2181)
    || *((unsigned __int8 *)a2 + 1974) != *((unsigned __int8 *)this + 2182)
    || *((_DWORD *)a2 + 494) != *((_DWORD *)this + 546)
    || *((unsigned __int8 *)a2 + 1980) != *((unsigned __int8 *)this + 2188)
    || *((unsigned __int8 *)a2 + 1982) != *((unsigned __int8 *)this + 2190)
    || *((unsigned __int8 *)a2 + 1836) != *((unsigned __int8 *)this + 2044)
    || !ImsServiceClasses::operator==((_DWORD *)a2 + 497, (_DWORD *)this + 549)
    || *((_DWORD *)a2 + 506) != *((_DWORD *)this + 558)
    || *((unsigned __int8 *)a2 + 2028) != *((unsigned __int8 *)this + 2236))
  {
    goto LABEL_199;
  }
  uint64_t v16 = *((unsigned __int8 *)a2 + 2423);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = *((unsigned __int8 *)a2 + 2423);
  }
  else {
    uint64_t v17 = *((void *)a2 + 301);
  }
  uint64_t v18 = *((unsigned __int8 *)this + 2631);
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *((void *)this + 327);
  }
  if (v17 != v18) {
    goto LABEL_199;
  }
  long long v20 = (const void **)((char *)a2 + 2400);
  if (v19 >= 0) {
    uint64_t v21 = (unsigned __int8 *)this + 2608;
  }
  else {
    uint64_t v21 = (unsigned __int8 *)*((void *)this + 326);
  }
  if ((v16 & 0x80) != 0)
  {
    if (!memcmp(*v20, v21, *((void *)a2 + 301))) {
      goto LABEL_182;
    }
LABEL_199:
    BOOL v22 = 0;
    goto LABEL_200;
  }
  if (*((unsigned char *)a2 + 2423))
  {
    while (*(unsigned __int8 *)v20 == *v21)
    {
      long long v20 = (const void **)((char *)v20 + 1);
      ++v21;
      if (!--v16) {
        goto LABEL_182;
      }
    }
    goto LABEL_199;
  }
LABEL_182:
  if (*((_DWORD *)a2 + 606) != *((_DWORD *)this + 658)
    || *((unsigned __int8 *)a2 + 2428) != *((unsigned __int8 *)this + 2636)
    || *((unsigned __int8 *)a2 + 2429) != *((unsigned __int8 *)this + 2637)
    || *((unsigned __int8 *)a2 + 2430) != *((unsigned __int8 *)this + 2638)
    || *((unsigned __int8 *)a2 + 2431) != *((unsigned __int8 *)this + 2639)
    || *((unsigned __int8 *)a2 + 2432) != *((unsigned __int8 *)this + 2640)
    || !std::operator==[abi:ne180100]<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>>((void *)a2 + 305, *((unsigned __int8 **)this + 331), *((void *)this + 333))|| *((unsigned __int8 *)a2 + 2464) != *((unsigned __int8 *)this + 2672)|| *((unsigned __int8 *)a2 + 2465) != *((unsigned __int8 *)this + 2673)|| *((_DWORD *)a2 + 617) != *((_DWORD *)this + 669)|| *((unsigned __int8 *)a2 + 2472) != *((unsigned __int8 *)this + 2680)|| !BambiCallTerminationReasonsBase::operator==((uint64_t)a2 + 2040, (uint64_t)this + 2248)|| !BambiCallTerminationReasonsBase::operator==((uint64_t)a2 + 2208, (uint64_t)this + 2416)|| *((_DWORD *)a2 + 508) != *((_DWORD *)this + 560)|| *((unsigned __int8 *)a2 + 2473) != *((unsigned __int8 *)this + 2681)|| *((unsigned __int8 *)a2 + 2481) != *((unsigned __int8 *)this + 2689))
  {
    goto LABEL_199;
  }
  BOOL v22 = *((unsigned __int8 *)a2 + 2480) == *((unsigned __int8 *)this + 2688);
LABEL_200:
  uint64_t v23 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v23);
  long long v24 = *(void **)(v23 + 8);
  if (v22)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"config hasn't changed. Not reinitializing.", 42);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v23 + 17) = 0;
    uint64_t v25 = *((void *)this + 359);
    if (v25 && *((_DWORD *)this + 50) == 2)
    {
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v71, (void *)this + 15);
      long long v69 = 0u;
      long long v70 = 0u;
      long long v68 = 0u;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(__p.__r_.__value_.__r.__words[2]) = 0;
      (*(void (**)(uint64_t, uint64_t *, std::string *))(*(void *)v25 + 16))(v25, &v71, &__p);
      ImsResult::~ImsResult((ImsResult *)&__p);
      if (v72) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v72);
      }
    }
    ImsPowerAssertion::deinitialize((uint64_t)v4);
    return;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"config changed. Reinitializing.", 31);
  *(unsigned char *)(v23 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v23 + 17) = 0;
  *((unsigned char *)this + 4337) = 1;
  SipStack::deinitialize(this, 0, 0);
LABEL_207:
  uint64_t v26 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"initializing", 12);
  *(unsigned char *)(v26 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v26 + 17) = 0;
  ++*((_DWORD *)this + 1073);
  *((_DWORD *)this + 5(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 1;
  SipUserAgentConfig::operator=((uint64_t)this + 208, (long long *)a2);
  SipTransportLayerConfig::operator=((uint64_t)this + 1608, (uint64_t)a2 + 1400);
  uint64_t v27 = *((void *)a2 + 253);
  *((_DWORD *)this + 56(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *((_DWORD *)a2 + 508);
  *((void *)this + 279) = v27;
  BambiCallTerminationReasonsBase::assign((BambiCallTerminationReasonsBase *)((char *)this + 2248), (const SipStackConfig *)((char *)a2 + 2040));
  BambiCallIncomingTerminationReasons::assign((BambiCallIncomingTerminationReasons *)((char *)this + 2416), (const SipStackConfig *)((char *)a2 + 2208));
  std::string v28 = (const void **)((char *)a2 + 2400);
  std::string::operator=((std::string *)((char *)this + 2608), (const std::string *)a2 + 100);
  uint64_t v29 = *((void *)a2 + 303);
  *((unsigned char *)this + 264(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *((unsigned char *)a2 + 2432);
  *((void *)this + 329) = v29;
  if ((const SipStackConfig *)((char *)this + 208) != a2) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 331, *((long long **)a2 + 305), (long long *)a2 + 153);
  }
  uint64_t v30 = *((void *)a2 + 308);
  *((_WORD *)this + 134(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *((_WORD *)a2 + 1236);
  *((void *)this + 334) = v30;
  *((_WORD *)this + 1344) = *((_WORD *)a2 + 1240);
  std::string::operator=((std::string *)((char *)this + 2696), (const std::string *)((char *)a2 + 2488));
  SipTransportLayer::initialize(*((SipTransportLayer **)this + 20));
  SipTransactionLayer::initialize(*((SipTransactionLayer **)this + 19));
  SipUserAgent::initialize(*((SipUserAgent **)this + 18));
  *((unsigned char *)this + 4232) = 1;
  *((unsigned char *)this + 177) = *((unsigned char *)a2 + 2028);
  long long v31 = (std::__shared_weak_count *)*((void *)this + 24);
  *((void *)this + 2IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  *((void *)this + 24) = 0;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  SipStack::carrierIdentifier(this, &__p);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v65, (void *)this + 15);
  BambiPrefsManager::subscribe((BambiPrefsManager *)&__p, &v65);
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v32 = *((unsigned __int8 *)a2 + 2423);
  if ((v32 & 0x80u) == 0) {
    uint64_t v33 = *((unsigned __int8 *)a2 + 2423);
  }
  else {
    uint64_t v33 = *((void *)a2 + 301);
  }
  if (!v33) {
    goto LABEL_254;
  }
  uint64_t v34 = *((unsigned __int8 *)a2 + 1423);
  int v35 = (char)v34;
  if ((v34 & 0x80u) != 0) {
    uint64_t v34 = *((void *)a2 + 176);
  }
  if (v33 != v34) {
    goto LABEL_232;
  }
  if (v35 >= 0) {
    char v36 = (unsigned __int8 *)a2 + 1400;
  }
  else {
    char v36 = (unsigned __int8 *)*((void *)a2 + 175);
  }
  if ((v32 & 0x80) != 0)
  {
    if (memcmp(*v28, v36, *((void *)a2 + 301)))
    {
LABEL_232:
      uint64_t v38 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"media interface is different from signaling (", 45);
      *(unsigned char *)(v38 + 17) = 0;
      (*(void (**)(uint64_t, char *))(*(void *)v38 + 32))(v38, (char *)a2 + 2400);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)" vs. ", 5);
      *(unsigned char *)(v38 + 17) = 0;
      (*(void (**)(uint64_t, char *))(*(void *)v38 + 32))(v38, (char *)a2 + 1400);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)")", 1);
      *(unsigned char *)(v38 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v38 + 17) = 0;
      if (*((char *)a2 + 2423) < 0)
      {
        std::string::__init_copy_ctor_external(&v64, *((const std::string::value_type **)a2 + 300), *((void *)a2 + 301));
      }
      else
      {
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = *(_OWORD *)v28;
        v64.__r_.__value_.__r.__words[2] = *((void *)a2 + 302);
      }
      std::string::size_type size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v64.__r_.__value_.__l.__size_;
      }
      long long v40 = 0uLL;
      if (size)
      {
        int v41 = *((_DWORD *)a2 + 606);
        uint64_t v42 = *((void *)this + 17);
        uint64_t v43 = *(void *)(v42 + 656);
        uint64_t v44 = *(std::__shared_weak_count **)(v42 + 664);
        if (v44) {
          atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v45 = (NetworkInterface *)(*(uint64_t (**)(uint64_t, std::string *, __n128))(*(void *)v43 + 64))(v43, &v64, (__n128)0);
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
        if (v45)
        {
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
          NetworkInterface::firstAddress(v45, v41, 1, &__p);
          if (__p.__r_.__value_.__r.__words[0])
          {
            (*(void (**)(void **__return_ptr))(*(void *)__p.__r_.__value_.__l.__data_ + 32))(v62);
            long long v46 = *(_OWORD *)v62;
          }
          else
          {
            uint64_t v48 = (*(uint64_t (**)(SipStack *))(*(void *)this + 56))(this);
            (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v48);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"no address with mask ", 21);
            *(unsigned char *)(v48 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v48 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)" found on media interface ", 26);
            *(unsigned char *)(v48 + 17) = 0;
            (*(void (**)(uint64_t, std::string *))(*(void *)v48 + 32))(v48, &v64);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v48 + 17) = 0;
            long long v46 = 0uLL;
          }
          long long v61 = v46;
          (*(void (**)(NetworkInterface *))(*(void *)v45 + 8))(v45);
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
          long long v40 = v61;
        }
        else
        {
          uint64_t v47 = (*(uint64_t (**)(SipStack *))(*(void *)this + 56))(this);
          (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v47);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)"media interface ", 16);
          *(unsigned char *)(v47 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(void *)v47 + 32))(v47, &v64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)" not found ", 11);
          *(unsigned char *)(v47 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v47 + 17) = 0;
          long long v40 = 0uLL;
        }
      }
      int v49 = (std::__shared_weak_count *)*((void *)this + 24);
      *(_OWORD *)((char *)this + 184) = v40;
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
    }
  }
  else if (*((unsigned char *)a2 + 2423))
  {
    uint64_t v37 = (unsigned __int8 *)a2 + 2400;
    while (*v37 == *v36)
    {
      ++v37;
      ++v36;
      if (!--v32) {
        goto LABEL_254;
      }
    }
    goto LABEL_232;
  }
LABEL_254:
  BOOL v50 = *((void *)this + 23) == 0;
  uint64_t v51 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v51);
  uint64_t v52 = *(void **)(v51 + 8);
  if (v50)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"using signaling address for media", 33);
    *(unsigned char *)(v51 + 17) = 0;
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"using media address ", 20);
    *(unsigned char *)(v51 + 17) = 0;
    (*(void (**)(void, uint64_t))(**((void **)this + 23) + 40))(*((void *)this + 23), v51);
  }
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v51 + 17) = 0;
  memset(&__p, 0, sizeof(__p));
  uint64_t v53 = (ImsPrefs *)SipStack::prefs(this);
  AccessBarringTypeKey = (const ImsPrefsKeyEnum *)ImsPrefs::getAccessBarringTypeKey(v53);
  ImsPrefs::stringValue(v53, AccessBarringTypeKey, &__p);
  std::string::basic_string[abi:ne180100]<0>(v62, "none");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v63 >= 0) {
    uint64_t v56 = v62;
  }
  else {
    uint64_t v56 = (void **)v62[0];
  }
  BOOL v57 = strcasecmp((const char *)p_p, (const char *)v56) != 0;
  BambiAccessBarring::setEnabled((BambiAccessBarring *)((char *)this + 2928), v57);
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  uint64_t v59 = *((void *)this + 15);
  int v58 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v58)
  {
    atomic_fetch_add_explicit(&v58->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v58->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v58->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v75 = 0;
  int v60 = operator new(0x20uLL);
  *int v60 = &unk_1F20D9290;
  v60[1] = this;
  v60[2] = v59;
  void v60[3] = v58;
  unint64_t v75 = v60;
  SipTimerContainer::startTimer((int8x8_t *)this + 341, (uint64_t)"MediaInitTimer");
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v74);
  SipStack::setMediaAppId(this, *((unsigned char *)a2 + 2028));
  if (v58)
  {
    std::__shared_weak_count::__release_weak(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C55243B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::deinitialize(SipStack *this, int a2, int a3)
{
  v26[4] = *MEMORY[0x1E4F143B8];
  int v5 = *((_DWORD *)this + 50);
  if (v5 == 3)
  {
    if ((a2 & 1) == 0)
    {
      SipStack::internalDeinitialize(this, 0);
    }
  }
  else if (v5)
  {
    uint64_t v8 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"deinitializing sip stack", 24);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    *((_DWORD *)this + 5(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 3;
    BambiAccessBarring::reset((BambiAccessBarring *)((char *)this + 2928));
    uint64_t v10 = *((void *)this + 15);
    int v9 = (std::__shared_weak_count *)*((void *)this + 16);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    if (!a2) {
      goto LABEL_19;
    }
    uint64_t v11 = *((void *)this + 18);
    uint64_t v13 = *(void *)(v11 + 248);
    BOOL v12 = *(std::__shared_weak_count **)(v11 + 256);
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      int v14 = *(_DWORD *)(v13 + 528);
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    else
    {
      int v14 = *(_DWORD *)(v13 + 528);
    }
    if (v14 == 2)
    {
      uint64_t v15 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"waiting ", 8);
      *(unsigned char *)(v15 + 17) = 0;
      uint64_t v16 = (ImsPrefs *)SipStack::prefs(this);
      DeregistrationWaitTimeoutMillisecondsKey = (void **)ImsPrefs::getDeregistrationWaitTimeoutMillisecondsKey(v16);
      ImsPrefs::intValue(v16, DeregistrationWaitTimeoutMillisecondsKey);
      std::ostream::operator<<();
      *(unsigned char *)(v15 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"ms for deregistration before deinitializing", 43);
      *(unsigned char *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v15 + 17) = 0;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = operator new(0x20uLL);
      *uint64_t v18 = &unk_1F20D9310;
      v18[1] = this;
      void v18[2] = v10;
      v18[3] = v9;
      v26[3] = v18;
      int v19 = (ImsPrefs *)SipStack::prefs(this);
      long long v20 = (void **)ImsPrefs::getDeregistrationWaitTimeoutMillisecondsKey(v19);
      ImsPrefs::intValue(v19, v20);
      SipTimerContainer::startTimer((int8x8_t *)this + 341, (uint64_t)&kWaitForDeregistrationTimer);
      std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v26);
      *((unsigned char *)this + 4288) = 1;
      BambiDeregisterHandler::handleEndRegistration(*((int8x8_t **)this + 532), a3);
    }
    else
    {
LABEL_19:
      uint64_t v21 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v21);
      if (a2) {
        BOOL v22 = "not registered. Continuing with deinitialization.";
      }
      else {
        BOOL v22 = "can't wait for deregistration.";
      }
      if (a2) {
        uint64_t v23 = 49;
      }
      else {
        uint64_t v23 = 30;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)v22, v23);
      *(unsigned char *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v21 + 17) = 0;
      SipStack::internalDeinitialize(this, a2);
    }
    if (v9)
    {
      std::__shared_weak_count::__release_weak(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    uint64_t v6 = *((void *)this + 17);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v24, (void *)this + 15);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 240))(v6, &v24);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
  }
}

void sub_1C552494C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12)
  {
    std::__shared_weak_count::__release_weak(v12);
    std::__shared_weak_count::__release_weak(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::carrierIdentifier(SipStack *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = (char *)this + 4184;
  if (*((char *)this + 4207) < 0)
  {
    std::string::size_type v3 = *((void *)this + 524);
    if (v3)
    {
      uint64_t v4 = *(const std::string::value_type **)v2;
      goto LABEL_10;
    }
  }
  else if (*((unsigned char *)this + 4207))
  {
LABEL_8:
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    return;
  }
  if ((*((char *)this + 4183) & 0x80000000) == 0)
  {
    uint64_t v2 = (char *)this + 4160;
    goto LABEL_8;
  }
  uint64_t v4 = (const std::string::value_type *)*((void *)this + 520);
  std::string::size_type v3 = *((void *)this + 521);
LABEL_10:
  std::string::__init_copy_ctor_external(a2, v4, v3);
}

uint64_t SipStack::prefs(SipStack *this)
{
  SipStack::carrierIdentifier(this, &__p);
  uint64_t v1 = BambiPrefsManager::prefs((BambiPrefsManager *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v1;
}

void sub_1C5524A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipStack::setMediaAppId(SipStack *this, char a2)
{
  uint64_t v4 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"updating appId from: ", 21);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" to: ", 5);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  *((unsigned char *)this + 177) = a2;
  return result;
}

BOOL SipStack::registered(SipStack *this)
{
  uint64_t v1 = *((void *)this + 18);
  uint64_t v3 = *(void *)(v1 + 248);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 256);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    int v4 = *(_DWORD *)(v3 + 528);
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  else
  {
    int v4 = *(_DWORD *)(v3 + 528);
  }
  return v4 == 2;
}

void SipStack::cleanUpLazuliMessagesAndSessions(SipStack *this)
{
  uint64_t v2 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Clean up all lazuli messages and sessions", 41);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = *((void *)this + 18);
  int v4 = *(SipLazuliManager **)(v3 + 208);
  int v5 = *(std::__shared_weak_count **)(v3 + 216);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4) {
    SipLazuliManager::endAllMessages(v4);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  IMSClientManager::instance(v4);
  IPTelephonyManager::getInstance(&v7);
  IMSCallManager::terminateAllLazuliSessions(*(IMSCallManager **)(v7 + 200));
  uint64_t v6 = v8;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5524D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::initializeMedia(SipStack *this)
{
  uint64_t v1 = *((void *)this + 17);
  if (*((char *)this + 4183) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 520), *((void *)this + 521));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *((_OWORD *)this + 260);
    __p.__r_.__value_.__r.__words[2] = *((void *)this + 522);
  }
  BambiClient::initializeMediaApplicationId(v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5524DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::createRequestFromTemplate(uint64_t a1)
{
  ims::AccessNetwork::isWifi((ims::AccessNetwork *)(a1 + 3160));
  SipMessageEncodingMap::createRequestFromTemplate();
}

void SipStack::dumpState(SipStack *this, ImsOutStream *a2)
{
  int v4 = (char *)this + 4183;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"----- SIP Stack ", 16);
  *((unsigned char *)a2 + 17) = 0;
  int v5 = (_OWORD *)((char *)this + 4160);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *((const std::string::value_type **)this + 520), *((void *)this + 521));
  }
  else
  {
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *v5;
    v26.__r_.__value_.__r.__words[2] = *((void *)this + 522);
  }
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 32))(a2, &v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" (", 2);
  *((unsigned char *)a2 + 17) = 0;
  SipStack::carrierIdentifier(this, &__p);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 32))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)") -----", 7);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Device Type:        ", 20);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v6 = SipUserAgent::config(*((SipUserAgent **)this + 18));
  if (*(unsigned char *)(v6 + 456)) {
    uint64_t v7 = "primary";
  }
  else {
    uint64_t v7 = "secondary";
  }
  if (*(unsigned char *)(v6 + 456)) {
    uint64_t v8 = 7;
  }
  else {
    uint64_t v8 = 9;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)v7, v8);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Access Network Info:", 20);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  ims::AccessNetworks::log((ims::AccessNetworks *)((char *)this + 3160), a2, 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"SIP Timers:         ", 20);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v9 = SipUserAgent::config(*((SipUserAgent **)this + 18));
  (*(void (**)(uint64_t, ImsOutStream *))(*(void *)(v9 + 512) + 16))(v9 + 512, a2);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v10 = SipUserAgent::config(*((SipUserAgent **)this + 18));
  uint64_t v11 = *(unsigned __int8 *)(v10 + 175);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(v10 + 160);
  }
  BOOL v12 = (void *)*((void *)a2 + 1);
  if (v11)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Conference Server:  ", 20);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t v13 = SipUserAgent::config(*((SipUserAgent **)this + 18));
    SipUri::asString(v13 + 48, &__p);
    LoggableString::LoggableString(&v26, &__p);
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v26);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Conference Server:  none", 24);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Connectivity:       ", 20);
  *((unsigned char *)a2 + 17) = 0;
  if (v4[49]) {
    int v14 = "true";
  }
  else {
    int v14 = "false";
  }
  std::string::basic_string[abi:ne180100]<0>(&v26, v14);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 32))(a2, &v26);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"SIM Instance:       ", 20);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v15 = *((void *)this + 18);
  uint64_t v16 = *(SipRegistrationClient **)(v15 + 248);
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 256);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipRegistrationClient::printRegistrationInfo(v16, a2);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  SipTransportLayer::printTransportInfo(*((SipTransportLayer **)this + 20), a2);
  SipTransactionLayer::printTransactions(*((void *)this + 19), a2);
  uint64_t v18 = *((void *)this + 18);
  int v19 = *(SipDialogManager **)(v18 + 176);
  long long v20 = *(std::__shared_weak_count **)(v18 + 184);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipDialogManager::printSubscriptions(v19, a2);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"All Dialogs:", 12);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v21 = *((void *)this + 18);
  BOOL v22 = *(SipDialogManager **)(v21 + 176);
  uint64_t v23 = *(std::__shared_weak_count **)(v21 + 184);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipDialogManager::printDialogs(v22, a2);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Delegates:", 10);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *((const std::string::value_type **)this + 520), *((void *)this + 521));
  }
  else
  {
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *v5;
    v26.__r_.__value_.__r.__words[2] = *((void *)this + 522);
  }
  uint64_t v24 = IMSClientManager::delegateForStack((void **)&v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v24) {
    (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v24 + 240))(v24, a2);
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *((const std::string::value_type **)this + 520), *((void *)this + 521));
  }
  else
  {
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *v5;
    v26.__r_.__value_.__r.__words[2] = *((void *)this + 522);
  }
  IMSClientManager::lazuliDelegateForStack((void **)&v26.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    LazuliDelegate::dumpState((LazuliDelegate *)__p.__r_.__value_.__l.__data_, a2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"----- END -----", 15);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
}

void sub_1C5525604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5525688(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C552565CLL);
}

void SipStack::reportDeferralMetric(SipStack *this)
{
  uint64_t v2 = *((void *)this + 18);
  uint64_t v3 = *(void *)(v2 + 248);
  int v4 = *(std::__shared_weak_count **)(v2 + 256);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(v3 + 3976);
  if (v5) {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  *((_DWORD *)this + 109(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v5;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 17) + 104))(&v9);
  uint64_t v6 = v9;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v7, (void *)this + 15);
  IMSMetricsManager::logSignalingReduction(v6, &v7, (uint64_t)this + 4344);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  *((unsigned char *)this + 4344) = 0;
  *((void *)this + 544) = 0;
  *((_DWORD *)this + 109(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
}

void sub_1C552579C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::setConnectivityAvailable(SipStack *this, uint64_t a2)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Connectivity reported: ", 23);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (*((unsigned char *)this + 176))
  {
    uint64_t v5 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v5);
    uint64_t v6 = *(void **)(v5 + 8);
    uint64_t v7 = "Not updating connectivity for emergency stack";
    uint64_t v8 = 45;
LABEL_5:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    return;
  }
  if (*((unsigned __int8 *)this + 4232) == a2)
  {
    uint64_t v5 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v5);
    uint64_t v6 = *(void **)(v5 + 8);
    uint64_t v7 = "Not updating connectivity when status hasn't changed";
    uint64_t v8 = 52;
    goto LABEL_5;
  }
  *((unsigned char *)this + 4232) = a2;
  uint64_t v9 = *((void *)this + 18);
  uint64_t v10 = *(void *)(v9 + 248);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 256);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v10 + 264))(v10, a2, 0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  BOOL v12 = (ImsPrefs *)SipStack::prefs(this);
  LimitedConnectivityHysteresisTimeoutSecondsKey = (void **)ImsPrefs::getLimitedConnectivityHysteresisTimeoutSecondsKey(v12);
  int v14 = ImsPrefs::intValue(v12, LimitedConnectivityHysteresisTimeoutSecondsKey);
  uint64_t v15 = (ImsPrefs *)SipStack::prefs(this);
  LimitedConnectivityHysteresisFromRegistrationKey = (void **)ImsPrefs::getLimitedConnectivityHysteresisFromRegistrationKey(v15);
  int v17 = ImsPrefs::BOOLValue(v15, LimitedConnectivityHysteresisFromRegistrationKey);
  if (SipStack::requiresLimitedAvailability(this))
  {
    if (a2)
    {
      if (v14) {
        char v18 = v17;
      }
      else {
        char v18 = 1;
      }
      if ((v18 & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ConnectivityHysteresis");
        SipTimerContainer::cancelTimer((int8x8_t *)this + 341, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *((unsigned char *)this + 4344) = 0;
        SipStack::reportDeferralMetric(this);
      }
      return;
    }
    uint64_t v19 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Entering limited connectivity, pending transactions may be terminated", 69);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    uint64_t v20 = *((void *)this + 19);
    uint64_t v21 = (ImsOutStream *)(*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
    (*(void (**)(SipStack *, ImsOutStream *))(*(void *)this + 16))(this, v21);
    SipTransactionLayer::printTransactions(v20, v21);
    uint64_t v22 = *((void *)this + 19);
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741847;
    uint64_t v85 = 0;
    long long v83 = 0u;
    long long v84 = 0u;
    std::unordered_map<std::string,std::shared_ptr<SipClientTransaction>>::unordered_map((uint64_t)&v83, v22 + 152);
    int v73 = v17;
    uint64_t v82 = 0;
    long long v80 = 0u;
    long long v81 = 0u;
    std::unordered_map<std::string,std::shared_ptr<SipServerTransaction>>::unordered_map((uint64_t)&v80, v22 + 192);
    uint64_t v23 = (void *)v84;
    if ((void)v84)
    {
      uint64_t v24 = v22 + 32;
      while (1)
      {
        std::string v26 = (void **)v23[5];
        uint64_t v25 = (std::__shared_weak_count *)v23[6];
        if (v25)
        {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v26) {
          break;
        }
        uint64_t v27 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*v26[37] + 112))(v26[37]);
        uint64_t v28 = v27[23];
        if ((v28 & 0x80u) == 0) {
          uint64_t v29 = v27[23];
        }
        else {
          uint64_t v29 = *((void *)v27 + 1);
        }
        if (v29 == 8)
        {
          if ((v28 & 0x80) != 0)
          {
            BOOL v35 = memcmp(*(const void **)v27, "REGISTER", *((void *)v27 + 1)) != 0;
            if (!v25) {
              goto LABEL_43;
            }
LABEL_42:
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            goto LABEL_43;
          }
          if (!v27[23]) {
            break;
          }
          uint64_t v30 = v28 - 1;
          long long v31 = "REGISTER";
          do
          {
            int v33 = *v27++;
            int v32 = v33;
            int v34 = *(unsigned __int8 *)v31++;
            BOOL v35 = v32 != v34;
          }
          while (v32 == v34 && v30-- != 0);
        }
        else
        {
          BOOL v35 = 1;
        }
        if (v25) {
          goto LABEL_42;
        }
LABEL_43:
        if (v35)
        {
          int v37 = ((uint64_t (*)(void **))(*v26)[18])(v26);
          uint64_t v38 = *(uint64_t (**)(uint64_t))(*(void *)v24 + 64);
          if (v37)
          {
            uint64_t v39 = v38(v22 + 32);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v22 + 32, v39);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
            *(unsigned char *)(v39 + 17) = 0;
            ((void (*)(void **__return_ptr, void **))(*v26)[19])(v78, v26);
            (*(void (**)(uint64_t, void **))(*(void *)v39 + 40))(v39, v78);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v39 + 17) = 0;
            if (v79 < 0) {
              operator delete(v78[0]);
            }
            ((void (*)(void **, uint64_t))(*v26)[4])(v26, 7);
          }
          else
          {
            uint64_t v40 = v38(v22 + 32);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v22 + 32, v40);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"Error out transaction ", 22);
            *(unsigned char *)(v40 + 17) = 0;
            ((void (*)(void **__return_ptr, void **))(*v26)[19])(v78, v26);
            (*(void (**)(uint64_t, void **))(*(void *)v40 + 40))(v40, v78);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v40 + 17) = 0;
            if (v79 < 0) {
              operator delete(v78[0]);
            }
            ((void (*)(void **, std::string *))(*v26)[14])(v26, &__p);
          }
        }
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        uint64_t v23 = (void *)*v23;
        if (!v23) {
          goto LABEL_57;
        }
      }
      BOOL v35 = 0;
      if (!v25) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
LABEL_57:
    int v41 = (void *)v81;
    if ((void)v81)
    {
      uint64_t v42 = v22 + 32;
      while (1)
      {
        uint64_t v44 = (void **)v41[5];
        uint64_t v43 = (std::__shared_weak_count *)v41[6];
        if (v43)
        {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v44) {
          break;
        }
        uint64_t v45 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*v44[37] + 112))(v44[37]);
        uint64_t v46 = v45[23];
        if ((v46 & 0x80u) == 0) {
          uint64_t v47 = v45[23];
        }
        else {
          uint64_t v47 = *((void *)v45 + 1);
        }
        if (v47 == 8)
        {
          if ((v46 & 0x80) != 0)
          {
            BOOL v53 = memcmp(*(const void **)v45, "REGISTER", *((void *)v45 + 1)) != 0;
            if (!v43) {
              goto LABEL_80;
            }
LABEL_79:
            std::__shared_weak_count::__release_shared[abi:ne180100](v43);
            goto LABEL_80;
          }
          if (!v45[23]) {
            break;
          }
          uint64_t v48 = v46 - 1;
          int v49 = "REGISTER";
          do
          {
            int v51 = *v45++;
            int v50 = v51;
            int v52 = *(unsigned __int8 *)v49++;
            BOOL v53 = v50 != v52;
          }
          while (v50 == v52 && v48-- != 0);
        }
        else
        {
          BOOL v53 = 1;
        }
        if (v43) {
          goto LABEL_79;
        }
LABEL_80:
        if (v53)
        {
          int v55 = ((uint64_t (*)(void **))(*v44)[18])(v44);
          uint64_t v56 = *(uint64_t (**)(uint64_t))(*(void *)v42 + 64);
          if (v55)
          {
            uint64_t v57 = v56(v42);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v57);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
            *(unsigned char *)(v57 + 17) = 0;
            ((void (*)(void **__return_ptr, void **))(*v44)[20])(v78, v44);
            (*(void (**)(uint64_t, void **))(*(void *)v57 + 40))(v57, v78);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v57 + 17) = 0;
            if (v79 < 0) {
              operator delete(v78[0]);
            }
            ((void (*)(void **, uint64_t))(*v44)[4])(v44, 7);
          }
          else
          {
            uint64_t v58 = v56(v42);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v58);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v58 + 8), (uint64_t)"Error out transaction ", 22);
            *(unsigned char *)(v58 + 17) = 0;
            ((void (*)(void **__return_ptr, void **))(*v44)[20])(v78, v44);
            (*(void (**)(uint64_t, void **))(*(void *)v58 + 40))(v58, v78);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v58 + 17) = 0;
            if (v79 < 0) {
              operator delete(v78[0]);
            }
            ((void (*)(void **, std::string *))(*v44)[14])(v44, &__p);
          }
        }
        if (v43) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v43);
        }
        int v41 = (void *)*v41;
        if (!v41) {
          goto LABEL_94;
        }
      }
      BOOL v53 = 0;
      if (!v43) {
        goto LABEL_80;
      }
      goto LABEL_79;
    }
LABEL_94:
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v80);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v83);
    ImsResult::~ImsResult((ImsResult *)&__p);
    if (v14) {
      char v59 = v73;
    }
    else {
      char v59 = 1;
    }
    if (v59)
    {
      uint64_t v60 = *((void *)this + 18);
      if (v60)
      {
        uint64_t v62 = *(void *)(v60 + 248);
        long long v61 = *(std::__shared_weak_count **)(v60 + 256);
        if (!v61)
        {
          if (!v62) {
            goto LABEL_113;
          }
          goto LABEL_112;
        }
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        if (v62)
        {
          uint64_t v63 = *((void *)this + 18);
          uint64_t v62 = *(void *)(v63 + 248);
          std::string v64 = *(std::__shared_weak_count **)(v63 + 256);
          if (v64)
          {
            atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
            *((void *)this + 544) = 1000 * *(void *)(v62 + 496);
            std::__shared_weak_count::__release_shared[abi:ne180100](v64);
            goto LABEL_113;
          }
LABEL_112:
          *((void *)this + 544) = 1000 * *(void *)(v62 + 496);
        }
      }
LABEL_113:
      uint64_t v68 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v68);
      long long v69 = (void **)(v68 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v68 + 8), (uint64_t)"NOT using connectivity hysteresis timer.  Hysteresis from Registration will ", 76);
      *(unsigned char *)(v68 + 17) = 0;
      long long v70 = (unsigned char *)(v68 + 17);
      if (v73) {
        uint64_t v71 = "be";
      }
      else {
        uint64_t v71 = "NOT be";
      }
      if (v73) {
        uint64_t v72 = 2;
      }
      else {
        uint64_t v72 = 6;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v69, (uint64_t)v71, v72);
      unsigned char *v70 = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v69, (uint64_t)" used.", 6);
      unsigned char *v70 = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      unsigned char *v70 = 0;
      return;
    }
    uint64_t v66 = *((void *)this + 15);
    unint64_t v65 = (std::__shared_weak_count *)*((void *)this + 16);
    if (v65)
    {
      atomic_fetch_add_explicit(&v65->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v65->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ConnectivityHysteresis");
    if (v65) {
      atomic_fetch_add_explicit(&v65->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    long long v87 = 0;
    uint64_t v67 = operator new(0x20uLL);
    *uint64_t v67 = &unk_1F20D9390;
    v67[1] = this;
    v67[2] = v66;
    v67[3] = v65;
    long long v87 = v67;
    SipTimerContainer::startTimer((int8x8_t *)this + 341, (uint64_t)&__p);
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v86);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    gettimeofday((timeval *)&__p, 0);
    *((void *)this + 544) = 1000 * __p.__r_.__value_.__r.__words[0]
                            + SLODWORD(__p.__r_.__value_.__r.__words[1]) / 1000
                            + 2208988800000;
    if (v65)
    {
      std::__shared_weak_count::__release_weak(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
}

void sub_1C5526684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((void *)(v36 - 128));
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v35)
  {
    std::__shared_weak_count::__release_weak(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t SipStack::requiresLimitedAvailability(SipStack *this)
{
  uint64_t v2 = (ImsPrefs *)SipStack::prefs(this);
  EnableSignalingReductionKey = (void **)ImsPrefs::getEnableSignalingReductionKey(v2);
  uint64_t result = ImsPrefs::BOOLValue(v2, EnableSignalingReductionKey);
  if (result) {
    return *((unsigned char *)this + 4104) != 0;
  }
  return result;
}

void SipStack::internalStartRegistration(SipStack *this, const SipRegistrationConfig *a2)
{
  *((unsigned char *)this + 433ims::StackConfig::~StackConfig(this + 6) = 1;
  uint64_t v4 = *((void *)this + 18);
  uint64_t v5 = *(void *)(v4 + 248);
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 256);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipRegistrationClient::registerWithConfig(v5, (uint64_t)a2, (std::string *)"Initial", 0);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if ((*((unsigned char *)a2 + 24) & 1) == 0)
  {
    uint64_t v7 = *((void *)this + 17);
    if (ims::AccessNetwork::isLTE((ims::AccessNetwork *)((char *)this + 3160))) {
      uint64_t v8 = "NonVoiceLTE";
    }
    else {
      uint64_t v8 = "NoLTE";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v8);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v9, (void *)this + 15);
    BambiClient::endAllCalls(v7, (uint64_t)__p, &v9);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C55268C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::startRegistration(SipStack *this, const SipRegistrationConfig *a2)
{
  uint64_t v4 = (int8x8_t *)*((void *)this + 532);
  if (v4[23].i32[0] == 1) {
    v4[23].i32[1] = 0;
  }
  else {
    BambiDeregisterHandler::stop(v4);
  }
  uint64_t v5 = (ImsPrefs *)SipStack::prefs(this);
  AllowMultipleAddressesPerProxyKey = (void **)ImsPrefs::getAllowMultipleAddressesPerProxyKey(v5);
  if (ImsPrefs::BOOLValue(v5, AllowMultipleAddressesPerProxyKey))
  {
    for (uint64_t i = *(void *)a2; ; i += 408)
    {
      if (i == *((void *)a2 + 1)) {
        goto LABEL_9;
      }
      if (!*(void *)(i + 48)) {
        break;
      }
    }
    bzero(v27, 0x688uLL);
    SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)v27, a2);
    uint64_t v9 = *((void *)this + 17);
    uint64_t v10 = *(void *)(v9 + 656);
    uint64_t v11 = *(std::__shared_weak_count **)(v9 + 664);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v12 = (ImsPrefs *)SipStack::prefs(this);
    MaxProxyResolveAttemptsKey = (void **)ImsPrefs::getMaxProxyResolveAttemptsKey(v12);
    int v14 = ImsPrefs::intValue(v12, MaxProxyResolveAttemptsKey);
    uint64_t v15 = (std::__shared_weak_count *)operator new(0x1C0uLL);
    v15->__shared_owners_ = 0;
    v15->__shared_weak_owners_ = 0;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D9410;
    uint64_t v16 = v15 + 1;
    v28[0] = v10;
    v28[1] = (uint64_t)v11;
    SipProxyResolver::SipProxyResolver((uint64_t)&v15[1], v28, v14);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    shared_weak_owners = (std::__shared_weak_count *)v15[6].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1)
      {
LABEL_21:
        *((void *)this + 39IMSCallOptions::~IMSCallOptions(this + 3) = v16;
        char v18 = (std::__shared_weak_count *)*((void *)this + 394);
        *((void *)this + 394) = v15;
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        if (*(unsigned char *)((*(uint64_t (**)(void))(**((void **)this + 20) + 16))(*((void *)this + 20))
                      + 441))
          *(unsigned char *)(*((void *)this + 393) + 272) = 1;
        uint64_t v20 = *((void *)this + 15);
        uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 16);
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = (std::string *)*((void *)this + 393);
        uint64_t v22 = (*(uint64_t (**)(void))(**((void **)this + 20) + 16))(*((void *)this + 20));
        v23[0] = MEMORY[0x1E4F143A8];
        v23[1] = 1174405120;
        v23[2] = ___ZN8SipStack17startRegistrationERK21SipRegistrationConfig_block_invoke;
        v23[3] = &__block_descriptor_tmp_53;
        v23[4] = this;
        v23[5] = v20;
        uint64_t v24 = v19;
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)v25, (const SipRegistrationConfig *)v27);
        aBlocuint64_t k = _Block_copy(v23);
        SipProxyResolver::resolveProxiesOnInterface(v21, (uint64_t *)a2, v22, 3, &aBlock);
        if (aBlock) {
          _Block_release(aBlock);
        }
        SipRegistrationConfig::~SipRegistrationConfig(v25);
        if (v24) {
          std::__shared_weak_count::__release_weak(v24);
        }
        if (v19) {
          std::__shared_weak_count::__release_weak(v19);
        }
        SipRegistrationConfig::~SipRegistrationConfig(v27);
        return;
      }
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v15[6].__shared_owners_ = (uint64_t)v16;
      v15[6].__shared_weak_owners_ = (uint64_t)v15;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    else
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v15[6].__shared_owners_ = (uint64_t)v16;
      v15[6].__shared_weak_owners_ = (uint64_t)v15;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    goto LABEL_21;
  }
LABEL_9:
  uint64_t v8 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"no proxies need resolving", 25);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  SipStack::internalStartRegistration(this, a2);
}

void sub_1C5526CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (STACK[0x6C0]) {
    _Block_release((const void *)STACK[0x6C0]);
  }
  SipRegistrationConfig::~SipRegistrationConfig(v15);
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  SipRegistrationConfig::~SipRegistrationConfig((void **)&STACK[0x6C8]);
  _Unwind_Resume(a1);
}

void ___ZN8SipStack17startRegistrationERK21SipRegistrationConfig_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (SipStack *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        bzero(v8, 0x688uLL);
        SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)v8, (const SipRegistrationConfig *)(a1 + 7));
        if (v8 != (void **)a2) {
          std::vector<SipUri>::__assign_with_size[abi:ne180100]<SipUri*,SipUri*>((SipUri **)v8, *a2, a2[1], 0xFAFAFAFAFAFAFAFBLL * ((a2[1] - *a2) >> 3));
        }
        SipStack::internalStartRegistration(v5, (const SipRegistrationConfig *)v8);
        SipRegistrationConfig::~SipRegistrationConfig(v8);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5526E34(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c32_ZTSNSt3__18weak_ptrI8SipStackEE56c27_ZTS21SipRegistrationConfig(void *a1, void *a2)
{
  uint64_t v2 = a2[6];
  a1[5] = a2[5];
  a1[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)(a1 + 7), (const SipRegistrationConfig *)(a2 + 7));
}

void sub_1C5526E9C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c32_ZTSNSt3__18weak_ptrI8SipStackEE56c27_ZTS21SipRegistrationConfig(uint64_t a1)
{
  SipRegistrationConfig::~SipRegistrationConfig((void **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void SipStack::endRegistration(SipStack *this)
{
  uint64_t v2 = (_OWORD *)((char *)this + 3144);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 394);
  *uint64_t v2 = 0u;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (void **)*((void *)this + 340);
  if (v4)
  {
    SipStackConfig::~SipStackConfig(v4);
    MEMORY[0x1C878E320]();
  }
  *((void *)this + 34(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  uint64_t v5 = *((void *)this + 17);
  if (*((_DWORD *)this + 50) == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Deinitializing");
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v18, (void *)this + 15);
    BambiClient::endAllCalls(v5, (uint64_t)__p, &v18);
    uint64_t v6 = v19;
    if (!v19) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Deregistering");
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v16, (void *)this + 15);
  BambiClient::endAllCalls(v5, (uint64_t)__p, &v16);
  uint64_t v6 = v17;
  if (v17) {
LABEL_7:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
LABEL_8:
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *((void *)this + 18);
  uint64_t v8 = *(SipMessageManager **)(v7 + 192);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 200);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipMessageManager::endAllMessages(v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  SipStack::cleanUpLazuliMessagesAndSessions(this);
  uint64_t v10 = *((void *)this + 18);
  uint64_t v11 = *(SipDialogManager **)(v10 + 176);
  char v12 = *(std::__shared_weak_count **)(v10 + 184);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipDialogManager::cancelAllSubscriptions(v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v13 = *((void *)this + 18);
  int v14 = *(SipRegistrationClient **)(v13 + 248);
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 256);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipRegistrationClient::deregister(v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1C5527080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::handleRegistrationActive(SipStack *this)
{
  SipStack::refreshAccessNetwork(this);
  BambiAccessBarring::registrationStateChanged((BambiAccessBarring *)((char *)this + 2928), 1);
  uint64_t v2 = *((void *)this + 17);
  if (*((char *)this + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)this + 520), *((void *)this + 521));
  }
  else {
    std::string v8 = *(std::string *)((char *)this + 4160);
  }
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  v3[0] = &unk_1F20B2680;
  v3[1] = &_bambiDomain;
  int v4 = 0;
  BambiClient::notifyCallsOfRegistrationChange(v2, (uint64_t)&v8, (uint64_t)v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_1C55271B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  if (*(char *)(v2 - 25) < 0) {
    operator delete(*(void **)(v2 - 48));
  }
  _Unwind_Resume(a1);
}

void SipStack::refreshAccessNetwork(SipStack *this)
{
  v21[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 15);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v4 = (ImsPrefs *)SipStack::prefs(this);
  AccessNetworkRefreshDelayMillisecondsKey = (void **)ImsPrefs::getAccessNetworkRefreshDelayMillisecondsKey(v4);
  if (ImsPrefs::intValue(v4, AccessNetworkRefreshDelayMillisecondsKey))
  {
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    long long v6 = operator new(0x20uLL);
    *long long v6 = &unk_1F20D9460;
    v6[1] = this;
    v6[2] = v3;
    v6[3] = v2;
    void v21[3] = v6;
    long long v7 = (ImsPrefs *)SipStack::prefs(this);
    std::string v8 = (void **)ImsPrefs::getAccessNetworkRefreshDelayMillisecondsKey(v7);
    ImsPrefs::intValue(v7, v8);
    SipTimerContainer::startTimer((int8x8_t *)this + 341, (uint64_t)&kAccessNetworkRefreshDelayTimer);
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v21);
  }
  else
  {
    uint64_t v9 = (void *)*((void *)this + 17);
    ims::AccessNetworks::AccessNetworks(&v10, (long long *)((char *)this + 3160));
    BambiClient::notifyCallsOfAccessNetworkChange(v9, (uint64_t)this + 4160, (uint64_t)&v10, 0);
    if (v20 < 0) {
      operator delete(__p);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    if (v16 < 0) {
      operator delete(v15);
    }
    if (v14 < 0) {
      operator delete(v13);
    }
    if (v12 < 0) {
      operator delete(v11);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1C5527398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ims::AccessNetworks::~AccessNetworks(&a9);
  if (v9)
  {
    std::__shared_weak_count::__release_weak(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  _Unwind_Resume(a1);
}

void SipStack::handleRegistrationError(SipStack *this)
{
  if (!*((unsigned char *)this + 3709)) {
    goto LABEL_10;
  }
  uint64_t v2 = *((void *)this + 18);
  uint64_t v4 = *(void *)(v2 + 248);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 256);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    int v5 = *(_DWORD *)(v4 + 528);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  else
  {
    int v5 = *(_DWORD *)(v4 + 528);
  }
  if (v5 == 2
    && (long long v6 = (ImsPrefs *)SipStack::prefs(this),
        ReRegisterOnCellularHandoverKey = (void **)ImsPrefs::getReRegisterOnCellularHandoverKey(v6),
        ImsPrefs::BOOLValue(v6, ReRegisterOnCellularHandoverKey))
    && (std::string v8 = (ImsPrefs *)SipStack::prefs(this),
        RequireRegistrationOnEPSFallbackKey = (void **)ImsPrefs::getRequireRegistrationOnEPSFallbackKey(v8),
        ImsPrefs::BOOLValue(v8, RequireRegistrationOnEPSFallbackKey))
    && ims::AccessNetwork::isLTE((ims::AccessNetwork *)((char *)this + 3160)))
  {
    uint64_t v10 = (*(uint64_t (**)(SipStack *))(*(void *)this + 56))(this);
    (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Pending calls will be dropped due to registration error!", 56);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    unsigned int v11 = 1;
  }
  else
  {
LABEL_10:
    unsigned int v11 = 0;
  }
  uint64_t v12 = *((void *)this + 17);
  if (*((char *)this + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v18, *((const std::string::value_type **)this + 520), *((void *)this + 521));
  }
  else {
    std::string v18 = *(std::string *)((char *)this + 4160);
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  v13[0] = &unk_1F20B2680;
  v13[1] = &_bambiDomain;
  int v14 = 0x40000000;
  BambiClient::notifyCallsOfRegistrationChange(v12, (uint64_t)&v18, (uint64_t)v13, v11);
  ImsResult::~ImsResult((ImsResult *)v13);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C55275FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  if (*(char *)(v2 - 41) < 0) {
    operator delete(*(void **)(v2 - 64));
  }
  _Unwind_Resume(a1);
}

void SipStack::handleRegistrationTerminated(SipStack *this)
{
  uint64_t v2 = (char *)this + 4183;
  BambiAccessBarring::registrationStateChanged((BambiAccessBarring *)((char *)this + 2928), 0);
  BambiDeregisterHandler::stop(*((int8x8_t **)this + 532));
  SipTimerContainer::cancelAllTimers((SipTimerContainer *)((char *)this + 2728));
  int v3 = v2[105];
  v2[105] = 0;
  v2[153] = 1;
  if (*((_DWORD *)this + 50) == 3)
  {
    uint64_t v4 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v4);
    int v5 = *(void **)(v4 + 8);
    if (v3)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"registration terminated. Continuing to deinitialize.", 52);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 0x40000000;
      void v13[2] = ___ZN8SipStack28handleRegistrationTerminatedEv_block_invoke;
      v13[3] = &__block_descriptor_tmp_61;
      v13[4] = this;
      ims::performBlock((IMSClientManager *)v13);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"registration terminated, but I wasn't waiting for deregistration", 64);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
    }
  }
  uint64_t v6 = *((void *)this + 17);
  if (*v2 < 0) {
    std::string::__init_copy_ctor_external(&v12, *((const std::string::value_type **)this + 520), *((void *)this + 521));
  }
  else {
    std::string v12 = *(std::string *)((char *)this + 4160);
  }
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  v7[0] = &unk_1F20B2680;
  v7[1] = &_bambiDomain;
  int v8 = 1073741839;
  BambiClient::notifyCallsOfRegistrationChange(v6, (uint64_t)&v12, (uint64_t)v7, 0);
  ImsResult::~ImsResult((ImsResult *)v7);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_1C5527888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN8SipStack28handleRegistrationTerminatedEv_block_invoke(uint64_t a1)
{
}

void SipStack::updateRegisteredServices(SipStack *a1, int a2, int a3, std::string *a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14 = *((void *)a1 + 18);
  uint64_t v16 = *(void *)(v14 + 248);
  long long v15 = *(std::__shared_weak_count **)(v14 + 256);
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    int v17 = *(_DWORD *)(v16 + 1136);
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  else
  {
    int v17 = *(_DWORD *)(v16 + 1136);
  }
  if (v17 != a2) {
    goto LABEL_44;
  }
  uint64_t v18 = *((void *)a1 + 18);
  uint64_t v20 = *(void *)(v18 + 248);
  uint64_t v19 = *(std::__shared_weak_count **)(v18 + 256);
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    int v21 = *(_DWORD *)(v20 + 1104);
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  else
  {
    int v21 = *(_DWORD *)(v20 + 1104);
  }
  if (v21 != a2)
  {
LABEL_44:
    if (!*((unsigned char *)a1 + 4232))
    {
      uint64_t v22 = (*(uint64_t (**)(SipStack *))(*(void *)a1 + 48))(a1);
      (*(void (**)(SipStack *, uint64_t))(*(void *)a1 + 16))(a1, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"IMS services changed during limited connectivity mode, exiting...", 65);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v22 + 17) = 0;
      *((unsigned char *)a1 + 4232) = 1;
      uint64_t v23 = *((void *)a1 + 18);
      uint64_t v24 = *(void *)(v23 + 248);
      uint64_t v25 = *(std::__shared_weak_count **)(v23 + 256);
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 264))(v24, 1, 1);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ConnectivityHysteresis");
      SipTimerContainer::cancelTimer((int8x8_t *)a1 + 341, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v26 = (*(uint64_t (**)(SipStack *))(*(void *)a1 + 64))(a1);
  (*(void (**)(SipStack *, uint64_t))(*(void *)a1 + 16))(a1, v26);
  uint64_t v27 = *(void **)(v26 + 8);
  if (a2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"reason for updateRegisteredServices: ", 37);
    *(unsigned char *)(v26 + 17) = 0;
    LoggableString::LoggableString(&__p, a4);
    (*(void (**)(uint64_t, std::string *))(*(void *)v26 + 40))(v26, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v26 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v28 = *(unsigned __int8 *)(a5 + 23);
    if ((v28 & 0x80u) != 0) {
      uint64_t v28 = *(void *)(a5 + 8);
    }
    if (v28) {
      std::string::operator=((std::string *)((char *)a1 + 4112), (const std::string *)a5);
    }
    uint64_t v29 = *(unsigned __int8 *)(a6 + 23);
    if ((v29 & 0x80u) != 0) {
      uint64_t v29 = *(void *)(a6 + 8);
    }
    if (v29) {
      std::string::operator=((std::string *)((char *)a1 + 4136), (const std::string *)a6);
    }
    uint64_t v30 = (std::__shared_weak_count *)*((void *)a1 + 394);
    *((void *)a1 + 39IMSCallOptions::~IMSCallOptions(this + 3) = 0;
    *((void *)a1 + 394) = 0;
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    BambiDeregisterHandler::handleUpdateRegistration(*((int8x8_t **)a1 + 532));
    uint64_t v31 = *((void *)a1 + 18);
    uint64_t v32 = *(void *)(v31 + 248);
    int v33 = *(std::__shared_weak_count **)(v31 + 256);
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipRegistrationClient::updateServiceMask(v32, a2, a3, a4, a7);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if ((a2 & 1) == 0)
    {
      uint64_t v34 = *((void *)a1 + 17);
      if (ims::AccessNetwork::isLTE((ims::AccessNetwork *)((char *)a1 + 3160))) {
        BOOL v35 = "NonVoiceLTE";
      }
      else {
        BOOL v35 = "NoLTE";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v35);
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v36, (void *)a1 + 15);
      BambiClient::endAllCalls(v34, (uint64_t)&__p, &v36);
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"services revoked, deregistering", 31);
    *(unsigned char *)(v26 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v26 + 17) = 0;
    BambiDeregisterHandler::handleEndRegistration(*((int8x8_t **)a1 + 532), 0);
    SipStack::cleanUpLazuliMessagesAndSessions(a1);
  }
}

void sub_1C5527D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::handleSRVCCRequested(SipStack *this)
{
  uint64_t v1 = (int8x8_t *)*((void *)this + 532);
  uint64_t v2 = (ImsPrefs *)SipStack::prefs(this);
  SRVCCCleanupTimeoutSecondsKey = (void **)ImsPrefs::getSRVCCCleanupTimeoutSecondsKey(v2);
  int v4 = 1000 * ImsPrefs::intValue(v2, SRVCCCleanupTimeoutSecondsKey);
  BambiDeregisterHandler::start(v1, 1, v4);
}

void SipStack::handleFallbackRequested(SipStack *this)
{
  uint64_t v1 = (int8x8_t *)*((void *)this + 532);
  uint64_t v2 = (ImsPrefs *)SipStack::prefs(this);
  CSFBDeregisterTimeoutSecondsKey = (void **)ImsPrefs::getCSFBDeregisterTimeoutSecondsKey(v2);
  int v4 = 1000 * ImsPrefs::intValue(v2, CSFBDeregisterTimeoutSecondsKey);
  BambiDeregisterHandler::start(v1, 2, v4);
}

void SipStack::initiateEmergencyRedial(SipStack *this)
{
  if (*((unsigned char *)this + 176))
  {
    uint64_t v1 = *((void *)this + 18);
    uint64_t v2 = *(void *)(v1 + 248);
    int v3 = *(std::__shared_weak_count **)(v1 + 256);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v2 + 168))(v2, 20, -1, 0);
    if (v3)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
}

void sub_1C5527EC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipStack::registeredForVoice(SipStack *this)
{
  uint64_t v1 = *((void *)this + 18);
  int v3 = *(_DWORD **)(v1 + 248);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 256);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    int v4 = v3[276];
    unsigned int v5 = v3[284];
    int v6 = v3[132];
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  else
  {
    int v4 = v3[276];
    unsigned int v5 = v3[284];
    int v6 = v3[132];
  }
  return (v6 == 2) & v4 & v5;
}

uint64_t SipStack::registeredForSms(SipStack *this)
{
  uint64_t v1 = *((void *)this + 18);
  int v3 = *(_DWORD **)(v1 + 248);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 256);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    int v4 = v3[276];
    unsigned int v5 = v3[284];
    int v6 = v3[132];
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  else
  {
    int v4 = v3[276];
    unsigned int v5 = v3[284];
    int v6 = v3[132];
  }
  if (v6 == 2) {
    return ((v4 & v5) >> 2) & 1;
  }
  else {
    return 0;
  }
}

BOOL SipStack::isRegistrationLimitedAccess(SipStack *this)
{
  uint64_t v1 = *((void *)this + 18);
  uint64_t v3 = *(void *)(v1 + 248);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 256);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = *(void *)(v3 + 3632);
    if (v4) {
      unsigned int v5 = (int *)(v4 + 432);
    }
    else {
      unsigned int v5 = &SipRegistrationMode::kModeNormal;
    }
    int v6 = *v5;
    int v7 = SipRegistrationMode::kModeLimitedAccess;
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  else
  {
    uint64_t v8 = *(void *)(v3 + 3632);
    if (v8) {
      long long v9 = (int *)(v8 + 432);
    }
    else {
      long long v9 = &SipRegistrationMode::kModeNormal;
    }
    int v6 = *v9;
    int v7 = SipRegistrationMode::kModeLimitedAccess;
  }
  return v6 == v7;
}

uint64_t SipStack::isMultisimEnabled(SipStack *this)
{
  uint64_t result = *((void *)this + 17);
  if (result)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    BambiClient::sipStacks((BambiClient *)result, &v9);
    uint64_t v2 = v9;
    uint64_t v3 = v10;
    if (v9 != v10)
    {
      int v4 = 0;
      do
      {
        if (*(void *)v2)
        {
          uint64_t v5 = *(void *)(*(void *)v2 + 144);
          uint64_t v7 = *(void *)(v5 + 248);
          int v6 = *(std::__shared_weak_count **)(v5 + 256);
          if (v6)
          {
            atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
            int v8 = *(_DWORD *)(v7 + 528);
            std::__shared_weak_count::__release_shared[abi:ne180100](v6);
          }
          else
          {
            int v8 = *(_DWORD *)(v7 + 528);
          }
          if (v8 == 2)
          {
            if (v4)
            {
              std::string v12 = (void **)&v9;
              std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v12);
              return 1;
            }
            int v4 = 1;
          }
        }
        v2 += 16;
      }
      while (v2 != v3);
    }
    std::string v12 = (void **)&v9;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v12);
    return 0;
  }
  return result;
}

void SipStack::registrationDomain(SipStack *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 18);
  uint64_t v3 = *(SipRegistrationClient **)(v2 + 248);
  int v4 = *(std::__shared_weak_count **)(v2 + 256);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipRegistrationClient::registrationDomain(v3, a2);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C5528170(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::phoneContext(SipStack *this@<X0>, std::string *a2@<X8>)
{
  if (*((unsigned char *)this + 2640)) {
    SipUserAgent::publicDomain(*((SipUserAgent **)this + 18), (uint64_t)a2);
  }
  else {
    SipStack::registrationDomain(this, a2);
  }
}

void SipStack::makeCanonicalUri(SipStack *this@<X0>, const SipUri *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 40(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 33ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 32(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 24(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a3 + 25ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 17ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 16(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 8(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a3 + 9ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  SipUri::SipUri((SipUri *)a3, a2);
  memset(&__p, 0, sizeof(__p));
  SipStack::phoneContext(this, &__p);
  SipUri::makeCanonical((SipUri *)a3);
  if (!*((unsigned char *)this + 176)
    || (uint64_t v5 = (ImsPrefs *)SipStack::prefs(this),
        AllowPhoneContextInEmergencyUriKey = (void **)ImsPrefs::getAllowPhoneContextInEmergencyUriKey(v5),
        ImsPrefs::BOOLValue(v5, AllowPhoneContextInEmergencyUriKey)))
  {
    if (*(unsigned char *)(SipUserAgent::config(*((SipUserAgent **)this + 18)) + 610)
      || SipUri::needsPhoneContext((SipUri *)a3))
    {
      SipUri::setPhoneContext((uint64_t **)a3, (uint64_t)&__p);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5528290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  SipUri::~SipUri(v15);
  _Unwind_Resume(a1);
}

void SipStack::makeOutgoingSipUri(SipStack *a1@<X0>, std::string *a2@<X1>, SipUri *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  SipUri::SipUri((uint64_t)v7, a2);
  SipStack::makeOutgoingSipUri(a1, (const SipUri *)v7, a3, a4);
  SipUri::~SipUri((SipUri *)v7);
}

void sub_1C5528354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SipStack::makeOutgoingSipUri(SipStack *this@<X0>, const SipUri *a2@<X1>, SipUri *a3@<X2>, uint64_t a4@<X8>)
{
  if (SipUri::isSipUri(a2))
  {
    SipUri::operator=(a3, (uint64_t)a2);
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
    *(_OWORD *)(a4 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  }
  else if (SipUri::isTelUri(a2))
  {
    memset(&v14, 0, sizeof(v14));
    SipUserAgent::publicDomain(*((SipUserAgent **)this + 18), (uint64_t)&v14);
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v14.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      SipUri::setUser((uint64_t)a3, (const std::string *)((char *)a2 + 176), (uint64_t)&__p);
      if (v18 < 0) {
        operator delete(__p);
      }
      SipHost::SipHost((uint64_t)&__p, &v14);
      (*(void (**)(SipUri *, void **))(*(void *)a3 + 32))(a3, &__p);
      SipHost::~SipHost((SipHost *)&__p);
      SipUri::makeCanonical(a3);
      uint64_t v9 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"makeOutGoingSipUri: in = ", 25);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(const SipUri *, uint64_t))(*(void *)a2 + 40))(a2, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)", out = ", 8);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(SipUri *, uint64_t))(*(void *)a3 + 40))(a3, v9);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
      *(_OWORD *)(a4 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
      *(void *)a4 = &unk_1F20B2680;
      *(void *)(a4 + 8) = &_bambiDomain;
      *(_DWORD *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
    }
    else
    {
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      std::string __p = &unk_1F20B2680;
      uint64_t v16 = &_bambiDomain;
      int v17 = 0x40000000;
      uint64_t v13 = (const std::string *)ImsResult::operator<<<char [46]>((uint64_t)&__p, "no public domain available to build a sip URI");
      ImsResult::ImsResult((ImsResult *)a4, v13);
      ImsResult::~ImsResult((ImsResult *)&__p);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    std::string __p = &unk_1F20B2680;
    uint64_t v16 = &_bambiDomain;
    int v17 = 1073741825;
    uint64_t v10 = ImsResult::operator<<<char [12]>((uint64_t)&__p, "can't make ");
    uint64_t v11 = ImsResult::operator<<<std::string>(v10, (uint64_t)a2 + 104);
    std::string v12 = (const std::string *)ImsResult::operator<<<char [20]>(v11, " URIs into sip URIs");
    ImsResult::ImsResult((ImsResult *)a4, v12);
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
}

void sub_1C55286F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void SipStack::makeOutgoingSipUriForPull(void *a1@<X0>, uint64_t a2@<X1>, SipUri *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a1[18] + 264);
  if (!v5) {
    goto LABEL_30;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::size_type v8 = *(void *)(a2 + 8);
    if (v8)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, v8);
LABEL_7:
      uint64_t v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v5 + 152, (void **)&__p.__r_.__value_.__l.__data_);
      uint64_t v10 = (void **)(v5 + 160);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v10 == v9 || !*((unsigned char *)v9 + 648)) {
        goto LABEL_30;
      }
      uint64_t v11 = (const std::string *)(v9 + 65);
      SipDialogParticipantInfo::uri(v11, (std::string *)v20);
      if ((SBYTE7(v21) & 0x80u) == 0) {
        std::string v12 = (void *)BYTE7(v21);
      }
      else {
        std::string v12 = v20[1];
      }
      if (SBYTE7(v21) < 0)
      {
        operator delete(v20[0]);
        if (!v12)
        {
LABEL_30:
          *(_OWORD *)(a4 + 24) = 0u;
          *(_OWORD *)(a4 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
          *(_OWORD *)(a4 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
          *(void *)a4 = &unk_1F20B2680;
          *(void *)(a4 + 8) = &_bambiDomain;
          *(_DWORD *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = 1073741836;
          return;
        }
      }
      else if (!v12)
      {
        goto LABEL_30;
      }
      uint64_t v45 = 0;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      *(_OWORD *)long long v20 = 0u;
      SipDialogParticipantInfo::uri(v11, &v46);
      SipUri::SipUri((uint64_t)v20, &v46);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      SipUri::operator=(a3, (uint64_t)v20);
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
      *(_OWORD *)(a4 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
      *(void *)a4 = &unk_1F20B2680;
      *(void *)(a4 + 8) = &_bambiDomain;
      *(_DWORD *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
      SipUri::~SipUri((SipUri *)v20);
      return;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    std::string __p = *(std::string *)a2;
    goto LABEL_7;
  }
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  SipDialogTable::getAllDialogs((void *)(v5 + 152), (uint64_t)&v49);
  uint64_t v13 = v49;
  uint64_t v14 = v50;
  while (1)
  {
    if (v13 == v14)
    {
      v20[0] = &v49;
      std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
      goto LABEL_30;
    }
    if (*(unsigned char *)(v13 + 592)) {
      break;
    }
LABEL_26:
    v13 += 600;
  }
  SipDialogParticipantInfo::uri((const std::string *)(v13 + 464), (std::string *)v20);
  long long v15 = (void *)BYTE7(v21);
  if (SBYTE7(v21) < 0) {
    long long v15 = v20[1];
  }
  if (v15)
  {
    BOOL v16 = *(_DWORD *)(v13 + 136) == 4;
    if ((SBYTE7(v21) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  BOOL v16 = 0;
  if (SBYTE7(v21) < 0) {
LABEL_24:
  }
    operator delete(v20[0]);
LABEL_25:
  if (!v16) {
    goto LABEL_26;
  }
  uint64_t v17 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Using first found active Thumper call: ", 39);
  *(unsigned char *)(v17 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v20, (const std::string *)(v13 + 24));
  (*(void (**)(uint64_t, void **))(*(void *)v17 + 56))(v17, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" [", 2);
  *(unsigned char *)(v17 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v46, (const std::string *)v13);
  (*(void (**)(uint64_t, std::string *))(*(void *)v17 + 56))(v17, &v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  if (v48 < 0) {
    operator delete(v47);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  char v18 = (const std::string *)(v13 + 464);
  if (SHIBYTE(v22) < 0) {
    operator delete(*((void **)&v21 + 1));
  }
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  uint64_t v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  *(_OWORD *)long long v20 = 0u;
  SipDialogParticipantInfo::uri(v18, &v46);
  SipUri::SipUri((uint64_t)v20, &v46);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  SipUri::operator=(a3, (uint64_t)v20);
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a4 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)a4 = &unk_1F20B2680;
  *(void *)(a4 + 8) = &_bambiDomain;
  *(_DWORD *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  SipUri::~SipUri((SipUri *)v20);
  v20[0] = &v49;
  std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
}

void sub_1C5528C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  SipUri::~SipUri((SipUri *)&a13);
  a13 = (void **)(v13 - 88);
  std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void SipStack::activeThumperPullCallId(SipStack *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *(void *)(*((void *)this + 18) + 264);
  if (!v3)
  {
LABEL_15:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  char v18 = 0;
  long long v19 = 0;
  uint64_t v20 = 0;
  SipDialogTable::getAllDialogs((void *)(v3 + 152), (uint64_t)&v18);
  uint64_t v5 = v18;
  int v6 = v19;
  while (1)
  {
    if (v5 == v6)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
      std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_15;
    }
    if (*((unsigned char *)v5 + 592)) {
      break;
    }
LABEL_11:
    uint64_t v5 = (long long *)((char *)v5 + 600);
  }
  SipDialogParticipantInfo::uri((const std::string *)(v5 + 29), &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    BOOL v8 = *((_DWORD *)v5 + 34) == 4;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  BOOL v8 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_10:
  if (!v8) {
    goto LABEL_11;
  }
  uint64_t v9 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Using first found active Thumper call: ", 39);
  *(unsigned char *)(v9 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&__p, (const std::string *)v5 + 1);
  (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 56))(v9, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" [", 2);
  *(unsigned char *)(v9 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v11, (const std::string *)v5);
  (*(void (**)(uint64_t, void **))(*(void *)v9 + 56))(v9, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *((void *)v5 + 1));
  }
  else
  {
    long long v10 = *v5;
    a2->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1C5528F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  ims::AccessNetwork::~AccessNetwork(&a16);
  a16 = (void *)(v16 - 72);
  std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipStack::loggableName(SipStack *this@<X0>, std::string *a2@<X8>)
{
}

uint64_t SipStack::setMediaInitialized(SipStack *this, int a2)
{
  if (*((_DWORD *)this + 50) != 1)
  {
    uint64_t v7 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"setMediaInitialized called when we are in state: ", 49);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    return result;
  }
  int v4 = (char *)this + 4337;
  SipTimerContainer::cancelTimer((int8x8_t *)this + 341, (std::string *)"MediaInitTimer");
  if (a2) {
    int v5 = 2;
  }
  else {
    int v5 = 0;
  }
  *((_DWORD *)this + 5(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v5;
  *int v4 = 0;
  if (a2)
  {
    uint64_t v6 = *((void *)this + 359);
    if (v6)
    {
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v20, (void *)this + 15);
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      v15[0] = &unk_1F20B2680;
      v15[1] = &_bambiDomain;
      int v16 = 0;
LABEL_11:
      (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v6 + 16))(v6, &v20, v15);
      ImsResult::~ImsResult((ImsResult *)v15);
      if ((a2 & 1) == 0) {
        ImsResult::~ImsResult((ImsResult *)v10);
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
    }
  }
  else
  {
    *((unsigned char *)this + 4338) = 0;
    uint64_t v6 = *((void *)this + 359);
    if (v6)
    {
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v20, (void *)this + 15);
      long long v12 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      v10[0] = &unk_1F20B2680;
      v10[1] = &_bambiDomain;
      int v11 = 0x40000000;
      uint64_t v9 = (const std::string *)ImsResult::operator<<<char [18]>((uint64_t)v10, "media init failed");
      ImsResult::ImsResult((ImsResult *)v15, v9);
      goto LABEL_11;
    }
  }
  return ImsPowerAssertion::deinitialize((uint64_t)this + 2880);
}

void sub_1C5529228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  ImsResult::~ImsResult((ImsResult *)&a18);
  if ((v18 & 1) == 0) {
    ImsResult::~ImsResult((ImsResult *)&a9);
  }
  long long v21 = *(std::__shared_weak_count **)(v19 - 40);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

void SipStack::handleCallEvent(SipStack *this, BambiCallEvent *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v2)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v6)
    {
      if (v5 && *(void *)(v5 + 520)) {
        BambiEmergencyCallHandler::handleCallEvent(*((BambiEmergencyCallHandler **)this + 530), a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C5529300(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipStack::sendMessage(uint64_t a1, const SipUri *a2, uint64_t a3, uint64_t a4, const std::string *a5, const ims::LocationInfo *a6)
{
  if (SipStack::registeredForSms((SipStack *)a1))
  {
    uint64_t v31 = 0;
    memset(v30, 0, sizeof(v30));
    SipStack::makeCanonicalUri((SipStack *)a1, a2, (uint64_t)v30);
    uint64_t v12 = *(void *)(a1 + 144);
    uint64_t v14 = *(void *)(v12 + 192);
    long long v13 = *(std::__shared_weak_count **)(v12 + 200);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ims::LocationInfo::LocationInfo((ims::LocationInfo *)v21, a6);
    uint64_t v15 = SipMessageManager::send(v14, (uint64_t)v30, a3, a4, a5, (uint64_t)v21);
    if (v29 < 0) {
      operator delete(__p);
    }
    if (v27 < 0) {
      operator delete(v26);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    SipUri::~SipUri((SipUri *)v30);
  }
  else
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"not registered for SMS", 22);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    uint64_t v17 = *(void *)(a1 + 144);
    uint64_t v18 = *(void *)(v17 + 192);
    uint64_t v19 = *(std::__shared_weak_count **)(v17 + 200);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v32.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v32.__r_.__value_.__r.__words[2]) = 1073741826;
    SipMessageManager::deferError(v18, 0, &v32);
    ImsResult::~ImsResult((ImsResult *)&v32);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    return 0;
  }
  return v15;
}

void sub_1C552958C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  ims::LocationInfo::~LocationInfo((void **)&a9);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  SipUri::~SipUri((SipUri *)&a27);
  _Unwind_Resume(a1);
}

uint64_t SipStack::sendLazuli(SipStack *this, const LazuliSendParams *a2, const SipUri *a3)
{
  uint64_t v6 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SipStack::sendLazuli ", 21);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v32 = 0;
  memset(v31, 0, sizeof(v31));
  SipUri::SipUri((SipUri *)v31);
  uint64_t v7 = (ImsPrefs *)SipStack::prefs(this);
  CarrierBasedKey = (void **)ImsPrefs::getCarrierBasedKey(v7);
  if (!ImsPrefs::BOOLValue(v7, CarrierBasedKey)) {
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "botplatform");
  int64_t v9 = *((unsigned __int8 *)a3 + 39);
  if ((v9 & 0x80u) == 0) {
    long long v10 = (char *)a3 + 16;
  }
  else {
    long long v10 = (char *)*((void *)a3 + 2);
  }
  int v11 = (char)v30;
  uint64_t v12 = (void *)v29[0];
  if ((v30 & 0x80u) == 0) {
    long long v13 = (char *)v29;
  }
  else {
    long long v13 = (char *)v29[0];
  }
  if ((v30 & 0x80u) == 0) {
    int64_t v14 = v30;
  }
  else {
    int64_t v14 = v29[1];
  }
  if (v14)
  {
    if ((v9 & 0x80u) != 0) {
      int64_t v9 = *((void *)a3 + 3);
    }
    if (v9 >= v14)
    {
      long long v28 = a2;
      uint64_t v16 = &v10[v9];
      int v17 = *v13;
      uint64_t v18 = v10;
      do
      {
        int64_t v19 = v9 - v14;
        if (v19 == -1) {
          break;
        }
        uint64_t v20 = (char *)memchr(v18, v17, v19 + 1);
        if (!v20) {
          break;
        }
        long long v21 = v20;
        if (!memcmp(v20, v13, v14)) {
          goto LABEL_26;
        }
        uint64_t v18 = v21 + 1;
        int64_t v9 = v16 - (v21 + 1);
      }
      while (v9 >= v14);
      long long v21 = v16;
LABEL_26:
      BOOL v15 = v21 == v16 || v21 - v10 == -1;
      a2 = v28;
      if (v11 < 0)
      {
LABEL_33:
        operator delete(v12);
        if (!v15) {
          goto LABEL_34;
        }
LABEL_19:
        SipStack::makeCanonicalUri(this, a3, (uint64_t)v29);
        SipUri::operator=((SipUri *)v31, (uint64_t)v29);
        SipUri::~SipUri((SipUri *)v29);
        goto LABEL_35;
      }
    }
    else
    {
      BOOL v15 = 1;
      if ((char)v30 < 0) {
        goto LABEL_33;
      }
    }
  }
  else
  {
    BOOL v15 = 0;
    if ((char)v30 < 0) {
      goto LABEL_33;
    }
  }
  if (v15) {
    goto LABEL_19;
  }
LABEL_34:
  SipUri::operator=((SipUri *)v31, (uint64_t)a3);
LABEL_35:
  uint64_t v23 = *((void *)this + 18);
  long long v24 = *(SipLazuliManager **)(v23 + 208);
  char v25 = *(std::__shared_weak_count **)(v23 + 216);
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = SipLazuliManager::send(v24, a2, (const SipUri *)v31);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  SipUri::~SipUri((SipUri *)v31);
  return v26;
}

void sub_1C5529898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

uint64_t SipStack::addLazuliParticipant(SipStack *this, std::string *a2, const SipUri *a3)
{
  uint64_t v6 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SipStack::addLazuliParticipant ", 31);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  SipStack::makeCanonicalUri(this, a3, (uint64_t)v12);
  uint64_t v7 = *((void *)this + 18);
  BOOL v8 = *(SipLazuliManager **)(v7 + 208);
  int64_t v9 = *(std::__shared_weak_count **)(v7 + 216);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = SipLazuliManager::addGroupParticipant(v8, a2, (const SipUri *)v12);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  SipUri::~SipUri((SipUri *)v12);
  return v10;
}

void sub_1C5529A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  SipUri::~SipUri((SipUri *)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipStack::removeLazuliParticipant(SipStack *this, std::string *a2, const SipUri *a3)
{
  uint64_t v6 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SipStack::removeLazuliParticipant ", 34);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  SipStack::makeCanonicalUri(this, a3, (uint64_t)v12);
  uint64_t v7 = *((void *)this + 18);
  BOOL v8 = *(SipLazuliManager **)(v7 + 208);
  int64_t v9 = *(std::__shared_weak_count **)(v7 + 216);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = SipLazuliManager::removeGroupParticipant(v8, a2, (const SipUri *)v12);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  SipUri::~SipUri((SipUri *)v12);
  return v10;
}

void sub_1C5529BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  SipUri::~SipUri((SipUri *)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipStack::changeLazuliGroupInfo(SipStack *this, const LazuliSendParams *a2, const SipUri *a3)
{
  uint64_t v6 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SipStack::changeLazuliGroupInfo ", 32);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  SipStack::makeCanonicalUri(this, a3, (uint64_t)v12);
  uint64_t v7 = *((void *)this + 18);
  BOOL v8 = *(SipLazuliManager **)(v7 + 208);
  int64_t v9 = *(std::__shared_weak_count **)(v7 + 216);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = SipLazuliManager::changeGroupInfo(v8, a2, (const SipUri *)v12);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  SipUri::~SipUri((SipUri *)v12);
  return v10;
}

void sub_1C5529D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  SipUri::~SipUri((SipUri *)&a9);
  _Unwind_Resume(a1);
}

void SipStack::reportLazuliSpam(SipStack *this, const LazuliSpamReportParams *a2)
{
  uint64_t v4 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"SipStack::reportLazuliSpam", 26);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v5 = *((void *)this + 18);
  uint64_t v6 = *(SipLazuliManager **)(v5 + 208);
  uint64_t v7 = *(void *)(v5 + 216);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  SipLazuliManager::reportSpam(v6, a2);
}

void sub_1C5529E9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::sendOptionsRequest(uint64_t a1, uint64_t a2, const SipUri *a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"SipStack::sendOptionsRequest ", 29);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  SipStack::makeCanonicalUri((SipStack *)a1, a3, (uint64_t)v10);
  uint64_t v6 = *(void **)(a1 + 144);
  uint64_t v7 = v6[29];
  uint64_t v8 = v6[30];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v6 = *(void **)(a1 + 144);
  }
  uint64_t v9 = v6[27];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  SipOptionsManager::sendOptionsRequest(v7);
}

void sub_1C552A0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  ImsResult::~ImsResult((ImsResult *)&a12);
  if (a11)
  {
    std::__shared_weak_count::__release_weak(a11);
    if (!v22)
    {
LABEL_3:
      if (!v21) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v22)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  if (!v21)
  {
LABEL_5:
    SipUri::~SipUri((SipUri *)&a21);
    _Unwind_Resume(a1);
  }
LABEL_4:
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  goto LABEL_5;
}

void SipStack::getTlsFingerprint(SipStack *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 18);
  uint64_t v5 = *(void *)(v4 + 208);
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 216);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(a2, (long long *)(v5 + 448), (long long *)(v5 + 472));
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C552A188(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::coalesceLazuliRegistrationRefresh(SipStack *this)
{
  uint64_t v1 = *((void *)this + 18);
  uint64_t v2 = *(SipRegistrationClient **)(v1 + 248);
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 256);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipRegistrationClient::coalesceLazuliRegistrationRefresh(v2);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C552A1FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *SipStack::saveEmergencyMessageCallId(unsigned char *result, long long *a2)
{
  if (result[176])
  {
    uint64_t v3 = result;
    uint64_t v4 = (*(uint64_t (**)(unsigned char *))(*(void *)result + 64))(result);
    (*(void (**)(void *, uint64_t))(*v3 + 16))(v3, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"For emergency message, saving call-id ", 38);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v4 + 32))(v4, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    uint64_t v5 = (uint64_t *)v3[17];
    uint64_t v6 = v5 + 91;
    unint64_t v7 = v5[92];
    if (v7 >= v5[93])
    {
      uint64_t result = (unsigned char *)std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
      uint64_t result = (unsigned char *)(v7 + 24);
    }
    v5[92] = (uint64_t)result;
  }
  return result;
}

SipStack *SipStack::setEmergencyAni(SipStack *this, const ims::AccessNetworks *a2)
{
  if (*((unsigned char *)this + 176))
  {
    uint64_t v3 = this;
    uint64_t v4 = (char *)this + 3160;
    std::string::operator=((std::string *)((char *)this + 3160), (const std::string *)a2);
    std::string::operator=((std::string *)((char *)v3 + 3184), (const std::string *)a2 + 1);
    char v5 = *((unsigned char *)a2 + 64);
    *((_OWORD *)v4 + IMSCallOptions::~IMSCallOptions(this + 3) = *((_OWORD *)a2 + 3);
    *((unsigned char *)v3 + 3224) = v5;
    std::string::operator=((std::string *)((char *)v3 + 3232), (const std::string *)a2 + 3);
    std::string::operator=((std::string *)((char *)v3 + 3256), (const std::string *)a2 + 4);
    char v6 = *((unsigned char *)a2 + 136);
    *((_OWORD *)v3 + 205) = *(_OWORD *)((char *)a2 + 120);
    *((unsigned char *)v3 + 329ims::StackConfig::~StackConfig(this + 6) = v6;
    std::string::operator=((std::string *)((char *)v3 + 3304), (const std::string *)a2 + 6);
    std::string::operator=((std::string *)((char *)v3 + 3328), (const std::string *)a2 + 7);
    long long v7 = *((_OWORD *)a2 + 12);
    *((unsigned char *)v3 + 3368) = *((unsigned char *)a2 + 208);
    *((_OWORD *)v4 + 12) = v7;
    uint64_t v8 = (*(uint64_t (**)(SipStack *))(*(void *)v3 + 32))(v3);
    (*(void (**)(SipStack *, uint64_t))(*(void *)v3 + 16))(v3, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Setting up emergency access network: ", 37);
    *(unsigned char *)(v8 + 17) = 0;
    uint64_t v9 = (unsigned char *)ims::operator<<(v8, (uint64_t)v4);
    this = (SipStack *)(*(uint64_t (**)(unsigned char *, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v9[17] = 0;
  }
  return this;
}

void SipStack::mediaAddress(SipStack *this@<X0>, uint64_t a2@<X8>)
{
  char v5 = (char *)this + 184;
  uint64_t v4 = *((void *)this + 23);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 88))(v4))
  {
    SipHost::SipHost(a2, (uint64_t)v5);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)(*((void *)this + 20) + 1120) + 48))(&v6);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 32))(&v8);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    (*(void (**)(uint64_t, void))(*(void *)v8 + 64))(v8, 0);
    *(void *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 1ims::StackConfig::~StackConfig(this + 6) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    SipHost::SipHost(a2, (uint64_t)&v8);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_1C552A604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::updateSdpWithLocalAddressAndUsername(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  SipStack::mediaAddress((SipStack *)a1, (uint64_t)v9);
  uint64_t v4 = *a2;
  SipHost::address((SipHost *)v9, &v7);
  uint64_t v5 = SipUserAgent::publicUri(*(SipUserAgent **)(a1 + 144));
  SipUri::asString(v5, &__p);
  SDPModel::updateWithLocalAddressAndUsername(v4, (uint64_t)&v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  SipHost::~SipHost((SipHost *)v9);
}

void sub_1C552A6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, char a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  SipHost::~SipHost((SipHost *)&a18);
  _Unwind_Resume(a1);
}

uint64_t SipStack::massageIncomingDisplayNumber(uint64_t a1, uint64_t a2)
{
  void v25[2] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 2680))
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"not doing phone number prefix mapping while roaming", 51);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t result = 0;
    *(unsigned char *)(v3 + 17) = 0;
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 2648);
    uint64_t v6 = (void *)(a1 + 2656);
    if (v5 == (void *)(a1 + 2656))
    {
      return 0;
    }
    else
    {
      std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
      uint64_t v9 = (void *)(a2 + 8);
      while (1)
      {
        std::string::size_type v10 = *((char *)v5 + 55) < 0 ? v5[5] : *((unsigned __int8 *)v5 + 55);
        if ((v8 & 0x80) != 0)
        {
          if (v10 == -1) {
LABEL_43:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          uint64_t v12 = *(const void **)a2;
          size_t v11 = *(void *)(a2 + 8) >= v10 ? v10 : *(void *)(a2 + 8);
        }
        else
        {
          if (v10 == -1) {
            goto LABEL_43;
          }
          size_t v11 = v8 >= v10 ? v10 : v8;
          uint64_t v12 = (const void *)a2;
        }
        uint64_t v13 = *((char *)v5 + 55) >= 0 ? v5 + 4 : (void *)v5[4];
        BOOL v14 = !memcmp(v12, v13, v11) && v11 == v10;
        if (v14) {
          break;
        }
        BOOL v15 = (void *)v5[1];
        if (v15)
        {
          do
          {
            uint64_t v16 = v15;
            BOOL v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            uint64_t v16 = (void *)v5[2];
            BOOL v14 = *v16 == (void)v5;
            uint64_t v5 = v16;
          }
          while (!v14);
        }
        uint64_t v5 = v16;
        if (v16 == v6) {
          return 0;
        }
      }
      std::string::basic_string(&v23, (const std::string *)a2, v10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v24);
      int v17 = *((char *)v5 + 79);
      if (v17 >= 0) {
        uint64_t v18 = (const std::string::value_type *)(v5 + 7);
      }
      else {
        uint64_t v18 = (const std::string::value_type *)v5[7];
      }
      if (v17 >= 0) {
        std::string::size_type v19 = *((unsigned __int8 *)v5 + 79);
      }
      else {
        std::string::size_type v19 = v5[8];
      }
      uint64_t v20 = std::string::insert(&v23, 0, v18, v19);
      std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
      v25[0] = v20->__r_.__value_.__l.__size_;
      *(void *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(void *)a2 = v21;
      *uint64_t v9 = v25[0];
      *(void *)((char *)v9 + 7) = *(void *)((char *)v25 + 7);
      *(unsigned char *)(a2 + 2IMSCallOptions::~IMSCallOptions(this + 3) = v22;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      return 1;
    }
  }
  return result;
}

void sub_1C552A99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *SipStack::handleSystemWake(SipStack *this)
{
  BambiEmergencyCallHandler::checkTimers(*((int8x8_t **)this + 530));
  uint64_t v2 = *((void *)this + 18);
  uint64_t v3 = *(int8x8_t **)(v2 + 248);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 256);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipRegistrationClient::checkTimers(v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *((void *)this + 18);
  uint64_t v6 = *(SipDialogManager **)(v5 + 176);
  uint64_t v7 = *(std::__shared_weak_count **)(v5 + 184);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipDialogManager::checkTimers(v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::string::size_type v8 = (int8x8_t *)*((void *)this + 20);
  return SipTransportLayer::handleSystemWake(v8);
}

void sub_1C552AA4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipStack::isCampedOnWifi(SipStack *this)
{
  if (*((char *)this + 3255) < 0)
  {
    if (!*((void *)this + 405)) {
      goto LABEL_7;
    }
  }
  else if (!*((unsigned char *)this + 3255))
  {
    goto LABEL_7;
  }
  uint64_t v1 = (ims::AccessNetwork *)((char *)this + 3232);
  if (*((char *)this + 3279) < 0)
  {
    if (*((void *)this + 408)) {
      return ims::AccessNetwork::isWifi(v1);
    }
    goto LABEL_7;
  }
  if (!*((unsigned char *)this + 3279)) {
LABEL_7:
  }
    uint64_t v1 = (ims::AccessNetwork *)((char *)this + 3160);
  return ims::AccessNetwork::isWifi(v1);
}

void SipStack::addEmergencyNumberToUrnMapping(SipStack *a1, std::string *a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(SipStack *))(*(void *)a1 + 64))(a1);
  (*(void (**)(SipStack *, uint64_t))(*(void *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"mapping emergency number ", 25);
  *(unsigned char *)(v6 + 17) = 0;
  LoggableString::LoggableString(&__p, a2);
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 40))(v6, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" to ", 4);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, v6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  SipStack::carrierIdentifier(a1, &__p);
  std::string::size_type v8 = (uint64_t **)BambiPrefsManager::instance(v7);
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v9 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v11);
  SipUri::asString(a3, &v11);
  uint64_t v13 = a2;
  std::string::size_type v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v9 + 16, (void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v13);
  std::string::operator=((std::string *)(v10 + 7), &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C552ACAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::handleDeviceEvents(SipStack *this, __int16 a2)
{
  SipStack::carrierIdentifier(this, &__p);
  BOOL v4 = BambiPrefsManager::prefsValid((BambiPrefsManager *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v5 = !v4;
  if ((a2 & 2) == 0) {
    char v5 = 1;
  }
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = (ImsPrefs *)SipStack::prefs(this);
    DropRegistrationOnAirplaneModeToggleKey = (void **)ImsPrefs::getDropRegistrationOnAirplaneModeToggleKey(v6);
    if (ImsPrefs::BOOLValue(v6, DropRegistrationOnAirplaneModeToggleKey)) {
      BambiDeregisterHandler::start(*((int8x8_t **)this + 532), 3, 0);
    }
  }
  uint64_t v8 = *((void *)this + 18);
  if (v8)
  {
    std::string::size_type v10 = *(SipRegistrationClient **)(v8 + 248);
    uint64_t v9 = *(std::__shared_weak_count **)(v8 + 256);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      if (!v10) {
        goto LABEL_18;
      }
      uint64_t v11 = *((void *)this + 18);
      std::string::size_type v10 = *(SipRegistrationClient **)(v11 + 248);
      uint64_t v12 = *(std::__shared_weak_count **)(v11 + 256);
      if (v12)
      {
        char v13 = 0;
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_16;
      }
    }
    else
    {
      if (!v10) {
        goto LABEL_18;
      }
      uint64_t v12 = 0;
    }
    char v13 = 1;
LABEL_16:
    SipRegistrationClient::handleDeviceEvents(v10, a2);
    if ((v13 & 1) == 0) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
LABEL_18:
  if ((a2 & 0x100) != 0)
  {
    if (*((unsigned char *)this + 2681)) {
      SipStack::endRegistration(this);
    }
  }
}

void sub_1C552AE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if ((v16 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::allCallsEnded(SipStack *this)
{
  SipTimerContainer::cancelTimer((int8x8_t *)this + 341, (std::string *)&kAccessNetworkRefreshDelayTimer);
  uint64_t v2 = *((void *)this + 18);
  uint64_t v3 = *(SipRegistrationClient **)(v2 + 248);
  BOOL v4 = *(std::__shared_weak_count **)(v2 + 256);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipRegistrationClient::allCallsEnded(v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  BambiAccessBarring::allCallsEnded((BambiAccessBarring *)((char *)this + 2928));
}

void sub_1C552AEA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::callTerminationReason(uint64_t a1@<X0>, uint64_t a2@<X1>, BambiCallTerminationReason *a3@<X8>)
{
  BambiCallTerminationReasonsBase::reason((void (***)(uint64_t *__return_ptr))(a1 + 2248), a2, &v4);
  BambiCallTerminationReason::BambiCallTerminationReason(a3, v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C552AF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::getAssociatedUris(SipStack *this@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  SipRouteSet::allHops(*((void *)this + 18) + 480, &v10);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v9 = 0;
  uint64_t v3 = (uint64_t *)v10;
  BOOL v4 = (uint64_t *)v11;
  if (v10 != v11)
  {
    do
    {
      SipUri::asString(*v3, (uint64_t)__p);
      unint64_t v5 = a2[1];
      if (v5 >= a2[2])
      {
        uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (long long *)__p);
      }
      else
      {
        if (SHIBYTE(v9) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)a2[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v6 = *(_OWORD *)__p;
          *(void *)(v5 + 1ims::StackConfig::~StackConfig(this + 6) = v9;
          *(_OWORD *)unint64_t v5 = v6;
        }
        uint64_t v7 = v5 + 24;
        a2[1] = v5 + 24;
      }
      a2[1] = v7;
      ++v3;
    }
    while (v3 != v4);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v3 = (uint64_t *)v10;
  }
  if (v3)
  {
    uint64_t v11 = (char *)v3;
    operator delete(v3);
  }
}

void sub_1C552B010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipStack::callCount(SipStack *this)
{
  uint64_t v1 = *((void *)this + 17);
  if (v1)
  {
    if (*((char *)this + 4183) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 520), *((void *)this + 521));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *((_OWORD *)this + 260);
      __p.__r_.__value_.__r.__words[2] = *((void *)this + 522);
    }
    uint64_t v1 = BambiClient::callCountForStack(v1, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return v1;
}

void sub_1C552B0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipStack::activeCallCount(SipStack *this, int a2)
{
  uint64_t v2 = *((void *)this + 17);
  if (!v2) {
    return 0;
  }
  if (*((char *)this + 4183) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 520), *((void *)this + 521));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *((_OWORD *)this + 260);
    __p.__r_.__value_.__r.__words[2] = *((void *)this + 522);
  }
  uint64_t v4 = BambiClient::activeCallCountForStack(v2, a2, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1C552B198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipStack::transferCalls(uint64_t *a1, void *a2, void *a3)
{
  long long v6 = (ImsPrefs *)SipStack::prefs((SipStack *)a1);
  ExplicitTransferEnabledKey = (void **)ImsPrefs::getExplicitTransferEnabledKey(v6);
  if ((ImsPrefs::BOOLValue(v6, ExplicitTransferEnabledKey) & 1) == 0)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v8);
    uint64_t v9 = *(void **)(v8 + 8);
    std::string::size_type v10 = "Explicit call transfer is disabled by carrier";
    uint64_t v11 = 45;
    goto LABEL_5;
  }
  if (*((unsigned char *)a1 + 176))
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v8);
    uint64_t v9 = *(void **)(v8 + 8);
    std::string::size_type v10 = "Unable to initiate transfer on emergency stack";
    uint64_t v11 = 46;
LABEL_5:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v12 = 0;
    *(unsigned char *)(v8 + 17) = 0;
    return v12;
  }
  BOOL v14 = (void *)*a2;
  if (!*a2 || !*a3)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v8);
    uint64_t v9 = *(void **)(v8 + 8);
    std::string::size_type v10 = "transferee and transfer target must both be valid call objects";
    uint64_t v11 = 62;
    goto LABEL_5;
  }
  BOOL v15 = (std::__shared_weak_count *)v14[46];
  if (v15)
  {
    char v16 = std::__shared_weak_count::lock(v15);
    if (v16) {
      uint64_t v17 = v14[45];
    }
    else {
      uint64_t v17 = 0;
    }
  }
  else
  {
    uint64_t v17 = 0;
    char v16 = 0;
  }
  if (*(char *)(v17 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)(v17 + 4160), *(void *)(v17 + 4168));
  }
  else {
    std::string v78 = *(std::string *)(v17 + 4160);
  }
  uint64_t v18 = a1 + 520;
  if (*((char *)a1 + 4183) < 0)
  {
    std::string::__init_copy_ctor_external(&v77, (const std::string::value_type *)a1[520], a1[521]);
  }
  else
  {
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *v18;
    v77.__r_.__value_.__r.__words[2] = a1[522];
  }
  uint64_t v19 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v78.__r_.__value_.__l.__size_;
  }
  std::string::size_type v21 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  char v22 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v21 = v77.__r_.__value_.__l.__size_;
  }
  if (size != v21)
  {
LABEL_37:
    int v25 = 1;
    if ((v22 & 0x80) == 0) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v23 = &v77;
  }
  else {
    std::string v23 = (std::string *)v77.__r_.__value_.__r.__words[0];
  }
  if ((*((unsigned char *)&v78.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v78.__r_.__value_.__l.__data_, v23, v78.__r_.__value_.__l.__size_)) {
      goto LABEL_37;
    }
  }
  else if (*((unsigned char *)&v78.__r_.__value_.__s + 23))
  {
    char v24 = &v78;
    while (v24->__r_.__value_.__s.__data_[0] == v23->__r_.__value_.__s.__data_[0])
    {
      char v24 = (std::string *)((char *)v24 + 1);
      std::string v23 = (std::string *)((char *)v23 + 1);
      if (!--v19) {
        goto LABEL_50;
      }
    }
    goto LABEL_37;
  }
LABEL_50:
  uint64_t v33 = *a3;
  long long v34 = *(std::__shared_weak_count **)(*a3 + 368);
  if (v34)
  {
    long long v35 = std::__shared_weak_count::lock(v34);
    if (v35) {
      uint64_t v36 = *(void *)(v33 + 360);
    }
    else {
      uint64_t v36 = 0;
    }
  }
  else
  {
    uint64_t v36 = 0;
    long long v35 = 0;
  }
  if (*(char *)(v36 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(v36 + 4160), *(void *)(v36 + 4168));
  }
  else {
    std::string v80 = *(std::string *)(v36 + 4160);
  }
  if (*((char *)a1 + 4183) < 0)
  {
    std::string::__init_copy_ctor_external(&v79, (const std::string::value_type *)a1[520], a1[521]);
  }
  else
  {
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *v18;
    v79.__r_.__value_.__r.__words[2] = a1[522];
  }
  char v47 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v48 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v48 = v80.__r_.__value_.__l.__size_;
  }
  std::string::size_type v49 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  int v50 = SHIBYTE(v79.__r_.__value_.__r.__words[2]);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v49 = v79.__r_.__value_.__l.__size_;
  }
  if (v48 == v49)
  {
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v51 = &v79;
    }
    else {
      uint64_t v51 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v60 = memcmp(v80.__r_.__value_.__l.__data_, v51, v80.__r_.__value_.__l.__size_) == 0;
    }
    else if (*((unsigned char *)&v80.__r_.__value_.__s + 23))
    {
      uint64_t v52 = HIBYTE(v80.__r_.__value_.__r.__words[2]) - 1;
      BOOL v53 = &v80;
      do
      {
        int v55 = v53->__r_.__value_.__s.__data_[0];
        BOOL v53 = (std::string *)((char *)v53 + 1);
        int v54 = v55;
        int v57 = v51->__r_.__value_.__s.__data_[0];
        uint64_t v51 = (std::string *)((char *)v51 + 1);
        int v56 = v57;
        BOOL v59 = v52-- != 0;
        BOOL v60 = v54 == v56;
      }
      while (v54 == v56 && v59);
    }
    else
    {
      BOOL v60 = 1;
    }
  }
  else
  {
    BOOL v60 = 0;
  }
  if (v50 < 0)
  {
    operator delete(v79.__r_.__value_.__l.__data_);
    char v47 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  }
  if (v47 < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  int v25 = !v60;
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if ((*((unsigned char *)&v77.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_38:
  }
    operator delete(v77.__r_.__value_.__l.__data_);
LABEL_39:
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v25)
  {
    uint64_t v26 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"transferee (", 12);
    *(unsigned char *)(v26 + 17) = 0;
    char v27 = (void *)*a2;
    long long v28 = (std::__shared_weak_count *)v27[46];
    if (v28)
    {
      char v29 = std::__shared_weak_count::lock(v28);
      if (v29) {
        uint64_t v30 = v27[45];
      }
      else {
        uint64_t v30 = 0;
      }
    }
    else
    {
      uint64_t v30 = 0;
      char v29 = 0;
    }
    if (*(char *)(v30 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)(v30 + 4160), *(void *)(v30 + 4168));
    }
    else {
      std::string v78 = *(std::string *)(v30 + 4160);
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v26 + 32))(v26, &v78);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)") and transfer target (", 23);
    *(unsigned char *)(v26 + 17) = 0;
    uint64_t v37 = *a3;
    long long v38 = *(std::__shared_weak_count **)(v37 + 368);
    if (v38)
    {
      long long v39 = std::__shared_weak_count::lock(v38);
      if (v39) {
        uint64_t v40 = *(void *)(v37 + 360);
      }
      else {
        uint64_t v40 = 0;
      }
    }
    else
    {
      uint64_t v40 = 0;
      long long v39 = 0;
    }
    if (*(char *)(v40 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)(v40 + 4160), *(void *)(v40 + 4168));
    }
    else {
      std::string v77 = *(std::string *)(v40 + 4160);
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v26 + 32))(v26, &v77);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)") must be anchored to the same SIP stack", 40);
    *(unsigned char *)(v26 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v26 + 17) = 0;
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    return 0;
  }
  if (*(void *)(*a2 + 520) || (*(unsigned int (**)(void))(*(void *)*a2 + 104))(*a2))
  {
    uint64_t v31 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"Unable to initiate transfer with trasferee ", 43);
    *(unsigned char *)(v31 + 17) = 0;
    uint64_t v32 = *a2 + *(void *)(*(void *)*a2 - 48);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)".  Call is already a participant or is an emergency call", 56);
    *(unsigned char *)(v31 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v12 = 0;
    *(unsigned char *)(v31 + 17) = 0;
    return v12;
  }
  if (*(void *)(*a3 + 520) || (*(unsigned int (**)(void))(*(void *)*a3 + 104))(*a3))
  {
    uint64_t v41 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v41);
    uint64_t v42 = ImsOutStream::operator<<(v41, "Unable to initiate transfer with transfer target ");
    uint64_t v43 = *a3 + *(void *)(*(void *)*a3 - 48);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 16))(v43, v42);
    long long v44 = ".  Call is already a participant or is an emergency call";
    uint64_t v45 = v42;
LABEL_79:
    std::string v46 = (unsigned char *)ImsOutStream::operator<<(v45, v44);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v12 = 0;
    v46[17] = 0;
    return v12;
  }
  uint64_t v61 = *a1;
  if (a1[534])
  {
    uint64_t v62 = (*(uint64_t (**)(uint64_t *))(v61 + 56))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v62);
    long long v44 = "Unable to initiate transfer, existing transfer already in progress.";
    uint64_t v45 = v62;
    goto LABEL_79;
  }
  uint64_t v63 = (*(uint64_t (**)(uint64_t *))(v61 + 64))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v63);
  uint64_t v64 = ImsOutStream::operator<<(v63, "transferring call between ");
  ObfuscatedString::ObfuscatedString((uint64_t)&v78, (const std::string *)(*a2 + 472));
  (*(void (**)(uint64_t, std::string *))(*(void *)v64 + 56))(v64, &v78);
  unint64_t v65 = (unsigned char *)ImsOutStream::operator<<(v64, " and ");
  ObfuscatedString::ObfuscatedString((uint64_t)&v77, (const std::string *)(*a3 + 472));
  (*(void (**)(unsigned char *, std::string *))(*(void *)v65 + 56))(v65, &v77);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v65[17] = 0;
  ims::AccessNetwork::~AccessNetwork((void **)&v77.__r_.__value_.__l.__data_);
  ims::AccessNetwork::~AccessNetwork((void **)&v78.__r_.__value_.__l.__data_);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v75, a1 + 15);
  BambiTransferHandler::create(&v75, (uint64_t)(a1 + 14), (BambiTransferHandler **)&v78);
  long long v66 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v67 = (std::__shared_weak_count *)a1[535];
  *((_OWORD *)a1 + 267) = v66;
  if (v67)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
    if (v78.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v78.__r_.__value_.__l.__size_);
    }
  }
  if (v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
  uint64_t v68 = a1[534];
  long long v69 = (std::__shared_weak_count *)a2[1];
  uint64_t v73 = *a2;
  uint64_t v74 = v69;
  if (v69) {
    atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v70 = (std::__shared_weak_count *)a3[1];
  uint64_t v71 = *a3;
  uint64_t v72 = v70;
  if (v70) {
    atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = BambiTransferHandler::start(v68, &v73, &v71);
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  return v12;
}

void sub_1C552BD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::transferComplete(SipStack *this)
{
  uint64_t v2 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"SipStack::transferComplete", 26);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 535);
  *((_OWORD *)this + 267) = 0u;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 520), *((void *)this + 521));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 4160);
  }
  uint64_t v4 = IMSClientManager::delegateForStack((void **)&__p.__r_.__value_.__l.__data_);
  (*(void (**)(void))(*(void *)(v4 + 16) + 112))();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C552BFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipStack::transferComplete(SipStack *this)
{
}

void SipStack::transferFailed(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 4280);
  *(_OWORD *)(a1 + 4272) = 0u;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 4160), *(void *)(a1 + 4168));
  }
  else {
    std::string __p = *(std::string *)(a1 + 4160);
  }
  uint64_t v3 = IMSClientManager::delegateForStack((void **)&__p.__r_.__value_.__l.__data_);
  (*(void (**)(void))(*(void *)(v3 + 16) + 112))();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C552C0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipStack::transferFailed(uint64_t a1)
{
}

uint64_t std::operator==[abi:ne180100]<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>>(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1[2] != a3) {
    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)(a1 + 1);
  uint64_t v4 = (unsigned __int8 *)*a1;
  if ((void *)*a1 == a1 + 1) {
    return 1;
  }
  do
  {
    uint64_t result = std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>((uint64_t)&v12, v4 + 32, a2 + 32);
    if (!result) {
      break;
    }
    uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    uint64_t v8 = v4;
    if (v7)
    {
      do
      {
        uint64_t v4 = v7;
        uint64_t v7 = *(unsigned __int8 **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v4 = (unsigned __int8 *)*((void *)v8 + 2);
        BOOL v9 = *(void *)v4 == (void)v8;
        uint64_t v8 = v4;
      }
      while (!v9);
    }
    std::string::size_type v10 = (unsigned __int8 *)*((void *)a2 + 1);
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        std::string::size_type v10 = *(unsigned __int8 **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = (unsigned __int8 *)*((void *)a2 + 2);
        BOOL v9 = *(void *)v11 == (void)a2;
        a2 = v11;
      }
      while (!v9);
    }
    a2 = v11;
  }
  while (v4 != v3);
  return result;
}

uint64_t SipTimers::operator==(void *a1, void *a2, uint64_t a3)
{
  if (a1[3] == a3)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = a1 + 2;
    if (v3 == a1 + 2) {
      return 1;
    }
    while (1)
    {
      uint64_t v6 = *((unsigned __int8 *)v3 + 55);
      if ((v6 & 0x80u) == 0) {
        uint64_t v7 = *((unsigned __int8 *)v3 + 55);
      }
      else {
        uint64_t v7 = v3[5];
      }
      uint64_t v8 = *((unsigned __int8 *)a2 + 55);
      int v9 = (char)v8;
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = a2[5];
      }
      if (v7 != v8) {
        break;
      }
      std::string::size_type v10 = (const void **)(v3 + 4);
      if (v9 >= 0) {
        uint64_t v11 = (unsigned __int8 *)(a2 + 4);
      }
      else {
        uint64_t v11 = (unsigned __int8 *)a2[4];
      }
      if ((v6 & 0x80) != 0)
      {
        BOOL v12 = memcmp(*v10, v11, v3[5]) == 0;
      }
      else
      {
        if (*((unsigned char *)v3 + 55))
        {
          while (*(unsigned __int8 *)v10 == *v11)
          {
            std::string::size_type v10 = (const void **)((char *)v10 + 1);
            ++v11;
            if (!--v6) {
              goto LABEL_16;
            }
          }
          return 0;
        }
LABEL_16:
        BOOL v12 = 1;
      }
      uint64_t result = 0;
      if (!v12 || *((_DWORD *)v3 + 14) != *((_DWORD *)a2 + 14)) {
        return result;
      }
      BOOL v14 = (void *)v3[1];
      BOOL v15 = v3;
      if (v14)
      {
        do
        {
          uint64_t v3 = v14;
          BOOL v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v3 = (void *)v15[2];
          BOOL v16 = *v3 == (void)v15;
          BOOL v15 = v3;
        }
        while (!v16);
      }
      uint64_t v17 = (void *)a2[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)a2[2];
          BOOL v16 = *v18 == (void)a2;
          a2 = v18;
        }
        while (!v16);
      }
      a2 = v18;
      if (v3 == v4) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t SipAuthConfig::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    uint64_t v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  int v9 = (unsigned __int8 *)*((void *)a1 + 3);
  std::string::size_type v10 = (unsigned __int8 *)*((void *)a1 + 4);
  uint64_t v11 = (unsigned __int8 *)*((void *)v6 + 3);
  if (v10 - v9 != *((void *)v6 + 4) - (void)v11) {
    return 0;
  }
  while (v9 != v10)
  {
    uint64_t result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v13, v9, v11);
    if (!result) {
      return result;
    }
    v9 += 24;
    v11 += 24;
  }
  return *((_DWORD *)a1 + 12) == *((_DWORD *)v6 + 12);
}

uint64_t std::operator==[abi:ne180100]<std::string,std::less<std::string>,std::allocator<std::string>>(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1[2] != a3) {
    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)(a1 + 1);
  uint64_t v4 = (unsigned __int8 *)*a1;
  if ((void *)*a1 == a1 + 1) {
    return 1;
  }
  do
  {
    uint64_t result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v12, v4 + 32, a2 + 32);
    if (!result) {
      break;
    }
    uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    uint64_t v8 = v4;
    if (v7)
    {
      do
      {
        uint64_t v4 = v7;
        uint64_t v7 = *(unsigned __int8 **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v4 = (unsigned __int8 *)*((void *)v8 + 2);
        BOOL v9 = *(void *)v4 == (void)v8;
        uint64_t v8 = v4;
      }
      while (!v9);
    }
    std::string::size_type v10 = (unsigned __int8 *)*((void *)a2 + 1);
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        std::string::size_type v10 = *(unsigned __int8 **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = (unsigned __int8 *)*((void *)a2 + 2);
        BOOL v9 = *(void *)v11 == (void)a2;
        a2 = v11;
      }
      while (!v9);
    }
    a2 = v11;
  }
  while (v4 != v3);
  return result;
}

uint64_t std::operator==[abi:ne180100]<unsigned int,std::less<unsigned int>,std::allocator<unsigned int>>(void *a1, void *a2, uint64_t a3)
{
  if (a1[2] != a3) {
    return 0;
  }
  int v5 = (void *)*a1;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = v5;
  if (v5 == v3) {
    return 1;
  }
  do
  {
    BOOL v6 = *((_DWORD *)v4 + 7) == *((_DWORD *)a2 + 7);
    if (*((_DWORD *)v4 + 7) != *((_DWORD *)a2 + 7)) {
      break;
    }
    uint64_t v7 = (void *)v4[1];
    uint64_t v8 = v4;
    if (v7)
    {
      do
      {
        uint64_t v4 = v7;
        uint64_t v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v4 = (void *)v8[2];
        BOOL v9 = *v4 == (void)v8;
        uint64_t v8 = v4;
      }
      while (!v9);
    }
    std::string::size_type v10 = (void *)a2[1];
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        std::string::size_type v10 = (void *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = (void *)a2[2];
        BOOL v9 = *v11 == (void)a2;
        a2 = v11;
      }
      while (!v9);
    }
    a2 = v11;
  }
  while (v4 != v3);
  return v6;
}

uint64_t std::operator==[abi:ne180100]<SipSecurityAgreementConfig,std::allocator<SipSecurityAgreementConfig>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 - a1 != a4 - a3) {
    return 0;
  }
  uint64_t v5 = a1;
  if (a1 == a2) {
    return 1;
  }
  for (uint64_t i = a3; ; i += 72)
  {
    uint64_t v7 = *(unsigned __int8 *)(v5 + 31);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *(unsigned __int8 *)(v5 + 31);
    }
    else {
      uint64_t v8 = *(void *)(v5 + 16);
    }
    uint64_t v9 = *(unsigned __int8 *)(i + 31);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(i + 16);
    }
    if (v8 != v9) {
      break;
    }
    if (v10 >= 0) {
      uint64_t v11 = (unsigned __int8 *)(i + 8);
    }
    else {
      uint64_t v11 = *(unsigned __int8 **)(i + 8);
    }
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v5 + 8), v11, *(void *)(v5 + 16))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v5 + 31))
    {
      uint64_t v12 = 0;
      while (*(unsigned __int8 *)(v5 + v12 + 8) == v11[v12])
      {
        if (v7 == ++v12) {
          goto LABEL_20;
        }
      }
      return 0;
    }
LABEL_20:
    uint64_t result = SipParameterMap::operator==((void *)(v5 + 32), i + 32);
    if (!result) {
      return result;
    }
    v5 += 72;
    if (v5 == a2) {
      return 1;
    }
  }
  return 0;
}

uint64_t std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a3[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    int v10 = a3;
  }
  else {
    int v10 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5)) {
      return 0;
    }
  }
  else if (v4)
  {
    uint64_t v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v12 = a2[47];
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = a2[47];
  }
  else {
    uint64_t v13 = *((void *)a2 + 4);
  }
  uint64_t v14 = a3[47];
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *((void *)a3 + 4);
  }
  if (v13 != v14) {
    return 0;
  }
  BOOL v16 = (const void **)(a2 + 24);
  uint64_t v19 = (unsigned __int8 *)*((void *)a3 + 3);
  uint64_t v18 = a3 + 24;
  uint64_t v17 = v19;
  if (v15 >= 0) {
    uint64_t v20 = v18;
  }
  else {
    uint64_t v20 = v17;
  }
  if ((v12 & 0x80) != 0) {
    return memcmp(*v16, v20, *((void *)a2 + 4)) == 0;
  }
  if (!a2[47]) {
    return 1;
  }
  uint64_t v21 = v12 - 1;
  do
  {
    int v23 = *(unsigned __int8 *)v16;
    BOOL v16 = (const void **)((char *)v16 + 1);
    int v22 = v23;
    int v25 = *v20++;
    int v24 = v25;
    BOOL v27 = v21-- != 0;
    uint64_t result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

void std::__shared_ptr_emplace<SipTransportLayer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D9150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipTransportLayer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D9150;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipTransportLayer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<BambiDeregisterHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D91A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiDeregisterHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D91A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiDeregisterHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<BambiEmergencyCallHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D91F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiEmergencyCallHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D91F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiEmergencyCallHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<SipStack,std::allocator<SipStack>,BambiCallHandler *&,BambiClient *&,BOOL &,std::string const&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, char *a3@<X3>, const std::string *a4@<X4>, void *a5@<X8>)
{
  int v10 = operator new(0x1128uLL);
  std::__shared_ptr_emplace<SipStack>::__shared_ptr_emplace[abi:ne180100]<BambiCallHandler *&,BambiClient *&,BOOL &,std::string const&,std::allocator<SipStack>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a5, v10 + 18, (uint64_t)(v10 + 3));
}

void sub_1C552CA30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SipStack>::__shared_ptr_emplace[abi:ne180100]<BambiCallHandler *&,BambiClient *&,BOOL &,std::string const&,std::allocator<SipStack>,0>(void *a1, uint64_t *a2, uint64_t *a3, char *a4, const std::string *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20D9240;
  SipStack::SipStack((uint64_t)(a1 + 3), *a2, *a3, *a4, a5);
  return a1;
}

void sub_1C552CA98(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipStack>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D9240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipStack>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D9240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipStack>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D9290;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D9290;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20D9290;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + IMSCallOptions::~IMSCallOptions(this + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D9290;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 80))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C552CD90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D9310;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D9310;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20D9310;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + IMSCallOptions::~IMSCallOptions(this + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D9310;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 80))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C552D038(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D9390;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D9390;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20D9390;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + IMSCallOptions::~IMSCallOptions(this + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D9390;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 80))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C552D2E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::target_type()
{
}

void std::__shared_ptr_emplace<SipProxyResolver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D9410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipProxyResolver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D9410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipProxyResolver>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D9460;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D9460;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20D9460;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + IMSCallOptions::~IMSCallOptions(this + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D9460;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 80))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C552D624(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_SipStack_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&kWaitForDeregistrationTimer, "WaitForDeregistrationTimer");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  __cxa_atexit(MEMORY[0x1E4FBA210], &kWaitForDeregistrationTimer, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&kAccessNetworkRefreshDelayTimer, "AccessNetworkRefreshDelayTimer");
  return __cxa_atexit(v0, &kAccessNetworkRefreshDelayTimer, &dword_1C51D1000);
}

void XcapDocumentOIR::XcapDocumentOIR(XcapDocumentOIR *this)
{
  unsigned __int8 v3 = 0;
  uint64_t v4 = (char *)&v3;
  uint64_t v2 = (long long *)(std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v3, (uint64_t)&std::piecewise_construct, &v4)+ 5);
  *(void *)this = &unk_1F20C81E8;
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)this + 8, (long long *)&XcapDocumentOIR::kName, v2);
  *((void *)this + 8) = &XcapDocumentOIR::kName;
  *((void *)this + 9) = v2;
  *((_WORD *)this + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 257;
  *(void *)this = &unk_1F20D94E0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20D9578;
}

void XcapDocumentOIR::~XcapDocumentOIR(void **this)
{
}

{
  uint64_t vars8;

  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'XcapDocumentOIR::~XcapDocumentOIR(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this);
  JUMPOUT(0x1C878E320);
}

uint64_t XcapDocumentOIR::createChild(uint64_t a1, uint64_t a2)
{
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  uint64_t v3 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size_t size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v5 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v5 = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v6 = qword_1EBBDB0D0;
  if (byte_1EBBDB0DF >= 0) {
    uint64_t v6 = byte_1EBBDB0DF;
  }
  if (v5 == v6)
  {
    if (byte_1EBBDB0DF >= 0) {
      uint64_t v7 = &XcapDocumentOIR::kName;
    }
    else {
      uint64_t v7 = (uint64_t *)XcapDocumentOIR::kName;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      uint64_t v12 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v7, __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_32;
      }
      if (size != 17)
      {
LABEL_31:
        a1 = 0;
        goto LABEL_32;
      }
LABEL_30:
      if (!memcmp(v12, "default-behaviour", size)) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
    if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
      return a1;
    }
    p_s1 = &__s1;
    uint64_t v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v7)
    {
      p_s1 = (std::string *)((char *)p_s1 + 1);
      uint64_t v7 = (uint64_t *)((char *)v7 + 1);
      if (!--v9) {
        goto LABEL_24;
      }
    }
  }
  if (v5 == 17)
  {
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
        return a1;
      }
      int v10 = &__s1;
      uint64_t v11 = "default-behaviour";
      while (v10->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v11)
      {
        int v10 = (std::string *)((char *)v10 + 1);
        ++v11;
        if (!--v3) {
          goto LABEL_24;
        }
      }
      goto LABEL_23;
    }
    uint64_t v12 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_30;
  }
LABEL_23:
  a1 = 0;
LABEL_24:
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    uint64_t v12 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_32:
    operator delete(v12);
  }
  return a1;
}

void XcapDocumentOIR::parseChild(unsigned char *a1, uint64_t a2, uint64_t *a3)
{
  std::string __p = 0;
  size_t v30 = 0;
  uint64_t v31 = 0;
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  uint64_t v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size_t size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v9 = qword_1EBBDB0D0;
  if (byte_1EBBDB0DF >= 0) {
    uint64_t v9 = byte_1EBBDB0DF;
  }
  if (v8 != v9) {
    goto LABEL_16;
  }
  if (byte_1EBBDB0DF >= 0) {
    int v10 = &XcapDocumentOIR::kName;
  }
  else {
    int v10 = (uint64_t *)XcapDocumentOIR::kName;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    int v15 = (const void *)__s1.__r_.__value_.__r.__words[0];
    if (memcmp(__s1.__r_.__value_.__l.__data_, v10, __s1.__r_.__value_.__l.__size_))
    {
      if (size != 17) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
LABEL_26:
    bambi::XmlParserItem::parseChild((uint64_t)a1, a2, a3);
    goto LABEL_29;
  }
  if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
    goto LABEL_26;
  }
  p_s1 = &__s1;
  uint64_t v12 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
  {
    p_s1 = (std::string *)((char *)p_s1 + 1);
    int v10 = (uint64_t *)((char *)v10 + 1);
    if (!--v12) {
      goto LABEL_26;
    }
  }
LABEL_16:
  if (v8 != 17) {
    goto LABEL_29;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    int v15 = (const void *)__s1.__r_.__value_.__r.__words[0];
LABEL_28:
    if (!memcmp(v15, "default-behaviour", size)) {
      goto LABEL_35;
    }
LABEL_29:
    LOBYTE(v1ims::StackConfig::~StackConfig(this + 6) = 0;
    goto LABEL_30;
  }
  if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
    uint64_t v13 = &__s1;
    uint64_t v14 = "default-behaviour";
    while (v13->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v14)
    {
      uint64_t v13 = (std::string *)((char *)v13 + 1);
      ++v14;
      if (!--v6) {
        goto LABEL_35;
      }
    }
    goto LABEL_29;
  }
LABEL_35:
  (*(void (**)(unsigned char *, const char *, uint64_t *, void **))(*(void *)a1 + 72))(a1, "default-behaviour", a3, &__p);
  uint64_t v17 = HIBYTE(v31);
  int v16 = HIBYTE(v31);
  size_t v18 = v30;
  if (v31 >= 0) {
    size_t v19 = HIBYTE(v31);
  }
  else {
    size_t v19 = v30;
  }
  uint64_t v20 = qword_1EBBDC450;
  if (byte_1EBBDC45F >= 0) {
    uint64_t v20 = byte_1EBBDC45F;
  }
  if (v19 != v20) {
    goto LABEL_51;
  }
  if (byte_1EBBDC45F >= 0) {
    uint64_t v21 = &qword_1EBBDC448;
  }
  else {
    uint64_t v21 = (uint64_t *)qword_1EBBDC448;
  }
  if (v31 < 0)
  {
    if (memcmp(__p, v21, v30)) {
      goto LABEL_51;
    }
LABEL_63:
    char v27 = 0;
LABEL_66:
    a1[81] = v27;
    goto LABEL_30;
  }
  if (!HIBYTE(v31)) {
    goto LABEL_63;
  }
  p_p = &__p;
  uint64_t v23 = HIBYTE(v31);
  while (*(unsigned __int8 *)p_p == *(unsigned __int8 *)v21)
  {
    p_p = (void **)((char *)p_p + 1);
    uint64_t v21 = (uint64_t *)((char *)v21 + 1);
    if (!--v23) {
      goto LABEL_63;
    }
  }
LABEL_51:
  uint64_t v24 = qword_1EBBDC438;
  if (byte_1EBBDC447 >= 0) {
    uint64_t v24 = byte_1EBBDC447;
  }
  if (v19 != v24) {
    goto LABEL_30;
  }
  if (byte_1EBBDC447 >= 0) {
    int v25 = &_MergedGlobals_23;
  }
  else {
    int v25 = (uint64_t *)_MergedGlobals_23;
  }
  if ((v16 & 0x80) != 0)
  {
    if (memcmp(__p, v25, v18)) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
  if (!v16)
  {
LABEL_65:
    char v27 = 1;
    goto LABEL_66;
  }
  uint64_t v26 = &__p;
  while (*(unsigned __int8 *)v26 == *(unsigned __int8 *)v25)
  {
    uint64_t v26 = (void **)((char *)v26 + 1);
    int v25 = (uint64_t *)((char *)v25 + 1);
    if (!--v17) {
      goto LABEL_65;
    }
  }
LABEL_30:
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v16 & 0x80) == 0) {
      return;
    }
LABEL_34:
    operator delete(__p);
    return;
  }
  operator delete(__s1.__r_.__value_.__l.__data_);
  if (v31 < 0) {
    goto LABEL_34;
  }
}

void sub_1C552DD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void XcapDocumentOIR::constructTree(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  bambi::XmlTreeItem::makeNode(a1);
}

void sub_1C552DE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'XcapDocumentOIR::constructTree(void *a1@<X8>)
{
}

uint64_t XcapDocumentOIR::asString@<X0>(XcapDocumentOIR *this@<X0>, void *a2@<X8>)
{
  uint64_t v15 = 0;
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  memset(v10, 0, sizeof(v10));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"OIR Default: ", 13);
  if (*((unsigned char *)this + 81)) {
    std::string::size_type v5 = "Restricted";
  }
  else {
    std::string::size_type v5 = "Allowed";
  }
  if (*((unsigned char *)this + 81)) {
    uint64_t v6 = 10;
  }
  else {
    uint64_t v6 = 7;
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  std::string::size_type v8 = std::locale::use_facet(&v16, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10 + 8, a2);
  *(void *)&v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(*(void *)&v10[0] - MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::~MediaSessionSRVCCQueue((MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v10[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v14);
}

void sub_1C552E048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::locale::~locale((std::locale *)(v9 - 40));
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void XcapDocumentOIR::clone(XcapDocumentOIR *this)
{
}

void sub_1C552E198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  MEMORY[0x1C878E320](v2, 0x10F3C401C462E74);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_XcapDocumentOIR_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&XcapDocumentOIR::kName, "originating-identity-presentation-restriction");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  __cxa_atexit(MEMORY[0x1E4FBA210], &XcapDocumentOIR::kName, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&_MergedGlobals_23, "presentation-restricted");
  __cxa_atexit(v0, &_MergedGlobals_23, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC448, "presentation-not-restricted");
  return __cxa_atexit(v0, &qword_1EBBDC448, &dword_1C51D1000);
}

uint64_t ims::getNumMatchesForPattern(uint64_t *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6 = (void *)MEMORY[0x1C878EAB0]();
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = (uint64_t *)*a2;
  }
  std::string::size_type v8 = [NSString stringWithCString:v7 encoding:4];
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = (uint64_t *)*a1;
  }
  uint64_t v10 = [NSString stringWithCString:v9 encoding:4];
  id v17 = 0;
  uint64_t v11 = [MEMORY[0x1E4F28FD8] regularExpressionWithPattern:v8 options:a3 error:&v17];
  id v12 = v17;
  long long v13 = v12;
  if (v11) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14) {
    uint64_t v15 = objc_msgSend(v11, "numberOfMatchesInString:options:range:", v10, 0, 0, objc_msgSend(v10, "length"));
  }
  else {
    uint64_t v15 = 0;
  }

  return v15;
}

void sub_1C552E3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ims::escapeXMLString(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void *)MEMORY[0x1C878EAB0]();
  if (*((char *)a1 + 23) >= 0) {
    std::string::size_type v5 = a1;
  }
  else {
    std::string::size_type v5 = (uint64_t *)*a1;
  }
  uint64_t v6 = [NSString stringWithUTF8String:v5];
  if (![v6 length])
  {
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v6 UTF8String]);
    goto LABEL_45;
  }
  char v27 = v6;
  id v29 = [MEMORY[0x1E4F28E78] string];
  id v26 = [v6 dataUsingEncoding:2617245952];
  uint64_t v28 = [v26 bytes];
  int v25 = v4;
  unint64_t v7 = [v26 length];
  uint64_t v8 = v28;
  if (v7 < 4) {
    goto LABEL_44;
  }
  uint64_t v9 = 0;
  unint64_t v10 = v7 >> 2;
  unint64_t v23 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v24 = (v7 >> 2) - 1;
  uint64_t v11 = v28;
  while (2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = v8 + 4 * v9;
    uint64_t v14 = v9;
    while (1)
    {
      int v15 = *(_DWORD *)(v13 + v12);
      BOOL v16 = (v15 - 57344) >> 1 < 0xFFF || (v15 - 0x10000) < 0x100000;
      int v17 = (v15 - 32) >> 5 < 0x6BF || v16;
      if (v15 <= 0xD && ((1 << v15) & 0x2600) != 0) {
        int v17 = 1;
      }
      if (v15 <= 38) {
        break;
      }
      if (v15 == 39)
      {
        size_t v19 = @"&apos;";
        if (!v17) {
          goto LABEL_37;
        }
        goto LABEL_33;
      }
      if (v15 == 60)
      {
        size_t v19 = @"&lt;";
LABEL_32:
        if (!v17) {
          goto LABEL_37;
        }
        goto LABEL_33;
      }
      if (v15 != 62) {
        goto LABEL_36;
      }
      size_t v19 = @"&gt;";
      if (!v17) {
        goto LABEL_37;
      }
LABEL_33:
      if ([(__CFString *)v19 length]) {
        goto LABEL_37;
      }
      v12 += 4;
      if (v10 == ++v14)
      {
        if (v23 != 4 * v9)
        {
          uint64_t v21 = (void *)[[NSString alloc] initWithBytes:v11 length:v23 - 4 * v9 encoding:2617245952];
          [v29 appendString:v21];
        }
        goto LABEL_44;
      }
    }
    size_t v19 = @"&quot;";
    if (v15 == 34) {
      goto LABEL_32;
    }
    if (v15 == 38)
    {
      size_t v19 = @"&amp;";
      if (!v17) {
        goto LABEL_37;
      }
      goto LABEL_33;
    }
LABEL_36:
    size_t v19 = &stru_1F20EAF20;
    if (v17) {
      goto LABEL_33;
    }
LABEL_37:
    if (v12)
    {
      uint64_t v20 = (void *)[[NSString alloc] initWithBytes:v11 length:v12 encoding:2617245952];
      [v29 appendString:v20];
    }
    objc_msgSend(v29, "appendString:", v19, v23);
    uint64_t v8 = v28;
    uint64_t v11 = v28 + 4 * v9 + v12 + 4;
    uint64_t v9 = v14 + 1;
    if (v24 != v14) {
      continue;
    }
    break;
  }
LABEL_44:
  id v22 = v29;
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v22 UTF8String]);

  uint64_t v6 = v27;
  uint64_t v4 = v25;
LABEL_45:
}

void sub_1C552E6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void SipStringBody::SipStringBody(SipStringBody *this)
{
  *(void *)this = &unk_1F20D9608;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  std::string::operator=((std::string *)((char *)this + 32), (const std::string *)"text/plain");
}

void sub_1C552E79C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipStringBody::SipStringBody(uint64_t a1, const std::string *a2, const std::string *a3)
{
  *(void *)a1 = &unk_1F20D9608;
  *(_OWORD *)(a1 + 8) = 0u;
  std::string::size_type v5 = (std::string *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  std::string::operator=((std::string *)(a1 + 32), a2);
  std::string::operator=(v5, a3);
  return a1;
}

void sub_1C552E840(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipStringBody::initWithContentTypeHeader(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 104));
  return 1;
}

uint64_t SipStringBody::encode(SipStringBody *this, ImsOutStream *a2)
{
  return (*(uint64_t (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 8);
}

BOOL SipStringBody::decode(uint64_t a1, void *a2, unint64_t a3)
{
  if (!a3) {
    return 1;
  }
  std::string::size_type v5 = (std::string *)(a1 + 8);
  uint64_t v6 = a2 + 4;
  std::string::value_type v7 = std::istream::get();
  std::string::push_back(v5, v7);
  if (*(_DWORD *)((char *)v6 + *(void *)(*a2 - 24))) {
    return 0;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (a3 == v9) {
      break;
    }
    std::string::value_type v11 = std::istream::get();
    std::string::push_back(v5, v11);
    uint64_t v9 = v10 + 1;
  }
  while (!*(_DWORD *)((char *)v6 + *(void *)(*a2 - 24)));
  return v10 >= a3;
}

uint64_t SipStringBody::decode(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 8), a2);
  return 1;
}

void SipStringBody::~SipStringBody(void **this)
{
  *this = &unk_1F20D9608;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20D9608;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipStringBody::clone(SipStringBody *this)
{
}

void sub_1C552EB50(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  MEMORY[0x1C878E320](v1, 0x1093C403F48558ALL);
  _Unwind_Resume(a1);
}

long long *SipStringBody::contentType(SipStringBody *this)
{
  if (*((char *)this + 55) < 0) {
    uint64_t v1 = *((void *)this + 5);
  }
  else {
    uint64_t v1 = *((unsigned __int8 *)this + 55);
  }
  if (v1) {
    return (long long *)((char *)this + 32);
  }
  else {
    return &SipBody::kGenericContentType;
  }
}

uint64_t SipStringBody::contentLength(SipStringBody *this)
{
  if (*((char *)this + 31) < 0) {
    return *((void *)this + 2);
  }
  else {
    return *((unsigned __int8 *)this + 31);
  }
}

void BambiEmergencyUrnMap::urnForNumber(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  *(void *)a4 = 0;
  *((void *)a4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)a4 + 2) = 0;
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  if (v7) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = a1;
  }
  if (*(char *)(v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a4, *(const std::string::value_type **)v8, *(void *)(v8 + 8));
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)v8;
    *((void *)a4 + 2) = *(void *)(v8 + 16);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 24, (void **)a2);
  if ((void **)(a1 + 32) != v9) {
    std::string::operator=((std::string *)a4, (const std::string *)(v9 + 7));
  }
  uint64_t v10 = a4[23];
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)a4 + 1);
  }
  if (v11 >= 0) {
    uint64_t v12 = a4;
  }
  else {
    uint64_t v12 = *(char **)a4;
  }
  if (v10 >= 6)
  {
    uint64_t v13 = &v12[v10];
    uint64_t v14 = v12;
    do
    {
      int v15 = (char *)memchr(v14, 78, v10 - 5);
      if (!v15) {
        break;
      }
      if (*(_DWORD *)v15 == 1112364366 && *((_WORD *)v15 + 2) == 21061)
      {
        if (v15 != v13)
        {
          std::string::size_type v17 = v15 - v12;
          if (v17 != -1)
          {
            std::string::basic_string(&v29, (const std::string *)a4, 0, v17, (std::allocator<char> *)&__p);
            int v18 = *(char *)(a2 + 23);
            if (v18 >= 0) {
              size_t v19 = (const std::string::value_type *)a2;
            }
            else {
              size_t v19 = *(const std::string::value_type **)a2;
            }
            if (v18 >= 0) {
              std::string::size_type v20 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              std::string::size_type v20 = *(void *)(a2 + 8);
            }
            uint64_t v21 = std::string::append(&v29, v19, v20);
            long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
            v30.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v22;
            v21->__r_.__value_.__l.__size_ = 0;
            v21->__r_.__value_.__r.__words[2] = 0;
            v21->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string(&__p, (const std::string *)a4, v17 + 6, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            int v25 = std::string::append(&v30, (const std::string::value_type *)p_p, size);
            std::string::size_type v26 = v25->__r_.__value_.__r.__words[0];
            v32[0] = v25->__r_.__value_.__l.__size_;
            *(void *)((char *)v32 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
            char v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
            v25->__r_.__value_.__l.__size_ = 0;
            v25->__r_.__value_.__r.__words[2] = 0;
            v25->__r_.__value_.__r.__words[0] = 0;
            if (a4[23] < 0) {
              operator delete(*(void **)a4);
            }
            *(void *)a4 = v26;
            *((void *)a4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v32[0];
            *(void *)(a4 + 15) = *(void *)((char *)v32 + 7);
            a4[23] = v27;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v30.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v29.__r_.__value_.__l.__data_);
            }
          }
        }
        return;
      }
      uint64_t v14 = v15 + 1;
      uint64_t v10 = v13 - (unsigned char *)v14;
    }
    while (v13 - (unsigned char *)v14 >= 6);
  }
}

void sub_1C552EE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v26 + 23) < 0) {
    operator delete(*(void **)v26);
  }
  _Unwind_Resume(exception_object);
}

void BambiEmergencyUrnMap::reset(BambiEmergencyUrnMap *this)
{
  uint64_t v1 = this;
  uint64_t v2 = (void *)((char *)this + 32);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  *(v2 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v2;
  *uint64_t v2 = 0;
  v2[1] = 0;
  if (*((char *)v2 - 9) < 0)
  {
    *((void *)v1 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 15;
    uint64_t v1 = *(BambiEmergencyUrnMap **)v1;
  }
  else
  {
    *((unsigned char *)v1 + 2IMSCallOptions::~IMSCallOptions(this + 3) = 15;
  }
  strcpy((char *)v1, "urn:service:sos");
}

void SipInReplyToContributionId::~SipInReplyToContributionId(void **this)
{
  *this = &unk_1F20C6DD0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C6DD0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipContributionId::~SipContributionId(void **this)
{
  *this = &unk_1F20C6DD0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C6DD0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipConversationId::~SipConversationId(void **this)
{
  *this = &unk_1F20C6DD0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C6DD0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipCallId::~SipCallId(void **this)
{
  *this = &unk_1F20C6DD0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C6DD0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t SipDialog::SipDialog(uint64_t a1, const std::string **a2)
{
  *(void *)a1 = &unk_1F20B3658;
  *(void *)(a1 + 8) = off_1F20D9850;
  *(unsigned char *)(a1 + 2(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 1;
  *(void *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  *(_DWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 8(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.dlg");
  ImsLogContainer::ImsLogContainer(a1 + 88, &__p, *a2 + 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 20(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)a1 = &unk_1F20D96A0;
  *(void *)(a1 + 8) = &unk_1F20D9730;
  *(void *)(a1 + 88) = &unk_1F20D9778;
  *(void *)(a1 + 192) = &unk_1F20D97D8;
  *(void *)(a1 + 21ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 224) = 0;
  SipUri::SipUri((SipUri *)(a1 + 232));
  *(_OWORD *)(a1 + 64(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a1 + 65ims::StackConfig::~StackConfig(this + 6) = 0u;
  SipUri::SipUri((SipUri *)(a1 + 672));
  *(void *)(a1 + 109ims::StackConfig::~StackConfig(this + 6) = 0;
  *(_OWORD *)(a1 + 108(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  SipUri::SipUri((SipUri *)(a1 + 1104));
  SipIdString::SipIdString((SipIdString *)(a1 + 1512));
  *(void *)(a1 + 1512) = &unk_1F20D9910;
  SipIdString::SipIdString((SipIdString *)(a1 + 1568));
  *(void *)(a1 + 1568) = &unk_1F20D0918;
  SipIdString::SipIdString((SipIdString *)(a1 + 1624));
  *(void *)(a1 + 1624) = &unk_1F20D9958;
  SipIdString::SipIdString((SipIdString *)(a1 + 1680));
  *(void *)(a1 + 168(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = &unk_1F20D99A0;
  SipIdString::SipIdString((SipIdString *)(a1 + 1736));
  *uint64_t v4 = &unk_1F20D99E8;
  *(void *)(a1 + 1792) = xpc_null_create();
  *(_WORD *)(a1 + 180(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_DWORD *)(a1 + 184(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 1065353216;
  *(_DWORD *)(a1 + 1848) = 1;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 185ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(unsigned char *)(a1 + 1872) = 0;
  *(void *)(a1 + 188(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = a1 + 1888;
  *(void *)(a1 + 192(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 1912) = 0;
  *(void *)(a1 + 1904) = a1 + 1912;
  *(unsigned char *)(a1 + 1928) = 0;
  *(void *)(a1 + 193ims::StackConfig::~StackConfig(this + 6) = 0;
  *(_WORD *)(a1 + 1944) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 196(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 1952) = a1 + 1960;
  *(void *)(a1 + 1992) = 0;
  *(void *)(a1 + 1984) = 0;
  *(void *)(a1 + 197ims::StackConfig::~StackConfig(this + 6) = a1 + 1984;
  *(void *)(a1 + 2008) = 0;
  *(void *)(a1 + 201ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 200(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = a1 + 2008;
  *(void *)(a1 + 2032) = 0;
  *(void *)(a1 + 204(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 2024) = a1 + 2032;
  *(void *)(a1 + 205ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 2064) = 0;
  *(void *)(a1 + 2048) = a1 + 2056;
  *(_OWORD *)(a1 + 2072) = 0u;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(void *)(a1 + 212(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  uint64_t v6 = *a2;
  std::string::size_type v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v5->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 224);
  *(void *)(a1 + 21ims::StackConfig::~StackConfig(this + 6) = v6;
  *(void *)(a1 + 224) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return a1;
}

void sub_1C552F3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, SipUri *a10, SipLockable *a11)
{
  SipContributionId::~SipContributionId(v12);
  SipConversationId::~SipConversationId(v19);
  SipSessionId::~SipSessionId(v18);
  SipCallId::~SipCallId(v17);
  SipUri::~SipUri(v16);
  if (*(char *)(v11 + 1103) < 0) {
    operator delete(*v14);
  }
  SipUri::~SipUri(v15);
  if (*(char *)(v11 + 671) < 0) {
    operator delete(*(void **)(v11 + 648));
  }
  SipUri::~SipUri(a10);
  uint64_t v21 = *(std::__shared_weak_count **)(v11 + 224);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  long long v22 = *(std::__shared_weak_count **)(v11 + 208);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  ImsLogContainer::~ImsLogContainer(v13);
  SipLockable::~SipLockable(a11, (uint64_t *)off_1F20D9800);
  _Unwind_Resume(a1);
}

void sub_1C552F494()
{
}

void sub_1C552F49C()
{
}

void sub_1C552F4A4()
{
}

void sub_1C552F4AC()
{
}

void sub_1C552F4B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C552F47CLL);
}

void sub_1C552F4CC()
{
}

void SipDialog::~SipDialog(SipDialog *this)
{
  *(void *)this = &unk_1F20D96A0;
  uint64_t v2 = (SipDialog *)((char *)this + 8);
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20D9730;
  uint64_t v3 = (char *)this + 88;
  *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20D9778;
  *((void *)this + 24) = &unk_1F20D97D8;
  uint64_t v4 = ImsLogContainer::debugStream((SipDialog *)((char *)this + 88));
  (*(void (**)(char *, uint64_t))(*(void *)v3 + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"~SipDialog() [Dialog:", 21);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v4 + 32))(v4, (char *)this + 1544);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"] ", 2);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  SipDialog::removeAllForks(this);
  uint64_t v5 = *((void *)this + 80);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *((void *)this + 8(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  }
  uint64_t v6 = *((void *)this + 242);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *((void *)this + 242) = 0;
  }
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy((uint64_t)this + 2000, *((void **)this + 251));
  *((void *)this + 25(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = (char *)this + 2008;
  *((void *)this + 252) = 0;
  *((void *)this + 25bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  if (*((char *)this + 2127) < 0) {
    operator delete(*((void **)this + 263));
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 262);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 260);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*((void **)this + 257));
  std::__tree<std::string>::destroy((uint64_t)this + 2024, *((char **)this + 254));
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy((uint64_t)this + 2000, *((void **)this + 251));
  std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*((void **)this + 248));
  std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*((void **)this + 245));
  std::__tree<std::string>::destroy((uint64_t)this + 1904, *((char **)this + 239));
  std::__tree<std::string>::destroy((uint64_t)this + 1880, *((char **)this + 236));
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 233);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (void *)*((void *)this + 228);
  if (v10)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      uint64_t v12 = (std::__shared_weak_count *)v10[4];
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v13 = (void *)*((void *)this + 226);
  *((void *)this + 22ims::StackConfig::~StackConfig(this + 6) = 0;
  if (v13) {
    operator delete(v13);
  }
  xpc_release(*((xpc_object_t *)this + 224));
  *((void *)this + 224) = 0;
  *((void *)this + 217) = &unk_1F20C6DD0;
  if (*((char *)this + 1791) < 0) {
    operator delete(*((void **)this + 221));
  }
  if (*((char *)this + 1767) < 0) {
    operator delete(*((void **)this + 218));
  }
  *((void *)this + 21(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = &unk_1F20C6DD0;
  if (*((char *)this + 1735) < 0) {
    operator delete(*((void **)this + 214));
  }
  if (*((char *)this + 1711) < 0) {
    operator delete(*((void **)this + 211));
  }
  *((void *)this + 20IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20C6DD0;
  if (*((char *)this + 1679) < 0) {
    operator delete(*((void **)this + 207));
  }
  if (*((char *)this + 1655) < 0) {
    operator delete(*((void **)this + 204));
  }
  *((void *)this + 19ims::StackConfig::~StackConfig(this + 6) = &unk_1F20C6DD0;
  if (*((char *)this + 1623) < 0) {
    operator delete(*((void **)this + 200));
  }
  if (*((char *)this + 1599) < 0) {
    operator delete(*((void **)this + 197));
  }
  *((void *)this + 189) = &unk_1F20C6DD0;
  if (*((char *)this + 1567) < 0) {
    operator delete(*((void **)this + 193));
  }
  if (*((char *)this + 1543) < 0) {
    operator delete(*((void **)this + 190));
  }
  SipUri::~SipUri((SipDialog *)((char *)this + 1104));
  if (*((char *)this + 1103) < 0) {
    operator delete(*((void **)this + 135));
  }
  SipUri::~SipUri((SipDialog *)((char *)this + 672));
  if (*((char *)this + 671) < 0) {
    operator delete(*((void **)this + 81));
  }
  SipUri::~SipUri((SipDialog *)((char *)this + 232));
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  int v15 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  SipLockable::~SipLockable(v2, (uint64_t *)off_1F20D9800);
}

{
  uint64_t vars8;

  SipDialog::~SipDialog(this);
  JUMPOUT(0x1C878E320);
}

void SipDialog::removeAllForks(SipDialog *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 262);
  *((void *)this + 26bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 262) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 260);
  *((void *)this + 259) = 0;
  *((void *)this + 26(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*((void **)this + 257));
  *((void *)this + 25ims::StackConfig::~StackConfig(this + 6) = (char *)this + 2056;
  *((void *)this + 258) = 0;
  *((void *)this + 257) = 0;
}

void non-virtual thunk to'SipDialog::~SipDialog(SipDialog *this)
{
}

{
  SipDialog::~SipDialog((SipDialog *)((char *)this - 88));
}

{
  SipDialog::~SipDialog((SipDialog *)((char *)this - 192));
}

{
  uint64_t vars8;

  SipDialog::~SipDialog((SipDialog *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipDialog::~SipDialog((SipDialog *)((char *)this - 88));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipDialog::~SipDialog((SipDialog *)((char *)this - 192));
  JUMPOUT(0x1C878E320);
}

uint64_t SipDialog::terminationLocksReleased(SipDialog *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + 88);
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 11) + 64))((char *)this + 88);
  (*(void (**)(uint64_t *, uint64_t))(*v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"SipDialog::terminationLocksReleased()", 37);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = v1[16];
  return SipDialogManager::dialogTerminated(v3, (unsigned __int8 *)v1 + 1456);
}

uint64_t non-virtual thunk to'SipDialog::terminationLocksReleased(SipDialog *this)
{
  return SipDialog::terminationLocksReleased((SipDialog *)((char *)this - 8));
}

uint64_t SipDialog::forceDeinitialization(SipDialog *this)
{
  memset(v42, 0, sizeof(v42));
  uint64_t v2 = (void *)((char *)this + 200);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v36, (void *)this + 25);
  if (v36.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (std::__shared_weak_count *)(v36.__r_.__value_.__r.__words[0] + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v40 = v3;
  std::string::size_type size = (std::__shared_weak_count *)v36.__r_.__value_.__l.__size_;
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = 0uLL;
  LoggableString::LoggableString((LoggableString *)&__p, "forceDeinitialization");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v42, &v40, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  if (v36.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v36.__r_.__value_.__l.__size_);
  }
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 11) + 64))((char *)this + 88);
  (*(void (**)(char *, uint64_t))(*((void *)this + 11) + 16))((char *)this + 88, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"forcing deinitialization", 24);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v5 = *((void *)this + 232);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 192))(v5);
  }
  long long v34 = (char *)this + 88;
  uint64_t v37 = 0;
  long long v38 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v37, v2);
  uint64_t v6 = (void *)*((void *)this + 250);
  long long v35 = this;
  uint64_t v7 = (_OWORD *)((char *)this + 2008);
  if (v6 != (void *)((char *)this + 2008))
  {
    uint64_t v8 = (char *)this + 8;
    do
    {
      uint64_t v10 = (uint64_t *)v6[7];
      for (uint64_t i = (uint64_t *)v6[8]; v10 != i; v10 += 2)
      {
        uint64_t v11 = *v10;
        uint64_t v12 = (std::__shared_weak_count *)v10[1];
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::operator+<char>();
        LoggableString::LoggableString(&__p, &v36);
        (*(void (**)(char *, std::string *))(*(void *)v8 + 40))(v8, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        uint64_t v13 = *(std::__shared_weak_count **)(v11 + 248);
        *(void *)(v11 + 24(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
        *(void *)(v11 + 248) = 0;
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      uint64_t v14 = (void *)v6[1];
      if (v14)
      {
        do
        {
          int v15 = v14;
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          int v15 = (void *)v6[2];
          BOOL v16 = *v15 == (void)v6;
          uint64_t v6 = v15;
        }
        while (!v16);
      }
      uint64_t v6 = v15;
    }
    while (v15 != (void *)v7);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy((uint64_t)v35 + 2000, *((void **)v35 + 251));
  *((void *)v35 + 25(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v7;
  *uint64_t v7 = 0u;
  uint64_t v17 = (*(uint64_t (**)(char *))(*((void *)v35 + 11) + 64))(v34);
  (*(void (**)(char *, uint64_t))(*(void *)v34 + 16))(v34, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"detaching ", 10);
  *(unsigned char *)(v17 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v17 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" client transactions", 20);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  int v18 = (void *)*((void *)v35 + 247);
  size_t v19 = (void *)((char *)v35 + 1984);
  if (v18 != (void *)((char *)v35 + 1984))
  {
    while (1)
    {
      uint64_t v21 = (void *)v18[7];
      std::string::size_type v20 = (std::__shared_weak_count *)v18[8];
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v22 = (std::__shared_weak_count *)v21[45];
      v21[44] = 0;
      v21[45] = 0;
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      (*(void (**)(std::string *__return_ptr, void *))(*v21 + 152))(&__p, v21);
      (*(void (**)(uint64_t, std::string *))(*((void *)v35 + 1) + 40))((uint64_t)v35 + 8, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v20) {
        goto LABEL_39;
      }
LABEL_40:
      unint64_t v23 = (void *)v18[1];
      if (v23)
      {
        do
        {
          uint64_t v24 = v23;
          unint64_t v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v24 = (void *)v18[2];
          BOOL v16 = *v24 == (void)v18;
          int v18 = v24;
        }
        while (!v16);
      }
      int v18 = v24;
      if (v24 == v19) {
        goto LABEL_49;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v20) {
      goto LABEL_40;
    }
LABEL_39:
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    goto LABEL_40;
  }
LABEL_49:
  std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*((void **)v35 + 248));
  *((void *)v35 + 247) = v19;
  *((_OWORD *)v35 + 124) = 0u;
  uint64_t v25 = (*(uint64_t (**)(char *))(*((void *)v35 + 11) + 64))(v34);
  (*(void (**)(char *, uint64_t))(*(void *)v34 + 16))(v34, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"detaching ", 10);
  *(unsigned char *)(v25 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v25 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)" server transactions", 20);
  *(unsigned char *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v25 + 17) = 0;
  uint64_t v26 = (void *)*((void *)v35 + 244);
  char v27 = (_OWORD *)((char *)v35 + 1960);
  if (v26 != (void *)((char *)v35 + 1960))
  {
    while (1)
    {
      std::string v29 = (void *)v26[7];
      uint64_t v28 = (std::__shared_weak_count *)v26[8];
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v30 = (std::__shared_weak_count *)v29[45];
      v29[44] = 0;
      v29[45] = 0;
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      (*(void (**)(std::string *__return_ptr, void *))(*v29 + 160))(&__p, v29);
      (*(void (**)(uint64_t, std::string *))(*((void *)v35 + 1) + 40))((uint64_t)v35 + 8, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v28) {
        goto LABEL_56;
      }
LABEL_57:
      char v31 = (void *)v26[1];
      if (v31)
      {
        do
        {
          uint64_t v32 = v31;
          char v31 = (void *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          uint64_t v32 = (void *)v26[2];
          BOOL v16 = *v32 == (void)v26;
          uint64_t v26 = v32;
        }
        while (!v16);
      }
      uint64_t v26 = v32;
      if (v32 == (void *)v27) {
        goto LABEL_66;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v28) {
      goto LABEL_57;
    }
LABEL_56:
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    goto LABEL_57;
  }
LABEL_66:
  std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*((void **)v35 + 245));
  *((void *)v35 + 244) = v27;
  *char v27 = 0u;
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v42);
}

void sub_1C5530290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
}

void SipDialog::attachSession(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[232] = v4;
  uint64_t v5 = (std::__shared_weak_count *)a1[233];
  a1[233] = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  LoggableString::LoggableString((LoggableString *)__p, "Session");
  (*(void (**)(void *, void **))(a1[1] + 32))(a1 + 1, __p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5530424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::detachSession(SipDialog *this)
{
  uint64_t v2 = (std::__shared_weak_count **)((char *)this + 88);
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 11) + 64))((char *)this + 88);
  ((void (*)(std::__shared_weak_count **, uint64_t))(*v2)->__shared_weak_owners_)(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"detaching Session", 17);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  uint64_t v4 = v2[222];
  *(_OWORD *)(v2 + 22bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0u;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  LoggableString::LoggableString((LoggableString *)__p, "Session");
  (*(void (**)(char *, void **))(*((void *)this + 1) + 40))((char *)this + 8, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5530584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *SipDialog::stack@<X0>(std::__shared_weak_count *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = this[9].__vftable;
  if (v3 && (on_zero_shared = v3[3].__on_zero_shared) != 0)
  {
    *a2 = 0;
    a2[1] = 0;
    this = (std::__shared_weak_count *)*((void *)on_zero_shared + 2);
    if (this)
    {
      this = std::__shared_weak_count::lock(this);
      a2[1] = this;
      if (this) {
        *a2 = *((void *)on_zero_shared + 1);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

std::__shared_weak_count *SipDialog::stack(std::__shared_weak_count *this, uint64_t a2)
{
  uint64_t v2 = this;
  if (a2 && (uint64_t v3 = *(void *)(a2 + 136)) != 0)
  {
    this->__vftable = 0;
    this->__shared_owners_ = 0;
    this = *(std::__shared_weak_count **)(v3 + 16);
    if (this)
    {
      this = std::__shared_weak_count::lock(this);
      v2->__shared_owners_ = (uint64_t)this;
      if (this) {
        v2->__vftable = *(std::__shared_weak_count_vtbl **)(v3 + 8);
      }
    }
  }
  else
  {
    this->__vftable = 0;
    this->__shared_owners_ = 0;
  }
  return this;
}

void SipDialog::fillContactHeader(SipDialog *this, std::__shared_weak_count *a2, void *a3)
{
  memset(&v84, 0, sizeof(v84));
  if (!a3) {
    goto LABEL_4;
  }
  if (v6)
  {
    char v7 = (const std::string *)(*(uint64_t (**)(void *))(*(void *)v6 + 112))(v6);
    std::string::operator=(&v84, v7);
LABEL_4:
    int v47 = 0;
    goto LABEL_5;
  }
  if (!v14) {
    goto LABEL_4;
  }
  int v15 = v14;
  BOOL v16 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)v14);
  if (v16) {
    uint64_t v17 = (const std::string *)(v16 + 64);
  }
  else {
    uint64_t v17 = (const std::string *)&ims::kEmptyString;
  }
  std::string::operator=(&v84, v17);
  int v47 = v15[22];
LABEL_5:
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v79 = 0u;
  memset(v78, 0, sizeof(v78));
  std::string v77 = &unk_1F20C3100;
  SipUri::SipUri((SipUri *)v78);
  *(void *)&long long v81 = 0;
  *((void *)&v80 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)&v79 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20B37B0;
  *(void *)&long long v80 = (char *)&v80 + 8;
  WORD4(v8bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 256;
  long long v83 = 0uLL;
  *((void *)&v82 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &v83;
  LODWORD(v82) = 0;
  uint64_t shared_owners = a2[77].__shared_owners_;
  if (shared_owners) {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)shared_owners + 208))(shared_owners);
  }
  else {
    int v9 = 0;
  }
  uint64_t v10 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v84.__r_.__value_.__l.__size_;
  }
  if (size != 9) {
    goto LABEL_44;
  }
  if ((*((unsigned char *)&v84.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v84.__r_.__value_.__l.__data_, "SUBSCRIBE", v84.__r_.__value_.__l.__size_)) {
      goto LABEL_44;
    }
LABEL_24:
    if (v47) {
      goto LABEL_44;
    }
    int v18 = a2[9].__vftable;
    size_t v19 = v18 ? (SipUserAgent *)v18[3].__on_zero_shared : 0;
    if (!*(unsigned char *)(SipUserAgent::config(v19) + 622)) {
      goto LABEL_44;
    }
    uint64_t v20 = (*(uint64_t (**)(uint64_t *))(a2[3].__shared_weak_owners_ + 64))(&a2[3].__shared_weak_owners_);
    (*(void (**)(uint64_t *, uint64_t))(a2[3].__shared_weak_owners_ + 16))(&a2[3].__shared_weak_owners_, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Add services to contact for Subscribe Method", 44);
    *(unsigned char *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v20 + 17) = 0;
    uint64_t v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a3 + 4, "Event");
    if (!v21) {
      goto LABEL_44;
    }
    long long v22 = (const void *)*((void *)v21 + 5);
    if (!v22) {
      goto LABEL_44;
    }
    if (!v23) {
      goto LABEL_44;
    }
    uint64_t v24 = v23[127];
    uint64_t v25 = (v24 & 0x80u) == 0 ? v23[127] : *((void *)v23 + 14);
    if (v25 != 10) {
      goto LABEL_44;
    }
    uint64_t v26 = (const void **)(v23 + 104);
    if ((v24 & 0x80) != 0)
    {
      if (memcmp(*v26, "conference", *((void *)v23 + 14))) {
        goto LABEL_44;
      }
    }
    else if (v23[127])
    {
      char v27 = "conference";
      while (*(unsigned __int8 *)v26 == *(unsigned __int8 *)v27)
      {
        uint64_t v26 = (const void **)((char *)v26 + 1);
        ++v27;
        if (!--v24) {
          goto LABEL_43;
        }
      }
      goto LABEL_44;
    }
LABEL_43:
    int v9 = 1;
    goto LABEL_44;
  }
  if (!*((unsigned char *)&v84.__r_.__value_.__s + 23)) {
    goto LABEL_24;
  }
  uint64_t v12 = &v84;
  uint64_t v13 = "SUBSCRIBE";
  while (v12->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v13)
  {
    uint64_t v12 = (std::string *)((char *)v12 + 1);
    ++v13;
    if (!--v10) {
      goto LABEL_24;
    }
  }
LABEL_44:
  SipDialog::stack(a2, v49);
  uint64_t v28 = (ImsPrefs *)SipStack::prefs(v49[0]);
  AlwaysAddTextServiceKey = (void **)ImsPrefs::getAlwaysAddTextServiceKey(v28);
  BOOL v30 = (ImsPrefs::BOOLValue(v28, AlwaysAddTextServiceKey) & 1) != 0 || BYTE1(a2[81].__vftable) != 0;
  if (v49[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v49[1]);
  }
  SipDialog::stack(a2, v49);
  char v31 = (ImsPrefs *)SipStack::prefs(v49[0]);
  TTYOverImsSupportedKey = (void **)ImsPrefs::getTTYOverImsSupportedKey(v31);
  int v33 = ImsPrefs::BOOLValue(v31, TTYOverImsSupportedKey);
  if (v49[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v49[1]);
  }
  if (!v33)
  {
    v9 &= ~0x20u;
    BYTE1(a2[81].__vftable) = 0;
    goto LABEL_68;
  }
  long long v34 = SipMessage::body<SipSdpBody>((uint64_t)a3);
  if (v34)
  {
    uint64_t v35 = *((void *)v34 + 1);
    std::string v36 = (std::__shared_weak_count *)*((void *)v34 + 2);
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v35)
    {
      uint64_t v37 = *(void *)(v35 + 416);
      uint64_t v38 = *(void *)(v35 + 424);
      while (v37 != v38)
      {
        if (*(_DWORD *)(v37 + 12) == 4) {
          goto LABEL_65;
        }
        v37 += 200;
      }
      if (!v30) {
        goto LABEL_66;
      }
      goto LABEL_65;
    }
  }
  else
  {
    std::string v36 = 0;
  }
  if (v30)
  {
LABEL_65:
    uint64_t shared_weak_owners = a2[3].__shared_weak_owners_;
    BYTE1(a2[81].__vftable) = 1;
    uint64_t v40 = (*(uint64_t (**)(uint64_t *))(shared_weak_owners + 64))(&a2[3].__shared_weak_owners_);
    (*(void (**)(uint64_t *, uint64_t))(a2[3].__shared_weak_owners_ + 16))(&a2[3].__shared_weak_owners_, v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"Adding text service feature tag to dialog", 41);
    *(unsigned char *)(v40 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v9 |= 0x20u;
    *(unsigned char *)(v40 + 17) = 0;
  }
LABEL_66:
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
LABEL_68:
  uint64_t v75 = 0;
  long long v76 = 0;
  SipDialog::stack(a2, &v75);
  uint64_t v41 = v75;
  if (v75 && *(unsigned char *)(v75 + 2681))
  {
    uint64_t v74 = 0;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    *(_OWORD *)std::string::size_type v49 = 0u;
    SipUri::SipUri((SipUri *)v49);
    uint64_t v42 = (ImsPrefs *)SipStack::prefs((SipStack *)v41);
    LazuliConferenceFactoryKey = (void **)ImsPrefs::getLazuliConferenceFactoryKey(v42);
    ImsPrefs::stringValue(v42, LazuliConferenceFactoryKey);
    SipUri::fromString((uint64_t)v49, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SipUri::matches((SipUri *)&a2[9].__shared_weak_owners_, (const SipUri *)v49))
    {
      int v9 = 0x20000;
    }
    else if (BYTE1(a2[75].__vftable))
    {
      int v9 = 2048;
    }
    else
    {
      uint64_t v44 = *(void *)(v41 + 144);
      uint64_t v46 = *(void *)(v44 + 248);
      uint64_t v45 = *(std::__shared_weak_count **)(v44 + 256);
      if (v45)
      {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
        int v9 = *(_DWORD *)(v46 + 1104);
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      else
      {
        int v9 = *(_DWORD *)(v46 + 1104);
      }
    }
    SipUri::~SipUri((SipUri *)v49);
  }
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + IMSCallOptions::~IMSCallOptions(this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0u;
  SipUserAgent::fillContactForServicesAndMethod((SipUserAgent *)a2[9].__vftable[3].__on_zero_shared, (uint64_t)&v77, v9, (long long *)&v84, v47, (uint64_t)this);
  if (((*(uint64_t (**)(void, void))(**((void **)this + 1) + 24))(*((void *)this + 1), *((unsigned int *)this + 4)) & 1) == 0)SipMessage::setContact((SipMessage *)a3, (const SipContactParam *)&v77); {
  if (v76)
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  std::string v77 = &unk_1F20C3100;
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)&v82 + 8, (void *)v83);
  *((void *)&v79 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v80, *((void **)&v80 + 1));
  SipUri::~SipUri((SipUri *)v78);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v84.__r_.__value_.__l.__data_);
  }
}

void sub_1C5530E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  SipContactParam::~SipContactParam((SipContactParam *)&a69);
  if (*(char *)(v69 - 97) < 0) {
    operator delete(*(void **)(v69 - 120));
  }
  _Unwind_Resume(a1);
}

void SipDialog::fillCommonRequestHeaders(uint64_t a1, uint64_t a2, void *a3, SipDialogFork **a4)
{
  SipMessage::removeHeadersWithName(a3, "Route");
  if (*a4) {
    SipDialogFork::fillCommonRequestHeaders(*a4, (SipRequest *)a3);
  }
  if (!SipUri::isValidUri((SipUri *)(a3 + 14))) {
    SipUri::operator=((SipUri *)(a3 + 14), a2 + 232);
  }
  uint64_t v8 = SipMessage::header<SipFromHeader>((SipMessage *)a3, 1);
  SipUri::operator=((SipHeader *)((char *)v8 + 104), a2 + 672);
  int v9 = SipMessage::header<SipToHeader>((SipMessage *)a3, 1);
  SipUri::operator=((SipHeader *)((char *)v9 + 104), a2 + 232);
  if ((*(char *)(a2 + 1103) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a2 + 1103)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (*(void *)(a2 + 1088))
  {
LABEL_7:
    uint64_t v10 = SipMessage::header<SipFromHeader>((SipMessage *)a3, 1);
    SipUriHeader::setTag((uint64_t)v10, a2 + 1080);
  }
LABEL_8:
  uint64_t v11 = SipMessage::header<SipCallIdHeader>((SipMessage *)a3, 1);
  std::string::operator=((std::string *)((char *)v11 + 64), (const std::string *)(a2 + 1544));
  if ((*(char *)(a2 + 1623) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a2 + 1623)) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (*(void *)(a2 + 1608))
  {
LABEL_10:
    uint64_t v12 = SipMessage::header<SipSessionIdHeader>((SipMessage *)a3, 1);
    std::string::operator=((std::string *)((char *)v12 + 64), (const std::string *)(a2 + 1600));
  }
LABEL_11:
  if ((*(char *)(a2 + 1679) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a2 + 1679)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (*(void *)(a2 + 1664))
  {
LABEL_13:
    uint64_t v13 = SipMessage::header<SipConversationIdHeader>((SipMessage *)a3, 1);
    std::string::operator=((std::string *)((char *)v13 + 64), (const std::string *)(a2 + 1656));
  }
LABEL_14:
  if ((*(char *)(a2 + 1735) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a2 + 1735)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (*(void *)(a2 + 1720))
  {
LABEL_16:
    uint64_t v14 = SipMessage::header<SipContributionIdHeader>((SipMessage *)a3, 1);
    std::string::operator=((std::string *)((char *)v14 + 64), (const std::string *)(a2 + 1712));
  }
LABEL_17:
  if ((*(char *)(a2 + 1791) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a2 + 1791)) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (*(void *)(a2 + 1776))
  {
LABEL_19:
    int v15 = SipMessage::header<SipInReplyToContributionIdHeader>((SipMessage *)a3, 1);
    std::string::operator=((std::string *)((char *)v15 + 64), (const std::string *)(a2 + 1768));
  }
LABEL_20:
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0u;
  SipDialog::fillContactHeader((SipDialog *)a1, (std::__shared_weak_count *)a2, a3);
  if (((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16)) & 1) == 0)
  {
    uint64_t v16 = *(void *)(a2 + 1856);
    if (v16)
    {
      (*(void (**)(void *__return_ptr))(*(void *)v16 + 200))(v17);
      ImsResult::operator=(a1, (uint64_t)v17);
      ImsResult::~ImsResult((ImsResult *)v17);
    }
  }
}

void sub_1C5531148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult(v2);
  _Unwind_Resume(a1);
}

void SipDialog::createRequestInDialog(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 216) + 136);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    if (v2) {
      uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    }
  }
  SipStack::createRequestFromTemplate((uint64_t)v2);
}

void sub_1C55311E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::setSenderIdentity(SipDialog *this, const SipUri *a2)
{
  uint64_t v2 = *((void *)this + 80);
  if (v2) {
    (*(void (**)(uint64_t, const SipUri *))(*(void *)v2 + 8))(v2, a2);
  }
  operator new();
}

void sub_1C553127C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4064E45795);
  _Unwind_Resume(a1);
}

void SipDialog::resetCallIdAndTags(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(v24, 0, sizeof(v24));
  unint64_t v23 = (void (**)(void **, uint64_t))&unk_1F20C6DD0;
  if (*(char *)(a1 + 1543) < 0) {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)(a1 + 1520), *(void *)(a1 + 1528));
  }
  else {
    v24[0] = *(std::string *)(a1 + 1520);
  }
  if (*(char *)(a1 + 1567) < 0) {
    std::string::__init_copy_ctor_external(&v24[1], *(const std::string::value_type **)(a1 + 1544), *(void *)(a1 + 1552));
  }
  else {
    v24[1] = *(std::string *)(a1 + 1544);
  }
  unint64_t v23 = (void (**)(void **, uint64_t))&unk_1F20D9910;
  memset(v22, 0, sizeof(v22));
  uint64_t v21 = (void (**)(void **, uint64_t))&unk_1F20C6DD0;
  if (*(char *)(a1 + 1599) < 0) {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)(a1 + 1576), *(void *)(a1 + 1584));
  }
  else {
    v22[0] = *(std::string *)(a1 + 1576);
  }
  if (*(char *)(a1 + 1623) < 0) {
    std::string::__init_copy_ctor_external(&v22[1], *(const std::string::value_type **)(a1 + 1600), *(void *)(a1 + 1608));
  }
  else {
    v22[1] = *(std::string *)(a1 + 1600);
  }
  uint64_t v21 = (void (**)(void **, uint64_t))&unk_1F20D0918;
  memset(&v20, 0, sizeof(v20));
  char v6 = (void **)(a1 + 1080);
  if (*(char *)(a1 + 1103) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(a1 + 1080), *(void *)(a1 + 1088));
  }
  else
  {
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)v6;
    v20.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1096);
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (!v7) {
    SipCallId::generate((SipCallId *)(a1 + 1512));
  }
  SipIdString::set(a1 + 1512, (const std::string *)a2);
  ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(*(void *)(*(void *)(a1 + 216) + 136) + 656), 10, &__p);
  if (*(char *)(a1 + 1103) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)char v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(void *)(a1 + 109ims::StackConfig::~StackConfig(this + 6) = *((void *)&__p.__r_.__value_.__l + 2);
  std::string::size_type size = HIBYTE(v24[1].__r_.__value_.__r.__words[2]);
  if ((v24[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v24[1].__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 64))(a1 + 88);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"replaced callId (", 17);
    *(unsigned char *)(v9 + 17) = 0;
    v23[2]((void **)&v23, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)") and localTag (", 16);
    *(unsigned char *)(v9 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&__p, &v20);
    (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 56))(v9, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v18 < 0) {
      operator delete(v17);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (v10)
  {
    SipIdString::set(a1 + 1568, (const std::string *)a3);
    std::string::size_type v11 = HIBYTE(v22[1].__r_.__value_.__r.__words[2]);
    if ((v22[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v11 = v22[1].__r_.__value_.__l.__size_;
    }
    if (v11)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 64))(a1 + 88);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"replaced sessionId ", 19);
      *(unsigned char *)(v12 + 17) = 0;
      v21[2]((void **)&v21, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" with ", 6);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 1568) + 16))(a1 + 1568, v12);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 1928) {
         && *(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(*(void *)(a1 + 216) + 136)) + 857))
  }
  {
    if (*(char *)(a1 + 1623) < 0)
    {
      if (*(void *)(a1 + 1608)) {
        goto LABEL_47;
      }
    }
    else if (*(unsigned char *)(a1 + 1623))
    {
      goto LABEL_47;
    }
    uint64_t v13 = *(unsigned __int8 *)(a1 + 1567);
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *(void *)(a1 + 1552);
    }
    if (v13) {
      SipSessionId::generateFromCallId(a1 + 1568, a1 + 1544);
    }
  }
LABEL_47:
  SipDialog::stack((std::__shared_weak_count *)a1, &__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    SipDialog::stack((std::__shared_weak_count *)a1, &v19);
    uint64_t v14 = *(void *)(v19.__r_.__value_.__r.__words[0] + 136);
    if (v19.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  if (*(unsigned char *)(v14 + 233)) {
    int v15 = random() & 0x7FFFFFFF;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(a1 + 1848) = v15;
  std::__tree<std::string>::destroy(a1 + 2024, *(char **)(a1 + 2032));
  *(void *)(a1 + 2024) = a1 + 2032;
  *(void *)(a1 + 204(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 2032) = 0;
  if (*(char *)(a1 + 2127) < 0)
  {
    **(unsigned char **)(a1 + 2104) = 0;
    *(void *)(a1 + 2112) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 2104) = 0;
    *(unsigned char *)(a1 + 2127) = 0;
  }
  SipDialog::removeAllForks((SipDialog *)a1);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  uint64_t v21 = (void (**)(void **, uint64_t))&unk_1F20C6DD0;
  if (SHIBYTE(v22[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22[1].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22[0].__r_.__value_.__l.__data_);
  }
  unint64_t v23 = (void (**)(void **, uint64_t))&unk_1F20C6DD0;
  if (SHIBYTE(v24[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24[1].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24[0].__r_.__value_.__l.__data_);
  }
}

void sub_1C55319F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  SipSessionId::~SipSessionId(&a34);
  SipCallId::~SipCallId((void **)(v40 - 136));
  _Unwind_Resume(a1);
}

void SipDialog::updateLocalUri(SipDialog *this)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v2 = (const SipUri *)SipUserAgent::publicUri(*(SipUserAgent **)(*((void *)this + 27) + 136));
  SipUri::SipUri((SipUri *)v10, v2);
  memset(&__p, 0, sizeof(__p));
  uint64_t v3 = *(void *)(*((void *)this + 27) + 136);
  if (*(char *)(v3 + 647) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v3 + 624), *(void *)(v3 + 632));
  }
  else {
    std::string __p = *(std::string *)(v3 + 624);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size) {
    std::string::operator=((std::string *)((char *)&v10[12] + 8), &__p);
  }
  uint64_t v5 = (char *)this + 672;
  SipUri::operator=((SipDialog *)((char *)this + 672), (uint64_t)v10);
  uint64_t v7 = *((void *)this + 11);
  char v6 = (char *)this + 88;
  uint64_t v8 = (*(uint64_t (**)(char *))(v7 + 64))(v6);
  (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"updated local URI to ", 21);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(char *, uint64_t))(*(void *)v5 + 40))(v5, v8);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  SipUri::~SipUri((SipUri *)v10);
}

void sub_1C5531CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

uint64_t SipDialog::updateRemoteUri(SipDialog *this, const SipUri *a2)
{
  uint64_t v3 = (char *)this + 232;
  SipUri::operator=((SipDialog *)((char *)this + 232), (uint64_t)a2);
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 11) + 64))((char *)this + 88);
  (*(void (**)(char *, uint64_t))(*((void *)this + 11) + 16))((char *)this + 88, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"updated remote URI to ", 22);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(char *, uint64_t))(*((void *)this + 29) + 40))(v3, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  return result;
}

double SipDialog::initializeMobileOriginated@<D0>(SipDialog *this@<X0>, const SipUri *a2@<X1>, uint64_t a3@<X8>)
{
  *((unsigned char *)this + 1928) = 1;
  *((unsigned char *)this + 1944) = 1;
  SipDialog::updateLocalUri(this);
  SipUri::operator=((SipDialog *)((char *)this + 232), (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v11, (char *)&str_21_5);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_21_5);
  SipDialog::resetCallIdAndTags((uint64_t)this, (uint64_t)v11, (uint64_t)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  SipDialog::createFork(this, (uint64_t)v11);
  long long v6 = *(_OWORD *)v11;
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 262);
  *(_OWORD *)((char *)this + 2088) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    if (v11[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11[1]);
    }
  }
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  return result;
}

void sub_1C5531F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::createFork(SipDialog *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v6, (void *)this + 25);
  SipDialogFork::create((uint64_t)&v6, (SipDialogFork **)a2);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v4 = *(void *)(*(void *)a2 + 656);
  uint64_t v5 = *(std::__shared_weak_count **)(*(void *)a2 + 664);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(v4 + 144) = *(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(*((void *)this + 27) + 136)) + 689);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    *(unsigned char *)(v4 + 144) = *(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(*((void *)this + 27) + 136)) + 689);
  }
}

void sub_1C5531FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::initializeMobileTerminated(SipDialog *this@<X0>, const SipRequest *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  (*(void (**)(long long *__return_ptr, const SipRequest *))(*(void *)a2 + 88))(&v19, a2);
  if ((*(unsigned int (**)(void, void))(**((void **)&v19 + 1) + 24))(*((void *)&v19 + 1), v20))
  {
    ImsResult::ImsResult(a3, (uint64_t)&v19);
  }
  else
  {
    *((unsigned char *)this + 1928) = 0;
    uint64_t v6 = SipMessage::header<SipToHeader>((uint64_t)a2);
    if (v6) {
      uint64_t v7 = (uint64_t)v6 + 104;
    }
    else {
      uint64_t v7 = 0;
    }
    SipUri::operator=((SipDialog *)((char *)this + 672), v7);
    uint64_t v8 = SipMessage::header<SipFromHeader>((uint64_t)a2);
    if (v8) {
      uint64_t v9 = (uint64_t)v8 + 104;
    }
    else {
      uint64_t v9 = 0;
    }
    SipUri::operator=((SipDialog *)((char *)this + 232), v9);
    char v10 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a2);
    uint64_t v11 = (char *)SipMessage::header<SipSessionIdHeader>((uint64_t)a2);
    if (v10) {
      char v12 = (long long *)(v10 + 64);
    }
    else {
      char v12 = &ims::kEmptyString;
    }
    if (v11) {
      uint64_t v13 = (long long *)(v11 + 64);
    }
    else {
      uint64_t v13 = &ims::kEmptyString;
    }
    SipDialog::resetCallIdAndTags((uint64_t)this, (uint64_t)v12, (uint64_t)v13);
    uint64_t v17 = 0;
    char v18 = 0;
    SipDialog::createFork(this, (uint64_t)&v17);
    SipDialogFork::initializeMobileTerminated(v17, a2, (uint64_t)v16);
    ImsResult::operator=((uint64_t)&v19, (uint64_t)v16);
    ImsResult::~ImsResult((ImsResult *)v16);
    if ((*(unsigned int (**)(void, void))(**((void **)&v19 + 1) + 24))(*((void *)&v19 + 1), v20))
    {
      ImsResult::ImsResult(a3, (uint64_t)&v19);
    }
    else
    {
      uint64_t v14 = v18;
      v15[0] = (uint64_t)v17;
      v15[1] = (uint64_t)v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SipDialog::addFork((uint64_t **)this, v15);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
      *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
      *(void *)a3 = &unk_1F20B2680;
      *(void *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  ImsResult::~ImsResult((ImsResult *)&v19);
}

void sub_1C5532230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, ...)
{
  va_start(va, a15);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipDialog::addFork(uint64_t **a1, uint64_t *a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  SipDialog::sipSession((SipDialog *)a1, &v12);
  uint64_t v4 = v12;
  if (v12)
  {
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    uint64_t v10 = *a2;
    uint64_t v11 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 312))(v4, &v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  uint64_t v14 = (void **)(*a2 + 152);
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 256, v14, (long long **)&v14);
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)v6[8];
  v6[7] = v8;
  v6[8] = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1C5532364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::resetIfNecessary(SipDialog *this)
{
  if (*((unsigned char *)this + 1928) && *((unsigned char *)this + 1944))
  {
    long long v54 = 0u;
    memset(&v55, 0, sizeof(v55));
    *(_OWORD *)long long v53 = 0u;
    SipIdString::SipIdString((SipIdString *)v53);
    v53[0] = &unk_1F20D9910;
    if (*(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(*((void *)this + 27) + 136)) + 1122))
    {
      std::string::operator=((std::string *)&v53[1], (const std::string *)((char *)this + 1520));
      std::string::operator=(&v55, (const std::string *)((char *)this + 1544));
      std::string::basic_string[abi:ne180100]<0>(&v56, (char *)&str_21_5);
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_21_5);
      SipDialog::resetCallIdAndTags((uint64_t)this, (uint64_t)&v56, (uint64_t)__p);
      if (SHIBYTE(v52) < 0) {
        operator delete(__p[0]);
      }
      if (v57.i8[15] < 0) {
        operator delete(v56);
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    long long v52 = 0;
    uint64_t v2 = (SipDialog *)*((void *)this + 247);
    if (v2 != (SipDialog *)((char *)this + 1984))
    {
      uint64_t v3 = 0;
      do
      {
        long long v4 = *(_OWORD *)((char *)v2 + 56);
        if (v3 >= v52)
        {
          uint64_t v5 = (char *)__p[0];
          uint64_t v6 = (v3 - (char *)__p[0]) >> 4;
          unint64_t v7 = v6 + 1;
          if ((unint64_t)(v6 + 1) >> 60) {
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          }
          long long v43 = *(_OWORD *)((char *)v2 + 56);
          uint64_t v8 = v52 - (char *)__p[0];
          if ((v52 - (char *)__p[0]) >> 3 > v7) {
            unint64_t v7 = v8 >> 3;
          }
          if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v9 = v7;
          }
          long long v59 = &v52;
          if (v9 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v10 = (char *)operator new(16 * v9);
          uint64_t v11 = &v10[16 * v6];
          *(_OWORD *)uint64_t v11 = v43;
          if (*((void *)&v43 + 1))
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
            uint64_t v3 = (char *)__p[1];
          }
          if (v3 == v5)
          {
            int64x2_t v14 = vdupq_n_s64((unint64_t)v5);
            uint64_t v12 = &v10[16 * v6];
          }
          else
          {
            uint64_t v12 = &v10[16 * v6];
            do
            {
              long long v13 = *((_OWORD *)v3 - 1);
              v3 -= 16;
              *((_OWORD *)v12 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v13;
              v12 -= 16;
              *(void *)uint64_t v3 = 0;
              *((void *)v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
            }
            while (v3 != v5);
            int64x2_t v14 = *(int64x2_t *)__p;
          }
          uint64_t v3 = v11 + 16;
          __p[0] = v12;
          __p[1] = v11 + 16;
          int64x2_t v57 = v14;
          int v15 = v52;
          long long v52 = &v10[16 * v9];
          long long v58 = v15;
          long long v56 = (void **)v14.i64[0];
          std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&v56);
        }
        else
        {
          *(_OWORD *)uint64_t v3 = v4;
          if (*((void *)&v4 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          v3 += 16;
        }
        __p[1] = v3;
        uint64_t v16 = (SipDialog *)*((void *)v2 + 1);
        if (v16)
        {
          do
          {
            uint64_t v17 = v16;
            uint64_t v16 = *(SipDialog **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            uint64_t v17 = (SipDialog *)*((void *)v2 + 2);
            BOOL v18 = *(void *)v17 == (void)v2;
            uint64_t v2 = v17;
          }
          while (!v18);
        }
        uint64_t v2 = v17;
      }
      while (v17 != (SipDialog *)((char *)this + 1984));
      for (uint64_t i = (char *)__p[0]; i != v3; i += 16)
      {
        uint64_t v20 = *(void *)i;
        long long v21 = (std::__shared_weak_count *)*((void *)i + 1);
        if (v21)
        {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v50[0] = v20;
        v50[1] = v21;
        SipDialog::removeClientTransaction(this, v50);
        if (v21)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
      }
    }
    long long v48 = 0uLL;
    std::string::size_type v49 = 0;
    long long v22 = (SipDialog *)*((void *)this + 244);
    if (v22 != (SipDialog *)((char *)this + 1960))
    {
      uint64_t v23 = 0;
      do
      {
        long long v24 = *(_OWORD *)((char *)v22 + 56);
        if (v23 >= v49)
        {
          unint64_t v25 = v48;
          uint64_t v26 = (uint64_t)&v23[-v48] >> 4;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 60) {
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          }
          long long v44 = *(_OWORD *)((char *)v22 + 56);
          uint64_t v28 = (uint64_t)&v49[-v48];
          if ((uint64_t)&v49[-v48] >> 3 > v27) {
            unint64_t v27 = v28 >> 3;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          long long v59 = &v49;
          if (v29 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v30 = (char *)operator new(16 * v29);
          char v31 = &v30[16 * v26];
          *(_OWORD *)char v31 = v44;
          if (*((void *)&v44 + 1))
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v44 + 1) + 8), 1uLL, memory_order_relaxed);
            uint64_t v23 = (char *)*((void *)&v48 + 1);
          }
          if (v23 == (char *)v25)
          {
            int64x2_t v34 = vdupq_n_s64(v25);
            uint64_t v32 = &v30[16 * v26];
          }
          else
          {
            uint64_t v32 = &v30[16 * v26];
            do
            {
              long long v33 = *((_OWORD *)v23 - 1);
              v23 -= 16;
              *((_OWORD *)v32 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v33;
              v32 -= 16;
              *(void *)uint64_t v23 = 0;
              *((void *)v23 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
            }
            while (v23 != (char *)v25);
            int64x2_t v34 = (int64x2_t)v48;
          }
          uint64_t v23 = v31 + 16;
          *(void *)&long long v48 = v32;
          *((void *)&v48 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v31 + 16;
          int64x2_t v57 = v34;
          uint64_t v35 = v49;
          std::string::size_type v49 = &v30[16 * v29];
          long long v58 = v35;
          long long v56 = (void **)v34.i64[0];
          std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&v56);
        }
        else
        {
          *(_OWORD *)uint64_t v23 = v24;
          if (*((void *)&v24 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          v23 += 16;
        }
        *((void *)&v48 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v23;
        std::string v36 = (SipDialog *)*((void *)v22 + 1);
        if (v36)
        {
          do
          {
            uint64_t v37 = v36;
            std::string v36 = *(SipDialog **)v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            uint64_t v37 = (SipDialog *)*((void *)v22 + 2);
            BOOL v18 = *(void *)v37 == (void)v22;
            long long v22 = v37;
          }
          while (!v18);
        }
        long long v22 = v37;
      }
      while (v37 != (SipDialog *)((char *)this + 1960));
      for (uint64_t j = (char *)v48; j != v23; j += 16)
      {
        uint64_t v39 = *(void *)j;
        uint64_t v40 = (std::__shared_weak_count *)*((void *)j + 1);
        if (v40)
        {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v47[0] = v39;
        v47[1] = v40;
        SipDialog::removeServerTransaction((uint64_t)this, v47);
        if (v40)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
      }
    }
    SipDialog::removeAllForks(this);
    std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v55.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v42 = *((void *)this + 27);
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v45, (void *)this + 25);
      SipDialogManager::updateDialogMap(v42, (uint64_t)&v55, (long long *)((char *)this + 1544), &v45);
      if (v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
      }
    }
    long long v56 = (void **)&v48;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v56);
    long long v56 = __p;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v56);
    v53[0] = &unk_1F20C6DD0;
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v54) < 0) {
      operator delete(v53[1]);
    }
  }
}

void sub_1C55328D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void **p_p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  *(void *)(v28 - 144) = &p_p;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 144));
  p_p = &__p;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  SipCallId::~SipCallId(&a28);
  _Unwind_Resume(a1);
}

void SipDialog::removeClientTransaction(void *a1, void *a2)
{
  uint64_t v4 = a1[232];
  if (v4)
  {
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    uint64_t v21 = *a2;
    long long v22 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 216))(v4, &v21);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(a1[11] + 64))(a1 + 11);
  (*(void (**)(void *, uint64_t))(a1[11] + 16))(a1 + 11, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"removing ", 9);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 152))(__p);
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v20 = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*a2 + 296) + 112))(*(void *)(*a2 + 296));
  SipTransaction::transactionMapKey(v7 + 328, v8, (uint64_t)__p);
  unint64_t v9 = (void *)a1[248];
  if (v9)
  {
    uint64_t v10 = a1 + 248;
    do
    {
      char v11 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9 + 4, __p);
      if (v11 >= 0) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      if (v11 >= 0) {
        uint64_t v10 = v9;
      }
      unint64_t v9 = (void *)*v12;
    }
    while (*v12);
    if (v10 != a1 + 248
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (void **)v10 + 4) & 0x80) == 0)
    {
      long long v13 = (void *)v10[1];
      if (v13)
      {
        do
        {
          int64x2_t v14 = v13;
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        int v15 = v10;
        do
        {
          int64x2_t v14 = (void *)v15[2];
          BOOL v16 = *v14 == (void)v15;
          int v15 = v14;
        }
        while (!v16);
      }
      if ((void *)a1[247] == v10) {
        a1[247] = v14;
      }
      --a1[249];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[248], v10);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(v10 + 4));
      operator delete(v10);
      (*(void (**)(void **__return_ptr))(*(void *)*a2 + 152))(v17);
      (*(void (**)(void *, void **))(a1[1] + 40))(a1 + 1, v17);
      if (v18 < 0) {
        operator delete(v17[0]);
      }
    }
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5532CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::removeServerTransaction(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 1856);
  if (v4)
  {
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    uint64_t v20 = *a2;
    uint64_t v21 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 224))(v4, &v20);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 64))(a1 + 88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"removing ", 9);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 160))(__p);
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v19 = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*a2 + 296) + 112))(*(void *)(*a2 + 296));
  SipTransaction::transactionMapKey(v7 + 328, v8, (uint64_t)__p);
  unint64_t v9 = (uint64_t **)(a1 + 1952);
  uint64_t v10 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 1952, __p);
  char v11 = v10;
  if ((uint64_t *)(a1 + 1960) != v10)
  {
    uint64_t v12 = (uint64_t *)v10[1];
    if (v12)
    {
      do
      {
        long long v13 = v12;
        uint64_t v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      int64x2_t v14 = v10;
      do
      {
        long long v13 = (uint64_t *)v14[2];
        BOOL v15 = *v13 == (void)v14;
        int64x2_t v14 = v13;
      }
      while (!v15);
    }
    if (*v9 == v10) {
      *unint64_t v9 = v13;
    }
    --*(void *)(a1 + 1968);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1960), v10);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(v11 + 4));
    operator delete(v11);
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 160))(v16);
  (*(void (**)(uint64_t, void **))(*(void *)(a1 + 8) + 40))(a1 + 8, v16);
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5532FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::removeForkWithRemoteTag(uint64_t a1, std::string *a2)
{
  uint64_t v4 = a1 + 2048;
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 2048, (void **)&a2->__r_.__value_.__l.__data_);
  if ((void **)(a1 + 2056) != v5)
  {
    uint64_t v6 = (uint64_t *)v5;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 64))(a1 + 88);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"removing fork ", 14);
    *(unsigned char *)(v7 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v18, a2);
    (*(void (**)(uint64_t, void **))(*(void *)v7 + 56))(v7, v18);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v21 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    uint64_t v9 = v6[7];
    uint64_t v8 = (std::__shared_weak_count *)v6[8];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = (uint64_t *)v6[1];
    if (v10)
    {
      do
      {
        char v11 = v10;
        uint64_t v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
    else
    {
      uint64_t v12 = v6;
      do
      {
        char v11 = (uint64_t *)v12[2];
        BOOL v13 = *v11 == (void)v12;
        uint64_t v12 = v11;
      }
      while (!v13);
    }
    if (*(uint64_t **)v4 == v6) {
      *(void *)uint64_t v4 = v11;
    }
    --*(void *)(a1 + 2064);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 2056), v6);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(v6 + 4));
    operator delete(v6);
    if (v9 == *(void *)(a1 + 2072))
    {
      if (*(void *)(a1 + 2064) == 1)
      {
        uint64_t v14 = *(void *)(*(void *)v4 + 56);
        BOOL v15 = *(std::__shared_weak_count **)(*(void *)v4 + 64);
        uint64_t v16 = v14;
        char v17 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        BOOL v15 = 0;
        uint64_t v16 = 0;
        char v17 = 0;
      }
      SipDialog::setActiveFork((SipDialog *)a1, &v16, 1);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C553328C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::setActiveFork(SipDialog *a1, void *a2, int a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *((void *)a1 + 259);
  if (!*a2)
  {
    uint64_t v10 = (void *)((char *)a1 + 2072);
    char v11 = (void *)((char *)a1 + 88);
    uint64_t v12 = (*(uint64_t (**)(void *))(*((void *)a1 + 11) + 64))((void *)a1 + 11);
    (*(void (**)(void *, uint64_t))(*v11 + 16))((void *)a1 + 11, v12);
    BOOL v13 = *(void **)(v12 + 8);
    if (v5)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"setActiveFork ", 14);
      *(unsigned char *)(v12 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)&v31, (const std::string *)(*v10 + 152));
      (*(void (**)(uint64_t, SipSessionInterface **))(*(void *)v12 + 56))(v12, &v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" to null", 8);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
      if (v35 < 0) {
        operator delete(__p);
      }
      if (v33 < 0) {
        operator delete(v31);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"setActiveFork (already null) to null", 36);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
    }
    uint64_t v23 = (std::__shared_weak_count *)*((void *)a1 + 260);
    void *v10 = 0;
    *((void *)a1 + 26(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
    if (!v23) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    return;
  }
  if (v5 == v4 && (a3 & 1) == 0)
  {
    uint64_t v8 = (void *)((char *)a1 + 88);
    uint64_t v9 = (*(uint64_t (**)(void *))(*((void *)a1 + 11) + 64))((void *)a1 + 11);
    (*(void (**)(void *, uint64_t))(*v8 + 16))(v8, v9);
    ObfuscatedString::ObfuscatedString((uint64_t)&v31, (const std::string *)(*a2 + 152));
    (*(void (**)(uint64_t, SipSessionInterface **))(*(void *)v9 + 56))(v9, &v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" was already the active fork", 28);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v35 < 0) {
      operator delete(__p);
    }
    if (v33 < 0) {
      operator delete(v31);
    }
    return;
  }
  uint64_t v14 = a2[1];
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)a1 + 259) = v4;
  BOOL v15 = (std::__shared_weak_count *)*((void *)a1 + 260);
  *((void *)a1 + 26(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v14;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v16 = (*(uint64_t (**)(void *))(*((void *)a1 + 11) + 64))((void *)a1 + 11);
  (*(void (**)(void *, uint64_t))(*((void *)a1 + 11) + 16))((void *)a1 + 11, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"active fork is now ", 19);
  *(unsigned char *)(v16 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v31, (const std::string *)(*a2 + 152));
  (*(void (**)(uint64_t, SipSessionInterface **))(*(void *)v16 + 56))(v16, &v31);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  if (v35 < 0) {
    operator delete(__p);
  }
  if (v33 < 0) {
    operator delete(v31);
  }
  char v31 = 0;
  uint64_t v32 = 0;
  SipDialog::sipSession(a1, &v31);
  char v17 = v31;
  if (v31)
  {
    char v18 = (std::__shared_weak_count *)a2[1];
    v30[0] = *a2;
    v30[1] = (std::string::size_type)v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a3)
    {
      SipSessionInterface::stack((std::__shared_weak_count *)v17, &v28);
      char v19 = (ImsPrefs *)SipStack::prefs(v28);
      SelectForkWithActiveEarlyMediaKey = (void **)ImsPrefs::getSelectForkWithActiveEarlyMediaKey(v19);
      if (ImsPrefs::BOOLValue(v19, SelectForkWithActiveEarlyMediaKey))
      {
        int v21 = 0;
        int v22 = 1;
      }
      else
      {
        SipSessionInterface::stack((std::__shared_weak_count *)v17, &v26);
        long long v24 = (ImsPrefs *)SipStack::prefs(v26);
        SelectLatestForkWithActiveEarlyMediaKey = (void **)ImsPrefs::getSelectLatestForkWithActiveEarlyMediaKey(v24);
        int v22 = ImsPrefs::BOOLValue(v24, SelectLatestForkWithActiveEarlyMediaKey);
        int v21 = 1;
      }
    }
    else
    {
      int v21 = 0;
      int v22 = 0;
    }
    SipSession::handleActiveForkChanged((uint64_t)v17, v30, v22);
    if (v21 && v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (a3 && v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  uint64_t v23 = v32;
  if (v32) {
    goto LABEL_29;
  }
}

void sub_1C55337D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, char a15, std::__shared_weak_count *a16)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::forkForBearerPort(SipDialog *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, _DWORD *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = (void *)*((void *)a1 + 256);
  uint64_t v37 = (void *)((char *)a1 + 2056);
  if (v6 != (void *)((char *)a1 + 2056))
  {
    uint64_t v7 = a2;
    uint64_t v8 = (void *)((char *)a1 + 88);
    if (a3) {
      uint64_t v9 = "local";
    }
    else {
      uint64_t v9 = "remote";
    }
    uint64_t v10 = 5;
    if (!a3) {
      uint64_t v10 = 6;
    }
    uint64_t v34 = v10;
    uint64_t v35 = (uint64_t)v9;
    do
    {
      *a5 = 0;
      a5[1] = 0;
      uint64_t v11 = v6[7];
      *a5 = v11;
      uint64_t v12 = (std::__shared_weak_count *)v6[8];
      a5[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v47 = 0;
      long long v48 = 0;
      BOOL v13 = *(SipOfferAnswer **)(v11 + 656);
      uint64_t v14 = *(std::__shared_weak_count **)(v11 + 664);
      if (a3)
      {
        if (v14)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          SipOfferAnswer::activeLocalSdp(v13, &v47);
LABEL_15:
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          goto LABEL_18;
        }
        SipOfferAnswer::activeLocalSdp(v13, &v47);
      }
      else
      {
        if (v14)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          SipOfferAnswer::activeRemoteSdp(v13, &v47);
          goto LABEL_15;
        }
        SipOfferAnswer::activeRemoteSdp(v13, &v47);
      }
LABEL_18:
      if (v47)
      {
        uint64_t shared_owners = v47[17].__shared_owners_;
        uint64_t shared_weak_owners = v47[17].__shared_weak_owners_;
        if (shared_owners == shared_weak_owners)
        {
LABEL_27:
          char v19 = 0;
          int v20 = 1;
        }
        else
        {
          char v17 = (const std::string *)(v11 + 152);
          while (1)
          {
            uint64_t v18 = (*(uint64_t (**)(void *))(*v8 + 64))(v8);
            (*(void (**)(void *, uint64_t))(*v8 + 16))(v8, v18);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Fork ", 5);
            *(unsigned char *)(v18 + 17) = 0;
            ObfuscatedString::ObfuscatedString((uint64_t)&v42, v17);
            (*(void (**)(uint64_t, void **))(*(void *)v18 + 56))(v18, &v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" has media port ", 16);
            *(unsigned char *)(v18 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v18 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v18 + 17) = 0;
            if (v46 < 0) {
              operator delete(__p);
            }
            if (v44 < 0) {
              operator delete(v42);
            }
            if (*(void *)(shared_owners + 16) == v7) {
              break;
            }
            shared_owners += 200;
            if (shared_owners == shared_weak_owners) {
              goto LABEL_27;
            }
          }
          if (a4) {
            *a4 = *(_DWORD *)(shared_owners + 12);
          }
          int v22 = (unsigned char *)(*(uint64_t (**)(void *))(*v8 + 64))(v8);
          (*(void (**)(void *, unsigned char *))(*v8 + 16))(v8, v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v22 + 1), (uint64_t)"Matched ", 8);
          v22[17] = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v22 + 1), v35, v34);
          v22[17] = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v22 + 1), (uint64_t)" fork ", 6);
          v22[17] = 0;
          ObfuscatedString::ObfuscatedString((uint64_t)&v42, v17);
          (*(void (**)(unsigned char *, void **))(*(void *)v22 + 56))(v22, &v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v22 + 1), (uint64_t)" with media type ", 17);
          v22[17] = 0;
          (*(void (**)(unsigned char *, SipStack **))(*(void *)v22 + 32))(v22, &v39);
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v22[17] = 0;
          if (v41 < 0) {
            operator delete(v39);
          }
          if (v46 < 0) {
            operator delete(__p);
          }
          if (v44 < 0) {
            operator delete(v42);
          }
          int v20 = 0;
          char v19 = 1;
        }
      }
      else
      {
        uint64_t v21 = (*(uint64_t (**)(void *))(*v8 + 48))(v8);
        (*(void (**)(void *, uint64_t))(*v8 + 16))(v8, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"No active remote SDP for fork ", 30);
        *(unsigned char *)(v21 + 17) = 0;
        ObfuscatedString::ObfuscatedString((uint64_t)&v42, (const std::string *)(v11 + 152));
        (*(void (**)(uint64_t, void **))(*(void *)v21 + 56))(v21, &v42);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v21 + 17) = 0;
        if (v46 < 0) {
          operator delete(__p);
        }
        if (v44 < 0) {
          operator delete(v42);
        }
        char v19 = 0;
        int v20 = 1;
      }
      if (v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      }
      if (v12) {
        char v23 = v19;
      }
      else {
        char v23 = 1;
      }
      if ((v23 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (!v20) {
        return;
      }
      long long v24 = (void *)v6[1];
      if (v24)
      {
        do
        {
          unint64_t v25 = v24;
          long long v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          unint64_t v25 = (void *)v6[2];
          BOOL v26 = *v25 == (void)v6;
          uint64_t v6 = v25;
        }
        while (!v26);
      }
      uint64_t v6 = v25;
    }
    while (v25 != v37);
  }
  SipDialog::sipSession(a1, &v42);
  if (v42)
  {
    SipDialog::sipSession(a1, &v47);
    SipSessionInterface::stack(v47, &v39);
    unint64_t v27 = (ImsPrefs *)SipStack::prefs(v39);
    RequireBearerPortMatchForPreconditionsKey = (void **)ImsPrefs::getRequireBearerPortMatchForPreconditionsKey(v27);
    int v29 = ImsPrefs::BOOLValue(v27, RequireBearerPortMatchForPreconditionsKey);
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
    if (v48) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v48);
    }
  }
  else
  {
    int v29 = 0;
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (v29) {
    goto LABEL_65;
  }
  uint64_t v30 = *((void *)a1 + 261);
  if (v30)
  {
    uint64_t v31 = *((void *)a1 + 262);
  }
  else
  {
    if (*((void *)a1 + 258) != 1)
    {
LABEL_65:
      *a5 = 0;
      a5[1] = 0;
      return;
    }
    uint64_t v32 = *((void *)a1 + 256);
    uint64_t v30 = *(void *)(v32 + 56);
    uint64_t v31 = *(void *)(v32 + 64);
  }
  *a5 = v30;
  a5[1] = v31;
  if (v31) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1C5533ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,std::__shared_weak_count *a23)
{
  unint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Unwind_Resume(exception_object);
}

void *SipDialog::sipSession@<X0>(SipDialog *this@<X0>, void *a2@<X8>)
{
  double result = (void *)*((void *)this + 232);
  if (result
  {
    uint64_t v5 = *((void *)this + 233);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void SipDialog::performBlockOnForks(void *a1, uint64_t a2)
{
  if (a1[261])
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[262];
    uint64_t v13 = a1[261];
    uint64_t v14 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(a2 + 16))(a2, &v13);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  uint64_t v5 = (void *)a1[256];
  uint64_t v6 = a1 + 257;
  if (v5 != v6)
  {
    do
    {
      uint64_t v7 = (std::__shared_weak_count *)v5[8];
      uint64_t v11 = v5[7];
      uint64_t v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(a2 + 16))(a2, &v11);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          uint64_t v5 = v9;
        }
        while (!v10);
      }
      uint64_t v5 = v9;
    }
    while (v9 != v6);
  }
}

void sub_1C55340F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *SipDialog::allForks(unint64_t *result, unint64_t *a2)
{
  uint64_t v2 = (unint64_t *)result[256];
  uint64_t v3 = result + 257;
  if (v2 != result + 257)
  {
    do
    {
      double result = std::vector<std::shared_ptr<SipDialogFork>>::push_back[abi:ne180100](a2, (long long *)(v2 + 7));
      uint64_t v5 = (unint64_t *)v2[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (unint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (unint64_t *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  return result;
}

unint64_t *std::vector<std::shared_ptr<SipDialogFork>>::push_back[abi:ne180100](unint64_t *result, long long *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  uint64_t v5 = (void *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *result;
    uint64_t v9 = (uint64_t)((uint64_t)v5 - *result) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    int v22 = result + 2;
    if (v12 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(16 * v12);
    uint64_t v14 = &v13[16 * v9];
    long long v15 = *a2;
    *(_OWORD *)uint64_t v14 = *a2;
    if (*((void *)&v15 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
      unint64_t v8 = *v3;
      uint64_t v5 = (void *)v3[1];
    }
    BOOL v7 = v14 + 16;
    if (v5 == (void *)v8)
    {
      int64x2_t v17 = vdupq_n_s64(v8);
    }
    else
    {
      do
      {
        long long v16 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v14 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v16;
        v14 -= 16;
        void *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != (void *)v8);
      int64x2_t v17 = *(int64x2_t *)v3;
    }
    *uint64_t v3 = (unint64_t)v14;
    v3[1] = (unint64_t)v7;
    int64x2_t v20 = v17;
    unint64_t v18 = v3[2];
    void v3[2] = (unint64_t)&v13[16 * v12];
    unint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    double result = (unint64_t *)std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    void *v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    v5[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v7 = v5 + 2;
  }
  v3[1] = (unint64_t)v7;
  return result;
}

void SipDialog::terminateForkWithBye(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 88;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 64))(a1 + 88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"sending BYE to fork ", 20);
  *(unsigned char *)(v5 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v6, (const std::string *)(*(void *)a2 + 152));
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 56))(v5, v6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  SipDialog::createRequestInDialog(a1);
}

void sub_1C5534530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::sendRequestInFork(void *a1, uint64_t a2, SipRequest *a3, uint64_t a4)
{
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  unint64_t v8 = *(atomic_ullong **)(a4 + 8);
  v16[0] = *(SipDialogFork **)a4;
  v16[1] = (SipDialogFork *)v8;
  if (v8) {
    atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
  }
  SipDialog::fillCommonRequestHeaders((uint64_t)&v17, a2, a3, v16);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
  }
  if (!(*(unsigned int (**)(void, void))(**((void **)&v17 + 1) + 24))(*((void *)&v17 + 1), v18))
  {
    unint64_t v12 = *(SipDialogFork **)a4;
    if (*(void *)a4)
    {
      int v13 = *((_DWORD *)v12 + 45);
      *((_DWORD *)v12 + 45) = v13 + 1;
    }
    else
    {
      uint64_t v14 = *(void *)(a2 + 2088);
      if (v14) {
        ++*(_DWORD *)(v14 + 180);
      }
      int v13 = *(_DWORD *)(a2 + 1848);
      *(_DWORD *)(a2 + 1848) = v13 + 1;
    }
    SipRequest::setCSeq(a3, v13);
    v15[0] = 0;
    v15[1] = 0;
    SipDialog::internalSendRequest((uint64_t)a1, (void *)a2, a3, v15);
  }
  uint64_t v10 = *(void *)(a2 + 88);
  uint64_t v9 = a2 + 88;
  uint64_t v11 = (unsigned char *)(*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 16))(v9, v11);
  (*(void (**)(long long *, unsigned char *))(v17 + 16))(&v17, v11);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v11[17] = 0;
  *a1 = 0;
  a1[1] = 0;
  ImsResult::~ImsResult((ImsResult *)&v17);
}

void sub_1C553475C(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipDialog::addForkFromResponse(uint64_t *a1, SipDialog *this, const SipMessage *a3, uint64_t *a4)
{
  uint64_t v14 = 0;
  long long v15 = 0;
  SipDialog::createFork(this, (uint64_t)&v14);
  unint64_t v8 = v15;
  v13[0] = v14;
  v13[1] = (uint64_t)v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a4;
  uint64_t v10 = (std::__shared_weak_count *)a4[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v11 = SipDialog::addForkFromResponse((uint64_t)this, v13, a3, v9, v10);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v11)
  {
    unint64_t v12 = v15;
    *a1 = v14;
    a1[1] = (uint64_t)v12;
    if (!v12) {
      return;
    }
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1C5534878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipDialog::addForkFromResponse(uint64_t a1, uint64_t *a2, const SipMessage *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  uint64_t v8 = *a2;
  v41[0] = a4;
  v41[1] = a5;
  if (a5) {
    atomic_fetch_add_explicit(&a5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipDialogFork::initializeMobileOriginated(v8, a3, (uint64_t)v41, (uint64_t)&__p);
  int v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)v43.i64[0] + 24))(v43.i64[0], v43.u32[2]);
  ImsResult::~ImsResult((ImsResult *)&__p);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  if (v9)
  {
    uint64_t v11 = *(void *)(a1 + 88);
    uint64_t v10 = a1 + 88;
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v10);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"unable to add new fork", 22);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
  }
  else
  {
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    SipDialog::sipSession((SipDialog *)a1, &v39);
    if (*(void *)(a1 + 2064)
      && v39
      && (SipSession::confirmed(v39) & 1) == 0
      && !*(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(*(void *)(a1 + 216) + 136)) + 611))
    {
      long long v48 = 0uLL;
      std::string::size_type v49 = 0;
      int v13 = *(void **)(a1 + 2048);
      uint64_t v14 = (_OWORD *)(a1 + 2056);
      if (v13 != (void *)(a1 + 2056))
      {
        long long v15 = 0;
        do
        {
          if (v15 >= v49)
          {
            unint64_t v17 = v48;
            uint64_t v18 = (uint64_t)&v15[-v48] >> 4;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 60) {
              std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v20 = (uint64_t)&v49[-v48];
            if ((uint64_t)&v49[-v48] >> 3 > v19) {
              unint64_t v19 = v20 >> 3;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            uint64_t v45 = &v49;
            if (v21 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v22 = (char *)operator new(16 * v21);
            uint64_t v23 = &v22[16 * v18];
            long long v24 = *(_OWORD *)(v13 + 7);
            *(_OWORD *)uint64_t v23 = v24;
            if (*((void *)&v24 + 1))
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
              long long v15 = (char *)*((void *)&v48 + 1);
            }
            if (v15 == (char *)v17)
            {
              int64x2_t v27 = vdupq_n_s64(v17);
              unint64_t v25 = &v22[16 * v18];
            }
            else
            {
              unint64_t v25 = &v22[16 * v18];
              do
              {
                long long v26 = *((_OWORD *)v15 - 1);
                v15 -= 16;
                *((_OWORD *)v25 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v26;
                v25 -= 16;
                *(void *)long long v15 = 0;
                *((void *)v15 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
              }
              while (v15 != (char *)v17);
              int64x2_t v27 = (int64x2_t)v48;
            }
            long long v15 = v23 + 16;
            *(void *)&long long v48 = v25;
            *((void *)&v48 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v23 + 16;
            int64x2_t v43 = v27;
            uint64_t v28 = v49;
            std::string::size_type v49 = &v22[16 * v21];
            char v44 = v28;
            std::string __p = (void *)v27.i64[0];
            std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&__p);
          }
          else
          {
            *(void *)long long v15 = v13[7];
            uint64_t v16 = v13[8];
            *((void *)v15 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v16;
            if (v16) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
            }
            v15 += 16;
          }
          *((void *)&v48 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v15;
          int v29 = (void *)v13[1];
          if (v29)
          {
            do
            {
              uint64_t v30 = v29;
              int v29 = (void *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              uint64_t v30 = (void *)v13[2];
              BOOL v31 = *v30 == (void)v13;
              int v13 = v30;
            }
            while (!v31);
          }
          int v13 = v30;
        }
        while (v30 != (void *)v14);
        uint64_t v32 = (void *)v48;
        if ((char *)v48 != v15)
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 2024), (void **)(*(void *)v48 + 152), *(void *)v48 + 152);
          uint64_t v33 = v32[1];
          v47[0] = *v32;
          v47[1] = v33;
          if (v33) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "New Dialog Established");
          SipDialog::terminateForkWithBye(a1, (uint64_t)v47);
        }
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(void **)(a1 + 2056));
      *(void *)(a1 + 2048) = v14;
      *uint64_t v14 = 0u;
      std::string __p = &v48;
      std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
    uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 64))(a1 + 88);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"adding fork ", 12);
    *(unsigned char *)(v34 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&__p, (const std::string *)(*a2 + 152));
    (*(void (**)(uint64_t, void **))(*(void *)v34 + 56))(v34, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v34 + 17) = 0;
    if (v46 < 0) {
      operator delete(v44);
    }
    if (v43.i8[15] < 0) {
      operator delete(__p);
    }
    uint64_t v35 = *a2;
    std::string v36 = (std::__shared_weak_count *)a2[1];
    v38[0] = v35;
    v38[1] = (uint64_t)v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipDialog::addFork((uint64_t **)a1, v38);
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
  }
  return v9 ^ 1u;
}

void sub_1C5534DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)(v21 - 9ims::StackConfig::~StackConfig(this + 6) = v21 - 128;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

void SipDialog::collapseForks(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(void **)(a1 + 2048);
  uint64_t v4 = (_OWORD *)(a1 + 2056);
  if (v3 != (void *)(a1 + 2056))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = a1 + 88;
    while (1)
    {
      uint64_t v8 = v3[7];
      int v9 = (std::__shared_weak_count *)v3[8];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = *(unsigned __int8 *)(v8 + 175);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = *(unsigned __int8 *)(v8 + 175);
      }
      else {
        uint64_t v11 = *(void *)(v8 + 160);
      }
      uint64_t v12 = a2[23];
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *((void *)a2 + 1);
      }
      if (v11 == v12)
      {
        if (v13 >= 0) {
          uint64_t v14 = a2;
        }
        else {
          uint64_t v14 = *(unsigned __int8 **)a2;
        }
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v8 + 152), v14, *(void *)(v8 + 160)))
          {
LABEL_34:
            uint64_t v20 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v7 + 64))(v7, v14);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v20);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"keeping winning fork ", 21);
            *(unsigned char *)(v20 + 17) = 0;
            ObfuscatedString::ObfuscatedString((uint64_t)v27, (const std::string *)(v8 + 152));
            (*(void (**)(uint64_t, void **))(*(void *)v20 + 56))(v20, v27);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v20 + 17) = 0;
            if (v30 < 0) {
              operator delete(__p);
            }
            if (v28 < 0)
            {
              operator delete(v27[0]);
              if (v9) {
LABEL_38:
              }
                atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            else if (v9)
            {
              goto LABEL_38;
            }
            if (v6) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v6);
            }
            uint64_t v6 = v9;
            uint64_t v5 = v8;
            if (!v9) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
        }
        else
        {
          if (!*(unsigned char *)(v8 + 175)) {
            goto LABEL_34;
          }
          long long v15 = (unsigned __int8 *)(v8 + 152);
          while (*v15 == *v14)
          {
            ++v15;
            ++v14;
            if (!--v10) {
              goto LABEL_34;
            }
          }
        }
      }
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(v7);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"removing losing fork ", 21);
      *(unsigned char *)(v16 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v27, (const std::string *)(v8 + 152));
      (*(void (**)(uint64_t, void **))(*(void *)v16 + 56))(v16, v27);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if (v30 < 0) {
        operator delete(__p);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (!v9) {
        goto LABEL_27;
      }
LABEL_26:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
LABEL_27:
      unint64_t v17 = (void *)v3[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          unint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v3[2];
          BOOL v19 = *v18 == (void)v3;
          uint64_t v3 = v18;
        }
        while (!v19);
      }
      uint64_t v3 = v18;
      if (v18 == (void *)v4) {
        goto LABEL_46;
      }
    }
  }
  uint64_t v6 = 0;
  uint64_t v5 = 0;
LABEL_46:
  std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(void **)(a1 + 2056));
  *(void *)(a1 + 2048) = v4;
  *uint64_t v4 = 0u;
  if (v5)
  {
    v27[0] = a2;
    uint64_t v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 2048), (void **)a2, (long long **)v27);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v22 = (std::__shared_weak_count *)v21[8];
    v21[7] = v5;
    v21[8] = (uint64_t)v6;
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 2072) = v5;
    uint64_t v23 = *(std::__shared_weak_count **)(a1 + 2080);
    *(void *)(a1 + 208(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v6;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v6) {
LABEL_56:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    long long v24 = *(std::__shared_weak_count **)(a1 + 2080);
    *(_OWORD *)(a1 + 2072) = 0uLL;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 56))(a1 + 88);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"collapseForks: couldn't find fork with tag ", 43);
    *(unsigned char *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v25 + 32))(v25, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v25 + 17) = 0;
    if (v6) {
      goto LABEL_56;
    }
  }
}

void sub_1C5535364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::loggableName(SipDialog *this@<X0>, std::string *a2@<X8>)
{
  int v3 = *((char *)this + 2127);
  if (v3 < 0) {
    uint64_t v4 = *((void *)this + 264);
  }
  else {
    uint64_t v4 = *((unsigned __int8 *)this + 2127);
  }
  if (!v4)
  {
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v5);
  }
  if ((v3 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 263), *((void *)this + 264));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2104);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 265);
  }
}

void sub_1C5535610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipDialog::loggableName(SipDialog *this@<X0>, std::string *a2@<X8>)
{
}

void SipDialog::logPrefix(SipDialog *this, ImsOutStream *a2)
{
  v8.__vftable = 0;
  v8.__shared_owners_ = 0;
  SipDialog::stack(&v8, *((void *)this + 27));
  if (v8.__vftable)
  {
    (*((void (**)(void **__return_ptr))v8.~__shared_weak_count + 13))(v6);
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" [", 2);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(void **__return_ptr, SipDialog *))(*(void *)this + 56))(__p, this);
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"]: ", 3);
    *((unsigned char *)a2 + 17) = 0;
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    (*(void (**)(void **__return_ptr, SipDialog *))(*(void *)this + 56))(v6, this);
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
    *((unsigned char *)a2 + 17) = 0;
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v8.__shared_owners_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8.__shared_owners_);
  }
}

void sub_1C5535804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  int v22 = *(std::__shared_weak_count **)(v20 - 24);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipDialog::logPrefix(SipDialog *this, ImsOutStream *a2)
{
}

uint64_t SipDialog::subscriptionTerminated(void *a1, const std::string **a2)
{
  memset(v32, 0, sizeof(v32));
  uint64_t v4 = a1 + 25;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v26, a1 + 25);
  if (v26.__r_.__value_.__r.__words[0]) {
    char v5 = (std::__shared_weak_count *)(v26.__r_.__value_.__r.__words[0] + 8);
  }
  else {
    char v5 = 0;
  }
  char v30 = v5;
  std::string::size_type size = (std::__shared_weak_count *)v26.__r_.__value_.__l.__size_;
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = 0uLL;
  LoggableString::LoggableString((LoggableString *)&__p, "subscriptionTerminated");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v32, &v30, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  if (v26.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v26.__r_.__value_.__l.__size_);
  }
  uint64_t v6 = a1 + 11;
  uint64_t v7 = (*(uint64_t (**)(void *))(a1[11] + 64))(a1 + 11);
  (*(void (**)(void *, uint64_t))(a1[11] + 16))(a1 + 11, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"SipDialog::subscriptionTerminated", 33);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v27 = 0;
  char v28 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v27, v4);
  std::__shared_weak_count v8 = (std::string *)(*(uint64_t (**)(std::string::size_type))(*(void *)(*a2)[10].__r_.__value_.__r.__words[2]
                                                                        + 16))((*a2)[10].__r_.__value_.__r.__words[2]);
  int v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 250), (void **)&v8->__r_.__value_.__l.__data_);
  uint64_t v10 = v9;
  if (a1 + 251 == v9)
  {
    uint64_t v17 = (*(uint64_t (**)(void *))(*v6 + 32))(a1 + 11);
    (*(void (**)(void *, uint64_t))(*v6 + 16))(a1 + 11, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"received termination notice for unknown subscription event ", 59);
    *(unsigned char *)(v17 + 17) = 0;
    LoggableString::LoggableString(&__p, v8);
    (*(void (**)(uint64_t, std::string *))(*(void *)v17 + 40))(v17, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
LABEL_21:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_40;
  }
  uint64_t v12 = (const std::string **)v9[7];
  uint64_t v11 = (const std::string **)v9[8];
  if (v12 == v11)
  {
LABEL_18:
    uint64_t v16 = (*(uint64_t (**)(void *))(*v6 + 32))(a1 + 11);
    (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"received termination notice for ", 32);
    *(unsigned char *)(v16 + 17) = 0;
    LoggableString::LoggableString(&__p, v8);
    (*(void (**)(uint64_t, std::string *))(*(void *)v16 + 40))(v16, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"subscription with id ", 21);
    *(unsigned char *)(v16 + 17) = 0;
    LoggableString::LoggableString(&v26, *a2 + 19);
    (*(void (**)(uint64_t, std::string *))(*(void *)v16 + 40))(v16, &v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)", but it doesn't exist in this dialog", 37);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    goto LABEL_21;
  }
  int v13 = (const std::string **)v9[7];
  while (1)
  {
    uint64_t v14 = *v13;
    long long v15 = (std::__shared_weak_count *)v13[1];
    if (!v15) {
      break;
    }
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v14 == *a2) {
      goto LABEL_23;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    uint64_t v11 = (const std::string **)v10[8];
LABEL_17:
    v12 += 2;
    v13 += 2;
    if (v13 == v11) {
      goto LABEL_18;
    }
  }
  if (v14 != *a2) {
    goto LABEL_17;
  }
LABEL_23:
  std::operator+<char>();
  LoggableString::LoggableString(&__p, &v26);
  (*(void (**)(void *, std::string *))(a1[1] + 40))(a1 + 1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = *a2;
  BOOL v19 = (std::__shared_weak_count *)(*a2)[10].__r_.__value_.__l.__size_;
  v18[10].__r_.__value_.__r.__words[0] = 0;
  v18[10].__r_.__value_.__l.__size_ = 0;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v20 = v12 + 2;
  uint64_t v21 = (const std::string **)v10[8];
  if (v12 + 2 != v21)
  {
    do
    {
      long long v22 = *(_OWORD *)v20;
      *uint64_t v20 = 0;
      v20[1] = 0;
      uint64_t v23 = (std::__shared_weak_count *)*(v20 - 1);
      *((_OWORD *)v20 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v22;
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      v20 += 2;
    }
    while (v20 != v21);
    uint64_t v12 = v20 - 2;
    uint64_t v20 = (const std::string **)v10[8];
  }
  while (v20 != v12)
  {
    long long v24 = (std::__shared_weak_count *)*(v20 - 1);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    v20 -= 2;
  }
  v10[8] = v12;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
LABEL_40:
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v32);
}

void sub_1C5535DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void **SipDialog::subscriptionForEvent@<X0>(uint64_t a1@<X0>, void **a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  double result = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 2000, a2);
  if ((void **)(a1 + 2008) == result) {
    goto LABEL_24;
  }
  int v8 = *((char *)a3 + 23);
  if (v8 >= 0) {
    uint64_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v9 = a3[1];
  }
  uint64_t v10 = result[7];
  uint64_t v11 = result[8];
  if (v9)
  {
    if (v10 != v11)
    {
      if (v8 < 0) {
        a3 = (void *)*a3;
      }
      while (1)
      {
        uint64_t v12 = *v10;
        uint64_t v13 = *(unsigned __int8 *)(*v10 + 479);
        if ((v13 & 0x80u) == 0) {
          uint64_t v14 = *(unsigned __int8 *)(*v10 + 479);
        }
        else {
          uint64_t v14 = *(void *)(*v10 + 464);
        }
        if (v14 == v9)
        {
          long long v15 = (const void **)(v12 + 456);
          if ((v13 & 0x80) != 0)
          {
            double result = (void **)memcmp(*v15, a3, *(void *)(*v10 + 464));
            if (!result)
            {
LABEL_25:
              uint64_t v17 = v10[1];
              *a4 = v12;
              goto LABEL_26;
            }
          }
          else
          {
            if (!*(unsigned char *)(*v10 + 479)) {
              goto LABEL_25;
            }
            uint64_t v16 = (unsigned __int8 *)a3;
            while (*(unsigned __int8 *)v15 == *v16)
            {
              long long v15 = (const void **)((char *)v15 + 1);
              ++v16;
              if (!--v13) {
                goto LABEL_25;
              }
            }
          }
        }
        v10 += 2;
        if (v10 == v11) {
          goto LABEL_24;
        }
      }
    }
    goto LABEL_24;
  }
  if (v10 == v11)
  {
LABEL_24:
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  uint64_t v17 = v10[1];
  *a4 = *v10;
LABEL_26:
  a4[1] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t SipDialog::subscribeToEventPackage@<X0>(uint64_t a1@<X0>, SipEventPackage *a2@<X1>, const std::string *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  memset(v48, 0, sizeof(v48));
  uint64_t v10 = (void *)(a1 + 200);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__p, (void *)(a1 + 200));
  if (__p.__r_.__value_.__r.__words[0]) {
    uint64_t v11 = (std::__shared_weak_count *)(__p.__r_.__value_.__r.__words[0] + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  char v46 = v11;
  std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  LoggableString::LoggableString((LoggableString *)&v50, "subscribeToEventPackage");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v48, &v46, &v50);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 64))(a1 + 88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"SipDialog::subscribeToEventPackage", 34);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  long long v45 = 0uLL;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v43, v10);
  SipSubscription::create((uint64_t)&v43, a2, a3, (SipSubscription **)&v45);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if ((a4 & 1) != 0
    || (uint64_t v13 = (SipSubscription *)v45,
        (*(void (**)(void))(**(void **)(v45 + 256) + 56))(*(void *)(v45 + 256)),
        (SipSubscription::subscribeWithExpiration(v13) & 1) != 0))
  {
    long long v14 = v45;
    long long v15 = (std::__shared_weak_count *)*((void *)&v45 + 1);
    if (*((void *)&v45 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v45 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v42 = v14;
    uint64_t v16 = v14;
    uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(v14 + 256) + 16))(*(void *)(v14 + 256));
    __p.__r_.__value_.__r.__words[0] = 0;
    uint64_t v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1 + 2000, &__p, (void **)v17);
    BOOL v19 = *v18;
    if (!*v18)
    {
      uint64_t v20 = v18;
      v50.__r_.__value_.__r.__words[2] = 0;
      uint64_t v21 = operator new(0x50uLL);
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      v50.__r_.__value_.__l.__size_ = a1 + 2008;
      long long v22 = (std::string *)(v21 + 4);
      if (*(char *)(v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v17, *(void *)(v17 + 8));
        BOOL v19 = (uint64_t *)v50.__r_.__value_.__r.__words[0];
      }
      else
      {
        long long v23 = *(_OWORD *)v17;
        v21[6] = *(void *)(v17 + 16);
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
        BOOL v19 = v21;
      }
      v21[7] = 0;
      v21[8] = 0;
      v21[9] = 0;
      v50.__r_.__value_.__s.__data_[16] = 1;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)(a1 + 2000), (uint64_t)__p.__r_.__value_.__l.__data_, v20, v19);
      v50.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v50, 0);
    }
    long long v24 = (void *)v19[8];
    unint64_t v25 = v19[9];
    if ((unint64_t)v24 >= v25)
    {
      uint64_t v27 = v19[7];
      uint64_t v28 = ((uint64_t)v24 - v27) >> 4;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60) {
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v30 = v25 - v27;
      if (v30 >> 3 > v29) {
        unint64_t v29 = v30 >> 3;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<BambiCallAction>>>(v31);
      uint64_t v34 = &v32[16 * v28];
      *(_OWORD *)uint64_t v34 = v42;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v35 = &v32[16 * v33];
      std::string v26 = v34 + 16;
      std::string v36 = (void *)v19[7];
      uint64_t v37 = (void *)v19[8];
      if (v37 == v36)
      {
        v19[7] = (uint64_t)v34;
        v19[8] = (uint64_t)v26;
        v19[9] = (uint64_t)v35;
      }
      else
      {
        do
        {
          long long v38 = *((_OWORD *)v37 - 1);
          v37 -= 2;
          *((_OWORD *)v34 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v38;
          v34 -= 16;
          void *v37 = 0;
          v37[1] = 0;
        }
        while (v37 != v36);
        uint64_t v37 = (void *)v19[7];
        uint64_t v39 = (void *)v19[8];
        v19[7] = (uint64_t)v34;
        v19[8] = (uint64_t)v26;
        v19[9] = (uint64_t)v35;
        while (v39 != v37)
        {
          uint64_t v40 = (std::__shared_weak_count *)*(v39 - 1);
          if (v40) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v40);
          }
          v39 -= 2;
        }
      }
      if (v37) {
        operator delete(v37);
      }
    }
    else
    {
      *long long v24 = v16;
      v24[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v26 = v24 + 2;
    }
    v19[8] = (uint64_t)v26;
    (*(void (**)(void))(**(void **)(v16 + 256) + 16))(*(void *)(v16 + 256));
    std::operator+<char>();
    LoggableString::LoggableString(&v50, &__p);
    (*(void (**)(uint64_t, std::string *))(*(void *)(a1 + 8) + 32))(a1 + 8, &v50);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    *(_OWORD *)a5 = v45;
  }
  else
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    if (*((void *)&v45 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v48);
}

void sub_1C5536494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>>>>::reset[abi:ne180100](v29 - 104, 0);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t SipDialog::cancelAllSubscriptions(std::__shared_weak_count *this)
{
  if (this[84].__vftable)
  {
    memset(v27, 0, sizeof(v27));
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v23, &this[8].__shared_owners_);
    if (v23) {
      uint64_t v2 = (std::__shared_weak_count *)(v23 + 8);
    }
    else {
      uint64_t v2 = 0;
    }
    unint64_t v25 = v2;
    std::string v26 = v24;
    uint64_t v23 = 0;
    long long v24 = 0;
    LoggableString::LoggableString((LoggableString *)&__p, "cancelAllSubscriptions");
    SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v27, &v25, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    p_uint64_t shared_weak_owners = &this[3].__shared_weak_owners_;
    uint64_t v4 = (*(uint64_t (**)(uint64_t *))(this[3].__shared_weak_owners_ + 64))(&this[3].__shared_weak_owners_);
    (*(void (**)(uint64_t *, uint64_t))(this[3].__shared_weak_owners_ + 16))(&this[3].__shared_weak_owners_, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"canceling all subscriptions", 27);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    uint64_t shared_owners = this[83].__shared_owners_;
    char v6 = 1;
    if ((uint64_t *)shared_owners != &this[83].__shared_weak_owners_)
    {
      while (1)
      {
        int v8 = *(SipSubscription ***)(shared_owners + 56);
        uint64_t v7 = *(SipSubscription ***)(shared_owners + 64);
        if (v8 != v7) {
          break;
        }
LABEL_42:
        uint64_t v16 = *(SipDialog **)(shared_owners + 8);
        if (v16)
        {
          do
          {
            uint64_t v17 = v16;
            uint64_t v16 = *(SipDialog **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            uint64_t v17 = *(SipDialog **)(shared_owners + 16);
            BOOL v18 = *(void *)v17 == shared_owners;
            uint64_t shared_owners = (uint64_t)v17;
          }
          while (!v18);
        }
        uint64_t shared_owners = (uint64_t)v17;
        if (v17 == (SipDialog *)&this[83].__shared_weak_owners_) {
          goto LABEL_48;
        }
      }
      while (1)
      {
        SipDialog::stack(this, &__p);
        if (*(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 200) == 2)
        {
          SipDialog::stack(this, &v23);
          if (*(unsigned char *)(v23 + 4232))
          {
            int v9 = 0;
          }
          else
          {
            SipDialog::stack(this, &v20);
            int v9 = SipStack::requiresLimitedAvailability(v20);
            if (v21) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v21);
            }
          }
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
        }
        else
        {
          int v9 = 0;
        }
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
        if (v9)
        {
          char v10 = SipSubscription::terminateWithoutUnsubscribing(*v8);
        }
        else
        {
          if (!*(unsigned char *)(SipUserAgent::config((SipUserAgent *)this[9].__vftable[3].__on_zero_shared) + 815))
          {
            uint64_t v11 = *(unsigned __int8 *)(shared_owners + 55);
            uint64_t v12 = (v11 & 0x80u) == 0 ? *(unsigned __int8 *)(shared_owners + 55) : *(void *)(shared_owners + 40);
            if (v12 == 3)
            {
              if ((v11 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)(shared_owners + 32), &SipRegistrationEventPackage::kPackageName, *(void *)(shared_owners + 40)))
                {
LABEL_41:
                  uint64_t v15 = (*(uint64_t (**)(uint64_t *))(*p_shared_weak_owners + 64))(&this[3].__shared_weak_owners_);
                  (*(void (**)(uint64_t *, uint64_t))(*p_shared_weak_owners + 16))(&this[3].__shared_weak_owners_, v15);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"not canceling reg subscription", 30);
                  *(unsigned char *)(v15 + 17) = 0;
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(unsigned char *)(v15 + 17) = 0;
                  goto LABEL_39;
                }
              }
              else
              {
                if (!*(unsigned char *)(shared_owners + 55)) {
                  goto LABEL_41;
                }
                uint64_t v13 = &SipRegistrationEventPackage::kPackageName;
                long long v14 = (unsigned __int8 *)(shared_owners + 32);
                while (*v14 == *v13)
                {
                  ++v14;
                  ++v13;
                  if (!--v11) {
                    goto LABEL_41;
                  }
                }
              }
            }
          }
          char v10 = SipSubscription::unsubscribe(*v8);
        }
        v6 &= v10;
LABEL_39:
        v8 += 2;
        if (v8 == v7) {
          goto LABEL_42;
        }
      }
    }
LABEL_48:
    SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v27);
  }
  else
  {
    char v6 = 1;
  }
  return v6 & 1;
}

void sub_1C5536924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,char a22)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

std::string *SipDialog::setSessionIdFromDialog(std::string *this, const SipDialog *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 1623);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 201);
  }
  if (v2)
  {
    uint64_t v4 = (uint64_t)this;
    char v5 = &this[3].__r_.__value_.__s.__data_[16];
    uint64_t v6 = (*(uint64_t (**)(std::string::size_type *))(this[3].__r_.__value_.__r.__words[2] + 64))(&this[3].__r_.__value_.__r.__words[2]);
    (*(void (**)(std::string::value_type *, uint64_t))(*(void *)v5 + 16))(v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"carrying Session-ID from ", 25);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*(void *)((char *)a2 + *(void *)(*(void *)a2 - 24)) + 16))((char *)a2 + *(void *)(*(void *)a2 - 24), v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" to ", 4);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 + *(void *)(*(void *)v4 - 24)) + 16))(v4 + *(void *)(*(void *)v4 - 24), v6);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    std::string::operator=((std::string *)(v4 + 1576), (const std::string *)((char *)a2 + 1576));
    return std::string::operator=((std::string *)(v4 + 1600), (const std::string *)((char *)a2 + 1600));
  }
  return this;
}

uint64_t SipDialog::handleRequest(uint64_t a1, uint64_t a2, void *a3)
{
  memset(v96, 0, sizeof(v96));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__str, (void *)(a1 + 200));
  if ((void)__str) {
    uint64_t v6 = (std::__shared_weak_count *)(__str + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v94 = v6;
  uint64_t v95 = (std::__shared_weak_count *)*((void *)&__str + 1);
  long long __str = 0uLL;
  LoggableString::LoggableString((LoggableString *)__p, "handleRequest");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v96, &v94, (const std::string *)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (v95) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v95);
  }
  if (*((void *)&__str + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
  }
  uint64_t v7 = a1 + 88;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 64))(a1 + 88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"SipDialog::handleRequest", 24);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  int v9 = *(std::__shared_weak_count **)(*a3 + 88);
  if (v9)
  {
    uint64_t v10 = *(void *)(*a3 + 80);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v11 = std::__shared_weak_count::lock(v9);
    if (!v11) {
      uint64_t v10 = 0;
    }
    std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(a1 + 1856);
  if (v12)
  {
    uint64_t v13 = *(void *)(v12 + 608);
    long long v14 = *(std::__shared_weak_count **)(v12 + 616);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v15 = 0;
    if (!v13 && v10) {
      BOOL v15 = *(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(*(void *)(a1 + 216) + 136)) + 792) != 0;
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (v15)
    {
      uint64_t v16 = *(void **)(a1 + 1856);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v10 + 112))(&v92, v10);
      SipSessionInterface::setPreferredTransportGroup(v16, &v92);
      if (v93) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v93);
      }
    }
  }
  uint64_t v17 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  uint64_t v18 = v17[23];
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = v17[23];
  }
  else {
    uint64_t v19 = *((void *)v17 + 1);
  }
  if (v19 != 6) {
    goto LABEL_37;
  }
  if ((v18 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v17, "NOTIFY", *((void *)v17 + 1))) {
      goto LABEL_37;
    }
  }
  else if (v17[23])
  {
    uint64_t v20 = "NOTIFY";
    while (*v17 == *(unsigned __int8 *)v20)
    {
      ++v17;
      ++v20;
      if (!--v18) {
        goto LABEL_39;
      }
    }
LABEL_37:
    uint64_t v21 = (SipUriHeader *)SipMessage::header<SipFromHeader>(a2);
    if (v21) {
      long long v22 = SipUriHeader::tag(v21);
    }
    else {
      long long v22 = &ims::kEmptyString;
    }
    unint64_t v31 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 2048, (void **)v22);
    if ((void **)(a1 + 2056) == v31) {
      goto LABEL_52;
    }
    uint64_t v33 = (uint64_t)v31[7];
    uint64_t v32 = (std::__shared_weak_count *)v31[8];
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v33)
    {
LABEL_52:
      uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(a1 + 88);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(a1 + 88, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"rejecting ", 10);
      *(unsigned char *)(v36 + 17) = 0;
      uint64_t v37 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
      LoggableString::LoggableString((std::string *)&__str, v37);
      (*(void (**)(uint64_t, long long *))(*(void *)v36 + 40))(v36, &__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)" request with wrong From: tag ", 30);
      *(unsigned char *)(v36 + 17) = 0;
      long long v38 = (SipUriHeader *)SipMessage::header<SipFromHeader>(a2);
      if (v38) {
        uint64_t v39 = SipUriHeader::tag(v38);
      }
      else {
        uint64_t v39 = &ims::kEmptyString;
      }
      ObfuscatedString::ObfuscatedString((uint64_t)__p, (const std::string *)v39);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v36 + 56))(v36, __p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v36 + 17) = 0;
      if ((__p[47] & 0x80000000) != 0) {
        operator delete(*(void **)&__p[24]);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SBYTE7(__str_16) < 0) {
        operator delete((void *)__str);
      }
      uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(a1 + 88);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(a1 + 88, v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"valid tags are: ", 16);
      *(unsigned char *)(v40 + 17) = 0;
      uint64_t v102 = 0;
      long long __str = 0u;
      long long __str_16 = 0u;
      ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&__str);
    }
    uint64_t v34 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
    if (v34) {
      uint64_t v35 = SipUriHeader::tag(v34);
    }
    else {
      uint64_t v35 = &ims::kEmptyString;
    }
    uint64_t v44 = *((unsigned __int8 *)v35 + 23);
    if ((v44 & 0x80u) != 0) {
      uint64_t v44 = *((void *)v35 + 1);
    }
    if (v44)
    {
      long long v45 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
      if (v45) {
        char v46 = SipUriHeader::tag(v45);
      }
      else {
        char v46 = &ims::kEmptyString;
      }
      uint64_t v60 = *((unsigned __int8 *)v46 + 23);
      if ((v60 & 0x80u) == 0) {
        uint64_t v61 = *((unsigned __int8 *)v46 + 23);
      }
      else {
        uint64_t v61 = *((void *)v46 + 1);
      }
      uint64_t v62 = *(unsigned __int8 *)(a1 + 1103);
      int v63 = (char)v62;
      if ((v62 & 0x80u) != 0) {
        uint64_t v62 = *(void *)(a1 + 1088);
      }
      if (v61 == v62)
      {
        if (v63 >= 0) {
          long long v64 = (unsigned __int8 *)(a1 + 1080);
        }
        else {
          long long v64 = *(unsigned __int8 **)(a1 + 1080);
        }
        if ((v60 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v46, v64, *((void *)v46 + 1))) {
            goto LABEL_115;
          }
        }
        else
        {
          if (!*((unsigned char *)v46 + 23)) {
            goto LABEL_115;
          }
          while (*(unsigned __int8 *)v46 == *v64)
          {
            char v46 = (long long *)((char *)v46 + 1);
            ++v64;
            if (!--v60) {
              goto LABEL_115;
            }
          }
        }
      }
      if (!*(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(*(void *)(a1 + 216) + 136)) + 544))
      {
        uint64_t v69 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(a1 + 88);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(a1 + 88, v69);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v69 + 8), (uint64_t)"rejecting ", 10);
        *(unsigned char *)(v69 + 17) = 0;
        long long v70 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
        LoggableString::LoggableString((std::string *)&__str, v70);
        (*(void (**)(uint64_t, long long *))(*(void *)v69 + 40))(v69, &__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v69 + 8), (uint64_t)" request with wrong To: tag ", 28);
        *(unsigned char *)(v69 + 17) = 0;
        long long v71 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
        if (v71) {
          long long v72 = SipUriHeader::tag(v71);
        }
        else {
          long long v72 = &ims::kEmptyString;
        }
        ObfuscatedString::ObfuscatedString((uint64_t)__p, (const std::string *)v72);
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v69 + 56))(v69, __p);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v69 + 64))(v69, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v69 + 17) = 0;
        if ((__p[47] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[24]);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (SBYTE7(__str_16) < 0) {
          operator delete((void *)__str);
        }
        long long v90 = 0u;
        memset(&v91, 0, sizeof(v91));
        long long v89 = 0u;
        memset(__p, 0, sizeof(__p));
        std::string::basic_string[abi:ne180100]<0>(&__str, "Call Does Not Exist");
        SipResponse::SipResponse((uint64_t)__p, 481, (std::string *)&__str, *(void *)(*(void *)(a1 + 216) + 136) + 288);
        if (SBYTE7(__str_16) < 0) {
          operator delete((void *)__str);
        }
        (*(void (**)(void *__return_ptr))(*(void *)*a3 + 168))(v86);
        long long v79 = (ImsResult *)v86;
        goto LABEL_62;
      }
    }
LABEL_115:
    long long v65 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
    uint64_t v66 = v65[23];
    if ((v66 & 0x80u) == 0) {
      uint64_t v67 = v65[23];
    }
    else {
      uint64_t v67 = *((void *)v65 + 1);
    }
    if (v67 != 6) {
      goto LABEL_128;
    }
    if ((v66 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v65, "CANCEL", *((void *)v65 + 1))) {
        goto LABEL_128;
      }
    }
    else if (v65[23])
    {
      long long v68 = "CANCEL";
      while (*v65 == *(unsigned __int8 *)v68)
      {
        ++v65;
        ++v68;
        if (!--v66) {
          goto LABEL_133;
        }
      }
LABEL_128:
      long long v73 = (std::__shared_weak_count *)a3[1];
      uint64_t v84 = *a3;
      uint64_t v85 = v73;
      if (v73) {
        atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned __int8 updated = SipDialogFork::verifyAndUpdateRemoteCSeq(v33, a2, (uint64_t)&v84);
      if (v85) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v85);
      }
      if ((updated & 1) == 0)
      {
        uint64_t v41 = 0;
        goto LABEL_65;
      }
    }
LABEL_133:
    (*(void (**)(uint64_t))(*(void *)a2 + 112))(a2);
    uint64_t v75 = *(void *)(a1 + 1856);
    if (v75)
    {
      long long v76 = (std::__shared_weak_count *)a3[1];
      uint64_t v82 = *a3;
      long long v83 = v76;
      if (v76) {
        atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v75 + 136))(v75, a2, &v82);
      if (v83) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v83);
      }
      goto LABEL_65;
    }
    uint64_t v77 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(a1 + 88);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(a1 + 88, v77);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v77 + 8), (uint64_t)"no session to handle incoming ", 30);
    *(unsigned char *)(v77 + 17) = 0;
    std::string v78 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
    LoggableString::LoggableString((std::string *)__p, v78);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v77 + 40))(v77, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v77 + 8), (uint64_t)" request", 8);
    *(unsigned char *)(v77 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v77 + 64))(v77, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v77 + 17) = 0;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    long long v90 = 0u;
    memset(&v91, 0, sizeof(v91));
    long long v89 = 0u;
    memset(__p, 0, sizeof(__p));
    std::string::basic_string[abi:ne180100]<0>(&__str, "Call Does Not Exist");
    SipResponse::SipResponse((uint64_t)__p, 481, (std::string *)&__str, *(void *)(*(void *)(a1 + 216) + 136) + 288);
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
    (*(void (**)(void *__return_ptr))(*(void *)*a3 + 168))(v81);
    long long v79 = (ImsResult *)v81;
LABEL_62:
    ImsResult::~ImsResult(v79);
    *(void *)std::string __p = &unk_1F20DD488;
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    SipMessage::~SipMessage((SipMessage *)__p);
    uint64_t v41 = 1;
LABEL_65:
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v11) {
      goto LABEL_68;
    }
    goto LABEL_69;
  }
LABEL_39:
  long long v89 = 0u;
  long long v90 = 0u;
  uint64_t v23 = *(void *)(*(void *)(a1 + 216) + 136) + 288;
  memset(&__p[8], 0, 56);
  LODWORD(v89) = 1065353216;
  *(void *)&long long v90 = v23;
  *(void *)std::string __p = &unk_1F20DD488;
  memset(&v91, 0, sizeof(v91));
  DWORD2(v9(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 200;
  long long v24 = (char *)SipMessage::header<SipEventHeader>(a2);
  unint64_t v25 = v24;
  if (v24)
  {
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v26 = (uint64_t)(v24 + 72);
    uint64_t v27 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v24 + 72), (void **)&kParameterId);
    uint64_t v28 = (std::string *)(v25 + 104);
    uint64_t v29 = (void **)(v25 + 80);
    if (v29 == v27) {
      uint64_t v30 = &ims::kEmptyString;
    }
    else {
      uint64_t v30 = (long long *)(v27 + 7);
    }
    SipDialog::subscriptionForEvent(a1, (void **)&v28->__r_.__value_.__l.__data_, v30, &v98);
    if (v98)
    {
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v98 + 88))(v98, a2, __p);
    }
    else
    {
      int v47 = SipMessage::header<SipSubscriptionStateHeader>(a2);
      if (!v47) {
        goto LABEL_89;
      }
      uint64_t v48 = *((unsigned __int8 *)v47 + 127);
      int v49 = (char)v48;
      if ((v48 & 0x80u) != 0) {
        uint64_t v48 = v47[14];
      }
      if (v48 == 10
        && ((v52 = (char *)v47[13], std::string v50 = (char *)(v47 + 13), v51 = v52, v49 >= 0) ? (v53 = v50) : (v53 = v51),
            (uint64_t v54 = *(void *)v53, v55 = *((unsigned __int16 *)v53 + 4), v54 == *(void *)"terminated")
          ? (BOOL v56 = v55 == *(unsigned __int16 *)"ed")
          : (BOOL v56 = 0),
            v56))
      {
        uint64_t v80 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(a1 + 88);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v80 + 8), (uint64_t)"received NOTIFY with state terminated for unknown subscription. Being nice and returning a 200 OK.", 98);
        *(unsigned char *)(v80 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v80 + 64))(v80, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v80 + 17) = 0;
      }
      else
      {
LABEL_89:
        uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(a1 + 88);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"unexpected NOTIFY event '", 25);
        *(unsigned char *)(v57 + 17) = 0;
        LoggableString::LoggableString((std::string *)&__str, v28);
        (*(void (**)(uint64_t, long long *))(*(void *)v57 + 40))(v57, &__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"' with id=", 10);
        *(unsigned char *)(v57 + 17) = 0;
        long long v58 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v26, (void **)&kParameterId);
        if (v29 == v58) {
          long long v59 = (const std::string *)&ims::kEmptyString;
        }
        else {
          long long v59 = (const std::string *)(v58 + 7);
        }
        LoggableString::LoggableString(&v97, v59);
        (*(void (**)(uint64_t, std::string *))(*(void *)v57 + 40))(v57, &v97);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v57 + 17) = 0;
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if (SBYTE7(__str_16) < 0) {
          operator delete((void *)__str);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "Bad Event");
        DWORD2(v9(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 489;
        std::string::operator=(&v91, (const std::string *)&__str);
        if (SBYTE7(__str_16) < 0) {
          operator delete((void *)__str);
        }
      }
    }
    if (v99) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v99);
    }
  }
  else
  {
    uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(a1 + 88);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"NOTIFY request has no Event header", 34);
    *(unsigned char *)(v43 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v43 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__str, "Missing Event header");
    DWORD2(v9(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 400;
    std::string::operator=(&v91, (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
  }
  (*(void (**)(void *__return_ptr))(*(void *)*a3 + 168))(v87);
  ImsResult::~ImsResult((ImsResult *)v87);
  *(void *)std::string __p = &unk_1F20DD488;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  SipMessage::~SipMessage((SipMessage *)__p);
  uint64_t v41 = 1;
  if (v11) {
LABEL_68:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_69:
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v96);
  return v41;
}

void sub_1C5537E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p)
{
  SipResponse::~SipResponse(&__p);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v51 - 240);
  _Unwind_Resume(a1);
}

void SipDialog::cancelInviteRequest(SipDialog *a1, uint64_t *a2, SipHeader *a3)
{
  uint64_t v6 = *(SipRequest **)(*a2 + 296);
  HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>((uint64_t)v6);
  if (HeaderWith)
  {
    uint64_t v8 = (void *)HeaderWith[8];
    if (v8 != (void *)HeaderWith[9])
    {
      if (*v8)
      {
        MatchingCancel = SipRequest::createMatchingCancel(v6);
        if (a3)
        {
          uint64_t v10 = *((void *)a1 + 27);
          if (v10) {
            uint64_t v11 = *(SipUserAgent **)(v10 + 136);
          }
          else {
            uint64_t v11 = 0;
          }
          if (*(unsigned char *)(SipUserAgent::config(v11) + 612)) {
            BambiCallTerminationReason::addReasonToRequest(a3, MatchingCancel);
          }
          SipDialog::sipSession(a1, &v23);
          uint64_t v12 = v23;
          SipDialog::sipSession(a1, &v19);
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v19 + 128))(&v21);
          SipSession::addTerminationSdpToMessage(v12, (uint64_t)a3, (uint64_t)MatchingCancel, &v21);
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
        }
        uint64_t v13 = *a2;
        long long v14 = *(std::__shared_weak_count **)(*a2 + 88);
        if (v14)
        {
          uint64_t v15 = *(void *)(v13 + 80);
          atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v16 = 0;
          uint64_t v17 = std::__shared_weak_count::lock(v14);
          if (v17) {
            uint64_t v16 = v15;
          }
        }
        else
        {
          uint64_t v16 = 0;
          uint64_t v17 = 0;
        }
        SipDialog::internalSendRequest((uint64_t)v18, a1, MatchingCancel, &v16);
      }
    }
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v23 = (std::__shared_weak_count *)&unk_1F20B2680;
  long long v24 = (std::__shared_weak_count *)&_bambiDomain;
  int v25 = 1073741825;
  operator new();
}

void sub_1C5538324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17, char a18, std::__shared_weak_count *a19)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::internalSendRequest(uint64_t a1, void *a2, const SipRequest *a3, void *a4)
{
  if (*a4) {
    goto LABEL_2;
  }
  uint64_t v9 = a2[232];
  if (!v9) {
    goto LABEL_2;
  }
  uint64_t v10 = *(void *)(v9 + 608);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 616);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (!v10) {
      goto LABEL_2;
    }
    uint64_t v12 = a2[232];
    uint64_t v10 = *(void *)(v12 + 608);
    uint64_t v13 = *(void *)(v12 + 616);
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    if (!v10) {
      goto LABEL_2;
    }
    uint64_t v13 = 0;
  }
  long long v14 = (std::__shared_weak_count *)a4[1];
  *a4 = v10;
  a4[1] = v13;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v15 = (*(uint64_t (**)(void *))(a2[11] + 64))(a2 + 11);
  (*(void (**)(void *, uint64_t))(a2[11] + 16))(a2 + 11, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"sending ", 8);
  *(unsigned char *)(v15 + 17) = 0;
  uint64_t v16 = (const std::string *)(*(uint64_t (**)(const SipRequest *))(*(void *)a3 + 112))(a3);
  LoggableString::LoggableString(&__p, v16);
  (*(void (**)(uint64_t, std::string *))(*(void *)v15 + 40))(v15, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" request over preferred transport ", 34);
  *(unsigned char *)(v15 + 17) = 0;
  (*(void (**)(void, uint64_t))(*(void *)*a4 + 104))(*a4, v15);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v15 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_2:
  uint64_t v7 = SipUserAgent::transactionLayer(*(SipUserAgent **)(a2[27] + 136));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__p, a2 + 25);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v8 = a4[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  SipTransactionLayer::sendRequest(v7, a3);
}

void sub_1C5538AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::bestAvailableFork(SipDialog *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  if (*((void *)this + 258) != 1) {
    goto LABEL_5;
  }
  uint64_t v5 = *((void *)this + 256);
  uint64_t v6 = *(void *)(v5 + 56);
  uint64_t v4 = *(std::__shared_weak_count **)(v5 + 64);
  *a2 = v6;
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_5:
    uint64_t v7 = *((void *)this + 261);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 262);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *a2 = v7;
    a2[1] = v8;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    if (!v7)
    {
      uint64_t v9 = *((void *)this + 259);
      uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 260);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *a2 = v9;
      a2[1] = v10;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (!v9 && *((void *)this + 258))
      {
        uint64_t v11 = *((void *)this + 256);
        uint64_t v13 = *(void *)(v11 + 56);
        uint64_t v12 = *(void *)(v11 + 64);
        if (v12) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
        }
        *a2 = v13;
        a2[1] = v12;
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
    }
  }
}

void SipDialog::dialogId(SipDialog *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v32, ";to-tag=", 8uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = 0;
  memset(&v32, 0, sizeof(v32));
  if (*((void *)this + 258) == 1)
  {
    uint64_t v7 = *((void *)this + 256);
    uint64_t v8 = *(void *)(v7 + 56);
    uint64_t v6 = *(std::__shared_weak_count **)(v7 + 64);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v6;
    if (v8) {
      goto LABEL_22;
    }
  }
  uint64_t v8 = *((void *)this + 261);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 262);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v8) {
    goto LABEL_22;
  }
  uint64_t v8 = *((void *)this + 259);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 260);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v8)
  {
    uint64_t v9 = v10;
LABEL_22:
    std::string::operator=(&v32, (const std::string *)(v8 + 152));
    goto LABEL_23;
  }
  if (*((void *)this + 258))
  {
    uint64_t v28 = *((void *)this + 256);
    uint64_t v8 = *(void *)(v28 + 56);
    uint64_t v9 = *(std::__shared_weak_count **)(v28 + 64);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v8) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v9 = v10;
  }
LABEL_23:
  if (*((unsigned char *)this + 1928))
  {
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v32.__r_.__value_.__l.__size_;
    }
    memset(&v29, 0, sizeof(v29));
    uint64_t v12 = &v29;
    std::string::basic_string[abi:ne180100]((uint64_t)&v29, size + 10);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v12 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v13 = &v32;
      }
      else {
        uint64_t v13 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      memmove(v12, v13, size);
    }
    strcpy((char *)v12 + size, ";from-tag=");
    int v14 = *((char *)this + 1103);
    if (v14 >= 0) {
      uint64_t v15 = (char *)this + 1080;
    }
    else {
      uint64_t v15 = (const std::string::value_type *)*((void *)this + 135);
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *((unsigned __int8 *)this + 1103);
    }
    else {
      std::string::size_type v16 = *((void *)this + 136);
    }
    uint64_t v17 = std::string::append(&v29, v15, v16);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    int64_t v31 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (v31 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      uint64_t v19 = (void **)__p[0];
    }
    if (v31 >= 0) {
      std::string::size_type v20 = HIBYTE(v31);
    }
    else {
      std::string::size_type v20 = (std::string::size_type)__p[1];
    }
  }
  else
  {
    if (*((char *)this + 1103) >= 0) {
      size_t v21 = *((unsigned __int8 *)this + 1103);
    }
    else {
      size_t v21 = *((void *)this + 136);
    }
    memset(&v29, 0, sizeof(v29));
    long long v22 = &v29;
    std::string::basic_string[abi:ne180100]((uint64_t)&v29, v21 + 10);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    if (v21)
    {
      if (*((char *)this + 1103) >= 0) {
        uint64_t v23 = (char *)this + 1080;
      }
      else {
        uint64_t v23 = (char *)*((void *)this + 135);
      }
      memmove(v22, v23, v21);
    }
    strcpy((char *)v22 + v21, ";from-tag=");
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v24 = &v32;
    }
    else {
      long long v24 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = v32.__r_.__value_.__l.__size_;
    }
    long long v26 = std::string::append(&v29, (const std::string::value_type *)v24, v25);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    int64_t v31 = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (v31 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      uint64_t v19 = (void **)__p[0];
    }
    if (v31 >= 0) {
      std::string::size_type v20 = HIBYTE(v31);
    }
    else {
      std::string::size_type v20 = (std::string::size_type)__p[1];
    }
  }
  std::string::append(a2, (const std::string::value_type *)v19, v20);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_1C5539010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5539088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    JUMPOUT(0x1C553907CLL);
  }
  JUMPOUT(0x1C5539080);
}

uint64_t SipDialog::handleResponse(uint64_t a1, uint64_t a2, std::string::size_type *a3)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(*a3 + 296);
  uint64_t v7 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
  if (v7) {
    uint64_t v8 = SipUriHeader::tag(v7);
  }
  else {
    uint64_t v8 = &ims::kEmptyString;
  }
  memset(&v119, 0, sizeof(v119));
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v119.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v9;
  }
  if (*(_DWORD *)(a2 + 88) == 100)
  {
    std::string::size_type v11 = *a3;
    uint64_t v10 = (std::__shared_weak_count *)a3[1];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(void *)(a1 + 1856))
    {
      long long v116 = 0u;
      memset(v115, 0, sizeof(v115));
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v121, (void *)(a1 + 200));
      if (v121) {
        uint64_t v12 = v121 + 8;
      }
      else {
        uint64_t v12 = 0;
      }
      *(void *)&long long v123 = v12;
      *((void *)&v123 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v122;
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      LoggableString::LoggableString((LoggableString *)&v120, "handleTryingResponse");
      SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v115, (std::__shared_weak_count **)&v123, &v120);
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v120.__r_.__value_.__l.__data_);
      }
      if (*((void *)&v123 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v123 + 1));
      }
      if (v122) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v122);
      }
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 64))(a1 + 88);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"SipDialog::handleTryingResponse", 31);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      uint64_t v14 = *(void *)(a1 + 1856);
      v120.__r_.__value_.__r.__words[0] = v11;
      v120.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v14 + 144))(v14, a2, &v120);
      if (v120.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v120.__r_.__value_.__l.__size_);
      }
      SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v115);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    uint64_t v15 = 1;
    goto LABEL_257;
  }
  std::string::size_type size = HIBYTE(v119.__r_.__value_.__r.__words[2]);
  if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v119.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    long long v123 = 0uLL;
    uint64_t v18 = *a3;
    uint64_t v17 = (std::__shared_weak_count *)a3[1];
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
    std::string::size_type v20 = &ims::kEmptyString;
    if (v19) {
      std::string::size_type v20 = SipUriHeader::tag(v19);
    }
    uint64_t v108 = a1 + 2048;
    size_t v21 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 2048, (void **)v20);
    if ((void **)(a1 + 2056) == v21)
    {
      uint64_t v23 = 0;
    }
    else
    {
      long long v22 = v21[7];
      uint64_t v23 = (std::__shared_weak_count *)v21[8];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v22)
      {
        uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 64))(a1 + 88);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"found existing fork ", 20);
        *(unsigned char *)(v24 + 17) = 0;
        ObfuscatedString::ObfuscatedString((uint64_t)v115, (const std::string *)v20);
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v24 + 56))(v24, v115);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v24 + 17) = 0;
        if (SHIBYTE(v116) < 0) {
          operator delete(*(void **)&v115[24]);
        }
        if ((v115[23] & 0x80000000) != 0) {
          operator delete(*(void **)v115);
        }
        goto LABEL_43;
      }
    }
    if (*(_DWORD *)(a2 + 88) <= 0x12Bu
      && (void **)(a1 + 2032) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 2024, (void **)v20))
    {
      uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 32))(a1 + 88);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"ignoring ", 9);
      *(unsigned char *)(v32 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v32 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)" response on terminated fork ", 29);
      *(unsigned char *)(v32 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v115, (const std::string *)v20);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v32 + 56))(v32, v115);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_117;
    }
    uint64_t v33 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(v18 + 296) + 112))(*(void *)(v18 + 296));
    uint64_t v34 = v33[23];
    size_t v35 = *((void *)v33 + 1);
    if ((v34 & 0x80u) == 0) {
      uint64_t v36 = v33[23];
    }
    else {
      uint64_t v36 = *((void *)v33 + 1);
    }
    if (v36 != 9)
    {
      if (v36 == 6)
      {
        if ((v34 & 0x80) == 0)
        {
          if (v33[23])
          {
            uint64_t v37 = "INVITE";
            while (*v33 == *(unsigned __int8 *)v37)
            {
              ++v33;
              ++v37;
              if (!--v34) {
                goto LABEL_102;
              }
            }
            goto LABEL_110;
          }
LABEL_102:
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          long long v22 = *(void **)(a1 + 2088);
          if (!v22)
          {
            v120.__r_.__value_.__r.__words[0] = v18;
            v120.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
            if (v17) {
              atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipDialog::addForkFromResponse((uint64_t *)v115, (SipDialog *)a1, (const SipMessage *)a2, (uint64_t *)&v120);
            uint64_t v23 = *(std::__shared_weak_count **)&v115[8];
            long long v22 = *(void **)v115;
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            goto LABEL_43;
          }
          int v49 = (void *)(a1 + 2088);
          uint64_t v23 = *(std::__shared_weak_count **)(a1 + 2096);
          if (v23)
          {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
            std::string v50 = *(std::__shared_weak_count **)(a1 + 2096);
            *int v49 = 0;
            *(void *)(a1 + 209ims::StackConfig::~StackConfig(this + 6) = 0;
            if (v50) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v50);
            }
            *(void *)long long v115 = v22;
            *(void *)&v115[8] = v23;
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            *int v49 = 0;
            *(void *)(a1 + 209ims::StackConfig::~StackConfig(this + 6) = 0;
            *(_OWORD *)long long v115 = (unint64_t)v22;
          }
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v106 = SipDialog::addForkFromResponse(a1, (uint64_t *)v115, (const SipMessage *)a2, v18, v17);
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          if (v23)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
            if ((v106 & 1) == 0)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
LABEL_252:
              uint64_t v23 = 0;
              long long v22 = 0;
            }
          }
          else
          {
            if ((v106 & 1) == 0) {
              goto LABEL_252;
            }
            uint64_t v23 = 0;
          }
LABEL_43:
          *(void *)&long long v123 = v22;
          *((void *)&v123 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v23;
          goto LABEL_124;
        }
        if (!memcmp(*(const void **)v33, "INVITE", v35)) {
          goto LABEL_102;
        }
      }
LABEL_110:
      if (*(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(*(void *)(a1 + 216) + 136)) + 544)
        && *(void *)(a1 + 2064) == 1)
      {
        uint64_t v51 = *(void *)(*(void *)v108 + 64);
        *(void *)&long long v123 = *(void *)(*(void *)v108 + 56);
        *((void *)&v123 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v51;
        if (v51) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
        }
        goto LABEL_122;
      }
      uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 32))(a1 + 88);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"ignoring ", 9);
      *(unsigned char *)(v32 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v32 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)" response with To: tag that doesn't match any existing fork: ", 61);
      *(unsigned char *)(v32 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v115, (const std::string *)v20);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v32 + 56))(v32, v115);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_117:
      *(unsigned char *)(v32 + 17) = 0;
      if (SHIBYTE(v116) < 0) {
        operator delete(*(void **)&v115[24]);
      }
      if ((v115[23] & 0x80000000) != 0) {
        operator delete(*(void **)v115);
      }
      long long v123 = 0uLL;
LABEL_122:
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
LABEL_124:
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      uint64_t v52 = v123;
      if (!(void)v123) {
        goto LABEL_254;
      }
      if ((*(_DWORD *)(a2 + 88) - 100) <= 0x63)
      {
        long long v53 = SipMessage::header<SipRSeqHeader>(a2);
        if (v53)
        {
          if (v53[15])
          {
            uint64_t v54 = SipMessage::header<SipRSeqHeader>(a2);
            unsigned int v55 = v54 ? v54[15] : 0;
            BOOL v56 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v52 + 672, (void **)(*a3 + 328));
            if ((void **)(v52 + 680) != v56)
            {
              unsigned int v57 = *((_DWORD *)v56 + 14);
              if (v57)
              {
                if (v55 <= v57)
                {
                  uint64_t v103 = *(void *)(a1 + 88);
                  uint64_t v102 = a1 + 88;
                  uint64_t v104 = (*(uint64_t (**)(uint64_t))(v103 + 64))(v102);
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v102 + 16))(v102, v104);
                  uint64_t v105 = ImsOutStream::operator<<(v104, "ignoring duplicate response rseq=");
                  std::ostream::operator<<();
                  *(unsigned char *)(v105 + 17) = 0;
                  int v63 = (unsigned char *)ImsOutStream::operator<<(v105, ", cseq=");
                  SipMessage::header<SipCSeqHeader>(a2);
                  std::ostream::operator<<();
                  v63[17] = 0;
                  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  goto LABEL_253;
                }
                if (v55 > v57 + 1)
                {
                  uint64_t v59 = *(void *)(a1 + 88);
                  uint64_t v58 = a1 + 88;
                  uint64_t v60 = (*(uint64_t (**)(uint64_t))(v59 + 64))(v58);
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 16))(v58, v60);
                  uint64_t v61 = ImsOutStream::operator<<(v60, "received out-of-order response (rseq=");
                  std::ostream::operator<<();
                  *(unsigned char *)(v61 + 17) = 0;
                  uint64_t v62 = ImsOutStream::operator<<(v61, ", expecting ");
                  std::ostream::operator<<();
                  *(unsigned char *)(v62 + 17) = 0;
                  int v63 = (unsigned char *)ImsOutStream::operator<<(v62, ")");
                  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_253:
                  v63[17] = 0;
                  goto LABEL_254;
                }
              }
            }
          }
        }
      }
      long long v64 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 112))(v6);
      uint64_t v65 = v64[23];
      if ((v65 & 0x80u) == 0) {
        uint64_t v66 = v64[23];
      }
      else {
        uint64_t v66 = *((void *)v64 + 1);
      }
      if (v66 != 6) {
        goto LABEL_152;
      }
      if ((v65 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v64, "INVITE", *((void *)v64 + 1))) {
          goto LABEL_152;
        }
      }
      else if (v64[23])
      {
        uint64_t v67 = "INVITE";
        while (*v64 == *(unsigned __int8 *)v67)
        {
          ++v64;
          ++v67;
          if (!--v65) {
            goto LABEL_149;
          }
        }
        goto LABEL_152;
      }
LABEL_149:
      int v68 = *(_DWORD *)(a2 + 88);
      if ((v68 - 200) > 0x63)
      {
        int v69 = 0;
        goto LABEL_154;
      }
      if (*(unsigned char *)(a1 + 1944))
      {
        *(unsigned char *)(a1 + 1944) = 0;
        SipDialog::collapseForks(a1, (unsigned __int8 *)&v119);
        int v69 = 1;
LABEL_153:
        int v68 = *(_DWORD *)(a2 + 88);
LABEL_154:
        if (v68 == 407 || v68 == 401)
        {
          *(void *)(a1 + 193ims::StackConfig::~StackConfig(this + 6) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
          if (SipAuthClient::handleUnauthorizedResponse(*(SipAuthClient **)(*(void *)(*(void *)(a1 + 216) + 136) + 280), (const SipResponse *)a2, (SipAuthChallengeSource *)(a1 + 192)))
          {
LABEL_254:
            uint64_t v15 = 1;
LABEL_255:
            if (*((void *)&v123 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v123 + 1));
            }
            goto LABEL_257;
          }
          uint64_t v70 = *(void *)(a1 + 1936);
          if (v70) {
            (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
          }
          *(void *)(a1 + 193ims::StackConfig::~StackConfig(this + 6) = 0;
        }
        long long v71 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a2 + 32), "Allow-Events");
        if (v71)
        {
          long long v72 = (const void *)*((void *)v71 + 5);
          if (v72)
          {
            if (v73)
            {
              uint64_t v74 = v73;
              std::__tree<std::string>::destroy(a1 + 1880, *(char **)(a1 + 1888));
              *(void *)(a1 + 188(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = a1 + 1888;
              *(void *)(a1 + 189ims::StackConfig::~StackConfig(this + 6) = 0;
              *(void *)(a1 + 1888) = 0;
              if (v74 + 64 != (char *)(a1 + 1880)) {
                std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)(a1 + 1880), *((void **)v74 + 8), (void *)v74 + 9);
              }
            }
          }
        }
        uint64_t v75 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 112))(v6);
        uint64_t v76 = v75[23];
        if ((v76 & 0x80u) == 0) {
          uint64_t v77 = v75[23];
        }
        else {
          uint64_t v77 = *((void *)v75 + 1);
        }
        if (v77 == 9)
        {
          if ((v76 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v75, "SUBSCRIBE", *((void *)v75 + 1))) {
              goto LABEL_177;
            }
          }
          else if (v75[23])
          {
            std::string v78 = "SUBSCRIBE";
            while (*v75 == *(unsigned __int8 *)v78)
            {
              ++v75;
              ++v78;
              if (!--v76) {
                goto LABEL_187;
              }
            }
            goto LABEL_177;
          }
LABEL_187:
          std::string::size_type v84 = *a3;
          long long v83 = (std::__shared_weak_count *)a3[1];
          if (v83) {
            atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v85 = (char *)SipMessage::header<SipEventHeader>(*(void *)(v84 + 296));
          long long v86 = v85;
          if (v85)
          {
            *(_OWORD *)&v120.__r_.__value_.__l.__data_ = 0uLL;
            long long v87 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v85 + 72), (void **)&kParameterId);
            if (v86 + 80 == (char *)v87) {
              uint64_t v88 = &ims::kEmptyString;
            }
            else {
              uint64_t v88 = (long long *)(v87 + 7);
            }
            SipDialog::subscriptionForEvent(a1, (void **)v86 + 13, v88, &v120);
            std::string::size_type v89 = v120.__r_.__value_.__r.__words[0];
            if (v120.__r_.__value_.__r.__words[0])
            {
              *(void *)long long v115 = v84;
              *(void *)&v115[8] = v83;
              if (v83) {
                atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v15 = (*(uint64_t (**)(std::string::size_type, uint64_t, unsigned char *))(*(void *)v89 + 96))(v89, a2, v115);
              if (*(void *)&v115[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v115[8]);
              }
            }
            else
            {
              uint64_t v100 = *(void *)(a1 + 88);
              uint64_t v99 = a1 + 88;
              uint64_t v101 = (*(uint64_t (**)(uint64_t))(v100 + 64))(v99);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v99 + 16))(v99, v101);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v101 + 8), (uint64_t)"no ", 3);
              *(unsigned char *)(v101 + 17) = 0;
              LoggableString::LoggableString((std::string *)v115, (const std::string *)(v86 + 104));
              (*(void (**)(uint64_t, unsigned char *))(*(void *)v101 + 40))(v101, v115);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v101 + 8), (uint64_t)" subscription to handle SUBSCRIBE response.  We might have received a terminating NOTIFY first.", 95);
              *(unsigned char *)(v101 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v101 + 64))(v101, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v101 + 17) = 0;
              if ((v115[23] & 0x80000000) != 0) {
                operator delete(*(void **)v115);
              }
              uint64_t v15 = 1;
            }
            if (v120.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v120.__r_.__value_.__l.__size_);
            }
          }
          else
          {
            uint64_t v97 = *(void *)(a1 + 88);
            uint64_t v96 = a1 + 88;
            uint64_t v98 = (*(uint64_t (**)(uint64_t))(v97 + 56))(v96);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v96 + 16))(v96, v98);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v98 + 8), (uint64_t)"received SUBSCRIBE response, but can't find Event header in request", 67);
            *(unsigned char *)(v98 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v98 + 64))(v98, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            uint64_t v15 = 0;
            *(unsigned char *)(v98 + 17) = 0;
          }
          if (v83) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v83);
          }
          goto LABEL_255;
        }
LABEL_177:
        long long v79 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 112))(v6);
        uint64_t v80 = v79[23];
        if ((v80 & 0x80u) == 0) {
          uint64_t v81 = v79[23];
        }
        else {
          uint64_t v81 = *((void *)v79 + 1);
        }
        if (v81 == 5)
        {
          if ((v80 & 0x80) == 0)
          {
            if (v79[23])
            {
              uint64_t v82 = "REFER";
              while (*v79 == *(unsigned __int8 *)v82)
              {
                ++v79;
                ++v82;
                if (!--v80) {
                  goto LABEL_199;
                }
              }
              goto LABEL_204;
            }
            goto LABEL_199;
          }
          if (!memcmp(*(const void **)v79, "REFER", *((void *)v79 + 1)))
          {
LABEL_199:
            SipResultDomain::makeResult((_DWORD *)a2, (uint64_t)v115);
            long long v90 = (std::__shared_weak_count *)a3[1];
            v114[0] = *a3;
            v114[1] = v90;
            if (v90) {
              atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipDialog::handleReferResponse((void *)a1, (const std::string *)v115, v114);
            if (v90) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v90);
            }
            ImsResult::~ImsResult((ImsResult *)v115);
          }
        }
LABEL_204:
        if (*(void *)(a1 + 1856))
        {
          long long v116 = 0u;
          memset(v115, 0, sizeof(v115));
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v121, (void *)(a1 + 200));
          if (v121) {
            std::string v91 = (std::__shared_weak_count *)(v121 + 8);
          }
          else {
            std::string v91 = 0;
          }
          uint64_t v112 = v91;
          uint64_t v113 = v122;
          uint64_t v121 = 0;
          uint64_t v122 = 0;
          LoggableString::LoggableString((LoggableString *)&v120, "handleResponse");
          SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v115, &v112, &v120);
          if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v120.__r_.__value_.__l.__data_);
          }
          if (v113) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v113);
          }
          if (v122) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v122);
          }
          uint64_t v92 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 64))(a1 + 88);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v92);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v92 + 8), (uint64_t)"SipDialog::handleResponse", 25);
          *(unsigned char *)(v92 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v92 + 64))(v92, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v92 + 17) = 0;
          uint64_t v93 = *(void *)(a1 + 1856);
          uint64_t v94 = (std::__shared_weak_count *)a3[1];
          std::string::size_type v110 = *a3;
          std::string v111 = v94;
          if (v94) {
            atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, uint64_t, std::string::size_type *))(*(void *)v93 + 144))(v93, a2, &v110);
          if (v111) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v111);
          }
          SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v115);
        }
        if (v69 && *(void *)(a1 + 2064) == 1)
        {
          uint64_t v95 = *(std::__shared_weak_count **)(*(void *)v108 + 64);
          v109[0] = *(void *)(*(void *)v108 + 56);
          v109[1] = v95;
          if (v95) {
            atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          SipDialog::setActiveFork((SipDialog *)a1, v109, 1);
          if (v95) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v95);
          }
        }
        goto LABEL_254;
      }
LABEL_152:
      int v69 = 0;
      goto LABEL_153;
    }
    if ((v34 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v33, "SUBSCRIBE", v35)) {
        goto LABEL_110;
      }
    }
    else if (v33[23])
    {
      long long v38 = "SUBSCRIBE";
      while (*v33 == *(unsigned __int8 *)v38)
      {
        ++v33;
        ++v38;
        if (!--v34) {
          goto LABEL_115;
        }
      }
      goto LABEL_110;
    }
LABEL_115:
    if (!*(void *)(a1 + 2064))
    {
      *(void *)long long v115 = v18;
      *(void *)&v115[8] = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SipDialog::addForkFromResponse((uint64_t *)&v123, (SipDialog *)a1, (const SipMessage *)a2, (uint64_t *)v115);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      goto LABEL_122;
    }
    uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 64))(a1 + 88);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"forking not allowed for SUBSCRIBE dialogs.  Ignoring ", 53);
    *(unsigned char *)(v32 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v32 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)" response with new To: tag ", 27);
    *(unsigned char *)(v32 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v115, (const std::string *)v20);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v32 + 56))(v32, v115);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_117;
  }
  uint64_t v25 = a1 + 88;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 48))(a1 + 88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"incoming ", 9);
  *(unsigned char *)(v26 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v26 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)" response is missing a To: tag", 30);
  *(unsigned char *)(v26 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v26 + 17) = 0;
  memset(&v120, 0, sizeof(v120));
  if (*(void *)(a1 + 2064) == 1)
  {
    uint64_t v27 = *(void *)(a1 + 2048);
    uint64_t v29 = *(void *)(v27 + 56);
    uint64_t v28 = *(std::__shared_weak_count **)(v27 + 64);
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      if (v29)
      {
        if (*(void *)(a1 + 2064) == 1)
        {
          uint64_t v30 = *(void *)(a1 + 2048);
          uint64_t v29 = *(void *)(v30 + 56);
          int64_t v31 = *(std::__shared_weak_count **)(v30 + 64);
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_82;
        }
        uint64_t v29 = 0;
LABEL_81:
        int64_t v31 = 0;
LABEL_82:
        std::string::operator=(&v120, (const std::string *)(v29 + 152));
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 48))(a1 + 88);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(a1 + 88, v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"using tag ", 10);
        *(unsigned char *)(v43 + 17) = 0;
        ObfuscatedString::ObfuscatedString((uint64_t)v115, &v120);
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v43 + 56))(v43, v115);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)" from our only fork", 19);
        *(unsigned char *)(v43 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_85:
        *(unsigned char *)(v43 + 17) = 0;
        if (SHIBYTE(v116) < 0) {
          operator delete(*(void **)&v115[24]);
        }
        if ((v115[23] & 0x80000000) != 0) {
          operator delete(*(void **)v115);
        }
        goto LABEL_89;
      }
    }
    else if (v29)
    {
      goto LABEL_81;
    }
  }
  if (*(_DWORD *)(a2 + 88) >= 0x12Cu)
  {
    if (!*(void *)(a1 + 2064))
    {
      ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(*(void *)(*(void *)(a1 + 216) + 136) + 656), 10, (std::string *)v115);
      uint64_t v40 = std::string::insert((std::string *)v115, 0, "fake-tag-", 9uLL);
      std::string::size_type v41 = v40->__r_.__value_.__r.__words[0];
      *(void *)&long long v123 = v40->__r_.__value_.__l.__size_;
      *(void *)((char *)&v123 + 7) = *(std::string::size_type *)((char *)&v40->__r_.__value_.__r.__words[1] + 7);
      char v42 = HIBYTE(v40->__r_.__value_.__r.__words[2]);
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v120.__r_.__value_.__l.__data_);
      }
      v120.__r_.__value_.__r.__words[0] = v41;
      v120.__r_.__value_.__l.__size_ = v123;
      *(std::string::size_type *)((char *)&v120.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v123 + 7);
      *((unsigned char *)&v120.__r_.__value_.__s + 2IMSCallOptions::~IMSCallOptions(this + 3) = v42;
      if ((v115[23] & 0x80000000) != 0) {
        operator delete(*(void **)v115);
      }
      uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 48))(a1 + 88);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(a1 + 88, v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"no existing forks. Making up new tag ", 37);
      *(unsigned char *)(v43 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v115, &v120);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v43 + 56))(v43, v115);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)" for error response", 19);
      *(unsigned char *)(v43 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_85;
    }
    std::string::operator=(&v120, (const std::string *)(*(void *)(a1 + 2048) + 32));
    uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 48))(a1 + 88);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(a1 + 88, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"using tag ", 10);
    *(unsigned char *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v39 + 32))(v39, &v120);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)" from one of our forks for error response", 41);
    *(unsigned char *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v39 + 17) = 0;
  }
LABEL_89:
  std::string::size_type v44 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
  if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v44 = v120.__r_.__value_.__l.__size_;
  }
  if (v44)
  {
    long long v45 = (SipMessage *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
    char v46 = SipMessage::header<SipToHeader>(v45, 1);
    SipUriHeader::setTag((uint64_t)v46, (uint64_t)&v120);
    int v47 = (std::__shared_weak_count *)a3[1];
    std::string::size_type v117 = *a3;
    uint64_t v118 = v47;
    if (v47) {
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = (*(uint64_t (**)(uint64_t, SipMessage *, std::string::size_type *))(*(void *)a1 + 24))(a1, v45, &v117);
    if (v118) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v118);
    }
    if (v45) {
      (*(void (**)(SipMessage *))(*(void *)v45 + 8))(v45);
    }
  }
  else
  {
    uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 48))(a1 + 88);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"ignoring ", 9);
    *(unsigned char *)(v48 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v48 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)" response with no To: tag", 25);
    *(unsigned char *)(v48 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v48 + 17) = 0;
    uint64_t v15 = 1;
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
LABEL_257:
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v119.__r_.__value_.__l.__data_);
  }
  return v15;
}

void sub_1C553ABC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  char v42 = *(std::__shared_weak_count **)(v40 - 152);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (*(void *)(v40 - 112)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v40 - 112));
  }
  if (a39 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipDialog::handleReferResponse(void *a1, const std::string *a2, void *a3)
{
  uint64_t v6 = a1 + 11;
  uint64_t v7 = (*(uint64_t (**)(void *))(a1[11] + 64))(a1 + 11);
  (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handling refer response", 23);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v41 = 0;
  long long v39 = 0u;
  memset(v40, 0, sizeof(v40));
  long long v37 = 0u;
  long long v38 = 0u;
  memset(v36, 0, sizeof(v36));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
  uint64_t v8 = SipMessage::header<SipCSeqHeader>(*(void *)(*a3 + 296));
  if (v8) {
    unsigned int v9 = v8[15];
  }
  else {
    unsigned int v9 = 0;
  }
  std::ostream::operator<<();
  uint64_t v34 = 0;
  size_t v35 = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v36 + 8, &v42);
  SipDialog::subscriptionForEvent((uint64_t)a1, (void **)"refer", &v42, &v34);
  if (v45 < 0) {
    operator delete(v42);
  }
  uint64_t v10 = v34;
  if (v34)
  {
    std::string::size_type v11 = (std::__shared_weak_count *)a3[1];
    uint64_t v32 = *a3;
    uint64_t v33 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipSubscription::handleTransactionResponse(v10, (uint64_t)a2, (uint64_t)&v32);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    goto LABEL_48;
  }
  uint64_t v12 = a1 + 226;
  uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned int,SipSentResponse *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,SipSentResponse *>>>::find<unsigned int>(a1 + 226, v9);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = (std::__shared_weak_count *)v13[4];
    if (v15)
    {
      std::string::size_type v16 = std::__shared_weak_count::lock(v15);
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = (std::__shared_weak_count **)v14[3];
        if (v18)
        {
          ImsResult::ImsResult((ImsResult *)v31, a2);
          LazuliGroupParticipant::handleResponse(v18, (uint64_t)v31);
          ImsResult::~ImsResult((ImsResult *)v31);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
    }
    uint64_t v19 = std::__hash_table<std::__hash_value_type<unsigned int,SipSentResponse *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,SipSentResponse *>>>::find<unsigned int>(a1 + 226, v9);
    if (v19)
    {
      int8x8_t v20 = (int8x8_t)a1[227];
      uint64_t v21 = *v19;
      unint64_t v22 = v19[1];
      uint8x8_t v23 = (uint8x8_t)vcnt_s8(v20);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        if (v22 >= *(void *)&v20) {
          v22 %= *(void *)&v20;
        }
      }
      else
      {
        v22 &= *(void *)&v20 - 1;
      }
      uint64_t v25 = *(uint64_t **)(*v12 + 8 * v22);
      do
      {
        uint64_t v26 = v25;
        uint64_t v25 = (uint64_t *)*v25;
      }
      while (v25 != v19);
      if (v26 == a1 + 228) {
        goto LABEL_37;
      }
      unint64_t v27 = v26[1];
      if (v23.u32[0] > 1uLL)
      {
        if (v27 >= *(void *)&v20) {
          v27 %= *(void *)&v20;
        }
      }
      else
      {
        v27 &= *(void *)&v20 - 1;
      }
      if (v27 != v22)
      {
LABEL_37:
        if (v21)
        {
          unint64_t v28 = *(void *)(v21 + 8);
          if (v23.u32[0] > 1uLL)
          {
            unint64_t v29 = *(void *)(v21 + 8);
            if (v28 >= *(void *)&v20) {
              unint64_t v29 = v28 % *(void *)&v20;
            }
          }
          else
          {
            unint64_t v29 = v28 & (*(void *)&v20 - 1);
          }
          if (v29 == v22) {
            goto LABEL_41;
          }
        }
        *(void *)(*v12 + 8 * v22) = 0;
        uint64_t v21 = *v19;
      }
      if (!v21)
      {
LABEL_47:
        *uint64_t v26 = v21;
        uint64_t *v19 = 0;
        --a1[229];
        char v44 = 1;
        char v42 = 0;
        uint64_t v43 = a1 + 228;
        std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::weak_ptr<LazuliGroupParticipant>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v43, v19);
        goto LABEL_48;
      }
      unint64_t v28 = *(void *)(v21 + 8);
LABEL_41:
      if (v23.u32[0] > 1uLL)
      {
        if (v28 >= *(void *)&v20) {
          v28 %= *(void *)&v20;
        }
      }
      else
      {
        v28 &= *(void *)&v20 - 1;
      }
      if (v28 != v22)
      {
        *(void *)(*v12 + 8 * v28) = v26;
        uint64_t v21 = *v19;
      }
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v24 = (*(uint64_t (**)(void *))(*v6 + 56))(v6);
    (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"can't find refer subscription with id ", 38);
    *(unsigned char *)(v24 + 17) = 0;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v36 + 8, &v42);
    (*(void (**)(uint64_t, void **))(*(void *)v24 + 32))(v24, &v42);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v24 + 17) = 0;
    if (v45 < 0) {
      operator delete(v42);
    }
  }
LABEL_48:
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  *(void *)&v36[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v36 + *(void *)(*(void *)&v36[0] - MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::~MediaSessionSRVCCQueue((MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v36[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v38) < 0) {
    operator delete(*((void **)&v37 + 1));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v40);
}

void sub_1C553B3D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, std::__shared_weak_count *);
  ImsResult::~ImsResult((ImsResult *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::ostringstream::~ostringstream((uint64_t)va1);
  _Unwind_Resume(a1);
}

void SipDialog::handleTransactionError(void *a1, const std::string *a2, void *a3)
{
  uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*a3 + 296) + 112))(*(void *)(*a3 + 296));
  uint64_t v7 = v6[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v6[23];
  }
  else {
    uint64_t v8 = *((void *)v6 + 1);
  }
  if (v8 != 9) {
    goto LABEL_12;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v6, "SUBSCRIBE", *((void *)v6 + 1))) {
      goto LABEL_12;
    }
LABEL_22:
    uint64_t v15 = *a3;
    uint64_t v14 = (std::__shared_weak_count *)a3[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = (void **)SipMessage::header<SipEventHeader>(*(void *)(v15 + 296));
    uint64_t v17 = v16;
    if (v16)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v18 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v16 + 9), (void **)&kParameterId);
      if (v17 + 10 == v18) {
        uint64_t v19 = &ims::kEmptyString;
      }
      else {
        uint64_t v19 = (long long *)(v18 + 7);
      }
      SipDialog::subscriptionForEvent((uint64_t)a1, v17 + 13, v19, &v29);
      uint64_t v20 = v29;
      if (v29)
      {
        uint64_t v27 = v15;
        unint64_t v28 = v14;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipSubscription::handleTransactionResponse(v20, (uint64_t)a2, (uint64_t)&v27);
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
      }
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
    }
LABEL_44:
    if (v14)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    return;
  }
  if (!v6[23]) {
    goto LABEL_22;
  }
  uint64_t v9 = "SUBSCRIBE";
  while (*v6 == *(unsigned __int8 *)v9)
  {
    ++v6;
    ++v9;
    if (!--v7) {
      goto LABEL_22;
    }
  }
LABEL_12:
  uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*a3 + 296) + 112))(*(void *)(*a3 + 296));
  uint64_t v11 = v10[23];
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = v10[23];
  }
  else {
    uint64_t v12 = *((void *)v10 + 1);
  }
  if (v12 == 5)
  {
    if ((v11 & 0x80) == 0)
    {
      if (v10[23])
      {
        uint64_t v13 = "REFER";
        while (*v10 == *(unsigned __int8 *)v13)
        {
          ++v10;
          ++v13;
          if (!--v11) {
            goto LABEL_41;
          }
        }
        goto LABEL_36;
      }
      goto LABEL_41;
    }
    if (!memcmp(*(const void **)v10, "REFER", *((void *)v10 + 1)))
    {
LABEL_41:
      uint64_t v23 = *a3;
      uint64_t v14 = (std::__shared_weak_count *)a3[1];
      v26[0] = v23;
      v26[1] = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SipDialog::handleReferResponse(a1, a2, v26);
      goto LABEL_44;
    }
  }
LABEL_36:
  uint64_t v21 = a1[232];
  if (v21)
  {
    unint64_t v22 = (std::__shared_weak_count *)a3[1];
    uint64_t v24 = *a3;
    uint64_t v25 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, const std::string *, uint64_t *))(*(void *)v21 + 152))(v21, a2, &v24);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
  }
}

void sub_1C553B71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::transactionCompleted(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void **)a2;
  if (!*(void *)a2) {
    return;
  }
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = (SipUriHeader *)SipMessage::header<SipFromHeader>(v5[37]);
    if (v8) {
      uint64_t v9 = SipUriHeader::tag(v8);
    }
    else {
      uint64_t v9 = &ims::kEmptyString;
    }
    memset(&v32, 0, sizeof(v32));
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v14 = *v9;
      v32.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v14;
    }
    std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v32.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 2048, (void **)&v32.__r_.__value_.__l.__data_);
      if ((void **)(a1 + 2056) != v16)
      {
        uint64_t v17 = v16[7];
        uint64_t v18 = (std::__shared_weak_count *)v16[8];
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v7 && v17)
        {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
    }
    uint64_t v19 = *(void *)(a1 + 1856);
    if (!v19) {
      goto LABEL_54;
    }
    uint64_t v30 = v6;
    int64_t v31 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void **))(*(void *)v19 + 168))(v19, &v30);
    uint64_t v20 = v31;
    if (!v31) {
      goto LABEL_54;
    }
  }
  else
  {
    if (!v10) {
      return;
    }
    uint64_t v11 = v10;
    uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (SipUriHeader *)SipMessage::header<SipToHeader>(v10[37]);
    if (v12) {
      uint64_t v13 = SipUriHeader::tag(v12);
    }
    else {
      uint64_t v13 = &ims::kEmptyString;
    }
    memset(&v32, 0, sizeof(v32));
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v13, *((void *)v13 + 1));
    }
    else
    {
      long long v21 = *v13;
      v32.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v21;
    }
    std::string::size_type v22 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v22 = v32.__r_.__value_.__l.__size_;
    }
    if (v22)
    {
      uint64_t v23 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 2048, (void **)&v32.__r_.__value_.__l.__data_);
      uint64_t v24 = v23;
      if ((void **)(a1 + 2056) != v23)
      {
        uint64_t v25 = (SipDialogFork *)v23[7];
        uint64_t v26 = (std::__shared_weak_count *)v24[8];
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v25)
        {
          uint64_t v30 = v11;
          int64_t v31 = v7;
          if (v7) {
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          SipDialogFork::handleClientTransactionCompleted(v25, (uint64_t)&v30);
          if (v31) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
        }
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
      }
    }
    uint64_t v27 = *(void *)(a1 + 1856);
    if (!v27) {
      goto LABEL_54;
    }
    unint64_t v28 = v11;
    uint64_t v29 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void **))(*(void *)v27 + 160))(v27, &v28);
    uint64_t v20 = v29;
    if (!v29) {
      goto LABEL_54;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
LABEL_54:
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v32.__r_.__value_.__l.__data_);
    if (!v7) {
      return;
    }
  }
  else if (!v7)
  {
    return;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1C553BAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v18)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipDialog::transactionTerminated(void *a1, uint64_t a2)
{
  memset(v27, 0, sizeof(v27));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v23, a1 + 25);
  if (v23) {
    uint64_t v4 = (std::__shared_weak_count *)(v23 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v25 = v4;
  uint64_t v26 = v24;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "transactionTerminated");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v27, &v25, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(a1[11] + 64))(a1 + 11);
  (*(void (**)(void *, uint64_t))(a1[11] + 16))(a1 + 11, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"SipDialog::transactionTerminated", 32);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t v6 = *(const void **)a2;
  if (!*(void *)a2) {
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v27);
  }
  if (!v7)
  {
    if (!v9) {
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v27);
    }
    uint64_t v10 = v9;
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 8);
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v20[0] = v9;
    v20[1] = v8;
    SipDialog::removeClientTransaction(a1, v20);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    uint64_t v11 = (unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)v10 + 37) + 112))(*((void *)v10 + 37));
    uint64_t v12 = v11[23];
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = v11[23];
    }
    else {
      uint64_t v13 = *((void *)v11 + 1);
    }
    if (v13 != 6) {
      goto LABEL_39;
    }
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, "INVITE", *((void *)v11 + 1))) {
        goto LABEL_39;
      }
    }
    else if (v11[23])
    {
      long long v14 = "INVITE";
      while (*v11 == *(unsigned __int8 *)v14)
      {
        ++v11;
        ++v14;
        if (!--v12) {
          goto LABEL_32;
        }
      }
LABEL_39:
      if (v8) {
        goto LABEL_40;
      }
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v27);
    }
LABEL_32:
    uint64_t v15 = (void *)a1[256];
    if (v15 != a1 + 257)
    {
      do
      {
        std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)(v15[7] + 672), (void **)v10 + 41);
        uint64_t v16 = (void *)v15[1];
        if (v16)
        {
          do
          {
            uint64_t v17 = v16;
            uint64_t v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            uint64_t v17 = (void *)v15[2];
            BOOL v18 = *v17 == (void)v15;
            uint64_t v15 = v17;
          }
          while (!v18);
        }
        uint64_t v15 = v17;
      }
      while (v17 != a1 + 257);
    }
    goto LABEL_39;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 8);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v21[0] = v7;
  v21[1] = v8;
  SipDialog::removeServerTransaction((uint64_t)a1, v21);
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_40:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v27);
}

void sub_1C553BE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void SipDialog::addServerTransaction(uint64_t a1, void *a2)
{
  v27[0] = 0;
  v27[1] = 0;
  uint64_t v28 = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*a2 + 296) + 112))(*(void *)(*a2 + 296));
  SipTransaction::transactionMapKey(v4 + 328, v5, (uint64_t)v27);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 88) + 64))(a1 + 88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 88) + 16))(a1 + 88, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"adding ", 7);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 160))(__p);
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *(void **)(a1 + 1960);
  uint64_t v8 = (void *)(a1 + 1960);
  uint64_t v9 = (void *)(a1 + 1960);
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = (void *)(a1 + 1960);
  while (1)
  {
    while (1)
    {
      uint64_t v9 = v7;
      uint64_t v10 = v7 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v27, (void **)v7 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v7 = (void *)*v9;
      uint64_t v8 = v9;
      if (!*v9) {
        goto LABEL_12;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, v27) & 0x80) == 0) {
      break;
    }
    uint64_t v8 = v9 + 1;
    uint64_t v7 = (void *)v9[1];
    if (!v7) {
      goto LABEL_12;
    }
  }
  uint64_t v11 = (void *)*v8;
  if (!*v8)
  {
LABEL_12:
    uint64_t v30 = 0;
    uint64_t v12 = operator new(0x48uLL);
    __p[0] = v12;
    __p[1] = (void *)(a1 + 1960);
    uint64_t v13 = (std::string *)(v12 + 4);
    if (SHIBYTE(v28) < 0)
    {
      std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)v27[0], (std::string::size_type)v27[1]);
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v27;
      void v12[6] = v28;
    }
    v12[7] = 0;
    v12[8] = 0;
    LOBYTE(v3(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 1;
    *uint64_t v12 = 0;
    v12[1] = 0;
    void v12[2] = v9;
    *uint64_t v8 = v12;
    uint64_t v14 = **(void **)(a1 + 1952);
    if (v14)
    {
      *(void *)(a1 + 1952) = v14;
      uint64_t v12 = (void *)*v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1960), v12);
    ++*(void *)(a1 + 1968);
    uint64_t v11 = __p[0];
    __p[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
  }
  uint64_t v16 = *a2;
  uint64_t v15 = a2[1];
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = (std::__shared_weak_count *)v11[8];
  v11[7] = v16;
  v11[8] = v15;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v18 = *a2;
  uint64_t v19 = *(void *)(a1 + 216);
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 224);
  if (v19) {
    uint64_t v21 = v19 + 8;
  }
  else {
    uint64_t v21 = 0;
  }
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v22 = *(std::__shared_weak_count **)(v18 + 360);
  *(void *)(v18 + 352) = v21;
  *(void *)(v18 + 36(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v20;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 160))(__p);
  (*(void (**)(uint64_t, void **))(*(void *)(a1 + 8) + 32))(a1 + 8, __p);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v23 = *(void *)(a1 + 1856);
  if (v23)
  {
    uint64_t v24 = (std::__shared_weak_count *)a2[1];
    uint64_t v25 = *a2;
    uint64_t v26 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v23 + 232))(v23, &v25);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
}

void sub_1C553C2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void SipDialog::serverTransactionWithIdAndMethod(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v9 = 0;
  SipTransaction::transactionMapKey(a2, a3, (uint64_t)__p);
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 1952, __p);
  if ((void **)(a1 + 1960) == v6)
  {
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    uint64_t v7 = (atomic_ullong *)v6[8];
    *a4 = v6[7];
    a4[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
    }
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C553C3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::currentClientTransactions(uint64_t a1, unint64_t *a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v4 = *(void **)(a1 + 1976);
  uint64_t v5 = (void *)(a1 + 1984);
  if (v4 != (void *)(a1 + 1984))
  {
    char v44 = a2 + 2;
    do
    {
      long long v9 = *(_OWORD *)(v4 + 7);
      long long v45 = v9;
      uint64_t v10 = (std::__shared_weak_count *)v4[8];
      if (*((void *)&v9 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (a3)
      {
        uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(v9 + 296) + 112))(*(void *)(v9 + 296));
        uint64_t v12 = a3[23];
        if ((v12 & 0x80u) == 0) {
          uint64_t v13 = a3[23];
        }
        else {
          uint64_t v13 = *((void *)a3 + 1);
        }
        uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
        int v15 = (char)v14;
        if ((v14 & 0x80u) != 0) {
          uint64_t v14 = *(void *)(v11 + 8);
        }
        if (v13 != v14) {
          goto LABEL_61;
        }
        if (v15 >= 0) {
          uint64_t v16 = (unsigned __int8 *)v11;
        }
        else {
          uint64_t v16 = *(unsigned __int8 **)v11;
        }
        if ((v12 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v16, *((void *)a3 + 1))) {
            goto LABEL_61;
          }
        }
        else if (a3[23])
        {
          uint64_t v17 = a3;
          while (*v17 == *v16)
          {
            ++v17;
            ++v16;
            if (!--v12) {
              goto LABEL_22;
            }
          }
          goto LABEL_61;
        }
      }
LABEL_22:
      uint64_t v18 = *a4;
      if (!*a4) {
        goto LABEL_41;
      }
      uint64_t v19 = (SipUriHeader *)SipMessage::header<SipToHeader>(*(void *)(v45 + 296));
      if (v19) {
        uint64_t v20 = SipUriHeader::tag(v19);
      }
      else {
        uint64_t v20 = &ims::kEmptyString;
      }
      uint64_t v21 = *(unsigned __int8 *)(v18 + 175);
      if ((v21 & 0x80u) == 0) {
        uint64_t v22 = *(unsigned __int8 *)(v18 + 175);
      }
      else {
        uint64_t v22 = *(void *)(v18 + 160);
      }
      uint64_t v23 = *((unsigned __int8 *)v20 + 23);
      int v24 = (char)v23;
      if ((v23 & 0x80u) != 0) {
        uint64_t v23 = *((void *)v20 + 1);
      }
      if (v22 != v23) {
        goto LABEL_61;
      }
      uint64_t v25 = (const void **)(v18 + 152);
      if (v24 >= 0) {
        uint64_t v26 = v20;
      }
      else {
        uint64_t v26 = *(long long **)v20;
      }
      if ((v21 & 0x80) == 0)
      {
        if (*(unsigned char *)(v18 + 175))
        {
          while (*(unsigned __int8 *)v25 == *(unsigned __int8 *)v26)
          {
            uint64_t v25 = (const void **)((char *)v25 + 1);
            uint64_t v26 = (long long *)((char *)v26 + 1);
            if (!--v21) {
              goto LABEL_41;
            }
          }
          goto LABEL_61;
        }
LABEL_41:
        uint64_t v28 = (void *)a2[1];
        unint64_t v27 = a2[2];
        if ((unint64_t)v28 >= v27)
        {
          unint64_t v30 = *a2;
          uint64_t v31 = (uint64_t)((uint64_t)v28 - *a2) >> 4;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 60) {
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v33 = v27 - v30;
          if (v33 >> 3 > v32) {
            unint64_t v32 = v33 >> 3;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v32;
          }
          int v49 = v44;
          if (v34 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          size_t v35 = (char *)operator new(16 * v34);
          uint64_t v36 = &v35[16 * v31];
          *(_OWORD *)uint64_t v36 = v45;
          if (v10)
          {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
            unint64_t v30 = *a2;
            uint64_t v28 = (void *)a2[1];
          }
          if (v28 == (void *)v30)
          {
            int64x2_t v39 = vdupq_n_s64(v30);
            long long v37 = &v35[16 * v31];
          }
          else
          {
            long long v37 = &v35[16 * v31];
            do
            {
              long long v38 = *((_OWORD *)v28 - 1);
              v28 -= 2;
              *((_OWORD *)v37 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v38;
              v37 -= 16;
              *uint64_t v28 = 0;
              v28[1] = 0;
            }
            while (v28 != (void *)v30);
            int64x2_t v39 = *(int64x2_t *)a2;
          }
          uint64_t v29 = v36 + 16;
          *a2 = (unint64_t)v37;
          a2[1] = (unint64_t)(v36 + 16);
          int64x2_t v47 = v39;
          unint64_t v40 = a2[2];
          a2[2] = (unint64_t)&v35[16 * v34];
          unint64_t v48 = v40;
          uint64_t v46 = v39.i64[0];
          std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&v46);
        }
        else
        {
          *uint64_t v28 = v45;
          v28[1] = v10;
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v29 = v28 + 2;
        }
        a2[1] = (unint64_t)v29;
        goto LABEL_61;
      }
      if (!memcmp(*v25, v26, *(void *)(v18 + 160))) {
        goto LABEL_41;
      }
LABEL_61:
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      uint64_t v41 = (void *)v4[1];
      if (v41)
      {
        do
        {
          char v42 = v41;
          uint64_t v41 = (void *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          char v42 = (void *)v4[2];
          BOOL v43 = *v42 == (void)v4;
          uint64_t v4 = v42;
        }
        while (!v43);
      }
      uint64_t v4 = v42;
    }
    while (v42 != v5);
  }
}

void sub_1C553C708(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::currentServerTransactions(uint64_t a1, unint64_t *a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v4 = *(void **)(a1 + 1952);
  uint64_t v5 = (void *)(a1 + 1960);
  if (v4 != (void *)(a1 + 1960))
  {
    char v44 = a2 + 2;
    do
    {
      long long v9 = *(_OWORD *)(v4 + 7);
      long long v45 = v9;
      uint64_t v10 = (std::__shared_weak_count *)v4[8];
      if (*((void *)&v9 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (a3)
      {
        uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(v9 + 296) + 112))(*(void *)(v9 + 296));
        uint64_t v12 = a3[23];
        if ((v12 & 0x80u) == 0) {
          uint64_t v13 = a3[23];
        }
        else {
          uint64_t v13 = *((void *)a3 + 1);
        }
        uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
        int v15 = (char)v14;
        if ((v14 & 0x80u) != 0) {
          uint64_t v14 = *(void *)(v11 + 8);
        }
        if (v13 != v14) {
          goto LABEL_61;
        }
        if (v15 >= 0) {
          uint64_t v16 = (unsigned __int8 *)v11;
        }
        else {
          uint64_t v16 = *(unsigned __int8 **)v11;
        }
        if ((v12 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v16, *((void *)a3 + 1))) {
            goto LABEL_61;
          }
        }
        else if (a3[23])
        {
          uint64_t v17 = a3;
          while (*v17 == *v16)
          {
            ++v17;
            ++v16;
            if (!--v12) {
              goto LABEL_22;
            }
          }
          goto LABEL_61;
        }
      }
LABEL_22:
      uint64_t v18 = *a4;
      if (!*a4) {
        goto LABEL_41;
      }
      uint64_t v19 = (SipUriHeader *)SipMessage::header<SipFromHeader>(*(void *)(v45 + 296));
      if (v19) {
        uint64_t v20 = SipUriHeader::tag(v19);
      }
      else {
        uint64_t v20 = &ims::kEmptyString;
      }
      uint64_t v21 = *(unsigned __int8 *)(v18 + 175);
      if ((v21 & 0x80u) == 0) {
        uint64_t v22 = *(unsigned __int8 *)(v18 + 175);
      }
      else {
        uint64_t v22 = *(void *)(v18 + 160);
      }
      uint64_t v23 = *((unsigned __int8 *)v20 + 23);
      int v24 = (char)v23;
      if ((v23 & 0x80u) != 0) {
        uint64_t v23 = *((void *)v20 + 1);
      }
      if (v22 != v23) {
        goto LABEL_61;
      }
      uint64_t v25 = (const void **)(v18 + 152);
      if (v24 >= 0) {
        uint64_t v26 = v20;
      }
      else {
        uint64_t v26 = *(long long **)v20;
      }
      if ((v21 & 0x80) == 0)
      {
        if (*(unsigned char *)(v18 + 175))
        {
          while (*(unsigned __int8 *)v25 == *(unsigned __int8 *)v26)
          {
            uint64_t v25 = (const void **)((char *)v25 + 1);
            uint64_t v26 = (long long *)((char *)v26 + 1);
            if (!--v21) {
              goto LABEL_41;
            }
          }
          goto LABEL_61;
        }
LABEL_41:
        uint64_t v28 = (void *)a2[1];
        unint64_t v27 = a2[2];
        if ((unint64_t)v28 >= v27)
        {
          unint64_t v30 = *a2;
          uint64_t v31 = (uint64_t)((uint64_t)v28 - *a2) >> 4;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 60) {
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v33 = v27 - v30;
          if (v33 >> 3 > v32) {
            unint64_t v32 = v33 >> 3;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v32;
          }
          int v49 = v44;
          if (v34 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          size_t v35 = (char *)operator new(16 * v34);
          uint64_t v36 = &v35[16 * v31];
          *(_OWORD *)uint64_t v36 = v45;
          if (v10)
          {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
            unint64_t v30 = *a2;
            uint64_t v28 = (void *)a2[1];
          }
          if (v28 == (void *)v30)
          {
            int64x2_t v39 = vdupq_n_s64(v30);
            long long v37 = &v35[16 * v31];
          }
          else
          {
            long long v37 = &v35[16 * v31];
            do
            {
              long long v38 = *((_OWORD *)v28 - 1);
              v28 -= 2;
              *((_OWORD *)v37 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v38;
              v37 -= 16;
              *uint64_t v28 = 0;
              v28[1] = 0;
            }
            while (v28 != (void *)v30);
            int64x2_t v39 = *(int64x2_t *)a2;
          }
          uint64_t v29 = v36 + 16;
          *a2 = (unint64_t)v37;
          a2[1] = (unint64_t)(v36 + 16);
          int64x2_t v47 = v39;
          unint64_t v40 = a2[2];
          a2[2] = (unint64_t)&v35[16 * v34];
          unint64_t v48 = v40;
          uint64_t v46 = v39.i64[0];
          std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&v46);
        }
        else
        {
          *uint64_t v28 = v45;
          v28[1] = v10;
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v29 = v28 + 2;
        }
        a2[1] = (unint64_t)v29;
        goto LABEL_61;
      }
      if (!memcmp(*v25, v26, *(void *)(v18 + 160))) {
        goto LABEL_41;
      }
LABEL_61:
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      uint64_t v41 = (void *)v4[1];
      if (v41)
      {
        do
        {
          char v42 = v41;
          uint64_t v41 = (void *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          char v42 = (void *)v4[2];
          BOOL v43 = *v42 == (void)v4;
          uint64_t v4 = v42;
        }
        while (!v43);
      }
      uint64_t v4 = v42;
    }
    while (v42 != v5);
  }
}

void sub_1C553CA48(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipDialog::sendQueuedResponseInTransaction@<X0>(std::__shared_weak_count *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  memset(v45, 0, sizeof(v45));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v49, &a1[8].__shared_owners_);
  if (v49) {
    uint64_t v8 = (std::__shared_weak_count *)((char *)v49 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  BOOL v43 = v8;
  char v44 = v50;
  int v49 = 0;
  std::string v50 = 0;
  LoggableString::LoggableString((LoggableString *)__p, "sendQueuedResponseInTransaction");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v45, &v43, (const std::string *)__p);
  if (SBYTE7(v39) < 0) {
    operator delete(__p[0]);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  p_uint64_t shared_weak_owners = &a1[3].__shared_weak_owners_;
  uint64_t v10 = (*(uint64_t (**)(uint64_t *))(a1[3].__shared_weak_owners_ + 64))(&a1[3].__shared_weak_owners_);
  (*(void (**)(uint64_t *, uint64_t))(a1[3].__shared_weak_owners_ + 16))(&a1[3].__shared_weak_owners_, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"SipDialog::sendQueuedResponseInTransaction", 42);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  uint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v39 = 0u;
  uint64_t v12 = *a3;
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (char *)SipMessage::header<SipCSeqHeader>(a2);
  uint64_t v14 = (long long *)(v13 + 64);
  if (!v13) {
    uint64_t v14 = &ims::kEmptyString;
  }
  uint64_t v15 = *((unsigned __int8 *)v14 + 23);
  uint64_t v16 = *((void *)v14 + 1);
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v15;
  }
  if (!v16)
  {
    uint64_t v17 = *(void **)(a2 + 80);
    if (v17) {
      SipMessageEncodingMap::copyHeadersFromRequestToResponse(v17, *(const SipRequest **)(v12 + 296), (SipResponse *)a2, 0);
    }
  }
  uint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v39 = 0u;
  SipDialog::fillContactHeader((SipDialog *)__p, a1, (void *)a2);
  if ((*(unsigned int (**)(void *, void))(*(void *)__p[1] + 24))(__p[1], v39)) {
    ImsResult::operator<<<char [33]>((uint64_t)__p, "Contact Header generation failed");
  }
  uint64_t v18 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
  if (v18) {
    uint64_t v19 = SipUriHeader::tag(v18);
  }
  else {
    uint64_t v19 = &ims::kEmptyString;
  }
  uint64_t v20 = *((unsigned __int8 *)v19 + 23);
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = *((void *)v19 + 1);
  }
  if (!v20)
  {
    uint64_t v21 = SipMessage::header<SipToHeader>((SipMessage *)a2, 1);
    SipUriHeader::setTag((uint64_t)v21, (uint64_t)&a1[45]);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if ((*(unsigned int (**)(void *, void))(*(void *)__p[1] + 24))(__p[1], v39))
  {
    uint64_t v22 = (unsigned char *)(*(uint64_t (**)(uint64_t *))(*p_shared_weak_owners + 56))(&a1[3].__shared_weak_owners_);
    (*(void (**)(uint64_t *, unsigned char *))(*p_shared_weak_owners + 16))(&a1[3].__shared_weak_owners_, v22);
    (*((void (**)(void **, unsigned char *))__p[0] + 2))(__p, v22);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v22[17] = 0;
    ImsResult::ImsResult(a4, (uint64_t)__p);
    goto LABEL_79;
  }
  uint64_t v24 = *a3;
  uint64_t v23 = (std::__shared_weak_count *)a3[1];
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = (SipUriHeader *)SipMessage::header<SipFromHeader>(a2);
  if (v25) {
    uint64_t v26 = SipUriHeader::tag(v25);
  }
  else {
    uint64_t v26 = &ims::kEmptyString;
  }
  unint64_t v27 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&a1[85].__shared_owners_, (void **)v26);
  if (&a1[85].__shared_weak_owners_ == (uint64_t *)v27)
  {
    uint64_t v29 = 0;
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v29 = v27[7];
    uint64_t v28 = (std::__shared_weak_count *)v27[8];
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  int v49 = 0;
  std::string v50 = 0;
  SipDialog::sipSession((SipDialog *)a1, &v49);
  if (!v29 || !v49 || (SipSession::confirmed(v49) & 1) != 0) {
    goto LABEL_61;
  }
  unint64_t v30 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(v24 + 296) + 112))(*(void *)(v24 + 296));
  uint64_t v31 = v30[23];
  uint64_t v32 = (v31 & 0x80u) == 0 ? v30[23] : *((void *)v30 + 1);
  if (v32 != 6) {
    goto LABEL_61;
  }
  if ((v31 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v30, "INVITE", *((void *)v30 + 1))) {
      goto LABEL_61;
    }
  }
  else if (v30[23])
  {
    uint64_t v33 = "INVITE";
    while (*v30 == *(unsigned __int8 *)v33)
    {
      ++v30;
      ++v33;
      if (!--v31) {
        goto LABEL_55;
      }
    }
    goto LABEL_61;
  }
LABEL_55:
  if ((*(_DWORD *)(a2 + 88) - 200) <= 0x63)
  {
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    a1[86].__shared_owners_ = (uint64_t)v29;
    uint64_t shared_weak_owners = (std::__shared_weak_count *)a1[86].__shared_weak_owners_;
    a1[86].__shared_weak_owners_ = (uint64_t)v28;
    if (shared_weak_owners) {
      std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
    }
    int v35 = 1;
    goto LABEL_62;
  }
LABEL_61:
  int v35 = 0;
LABEL_62:
  uint64_t shared_owners = a1[77].__shared_owners_;
  if (shared_owners)
  {
    uint64_t v47 = v24;
    unint64_t v48 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)shared_owners + 176))(shared_owners, a2, &v47);
    if (v48) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v48);
    }
  }
  if (v35)
  {
    v46[0] = v29;
    v46[1] = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipDialog::setActiveFork((SipDialog *)a1, v46, 1);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  (*(void (**)(void, uint64_t, void))(*(void *)*a3 + 168))(*a3, a2, 0);
LABEL_79:
  ImsResult::~ImsResult((ImsResult *)__p);
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v45);
}

void sub_1C553D050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v26 - 88);
  if (v28)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    if (!v25)
    {
LABEL_5:
      if (!v24)
      {
LABEL_10:
        ImsResult::~ImsResult((ImsResult *)&__p);
        SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a24);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      goto LABEL_10;
    }
  }
  else if (!v25)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  if (!v24) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void SipDialog::sendResponse(std::__shared_weak_count *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, ImsResult *a5@<X8>)
{
  v27[0] = 0;
  v27[1] = 0;
  uint64_t v28 = 0;
  SipTransaction::transactionMapKey(a2, a3, (uint64_t)v27);
  long long v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&a1[81].__shared_owners_, v27);
  if (&a1[81].__shared_weak_owners_ != (uint64_t *)v9)
  {
    uint64_t v10 = v9[7];
    uint64_t v11 = (std::__shared_weak_count *)v9[8];
    if (v11)
    {
      p_uint64_t shared_owners = &v11->__shared_owners_;
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t shared_owners = a1[77].__shared_owners_;
      if (shared_owners)
      {
        uint64_t v21 = v10;
        uint64_t v22 = v11;
        atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
        goto LABEL_10;
      }
      std::string __p = v10;
      uint64_t v19 = v11;
      atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t shared_owners = a1[77].__shared_owners_;
      if (shared_owners)
      {
        uint64_t v21 = v10;
        uint64_t v22 = 0;
LABEL_10:
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)shared_owners + 240))(shared_owners, a4, &v21);
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        if (!v11) {
          goto LABEL_19;
        }
LABEL_18:
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        goto LABEL_19;
      }
      std::string __p = v10;
      uint64_t v19 = 0;
    }
    SipDialog::sendQueuedResponseInTransaction(a1, a4, &__p, (uint64_t)a5);
    if (!v11) {
      goto LABEL_19;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    goto LABEL_18;
  }
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v21 = &unk_1F20B2680;
  uint64_t v22 = (std::__shared_weak_count *)&_bambiDomain;
  int v23 = 1073741825;
  ((void (*)(void **__return_ptr, std::__shared_weak_count *))a1->__vftable[1].__on_zero_shared)(&__p, a1);
  uint64_t v14 = ImsResult::operator<<<LoggableString>((uint64_t)&v21, (uint64_t)&__p);
  uint64_t v15 = ImsResult::operator<<<char [40]>(v14, " doesn't contain a transaction with id ");
  uint64_t v16 = (ImsResult *)ImsResult::operator<<<std::string>(v15, a2);
  uint64_t v17 = ImsLogContainer::logResult((ImsLogContainer *)&a1[3].__shared_weak_owners_, v16);
  ImsResult::ImsResult(a5, (const std::string *)v17);
  if (v20 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult((ImsResult *)&v21);
LABEL_19:
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
}

void sub_1C553D338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17)
{
  if (v17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*(char *)(v18 - 33) < 0) {
    operator delete(*(void **)(v18 - 56));
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::sendRequest(void *a1@<X0>, SipRequest *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  if (!v7)
  {
    uint64_t v11 = a1[258];
    if (v11 == 1)
    {
      uint64_t v15 = a1[256];
      long long v9 = *(char **)(v15 + 56);
      uint64_t v10 = *(std::__shared_weak_count **)(v15 + 64);
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_25:
        uint64_t v28 = v9;
        uint64_t v29 = v10;
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_54;
      }
LABEL_53:
      uint64_t v10 = 0;
      uint64_t v28 = v9;
      uint64_t v29 = 0;
LABEL_54:
      SipDialog::sendRequestInFork(a4, (uint64_t)a1, a2, (uint64_t)&v28);
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      goto LABEL_56;
    }
    if (v11)
    {
      uint64_t v16 = a1 + 11;
      uint64_t v17 = (*(uint64_t (**)(void *))(a1[11] + 56))(a1 + 11);
      (*(void (**)(void *, uint64_t))(*v16 + 16))(v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"sendRequest: no remote tag specified, and we have multiple forks", 64);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
LABEL_51:
      *a4 = 0;
      a4[1] = 0;
      return;
    }
    uint64_t v12 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
    long long v9 = (char *)v12[23];
    if ((char)v9 >= 0) {
      uint64_t v13 = v12[23];
    }
    else {
      uint64_t v13 = *((void *)v12 + 1);
    }
    if (v13 == 6)
    {
      if ((v9 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v12, "INVITE", *((void *)v12 + 1))) {
          goto LABEL_52;
        }
      }
      else
      {
        if (!v12[23]) {
          goto LABEL_52;
        }
        uint64_t v14 = "INVITE";
        while (*v12 == *(unsigned __int8 *)v14)
        {
          ++v12;
          ++v14;
          if (!--v9) {
            goto LABEL_53;
          }
        }
      }
    }
    uint64_t v18 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
    long long v9 = (char *)v18[23];
    if ((char)v9 >= 0) {
      uint64_t v19 = v18[23];
    }
    else {
      uint64_t v19 = *((void *)v18 + 1);
    }
    if (v19 == 9)
    {
      if ((v9 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v18, "SUBSCRIBE", *((void *)v18 + 1))) {
          goto LABEL_52;
        }
      }
      else
      {
        if (!v18[23]) {
          goto LABEL_52;
        }
        char v20 = "SUBSCRIBE";
        while (*v18 == *(unsigned __int8 *)v20)
        {
          ++v18;
          ++v20;
          if (!--v9) {
            goto LABEL_53;
          }
        }
      }
    }
    uint64_t v21 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
    long long v9 = (char *)v21[23];
    if ((char)v9 >= 0) {
      uint64_t v22 = v21[23];
    }
    else {
      uint64_t v22 = *((void *)v21 + 1);
    }
    if (v22 == 7)
    {
      if ((v9 & 0x80) == 0)
      {
        if (v21[23])
        {
          int v23 = "OPTIONS";
          while (*v21 == *(unsigned __int8 *)v23)
          {
            ++v21;
            ++v23;
            if (!--v9) {
              goto LABEL_53;
            }
          }
          goto LABEL_50;
        }
LABEL_52:
        long long v9 = 0;
        goto LABEL_53;
      }
      if (!memcmp(*(const void **)v21, "OPTIONS", *((void *)v21 + 1))) {
        goto LABEL_52;
      }
    }
LABEL_50:
    uint64_t v25 = a1[11];
    long long v24 = a1 + 11;
    uint64_t v26 = (*(uint64_t (**)(void *))(v25 + 56))(v24);
    (*(void (**)(void *, uint64_t))(*v24 + 16))(v24, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"can't send ", 11);
    *(unsigned char *)(v26 + 17) = 0;
    uint64_t v27 = (*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 32))(v26, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)" request without specifying a remote tag", 40);
    *(unsigned char *)(v26 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v26 + 17) = 0;
    goto LABEL_51;
  }
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 256), (void **)a3);
  if (a1 + 257 != v8)
  {
    long long v9 = (char *)v8[7];
    uint64_t v10 = (std::__shared_weak_count *)v8[8];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!v9) {
        goto LABEL_22;
      }
      goto LABEL_25;
    }
    if (v9) {
      goto LABEL_53;
    }
  }
  uint64_t v10 = 0;
LABEL_22:
  *a4 = 0;
  a4[1] = 0;
LABEL_56:
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C553D850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::sendAck(void *a1@<X0>, SipRequest *a2@<X1>, uint64_t a3@<X2>, ImsResult *a4@<X8>)
{
  if (a1[258] != 1)
  {
    uint64_t v10 = 0;
LABEL_7:
    uint64_t v11 = a1 + 11;
    uint64_t v12 = (*(uint64_t (**)(void *))(a1[11] + 56))(a1 + 11);
    (*(void (**)(void *, uint64_t))(*v11 + 16))(a1 + 11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"attempted to send an ACK when we have ", 38);
    *(unsigned char *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" forks", 6);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    long long v9 = 0;
    *(unsigned char *)(v12 + 17) = 0;
    goto LABEL_8;
  }
  uint64_t v8 = a1[256];
  long long v9 = *(SipDialogFork **)(v8 + 56);
  uint64_t v10 = *(atomic_ullong **)(v8 + 64);
  if (v10) {
    atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
  }
  if (!v9) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  v25[0] = v9;
  v25[1] = (SipDialogFork *)v10;
  if (v10) {
    atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
  }
  SipDialog::fillCommonRequestHeaders((uint64_t)&v26, (uint64_t)a1, a2, v25);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
  }
  if ((*(unsigned int (**)(void, void))(**((void **)&v26 + 1) + 24))(*((void *)&v26 + 1), v27))
  {
    uint64_t v14 = a1[11];
    uint64_t v13 = a1 + 11;
    uint64_t v15 = (unsigned char *)(*(uint64_t (**)(void *))(v14 + 56))(v13);
    (*(void (**)(void *, unsigned char *))(*v13 + 16))(v13, v15);
    (*(void (**)(long long *, unsigned char *))(v26 + 16))(&v26, v15);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v15[17] = 0;
    ImsResult::ImsResult((uint64_t)a4, (uint64_t)&v26);
  }
  else
  {
    uint64_t v16 = SipMessage::header<SipCSeqHeader>(*(void *)(*(void *)a3 + 296));
    if (v16) {
      int v17 = v16[15];
    }
    else {
      int v17 = 0;
    }
    SipRequest::setCSeq(a2, v17);
    uint64_t v18 = *(std::__shared_weak_count **)(*(void *)a3 + 88);
    if (v18)
    {
      uint64_t v19 = *(void *)(*(void *)a3 + 80);
      atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      char v20 = std::__shared_weak_count::lock(v18);
      if (!v20) {
        uint64_t v19 = 0;
      }
      std::__shared_weak_count::__release_weak(v18);
    }
    else
    {
      char v20 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v21 = (SipTransactionLayer *)SipUserAgent::transactionLayer(*(SipUserAgent **)(a1[27] + 136));
    uint64_t v22 = v21;
    uint64_t v23 = v19;
    long long v24 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipTransactionLayer::updateViaHeaderForRequest(v21, a2);
    SipTransportLayer::sendMessage(*((void *)v22 + 17), a2, &v23, 0, a4);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  ImsResult::~ImsResult((ImsResult *)&v26);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
  }
}

void sub_1C553DBF0(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  ImsResult::~ImsResult((ImsResult *)va);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

void SipDialog::sendResponse(std::string *__str@<X4>, std::__shared_weak_count *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, int a5@<W3>, ImsResult *a6@<X8>)
{
  uint64_t v12 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v10, 0, sizeof(v10));
  SipResponse::SipResponse((uint64_t)v10, a5, __str, (uint64_t)a2[9].__vftable[3].__on_zero_shared + 288);
  SipDialog::sendResponse(a2, a3, a4, (uint64_t)v10, a6);
  *(void *)&v10[0] = &unk_1F20DD488;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  SipMessage::~SipMessage((SipMessage *)v10);
}

void sub_1C553DD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

BOOL SipDialog::remoteSideAllowsEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 1880);
  int v3 = (void *)(a1 + 1888);
  if (v2 == (void *)(a1 + 1888)) {
    return 0;
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v4 = (const char *)a2;
  }
  else {
    uint64_t v4 = *(const char **)a2;
  }
  do
  {
    if (*((char *)v2 + 55) >= 0) {
      uint64_t v5 = (const char *)(v2 + 4);
    }
    else {
      uint64_t v5 = (const char *)v2[4];
    }
    int v6 = strcasecmp(v4, v5);
    BOOL result = v6 == 0;
    if (!v6) {
      break;
    }
    uint64_t v8 = (void *)v2[1];
    if (v8)
    {
      do
      {
        long long v9 = v8;
        uint64_t v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        long long v9 = (void *)v2[2];
        BOOL v10 = *v9 == (void)v2;
        uint64_t v2 = v9;
      }
      while (!v10);
    }
    uint64_t v2 = v9;
  }
  while (v9 != v3);
  return result;
}

BOOL SipDialog::remoteSideAllows(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 1904);
  int v3 = (void *)(a1 + 1912);
  if (v2 != (void *)(a1 + 1912))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v4 = (const char *)a2;
    }
    else {
      uint64_t v4 = *(const char **)a2;
    }
    while (1)
    {
      uint64_t v5 = *((char *)v2 + 55) >= 0 ? (const char *)(v2 + 4) : (const char *)v2[4];
      if (!strcasecmp(v5, v4)) {
        break;
      }
      int v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
      if (v7 == v3)
      {
        uint64_t v2 = v3;
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void *SipDialog::printSubscriptions(void *this, ImsOutStream *a2, int a3)
{
  if (this[252])
  {
    int v3 = (void *)this[250];
    uint64_t v4 = this + 251;
    if (v3 != this + 251)
    {
      do
      {
        uint64_t v7 = (SipSubscription **)v3[7];
        BOOL v8 = (SipSubscription **)v3[8];
        while (v7 != v8)
        {
          long long v9 = *v7;
          v7 += 2;
          SipSubscription::printSubscriptionInfo(v9, a2, a3);
          this = (void *)(*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *((unsigned char *)a2 + 17) = 0;
        }
        BOOL v10 = (void *)v3[1];
        if (v10)
        {
          do
          {
            uint64_t v11 = v10;
            BOOL v10 = (void *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            uint64_t v11 = (void *)v3[2];
            BOOL v12 = *v11 == (void)v3;
            int v3 = v11;
          }
          while (!v12);
        }
        int v3 = v11;
      }
      while (v11 != v4);
    }
  }
  return this;
}

ImsOutStream *SipDialog::printDialogInfo(const std::string *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  MO/MT:           ", 19);
  *((unsigned char *)a2 + 17) = 0;
  if (this[80].__r_.__value_.__s.__data_[8]) {
    uint64_t v4 = "MO";
  }
  else {
    uint64_t v4 = "MT";
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)v4, 2);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Call ID:         ", 19);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(const std::string *, ImsOutStream *))(this[63].__r_.__value_.__r.__words[0] + 16))(this + 63, a2);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Conversation ID:         ", 27);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(std::string::value_type *, ImsOutStream *))(this[67].__r_.__value_.__r.__words[2] + 16))(&this[67].__r_.__value_.__s.__data_[16], a2);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Contribution ID:         ", 27);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(const std::string *, ImsOutStream *))(this[70].__r_.__value_.__r.__words[0] + 16))(this + 70, a2);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if ((this[74].__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
  {
    if (!this[74].__r_.__value_.__s.__data_[15]) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (this[74].__r_.__value_.__r.__words[0])
  {
LABEL_6:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  In-Reply-To Contribution ID:         ", 39);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(std::string::value_type *, ImsOutStream *))(this[72].__r_.__value_.__l.__size_ + 16))(&this[72].__r_.__value_.__s.__data_[8], a2);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
LABEL_7:
  if ((this[67].__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
  {
    if (!this[67].__r_.__value_.__s.__data_[15]) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (this[67].__r_.__value_.__r.__words[0])
  {
LABEL_9:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Session ID:      ", 19);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(std::string::value_type *, ImsOutStream *))(this[65].__r_.__value_.__l.__size_ + 16))(&this[65].__r_.__value_.__s.__data_[8], a2);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
LABEL_10:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Remote URI:      ", 19);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(std::string::value_type *, ImsOutStream *))(this[9].__r_.__value_.__r.__words[2] + 40))(&this[9].__r_.__value_.__s.__data_[16], a2);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (this[26].__r_.__value_.__r.__words[2])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Sender identity: ", 19);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(std::string::size_type, ImsOutStream *))(*(void *)this[26].__r_.__value_.__r.__words[2]
                                                                   + 40))(this[26].__r_.__value_.__r.__words[2], a2);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
  if ((SHIBYTE(this[27].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)&this[27].__r_.__value_.__s + 23)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (this[27].__r_.__value_.__l.__size_)
  {
LABEL_14:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Sender name:     ", 19);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, const std::string *))(*(void *)a2 + 32))(a2, this + 27);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
LABEL_15:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Local tag:       ", 19);
  *((unsigned char *)a2 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v27, this + 45);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 56))(a2, v27);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (v30 < 0) {
    operator delete(__p);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  std::string::size_type size = (std::string::size_type *)this[85].__r_.__value_.__l.__size_;
  if (size != &this[85].__r_.__value_.__r.__words[2])
  {
    do
    {
      std::string::size_type v7 = size[7];
      int v6 = (std::__shared_weak_count *)size[8];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Fork ", 7);
      *((unsigned char *)a2 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v27, (const std::string *)(v7 + 152));
      (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 56))(a2, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)":", 1);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (v30 < 0) {
        operator delete(__p);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      SipDialogFork::printForkInfo((SipDialogFork *)v7, a2);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      BOOL v8 = (SipDialog *)size[1];
      if (v8)
      {
        do
        {
          long long v9 = v8;
          BOOL v8 = *(SipDialog **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          long long v9 = (SipDialog *)size[2];
          BOOL v10 = *(void *)v9 == (void)size;
          std::string::size_type size = (std::string::size_type *)v9;
        }
        while (!v10);
      }
      std::string::size_type size = (std::string::size_type *)v9;
    }
    while (v9 != (SipDialog *)&this[85].__r_.__value_.__r.__words[2]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Client txns:    ", 18);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v11 = (std::string::size_type *)this[82].__r_.__value_.__l.__size_;
  if (v11 != &this[82].__r_.__value_.__r.__words[2])
  {
    while (1)
    {
      std::string::size_type v13 = v11[7];
      BOOL v12 = (std::__shared_weak_count *)v11[8];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    ", 4);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(void **__return_ptr, std::string::size_type))(*(void *)v13 + 152))(v27, v13);
      (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
      *((unsigned char *)a2 + 17) = 0;
      uint64_t v14 = (*(uint64_t (**)(std::string::size_type))(*(void *)v13 + 24))(v13);
      uint64_t v15 = (const std::string *)(*(uint64_t (**)(std::string::size_type, uint64_t))(*(void *)v13 + 16))(v13, v14);
      LoggableString::LoggableString(&v31, v15);
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v31);
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (v28 < 0) {
        break;
      }
      if (v12) {
        goto LABEL_41;
      }
LABEL_42:
      uint64_t v16 = (SipDialog *)v11[1];
      if (v16)
      {
        do
        {
          int v17 = v16;
          uint64_t v16 = *(SipDialog **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          int v17 = (SipDialog *)v11[2];
          BOOL v10 = *(void *)v17 == (void)v11;
          uint64_t v11 = (std::string::size_type *)v17;
        }
        while (!v10);
      }
      uint64_t v11 = (std::string::size_type *)v17;
      if (v17 == (SipDialog *)&this[82].__r_.__value_.__r.__words[2]) {
        goto LABEL_51;
      }
    }
    operator delete(v27[0]);
    if (!v12) {
      goto LABEL_42;
    }
LABEL_41:
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    goto LABEL_42;
  }
LABEL_51:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Server txns:    ", 18);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v18 = (std::string::size_type *)this[81].__r_.__value_.__l.__size_;
  uint64_t v19 = &this[81].__r_.__value_.__s.__data_[16];
  if (v18 != &this[81].__r_.__value_.__r.__words[2])
  {
    while (1)
    {
      std::string::size_type v21 = v18[7];
      char v20 = (std::__shared_weak_count *)v18[8];
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    ", 4);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(void **__return_ptr, std::string::size_type))(*(void *)v21 + 160))(v27, v21);
      (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
      *((unsigned char *)a2 + 17) = 0;
      uint64_t v22 = (*(uint64_t (**)(std::string::size_type))(*(void *)v21 + 24))(v21);
      uint64_t v23 = (const std::string *)(*(uint64_t (**)(std::string::size_type, uint64_t))(*(void *)v21 + 16))(v21, v22);
      LoggableString::LoggableString(&v31, v23);
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v31);
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (v28 < 0) {
        break;
      }
      if (v20) {
        goto LABEL_58;
      }
LABEL_59:
      long long v24 = (std::string::size_type *)v18[1];
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          long long v24 = (std::string::size_type *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          uint64_t v25 = (std::string::size_type *)v18[2];
          BOOL v10 = *v25 == (void)v18;
          uint64_t v18 = v25;
        }
        while (!v10);
      }
      uint64_t v18 = v25;
      if (v25 == (std::string::size_type *)v19) {
        return a2;
      }
    }
    operator delete(v27[0]);
    if (!v20) {
      goto LABEL_59;
    }
LABEL_58:
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    goto LABEL_59;
  }
  return a2;
}

void sub_1C553EB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void SipDialog::handleAuthChallengeResponse(SipDialog *this, const SipAuthInfo *a2)
{
  if (*((void *)this + 242))
  {
    SipDialog::resetIfNecessary(this);
    uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 11) + 64))((char *)this + 88);
    (*(void (**)(char *, uint64_t))(*((void *)this + 11) + 16))((char *)this + 88, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"resending ", 10);
    *(unsigned char *)(v3 + 17) = 0;
    uint64_t v4 = (const std::string *)(*(uint64_t (**)(void))(**((void **)this + 242) + 112))(*((void *)this + 242));
    LoggableString::LoggableString(&v11, v4);
    (*(void (**)(uint64_t, std::string *))(*(void *)v3 + 40))(v3, &v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" request with auth info", 23);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    uint64_t v5 = (SipRequest *)*((void *)this + 242);
    *((void *)this + 242) = 0;
    SipAuthClient::addAuthorizationToRequest(*(SipAuthClient **)(*(void *)(*((void *)this + 27) + 136) + 280), v5, 1, (uint64_t)v10);
    ImsResult::~ImsResult((ImsResult *)v10);
    std::string::basic_string[abi:ne180100]<0>(&v11, (char *)&str_21_5);
    SipDialog::sendRequest(this, v5, (uint64_t)&v11, &v8);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (v5) {
      (*(void (**)(SipRequest *))(*(void *)v5 + 8))(v5);
    }
  }
  else
  {
    int v6 = (char *)this + 88;
    uint64_t v7 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((void *)this + 11) + 56))((char *)this + 88, a2);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"received an auth response with no pending request", 49);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
  }
}

void sub_1C553EE98(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 33) < 0) {
    operator delete(*(void **)(v1 - 56));
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipDialog::handleAuthChallengeResponse(SipDialog *this, const SipAuthInfo *a2)
{
}

uint64_t SipDialog::handleAuthChallengeTimeout(SipDialog *this, const SipAuthInfo *a2)
{
  if (*((void *)this + 242))
  {
    uint64_t v3 = *((void *)this + 232);
    if (v3)
    {
      uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 184);
      return v4();
    }
    else
    {
      return SipDialog::forceDeinitialization(this);
    }
  }
  else
  {
    int v6 = (char *)this + 88;
    uint64_t v7 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((void *)this + 11) + 56))((char *)this + 88, a2);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"received an auth timeout with no pending request", 48);
    *(unsigned char *)(v7 + 17) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
  }
  return result;
}

uint64_t non-virtual thunk to'SipDialog::handleAuthChallengeTimeout(SipDialog *this, const SipAuthInfo *a2)
{
  return SipDialog::handleAuthChallengeTimeout((SipDialog *)((char *)this - 192), a2);
}

void SipDialog::checkTimers(SipDialog *this)
{
  if (*((void *)this + 252))
  {
    uint64_t v7 = 0;
    v8[0] = 0;
    v8[1] = 0;
    std::map<std::string,std::vector<std::shared_ptr<SipSubscription>>>::map[abi:ne180100]((uint64_t *)&v7, (uint64_t)this + 2000);
    uint64_t v1 = v7;
    if (v7 != v8)
    {
      do
      {
        uint64_t v2 = (SipSubscription **)v1[7];
        uint64_t v3 = (SipSubscription **)v1[8];
        while (v2 != v3)
        {
          SipSubscription::checkTimers(*v2);
          v2 += 2;
        }
        uint64_t v4 = v1[1];
        if (v4)
        {
          do
          {
            uint64_t v5 = (void **)v4;
            uint64_t v4 = (void *)*v4;
          }
          while (v4);
        }
        else
        {
          do
          {
            uint64_t v5 = (void **)v1[2];
            BOOL v6 = *v5 == v1;
            uint64_t v1 = v5;
          }
          while (!v6);
        }
        uint64_t v1 = v5;
      }
      while (v5 != v8);
    }
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy((uint64_t)&v7, v8[0]);
  }
}

void sub_1C553F0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t SipDialog::determineIncomingMessageCategory(SipDialog *this, const SipRequest *a2, const SipResponse *a3)
{
  uint64_t v7 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
  uint64_t v8 = v7[23];
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = v7[23];
  }
  else {
    uint64_t v9 = *((void *)v7 + 1);
  }
  if (v9 != 3) {
    goto LABEL_19;
  }
  if ((v8 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v7, &SipRequest::kMethodAck, *((void *)v7 + 1))) {
      goto LABEL_12;
    }
LABEL_19:
    BOOL v12 = (void **)SipMessage::header<SipEventHeader>((uint64_t)a2);
    uint64_t v3 = v12;
    if (v12)
    {
      uint64_t v16 = 0;
      int v17 = 0;
      std::string::size_type v13 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v12 + 9), (void **)&kParameterId);
      if (v3 + 10 == v13) {
        uint64_t v14 = &ims::kEmptyString;
      }
      else {
        uint64_t v14 = (long long *)(v13 + 7);
      }
      SipDialog::subscriptionForEvent((uint64_t)this, v3 + 13, v14, &v16);
      if (v16) {
        LOBYTE(vIMSCallOptions::~IMSCallOptions(this + 3) = SipSubscription::determineIncomingMessageCategory(v16, a2, (unint64_t)a3);
      }
      else {
        LOBYTE(vIMSCallOptions::~IMSCallOptions(this + 3) = 0;
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
    }
    return v3;
  }
  if (v7[23])
  {
    BOOL v10 = &SipRequest::kMethodAck;
    while (*v7 == *(unsigned __int8 *)v10)
    {
      ++v7;
      BOOL v10 = (long long *)((char *)v10 + 1);
      if (!--v8) {
        goto LABEL_12;
      }
    }
    goto LABEL_19;
  }
LABEL_12:
  uint64_t v16 = 0;
  int v17 = 0;
  SipDialog::sipSession(this, &v16);
  std::string v11 = v16;
  if (v16)
  {
    if (*((unsigned char *)v16 + 1352)) {
      LOBYTE(vIMSCallOptions::~IMSCallOptions(this + 3) = 3;
    }
    else {
      LOBYTE(vIMSCallOptions::~IMSCallOptions(this + 3) = 2;
    }
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (!v11) {
    goto LABEL_19;
  }
  return v3;
}

void sub_1C553F25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, long long **a3)
{
  BOOL v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v5;
      BOOL v10 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v8;
      uint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0) {
      break;
    }
    uint64_t v7 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  std::string v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    BOOL v12 = *a3;
    uint64_t v19 = 0;
    std::string::size_type v13 = (uint64_t *)operator new(0x48uLL);
    v18[0] = v13;
    v18[1] = v6;
    uint64_t v14 = (std::string *)(v13 + 4);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v15 = *v12;
      v13[6] = *((void *)v12 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    v13[7] = 0;
    v13[8] = 0;
    LOBYTE(v19) = 1;
    *std::string::size_type v13 = 0;
    v13[1] = 0;
    uint64_t v13[2] = (uint64_t)v8;
    *uint64_t v7 = v13;
    uint64_t v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      std::string::size_type v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    std::string v11 = (uint64_t *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1C553F664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::map<std::string,std::vector<std::shared_ptr<SipSubscription>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<std::shared_ptr<SipSubscription>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1C553F768(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::shared_ptr<SipSubscription>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>> const&>(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v11 = 0;
  BOOL v12 = 0;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>> const&>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  uint64_t result = std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((unsigned char *)a3 + 1ims::StackConfig::~StackConfig(this + 6) = 1;
  return result;
}

void sub_1C553F90C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  uint64_t v6 = (char *)*((void *)a2 + 3);
  uint64_t v5 = (char *)*((void *)a2 + 4);
  uint64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<BambiCallAction>>>(v7 >> 4);
    uint64_t v9 = 0;
    this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v8[2 * v10];
    uint64_t v11 = v8;
    do
    {
      void *v11 = *(void *)v6;
      uint64_t v12 = *((void *)v6 + 1);
      v11[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      v9 += 2;
      v6 += 16;
      v11 += 2;
    }
    while (v6 != v5);
    this[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v8[v9];
  }
  return this;
}

void sub_1C553FA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  _Unwind_Resume(a1);
}

uint64_t *VZWRegistrationPolicy::VZWRegistrationPolicy(uint64_t *a1, std::__shared_weak_count **a2)
{
  a1[13] = (uint64_t)&unk_1F20B2FA8;
  uint64_t v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  DefaultRegistrationPolicy::DefaultRegistrationPolicy(a1, (uint64_t *)&off_1F20D9CF0, v5);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = (uint64_t)&unk_1F20D9A38;
  a1[13] = (uint64_t)&unk_1F20D9C98;
  a1[23] = (uint64_t)&unk_1F20D9CE0;
  return a1;
}

void sub_1C553FB10(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL VZWRegistrationPolicy::useNextProxyOnRegistrationChange(VZWRegistrationPolicy *this)
{
  return *((void *)this + 59) == *((void *)this + 58);
}

void VZWRegistrationPolicy::emergencyRegistrationTimeout(VZWRegistrationPolicy *this)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v14 = &unk_1F20B2680;
  long long v15 = &_bambiDomain;
  int v16 = 1073741830;
  uint64_t v2 = *((void *)this + 55);
  if (v2) {
    BOOL v3 = v2 == *((void *)this + 56);
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    ImsResult::operator=(v2 + 480 * *((void *)this + 58) + 408, (uint64_t)&v14);
  }
  ImsResult::~ImsResult((ImsResult *)&v14);
  SipRegistrationPolicy::clearAllThrottling((ims **)this);
  uint64_t v4 = (*(uint64_t (**)(VZWRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(VZWRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"emergency registration timed out for current proxy", 50);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v5 = (ImsOutStream *)(*(uint64_t (**)(VZWRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(VZWRegistrationPolicy *, ImsOutStream *))(*(void *)this + 16))(this, v5);
  SipRegistrationPolicy::printProxyErrors((uint64_t)this, v5, 2);
  if ((*(unsigned int (**)(VZWRegistrationPolicy *, void, uint64_t))(*(void *)this + 416))(this, 0, 200))
  {
    (*(void (**)(VZWRegistrationPolicy *))(*(void *)this + 504))(this);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 48);
    if (v6)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *((void *)this + 47);
        if (v9) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 40))(v9, 200);
        }
LABEL_15:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
  else
  {
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 48);
    if (v10)
    {
      uint64_t v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        uint64_t v8 = v11;
        uint64_t v12 = *((void *)this + 47);
        if (v12)
        {
          long long v17 = 0u;
          long long v18 = 0u;
          long long v19 = 0u;
          uint64_t v14 = &unk_1F20B2680;
          long long v15 = &_bambiDomain;
          int v16 = 1073741842;
          uint64_t v13 = ImsResult::operator<<<char [31]>((uint64_t)&v14, "Emergency registration timeout");
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 88))(v12, v13);
          ImsResult::~ImsResult((ImsResult *)&v14);
        }
        goto LABEL_15;
      }
    }
  }
}

void sub_1C553FE50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t VZWRegistrationPolicy::handleRegistrationError(VZWRegistrationPolicy *this, const SipResponse *a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  SipResultDomain::makeResult(a2, (uint64_t)v7);
  if ((*(unsigned int (**)(VZWRegistrationPolicy *))(*(void *)this + 528))(this))
  {
    if (!(*(unsigned int (**)(VZWRegistrationPolicy *, void, uint64_t))(*(void *)this + 416))(this, 0, 200)|| !*((unsigned char *)this + 228))
    {
      uint64_t v5 = -1;
      goto LABEL_8;
    }
    time_t v4 = SipRegistrationPolicy::handleGeneralError(this, (const ImsResult *)v7);
  }
  else
  {
    time_t v4 = SipRegistrationPolicy::handleRegistrationError((ims **)this, a2);
  }
  uint64_t v5 = v4;
LABEL_8:
  ImsResult::~ImsResult((ImsResult *)v7);
  return v5;
}

void sub_1C553FF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

time_t VZWRegistrationPolicy::handleGeneralErrorFromOneProxy(VZWRegistrationPolicy *this, const ImsResult *a2)
{
  int v4 = (*(uint64_t (**)(VZWRegistrationPolicy *))(*(void *)this + 528))(this);
  uint64_t v5 = (*(uint64_t (**)(VZWRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(VZWRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v5);
  if (v4)
  {
    SipRegistrationPolicy::printProxyErrors((uint64_t)this, (ImsOutStream *)v5, 2);
    if ((*(unsigned int (**)(VZWRegistrationPolicy *, void, uint64_t))(*(void *)this + 416))(this, 0, 200))
    {
      int v6 = (*(uint64_t (**)(VZWRegistrationPolicy *))(*(void *)this + 328))(this);
      return SipRegistrationPolicy::scheduleRetry(this, a2, 0, v6);
    }
    else
    {
      return -1;
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleGeneralErrorFromOneProxy: getting from policy SipRegClientRegType::", 73);
    *(unsigned char *)(v5 + 17) = 0;
    SipRegistrationPolicy::getClientRegTypeStr(this, __p);
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (*((_DWORD *)this + 589) != 2)
    {
      uint64_t v8 = (*(uint64_t (**)(VZWRegistrationPolicy *))(*(void *)this + 64))(this);
      (*(void (**)(VZWRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"handle result.code ", 19);
      *(unsigned char *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (*((_DWORD *)a2 + 4) == 482)
      {
        uint64_t v9 = (*(uint64_t (**)(VZWRegistrationPolicy *))(*(void *)this + 64))(this);
        (*(void (**)(VZWRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"need to switch proxy", 20);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v9 + 17) = 0;
        *((unsigned char *)this + 228) = 1;
      }
    }
    return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
  }
}

void sub_1C5540340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VZWRegistrationPolicy::handleGeneralErrorFromAllProxies(VZWRegistrationPolicy *this, const ImsResult *a2)
{
  int v4 = (const std::string *)*((void *)this + 55);
  uint64_t v5 = (const std::string *)*((void *)this + 56);
  for (BOOL i = *((unsigned char *)this + 2153) != 0; v4 != v5; v4 += 20)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    memset(v10, 0, sizeof(v10));
    SipUri::SipUri((SipUri *)v10, (const SipUri *)v4);
    ImsResult::ImsResult((ImsResult *)((char *)&v11 + 8), v4 + 17);
    if ((uint64_t *)v12 != &SipResultDomain::_domain
      || !SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)this + 1968, (void **)"REGISTER", WORD4(v12), 0))
    {
      BOOL i = 0;
    }
    ImsResult::~ImsResult((ImsResult *)((char *)&v11 + 8));
    SipUri::~SipUri((SipUri *)v10);
  }
  uint64_t v7 = *(void *)this;
  if (!i) {
    return (*(uint64_t (**)(VZWRegistrationPolicy *, const ImsResult *))(v7 + 144))(this, a2);
  }
  uint64_t v8 = (*(uint64_t (**)(VZWRegistrationPolicy *))(v7 + 48))(this);
  (*(void (**)(VZWRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Timing out registration due to error responses from all proxies.", 64);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  return -1;
}

void sub_1C554055C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ImsResult::~ImsResult(v9);
  SipUri::~SipUri((SipUri *)&a9);
  _Unwind_Resume(a1);
}

uint64_t VZWRegistrationPolicy::generalErrorRetryInterval(VZWRegistrationPolicy *this)
{
  if ((*(uint64_t (**)(VZWRegistrationPolicy *))(*(void *)this + 528))(this)) {
    return 0;
  }
  return DefaultRegistrationPolicy::generalErrorRetryInterval(this);
}

uint64_t VZWRegistrationPolicy::isTransactionRetryAllowed(VZWRegistrationPolicy *this)
{
  return (*(unsigned int (**)(VZWRegistrationPolicy *))(*(void *)this + 528))(this) ^ 1;
}

uint64_t VZWRegistrationPolicy::isRegistrationRetryAllowed(SipRegistrationPolicy *a1)
{
  if (!(*(unsigned int (**)(SipRegistrationPolicy *))(*(void *)a1 + 528))(a1)
    || 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)a1 + 56) - *((void *)a1 + 55)) >> 5) != SipRegistrationPolicy::countOfProxiesWithErrors(a1))
  {
    return 1;
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)a1 + 280) + 16);
  return v2();
}

void VZWRegistrationPolicy::onInterfaceChanged(ims **this)
{
  uint64_t v2 = (*((uint64_t (**)(ims **))*this + 8))(this);
  (*((void (**)(ims **, uint64_t))*this + 2))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Network interface changed. Clearing throttling, failure flags and resetting proxy offset.", 89);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  (*((void (**)(ims **))*this + 24))(this);
  SipRegistrationPolicy::clearAllThrottling(this);
  SipRegistrationPolicy::setProxyOffset((SipRegistrationPolicy *)this, 0);
}

void VZWRegistrationPolicy::onProxyListChanged(uint64_t a1, const SipUri *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Proxy list changed.  Clearing throttling and resetting proxy offset...", 70);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  SipRegistrationPolicy::clearAllThrottling((ims **)a1);
  if (!*((unsigned char *)a2 + 408)) {
    goto LABEL_6;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"In the current (old) proxy list, current proxy is #", 51);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" (", 2);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(const SipUri *, uint64_t))(*(void *)a2 + 40))(a2, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t v6 = *(void *)(a1 + 440);
  if (*(void *)(a1 + 448) == v6)
  {
LABEL_6:
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Continue to resetProxyOffset()...", 33);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    SipRegistrationPolicy::setProxyOffset((SipRegistrationPolicy *)a1, 0);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    while ((SipUri::equals((SipUri *)(v6 + v7), a2, 1) & 1) == 0)
    {
      ++v8;
      uint64_t v6 = *(void *)(a1 + 440);
      v7 += 480;
      if (v8 >= 0xEEEEEEEEEEEEEEEFLL * ((*(void *)(a1 + 448) - v6) >> 5)) {
        goto LABEL_6;
      }
    }
    *(void *)(a1 + 464) = v8;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"In the up-to-date (new) proxy list, current proxy is now #", 58);
    *(unsigned char *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(const SipUri *, uint64_t))(*(void *)a2 + 40))(a2, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
  }
}

void VZWRegistrationPolicy::handleDeviceEvents(VZWRegistrationPolicy *this, __int16 a2)
{
}

uint64_t VZWRegistrationPolicy::handleWarningHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  uint64_t v3 = *(void *)(a2 + 72);
  if (v2 == v3) {
    return 0;
  }
  if (byte_1EBBDC477 >= 0) {
    uint64_t v5 = (const char *)&_MergedGlobals_24;
  }
  else {
    uint64_t v5 = (const char *)_MergedGlobals_24;
  }
  if (byte_1EBBDC48F >= 0) {
    uint64_t v6 = (const char *)&qword_1EBBDC478;
  }
  else {
    uint64_t v6 = (const char *)qword_1EBBDC478;
  }
  if (byte_1EBBDC4A7 >= 0) {
    uint64_t v7 = (const char *)&qword_1EBBDC490;
  }
  else {
    uint64_t v7 = (const char *)qword_1EBBDC490;
  }
  if (byte_1EBBDC4BF >= 0) {
    unint64_t v8 = (const char *)&qword_1EBBDC4A8;
  }
  else {
    unint64_t v8 = (const char *)qword_1EBBDC4A8;
  }
  uint64_t v9 = v2 + 32;
  uint64_t v10 = (const char *)&SipRegistrationPolicy::kThumperErrorUnauthorized;
  while (1)
  {
    if (*(_DWORD *)(v9 - 32) == 399)
    {
      if (*(char *)(v9 + 23) >= 0) {
        long long v11 = (const char *)v9;
      }
      else {
        long long v11 = *(const char **)v9;
      }
      if (!strcasecmp(v11, v5) || !strcasecmp(v11, v6)) {
        goto LABEL_27;
      }
      if (!strcasecmp(v11, v7))
      {
        uint64_t v10 = "MDN Does Not Exist";
        goto LABEL_27;
      }
      if (!strcasecmp(v11, v8)) {
        break;
      }
    }
    uint64_t v12 = v9 + 24;
    v9 += 56;
    if (v12 == v3) {
      return 0;
    }
  }
  uint64_t v10 = "Account Suspended";
LABEL_27:
  long long v14 = *(std::__shared_weak_count **)(a1 + 384);
  if (v14)
  {
    long long v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      int v16 = v15;
      uint64_t v17 = *(void *)(a1 + 376);
      if (v17) {
        (*(void (**)(uint64_t, const char *))(*(void *)v17 + 72))(v17, v10);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  return 1;
}

void sub_1C5540E28(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t VZWRegistrationPolicy::allowNotificationsInLimitedAccess(VZWRegistrationPolicy *this)
{
  return 1;
}

void VZWRegistrationPolicy::~VZWRegistrationPolicy(VZWRegistrationPolicy *this)
{
}

{
  uint64_t vars8;

  DefaultRegistrationPolicy::~DefaultRegistrationPolicy(this, (uint64_t *)&off_1F20D9CF0);
  JUMPOUT(0x1C878E320);
}

char *VZWRegistrationPolicy::name(VZWRegistrationPolicy *this)
{
  return &VZWRegistrationPolicy::kPolicyName;
}

void non-virtual thunk to'VZWRegistrationPolicy::~VZWRegistrationPolicy(VZWRegistrationPolicy *this)
{
}

{
  uint64_t vars8;

  DefaultRegistrationPolicy::~DefaultRegistrationPolicy((VZWRegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1F20D9CF0);
  JUMPOUT(0x1C878E320);
}

uint64_t _GLOBAL__sub_I_VZWRegistrationPolicy_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&_MergedGlobals_24, "Authentication failure: 5");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  __cxa_atexit(MEMORY[0x1E4FBA210], &_MergedGlobals_24, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC478, "Authentication failure: 6");
  __cxa_atexit(v0, &qword_1EBBDC478, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC490, "Authentication failure: 16");
  __cxa_atexit(v0, &qword_1EBBDC490, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC4A8, "Authentication failure: 19");
  return __cxa_atexit(v0, &qword_1EBBDC4A8, &dword_1C51D1000);
}

void SipAkaAuthResponse::SipAkaAuthResponse(SipAkaAuthResponse *this, SipAkaDigestAuthScheme *a2)
{
  *(_OWORD *)((char *)this + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F20DA330;
  if (!a2) {
    operator new();
  }
  *((void *)this + 8) = a2;
}

void sub_1C5541054(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v2, 0x10B3C4074E51C00);
  SipAuthResponse::~SipAuthResponse(v1);
  _Unwind_Resume(a1);
}

void SipAkaAuthResponse::SipAkaAuthResponse(SipAkaAuthResponse *this, const SipAkaAuthChallenge *a2)
{
  *(void *)SipAuthResponse::SipAuthResponse((uint64_t)this, (uint64_t)a2) = &unk_1F20DA330;
  uint64_t v4 = (*(uint64_t (**)(const SipAkaAuthChallenge *))(*(void *)a2 + 32))(a2);
  *((void *)this + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
}

void sub_1C5541120(_Unwind_Exception *a1)
{
  SipAuthResponse::~SipAuthResponse(v1);
  _Unwind_Resume(a1);
}

void SipAkaAuthResponse::~SipAkaAuthResponse(SipAkaAuthResponse *this)
{
  *(void *)this = &unk_1F20DA330;
  uint64_t v2 = *((void *)this + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  SipAuthResponse::~SipAuthResponse((void **)this);
}

{
  uint64_t vars8;

  SipAkaAuthResponse::~SipAkaAuthResponse(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipAkaAuthResponse::scheme(SipAkaAuthResponse *this)
{
  return *((void *)this + 8);
}

{
  return *((void *)this + 8);
}

uint64_t SipAkaAuthResponse::computeResponse(SipAkaAuthResponse *this, const SipRequest *a2)
{
  return (*(uint64_t (**)(void, const SipRequest *))(**((void **)this + 8) + 136))(*((void *)this + 8), a2);
}

uint64_t SipAkaAuthResponse::computeResponse(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 152))();
}

void SipAkaAuthResponse::result(SipAkaAuthResponse *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 8);
  if (*(unsigned char *)(v3 + 314))
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
    *(_OWORD *)(a2 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  }
  else if (*(unsigned char *)(v3 + 313))
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
    *(_OWORD *)(a2 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 1ims::StackConfig::~StackConfig(this + 6) = 1073741832;
  }
  else
  {
    long long v7 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    v5[0] = &unk_1F20B2680;
    v5[1] = &_bambiDomain;
    int v6 = 0x40000000;
    uint64_t v4 = (const std::string *)ImsResult::operator<<<char [13]>((uint64_t)v5, "Auth failure");
    ImsResult::ImsResult((ImsResult *)a2, v4);
    ImsResult::~ImsResult((ImsResult *)v5);
  }
}

void sub_1C5541368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

BOOL SipAkaAuthResponse::shouldCache(SipAkaAuthResponse *this)
{
  uint64_t v1 = *((void *)this + 8);
  return *(unsigned char *)(v1 + 314) || *(unsigned char *)(v1 + 313) != 0;
}

void SipAkaAuthResponse::clone(SipAkaAuthResponse *this)
{
}

void sub_1C5541430(_Unwind_Exception *a1)
{
  SipAuthResponse::~SipAuthResponse(v1);
  MEMORY[0x1C878E320](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionDriver::MediaSessionDriver(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, ImsPrefs *a6, long long *a7, dispatch_object_t *a8)
{
  long long v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v42 = *a3;
  BOOL v43 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)a5[1];
  uint64_t v40 = *a5;
  long long v41 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MediaSessionInterface::MediaSessionInterface(a1, &v42, a4, &v40, a7, a8);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  SipThreadSafeLockable::SipThreadSafeLockable((SipThreadSafeLockable *)(a1 + 88), a2 + 1);
  uint64_t v13 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 88) = a2[5];
  *(void *)(a1 + *(void *)(v13 - MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::~MediaSessionSRVCCQueue((MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *)((char *)this - 24)) = a2[6];
  *(_DWORD *)(a1 + 232) = 4;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 240));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 40(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 384) = a1 + 392;
  RTCPIntervalSecondsKey = (void **)ImsPrefs::getRTCPIntervalSecondsKey(v14);
  int v16 = (ImsPrefs *)ImsPrefs::intValue(a6, RTCPIntervalSecondsKey);
  *(_DWORD *)(a1 + 408) = v16;
  HoldHeartbeatIntervalSecondsKey = (void **)ImsPrefs::getHoldHeartbeatIntervalSecondsKey(v16);
  long long v18 = (ImsPrefs *)ImsPrefs::intValue(a6, HoldHeartbeatIntervalSecondsKey);
  *(_DWORD *)(a1 + 412) = v18;
  LocalRTCPReportIntervalSecondsKey = (void **)ImsPrefs::getLocalRTCPReportIntervalSecondsKey(v18);
  char v20 = (ImsPrefs *)ImsPrefs::intValue(a6, LocalRTCPReportIntervalSecondsKey);
  *(_DWORD *)(a1 + 41ims::StackConfig::~StackConfig(this + 6) = v20;
  InactivityTimerRTPSecondsKey = (void **)ImsPrefs::getInactivityTimerRTPSecondsKey(v20);
  uint64_t v22 = (ImsPrefs *)ImsPrefs::intValue(a6, InactivityTimerRTPSecondsKey);
  *(_WORD *)(a1 + 42(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = (_WORD)v22;
  InactivityTimerRTCPSecondsKey = (void **)ImsPrefs::getInactivityTimerRTCPSecondsKey(v22);
  long long v24 = (ImsPrefs *)ImsPrefs::intValue(a6, InactivityTimerRTCPSecondsKey);
  *(_WORD *)(a1 + 422) = (_WORD)v24;
  LinkMonitorPreferenceKey = (const ImsPrefsKeyEnum *)ImsPrefs::getLinkMonitorPreferenceKey(v24);
  ImsPrefs::stringValue(a6, LinkMonitorPreferenceKey, (std::string *)(a1 + 424));
  DTMFVolumeKey = (void **)ImsPrefs::getDTMFVolumeKey(v26);
  char v28 = (ImsPrefs *)ImsPrefs::intValue(a6, DTMFVolumeKey);
  *(unsigned char *)(a1 + 448) = (_BYTE)v28;
  DTMFDigitDurationMillisecondsKey = (void **)ImsPrefs::getDTMFDigitDurationMillisecondsKey(v28);
  char v30 = (ImsPrefs *)ImsPrefs::intValue(a6, DTMFDigitDurationMillisecondsKey);
  *(unsigned char *)(a1 + 449) = (_BYTE)v30;
  DTMFInterDigitIntervalMillisecondsKey = (void **)ImsPrefs::getDTMFInterDigitIntervalMillisecondsKey(v30);
  uint64_t v32 = (ImsPrefs *)ImsPrefs::intValue(a6, DTMFInterDigitIntervalMillisecondsKey);
  *(_DWORD *)(a1 + 452) = v32;
  EnableRTCPExtendedReportsKey = (void **)ImsPrefs::getEnableRTCPExtendedReportsKey(v32);
  *(unsigned char *)(a1 + 45ims::StackConfig::~StackConfig(this + 6) = ImsPrefs::BOOLValue(a6, EnableRTCPExtendedReportsKey);
  std::string::basic_string[abi:ne180100]<0>(v38, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v34 = ims::debug((uint64_t)v38, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"MediaSessionDriver", 18);
  *(unsigned char *)(v34 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v34 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v34 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v34 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v34 + 17) = 0;
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  *(void *)(a1 + 344) = a1 + *(void *)(*(void *)a1 - 24);
  return a1;
}

void sub_1C55417D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v24 + 447) < 0) {
    operator delete(*v28);
  }
  std::__tree<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>>>::destroy(*v29);
  SipTimerContainer::~SipTimerContainer(v27);
  SipThreadSafeLockable::~SipThreadSafeLockable(v25, v26);
  MediaSessionInterface::~MediaSessionInterface((void **)v24);
  _Unwind_Resume(a1);
}

void MediaSessionDriver::~MediaSessionDriver(MediaSessionDriver *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  uint64_t v5 = (MediaSessionDriver *)((char *)this + 88);
  *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = a2[5];
  *(void *)((char *)this + *(void *)(v4 - MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::~MediaSessionSRVCCQueue((MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *)((char *)this - 24)) = a2[6];
  std::string::basic_string[abi:ne180100]<0>(v9, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v9, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"~MediaSessionDriver", 19);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  MediaSessionDriver::cancelAllTimers(this);
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  std::__tree<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>>>::destroy(*((void **)this + 49));
  SipTimerContainer::~SipTimerContainer((MediaSessionDriver *)((char *)this + 240));
  SipThreadSafeLockable::~SipThreadSafeLockable(v5, a2 + 1);
  MediaSessionInterface::~MediaSessionInterface((void **)this);
}

void MediaSessionDriver::cancelAllTimers(MediaSessionDriver *this)
{
  std::string::basic_string[abi:ne180100]<0>(v8, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v8, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"cancelAllTimers", 15);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  SipTimerContainer::cancelAllTimers((MediaSessionDriver *)((char *)this + 240));
  std::__tree<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>>>::destroy(*((void **)this + 49));
  *((void *)this + 49) = 0;
  *((void *)this + 5(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *((void *)this + 48) = (char *)this + 392;
}

void sub_1C5541C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionDriver::startTimerForRequest(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v30, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)&v30, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v9 = v8;
  char v10 = *(void **)(v8 + 8);
  size_t v11 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"startTimerForRequest", 20);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"  [requestId=", 13);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" sessionId=", 11);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  memset(&v32, 0, sizeof(v32));
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 240))(&v32, a1, a2);
  uint64_t v13 = *a3;
  uint64_t v12 = (std::__shared_weak_count *)a3[1];
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 248), (unsigned __int8 *)&v32))
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "rtp.driver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::error((uint64_t)&v30, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Timer for request ", 18);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 32))(v14, &v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" already exists.", 16);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    LoggableString::LoggableString((LoggableString *)v24, "rtp.timer");
    uint64_t v16 = *a3;
    uint64_t v15 = a3[1];
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    ImsBlock::ImsBlock(__p, (long long *)v24, a4);
    __p[0] = &unk_1F20CC018;
    uint64_t v28 = v16;
    uint64_t v29 = v15;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v30, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
    }
    else {
      std::string v30 = v32;
    }
    ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::ImsCapturableBlock((ImsBlock *)v31, __p);
    uint64_t v17 = *(char **)(a1 + 392);
    long long v18 = (char **)(a1 + 392);
    long long v19 = (char **)(a1 + 392);
    if (!v17) {
      goto LABEL_27;
    }
    long long v18 = (char **)(a1 + 392);
    while (1)
    {
      while (1)
      {
        long long v19 = (char **)v17;
        char v20 = v17 + 32;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v30, (void **)v17 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v17 = *v19;
        long long v18 = v19;
        if (!*v19) {
          goto LABEL_27;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, (void **)&v30.__r_.__value_.__l.__data_) & 0x80) == 0)break; {
      long long v18 = v19 + 1;
      }
      uint64_t v17 = v19[1];
      if (!v17) {
        goto LABEL_27;
      }
    }
    if (!*v18)
    {
LABEL_27:
      uint64_t v34 = 0;
      std::string::size_type v21 = (char *)operator new(0x70uLL);
      v33[0] = v21;
      v33[1] = a1 + 392;
      *(std::string *)(v21 + 32) = v30;
      memset(&v30, 0, sizeof(v30));
      ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::ImsCapturableBlock((ImsBlock *)(v21 + 56), v31);
      LOBYTE(v34) = 1;
      *(void *)std::string::size_type v21 = 0;
      *((void *)v21 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
      *((void *)v21 + 2) = v19;
      *long long v18 = v21;
      uint64_t v22 = **(void **)(a1 + 384);
      if (v22)
      {
        *(void *)(a1 + 384) = v22;
        std::string::size_type v21 = *v18;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 392), (uint64_t *)v21);
      ++*(void *)(a1 + 400);
      v33[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v33);
    }
    ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::~ImsCapturableBlock((ImsBlock *)v31);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::~ImsCapturableBlock((ImsBlock *)__p);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v36 = 0;
    uint64_t v23 = operator new(0x20uLL);
    *uint64_t v23 = &unk_1F20DA3B0;
    v23[1] = a1;
    v23[2] = v13;
    v23[3] = v12;
    uint64_t v36 = v23;
    SipTimerContainer::startTimer((int8x8_t *)(a1 + 240), (uint64_t)&v32);
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v35);
  }
  if (v12)
  {
    std::__shared_weak_count::__release_weak(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_1C55421D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::~ImsCapturableBlock((ImsBlock *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v44)
  {
    std::__shared_weak_count::__release_weak(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void MediaSessionDriver::cancelTimerForRequest(int8x8_t *this, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v16, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v16, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"cancelTimerForRequest", 21);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"  [requestId=", 13);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" sessionId=", 11);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  memset(&v16, 0, sizeof(v16));
  (*(void (**)(std::string *__return_ptr, int8x8_t *, uint64_t))(*(void *)this + 240))(&v16, this, a2);
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&this[48], (void **)&v16.__r_.__value_.__l.__data_);
  if (&this[49] != (int8x8_t *)v8)
  {
    uint64_t v9 = (uint64_t *)v8;
    SipTimerContainer::cancelTimer(this + 30, &v16);
    std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer((uint64_t **)&this[48], v9);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,0>((uint64_t)(v9 + 4));
    char v10 = v9;
LABEL_8:
    operator delete(v10);
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(v12, "");
  uint64_t v11 = ims::error((uint64_t)__p, (uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"No timer found for request ", 27);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, &v16);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0)
  {
    char v10 = (uint64_t *)__p[0];
    goto LABEL_8;
  }
LABEL_12:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1C5542658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionDriver::handleTimer(uint64_t a1, void **a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 384);
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 384, a2);
  if ((void **)(a1 + 392) != v4)
  {
    uint64_t v5 = (uint64_t *)v4;
    uint64_t v9 = 0;
    long long v8 = 0u;
    memset(v7, 0, sizeof(v7));
    uint64_t v6 = (uint64_t)(v4 + 4);
    ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::ImsCapturableBlock((ImsBlock *)v7, v4 + 7);
    std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer(v3, v5);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,0>(v6);
    operator delete(v5);
    if (*((void *)&v8 + 1))
    {
      if ((void)v8) {
        (*(void (**)(void))(v8 + 16))();
      }
    }
    ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::~ImsCapturableBlock((ImsBlock *)v7);
  }
}

void sub_1C554275C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void MediaSessionDriver::setRTCPInterval(uint64_t a1, uint64_t *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v24, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v24, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"setRTCPInterval", 15);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  long long v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = *a2;
      if (*a2)
      {
        if (!*(unsigned char *)(v10 + 584))
        {
          std::string::basic_string[abi:ne180100]<0>(v24, "rtp.driver");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v14 = ims::error((uint64_t)v24, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"audioSettings is null", 21);
          *(unsigned char *)(v14 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v14 + 17) = 0;
          if (v23 < 0) {
            operator delete(__p[0]);
          }
          if (v25 < 0) {
            operator delete(v24[0]);
          }
          goto LABEL_19;
        }
        uint64_t v11 = *(std::__shared_weak_count **)(v10 + 128);
        if (v11)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v11);
          uint64_t v12 = v11;
          if (v11) {
            uint64_t v11 = *(std::__shared_weak_count **)(v10 + 120);
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        char v15 = (ImsPrefs *)SipStack::prefs((SipStack *)v11);
        EnableRemoteRTCPDeactivationKey = (void **)ImsPrefs::getEnableRemoteRTCPDeactivationKey(v15);
        if (ImsPrefs::BOOLValue(v15, EnableRemoteRTCPDeactivationKey)
          && *(unsigned char *)(v10 + 184)
          && *(unsigned char *)(v10 + 185)
          && !*(void *)(v10 + 208))
        {
          uint64_t v21 = *(void *)(v10 + 216);
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
          if (!v21)
          {
            *(_DWORD *)(a1 + 408) = 0;
LABEL_19:
            std::__shared_weak_count::__release_shared[abi:ne180100](v9);
            return;
          }
        }
        else if (v12)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        uint64_t v17 = *(std::__shared_weak_count **)(v10 + 128);
        if (v17)
        {
          uint64_t v17 = std::__shared_weak_count::lock(v17);
          long long v18 = v17;
          if (v17) {
            uint64_t v17 = *(std::__shared_weak_count **)(v10 + 120);
          }
        }
        else
        {
          long long v18 = 0;
        }
        long long v19 = (ImsPrefs *)SipStack::prefs((SipStack *)v17);
        RTCPIntervalSecondsKey = (void **)ImsPrefs::getRTCPIntervalSecondsKey(v19);
        *(_DWORD *)(a1 + 408) = ImsPrefs::intValue(v19, RTCPIntervalSecondsKey);
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v24, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v13 = ims::error((uint64_t)v24, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"SDPSession expired in MediaSessionDriver::setRTCPInterval", 57);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v9) {
    goto LABEL_19;
  }
}

void sub_1C5542B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,0>(uint64_t a1)
{
  ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::~ImsCapturableBlock((ImsBlock *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

ImsBlock *ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::ImsCapturableBlock(ImsBlock *a1, void *a2)
{
  ImsBlock::ImsBlock(a1, (const LoggableString *)(a2 + 1));
  *uint64_t v4 = &unk_1F20CC018;
  uint64_t v5 = a2[6];
  v4[5] = a2[5];
  v4[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)a2[4];
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  size_t v7 = (const void *)*((void *)a1 + 4);
  *((void *)a1 + 4) = v6;
  if (v7) {
    _Block_release(v7);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void *std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DA3B0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DA3B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20DA3B0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + IMSCallOptions::~IMSCallOptions(this + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20DA3B0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      size_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 232))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5542FD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::target_type()
{
}

void *QMIRTPSession::toTimerIdString@<X0>(int a1@<W1>, void *a2@<X8>)
{
  switch(a1)
  {
    case 'C':
      uint64_t v3 = "SESSION_CONFIGURE";
      break;
    case 'B':
      uint64_t v3 = "SESSION_UNINITIALIZE";
      break;
    case 'A':
      uint64_t v3 = "SESSION_INITIALIZE";
      break;
    default:
      ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()();
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

uint64_t QMIRTPSession::QMIRTPSession(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, ImsPrefs *a5, void *a6, char a7, int a8, long long *a9, dispatch_object_t *a10)
{
  *(void *)(a1 + 112) = &unk_1F20B2FA8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)a1 = &unk_1F20C1128;
  std::string v16 = (std::__shared_weak_count *)a2[1];
  uint64_t v33 = *a2;
  uint64_t v34 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = (std::__shared_weak_count *)a4[1];
  uint64_t v31 = *a4;
  std::string v32 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MediaSessionDriver::MediaSessionDriver(a1 + 24, (uint64_t *)&off_1F20DA698, &v33, a3, &v31, a5, a9, a10);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v34) {
    std::__shared_weak_count::__release_weak(v34);
  }
  *(void *)a1 = &unk_1F20DA470;
  *(void *)(a1 + 24) = &unk_1F20DA530;
  *(void *)(a1 + 112) = &unk_1F20DA658;
  *(_DWORD *)(a1 + 484) = 4;
  *(unsigned char *)(a1 + 488) = a7;
  *(_WORD *)(a1 + 489) = -1;
  *(unsigned char *)(a1 + 495) = 0;
  *(_DWORD *)(a1 + 49bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  long long v18 = (void *)(*a4 + 280);
  long long v19 = (void *)*v18;
  if (!*v18) {
    goto LABEL_20;
  }
  uint64_t v20 = *a4 + 280;
  do
  {
    unint64_t v21 = v19[4];
    BOOL v22 = v21 >= a3;
    if (v21 >= a3) {
      char v23 = v19;
    }
    else {
      char v23 = v19 + 1;
    }
    if (v22) {
      uint64_t v20 = (uint64_t)v19;
    }
    long long v19 = (void *)*v23;
  }
  while (*v23);
  if ((void *)v20 == v18 || *(void *)(v20 + 32) > a3) {
LABEL_20:
  }
    uint64_t v20 = *a4 + 280;
  *(unsigned char *)(a1 + 49ims::StackConfig::~StackConfig(this + 6) = v20 != (void)v18;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)(a1 + 504));
  *(unsigned char *)(a1 + 53ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 544) = *a6;
  uint64_t v24 = a6[1];
  *(void *)(a1 + 552) = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 56(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(unsigned char *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 564) = a8;
  std::string::basic_string[abi:ne180100]<0>(v29, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v25 = ims::debug((uint64_t)v29, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"QMIRTPSession", 13);
  *(unsigned char *)(v25 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v25 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v25 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v25 + 17) = 0;
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  return a1;
}

void sub_1C55433E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  char v28 = *(std::__shared_weak_count **)(v24 + 552);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  qmi::MutableMessageBase::~MutableMessageBase(v26);
  MediaSessionDriver::~MediaSessionDriver(v25, (uint64_t *)&off_1F20DA698);
  uint64_t v29 = *(std::__shared_weak_count **)(v24 + 16);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  _Unwind_Resume(a1);
}

void QMIRTPSession::~QMIRTPSession(QMIRTPSession *this)
{
  *(void *)this = &unk_1F20DA470;
  uint64_t v2 = (QMIRTPSession *)((char *)this + 24);
  *((void *)this + IMSCallOptions::~IMSCallOptions(this + 3) = &unk_1F20DA530;
  *((void *)this + 14) = &unk_1F20DA658;
  std::string::basic_string[abi:ne180100]<0>(v8, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"~QMIRTPSession", 14);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 69);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  qmi::MutableMessageBase::~MutableMessageBase((QMIRTPSession *)((char *)this + 504));
  MediaSessionDriver::~MediaSessionDriver(v2, (uint64_t *)&off_1F20DA698);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  uint64_t vars8;

  QMIRTPSession::~QMIRTPSession(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'QMIRTPSession::~QMIRTPSession(QMIRTPSession *this)
{
}

{
  QMIRTPSession::~QMIRTPSession((QMIRTPSession *)((char *)this - 112));
}

{
  uint64_t vars8;

  QMIRTPSession::~QMIRTPSession((QMIRTPSession *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  QMIRTPSession::~QMIRTPSession((QMIRTPSession *)((char *)this - 112));
  JUMPOUT(0x1C878E320);
}

BOOL QMIRTPSession::active(QMIRTPSession *this)
{
  std::string::basic_string[abi:ne180100]<0>(v24, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v24, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"active", 6);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" activeSessionId=", 17);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = *((void *)this + 68);
  uint64_t v4 = *(void *)(v3 + 48);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 56);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(v4 + 88);
  if (v6)
  {
    do
    {
      if (*(_DWORD *)(v6 + 32) >= *((_DWORD *)this + 141)) {
        char v7 = (uint64_t *)v6;
      }
      else {
        char v7 = (uint64_t *)(v6 + 8);
      }
      uint64_t v6 = *v7;
    }
    while (*v7);
  }
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  uint64_t v8 = *((void *)this + 68);
  uint64_t v10 = *(void *)(v8 + 48);
  char v9 = *(std::__shared_weak_count **)(v8 + 56);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void *)(v10 + 88);
  uint64_t v11 = v10 + 88;
  uint64_t v12 = v13;
  if (!v13) {
    goto LABEL_26;
  }
  int v14 = *((_DWORD *)this + 141);
  uint64_t v15 = v11;
  do
  {
    int v16 = *(_DWORD *)(v12 + 32);
    BOOL v17 = v16 < v14;
    if (v16 >= v14) {
      long long v18 = (uint64_t *)v12;
    }
    else {
      long long v18 = (uint64_t *)(v12 + 8);
    }
    if (!v17) {
      uint64_t v15 = v12;
    }
    uint64_t v12 = *v18;
  }
  while (*v18);
  if (v15 != v11 && *(_DWORD *)(v15 + 32) <= v14) {
    uint64_t v19 = *(void *)(v15 + 40);
  }
  else {
LABEL_26:
  }
    uint64_t v19 = 0;
  uint64_t v20 = *((void *)this + 6);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v19 == v20 && *((_DWORD *)this + 121) != 4;
}

void sub_1C5543918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL non-virtual thunk to'QMIRTPSession::active(QMIRTPSession *this)
{
  return QMIRTPSession::active((QMIRTPSession *)((char *)this - 24));
}

void QMIRTPSession::initialize(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  unsigned int v63 = a6;
  std::string::basic_string[abi:ne180100]<0>(&v60, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(v58, "");
  uint64_t v12 = ims::debug((uint64_t)&v60, (uint64_t)v58);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v13 = v12;
  int v14 = *(void **)(v12 + 8);
  size_t v15 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v15);
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"initialize", 10);
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" [initialDirection=", 19);
  *(unsigned char *)(v13 + 17) = 0;
  ims::toString<MediaDirection>(&v63, &__p);
  LoggableString::LoggableString(&v57, &__p);
  (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 40))(v13, &v57);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  if (v62 < 0) {
    operator delete(v60);
  }
  int v16 = (std::__shared_weak_count *)a7[1];
  if (v16)
  {
    BOOL v17 = std::__shared_weak_count::lock(v16);
    if (v17)
    {
      uint64_t v18 = *a7;
      if (*a7)
      {
        *(unsigned char *)(a1 + 494) = 0;
        *(_DWORD *)(a1 + 25ims::StackConfig::~StackConfig(this + 6) = a6;
        int v19 = *(_DWORD *)(a1 + 564);
        if (v19 == 2)
        {
          if (*(unsigned char *)(v18 + 584))
          {
            *(_OWORD *)&v57.__r_.__value_.__l.__data_ = 0uLL;
            goto LABEL_38;
          }
        }
        else if (v19 == 6 && *(unsigned char *)(v18 + 1856))
        {
          *(_OWORD *)&v57.__r_.__value_.__l.__data_ = 0uLL;
LABEL_30:
          uint64_t v21 = v18 + 1496;
          goto LABEL_41;
        }
        if (!*(unsigned char *)(v18 + 1328))
        {
          BOOL v22 = *(std::__shared_weak_count **)(a1 + 40);
          if (!v22) {
            goto LABEL_93;
          }
          char v23 = std::__shared_weak_count::lock(v22);
          if (!v23) {
            goto LABEL_93;
          }
          uint64_t v24 = v23;
          char v25 = *(void (****)(void, void **, uint64_t))(a1 + 32);
          if (v25)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v54);
            (**v25)(v25, &v54, 9);
            if (v55) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v55);
            }
          }
          std::string::size_type size = v24;
          goto LABEL_92;
        }
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = 0uLL;
        if (v19 != 2)
        {
          if (v19 == 6 && *(unsigned char *)(v18 + 1856)) {
            goto LABEL_30;
          }
          goto LABEL_39;
        }
        if (!*(unsigned char *)(v18 + 584))
        {
LABEL_39:
          uint64_t v21 = v18 + 1032;
          if (!*(unsigned char *)(v18 + 1328)) {
            uint64_t v21 = 0;
          }
LABEL_41:
          RTPTransportManager::getTransport(*(RTPTransportManager **)(a1 + 48), *(unsigned __int16 *)(v21 + 24), (uint64_t *)&v57);
          std::string::size_type v27 = v57.__r_.__value_.__r.__words[0];
          if (!v57.__r_.__value_.__r.__words[0])
          {
            uint64_t v31 = *(std::__shared_weak_count **)(a1 + 40);
            if (!v31 || (std::string v32 = std::__shared_weak_count::lock(v31)) == 0)
            {
LABEL_91:
              std::string::size_type size = (std::__shared_weak_count *)v57.__r_.__value_.__l.__size_;
              if (!v57.__r_.__value_.__l.__size_)
              {
LABEL_93:
                std::__shared_weak_count::__release_shared[abi:ne180100](v17);
                return;
              }
LABEL_92:
              std::__shared_weak_count::__release_shared[abi:ne180100](size);
              goto LABEL_93;
            }
            uint64_t v33 = v32;
            uint64_t v34 = *(void (****)(void, void **, uint64_t))(a1 + 32);
            if (v34)
            {
              RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v52);
              (**v34)(v34, &v52, 9);
              if (v53) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v53);
              }
            }
            int v35 = v33;
LABEL_90:
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
            goto LABEL_91;
          }
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
          uint64_t v60 = 0;
          uint64_t v61 = 0;
          char v28 = *(std::__shared_weak_count **)(a1 + 40);
          if (v28)
          {
            uint64_t v61 = std::__shared_weak_count::lock(v28);
            if (v61) {
              uint64_t v60 = *(void **)(a1 + 32);
            }
          }
          std::dynamic_pointer_cast[abi:ne180100]<MediaSessionStateMachine,MediaSessionDelegate>(&v60, (void **)&__p.__r_.__value_.__l.__data_);
          if (v61) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          }
          if (!__p.__r_.__value_.__r.__words[0])
          {
            std::string::basic_string[abi:ne180100]<0>(&v60, "rtp.qmisession");
            std::string::basic_string[abi:ne180100]<0>(v58, "");
            uint64_t v36 = ims::error((uint64_t)&v60, (uint64_t)v58);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"Delegate is not a MediaSessionStateMachine", 42);
            *(unsigned char *)(v36 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v36 + 17) = 0;
            if (v59 < 0) {
              operator delete(v58[0]);
            }
            if (v62 < 0) {
              operator delete(v60);
            }
LABEL_89:
            int v35 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_) {
              goto LABEL_91;
            }
            goto LABEL_90;
          }
          if (!a3)
          {
LABEL_81:
            if (*(unsigned char *)(v18 + 584))
            {
              if ((*(unsigned int (**)(void))(*(void *)(v18 + 152) + 24))())
              {
                uint64_t v49 = v18;
                std::string v50 = v17;
                atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                (*(void (**)(void *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 56))(v51, a1, &v49);
                ImsResult::~ImsResult((ImsResult *)v51);
                if (v50) {
                  std::__shared_weak_count::__release_weak(v50);
                }
              }
            }
            uint64_t v43 = *(void *)(a1 + 544);
            RTPSharedPointerBase::getShared<QMIRTPSession>(&v47, a1);
            int v44 = *(_DWORD *)(a1 + 564);
            uint64_t v45 = v18;
            uint64_t v46 = v17;
            atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            QMIRTPStackController::initializeQMISession(v43, (char **)&v47, a2, v44, &v45, a3 ^ 1);
            if (v46) {
              std::__shared_weak_count::__release_weak(v46);
            }
            if (v48) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v48);
            }
            goto LABEL_89;
          }
          uint64_t v29 = *(std::__shared_weak_count **)(v18 + 128);
          if (v29)
          {
            uint64_t v29 = std::__shared_weak_count::lock(v29);
            char v30 = v29;
            if (v29) {
              uint64_t v29 = *(std::__shared_weak_count **)(v18 + 120);
            }
          }
          else
          {
            char v30 = 0;
          }
          uint64_t v37 = (ImsPrefs *)SipStack::prefs((SipStack *)v29);
          UseRTPDetectionAutoStartKey = (void **)ImsPrefs::getUseRTPDetectionAutoStartKey(v37);
          if (!ImsPrefs::BOOLValue(v37, UseRTPDetectionAutoStartKey))
          {
            if (!v30) {
              goto LABEL_81;
            }
            uint64_t v42 = v30;
            goto LABEL_80;
          }
          int v39 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0] + 316);
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          if (v39) {
            goto LABEL_81;
          }
          uint64_t v60 = 0;
          uint64_t v61 = 0;
          int v40 = *(_DWORD *)(a1 + 564);
          if (v40 == 2)
          {
            if (*(unsigned char *)(v18 + 584))
            {
              uint64_t v41 = v18 + 152;
              goto LABEL_77;
            }
          }
          else if (v40 == 6 && *(unsigned char *)(v18 + 1856))
          {
            uint64_t v41 = v18 + 1496;
            goto LABEL_77;
          }
          uint64_t v41 = v18 + 1032;
          if (!*(unsigned char *)(v18 + 1328)) {
            uint64_t v41 = 0;
          }
LABEL_77:
          RTPTransportManager::getTransport(*(RTPTransportManager **)(a1 + 48), (unsigned __int16)(*(_WORD *)(v41 + 24) + 1), (uint64_t *)&v60);
          (*(void (**)(std::string::size_type, void))(*(void *)v27 + 88))(v27, 0);
          if (v60) {
            (*(void (**)(void *, void))(*(void *)v60 + 88))(v60, 0);
          }
          uint64_t v42 = v61;
          if (!v61) {
            goto LABEL_81;
          }
LABEL_80:
          std::__shared_weak_count::__release_shared[abi:ne180100](v42);
          goto LABEL_81;
        }
LABEL_38:
        uint64_t v21 = v18 + 152;
        goto LABEL_41;
      }
    }
  }
  else
  {
    BOOL v17 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(v58, "");
  uint64_t v20 = ims::error((uint64_t)&v60, (uint64_t)v58);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"sdpSession is null", 18);
  *(unsigned char *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v20 + 17) = 0;
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  if (v62 < 0) {
    operator delete(v60);
  }
  if (v17) {
    goto LABEL_93;
  }
}

void sub_1C55440B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,std::__shared_weak_count *a29,int a30,__int16 a31,char a32,char a33)
{
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  uint64_t v36 = *(std::__shared_weak_count **)(v34 - 152);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  _Unwind_Resume(a1);
}

void RTPSharedPointerBase::getShared<QMIRTPSession>(void **p_lpsrc, uint64_t a2)
{
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (void *)(a2 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v6;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void non-virtual thunk to'QMIRTPSession::initialize(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
}

uint64_t QMIRTPSession::terminate(QMIRTPSession *this)
{
  std::string::basic_string[abi:ne180100]<0>(v12, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v12, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"terminate", 9);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  uint64_t v6 = *((void *)this + 68);
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v8, (uint64_t)this);
  QMIRTPStackController::uninitializeQMISession(v6, (uint64_t *)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return 1;
}

void sub_1C5544498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'QMIRTPSession::terminate(QMIRTPSession *this)
{
  return 1;
}

uint64_t QMIRTPSession::start(QMIRTPSession *this)
{
  std::string::basic_string[abi:ne180100]<0>(v23, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  uint64_t v2 = ims::debug((uint64_t)v23, (uint64_t)v21);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"start", 5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" _direction=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  ims::toString<MediaDirection>((unsigned int *)this + 64, __p);
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 32))(v3, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (*((_DWORD *)this + 141) == 2)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*((void *)this + 3) + 176))();
    char v7 = (void *)*((void *)this + 68);
    if (v6 != v7[10])
    {
      *((unsigned char *)this + 562) = 1;
      RTPSharedPointerBase::getShared<QMIRTPSession>(&v17, (uint64_t)this);
      QMIRTPStackController::configureQMISession(v7, (uint64_t *)&v17);
      uint64_t v8 = v18;
      if (!v18) {
        return 1;
      }
      goto LABEL_19;
    }
  }
  else
  {
    char v7 = (void *)*((void *)this + 68);
  }
  int v9 = *((_DWORD *)this + 64);
  if (v9 == 4) {
    int v9 = 1;
  }
  *((_DWORD *)this + 12bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v9;
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v15, (uint64_t)this);
  int v10 = *((_DWORD *)this + 121);
  unsigned int v11 = v10 - 2;
  unsigned int v12 = 4 - v10;
  if (v11 >= 3) {
    unsigned int v13 = 3;
  }
  else {
    unsigned int v13 = v12;
  }
  QMIRTPStackController::setQMISessionDirection(v7, &v15, v13);
  uint64_t v8 = v16;
  if (v16) {
LABEL_19:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  return 1;
}

void sub_1C55447A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'QMIRTPSession::start(QMIRTPSession *this)
{
  return 1;
}

uint64_t QMIRTPSession::stop(QMIRTPSession *this)
{
  std::string::basic_string[abi:ne180100]<0>(v12, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v12, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"stop", 4);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  *((_DWORD *)this + 12bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 4;
  uint64_t v6 = (void *)*((void *)this + 68);
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v8, (uint64_t)this);
  QMIRTPStackController::setQMISessionDirection(v6, &v8, 0);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return 1;
}

void sub_1C55449E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'QMIRTPSession::stop(QMIRTPSession *this)
{
  return 1;
}

uint64_t QMIRTPSession::configure(QMIRTPSession *this)
{
  std::string::basic_string[abi:ne180100]<0>(v12, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v12, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"configure", 9);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  *((unsigned char *)this + 56(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 1;
  uint64_t v6 = (void *)*((void *)this + 68);
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v8, (uint64_t)this);
  QMIRTPStackController::configureQMISession(v6, (uint64_t *)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return 1;
}

void sub_1C5544BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'QMIRTPSession::configure(QMIRTPSession *this)
{
  return 1;
}

uint64_t QMIRTPSession::setDirection(uint64_t a1, unsigned int *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v46, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(v44, "");
  uint64_t v4 = ims::debug((uint64_t)v46, (uint64_t)v44);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"setDirection", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" oldDirection=", 14);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t v8 = (unsigned int *)(a1 + 256);
  ims::toString<MediaDirection>((unsigned int *)(a1 + 256), v42);
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, v42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" newDirection=", 14);
  *(unsigned char *)(v5 + 17) = 0;
  ims::toString<MediaDirection>(a2, __p);
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v41 < 0) {
    operator delete(__p[0]);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  int v9 = *(_DWORD *)(a1 + 484);
  if (v9 == 4)
  {
    *(_DWORD *)(a1 + 25ims::StackConfig::~StackConfig(this + 6) = *a2;
    int v10 = *(std::__shared_weak_count **)(a1 + 40);
    if (v10)
    {
      char v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        unsigned int v12 = v11;
        uint64_t v13 = *(void *)(a1 + 32);
        if (!v13) {
          goto LABEL_44;
        }
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v28);
        (*(void (**)(uint64_t, void **, void))(*(void *)v13 + 32))(v13, &v28, 0);
        int v14 = v29;
        if (!v29) {
          goto LABEL_44;
        }
        goto LABEL_36;
      }
    }
  }
  else
  {
    unsigned int v15 = *v8;
    unsigned int v16 = *a2;
    if (*v8 != *a2)
    {
      if (v16 - 1 >= 2)
      {
        if (v16 == 3)
        {
          std::string::basic_string[abi:ne180100]<0>(v46, "rtp.qmisession");
          std::string::basic_string[abi:ne180100]<0>(v44, "");
          uint64_t v18 = ims::warn((uint64_t)v46, (uint64_t)v44);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"We don't support send only, defaulting to inactive", 50);
          *(unsigned char *)(v18 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v18 + 17) = 0;
          if (v45 < 0) {
            operator delete(v44[0]);
          }
          if (v47 < 0) {
            operator delete(v46[0]);
          }
        }
        int v19 = *(void **)(a1 + 544);
        RTPSharedPointerBase::getShared<QMIRTPSession>(&v32, a1);
        if (*a2 - 2 >= 3) {
          unsigned int v20 = 3;
        }
        else {
          unsigned int v20 = 4 - *a2;
        }
        QMIRTPStackController::setQMISessionDirection(v19, &v32, v20);
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        *uint64_t v8 = 4;
      }
      else
      {
        *uint64_t v8 = v16;
        if (v15 != 1)
        {
          if (v9 != 1)
          {
            char v24 = *(void **)(a1 + 544);
            RTPSharedPointerBase::getShared<QMIRTPSession>(&v36, a1);
            unsigned int v25 = *a2 - 2 >= 3 ? 3 : 4 - *a2;
            QMIRTPStackController::setQMISessionDirection(v24, &v36, v25);
            if (v37) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v37);
            }
          }
          long long v26 = *(void **)(a1 + 544);
          RTPSharedPointerBase::getShared<QMIRTPSession>(&v34, a1);
          QMIRTPStackController::configureQMISession(v26, (uint64_t *)&v34);
          unsigned int v12 = v35;
          if (v35) {
            goto LABEL_44;
          }
          return 1;
        }
        BOOL v17 = *(void **)(a1 + 544);
        RTPSharedPointerBase::getShared<QMIRTPSession>(&v38, a1);
        QMIRTPStackController::setQMISessionDirection(v17, &v38, 2u);
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
      }
    }
    uint64_t v21 = *(std::__shared_weak_count **)(a1 + 40);
    if (v21)
    {
      char v22 = std::__shared_weak_count::lock(v21);
      if (v22)
      {
        unsigned int v12 = v22;
        uint64_t v23 = *(void *)(a1 + 32);
        if (!v23) {
          goto LABEL_44;
        }
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v30);
        (*(void (**)(uint64_t, void **, void))(*(void *)v23 + 24))(v23, &v30, 0);
        int v14 = v31;
        if (!v31) {
          goto LABEL_44;
        }
LABEL_36:
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
LABEL_44:
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
  }
  return 1;
}

void sub_1C5545154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'QMIRTPSession::setDirection(uint64_t a1, unsigned int *a2)
{
  return 1;
}

void QMIRTPSession::didConfigure(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v48, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(v46, "");
  uint64_t v4 = ims::debug((uint64_t)v48, (uint64_t)v46);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"didConfigure", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (v49 < 0) {
    operator delete(v48[0]);
  }
  if (!*(unsigned char *)(a1 + 562))
  {
    if (!a2 && *(_DWORD *)(a1 + 484) != 4)
    {
      int v13 = *(_DWORD *)(a1 + 256);
      if (v13 != 4)
      {
        *(_DWORD *)(a1 + 484) = v13;
        int v14 = *(void **)(a1 + 544);
        RTPSharedPointerBase::getShared<QMIRTPSession>(&v42, a1);
        int v15 = *(_DWORD *)(a1 + 256);
        unsigned int v16 = v15 - 2;
        int v17 = 4 - v15;
        unsigned int v18 = v16 >= 3 ? 3 : v17;
        QMIRTPStackController::setQMISessionDirection(v14, &v42, v18);
        if (v43) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v43);
        }
      }
    }
    if (*(unsigned char *)(a1 + 560))
    {
      *(unsigned char *)(a1 + 56(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
      std::string::basic_string[abi:ne180100]<0>(v48, "rtp.qmisession");
      std::string::basic_string[abi:ne180100]<0>(v46, "");
      uint64_t v19 = ims::info((uint64_t)v48, (uint64_t)v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"didConfigure: handleMediaSessionConfigured: ", 44);
      *(unsigned char *)(v19 + 17) = 0;
      if (a2) {
        unsigned int v20 = "false";
      }
      else {
        unsigned int v20 = "true";
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v20);
      (*(void (**)(uint64_t, void **))(*(void *)v19 + 32))(v19, __p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v19 + 17) = 0;
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      if (v49 < 0) {
        operator delete(v48[0]);
      }
      uint64_t v21 = *(std::__shared_weak_count **)(a1 + 40);
      if (!v21) {
        return;
      }
      char v22 = std::__shared_weak_count::lock(v21);
      if (!v22) {
        return;
      }
      int v10 = v22;
      uint64_t v23 = *(void *)(a1 + 32);
      if (!v23) {
        goto LABEL_66;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v38);
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v23 + 16))(v23, &v38, a2);
      unsigned int v12 = v39;
      if (!v39) {
        goto LABEL_66;
      }
    }
    else if (*(_DWORD *)(a1 + 484) == 4)
    {
      std::string::basic_string[abi:ne180100]<0>(v48, "rtp.qmisession");
      std::string::basic_string[abi:ne180100]<0>(v46, "");
      uint64_t v24 = ims::info((uint64_t)v48, (uint64_t)v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"didConfigure: handleMediaSessionDeactivated: ", 45);
      *(unsigned char *)(v24 + 17) = 0;
      if (a2) {
        unsigned int v25 = "false";
      }
      else {
        unsigned int v25 = "true";
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v25);
      (*(void (**)(uint64_t, void **))(*(void *)v24 + 32))(v24, __p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v24 + 17) = 0;
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      if (v49 < 0) {
        operator delete(v48[0]);
      }
      long long v26 = *(std::__shared_weak_count **)(a1 + 40);
      if (!v26) {
        return;
      }
      std::string::size_type v27 = std::__shared_weak_count::lock(v26);
      if (!v27) {
        return;
      }
      int v10 = v27;
      uint64_t v28 = *(void *)(a1 + 32);
      if (!v28) {
        goto LABEL_66;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v34);
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v28 + 32))(v28, &v34, a2);
      unsigned int v12 = v35;
      if (!v35) {
        goto LABEL_66;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v48, "rtp.qmisession");
      std::string::basic_string[abi:ne180100]<0>(v46, "");
      uint64_t v29 = ims::info((uint64_t)v48, (uint64_t)v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"didConfigure: handleMediaSessionActivated: ", 43);
      *(unsigned char *)(v29 + 17) = 0;
      if (a2) {
        char v30 = "false";
      }
      else {
        char v30 = "true";
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v30);
      (*(void (**)(uint64_t, void **))(*(void *)v29 + 32))(v29, __p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v29 + 17) = 0;
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      if (v49 < 0) {
        operator delete(v48[0]);
      }
      uint64_t v31 = *(std::__shared_weak_count **)(a1 + 40);
      if (!v31) {
        return;
      }
      std::string v32 = std::__shared_weak_count::lock(v31);
      if (!v32) {
        return;
      }
      int v10 = v32;
      uint64_t v33 = *(void *)(a1 + 32);
      if (!v33) {
        goto LABEL_66;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v36);
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v33 + 24))(v33, &v36, a2);
      unsigned int v12 = v37;
      if (!v37) {
        goto LABEL_66;
      }
    }
LABEL_65:
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_66:
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    return;
  }
  *(unsigned char *)(a1 + 562) = 0;
  if (!a2)
  {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 32))(a1, 0);
    return;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 40);
  if (v8)
  {
    int v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      int v10 = v9;
      uint64_t v11 = *(void *)(a1 + 32);
      if (!v11) {
        goto LABEL_66;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v44);
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v11 + 24))(v11, &v44, a2);
      unsigned int v12 = v45;
      if (!v45) {
        goto LABEL_66;
      }
      goto LABEL_65;
    }
  }
}

void sub_1C554592C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

uint64_t QMIRTPSession::configureRemoteRTCP(QMIRTPSession *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(QMIRTPSession *, uint64_t, void, uint64_t, uint64_t))(*(void *)this + 160))(this, a2, 0, a3, a3);
}

uint64_t non-virtual thunk to'QMIRTPSession::configureRemoteRTCP(QMIRTPSession *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 3) + 160))();
}

uint64_t QMIRTPSession::configureLocalRTCP(QMIRTPSession *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(QMIRTPSession *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)this + 160))(this, a2, 1, a3, a3);
}

uint64_t non-virtual thunk to'QMIRTPSession::configureLocalRTCP(QMIRTPSession *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 3) + 160))();
}

void QMIRTPSession::configureMediaLinkMonitor(QMIRTPSession *this, int a2, int a3)
{
  uint64_t v6 = *((void *)this + 68);
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v11, (uint64_t)this);
  QMIRTPStackController::configureRTPLinkMonitor(v6, (uint64_t *)&v11, a2 != 0, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v7 = *((void *)this + 68);
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v9, (uint64_t)this);
  QMIRTPStackController::configureRTCPLinkMonitor(v7, (uint64_t *)&v9, a3 != 0, a3);
  uint64_t v8 = v10;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C5545B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIRTPSession::configureMediaLinkMonitor(QMIRTPSession *this, int a2, int a3)
{
}

void QMIRTPSession::configureRTCP(QMIRTPSession *this, int a2, char a3, __int16 a4, int a5)
{
  LOWORD(vims::StackConfig::~StackConfig(this + 6) = a4;
  uint64_t v10 = *((void *)this + 68);
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v12, (uint64_t)this);
  if (*((_DWORD *)this + 64) != 1) {
    int v6 = *((_DWORD *)this + 109);
  }
  QMIRTPStackController::configureRTCPReports(v10, (uint64_t *)&v12, a2, a3, (unsigned __int16)v6, a5);
  uint64_t v11 = v13;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C5545C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

double QMIRTPSession::startSendingDTMF@<D0>(QMIRTPSession *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((void *)this + 68);
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v7, (uint64_t)this);
  QMIRTPStackController::sendDTMFDigit(v5, (uint64_t *)&v7, a2);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  return result;
}

void sub_1C5545D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

double non-virtual thunk to'QMIRTPSession::startSendingDTMF@<D0>(QMIRTPSession *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return QMIRTPSession::startSendingDTMF((QMIRTPSession *)((char *)this - 24), a2, a3);
}

double QMIRTPSession::stopSendingDTMF@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  return result;
}

double non-virtual thunk to'QMIRTPSession::stopSendingDTMF@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  return result;
}

double QMIRTPSession::sendDTMFDigits@<D0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      char v7 = *v4;
      uint64_t v8 = *(void *)(a1 + 544);
      RTPSharedPointerBase::getShared<QMIRTPSession>(&v10, a1);
      QMIRTPStackController::sendDTMFDigit(v8, (uint64_t *)&v10, v7);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  return result;
}

void sub_1C5545E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

double non-virtual thunk to'QMIRTPSession::sendDTMFDigits@<D0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  return QMIRTPSession::sendDTMFDigits(a1 - 24, a2, a3);
}

uint64_t QMIRTPSession::setQMISessionId(QMIRTPSession *this, char a2)
{
  *((unsigned char *)this + 49(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = a2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  std::string v4[3] = &__block_descriptor_tmp_18;
  char v5 = a2;
  uint64_t v2 = qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>((uint64_t)this + 504, 1);
  return ___ZN13QMIRTPSession15setQMISessionIdEh_block_invoke((uint64_t)v4, v2);
}

uint64_t ___ZN13QMIRTPSession15setQMISessionIdEh_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void QMIRTPSession::setConfiguration(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    char v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      uint64_t v8 = (unsigned char *)*a2;
      if (*a2)
      {
        int v9 = *(_DWORD *)(a1 + 564);
        if (v9 == 2)
        {
          if (v8[584])
          {
            uint64_t v10 = v8 + 152;
            goto LABEL_19;
          }
        }
        else if (v9 == 6 && v8[1856])
        {
          uint64_t v10 = v8 + 1496;
          goto LABEL_19;
        }
        if (!v8[1328])
        {
LABEL_21:
          *(unsigned char *)(a1 + 53ims::StackConfig::~StackConfig(this + 6) = 0;
          *(_OWORD *)(a3 + 24) = 0u;
          *(_OWORD *)(a3 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
          *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
          *(void *)a3 = &unk_1F20B2680;
          *(void *)(a3 + 8) = &_bambiDomain;
          *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = 1073741825;
LABEL_127:
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
          return;
        }
        uint64_t v10 = v8 + 1032;
LABEL_19:
        if (!*((_WORD *)v10 + 13) || *((_WORD *)v10 + 15) == 255) {
          goto LABEL_21;
        }
        memset(v95, 0, 32);
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v95);
        qmi::MutableMessageBase::operator=();
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v95);
        v110[0] = MEMORY[0x1E4F143A8];
        v110[1] = 0x40000000;
        std::string v111 = ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke;
        uint64_t v112 = &__block_descriptor_tmp_21_1;
        uint64_t v113 = a1;
        unsigned int v12 = qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>(a1 + 504, 1);
        v111((uint64_t)v110, v12);
        int v13 = v8 + 152;
        if (v8[584]) {
          int v14 = v8 + 152;
        }
        else {
          int v14 = 0;
        }
        int v15 = *(_DWORD *)(a1 + 564);
        if (v15 == 2)
        {
          if (v8[584]) {
            goto LABEL_32;
          }
        }
        else if (v15 == 6 && v8[1856])
        {
          int v13 = v8 + 1496;
          goto LABEL_32;
        }
        if (!v8[1328]) {
          goto LABEL_38;
        }
        int v13 = v8 + 1032;
LABEL_32:
        uint64_t v17 = *((void *)v13 + 1);
        unsigned int v16 = (std::__shared_weak_count *)*((void *)v13 + 2);
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        if (v17)
        {
          v106[0] = MEMORY[0x1E4F143A8];
          v106[1] = 0x40000000;
          std::string v107 = ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_2;
          uint64_t v108 = &__block_descriptor_tmp_23;
          long long v109 = v13;
          unsigned int v18 = qmi::MutableMessageBase::getTLV<ms::tlv::RemoteTransportIpAddr>(a1 + 504);
          v107((uint64_t)v106, (BOOL *)v18);
        }
        if (*((_WORD *)v13 + 15) != 255)
        {
          v102[0] = MEMORY[0x1E4F143A8];
          v102[1] = 0x40000000;
          uint64_t v103 = (uint64_t (*)(uint64_t, char *))___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_3;
          uint64_t v104 = &__block_descriptor_tmp_25;
          uint64_t v105 = v13;
          uint64_t v19 = qmi::MutableMessageBase::getTLV<ms::tlv::RemotePort>(a1 + 504);
          v103((uint64_t)v102, v19);
          v97[0] = MEMORY[0x1E4F143A8];
          v97[1] = 0x40000000;
          uint64_t v98 = ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_4;
          uint64_t v99 = &__block_descriptor_tmp_27;
          uint64_t v100 = a1;
          uint64_t v101 = v13;
          unsigned int v20 = qmi::MutableMessageBase::getTLV<ms::tlv::RtcpRemotePort>(a1 + 504);
          v98((uint64_t)v97, (uint64_t)v20);
        }
LABEL_38:
        if (*(_DWORD *)(a1 + 564) != 2)
        {
LABEL_126:
          *(unsigned char *)(a1 + 53ims::StackConfig::~StackConfig(this + 6) = 1;
          *(_OWORD *)(a3 + 24) = 0u;
          *(_OWORD *)(a3 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
          *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
          *(void *)a3 = &unk_1F20B2680;
          *(void *)(a3 + 8) = &_bambiDomain;
          *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
          goto LABEL_127;
        }
        memset(&v96, 0, sizeof(v96));
        uint64_t v21 = v14 + 280;
        if ((char)v14[303] < 0)
        {
          std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)v14 + 35), *((void *)v14 + 36));
        }
        else
        {
          *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *v21;
          v96.__r_.__value_.__r.__words[2] = *((void *)v14 + 37);
        }
        v95[0] = &unk_1F20B3020;
        *(_OWORD *)&v95[1] = *(_OWORD *)(v14 + 328);
        *(_OWORD *)&v95[3] = *(_OWORD *)(v14 + 344);
        uint64_t v93 = *((void *)v14 + 45);
        __int16 v94 = *((_WORD *)v14 + 184);
        int v66 = *((unsigned __int16 *)v14 + 185);
        long long v92 = *(_OWORD *)(v14 + 372);
        int v22 = *((_DWORD *)v14 + 97);
        long long v23 = *(_OWORD *)(v14 + 408);
        *(_OWORD *)std::string __p = *(_OWORD *)(v14 + 392);
        long long v90 = v23;
        std::string::size_type size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
        if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v96.__r_.__value_.__l.__size_;
        }
        uint64_t v91 = *((void *)v14 + 53);
        if (size == 6)
        {
          char v30 = &v96;
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            char v30 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          int data = (int)v30->__r_.__value_.__l.__data_;
          int v27 = WORD2(v30->__r_.__value_.__r.__words[0]);
          BOOL v28 = data == 760368449;
          int v29 = 16983;
        }
        else
        {
          if (size != 3)
          {
LABEL_56:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v96.__r_.__value_.__l.__data_, "EVS"))
            {
              std::string::basic_string[abi:ne180100]<0>(v87, "rtp.qmidriver");
              std::string::basic_string[abi:ne180100]<0>(v85, "");
              uint64_t v40 = ims::error((uint64_t)v87, (uint64_t)v85);
              char v41 = (unsigned char *)ImsOutStream::operator<<(v40, "SDP Media format info has unsupported codec type: ");
              if ((char)v14[303] < 0)
              {
                std::string::__init_copy_ctor_external(&v84, *((const std::string::value_type **)v14 + 35), *((void *)v14 + 36));
              }
              else
              {
                *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *v21;
                v84.__r_.__value_.__r.__words[2] = *((void *)v14 + 37);
              }
              (*(void (**)(unsigned char *, std::string *))(*(void *)v41 + 32))(v41, &v84);
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v41[17] = 0;
              if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v84.__r_.__value_.__l.__data_);
              }
              if (v86 < 0) {
                operator delete(v85[0]);
              }
              if (v88 < 0) {
                operator delete(v87[0]);
              }
              uint64_t v48 = *(void *)(a1 + 544);
              uint64_t v49 = *(void *)(v48 + 48);
              std::string v50 = *(std::__shared_weak_count **)(v48 + 56);
              if (v50) {
                atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v51 = *(void *)(v49 + 296);
              if (v51) {
                AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v51 + 120), 27);
              }
              if (v50) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v50);
              }
              *(unsigned char *)(a1 + 53ims::StackConfig::~StackConfig(this + 6) = 0;
              *(_OWORD *)(a3 + 24) = 0u;
              *(_OWORD *)(a3 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
              *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
              *(void *)a3 = &unk_1F20B2680;
              *(void *)(a3 + 8) = &_bambiDomain;
              *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = 1073741825;
              if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v96.__r_.__value_.__l.__data_);
              }
              goto LABEL_127;
            }
LABEL_57:
            v83[0] = MEMORY[0x1E4F143A8];
            v83[1] = 0x40000000;
            v83[2] = ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_5;
            v83[3] = &__block_descriptor_tmp_39;
            v83[4] = v14;
            uint64_t v33 = qmi::MutableMessageBase::getTLV<ms::tlv::SessionParameters>(a1 + 504);
            ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_5((uint64_t)v83, (uint64_t)v33);
            std::string::size_type v34 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
            if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v34 = v96.__r_.__value_.__l.__size_;
            }
            if (v34 == 6)
            {
              if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v42 = &v96;
              }
              else {
                uint64_t v42 = (std::string *)v96.__r_.__value_.__r.__words[0];
              }
              unsigned int v43 = 1095586349;
              unsigned int v44 = bswap32(v42->__r_.__value_.__l.__data_);
              if (v44 == 1095586349
                && (v44 = bswap32(WORD2(v42->__r_.__value_.__r.__words[0])) >> 16, unsigned int v43 = 22338, v44 == 22338))
              {
                int v45 = 0;
              }
              else if (v44 < v43)
              {
                int v45 = -1;
              }
              else
              {
                int v45 = 1;
              }
              if (v45)
              {
LABEL_81:
                int v46 = 0;
                int v39 = 2;
                int v47 = v66;
                goto LABEL_99;
              }
              int v39 = 1;
            }
            else
            {
              if (v34 != 3) {
                goto LABEL_81;
              }
              int v35 = &v96;
              if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int v35 = (std::string *)v96.__r_.__value_.__r.__words[0];
              }
              int data_low = LOWORD(v35->__r_.__value_.__l.__data_);
              int v37 = v35->__r_.__value_.__s.__data_[2];
              if (data_low != 19777 || v37 != 82) {
                goto LABEL_81;
              }
              int v39 = 0;
            }
            int v46 = 1;
            int v47 = WORD1(v95[1]);
LABEL_99:
            v80[0] = MEMORY[0x1E4F143A8];
            v80[1] = 0x40000000;
            std::string v80[2] = ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_6;
            v80[3] = &__block_descriptor_tmp_43_1;
            int v81 = v39;
            int v82 = v47;
            uint64_t v52 = (double *)qmi::MutableMessageBase::getTLV<ms::tlv::CodecParameters>(a1 + 504);
            ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_6((uint64_t)v80, v52);
            if (v39 != 2)
            {
              uint64_t v59 = *(void *)(a1 + 544);
              uint64_t v60 = *(void *)(v59 + 48);
              uint64_t v54 = *(std::__shared_weak_count **)(v59 + 56);
              if (v54) {
                atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v61 = *(void *)(v60 + 296);
              if (v61)
              {
                uint64_t v62 = *(void *)(v61 + 120);
                *(_WORD *)(v62 + 488) = v39;
                *(_WORD *)(v62 + 49(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v47;
              }
              if (!v54)
              {
                if (!v46)
                {
LABEL_124:
                  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v96.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_126;
                }
LABEL_120:
                v77[0] = MEMORY[0x1E4F143A8];
                v77[1] = 1174405120;
                v77[2] = ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_7;
                v77[3] = &__block_descriptor_tmp_45_1;
                long long v78 = *(_OWORD *)&v95[1];
                v77[4] = &unk_1F20B3020;
                long long v79 = *(_OWORD *)&v95[3];
                long long v64 = qmi::MutableMessageBase::getTLV<ms::tlv::AMRCodecParameters>(a1 + 504);
                ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_7((uint64_t)v77, (uint64_t)v64);
                goto LABEL_124;
              }
LABEL_118:
              std::__shared_weak_count::__release_shared[abi:ne180100](v54);
LABEL_119:
              if ((v46 & 1) == 0)
              {
                if (v39 == 2)
                {
                  v67[0] = MEMORY[0x1E4F143A8];
                  v67[1] = 1174405120;
                  v67[2] = ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_46;
                  v67[3] = &__block_descriptor_tmp_48_5;
                  v67[4] = v93;
                  __int16 v68 = v94;
                  __int16 v69 = v66;
                  long long v70 = v92;
                  int v71 = v22;
                  long long v72 = *(_OWORD *)__p;
                  long long v73 = v90;
                  uint64_t v74 = v91;
                  uint64_t v75 = v8;
                  uint64_t v76 = v7;
                  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
                  uint64_t v65 = qmi::MutableMessageBase::getTLV<ms::tlv::EVSCodecParameters>(a1 + 504);
                  ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_46((uint64_t)v67, (uint64_t)v65);
                  if (v76) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
                  }
                }
                goto LABEL_124;
              }
              goto LABEL_120;
            }
            uint64_t v53 = *(void *)(a1 + 544);
            uint64_t v55 = *(void *)(v53 + 48);
            uint64_t v54 = *(std::__shared_weak_count **)(v53 + 56);
            if (v22 < 3)
            {
              if (v54) {
                atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v63 = *(void *)(v55 + 296);
              if (v63)
              {
                uint64_t v57 = *(void *)(v63 + 120);
                __int16 v58 = 4;
                goto LABEL_116;
              }
            }
            else
            {
              if (v54) {
                atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v56 = *(void *)(v55 + 296);
              if (v56)
              {
                uint64_t v57 = *(void *)(v56 + 120);
                __int16 v58 = 5;
LABEL_116:
                *(_WORD *)(v57 + 488) = v58;
                *(_WORD *)(v57 + 49(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v47;
              }
            }
            if (!v54) {
              goto LABEL_119;
            }
            goto LABEL_118;
          }
          unsigned int v25 = &v96;
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unsigned int v25 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          int v26 = LOWORD(v25->__r_.__value_.__l.__data_);
          int v27 = v25->__r_.__value_.__s.__data_[2];
          BOOL v28 = v26 == 19777;
          int v29 = 82;
        }
        if (v28 && v27 == v29) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
    }
  }
  else
  {
    char v7 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v95, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::error((uint64_t)v95, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"sdpSession is null", 18);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (SBYTE7(v90) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v95[2]) < 0) {
    operator delete(v95[0]);
  }
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(_OWORD *)(a3 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 1ims::StackConfig::~StackConfig(this + 6) = 1073741825;
  if (v7) {
    goto LABEL_127;
  }
}

void sub_1C55469D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a72);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  _Unwind_Resume(a1);
}

uint64_t ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(*(void *)(result + 32) + 490);
  return result;
}

void ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_2(uint64_t a1, BOOL *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 8);
  int v6 = *(std::__shared_weak_count **)(v4 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v7 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 128))(v5);
  uint64_t v8 = v7[23];
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = v7[23];
  }
  else {
    uint64_t v9 = *((void *)v7 + 1);
  }
  if (v9 == 3)
  {
    if ((v8 & 0x80) != 0)
    {
      BOOL v11 = memcmp(*(const void **)v7, &IpAddress::kAddressTypeIPv6, *((void *)v7 + 1)) == 0;
LABEL_15:
      *a2 = v11;
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 16);
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      IpAddress::asString();
    }
    if (!v7[23])
    {
LABEL_12:
      BOOL v11 = 1;
      goto LABEL_15;
    }
    uint64_t v10 = &IpAddress::kAddressTypeIPv6;
    while (*v7 == *(unsigned __int8 *)v10)
    {
      ++v7;
      uint64_t v10 = (long long *)((char *)v10 + 1);
      if (!--v8) {
        goto LABEL_12;
      }
    }
  }
  BOOL v11 = 0;
  goto LABEL_15;
}

void sub_1C5546D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_3(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(*(void *)(result + 32) + 26);
  return result;
}

uint64_t ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  *(_WORD *)a2 = *(_WORD *)(*(void *)(result + 40) + 26) + 1;
  *(unsigned char *)(a2 + 2) = *(unsigned char *)(v2 + 480);
  return result;
}

void ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_5(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v14, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Audio RX payload type ", 22);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v5 = ims::debug((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Audio TX payload type ", 22);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  *(unsigned char *)a2 = *(unsigned char *)(v6 + 28);
  *(unsigned char *)(a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *(unsigned char *)(v6 + 30);
  unsigned int v7 = *(unsigned __int16 *)(v6 + 312);
  *(_WORD *)(a2 + 2) = v7;
  if (v7 <= 0x13)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::error((uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Tried to set PacketizationTime to ", 34);
    *(unsigned char *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" setting it to ", 15);
    *(unsigned char *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    *(_WORD *)(a2 + 2) = 20;
    uint64_t v6 = *(void *)(a1 + 32);
  }
  unsigned int v9 = *(unsigned __int16 *)(v6 + 314);
  *(_WORD *)(a2 + 4) = v9;
  if (v9 <= 0x13)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::error((uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Tried to set MaxPacketizationTime to ", 37);
    *(unsigned char *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" setting it to ", 15);
    *(unsigned char *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    *(_WORD *)(a2 + 4) = 20;
    uint64_t v6 = *(void *)(a1 + 32);
  }
  int v11 = *(unsigned __int16 *)(v6 + 306);
  if (v11 != 255)
  {
    *(_WORD *)(a2 + ims::StackConfig::~StackConfig(this + 6) = *(_WORD *)(v6 + 310);
    *(unsigned char *)(a2 + 8) = v11;
  }
}

void sub_1C554718C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_6(uint64_t a1, double *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v12, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Codec Type: ", 12);
  *(unsigned char *)(v4 + 17) = 0;
  int v5 = *(_DWORD *)(a1 + 32);
  uint64_t v6 = "EVS";
  if (v5 == 1) {
    uint64_t v6 = "AMR-WB";
  }
  if (v5) {
    unsigned int v7 = v6;
  }
  else {
    unsigned int v7 = "AMR";
  }
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)v7, v8);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" Codec Mode: ", 13);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  double result = *(double *)(a1 + 32);
  *a2 = result;
  return result;
}

void sub_1C5547334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_7(uint64_t result, uint64_t a2)
{
  *(void *)a2 = *(unsigned __int16 *)(result + 44);
  *(unsigned char *)(a2 + 8) = -1;
  char v2 = *(unsigned char *)(result + 40);
  *(unsigned char *)(a2 + 9) = v2;
  *(unsigned char *)(a2 + 1(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v2;
  return result;
}

__n128 __copy_helper_block_e8_32c25_ZTS19SDPMediaAMRSettings(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = &unk_1F20B3020;
  __n128 result = *(__n128 *)(a2 + 40);
  *(_OWORD *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = *(_OWORD *)(a2 + 56);
  *(__n128 *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = result;
  return result;
}

void ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_46(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a1 + 56);
  if (v4 > 4) {
    int v5 = 3;
  }
  else {
    int v5 = dword_1C56D8428[v4];
  }
  *(_DWORD *)a2 = v5;
  uint64_t v6 = *(int *)(a1 + 60);
  if (v6 > 4) {
    int v7 = 3;
  }
  else {
    int v7 = dword_1C56D8428[v6];
  }
  *(_DWORD *)(a2 + 4) = v7;
  uint64_t v8 = *(int *)(a1 + 64);
  if (v8 > 5) {
    uint64_t v9 = 15;
  }
  else {
    uint64_t v9 = qword_1C56D8440[v8];
  }
  *(void *)(a2 + 8) = v9;
  uint64_t v10 = *(int *)(a1 + 68);
  if (v10 > 5) {
    uint64_t v11 = 15;
  }
  else {
    uint64_t v11 = qword_1C56D8440[v10];
  }
  *(void *)(a2 + 1ims::StackConfig::~StackConfig(this + 6) = v11;
  uint64_t v12 = *(void *)(a1 + 104);
  char v13 = *(std::__shared_weak_count **)(v12 + 128);
  if (v13)
  {
    char v13 = std::__shared_weak_count::lock(v13);
    uint64_t v14 = v13;
    if (v13) {
      char v13 = *(std::__shared_weak_count **)(v12 + 120);
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  char v15 = (ImsPrefs *)SipStack::prefs((SipStack *)v13);
  IncludeEVSIOModesKey = (void **)ImsPrefs::getIncludeEVSIOModesKey(v15);
  int v17 = ImsPrefs::BOOLValue(v15, IncludeEVSIOModesKey);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v17)
  {
    uint64_t v18 = *(void *)(a1 + 32) | *(unsigned __int16 *)(a1 + 40);
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v18 = *(unsigned __int16 *)(a1 + 40);
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 32);
  }
  *(void *)(a2 + 24) = v18;
  *(_WORD *)(a2 + 32) = 3855;
  *(unsigned char *)(a2 + 34) = 0;
  *(unsigned char *)(a2 + 35) = *(unsigned char *)(a1 + 72) != 0;
  *(unsigned char *)(a2 + 3ims::StackConfig::~StackConfig(this + 6) = *(unsigned char *)(a1 + 73) != 0;
  if (*(_DWORD *)(a1 + 60))
  {
    char v19 = *(unsigned char *)(a1 + 50);
    char v20 = *(unsigned char *)(a1 + 51);
  }
  else
  {
    char v19 = -1;
    char v20 = -1;
  }
  *(unsigned char *)(a2 + 37) = v19;
  *(unsigned char *)(a2 + 38) = v20;
}

void sub_1C5547534(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32104c38_ZTSNSt3__110shared_ptrI10SDPSessionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 112);
  *(void *)(result + 104) = *(void *)(a2 + 104);
  *(void *)(result + 112) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c25_ZTS19SDPMediaEVSSettings104c38_ZTSNSt3__110shared_ptrI10SDPSessionEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 112);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void non-virtual thunk to'QMIRTPSession::setConfiguration(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t QMIRTPSession::paused(QMIRTPSession *this)
{
  return *((unsigned __int8 *)this + 561);
}

uint64_t QMIRTPSession::mediaType(QMIRTPSession *this)
{
  return *((unsigned int *)this + 141);
}

BOOL QMIRTPSession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 564) == a2;
}

uint64_t non-virtual thunk to'QMIRTPSession::paused(QMIRTPSession *this)
{
  return *((unsigned __int8 *)this + 537);
}

uint64_t non-virtual thunk to'QMIRTPSession::mediaType(QMIRTPSession *this)
{
  return *((unsigned int *)this + 135);
}

BOOL non-virtual thunk to'QMIRTPSession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 540) == a2;
}

char *qmi::MutableMessageBase::getTLV<ms::tlv::RemoteTransportIpAddr>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 16)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 16;
}

void *qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemoteTransportIpAddr>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20DA9B8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemoteTransportIpAddr>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20DA9B8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemoteTransportIpAddr>::getSize(uint64_t a1)
{
  return *(void *)(a1 + 32) - *(void *)(a1 + 24) + 8;
}

void *qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemoteTransportIpAddr>::write(uint64_t a1, uint64_t *a2)
{
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *a2;
  __int16 v6 = *a2 + 3;
  *a2 += 3;
  *(_DWORD *)(v5 + IMSCallOptions::~IMSCallOptions(this + 3) = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(v5 + 7) = *(unsigned char *)(a1 + 20);
  __n128 result = memcpy((void *)(v5 + 8), *(const void **)(a1 + 24), *(void *)(a1 + 32) - *(void *)(a1 + 24));
  uint64_t v8 = v5 + 8 + *(void *)(a1 + 32) - *(void *)(a1 + 24);
  *a2 = v8;
  *(unsigned char *)uint64_t v5 = v4;
  *(_WORD *)(v5 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v8 - v6;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemoteTransportIpAddr>::clone()
{
}

void sub_1C5547968(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1091C40111C7D32);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<ms::tlv::RemotePort>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 17)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 10;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemotePort>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemotePort>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemotePort>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + IMSCallOptions::~IMSCallOptions(this + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemotePort>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<ms::tlv::RtcpRemotePort>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  char v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 18)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 10;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpRemotePort>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpRemotePort>::getSize()
{
  return 6;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpRemotePort>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + IMSCallOptions::~IMSCallOptions(this + 3) = *(_WORD *)(result + 10);
  *(unsigned char *)(v3 + 5) = *(unsigned char *)(result + 12);
  *a2 = v3 + 6;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 3;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpRemotePort>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<ms::tlv::SessionParameters>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  char v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 19)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 10;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::SessionParameters>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::SessionParameters>::getSize()
{
  return 12;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::SessionParameters>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(unsigned char *)(v3 + IMSCallOptions::~IMSCallOptions(this + 3) = *(unsigned char *)(result + 10);
  *(unsigned char *)(v3 + 4) = *(unsigned char *)(result + 11);
  *(_WORD *)(v3 + 5) = *(_WORD *)(result + 12);
  *(_WORD *)(v3 + 7) = *(_WORD *)(result + 14);
  *(_WORD *)(v3 + 9) = *(_WORD *)(result + 16);
  *(unsigned char *)(v3 + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *(unsigned char *)(result + 18);
  *a2 = v3 + 12;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 9;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::SessionParameters>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<ms::tlv::CodecParameters>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  char v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 20)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 12;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::CodecParameters>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::CodecParameters>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::CodecParameters>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + IMSCallOptions::~IMSCallOptions(this + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 8;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::CodecParameters>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<ms::tlv::AMRCodecParameters>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  char v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 21)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 16;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::AMRCodecParameters>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::AMRCodecParameters>::getSize()
{
  return 14;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::AMRCodecParameters>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(void *)(v3 + IMSCallOptions::~IMSCallOptions(this + 3) = *(void *)(result + 16);
  *(unsigned char *)(v3 + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *(unsigned char *)(result + 24);
  *(unsigned char *)(v3 + 12) = *(unsigned char *)(result + 25);
  *(unsigned char *)(v3 + 1IMSCallOptions::~IMSCallOptions(this + 3) = *(unsigned char *)(result + 26);
  *a2 = v3 + 14;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 11;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::AMRCodecParameters>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<ms::tlv::EVSCodecParameters>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  char v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 22)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 16;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::EVSCodecParameters>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::EVSCodecParameters>::getSize()
{
  return 42;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::EVSCodecParameters>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = ms::tlv::writeField(v5, a1 + 16);
  *a2 = result;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = result - v5;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::EVSCodecParameters>::clone()
{
}

uint64_t SipRegistrationEventPackage::SipRegistrationEventPackage(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)a1 = &unk_1F20DAC08;
  *(void *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  __int16 v6 = (SipUri *)(a1 + 56);
  SipUri::SipUri((SipUri *)(a1 + 56));
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v7;
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *(_DWORD *)(a1 + 48) = 3761;
  SipUri::operator=(v6, a3);
  return a1;
}

void sub_1C5548934(_Unwind_Exception *a1)
{
  SipUri::~SipUri(v2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  SipEventPackage::~SipEventPackage(v1);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationEventPackage::handleNotification(SipRegistrationEventPackage *this, const SipRequest *a2, SipResponse *a3)
{
  uint64_t v5 = (const void *)*((void *)a2 + 9);
  if (v5) {
  else
  }
    __int16 v6 = 0;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      if (v6)
      {
        uint64_t v9 = (SipRegistrationClient *)*((void *)this + 4);
        if (v9)
        {
          SipRegistrationClient::handleRegistrationNotification(v9, (const SipRegistrationInfo *)(v6 + 32));
          uint64_t v10 = 1;
LABEL_20:
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          return v10;
        }
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "sip.reg");
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  uint64_t v11 = ims::debug((uint64_t)v18, (uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Received reg notification of type ", 34);
  *(unsigned char *)(v11 + 17) = 0;
  uint64_t v12 = *((void *)a2 + 9);
  if (v12) {
    char v13 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12);
  }
  else {
    char v13 = (const std::string *)&SipBody::kGenericContentType;
  }
  LoggableString::LoggableString(&__p, v13);
  (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 40))(v11, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  uint64_t v10 = 0;
  uint64_t result = 0;
  if (v8) {
    goto LABEL_20;
  }
  return result;
}

void sub_1C5548B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

void SipRegistrationEventPackage::handleSubscriptionFailed(SipRegistrationEventPackage *this, uint64_t **a2)
{
  std::string::basic_string[abi:ne180100]<0>(v11, "sip.reg");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v11, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"SipRegistrationEventPackage::handleSubscriptionFailed", 53);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v5)
  {
    __int16 v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = (SipRegistrationClient *)*((void *)this + 4);
      if (v8) {
        SipRegistrationClient::regEventSubscriptionFailed(v8, this, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5548CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void SipRegistrationEventPackage::handleSubscriptionTerminated(SipRegistrationEventPackage *this, int a2)
{
  char v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      __int16 v6 = v5;
      uint64_t v7 = (SipRegistrationClient *)*((void *)this + 4);
      if (v7) {
        SipRegistrationClient::regEventSubscriptionTerminated(v7, this, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C5548D94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipRegistrationEventPackage::handleSubscriptionSuccess(SipRegistrationEventPackage *this)
{
  char v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2)
  {
    char v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 4);
      if (v5) {
        SipRegistrationSubject::actionOnObservers(v5 + 152, (uint64_t)&__block_literal_global_194);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5548E14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationEventPackage::desiredExpirationInterval(SipRegistrationEventPackage *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t SipRegistrationEventPackage::acceptedContentTypes(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[1];
  if (v3 >= a2[2])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (long long *)SipRegistrationInfoBody::kContentType);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, (long long *)SipRegistrationInfoBody::kContentType);
    uint64_t result = v3 + 24;
  }
  a2[1] = result;
  return result;
}

BOOL SipRegistrationEventPackage::subscribe(SipRegistrationEventPackage *this, int a2)
{
  if (a2) {
    *((_DWORD *)this + 12) = a2;
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = (SipSubscription *)*((void *)this + 2);
      if (v5)
      {
        if (SipSubscription::subscribeWithExpiration(v5))
        {
          BOOL v6 = 1;
LABEL_19:
          std::__shared_weak_count::__release_shared[abi:ne180100](v4);
          return v6;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v7 && (uint64_t v8 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *((void *)this + 4);
    if (v10)
    {
      uint64_t v11 = (const SipUri *)SipUserAgent::publicUri(*(SipUserAgent **)(v10 + 360));
      uint64_t v16 = 0;
      char v17 = 0;
      uint64_t v12 = *(void *)(v10 + 360);
      char v13 = *(SipDialogManager **)(v12 + 176);
      uint64_t v14 = *(std::__shared_weak_count **)(v12 + 184);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SipDialogManager::subscribeToEventPackage(v13, this, v11, &v16);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      BOOL v6 = v16 != 0;
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
    }
    else
    {
      BOOL v6 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (v4) {
      goto LABEL_19;
    }
  }
  else
  {
    BOOL v6 = 0;
    if (v4) {
      goto LABEL_19;
    }
  }
  return v6;
}

void sub_1C5548F84(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void SipRegistrationEventPackage::unsubscribe(SipRegistrationEventPackage *this)
{
  char v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2)
  {
    unint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (SipSubscription *)*((void *)this + 2);
      if (v5) {
        SipSubscription::unsubscribe(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5549020(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationEventPackage::determineIncomingMessageCategory(SipRegistrationEventPackage *this, const SipRequest *a2)
{
  return 0;
}

void SipRegistrationEventPackage::~SipRegistrationEventPackage(SipRegistrationEventPackage *this)
{
  *(void *)this = &unk_1F20DAC08;
  SipUri::~SipUri((SipRegistrationEventPackage *)((char *)this + 56));
  char v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  SipEventPackage::~SipEventPackage(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20DAC08;
  SipUri::~SipUri((SipRegistrationEventPackage *)((char *)this + 56));
  char v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  SipEventPackage::~SipEventPackage(this);
  JUMPOUT(0x1C878E320);
}

char *SipRegistrationEventPackage::name(SipRegistrationEventPackage *this)
{
  return &SipRegistrationEventPackage::kPackageName;
}

void IMSiRatClient::IMSiRatClient(IMSiRatClient *this)
{
  *(void *)this = 0;
  operator new();
}

void sub_1C5549240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C878E320](v19, 0x10B2C40F8341EF9);
  _Unwind_Resume(a1);
}

void ___ZN13IMSiRatClientC2Ev_block_invoke(uint64_t a1)
{
}

void IMSiRatClient::_registerIRatClient(IMSiRatClient *this)
{
  std::string::basic_string[abi:ne180100]<0>(object, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)object, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Register IMS-iRat Client", 24);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(object[0]);
  }
  __p[0] = 0;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<unsigned long long>(&v7, object, (uint64_t)"kMessageId", 1uLL);
  xpc_release(object[0]);
  unint64_t v3 = v7;
  __p[0] = v7;
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v7);
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<unsigned long long>(&v7, object, (uint64_t)"kWCMRegisterProcess_ProcessId", 0xAuLL);
  xpc_release(object[0]);
  uint64_t v4 = v7;
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v7);
  xpc_object_t v5 = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc::dict::object_proxy::operator=(&v6, v3, "kMessageArgs", &v5);
  xpc_release(v6);
  xpc_object_t v6 = 0;
  xpc_release(v5);
  xpc_object_t v5 = 0;
  if (*(void *)this) {
    XpcConnectionClient::sendXpcMessage(*(void *)this, (uint64_t)__p);
  }
  xpc_release(v4);
  xpc_release(__p[0]);
}

void sub_1C5549468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSiRatClient::~IMSiRatClient(char ***this)
{
  uint64_t v1 = *this;
  if (v1)
  {
    XpcConnectionClient::~XpcConnectionClient(v1);
    MEMORY[0x1C878E320]();
  }
}

xpc_object_t xpc::dict::object_proxy::operator=(xpc_object_t *a1, xpc_object_t xdict, char *key, xpc_object_t *a4)
{
  xpc_dictionary_set_value(xdict, key, *a4);
  *a1 = *a4;
  xpc_object_t result = xpc_null_create();
  *a4 = result;
  return result;
}

{
  xpc_object_t result;

  xpc_dictionary_set_value(xdict, key, *a4);
  *a1 = *a4;
  xpc_object_t result = xpc_null_create();
  *a4 = result;
  return result;
}

void IMSiRatClient::reportCallStatus(uint64_t *a1, unsigned char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v28, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  uint64_t v4 = ims::debug((uint64_t)&v28, (uint64_t)v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Call Status reported to iRat Manager: ", 38);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (v30 < 0) {
    operator delete(v28);
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  uint64_t v5 = ims::debug((uint64_t)&v28, (uint64_t)v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"CallId: ", 8);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)", Media : ", 10);
  *(unsigned char *)(v5 + 17) = 0;
  if (a2[4]) {
    xpc_object_t v6 = "Active";
  }
  else {
    xpc_object_t v6 = "Inactive";
  }
  if (a2[4]) {
    uint64_t v7 = 6;
  }
  else {
    uint64_t v7 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)v6, v7);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (v30 < 0) {
    operator delete(v28);
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  uint64_t v8 = ims::debug((uint64_t)&v28, (uint64_t)v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Local hold: ", 12);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)", Remote Hold: ", 15);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (v30 < 0) {
    operator delete(v28);
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  uint64_t v9 = ims::debug((uint64_t)&v28, (uint64_t)v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Multiple Calls: ", 16);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)", Conference: ", 14);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (v30 < 0) {
    operator delete(v28);
  }
  v26[0] = 0;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&v28);
  xpc::dict_creator::operator()<unsigned long long>(&v25, (void **)&v28, (uint64_t)"kMessageId", 0x2BCuLL);
  xpc_release(v28);
  uint64_t v10 = v25;
  v26[0] = v25;
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v25);
  xpc_object_t v25 = 0;
  uint64_t v11 = a2[4];
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&v28);
  xpc::dict_creator::operator()<unsigned long long>(&v24, (void **)&v28, (uint64_t)"WRMIPTelephonyEventReport_CallStatus", v11);
  xpc_release(v28);
  xpc_object_t v25 = v24;
  xpc_object_t v24 = xpc_null_create();
  xpc_release(v24);
  xpc_object_t v22 = xpc_uint64_create(*(unsigned int *)a2);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  BOOL v28 = &v25;
  int v29 = "WRMIPTelephonyEventReport_CallId";
  xpc::dict::object_proxy::operator=((uint64_t)&v28, &v22, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v22);
  xpc_object_t v22 = 0;
  xpc_object_t v20 = xpc_uint64_create(a2[5]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  BOOL v28 = &v25;
  int v29 = "WRMIPTelephonyEventReport_LocalHold";
  xpc::dict::object_proxy::operator=((uint64_t)&v28, &v20, &v21);
  xpc_release(v21);
  xpc_object_t v21 = 0;
  xpc_release(v20);
  xpc_object_t v20 = 0;
  xpc_object_t v18 = xpc_uint64_create(a2[6]);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  BOOL v28 = &v25;
  int v29 = "WRMIPTelephonyEventReport_RemoteHold";
  xpc::dict::object_proxy::operator=((uint64_t)&v28, &v18, &v19);
  xpc_release(v19);
  xpc_object_t v19 = 0;
  xpc_release(v18);
  xpc_object_t v18 = 0;
  xpc_object_t v16 = xpc_uint64_create(a2[7]);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  BOOL v28 = &v25;
  int v29 = "WRMIPTelephonyEventReport_Conference";
  xpc::dict::object_proxy::operator=((uint64_t)&v28, &v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_object_t v14 = xpc_uint64_create(a2[8]);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  BOOL v28 = &v25;
  int v29 = "WRMIPTelephonyEventReport_MultipleCalls";
  xpc::dict::object_proxy::operator=((uint64_t)&v28, &v14, &v15);
  xpc_release(v15);
  xpc_object_t v15 = 0;
  xpc_release(v14);
  xpc_object_t v14 = 0;
  xpc_object_t v12 = v25;
  if (v25) {
    xpc_retain(v25);
  }
  else {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc::dict::object_proxy::operator=(&v13, v10, "kMessageArgs", &v12);
  xpc_release(v13);
  xpc_object_t v13 = 0;
  xpc_release(v12);
  xpc_object_t v12 = 0;
  if (*a1) {
    XpcConnectionClient::sendXpcMessage(*a1, (uint64_t)v26);
  }
  xpc_release(v25);
  xpc_release(v26[0]);
}

void sub_1C5549BBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 33) < 0) {
    operator delete(*(void **)(v1 - 56));
  }
  _Unwind_Resume(exception_object);
}

void IMSiRatClient::reportSipTimeout(uint64_t *a1, unsigned __int8 *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v23, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  uint64_t v4 = ims::debug((uint64_t)&v23, (uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"SIP Timeout reported to iRat Manager: ", 38);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v25 < 0) {
    operator delete(v23);
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  uint64_t v5 = ims::debug((uint64_t)&v23, (uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"isWifi: ", 8);
  *(unsigned char *)(v5 + 17) = 0;
  if (*a2) {
    xpc_object_t v6 = "true";
  }
  else {
    xpc_object_t v6 = "false";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)", simInstance: ", 15);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v25 < 0) {
    operator delete(v23);
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  uint64_t v7 = ims::debug((uint64_t)&v23, (uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Context: ", 9);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v25 < 0) {
    operator delete(v23);
  }
  v21[0] = 0;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&v23);
  xpc::dict_creator::operator()<unsigned long long>(__p, (void **)&v23, (uint64_t)"kMessageId", 0x2BDuLL);
  xpc_release(v23);
  uint64_t v8 = __p[0];
  v21[0] = __p[0];
  __p[0] = xpc_null_create();
  xpc_release(__p[0]);
  __p[0] = 0;
  uint64_t v9 = *a2;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&v23);
  xpc::dict_creator::operator()<unsigned long long>(&v18, (void **)&v23, (uint64_t)"kRegtdLinkType", v9);
  xpc_release(v23);
  __p[0] = v18;
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v18);
  xpc_object_t v16 = xpc_BOOL_create(1);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  long long v23 = __p;
  xpc_object_t v24 = "kSipTmo";
  xpc::dict::object_proxy::operator=((uint64_t)&v23, &v16, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_object_t v14 = xpc_uint64_create(*((void *)a2 + 1));
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  long long v23 = __p;
  xpc_object_t v24 = "kSlotID";
  xpc::dict::object_proxy::operator=((uint64_t)&v23, &v14, &v15);
  xpc_release(v15);
  xpc_object_t v15 = 0;
  xpc_release(v14);
  xpc_object_t v14 = 0;
  xpc_object_t v12 = xpc_uint64_create(*((int *)a2 + 4));
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  long long v23 = __p;
  xpc_object_t v24 = "kSipContext";
  xpc::dict::object_proxy::operator=((uint64_t)&v23, &v12, &v13);
  xpc_release(v13);
  xpc_object_t v13 = 0;
  xpc_release(v12);
  xpc_object_t v12 = 0;
  xpc_object_t v10 = __p[0];
  if (__p[0]) {
    xpc_retain(__p[0]);
  }
  else {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc::dict::object_proxy::operator=(&v11, v8, "kMessageArgs", &v10);
  xpc_release(v11);
  xpc_object_t v11 = 0;
  xpc_release(v10);
  xpc_object_t v10 = 0;
  if (*a1) {
    XpcConnectionClient::sendXpcMessage(*a1, (uint64_t)v21);
  }
  xpc_release(__p[0]);
  xpc_release(v21[0]);
}

void sub_1C554A0FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 33) < 0) {
    operator delete(*(void **)(v1 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_1C554A144(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C554A11CLL);
}

void xpc::dict_creator::operator()<unsigned long long>(void **a1, void **a2, uint64_t a3, uint64_t value)
{
  xpc_object_t v7 = xpc_uint64_create(value);
  xpc_object_t v8 = v7;
  if (v7)
  {
    xpc_object_t v11 = v7;
LABEL_4:
    xpc_retain(v8);
    goto LABEL_5;
  }
  xpc_object_t v8 = xpc_null_create();
  xpc_object_t v11 = v8;
  if (v8) {
    goto LABEL_4;
  }
  xpc_object_t v8 = 0;
  xpc_object_t v11 = xpc_null_create();
LABEL_5:
  v10[0] = a2;
  v10[1] = a3;
  xpc::dict::object_proxy::operator=((uint64_t)v10, &v11, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v11);
  xpc_object_t v11 = 0;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    *a1 = xpc_null_create();
  }
  xpc_release(v8);
}

xpc::dict_creator *xpc::dict_creator::dict_creator(xpc::dict_creator *this)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C878F160](v2) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v2);
      xpc_object_t v3 = v2;
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  *(void *)this = v3;
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v4);
  return this;
}

uint64_t SipTlsTransportGroup::SipTlsTransportGroup(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_1F20B2FA8;
  xpc_object_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  uint64_t v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTransportGroup::SipTransportGroup((uint64_t *)a1, (uint64_t *)off_1F20DAEF8, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(void *)a1 = &unk_1F20DACA0;
  *(void *)(a1 + 8(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = &unk_1F20DAE38;
  *(void *)(a1 + 21ims::StackConfig::~StackConfig(this + 6) = &unk_1F20DAE98;
  xpc_object_t v6 = 0;
  xpc_object_t v7 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, (const char *)&str_39);
  SipTypedTerminationLock<SipTcpConnection>::SipTypedTerminationLock((std::__shared_weak_count **)(a1 + 224), &v6, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *(unsigned char *)(a1 + 272) = 0;
  return a1;
}

void sub_1C554A41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  SipTransportGroup::~SipTransportGroup(v17, (uint64_t *)off_1F20DAEF8);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::~SipTlsTransportGroup(SipTlsTransportGroup *this)
{
  *(void *)this = &unk_1F20DACA0;
  *((void *)this + 1(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = &unk_1F20DAE38;
  *((void *)this + 27) = &unk_1F20DAE98;
  SipTlsTransportGroup::close(this);
  SipTypedTerminationLock<SipTcpConnection>::~SipTypedTerminationLock((uint64_t)this + 224);
  SipTransportGroup::~SipTransportGroup(this, (uint64_t *)off_1F20DAEF8);
}

{
  uint64_t vars8;

  SipTlsTransportGroup::~SipTlsTransportGroup(this);
  JUMPOUT(0x1C878E320);
}

void SipTlsTransportGroup::close(SipTlsTransportGroup *this)
{
  if (*((unsigned char *)this + 272))
  {
    xpc_object_t v2 = (void *)((char *)this + 80);
    uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
    (*(void (**)(void *, uint64_t))(*v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"closing TLS transport", 21);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    uint64_t v5 = (int8x8_t *)v2[22];
    xpc_object_t v4 = (std::__shared_weak_count *)v2[23];
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      if (v5)
      {
        uint64_t v5 = (int8x8_t *)*((void *)this + 32);
        xpc_object_t v6 = (std::__shared_weak_count *)*((void *)this + 33);
        if (v6)
        {
          char v7 = 0;
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_9;
        }
LABEL_8:
        char v7 = 1;
LABEL_9:
        v8[0] = 0;
        v8[1] = 0;
        SipTcpConnection::setManager(v5, v8);
        if ((v7 & 1) == 0) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
      }
    }
    else if (v5)
    {
      xpc_object_t v6 = 0;
      goto LABEL_8;
    }
    v9[0] = 0;
    v9[1] = 0;
    SipTypedTerminationLock<SipTcpConnection>::set((uint64_t)(v2 + 18), v9, (std::string *)((char *)this + 232));
    *((unsigned char *)this + 272) = 0;
  }
}

void sub_1C554A680(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipTlsTransportGroup::~SipTlsTransportGroup(SipTlsTransportGroup *this)
{
}

{
  SipTlsTransportGroup::~SipTlsTransportGroup((SipTlsTransportGroup *)((char *)this - 216));
}

{
  uint64_t vars8;

  SipTlsTransportGroup::~SipTlsTransportGroup((SipTlsTransportGroup *)((char *)this - 80));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipTlsTransportGroup::~SipTlsTransportGroup((SipTlsTransportGroup *)((char *)this - 216));
  JUMPOUT(0x1C878E320);
}

void SipTlsTransportGroup::loggableName(SipTlsTransportGroup *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C554A91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a16);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::initialize(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = 0;
  xpc_object_t v14 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(lpsrc, (void *)(a1 + 184));
  if (lpsrc[0]
  {
    uint64_t v13 = (uint64_t)v4;
    xpc_object_t v14 = (std::__shared_weak_count *)lpsrc[1];
    uint64_t v5 = lpsrc;
  }
  else
  {
    uint64_t v5 = (void **)&v13;
  }
  int8x8_t *v5 = 0;
  v5[1] = 0;
  if (lpsrc[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc[1]);
  }
  if (v13)
  {
    v12[0] = 0;
    v12[1] = 0;
    v11[0] = v13;
    v11[1] = (uint64_t)v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v10[0] = 0;
    v10[1] = 0;
    SipTcpConnection::create(v11, v10, 1, v12);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v6 = a1 + 80;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"unable to initialize outgoing connection. Connection manager is null", 68);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  *(void *)(a2 + 5ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 1ims::StackConfig::~StackConfig(this + 6) = 0x40000000;
  *(void *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_1C554AF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  ImsResult::~ImsResult((ImsResult *)&a18);
  uint64_t v33 = *(std::__shared_weak_count **)(v31 - 88);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(a1);
}

void SipTypedTerminationLock<SipTcpConnection>::set(uint64_t a1, uint64_t *a2, std::string *__str)
{
  uint64_t v3 = (void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *a2;
  if (*a2 != v4)
  {
    if (v4)
    {
      uint64_t v9 = *(std::__shared_weak_count **)(a1 + 40);
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v10 = *(std::__shared_weak_count **)(a1 + 40);
        *uint64_t v3 = 0;
        v3[1] = 0;
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        *uint64_t v3 = 0;
        *(void *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, a1 + 8);
      if (v9)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      uint64_t v5 = *a2;
    }
    if (v5)
    {
      std::string::operator=((std::string *)(a1 + 8), __str);
      uint64_t v11 = *a2;
      xpc_object_t v12 = (std::__shared_weak_count *)a2[1];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = *(std::__shared_weak_count **)(a1 + 40);
      *(void *)(a1 + 32) = v11;
      *(void *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v12;
      if (v13)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        uint64_t v11 = *(void *)(a1 + 32);
        xpc_object_t v12 = *(std::__shared_weak_count **)(a1 + 40);
      }
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v11) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 32))(v11, a1 + 8);
      }
      if (v12)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
  }
}

void sub_1C554B194(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipTlsTransportGroup::sendData(uint64_t a1@<X0>, ImsResult *a2@<X8>)
{
  uint64_t v5 = *(int8x8_t **)(a1 + 256);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 264);
  if (!v4)
  {
    if (v5)
    {
      uint64_t v6 = 0;
      goto LABEL_7;
    }
LABEL_12:
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    v9[0] = &unk_1F20B2680;
    v9[1] = &_bambiDomain;
    int v10 = 1073741827;
    uint64_t v8 = (const std::string *)ImsResult::operator<<<char [41]>((uint64_t)v9, "send() called on uninitialized transport");
    ImsResult::ImsResult(a2, v8);
    ImsResult::~ImsResult((ImsResult *)v9);
    return;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v5 = *(int8x8_t **)(a1 + 256);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 264);
  if (v6)
  {
    char v7 = 0;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
LABEL_7:
  char v7 = 1;
LABEL_8:
  SipTcpConnection::sendData(v5, (uint64_t)a2);
  if ((v7 & 1) == 0)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C554B2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if ((v11 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void SipTlsTransportGroup::localClientAddress(SipTlsTransportGroup *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *((void *)this + 32);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 33);
  if (!v4)
  {
    if (v5)
    {
      uint64_t v6 = 0;
      goto LABEL_7;
    }
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v5 = *((void *)this + 32);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v6)
  {
    char v7 = 0;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
LABEL_7:
  char v7 = 1;
LABEL_8:
  uint64_t v8 = *(void *)(v5 + 280);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 136))(v8);
    if (v7) {
      return;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    if (v7) {
      return;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1C554B3F4(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTlsTransportGroup::localServerAddress(SipTlsTransportGroup *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 184))();
}

uint64_t SipTlsTransportGroup::remoteServerUri(SipTlsTransportGroup *this)
{
  char v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)this + 25);
  if (v5) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 120))(v5);
  }
  else {
    uint64_t v6 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

void sub_1C554B4B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::processMessageFromTransport(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7 = (std::__shared_weak_count *)a1[26];
  if (v7)
  {
    long long v13 = std::__shared_weak_count::lock(v7);
    if (v13)
    {
      xpc_object_t v14 = v13;
      uint64_t v15 = a1[25];
      if (v15)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v18, a1 + 23);
        uint64_t v16 = 0;
        xpc_object_t v17 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 128))(v15, a2, a3, a4, a5, a6, &v18, &v16);
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
}

void sub_1C554B5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::printTransportInfo(SipTcpConnection **this, ImsOutStream *a2)
{
  (*((void (**)(void **__return_ptr))*this + 3))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = this[32];
  uint64_t v4 = (std::__shared_weak_count *)this[33];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (!v5) {
      return;
    }
    uint64_t v5 = this[32];
    uint64_t v6 = (std::__shared_weak_count *)this[33];
    if (v6)
    {
      char v7 = 0;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v5) {
      return;
    }
    uint64_t v6 = 0;
  }
  char v7 = 1;
LABEL_10:
  SipTcpConnection::printDebugInfo(v5, a2);
  if ((v7 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C554B70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if ((v15 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void SipTlsTransportGroup::addTransportSpecificHeaders(SipTlsTransportGroup *this, SipMessage *a2)
{
  SipTransportGroup::addAccessNetworkInfoHeader(this, a2);
  SipTransportGroup::addRoutableLocalAddressHeader(this, a2);
}

std::string *SipTlsTransportGroup::getTransportName(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v4 = a1 + 80;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"forcing TLS transport", 21);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  return std::string::operator=(a3, &SipTransport::kTransportTLS);
}

void SipTlsTransportGroup::triggerTcpErrors(SipTlsTransportGroup *this, const ImsResult *a2)
{
  uint64_t v5 = *((void *)this + 32);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (!v5)
  {
    uint64_t v7 = *((void *)this + 10);
    uint64_t v6 = (char *)this + 80;
    uint64_t v8 = (*(uint64_t (**)(char *))(v7 + 56))(v6);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Connection not initialized", 26);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    return;
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  char v15 = &unk_1F20B2680;
  uint64_t v16 = &_bambiDomain;
  int v17 = 1073741843;
  if (*((uint64_t **)a2 + 1) == &_bambiDomain)
  {
    int v9 = *((_DWORD *)a2 + 4);
    ImsResult::~ImsResult((ImsResult *)&v15);
    if (v9 == 1073741843)
    {
      uint64_t v10 = *((void *)this + 32);
      char v11 = (std::__shared_weak_count *)*((void *)this + 33);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t))(*(void *)v10 + 160))(v10);
      goto LABEL_20;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v15);
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  char v15 = &unk_1F20B2680;
  uint64_t v16 = &_bambiDomain;
  int v17 = 1073741850;
  if (*((uint64_t **)a2 + 1) == &_bambiDomain)
  {
    int v12 = *((_DWORD *)a2 + 4);
    ImsResult::~ImsResult((ImsResult *)&v15);
    if (v12 == 1073741850)
    {
      uint64_t v13 = *((void *)this + 32);
      char v11 = (std::__shared_weak_count *)*((void *)this + 33);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t))(*(void *)v13 + 168))(v13);
      goto LABEL_20;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v15);
  }
  uint64_t v14 = *((void *)this + 32);
  char v11 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, const ImsResult *))(*(void *)v14 + 144))(v14, a2);
LABEL_20:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C554BB04(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTlsTransportGroup::addUser(SipTlsTransportGroup *this, SipConnectionUser *a2)
{
  uint64_t v5 = *((void *)this + 32);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 33);
  if (!v4)
  {
    if (v5)
    {
      uint64_t v6 = 0;
      goto LABEL_7;
    }
LABEL_14:
    uint64_t v11 = *((void *)this + 10);
    uint64_t v10 = (char *)this + 80;
    uint64_t v12 = (*(uint64_t (**)(char *))(v11 + 56))(v10);
    (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))(v10, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Connection not initialized", 26);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    return 0;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  if (!v5) {
    goto LABEL_14;
  }
  uint64_t v5 = *((void *)this + 32);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v6)
  {
    char v7 = 0;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
LABEL_7:
  char v7 = 1;
LABEL_8:
  int v8 = (*(uint64_t (**)(uint64_t, SipConnectionUser *))(*(void *)v5 + 80))(v5, a2);
  if ((v7 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (!v8) {
    return 0;
  }
  return SipTransportGroup::addUser(this, a2);
}

void sub_1C554BCB8(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipTlsTransportGroup::removeUser(SipTlsTransportGroup *this, SipConnectionUser *a2)
{
  uint64_t v5 = *((void *)this + 32);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 33);
  if (!v4)
  {
    if (v5)
    {
      uint64_t v6 = 0;
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v9 = *((void *)this + 10);
    int v8 = (char *)this + 80;
    uint64_t v10 = (*(uint64_t (**)(char *))(v9 + 56))(v8);
    (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))(v8, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Connection not initialized", 26);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    return;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  if (!v5) {
    goto LABEL_13;
  }
  uint64_t v5 = *((void *)this + 32);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 33);
  if (!v6)
  {
LABEL_7:
    char v7 = 1;
    goto LABEL_8;
  }
  char v7 = 0;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_8:
  (*(void (**)(uint64_t, SipConnectionUser *))(*(void *)v5 + 88))(v5, a2);
  if ((v7 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  SipTransportGroup::removeUser(this, a2);
}

void sub_1C554BE58(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTlsTransportGroup::transportLayerRequestedClose(SipTlsTransportGroup *this)
{
  memset(v7, 0, sizeof(v7));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v5, (void *)this + 23);
  long long v6 = v5;
  long long v5 = 0uLL;
  LoggableString::LoggableString((LoggableString *)&__p, "transportLayerRequestedClose");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v7, (std::__shared_weak_count **)&v6, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Closing SipTlsTransportGroup when SipTranportLayer is going away", 64);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  SipTlsTransportGroup::close(this);
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v7);
}

void sub_1C554BFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, char a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTlsTransportGroup::sendMessageFromConnection(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

uint64_t non-virtual thunk to'SipTlsTransportGroup::sendMessageFromConnection(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 216) + 120))();
}

void SipTlsTransportGroup::processIncomingMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  char v7 = (std::__shared_weak_count *)a7[1];
  uint64_t v8 = *a7;
  uint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t *))(*(void *)a1 + 256))(a1, a2, a3, a4, a5, a6, 0, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C554C0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipTlsTransportGroup::processIncomingMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
}

void SipTlsTransportGroup::removeConnection(SipTlsTransportGroup *a1, uint64_t *a2)
{
  uint64_t v4 = *((void *)a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a1 + 33);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = *a2;
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (v5 != v4) {
      return;
    }
  }
  else if (*a2 != v4)
  {
    return;
  }
  SipTlsTransportGroup::close(a1);
  (*(void (**)(uint64_t *__return_ptr, SipTlsTransportGroup *))(*(void *)a1 + 336))(&v15, a1);
  if (v16)
  {
    long long v6 = std::__shared_weak_count::lock(v16);
    if (v6) {
      uint64_t v7 = v15;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v16) {
      std::__shared_weak_count::__release_weak(v16);
    }
    if (!v7)
    {
LABEL_20:
      if (!v6) {
        return;
      }
      goto LABEL_21;
    }
    uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 26);
    if (!v8 || (uint64_t v9 = std::__shared_weak_count::lock(v8)) == 0)
    {
LABEL_19:
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v7 + 192))(v7, 15, 0);
      goto LABEL_20;
    }
    uint64_t v10 = v9;
    uint64_t v11 = *((void *)a1 + 25);
    if (v11)
    {
      uint64_t v12 = *(std::__shared_weak_count **)(v11 + 16);
      if (v12 && (uint64_t v13 = std::__shared_weak_count::lock(v12)) != 0)
      {
        int v14 = *(unsigned __int8 *)(*(void *)(v11 + 8) + 2681);
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        if (!v14) {
          goto LABEL_18;
        }
      }
      else if (!MEMORY[0xA79])
      {
        goto LABEL_18;
      }
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v7 + 192))(v7, 23, 0);
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      if (!v6) {
        return;
      }
LABEL_21:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return;
    }
LABEL_18:
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    goto LABEL_19;
  }
}

void sub_1C554C290(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipTlsTransportGroup::removeConnection(uint64_t a1, uint64_t *a2)
{
}

uint64_t SipTlsTransportGroup::handleErrorFromConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 168))(a1, a3);
}

uint64_t non-virtual thunk to'SipTlsTransportGroup::handleErrorFromConnection(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 216) + 168))();
}

uint64_t SipTlsTransportGroup::messageEncoding(SipTlsTransportGroup *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)this + 25);
  if (v5) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 112))(v5);
  }
  else {
    uint64_t v6 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

void sub_1C554C390(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'SipTlsTransportGroup::messageEncoding(SipTlsTransportGroup *this)
{
  return SipTlsTransportGroup::messageEncoding((SipTlsTransportGroup *)((char *)this - 216));
}

void SipTlsTransportGroup::stackId(SipTlsTransportGroup *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 26);
  if (!v4)
  {
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5 || (uint64_t v6 = *((void *)this + 25)) == 0)
  {
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_39);
    if (!v5) {
      return;
    }
    goto LABEL_17;
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *(void *)(v6 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  if (*(char *)(v9 + 4183) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v9 + 4160), *(void *)(v9 + 4168));
  }
  else
  {
    uint64_t v10 = (long long *)(v9 + 4160);
    long long v11 = *v10;
    a2->__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v11;
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
LABEL_17:
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C554C4A0(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipTlsTransportGroup::stackId(SipTlsTransportGroup *this@<X0>, std::string *a2@<X8>)
{
}

void SipTlsTransportGroup::handleSystemWake(SipTlsTransportGroup *this)
{
  uint64_t v3 = *((void *)this + 32);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (!v3)
  {
    uint64_t v14 = *((void *)this + 10);
    uint64_t v13 = (char *)this + 80;
    uint64_t v15 = (*(uint64_t (**)(char *))(v14 + 64))(v13);
    (*(void (**)(char *, uint64_t))(*(void *)v13 + 16))(v13, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Can not send ping on uninitialized transport", 44);
    *(unsigned char *)(v15 + 17) = 0;
    return;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 26);
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *((void *)this + 25);
  if (!v7)
  {
LABEL_10:
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
LABEL_11:
    uint64_t v11 = *((void *)this + 32);
    uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 33);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *__return_ptr))(*(void *)v11 + 64))(v19);
    ImsResult::~ImsResult((ImsResult *)v19);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    return;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v7 + 16);
  if (v8 && (uint64_t v9 = std::__shared_weak_count::lock(v8)) != 0)
  {
    int v10 = *(unsigned __int8 *)(*(void *)(v7 + 8) + 2681);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (!v10) {
      goto LABEL_10;
    }
  }
  else if (!MEMORY[0xA79])
  {
    goto LABEL_10;
  }
  uint64_t v17 = *((void *)this + 10);
  uint64_t v16 = (char *)this + 80;
  uint64_t v18 = (*(uint64_t (**)(char *))(v17 + 64))(v16);
  (*(void (**)(char *, uint64_t))(*(void *)v16 + 16))(v16, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Skip AP wake ping for lazuli", 28);
  *(unsigned char *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v18 + 17) = 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1C554C70C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::updateServiceClass(SipTlsTransportGroup *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *((void *)this + 25);
      if (v4)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 200))(&v12);
        uint64_t v5 = v12;
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v5 = 104;
LABEL_7:
  uint64_t v7 = *((void *)this + 32);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 33);
  if (!v6)
  {
    if (!v7) {
      goto LABEL_20;
    }
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v7 = *((void *)this + 32);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 33);
  if (!v8)
  {
LABEL_13:
    char v9 = 1;
    goto LABEL_14;
  }
  char v9 = 0;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_14:
  uint64_t v10 = *(void *)(v7 + 280);
  uint64_t v11 = *(std::__shared_weak_count **)(v7 + 288);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 160))(v10, v5);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if ((v9 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
LABEL_20:
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C554C860(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::updateCrlfKeepAliveInterval(SipTlsTransportGroup *this, __int32 a2, __int32 a3)
{
  uint64_t v4 = (int8x8_t *)*((void *)this + 32);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4) {
    SipTcpConnection::updateCrlfKeepAliveInterval(v4, a2, a3);
  }
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C554C908(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipTlsTransportGroup::updateCrlfKeepAliveNetwork(SipTlsTransportGroup *this)
{
  uint64_t v2 = (int8x8_t *)*((void *)this + 32);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2) {
    SipTcpConnection::updateCrlfKeepAliveNetwork(v2);
  }
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C554C984(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipTlsTransportGroup::handleKeepAliveWake(SipTlsTransportGroup *this)
{
  uint64_t v2 = (SipTcpConnection *)*((void *)this + 32);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2) {
    SipTcpConnection::handleKeepAliveWake(v2);
  }
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C554CA00(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipTlsTransportGroup::sendMessage(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = a1[32];
  uint64_t v8 = (std::__shared_weak_count *)a1[33];
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v9)
  {
    *(void *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 1ims::StackConfig::~StackConfig(this + 6) = 0u;
    SipTransportGroup::sendMessage(a1, a2, a3, a4);
    if (a3)
    {
      if (*a3)
      {
        uint64_t v11 = a1[10];
        uint64_t v10 = a1 + 10;
        uint64_t v12 = (*(uint64_t (**)(void *))(v11 + 64))(v10);
        (*(void (**)(void *, uint64_t))(*v10 + 16))(v10, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"sendMessage: NULLing out connection", 35);
        *(unsigned char *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v12 + 17) = 0;
        uint64_t v13 = (std::__shared_weak_count *)a3[1];
        *a3 = 0;
        a3[1] = 0;
        if (v13)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
      }
    }
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    v16[0] = &unk_1F20B2680;
    v16[1] = &_bambiDomain;
    int v17 = 1073741827;
    uint64_t v14 = (ImsResult *)ImsResult::operator<<<char [56]>((uint64_t)v16, "SipTlsTransportGroup: sendMessage: no active connection");
    uint64_t v15 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 10), v14);
    ImsResult::ImsResult((ImsResult *)a4, (const std::string *)v15);
    ImsResult::~ImsResult((ImsResult *)v16);
  }
}

void sub_1C554CBF8(_Unwind_Exception *a1)
{
  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

uint64_t SipTlsTransportGroup::localPort(SipTlsTransportGroup *this)
{
  uint64_t v2 = *((void *)this + 32);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v2)
  {
    BOOL v7 = 0;
    goto LABEL_14;
  }
  uint64_t v4 = *((void *)this + 32);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(v4 + 280);
  if (!v6)
  {
    BOOL v7 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    if (!v5) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 136))(&v12);
  BOOL v7 = v12 != 0;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v5) {
LABEL_13:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
LABEL_14:
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *((void *)this + 32);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v8 + 280) + 136))(&v12);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 56))(v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v10;
}

void sub_1C554CD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTlsTransportGroup::isReliable(SipTlsTransportGroup *this)
{
  return 1;
}

void SipTlsTransportGroup::udpTransport(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void SipTlsTransportGroup::tcpTransport(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t SipTlsTransportGroup::initialized(SipTlsTransportGroup *this)
{
  return *((unsigned __int8 *)this + 272);
}

uint64_t SipTlsTransportGroup::isSecure(SipTlsTransportGroup *this)
{
  return 1;
}

uint64_t SipTlsTransportGroup::acceptsTransactionsFromConnection(SipTlsTransportGroup *this)
{
  return 0;
}

void SipTlsTransportGroup::group(SipTlsTransportGroup *this@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v4, (void *)this + 23);
  uint64_t v3 = (std::__shared_weak_count *)v4[1];
  *a2 = v4[0];
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t SipTlsTransportGroup::transportLayer@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 208);
  *a2 = *(void *)(this + 200);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t SipTlsTransportGroup::shouldResetConnection()
{
  return 0;
}

void non-virtual thunk to'SipTlsTransportGroup::group(SipTlsTransportGroup *this@<X0>, void *a2@<X8>)
{
}

uint64_t non-virtual thunk to'SipTlsTransportGroup::transportLayer@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this - 8);
  *a2 = *(void *)(this - 16);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t non-virtual thunk to'SipTlsTransportGroup::shouldResetConnection()
{
  return 0;
}

std::__shared_weak_count **SipTypedTerminationLock<SipTcpConnection>::SipTypedTerminationLock(std::__shared_weak_count **a1, std::__shared_weak_count **a2, const std::string *a3)
{
  SipTerminationLockBase::SipTerminationLockBase((SipTerminationLockBase *)a1, a3);
  void *v5 = &unk_1F20DB208;
  v5[4] = 0;
  uint64_t v6 = (std::__shared_weak_count **)(v5 + 4);
  void v5[5] = 0;
  BOOL v7 = *a2;
  uint64_t v8 = a2[1];
  if (!v8)
  {
    a1[5] = 0;
    a1[4] = v7;
    goto LABEL_7;
  }
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = a1 + 5;
  uint64_t v9 = a1[5];
  a1[4] = v7;
  a1[5] = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    uint64_t v8 = *v10;
    BOOL v7 = *v6;
    if (!*v10)
    {
LABEL_7:
      char v11 = 1;
      if (!v7) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  char v11 = 0;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v7) {
LABEL_8:
  }
    ((void (*)(std::__shared_weak_count *, std::__shared_weak_count **))v7->__on_zero_shared_weak)(v7, a1 + 1);
LABEL_9:
  if ((v11 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return a1;
}

void sub_1C554CF90(_Unwind_Exception *exception_object)
{
  char v6 = v4;
  if ((v6 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*v5);
  }
  *(void *)uint64_t v1 = &unk_1F20B7918;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

void SipTypedTerminationLock<SipTcpConnection>::~SipTypedTerminationLock(uint64_t a1)
{
  SipTypedTerminationLock<SipTcpConnection>::~SipTypedTerminationLock(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t SipTypedTerminationLock<SipTcpConnection>::~SipTypedTerminationLock(uint64_t a1)
{
  *(void *)a1 = &unk_1F20DB208;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1 + 8);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  char v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *(void *)a1 = &unk_1F20B7918;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void ims::analytics::MessageSessionSetupEvent::create(BOOL a1@<W0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, BOOL value)
{
  long long v19 = operator new(0x90uLL);
  v19[1] = 0;
  v19[2] = 0;
  void *v19 = &unk_1F20DB240;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v33 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v32 = *(std::string *)a5;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v31 = *(std::string *)a6;
  }
  if (*(char *)(a7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
  }
  else {
    std::string v30 = *(std::string *)a7;
  }
  if (*(char *)(a8 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a8, *(void *)(a8 + 8));
  }
  else {
    std::string __p = *(std::string *)a8;
  }
  v19[3] = &unk_1F20DB378;
  std::string::basic_string[abi:ne180100]<0>(&v52, "ims.ca.sessionsetupevent");
  ImsLogContainer::ImsLogContainer((uint64_t)(v19 + 4), &v52);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  v19[3] = &unk_1F20DB290;
  void v19[4] = &unk_1F20DB2C8;
  xpc_object_t v20 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v21 = v20;
  char v22 = v19 + 17;
  if (v20)
  {
    void *v22 = v20;
  }
  else
  {
    xpc_object_t v21 = xpc_null_create();
    void *v22 = v21;
    if (!v21)
    {
      xpc_object_t v23 = xpc_null_create();
      xpc_object_t v21 = 0;
      goto LABEL_25;
    }
  }
  if (MEMORY[0x1C878F160](v21) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v21);
    goto LABEL_26;
  }
  xpc_object_t v23 = xpc_null_create();
LABEL_25:
  void *v22 = v23;
LABEL_26:
  xpc_release(v21);
  xpc_object_t v50 = xpc_BOOL_create(a1);
  if (!v50) {
    xpc_object_t v50 = xpc_null_create();
  }
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"is_successful";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &v50, &v51);
  xpc_release(v51);
  xpc_object_t v51 = 0;
  xpc_release(v50);
  xpc_object_t v50 = 0;
  xpc_object_t v48 = xpc_int64_create(a2);
  if (!v48) {
    xpc_object_t v48 = xpc_null_create();
  }
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"latency";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &v48, &v49);
  xpc_release(v49);
  xpc_object_t v49 = 0;
  xpc_release(v48);
  xpc_object_t v48 = 0;
  if (a3)
  {
    xpc_object_t v46 = xpc_int64_create(a3);
    if (!v46) {
      xpc_object_t v46 = xpc_null_create();
    }
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
    v52.__r_.__value_.__l.__size_ = (std::string::size_type)"error_code";
    xpc::dict::object_proxy::operator=((uint64_t)&v52, &v46, &v47);
    xpc_release(v47);
    xpc_object_t v47 = 0;
    xpc_release(v46);
    xpc_object_t v46 = 0;
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v33.__r_.__value_.__l.__size_) {
      goto LABEL_42;
    }
    xpc_object_t v24 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&v33.__r_.__value_.__s + 23)) {
      goto LABEL_42;
    }
    xpc_object_t v24 = &v33;
  }
  xpc_object_t v44 = xpc_string_create((const char *)v24);
  if (!v44) {
    xpc_object_t v44 = xpc_null_create();
  }
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"failure_reason";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &v44, &v45);
  xpc_release(v45);
  xpc_object_t v45 = 0;
  xpc_release(v44);
  xpc_object_t v44 = 0;
LABEL_42:
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v25 = &v32;
  }
  else {
    char v25 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v42 = xpc_string_create((const char *)v25);
  if (!v42) {
    xpc_object_t v42 = xpc_null_create();
  }
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"direction";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &v42, &v43);
  xpc_release(v43);
  xpc_object_t v43 = 0;
  xpc_release(v42);
  xpc_object_t v42 = 0;
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v26 = &v31;
  }
  else {
    int v26 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  xpc_object_t object = xpc_string_create((const char *)v26);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"invite_type";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &object, &v41);
  xpc_release(v41);
  xpc_object_t v41 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v27 = &v30;
  }
  else {
    char v27 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v38 = xpc_string_create((const char *)v27);
  if (!v38) {
    xpc_object_t v38 = xpc_null_create();
  }
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"sip_transport_protocol";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &v38, &v39);
  xpc_release(v39);
  xpc_object_t v39 = 0;
  xpc_release(v38);
  xpc_object_t v38 = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v36 = xpc_string_create((const char *)p_p);
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"sip_security_protocol";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &v36, &v37);
  xpc_release(v37);
  xpc_object_t v37 = 0;
  xpc_release(v36);
  xpc_object_t v36 = 0;
  xpc_object_t v34 = xpc_BOOL_create(value);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"msrp_is_secure";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &v34, &v35);
  xpc_release(v35);
  xpc_object_t v35 = 0;
  xpc_release(v34);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  *a9 = v19 + 3;
  a9[1] = v19;
}

void sub_1C554D6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  std::__shared_weak_count::~__shared_weak_count(v42);
  operator delete(v44);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<anonymous namespace'::MessageSessionSetupEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DB240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::MessageSessionSetupEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DB240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::MessageSessionSetupEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::MessageSessionSetupEventImpl::~MessageSessionSetupEventImpl(_anonymous_namespace_::MessageSessionSetupEventImpl *this)
{
  *(void *)this = &unk_1F20DB290;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20DB2C8;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20DB290;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20DB2C8;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  JUMPOUT(0x1C878E320);
}

xpc_object_t anonymous namespace'::MessageSessionSetupEventImpl::getDict@<X0>(_anonymous_namespace_::MessageSessionSetupEventImpl *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  *a2 = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void *anonymous namespace'::MessageSessionSetupEventImpl::getName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "RCSMessageSessionSetup");
}

void non-virtual thunk to'anonymous namespace'::MessageSessionSetupEventImpl::~MessageSessionSetupEventImpl(_anonymous_namespace_::MessageSessionSetupEventImpl *this)
{
  *((void *)this - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20DB290;
  *(void *)this = &unk_1F20DB2C8;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 1IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *((void *)this - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20DB290;
  *(void *)this = &unk_1F20DB2C8;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 1IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1C878E320);
}

void SpamRiskMap::SpamRiskMap(SpamRiskMap *this, const ImsDictPref *a2)
{
  *((unsigned char *)this + 8) = 0;
  uint64_t v3 = (char *)this + 8;
  *((unsigned char *)this + 2(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  xpc_object_t v50 = (char *)this + 20;
  *((unsigned char *)this + 32) = 0;
  xpc_object_t v51 = (char *)this + 32;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  std::string __p = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  ImsDictPref::keysAndValues((uint64_t)a2, &v58, (char **)&__p);
  xpc_object_t v49 = (int *)(v3 + 4);
  std::string v52 = (int *)(v3 + 16);
  uint64_t v4 = v58;
  if (v59 != v58)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      memset(&v54, 0, sizeof(v54));
      BOOL v7 = (long long *)(v4 + v5);
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v7, *((void *)v7 + 1));
      }
      else
      {
        long long v8 = *v7;
        v54.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v8;
      }
      std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v54.__r_.__value_.__l.__size_;
      }
      if (!size) {
        goto LABEL_72;
      }
      uint64_t v10 = (uint64_t *)*((void *)__p + v6);
      if (!v10) {
        __cxa_bad_typeid();
      }
      uint64_t v12 = *v10;
      if (v11) {
        break;
      }
      {
        (*(void (**)(std::string *__return_ptr, uint64_t *))(*v10 + 48))(&__str, v10);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v15 = __str.__r_.__value_.__l.__size_;
        }
        if (v15)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          int v17 = memchr(p_str, 58, v15);
          if (v17) {
            std::string::size_type v18 = v17 - (unsigned char *)p_str;
          }
          else {
            std::string::size_type v18 = -1;
          }
        }
        else
        {
          std::string::size_type v18 = -1;
        }
        long long v19 = std::string::basic_string(&v61, &__str, 0, v18, (std::allocator<char> *)v62);
        v62[0] = 0;
        if (ims::strToLong((uint64_t *)v19, v62)) {
          int v20 = v62[0];
        }
        else {
          int v20 = 0;
        }
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        if (v18 == -1)
        {
          LODWORD(v1IMSCallOptions::~IMSCallOptions(this + 3) = v20;
        }
        else
        {
          xpc_object_t v21 = std::string::basic_string(&v61, &__str, v18 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v62);
          v62[0] = 0;
          if (ims::strToLong((uint64_t *)v21, v62)) {
            LODWORD(v1IMSCallOptions::~IMSCallOptions(this + 3) = v62[0];
          }
          else {
            LODWORD(v1IMSCallOptions::~IMSCallOptions(this + 3) = 0;
          }
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v61.__r_.__value_.__l.__data_);
          }
        }
        if ((int)v13 >= v20) {
          unsigned int v14 = v20;
        }
        else {
          unsigned int v14 = v13;
        }
        if (v20 <= (int)v13) {
          uint64_t v13 = v13;
        }
        else {
          uint64_t v13 = v20;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        goto LABEL_44;
      }
LABEL_72:
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      ++v6;
      uint64_t v4 = v58;
      v5 += 24;
      if (v6 >= 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3)) {
        goto LABEL_75;
      }
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t *))(v12 + 56))(v10);
    unsigned int v14 = v13;
LABEL_44:
    std::string::basic_string[abi:ne180100]<0>(&v61, "low");
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v22 = &v54;
    }
    else {
      char v22 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    int v23 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    xpc_object_t v24 = (void *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v25 = &v61;
    }
    else {
      char v25 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    int v26 = strcasecmp((const char *)v22, (const char *)v25);
    if (v23 < 0) {
      operator delete(v24);
    }
    char v27 = this;
    BOOL v28 = v3;
    if (!v26) {
      goto LABEL_71;
    }
    std::string::basic_string[abi:ne180100]<0>(&v61, "high");
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v29 = &v54;
    }
    else {
      int v29 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    int v30 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    std::string v31 = (void *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v32 = &v61;
    }
    else {
      std::string v32 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    int v33 = strcasecmp((const char *)v29, (const char *)v32);
    if (v30 < 0) {
      operator delete(v31);
    }
    BOOL v28 = v51;
    char v27 = (SpamRiskMap *)(v3 + 16);
    if (!v33) {
      goto LABEL_71;
    }
    std::string::basic_string[abi:ne180100]<0>(&v61, "medium");
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      xpc_object_t v34 = &v54;
    }
    else {
      xpc_object_t v34 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    int v35 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    xpc_object_t v36 = (void *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      xpc_object_t v37 = &v61;
    }
    else {
      xpc_object_t v37 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    int v38 = strcasecmp((const char *)v34, (const char *)v37);
    if (v35 < 0) {
      operator delete(v36);
    }
    char v27 = (SpamRiskMap *)(v3 + 4);
    BOOL v28 = v50;
    if (!v38)
    {
LABEL_71:
      *(void *)char v27 = v14 | (unint64_t)(v13 << 32);
      *BOOL v28 = 1;
    }
    goto LABEL_72;
  }
LABEL_75:
  if (*v3)
  {
    if (NumericalRange<int>::overlaps((int *)this, v49) && *v50)
    {
      int v39 = *((_DWORD *)this + 1);
      int v40 = v39 + 1;
      if (v39 + 1 > *((_DWORD *)this + 4)) {
        int v41 = v39 + 1;
      }
      else {
        int v41 = *((_DWORD *)this + 4);
      }
      *((_DWORD *)this + IMSCallOptions::~IMSCallOptions(this + 3) = v40;
      *((_DWORD *)this + 4) = v41;
      xpc_object_t v42 = v50;
LABEL_88:
      *xpc_object_t v42 = 1;
      goto LABEL_89;
    }
    if (NumericalRange<int>::overlaps((int *)this, v52) && *v51)
    {
      int v43 = *((_DWORD *)this + 1);
      int v44 = v43 + 1;
      if (v43 + 1 > *((_DWORD *)this + 7)) {
        int v45 = v43 + 1;
      }
      else {
        int v45 = *((_DWORD *)this + 7);
      }
      *((_DWORD *)this + ims::StackConfig::~StackConfig(this + 6) = v44;
      *((_DWORD *)this + 7) = v45;
      xpc_object_t v42 = v51;
      goto LABEL_88;
    }
  }
LABEL_89:
  if (*v50 && NumericalRange<int>::overlaps(v49, v52) && *v51)
  {
    int v46 = *((_DWORD *)this + 4);
    int v47 = v46 + 1;
    if (v46 + 1 > *((_DWORD *)this + 7)) {
      int v48 = v46 + 1;
    }
    else {
      int v48 = *((_DWORD *)this + 7);
    }
    *((_DWORD *)this + ims::StackConfig::~StackConfig(this + 6) = v47;
    *((_DWORD *)this + 7) = v48;
    *((unsigned char *)this + 32) = 1;
  }
  if (__p)
  {
    uint64_t v56 = __p;
    operator delete(__p);
  }
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
}

void sub_1C554E0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *__p,char *a27,uint64_t a28,char a29)
{
  if (__p)
  {
    a27 = __p;
    operator delete(__p);
  }
  std::string __p = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL SpamRiskMap::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (v2 | *(unsigned __int8 *)(a1 + 8)) {
      return 0;
    }
  }
  else if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(a2 + 20);
  if (*(unsigned char *)(a1 + 20)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (v4 | *(unsigned __int8 *)(a1 + 20)) {
      return 0;
    }
  }
  else if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12) || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    return 0;
  }
  BOOL v6 = (*(unsigned __int8 *)(a2 + 32) | *(unsigned __int8 *)(a1 + 32)) == 0;
  if (*(unsigned char *)(a1 + 32) && *(unsigned char *)(a2 + 32))
  {
    if (*(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)) {
      return *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
    }
    return 0;
  }
  return v6;
}

uint64_t NumericalRange<int>::overlaps(int *a1, int *a2)
{
  if (!*((unsigned char *)a1 + 8))
  {
    if (*((unsigned char *)a2 + 8))
    {
      int v2 = *a1;
      int v3 = *a2;
      goto LABEL_14;
    }
    return 0;
  }
  if (!*((unsigned char *)a2 + 8)) {
    return 0;
  }
  int v2 = *a1;
  int v3 = *a2;
  if (*a1 <= *a2)
  {
    int v4 = a1[1];
    if (v4 >= v3)
    {
      int v5 = a2[1];
      if (v2 <= v5 && v4 >= v5) {
        return 1;
      }
    }
  }
  if (v3 <= v2)
  {
    int v6 = a2[1];
    if (v6 >= v2)
    {
      int v7 = a1[1];
      if (v3 <= v7 && v6 >= v7) {
        return 1;
      }
    }
  }
LABEL_14:
  int v8 = a1[1];
  if (v2 > v3)
  {
    int v9 = a2[1];
    goto LABEL_17;
  }
  int v9 = a2[1];
  if (v3 > v8)
  {
LABEL_17:
    if (v8 < v9) {
      return 0;
    }
    goto LABEL_20;
  }
  if (v9 >= v8) {
    return 1;
  }
LABEL_20:
  BOOL v11 = v9 >= v2;
  return v3 <= v2 && v11;
}

uint64_t SpamRiskMap::classifyRisk(SpamRiskMap *this, int a2)
{
  if (*((unsigned char *)this + 8) && *(_DWORD *)this <= a2 && *((_DWORD *)this + 1) >= a2) {
    return 1;
  }
  if (*((unsigned char *)this + 20) && *((_DWORD *)this + 3) <= a2 && *((_DWORD *)this + 4) >= a2) {
    return 2;
  }
  if (!*((unsigned char *)this + 32) || *((_DWORD *)this + 6) > a2) {
    return 0;
  }
  if (*((_DWORD *)this + 7) >= a2) {
    return 3;
  }
  return 0;
}

uint64_t SDPMediaFingerprint::SDPMediaFingerprint(uint64_t a1, long long *a2, long long *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "fingerprint");
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20E5C78;
  if (SHIBYTE(v11) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v11;
  }
  *(void *)a1 = &unk_1F20DB3B0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v6;
  }
  int v7 = (std::string *)(a1 + 64);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 8(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *((void *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_1C554E484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 63) < 0) {
    operator delete(*v18);
  }
  *(void *)uint64_t v15 = v17;
  if (*(char *)(v15 + 39) < 0) {
    operator delete(*v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaFingerprint::SDPMediaFingerprint(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else {
    std::string __p = *(std::string *)(a2 + 16);
  }
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20E5C78;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::string *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = __p;
  }
  *(void *)a1 = &unk_1F20DB3B0;
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v4;
  }
  int v5 = (std::string *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 8(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *(void *)(a2 + 80);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1C554E618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 63) < 0) {
    operator delete(*v17);
  }
  *(void *)uint64_t v14 = v16;
  if (*(char *)(v14 + 39) < 0) {
    operator delete(*v15);
  }
  _Unwind_Resume(exception_object);
}

void SDPMediaFingerprint::~SDPMediaFingerprint(void **this)
{
  *this = &unk_1F20DB3B0;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  SDPMediaFingerprint::~SDPMediaFingerprint(this);
  JUMPOUT(0x1C878E320);
}

void *SDPMediaFingerprint::key@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "fingerprint");
}

void SDPMediaFingerprint::value(SDPMediaFingerprint *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) >= 0) {
    size_t v4 = *((unsigned __int8 *)this + 63);
  }
  else {
    size_t v4 = *((void *)this + 6);
  }
  memset(&__p, 0, sizeof(__p));
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if (*((char *)this + 63) >= 0) {
      long long v6 = (char *)this + 40;
    }
    else {
      long long v6 = (char *)*((void *)this + 5);
    }
    memmove(p_p, v6, v4);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v4) = 32;
  int v9 = (const std::string::value_type *)*((void *)this + 8);
  long long v8 = (char *)this + 64;
  int v7 = v9;
  int v10 = v8[23];
  if (v10 >= 0) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = v7;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = v8[23];
  }
  else {
    std::string::size_type v12 = *((void *)v8 + 1);
  }
  uint64_t v13 = std::string::append(&__p, v11, v12);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C554E828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::DeviceEvent::eventWithName(uint64_t *a1)
{
  uint64_t result = 0;
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  switch(v4)
  {
    case 0xAuLL:
      if (v3 >= 0) {
        int v5 = a1;
      }
      else {
        int v5 = (_WORD *)*a1;
      }
      if (*(void *)v5 == 0x6165526F69647541 && v5[4] == 31076) {
        uint64_t result = 8;
      }
      else {
        uint64_t result = (memcmp(v5, "SubEnabled", v4) == 0) << 9;
      }
      break;
    case 0xBuLL:
      if (v3 >= 0) {
        int v7 = a1;
      }
      else {
        int v7 = (void *)*a1;
      }
      if (*v7 == 0x7265736E496D6953 && *(void *)((char *)v7 + 3) == 0x6465747265736E49) {
        uint64_t result = 1;
      }
      else {
        uint64_t result = (memcmp(v7, "SubDisabled", v4) == 0) << 8;
      }
      break;
    case 0x13uLL:
      if (v3 < 0) {
        a1 = (uint64_t *)*a1;
      }
      if (*a1 == 0x656E616C70726941
        && a1[1] == 0x67676F5465646F4DLL
        && *(uint64_t *)((char *)a1 + 11) == 0x64656C67676F5465)
      {
        uint64_t result = 2;
      }
      else
      {
        uint64_t v11 = (uint64_t *)*a1;
        uint64_t v12 = a1[1];
        uint64_t v13 = *(uint64_t *)((char *)a1 + 11);
        if (v11 != (uint64_t *)0x656E616C70726941 || v12 != 0x62616E4565646F4DLL || v13 != 0x64656C62616E4565) {
          goto LABEL_67;
        }
        uint64_t result = 32;
      }
      break;
    case 0x14uLL:
      if (v3 < 0) {
        a1 = (uint64_t *)*a1;
      }
      if (*a1 == 0x654E737365636341 && a1[1] == 0x6168436B726F7774 && *((_DWORD *)a1 + 4) == 1684367214)
      {
        uint64_t result = 4;
      }
      else
      {
        std::string::size_type v18 = (uint64_t *)*a1;
        uint64_t v19 = a1[1];
        uint64_t v20 = *((unsigned int *)a1 + 4);
        int v23 = v18 == (uint64_t *)0x656E616C70726941 && v19 == 0x6173694465646F4DLL && v20 == 1684368482;
        uint64_t result = (v23 << 6);
      }
      break;
    case 0x15uLL:
      if (v3 < 0) {
        a1 = (uint64_t *)*a1;
      }
      xpc_object_t v24 = (uint64_t *)*a1;
      uint64_t v25 = a1[1];
      uint64_t v26 = *(uint64_t *)((char *)a1 + 13);
      if (v24 == (uint64_t *)0x4E676E6976726553 && v25 == 0x68436B726F777465 && v26 == 0x6465676E6168436BLL) {
        uint64_t result = 128;
      }
      else {
LABEL_67:
      }
        uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

const char *ims::DeviceEvent::nameForEvent(ims::DeviceEvent *this)
{
  if ((int)this > 127)
  {
    if ((int)this > 1023)
    {
      switch(this)
      {
        case 0x400:
          return "IMSHandoverStarted";
        case 0x800:
          return "IMSHandoverCompleted";
        case 0x1000:
          return "KeepAliveWakeup";
      }
    }
    else
    {
      switch(this)
      {
        case 0x80:
          return "ServingNetworkChanged";
        case 0x100:
          return "SubDisabled";
        case 0x200:
          return "SubEnabled";
      }
    }
    return (const char *)&str_12_4;
  }
  int v1 = this - 1;
  uint64_t result = "SimInserted";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      return "AirplaneModeToggled";
    case 2:
    case 4:
    case 5:
    case 6:
      return (const char *)&str_12_4;
    case 3:
      return "AccessNetworkChanged";
    case 7:
      return "AudioReady";
    default:
      if ("SimInserted" == 32)
      {
        uint64_t result = "AirplaneModeEnabled";
      }
      else
      {
        if ("SimInserted" != 64) {
          return (const char *)&str_12_4;
        }
        uint64_t result = "AirplaneModeDisabled";
      }
      break;
  }
  return result;
}

uint64_t ims::Services::serviceWithName(unsigned char *a1)
{
  int v1 = (const void **)a1;
  int v2 = (char)a1[23];
  if (v2 >= 0) {
    size_t v3 = a1[23];
  }
  else {
    size_t v3 = *((void *)a1 + 1);
  }
  switch(v3)
  {
    case 3uLL:
      if (v2 < 0) {
        a1 = *(unsigned char **)a1;
      }
      if (*(_WORD *)a1 == 28019 && a1[2] == 115) {
        return 4;
      }
      if (memcmp(a1, "reg", v3)) {
        goto LABEL_58;
      }
      return 64;
    case 4uLL:
      if (v2 < 0) {
        a1 = *(unsigned char **)a1;
      }
      if (memcmp(a1, "text", v3)) {
        goto LABEL_58;
      }
      return 32;
    case 5uLL:
      if (v2 < 0) {
        a1 = *(unsigned char **)a1;
      }
      if (*(_DWORD *)a1 == 1667854198 && a1[4] == 101) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1768191329 && a1[4] == 111) {
        return 8;
      }
      if (*(_DWORD *)a1 != 1701079414 || a1[4] != 111)
      {
        int v9 = "pager";
        goto LABEL_57;
      }
      return 2;
    case 6uLL:
      if (v2 >= 0) {
        int v10 = a1;
      }
      else {
        int v10 = *(unsigned char **)a1;
      }
      int v11 = *(_DWORD *)v10;
      int v12 = *((unsigned __int16 *)v10 + 2);
      if (v11 != 1633906793 || v12 != 27756) {
        goto LABEL_58;
      }
      return 16;
    case 9uLL:
      if (v2 >= 0) {
        uint64_t v14 = a1;
      }
      else {
        uint64_t v14 = *(unsigned char **)a1;
      }
      uint64_t v15 = *(void *)v14;
      int v16 = v14[8];
      if (v15 != 0x6E6967617373656DLL || v16 != 103) {
        goto LABEL_58;
      }
      return 4;
    case 0xAuLL:
      if (v2 < 0) {
        a1 = *(unsigned char **)a1;
      }
      if (memcmp(a1, "lazuliChat", v3)) {
        goto LABEL_58;
      }
      goto LABEL_59;
    case 0xBuLL:
      if (v2 < 0) {
        a1 = *(unsigned char **)a1;
      }
      int v9 = "lazuliPager";
LABEL_57:
      if (memcmp(a1, v9, v3)) {
        goto LABEL_58;
      }
      uint64_t result = 128;
      break;
    default:
LABEL_58:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "chat"))
      {
LABEL_59:
        uint64_t result = 256;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliChatbot") {
             || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "chatbot"))
      }
      {
        uint64_t result = 512;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliCpmOnly") {
             || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "cpm"))
      }
      {
        uint64_t result = 1024;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliLargeMsgOnly")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "large"))
      {
        uint64_t result = 2048;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliFileXfer") {
             || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "file"))
      }
      {
        uint64_t result = 4096;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliGeoPush") {
             || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "geo"))
      }
      {
        uint64_t result = 0x2000;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliImage") {
             || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "img"))
      }
      {
        uint64_t result = 0x4000;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliVideo") {
             || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "vid"))
      }
      {
        uint64_t result = 0x8000;
      }
      else
      {
        BOOL v18 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliIM");
        uint64_t result = 0x10000;
        if (!v18)
        {
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "im")) {
            uint64_t result = 0x10000;
          }
          else {
            uint64_t result = 0;
          }
        }
      }
      break;
  }
  return result;
}

const char *ims::Services::nameForService(int a1)
{
  if (a1 > 511)
  {
    if (a1 >= 0x2000)
    {
      if (a1 >= 0x8000)
      {
        if (a1 == 0x8000) {
          return "lazuliVideo";
        }
        if (a1 == 0x10000) {
          return "lazuliIM";
        }
      }
      else
      {
        if (a1 == 0x2000) {
          return "lazuliGeoPush";
        }
        if (a1 == 0x4000) {
          return "lazuliImage";
        }
      }
    }
    else if (a1 > 2047)
    {
      if (a1 == 2048) {
        return "lazuliLargeMsgOnly";
      }
      if (a1 == 4096) {
        return "lazuliFileXfer";
      }
    }
    else
    {
      if (a1 == 512) {
        return "lazuliChatbot";
      }
      if (a1 == 1024) {
        return "lazuliCpmOnly";
      }
    }
    return "none";
  }
  if (a1 > 31)
  {
    if (a1 > 127)
    {
      if (a1 == 128) {
        return "lazuliPager";
      }
      if (a1 == 256) {
        return "lazuliChat";
      }
    }
    else
    {
      if (a1 == 32) {
        return "text";
      }
      if (a1 == 64) {
        return "reg";
      }
    }
    return "none";
  }
  int v1 = a1 - 1;
  uint64_t result = "voice";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "video";
      break;
    case 2:
    case 4:
    case 5:
    case 6:
      return "none";
    case 3:
      uint64_t result = "sms";
      break;
    case 7:
      uint64_t result = "audio";
      break;
    default:
      if ("voice" != 16) {
        return "none";
      }
      uint64_t result = "ipcall";
      break;
  }
  return result;
}

void ims::Services::namesForMask(ims::Services *this@<X0>, std::string *a2@<X8>)
{
  int v2 = (int)this;
  memset(&v168, 0, sizeof(v168));
  if ((this & 1) == 0) {
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "voice");
  std::vector<std::string>::pointer end = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    long long v5 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v5;
    v168.__end_ = end + 1;
    if ((v2 & 8) == 0) {
      goto LABEL_30;
    }
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(__p, "audio");
    std::vector<std::string>::pointer v13 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      unint64_t v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v16) {
        unint64_t v16 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v16;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v17) {
        BOOL v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v17);
      }
      else {
        BOOL v18 = 0;
      }
      uint64_t v19 = v18 + v15;
      __v.__first_ = v18;
      __v.__begin_ = v19;
      __v.__end_cap_.__value_ = &v18[v17];
      long long v20 = *(_OWORD *)__p;
      v19->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
      __p[1] = 0;
      std::string::size_type v167 = 0;
      __p[0] = 0;
      __v.__end_ = v19 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      xpc_object_t v21 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v21;
      if (SHIBYTE(v167) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v14 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      v168.__end_ = v13 + 1;
    }
    goto LABEL_30;
  }
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v7) {
    unint64_t v7 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
     ? 0xAAAAAAAAAAAAAAALL
     : v7;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  int v9 = v8
     ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v8)
     : 0;
  int v10 = v9 + v6;
  __v.__first_ = v9;
  __v.__begin_ = v10;
  __v.__end_cap_.__value_ = &v9[v8];
  long long v11 = *(_OWORD *)__p;
  v10->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  __p[1] = 0;
  std::string::size_type v167 = 0;
  __p[0] = 0;
  __v.__end_ = v10 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  int v12 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v12;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 8) != 0) {
      goto LABEL_16;
    }
  }
  else
  {
LABEL_15:
    if ((v2 & 8) != 0) {
      goto LABEL_16;
    }
  }
  if ((v2 & 2) == 0) {
    goto LABEL_44;
  }
LABEL_30:
  std::string::basic_string[abi:ne180100]<0>(__p, "video");
  std::vector<std::string>::pointer v22 = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    long long v23 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
    v168.__end_ = v22 + 1;
    if ((v2 & 4) == 0) {
      goto LABEL_59;
    }
LABEL_45:
    std::string::basic_string[abi:ne180100]<0>(__p, "sms");
    std::vector<std::string>::pointer v31 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      unint64_t v34 = v33 + 1;
      if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v34) {
        unint64_t v34 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v35 = v34;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v35) {
        xpc_object_t v36 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v35);
      }
      else {
        xpc_object_t v36 = 0;
      }
      xpc_object_t v37 = v36 + v33;
      __v.__first_ = v36;
      __v.__begin_ = v37;
      __v.__end_cap_.__value_ = &v36[v35];
      long long v38 = *(_OWORD *)__p;
      v37->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
      __p[1] = 0;
      std::string::size_type v167 = 0;
      __p[0] = 0;
      __v.__end_ = v37 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      int v39 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v39;
      if (SHIBYTE(v167) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v32 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
      v168.__end_ = v31 + 1;
    }
    goto LABEL_59;
  }
  unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  unint64_t v25 = v24 + 1;
  if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v25) {
    unint64_t v25 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  }
  unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v25;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  char v27 = v26
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v26): 0;
  BOOL v28 = v27 + v24;
  __v.__first_ = v27;
  __v.__begin_ = v28;
  __v.__end_cap_.__value_ = &v27[v26];
  long long v29 = *(_OWORD *)__p;
  v28->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
  __p[1] = 0;
  std::string::size_type v167 = 0;
  __p[0] = 0;
  __v.__end_ = v28 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  int v30 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v30;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 4) != 0) {
      goto LABEL_45;
    }
  }
  else
  {
LABEL_44:
    if ((v2 & 4) != 0) {
      goto LABEL_45;
    }
  }
  if ((v2 & 0x10) == 0) {
    goto LABEL_73;
  }
LABEL_59:
  std::string::basic_string[abi:ne180100]<0>(__p, "ipcall");
  std::vector<std::string>::pointer v40 = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    long long v41 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
    v168.__end_ = v40 + 1;
    if ((v2 & 0x20) == 0) {
      goto LABEL_88;
    }
LABEL_74:
    std::string::basic_string[abi:ne180100]<0>(__p, "text");
    std::vector<std::string>::pointer v49 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      unint64_t v52 = v51 + 1;
      if (v51 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v52) {
        unint64_t v52 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v53 = v52;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v53) {
        std::string v54 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v53);
      }
      else {
        std::string v54 = 0;
      }
      uint64_t v55 = v54 + v51;
      __v.__first_ = v54;
      __v.__begin_ = v55;
      __v.__end_cap_.__value_ = &v54[v53];
      long long v56 = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
      __p[1] = 0;
      std::string::size_type v167 = 0;
      __p[0] = 0;
      __v.__end_ = v55 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      uint64_t v57 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v57;
      if (SHIBYTE(v167) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v50 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
      v168.__end_ = v49 + 1;
    }
    goto LABEL_88;
  }
  unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  unint64_t v43 = v42 + 1;
  if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v43) {
    unint64_t v43 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  }
  unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v43;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  int v45 = v44
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v44): 0;
  int v46 = v45 + v42;
  __v.__first_ = v45;
  __v.__begin_ = v46;
  __v.__end_cap_.__value_ = &v45[v44];
  long long v47 = *(_OWORD *)__p;
  v46->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
  __p[1] = 0;
  std::string::size_type v167 = 0;
  __p[0] = 0;
  __v.__end_ = v46 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  int v48 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v48;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 0x20) != 0) {
      goto LABEL_74;
    }
  }
  else
  {
LABEL_73:
    if ((v2 & 0x20) != 0) {
      goto LABEL_74;
    }
  }
  if ((v2 & 0x40) == 0) {
    goto LABEL_102;
  }
LABEL_88:
  std::string::basic_string[abi:ne180100]<0>(__p, "reg");
  std::vector<std::string>::pointer v58 = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    long long v59 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
    v168.__end_ = v58 + 1;
    if ((v2 & 0x80) == 0) {
      goto LABEL_117;
    }
LABEL_103:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliPager");
    std::vector<std::string>::pointer v67 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      unint64_t v70 = v69 + 1;
      if (v69 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v70) {
        unint64_t v70 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v71 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v71 = v70;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v71) {
        long long v72 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v71);
      }
      else {
        long long v72 = 0;
      }
      long long v73 = v72 + v69;
      __v.__first_ = v72;
      __v.__begin_ = v73;
      __v.__end_cap_.__value_ = &v72[v71];
      long long v74 = *(_OWORD *)__p;
      v73->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
      __p[1] = 0;
      std::string::size_type v167 = 0;
      __p[0] = 0;
      __v.__end_ = v73 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      uint64_t v75 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v75;
      if (SHIBYTE(v167) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v68 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
      v168.__end_ = v67 + 1;
    }
    goto LABEL_117;
  }
  unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  unint64_t v61 = v60 + 1;
  if (v60 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v61) {
    unint64_t v61 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  }
  unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v61;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  uint64_t v63 = v62
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v62): 0;
  long long v64 = v63 + v60;
  __v.__first_ = v63;
  __v.__begin_ = v64;
  __v.__end_cap_.__value_ = &v63[v62];
  long long v65 = *(_OWORD *)__p;
  v64->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v65;
  __p[1] = 0;
  std::string::size_type v167 = 0;
  __p[0] = 0;
  __v.__end_ = v64 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  int v66 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v66;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 0x80) != 0) {
      goto LABEL_103;
    }
  }
  else
  {
LABEL_102:
    if ((v2 & 0x80) != 0) {
      goto LABEL_103;
    }
  }
  if ((v2 & 0x100) == 0) {
    goto LABEL_131;
  }
LABEL_117:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliChat");
  std::vector<std::string>::pointer v76 = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    long long v77 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v77;
    v168.__end_ = v76 + 1;
    if ((v2 & 0x200) == 0) {
      goto LABEL_146;
    }
LABEL_132:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliChatbot");
    std::vector<std::string>::pointer v85 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      unint64_t v88 = v87 + 1;
      if (v87 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v88) {
        unint64_t v88 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v89 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v89 = v88;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v89) {
        long long v90 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v89);
      }
      else {
        long long v90 = 0;
      }
      uint64_t v91 = v90 + v87;
      __v.__first_ = v90;
      __v.__begin_ = v91;
      __v.__end_cap_.__value_ = &v90[v89];
      long long v92 = *(_OWORD *)__p;
      v91->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v91->__r_.__value_.__l.__data_ = v92;
      __p[1] = 0;
      std::string::size_type v167 = 0;
      __p[0] = 0;
      __v.__end_ = v91 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      uint64_t v93 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v93;
      if (SHIBYTE(v167) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v86 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v85->__r_.__value_.__l.__data_ = v86;
      v168.__end_ = v85 + 1;
    }
    goto LABEL_146;
  }
  unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  unint64_t v79 = v78 + 1;
  if (v78 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v79) {
    unint64_t v79 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  }
  unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v79;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  int v81 = v80
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v80): 0;
  int v82 = v81 + v78;
  __v.__first_ = v81;
  __v.__begin_ = v82;
  __v.__end_cap_.__value_ = &v81[v80];
  long long v83 = *(_OWORD *)__p;
  v82->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v83;
  __p[1] = 0;
  std::string::size_type v167 = 0;
  __p[0] = 0;
  __v.__end_ = v82 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  std::string v84 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v84;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 0x200) != 0) {
      goto LABEL_132;
    }
  }
  else
  {
LABEL_131:
    if ((v2 & 0x200) != 0) {
      goto LABEL_132;
    }
  }
  if ((v2 & 0x400) == 0) {
    goto LABEL_160;
  }
LABEL_146:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliCpmOnly");
  std::vector<std::string>::pointer v94 = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    long long v95 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v95;
    v168.__end_ = v94 + 1;
    if ((v2 & 0x800) == 0) {
      goto LABEL_175;
    }
LABEL_161:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliLargeMsgOnly");
    std::vector<std::string>::pointer v103 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      unint64_t v105 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      unint64_t v106 = v105 + 1;
      if (v105 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v106) {
        unint64_t v106 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v107 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v107 = v106;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v107) {
        uint64_t v108 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v107);
      }
      else {
        uint64_t v108 = 0;
      }
      long long v109 = v108 + v105;
      __v.__first_ = v108;
      __v.__begin_ = v109;
      __v.__end_cap_.__value_ = &v108[v107];
      long long v110 = *(_OWORD *)__p;
      v109->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v109->__r_.__value_.__l.__data_ = v110;
      __p[1] = 0;
      std::string::size_type v167 = 0;
      __p[0] = 0;
      __v.__end_ = v109 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      std::string v111 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v111;
      if (SHIBYTE(v167) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v104 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v103->__r_.__value_.__l.__data_ = v104;
      v168.__end_ = v103 + 1;
    }
    goto LABEL_175;
  }
  unint64_t v96 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  unint64_t v97 = v96 + 1;
  if (v96 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v97) {
    unint64_t v97 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  }
  unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v97;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  uint64_t v99 = v98
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v98): 0;
  uint64_t v100 = v99 + v96;
  __v.__first_ = v99;
  __v.__begin_ = v100;
  __v.__end_cap_.__value_ = &v99[v98];
  long long v101 = *(_OWORD *)__p;
  v100->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v101;
  __p[1] = 0;
  std::string::size_type v167 = 0;
  __p[0] = 0;
  __v.__end_ = v100 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  uint64_t v102 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v102;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 0x800) != 0) {
      goto LABEL_161;
    }
  }
  else
  {
LABEL_160:
    if ((v2 & 0x800) != 0) {
      goto LABEL_161;
    }
  }
  if ((v2 & 0x1000) == 0) {
    goto LABEL_189;
  }
LABEL_175:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliFileXfer");
  std::vector<std::string>::pointer v112 = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    long long v113 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v112->__r_.__value_.__l.__data_ = v113;
    v168.__end_ = v112 + 1;
    if ((v2 & 0x2000) == 0) {
      goto LABEL_204;
    }
LABEL_190:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliGeoPush");
    std::vector<std::string>::pointer v121 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      unint64_t v123 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      unint64_t v124 = v123 + 1;
      if (v123 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v124) {
        unint64_t v124 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v125 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v125 = v124;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v125) {
        uint64_t v126 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v125);
      }
      else {
        uint64_t v126 = 0;
      }
      uint64_t v127 = v126 + v123;
      __v.__first_ = v126;
      __v.__begin_ = v127;
      __v.__end_cap_.__value_ = &v126[v125];
      long long v128 = *(_OWORD *)__p;
      v127->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v127->__r_.__value_.__l.__data_ = v128;
      __p[1] = 0;
      std::string::size_type v167 = 0;
      __p[0] = 0;
      __v.__end_ = v127 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      uint64_t v129 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v129;
      if (SHIBYTE(v167) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v122 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v121->__r_.__value_.__l.__data_ = v122;
      v168.__end_ = v121 + 1;
    }
    goto LABEL_204;
  }
  unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  unint64_t v115 = v114 + 1;
  if (v114 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v115) {
    unint64_t v115 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  }
  unint64_t v116 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
       ? 0xAAAAAAAAAAAAAAALL
       : v115;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  std::string::size_type v117 = v116
       ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v116): 0;
  uint64_t v118 = v117 + v114;
  __v.__first_ = v117;
  __v.__begin_ = v118;
  __v.__end_cap_.__value_ = &v117[v116];
  long long v119 = *(_OWORD *)__p;
  v118->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v118->__r_.__value_.__l.__data_ = v119;
  __p[1] = 0;
  std::string::size_type v167 = 0;
  __p[0] = 0;
  __v.__end_ = v118 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  std::string v120 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v120;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 0x2000) != 0) {
      goto LABEL_190;
    }
  }
  else
  {
LABEL_189:
    if ((v2 & 0x2000) != 0) {
      goto LABEL_190;
    }
  }
  if ((v2 & 0x4000) == 0) {
    goto LABEL_218;
  }
LABEL_204:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliImage");
  std::vector<std::string>::pointer v130 = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    long long v131 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v130->__r_.__value_.__l.__data_ = v131;
    v168.__end_ = v130 + 1;
    if ((v2 & 0x8000) == 0) {
      goto LABEL_233;
    }
    goto LABEL_219;
  }
  unint64_t v132 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  unint64_t v133 = v132 + 1;
  if (v132 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v133) {
    unint64_t v133 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  }
  unint64_t v134 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
       ? 0xAAAAAAAAAAAAAAALL
       : v133;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  uint64_t v135 = v134
       ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v134): 0;
  std::string v136 = v135 + v132;
  __v.__first_ = v135;
  __v.__begin_ = v136;
  __v.__end_cap_.__value_ = &v135[v134];
  long long v137 = *(_OWORD *)__p;
  v136->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v136->__r_.__value_.__l.__data_ = v137;
  __p[1] = 0;
  std::string::size_type v167 = 0;
  __p[0] = 0;
  __v.__end_ = v136 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  uint64_t v138 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v138;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 0x8000) == 0) {
      goto LABEL_233;
    }
  }
  else
  {
LABEL_218:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_233;
    }
  }
LABEL_219:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliVideo");
  std::vector<std::string>::pointer v139 = v168.__end_;
  if (v168.__end_ >= v168.__end_cap_.__value_)
  {
    unint64_t v141 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
    unint64_t v142 = v141 + 1;
    if (v141 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v142) {
      unint64_t v142 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v143 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v143 = v142;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
    if (v143) {
      uint64_t v144 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v143);
    }
    else {
      uint64_t v144 = 0;
    }
    uint64_t v145 = v144 + v141;
    __v.__first_ = v144;
    __v.__begin_ = v145;
    __v.__end_cap_.__value_ = &v144[v143];
    long long v146 = *(_OWORD *)__p;
    v145->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v145->__r_.__value_.__l.__data_ = v146;
    __p[1] = 0;
    std::string::size_type v167 = 0;
    __p[0] = 0;
    __v.__end_ = v145 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
    std::string v147 = v168.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v168.__end_ = v147;
    if (SHIBYTE(v167) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v140 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v139->__r_.__value_.__l.__data_ = v140;
    v168.__end_ = v139 + 1;
  }
LABEL_233:
  if ((v2 & 0x10000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliIM");
    std::vector<std::string>::pointer v148 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      unint64_t v150 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      unint64_t v151 = v150 + 1;
      if (v150 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v151) {
        unint64_t v151 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v152 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v152 = v151;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v152) {
        long long v153 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v152);
      }
      else {
        long long v153 = 0;
      }
      v154 = v153 + v150;
      __v.__first_ = v153;
      __v.__begin_ = v154;
      __v.__end_cap_.__value_ = &v153[v152];
      long long v155 = *(_OWORD *)__p;
      v154->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v154->__r_.__value_.__l.__data_ = v155;
      __p[1] = 0;
      std::string::size_type v167 = 0;
      __p[0] = 0;
      __v.__end_ = v154 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      uint64_t v156 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v156;
      if (SHIBYTE(v167) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v149 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v148->__r_.__value_.__l.__data_ = v149;
      v168.__end_ = v148 + 1;
    }
  }
  std::vector<std::string>::pointer begin = v168.__begin_;
  if (v168.__begin_ == v168.__end_)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_12_4);
  }
  else
  {
    int64_t v158 = (char *)v168.__end_ - (char *)v168.__begin_;
    if ((std::vector<std::string>::pointer)((char *)v168.__end_ - (char *)v168.__begin_) == (std::vector<std::string>::pointer)24)
    {
      if (SHIBYTE(v168.__begin_->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(a2, v168.__begin_->__r_.__value_.__l.__data_, v168.__begin_->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v159 = *(_OWORD *)&v168.__begin_->__r_.__value_.__l.__data_;
        a2->__r_.__value_.__r.__words[2] = v168.__begin_->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v159;
      }
    }
    else
    {
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(a2, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
        int64_t v158 = (char *)v168.__end_ - (char *)v168.__begin_;
      }
      else
      {
        long long v160 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
        a2->__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v160;
      }
      if (0xAAAAAAAAAAAAAAABLL * (v158 >> 3) >= 2)
      {
        uint64_t v161 = 0;
        unint64_t v162 = 1;
        do
        {
          std::string::append(a2, ",", 1uLL);
          int v163 = SHIBYTE(v168.__begin_[v161 + 1].__r_.__value_.__r.__words[2]);
          if (v163 >= 0) {
            int data = &v168.__begin_[v161 + 1];
          }
          else {
            int data = (std::string *)v168.__begin_[v161 + 1].__r_.__value_.__l.__data_;
          }
          if (v163 >= 0) {
            std::string::size_type size = HIBYTE(v168.__begin_[v161 + 1].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v168.__begin_[v161 + 1].__r_.__value_.__l.__size_;
          }
          std::string::append(a2, (const std::string::value_type *)data, size);
          ++v162;
          ++v161;
        }
        while (v162 < 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3));
      }
    }
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1C5550538(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, char a8, uint64_t a9, char *__pa, std::__split_buffer<std::string> *a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a15 < 0) {
    operator delete(__pa);
  }
  __pa = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t SDPMedia::SDPMedia(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20DB408;
  *(_DWORD *)(a1 + 12) = a2;
  *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = a3;
  *(void *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 32) = a5;
  *(void *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = a1 + 40;
  *(void *)(a1 + 48) = a1 + 40;
  *(_OWORD *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = a1 + 88;
  *(void *)(a1 + 9ims::StackConfig::~StackConfig(this + 6) = a1 + 88;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = a1 + 112;
  *(void *)(a1 + 12(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = a1 + 112;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = a1 + 136;
  *(void *)(a1 + 144) = a1 + 136;
  *(void *)(a1 + 152) = 0;
  SDPPreconditionTable::SDPPreconditionTable((SDPPreconditionTable *)(a1 + 160), 1);
  *(unsigned char *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  return a1;
}

void sub_1C5550700(_Unwind_Exception *a1)
{
  unint64_t v6 = v4;
  std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::clear(v6);
  std::__list_imp<SDPRepeatTime>::clear(v5);
  std::__list_imp<SDPRepeatTime>::clear(v3);
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*(void **)(v1 + 64));
  }
  std::__list_imp<SDPMediaFormatInfo>::clear(v2);
  _Unwind_Resume(a1);
}

void SDPMedia::SDPMedia(SDPMedia *this, const SDPMedia *a2, SDPModel *a3)
{
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F20DB408;
  *((_DWORD *)this + IMSCallOptions::~IMSCallOptions(this + 3) = *((_DWORD *)a2 + 3);
  *((_OWORD *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *((_OWORD *)a2 + 1);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  unint64_t v6 = (char *)this + 40;
  *((void *)this + 5) = (char *)this + 40;
  *((void *)this + ims::StackConfig::~StackConfig(this + 6) = (char *)this + 40;
  *((void *)this + 7) = 0;
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 4);
    *((void *)this + 1(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *((void *)a2 + 10);
    *((_OWORD *)this + 4) = v7;
  }
  *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = (char *)this + 88;
  *((void *)this + 12) = (char *)this + 88;
  *((void *)this + 1IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  *((void *)this + 14) = (char *)this + 112;
  *((void *)this + 15) = (char *)this + 112;
  *((void *)this + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  *((void *)this + 17) = (char *)this + 136;
  *((void *)this + 18) = (char *)this + 136;
  *((void *)this + 19) = 0;
  SDPPreconditionTable::SDPPreconditionTable((SDPMedia *)((char *)this + 160), (const SDPMedia *)((char *)a2 + 160));
  *((unsigned char *)this + 184) = *((unsigned char *)a2 + 184);
  *((void *)this + 24) = a3;
  for (BOOL i = (void *)*((void *)a2 + 12); i != (void *)((char *)a2 + 88); BOOL i = (void *)i[1])
  {
    int v9 = std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection const&>((uint64_t)this + 88, 0, 0, (uint64_t)(i + 2));
    uint64_t v10 = *((void *)this + 11);
    *int v9 = v10;
    v9[1] = (char *)this + 88;
    *(void *)(v10 + 8) = v9;
    *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v9;
    ++*((void *)this + 13);
  }
  for (uint64_t j = *((void *)a2 + 15); (const SDPMedia *)j != (const SDPMedia *)((char *)a2 + 112); uint64_t j = *(void *)(j + 8))
  {
    int v12 = (char *)operator new(0x38uLL);
    v12[24] = *(unsigned char *)(j + 24);
    *((void *)v12 + 2) = &unk_1F20BAA28;
    long long v13 = *(_OWORD *)(j + 28);
    *(_OWORD *)(v12 + 38) = *(_OWORD *)(j + 38);
    *(_OWORD *)(v12 + 28) = v13;
    uint64_t v14 = *((void *)this + 14);
    *(void *)int v12 = v14;
    *((void *)v12 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = (char *)this + 112;
    *(void *)(v14 + 8) = v12;
    *((void *)this + 14) = v12;
    ++*((void *)this + 16);
  }
  for (uint64_t k = (void *)*((void *)a2 + 6); k != (void *)((char *)a2 + 40); uint64_t k = (void *)k[1])
  {
    unint64_t v16 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>((uint64_t)v6, 0, 0, (uint64_t)(k + 2));
    uint64_t v17 = *((void *)this + 5);
    void *v16 = v17;
    v16[1] = v6;
    *(void *)(v17 + 8) = v16;
    *((void *)this + 5) = v16;
    ++*((void *)this + 7);
  }
  SDPMedia::copyAttributes(this, a2);
}

void sub_1C5550950(_Unwind_Exception *a1)
{
  std::__list_imp<SDPMediaFormatInfo>::clear(v1);
  _Unwind_Resume(a1);
}

void SDPMedia::copyAttributes(SDPMedia *this, const SDPMedia *a2)
{
  std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::clear((unsigned int *)this + 34);
  size_t v4 = (char *)a2 + 136;
  for (uint64_t i = *((void *)a2 + 18); (char *)i != v4; uint64_t i = *(void *)(i + 8))
  {
    v7[0] = this;
    v7[1] = this;
    _OWORD v7[2] = this;
    _OWORD v7[3] = this;
    _OWORD v7[4] = this;
    v7[5] = this;
    v7[6] = this;
    v7[7] = this;
    v7[8] = this;
    v7[9] = this;
    v7[10] = this;
    v7[11] = this;
    v7[12] = this;
    v7[13] = this;
    uint64_t v6 = *(unsigned int *)(i + 136);
    if (v6 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    unint64_t v8 = v7;
    ((void (*)(void **, uint64_t))off_1F20DB470[v6])(&v8, i + 16);
  }
}

void SDPMedia::SDPMedia(SDPMedia *this, const SDPMedia *a2)
{
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F20DB408;
  *((_DWORD *)this + IMSCallOptions::~IMSCallOptions(this + 3) = *((_DWORD *)a2 + 3);
  *((_OWORD *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *((_OWORD *)a2 + 1);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  size_t v4 = (char *)this + 40;
  *((void *)this + 5) = (char *)this + 40;
  *((void *)this + ims::StackConfig::~StackConfig(this + 6) = (char *)this + 40;
  *((void *)this + 7) = 0;
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 4);
    *((void *)this + 1(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *((void *)a2 + 10);
    *((_OWORD *)this + 4) = v5;
  }
  *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = (char *)this + 88;
  *((void *)this + 12) = (char *)this + 88;
  *((void *)this + 1IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  *((void *)this + 14) = (char *)this + 112;
  *((void *)this + 15) = (char *)this + 112;
  *((void *)this + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  *((void *)this + 17) = (char *)this + 136;
  *((void *)this + 18) = (char *)this + 136;
  *((void *)this + 19) = 0;
  SDPPreconditionTable::SDPPreconditionTable((SDPMedia *)((char *)this + 160), (const SDPMedia *)((char *)a2 + 160));
  *((unsigned char *)this + 184) = *((unsigned char *)a2 + 184);
  *((void *)this + 24) = *((void *)a2 + 24);
  for (uint64_t i = (void *)*((void *)a2 + 12); i != (void *)((char *)a2 + 88); uint64_t i = (void *)i[1])
  {
    long long v7 = std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection const&>((uint64_t)this + 88, 0, 0, (uint64_t)(i + 2));
    uint64_t v8 = *((void *)this + 11);
    *long long v7 = v8;
    v7[1] = (char *)this + 88;
    *(void *)(v8 + 8) = v7;
    *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v7;
    ++*((void *)this + 13);
  }
  for (uint64_t j = *((void *)a2 + 15); (const SDPMedia *)j != (const SDPMedia *)((char *)a2 + 112); uint64_t j = *(void *)(j + 8))
  {
    uint64_t v10 = (char *)operator new(0x38uLL);
    v10[24] = *(unsigned char *)(j + 24);
    *((void *)v10 + 2) = &unk_1F20BAA28;
    long long v11 = *(_OWORD *)(j + 28);
    *(_OWORD *)(v10 + 38) = *(_OWORD *)(j + 38);
    *(_OWORD *)(v10 + 28) = v11;
    uint64_t v12 = *((void *)this + 14);
    *(void *)uint64_t v10 = v12;
    *((void *)v10 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = (char *)this + 112;
    *(void *)(v12 + 8) = v10;
    *((void *)this + 14) = v10;
    ++*((void *)this + 16);
  }
  for (uint64_t k = (void *)*((void *)a2 + 6); k != (void *)((char *)a2 + 40); uint64_t k = (void *)k[1])
  {
    uint64_t v14 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>((uint64_t)v4, 0, 0, (uint64_t)(k + 2));
    uint64_t v15 = *((void *)this + 5);
    *uint64_t v14 = v15;
    v14[1] = v4;
    *(void *)(v15 + 8) = v14;
    *((void *)this + 5) = v14;
    ++*((void *)this + 7);
  }
  SDPMedia::copyAttributes(this, a2);
}

void sub_1C5550C74(_Unwind_Exception *a1)
{
  std::__list_imp<SDPMediaFormatInfo>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t SDPMedia::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_OWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    std::__list_imp<SDPMediaFormatInfo>::clear((uint64_t *)(a1 + 40));
    for (uint64_t i = *(void *)(a2 + 48); i != a2 + 40; uint64_t i = *(void *)(i + 8))
    {
      long long v5 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(a1 + 40, 0, 0, i + 16);
      uint64_t v6 = *(void *)(a1 + 40);
      void *v5 = v6;
      v5[1] = a1 + 40;
      *(void *)(v6 + 8) = v5;
      *(void *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v5;
      ++*(void *)(a1 + 56);
    }
    std::__list_imp<SDPRepeatTime>::clear((uint64_t *)(a1 + 88));
    for (uint64_t j = *(void *)(a2 + 96); j != a2 + 88; uint64_t j = *(void *)(j + 8))
    {
      uint64_t v8 = std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection const&>(a1 + 88, 0, 0, j + 16);
      uint64_t v9 = *(void *)(a1 + 88);
      *uint64_t v8 = v9;
      v8[1] = a1 + 88;
      *(void *)(v9 + 8) = v8;
      *(void *)(a1 + 88) = v8;
      ++*(void *)(a1 + 104);
    }
    std::__list_imp<SDPRepeatTime>::clear((uint64_t *)(a1 + 112));
    for (uint64_t k = *(void *)(a2 + 120); k != a2 + 112; uint64_t k = *(void *)(k + 8))
    {
      long long v11 = (char *)operator new(0x38uLL);
      unsigned char v11[24] = *(unsigned char *)(k + 24);
      *((void *)v11 + 2) = &unk_1F20BAA28;
      long long v12 = *(_OWORD *)(k + 38);
      *(_OWORD *)(v11 + 28) = *(_OWORD *)(k + 28);
      *(_OWORD *)(v11 + 38) = v12;
      uint64_t v13 = *(void *)(a1 + 112);
      *(void *)long long v11 = v13;
      *((void *)v11 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = a1 + 112;
      *(void *)(v13 + 8) = v11;
      *(void *)(a1 + 112) = v11;
      ++*(void *)(a1 + 128);
    }
    SDPMedia::copyAttributes((SDPMedia *)a1, (const SDPMedia *)a2);
    std::vector<SDPPreconditionRow>::__assign_with_size[abi:ne180100]<SDPPreconditionRow*,SDPPreconditionRow*>((char *)(a1 + 160), *(char **)(a2 + 160), *(void *)(a2 + 168), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 2));
  }
  return a1;
}

void SDPMedia::~SDPMedia(SDPMedia *this)
{
  *(void *)this = &unk_1F20DB408;
  int v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v2;
    operator delete(v2);
  }
  std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::clear((unsigned int *)this + 34);
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)this + 14);
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)this + 11);
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  std::__list_imp<SDPMediaFormatInfo>::clear((uint64_t *)this + 5);
}

{
  uint64_t vars8;

  SDPMedia::~SDPMedia(this);
  JUMPOUT(0x1C878E320);
}

void SDPMedia::toStream(SDPMedia *this, ImsOutStream *a2)
{
  size_t v4 = (void *)*((void *)a2 + 1);
  LOBYTE(__p[0]) = 109;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  long long v5 = (void *)*((void *)a2 + 1);
  LOBYTE(__p[0]) = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  uint64_t v6 = (void *)*((void *)a2 + 1);
  LOBYTE(v25[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v25, 1);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  if (SBYTE7(v27) < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)this + 3))
  {
    long long v7 = (void *)*((void *)a2 + 1);
    LOBYTE(__p[0]) = 47;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)__p, 1);
    *((unsigned char *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
  }
  uint64_t v8 = (void *)*((void *)a2 + 1);
  LOBYTE(__p[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  if (SBYTE7(v27) < 0) {
    operator delete(__p[0]);
  }
  if ((*((_DWORD *)this + 8) - 7) <= 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" *", 2);
    *((unsigned char *)a2 + 17) = 0;
  }
  uint64_t v9 = (char *)this + 40;
  uint64_t v10 = *((void *)this + 6);
  if ((SDPMedia *)v10 != (SDPMedia *)((char *)this + 40))
  {
    do
    {
      if (*(_WORD *)(v10 + 24) != 255)
      {
        long long v11 = (void *)*((void *)a2 + 1);
        LOBYTE(__p[0]) = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)__p, 1);
        *((unsigned char *)a2 + 17) = 0;
        std::ostream::operator<<();
        *((unsigned char *)a2 + 17) = 0;
      }
      uint64_t v10 = *(void *)(v10 + 8);
    }
    while ((char *)v10 != v9);
  }
  if (*((void *)this + 2) || *((_DWORD *)this + 3) == 2)
  {
    uint64_t v12 = *((unsigned __int8 *)this + 87);
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *((void *)this + 9);
    }
    if (v12)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
      *((unsigned char *)a2 + 17) = 0;
      uint64_t v13 = (void *)*((void *)a2 + 1);
      LOBYTE(__p[0]) = 105;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 1);
      *((unsigned char *)a2 + 17) = 0;
      uint64_t v14 = (void *)*((void *)a2 + 1);
      LOBYTE(__p[0]) = 61;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
      *((unsigned char *)a2 + 17) = 0;
      LoggableString::LoggableString((std::string *)__p, (const std::string *)((char *)this + 64));
      (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
      if (SBYTE7(v27) < 0) {
        operator delete(__p[0]);
      }
    }
    for (uint64_t i = (void *)*((void *)this + 12); i != (void *)((char *)this + 88); uint64_t i = (void *)*(v16 - 1))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
      *((unsigned char *)a2 + 17) = 0;
      uint64_t v17 = i[2];
      unint64_t v16 = i + 2;
      (*(void (**)(void *, ImsOutStream *))(v17 + 16))(v16, a2);
    }
    for (uint64_t j = (void *)*((void *)this + 15); j != (void *)((char *)this + 112); uint64_t j = (void *)j[1])
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
      *((unsigned char *)a2 + 17) = 0;
      BOOL isHeld = SDPModel::isHeld(*((SDPModel **)this + 24));
      SDPBandwidth::toStream((SDPBandwidth *)(j + 2), a2, isHeld);
    }
  }
  if (*((unsigned char *)this + 184) || *((void *)this + 2) || *((_DWORD *)this + 3) == 2)
  {
    uint64_t v20 = *((void *)this + 6);
    if ((char *)v20 != v9)
    {
      while (*(_WORD *)(v20 + 24) == 255)
      {
LABEL_34:
        uint64_t v20 = *(void *)(v20 + 8);
        if ((char *)v20 == v9) {
          goto LABEL_38;
        }
      }
      if (*(char *)(v20 + 103) < 0)
      {
        if (!*(void *)(v20 + 88)) {
          goto LABEL_32;
        }
      }
      else if (!*(unsigned char *)(v20 + 103))
      {
LABEL_32:
        __p[0] = a2;
        __p[1] = a2;
        *(void *)&long long v27 = a2;
        *((void *)&v27 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = a2;
        BOOL v28 = a2;
        long long v29 = a2;
        uint64_t v21 = *(unsigned int *)(v20 + 232);
        if (v21 == -1) {
          goto LABEL_49;
        }
        v25[0] = __p;
        ((void (*)(void **, uint64_t))off_1F20DB820[v21])(v25, v20 + 112);
        goto LABEL_34;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
      *((unsigned char *)a2 + 17) = 0;
      SDPAttribute::toStream((SDPAttribute *)(v20 + 32), a2);
      goto LABEL_32;
    }
LABEL_38:
    if (*((void *)this + 2) || *((_DWORD *)this + 3) == 2)
    {
      uint64_t v22 = *((void *)this + 18);
      if ((SDPMedia *)v22 != (SDPMedia *)((char *)this + 136))
      {
        while (1)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
          *((unsigned char *)a2 + 17) = 0;
          __p[0] = a2;
          __p[1] = a2;
          *(void *)&long long v27 = a2;
          *((void *)&v27 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = a2;
          BOOL v28 = a2;
          long long v29 = a2;
          int v30 = a2;
          uint64_t v23 = *(unsigned int *)(v22 + 136);
          if (v23 == -1) {
            break;
          }
          v25[0] = __p;
          ((void (*)(void **, uint64_t))off_1F20DB508[v23])(v25, v22 + 16);
          uint64_t v22 = *(void *)(v22 + 8);
          if ((SDPMedia *)v22 == (SDPMedia *)((char *)this + 136)) {
            goto LABEL_43;
          }
        }
LABEL_49:
        std::__throw_bad_variant_access[abi:ne180100]();
      }
LABEL_43:
      for (uint64_t k = *((void *)this + 20); k != *((void *)this + 21); k += 20)
      {
        if (*(int *)(k + 16) > 0)
        {
          BOOL v28 = 0;
          *(_OWORD *)std::string __p = 0u;
          long long v27 = 0u;
          ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)__p);
        }
      }
    }
  }
}

void sub_1C5551550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void *SDPMedia::setPort(SDPMedia *this, uint64_t a2)
{
  __int16 v2 = a2;
  *((void *)this + 2) = a2;
  SDPMedia::mediaCandidateList(this, v7);
  for (uint64_t i = (void *)v7[1]; i != v7; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (*(_WORD *)(v4 + 40) == 2) {
      __int16 v5 = v2 + 1;
    }
    else {
      __int16 v5 = v2;
    }
    *(_WORD *)(v4 + 72) = v5;
  }
  return std::__list_imp<unsigned long long>::clear(v7);
}

void *SDPMedia::mediaCandidateList@<X0>(void *this@<X0>, void *a2@<X8>)
{
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  __int16 v2 = this + 17;
  uint64_t v3 = this[18];
  if ((void *)v3 != this + 17)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2;
    do
    {
      if (*(_DWORD *)(v3 + 136) == 2)
      {
        this = operator new(0x18uLL);
        this[1] = a2;
        this[2] = v3 + 16;
        *this = v6;
        v6[1] = this;
        *a2 = this;
        ++v5;
        uint64_t v6 = this;
        a2[2] = v5;
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while ((void *)v3 != v2);
  }
  return this;
}

void sub_1C55516A8(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned long long>::clear(v1);
  _Unwind_Resume(a1);
}

void SDPMedia::setPacketizationTime(SDPMedia *this, __int16 a2)
{
  uint64_t v4 = (char *)this + 136;
  uint64_t v5 = *((void *)this + 18);
  if ((SDPMedia *)v5 != (SDPMedia *)((char *)this + 136))
  {
    while (1)
    {
      if (*(_DWORD *)(v5 + 136) != 13) {
        goto LABEL_19;
      }
      (*(void (**)(void **__return_ptr))(*(void *)(v5 + 16) + 32))(__p);
      uint64_t v6 = (void *)HIBYTE(v17);
      if (SHIBYTE(v17) < 0) {
        uint64_t v6 = __p[1];
      }
      if (v6 != (void *)5) {
        break;
      }
      long long v7 = (void **)__p[0];
      if (SHIBYTE(v17) >= 0) {
        long long v7 = __p;
      }
      int v8 = *(_DWORD *)v7;
      int v9 = *((unsigned __int8 *)v7 + 4);
      BOOL v11 = v8 == 1835627632 && v9 == 101;
      if (SHIBYTE(v17) < 0) {
        goto LABEL_17;
      }
LABEL_18:
      if (v11)
      {
        *(_WORD *)(v5 + 5ims::StackConfig::~StackConfig(this + 6) = a2;
        return;
      }
LABEL_19:
      uint64_t v5 = *(void *)(v5 + 8);
      if ((char *)v5 == v4) {
        goto LABEL_20;
      }
    }
    BOOL v11 = 0;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_18;
    }
LABEL_17:
    operator delete(__p[0]);
    goto LABEL_18;
  }
LABEL_20:
  std::string::basic_string[abi:ne180100]<0>(v14, "ptime");
  SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute((uint64_t)__p, (uint64_t)v14, a2, 0);
  uint64_t v12 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPPacketizationTimeAttribute>((uint64_t)v4, 0, 0, (const SDPPacketizationTimeAttribute *)__p);
  v12[1] = v4;
  uint64_t v13 = *((void *)this + 17);
  *uint64_t v12 = v13;
  *(void *)(v13 + 8) = v12;
  *((void *)this + 17) = v12;
  ++*((void *)this + 19);
  __p[0] = &unk_1F20E5C78;
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_1C555185C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMedia::packetizationTime(SDPMedia *this)
{
  uint64_t v1 = (char *)this + 136;
  uint64_t v2 = *((void *)this + 18);
  if ((SDPMedia *)v2 == (SDPMedia *)((char *)this + 136)) {
    return 20;
  }
  while (*(_DWORD *)(v2 + 136) != 13)
  {
LABEL_19:
    uint64_t v2 = *(void *)(v2 + 8);
    if ((char *)v2 == v1) {
      return 20;
    }
  }
  (*(void (**)(void **__return_ptr))(*(void *)(v2 + 16) + 32))(__p);
  unint64_t v3 = v11;
  if ((v11 & 0x80u) != 0) {
    unint64_t v3 = (unint64_t)__p[1];
  }
  if (v3 != 5)
  {
    BOOL v8 = 0;
    if (((char)v11 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v4 = (void **)__p[0];
  if ((v11 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  int v5 = *(_DWORD *)v4;
  int v6 = *((unsigned __int8 *)v4 + 4);
  BOOL v8 = v5 == 1835627632 && v6 == 101;
  if ((char)v11 < 0) {
LABEL_17:
  }
    operator delete(__p[0]);
LABEL_18:
  if (!v8) {
    goto LABEL_19;
  }
  return *(unsigned __int16 *)(v2 + 56);
}

void SDPMedia::setAcceptTypes(void *a1, long long **a2)
{
  uint64_t v4 = (uint64_t)(a1 + 17);
  uint64_t v5 = a1[18];
  if ((void *)v5 == a1 + 17)
  {
LABEL_20:
    SDPMediaAcceptTypes::SDPMediaAcceptTypes((uint64_t)__p, a2);
    uint64_t v12 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaAcceptTypes>(v4, 0, 0, (const SDPMediaAcceptTypes *)__p);
    v12[1] = v4;
    uint64_t v13 = a1[17];
    *uint64_t v12 = v13;
    *(void *)(v13 + 8) = v12;
    a1[17] = v12;
    ++a1[19];
    SDPMediaAcceptTypes::~SDPMediaAcceptTypes(__p);
    return;
  }
  while (*(_DWORD *)(v5 + 136) != 15)
  {
LABEL_19:
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v4) {
      goto LABEL_20;
    }
  }
  (*(void (**)(void **__return_ptr))(*(void *)(v5 + 16) + 32))(__p);
  unint64_t v6 = v15;
  if ((v15 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  if (v6 != 12)
  {
    BOOL v11 = 0;
    if (((char)v15 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  long long v7 = (void **)__p[0];
  if ((v15 & 0x80u) == 0) {
    long long v7 = __p;
  }
  BOOL v8 = *v7;
  int v9 = *((_DWORD *)v7 + 2);
  BOOL v11 = v8 == (void *)0x742D747065636361 && v9 == 1936027769;
  if ((char)v15 < 0) {
LABEL_17:
  }
    operator delete(__p[0]);
LABEL_18:
  if (!v11) {
    goto LABEL_19;
  }
  if ((long long **)(v5 + 56) != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v5 + 56), (std::string *)*a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  }
}

void sub_1C5551B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void SDPMedia::acceptTypes(SDPMedia *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v3 = (char *)this + 136;
  uint64_t v4 = *((void *)this + 18);
  if ((SDPMedia *)v4 == (SDPMedia *)((char *)this + 136))
  {
LABEL_20:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  while (*(_DWORD *)(v4 + 136) != 15)
  {
LABEL_19:
    uint64_t v4 = *(void *)(v4 + 8);
    if ((char *)v4 == v3) {
      goto LABEL_20;
    }
  }
  (*(void (**)(void **__return_ptr))(*(void *)(v4 + 16) + 32))(__p);
  unint64_t v5 = v12;
  if ((v12 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  if (v5 != 12)
  {
    BOOL v10 = 0;
    if (((char)v12 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  unint64_t v6 = (void **)__p[0];
  if ((v12 & 0x80u) == 0) {
    unint64_t v6 = __p;
  }
  long long v7 = *v6;
  int v8 = *((_DWORD *)v6 + 2);
  BOOL v10 = v7 == (void *)0x742D747065636361 && v8 == 1936027769;
  if ((char)v12 < 0) {
LABEL_17:
  }
    operator delete(__p[0]);
LABEL_18:
  if (!v10) {
    goto LABEL_19;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *(long long **)(v4 + 56), *(long long **)(v4 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v4 + 64) - *(void *)(v4 + 56)) >> 3));
}

void SDPMedia::setAcceptWrappedTypes(void *a1, long long **a2)
{
  uint64_t v4 = (uint64_t)(a1 + 17);
  uint64_t v5 = a1[18];
  if ((void *)v5 == a1 + 17)
  {
LABEL_23:
    SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes((uint64_t)__p, a2);
    uint64_t v14 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaAcceptWrappedTypes>(v4, 0, 0, (const SDPMediaAcceptWrappedTypes *)__p);
    v14[1] = v4;
    uint64_t v15 = a1[17];
    *uint64_t v14 = v15;
    *(void *)(v15 + 8) = v14;
    a1[17] = v14;
    ++a1[19];
    SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(__p);
    return;
  }
  while (*(_DWORD *)(v5 + 136) != 16)
  {
LABEL_22:
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v4) {
      goto LABEL_23;
    }
  }
  (*(void (**)(void **__return_ptr))(*(void *)(v5 + 16) + 32))(__p);
  unint64_t v6 = v17;
  if ((v17 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  if (v6 != 20)
  {
    BOOL v13 = 0;
    if (((char)v17 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  long long v7 = (void **)__p[0];
  if ((v17 & 0x80u) == 0) {
    long long v7 = __p;
  }
  int v8 = *v7;
  int v9 = v7[1];
  int v10 = *((_DWORD *)v7 + 4);
  BOOL v13 = v8 == (void *)0x772D747065636361 && v9 == (void *)0x742D646570706172 && v10 == 1936027769;
  if ((char)v17 < 0) {
LABEL_20:
  }
    operator delete(__p[0]);
LABEL_21:
  if (!v13) {
    goto LABEL_22;
  }
  if ((long long **)(v5 + 56) != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v5 + 56), (std::string *)*a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  }
}

void sub_1C5551E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void SDPMedia::acceptWrappedTypes(SDPMedia *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v3 = (char *)this + 136;
  uint64_t v4 = *((void *)this + 18);
  if ((SDPMedia *)v4 == (SDPMedia *)((char *)this + 136))
  {
LABEL_23:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  while (*(_DWORD *)(v4 + 136) != 16)
  {
LABEL_22:
    uint64_t v4 = *(void *)(v4 + 8);
    if ((char *)v4 == v3) {
      goto LABEL_23;
    }
  }
  (*(void (**)(void **__return_ptr))(*(void *)(v4 + 16) + 32))(__p);
  unint64_t v5 = v14;
  if ((v14 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  if (v5 != 20)
  {
    BOOL v12 = 0;
    if (((char)v14 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  unint64_t v6 = (void **)__p[0];
  if ((v14 & 0x80u) == 0) {
    unint64_t v6 = __p;
  }
  long long v7 = *v6;
  int v8 = v6[1];
  int v9 = *((_DWORD *)v6 + 4);
  BOOL v12 = v7 == (void *)0x772D747065636361 && v8 == (void *)0x742D646570706172 && v9 == 1936027769;
  if ((char)v14 < 0) {
LABEL_20:
  }
    operator delete(__p[0]);
LABEL_21:
  if (!v12) {
    goto LABEL_22;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *(long long **)(v4 + 56), *(long long **)(v4 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v4 + 64) - *(void *)(v4 + 56)) >> 3));
}

void SDPMedia::setPath(SDPMedia *this, const LazuliRouteSet *a2)
{
  uint64_t v4 = (char *)this + 136;
  uint64_t v5 = *((void *)this + 18);
  if ((SDPMedia *)v5 == (SDPMedia *)((char *)this + 136))
  {
LABEL_14:
    SDPMediaPath::SDPMediaPath((SDPMediaPath *)__p, a2);
    int v9 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaPath>((uint64_t)v4, 0, 0, (const SDPMediaPath *)__p);
    v9[1] = v4;
    uint64_t v10 = *((void *)this + 17);
    *int v9 = v10;
    *(void *)(v10 + 8) = v9;
    *((void *)this + 17) = v9;
    ++*((void *)this + 19);
    SDPMediaPath::~SDPMediaPath(__p);
    return;
  }
  while (*(_DWORD *)(v5 + 136) != 14)
  {
LABEL_13:
    uint64_t v5 = *(void *)(v5 + 8);
    if ((char *)v5 == v4) {
      goto LABEL_14;
    }
  }
  (*(void (**)(void **__return_ptr))(*(void *)(v5 + 16) + 32))(__p);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  if (v6 != 4)
  {
    BOOL v8 = 0;
    if (((char)v12 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  long long v7 = (void **)__p[0];
  if ((v12 & 0x80u) == 0) {
    long long v7 = __p;
  }
  BOOL v8 = *(_DWORD *)v7 == 1752457584;
  if ((char)v12 < 0) {
LABEL_11:
  }
    operator delete(__p[0]);
LABEL_12:
  if (!v8) {
    goto LABEL_13;
  }
  LazuliRouteSet::operator=((LazuliRouteSet *)(v5 + 56), (const LazuliUri ***)a2);
}

void sub_1C55520C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void SDPMedia::path(SDPMedia *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (char *)this + 136;
  uint64_t v4 = *((void *)this + 18);
  if ((SDPMedia *)v4 == (SDPMedia *)((char *)this + 136))
  {
LABEL_14:
    *(void *)a2 = &unk_1F20E7F48;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
    return;
  }
  while (*(_DWORD *)(v4 + 136) != 14)
  {
LABEL_13:
    uint64_t v4 = *(void *)(v4 + 8);
    if ((char *)v4 == v3) {
      goto LABEL_14;
    }
  }
  (*(void (**)(void **__return_ptr))(*(void *)(v4 + 16) + 32))(__p);
  unint64_t v5 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  if (v5 != 4)
  {
    BOOL v7 = 0;
    if (((char)v9 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  unint64_t v6 = (void **)__p[0];
  if ((v9 & 0x80u) == 0) {
    unint64_t v6 = __p;
  }
  BOOL v7 = *(_DWORD *)v6 == 1752457584;
  if ((char)v9 < 0) {
LABEL_11:
  }
    operator delete(__p[0]);
LABEL_12:
  if (!v7) {
    goto LABEL_13;
  }
  LazuliRouteSet::LazuliRouteSet((LazuliRouteSet *)a2, (const LazuliRouteSet *)(v4 + 56));
}

void SDPMedia::setSetupState(void *a1, long long *a2)
{
  uint64_t v4 = (uint64_t)(a1 + 17);
  uint64_t v5 = a1[18];
  if ((void *)v5 == a1 + 17)
  {
LABEL_20:
    SDPMediaSetup::SDPMediaSetup((uint64_t)__p, a2);
    unsigned __int8 v12 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaSetup>(v4, 0, 0, (uint64_t)__p);
    v12[1] = v4;
    uint64_t v13 = a1[17];
    *unsigned __int8 v12 = v13;
    *(void *)(v13 + 8) = v12;
    a1[17] = v12;
    ++a1[19];
    SDPMediaSetup::~SDPMediaSetup(__p);
    return;
  }
  while (*(_DWORD *)(v5 + 136) != 17)
  {
LABEL_19:
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v4) {
      goto LABEL_20;
    }
  }
  (*(void (**)(void **__return_ptr))(*(void *)(v5 + 16) + 32))(__p);
  unint64_t v6 = v15;
  if ((v15 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  if (v6 != 5)
  {
    BOOL v11 = 0;
    if (((char)v15 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  BOOL v7 = (void **)__p[0];
  if ((v15 & 0x80u) == 0) {
    BOOL v7 = __p;
  }
  int v8 = *(_DWORD *)v7;
  int v9 = *((unsigned __int8 *)v7 + 4);
  BOOL v11 = v8 == 1970562419 && v9 == 112;
  if ((char)v15 < 0) {
LABEL_17:
  }
    operator delete(__p[0]);
LABEL_18:
  if (!v11) {
    goto LABEL_19;
  }
  std::string::operator=((std::string *)(v5 + 56), (const std::string *)a2);
}

void sub_1C5552354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void SDPMedia::setupState(SDPMedia *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v3 = (char *)this + 136;
  uint64_t v4 = *((void *)this + 18);
  if ((SDPMedia *)v4 == (SDPMedia *)((char *)this + 136))
  {
LABEL_20:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  while (*(_DWORD *)(v4 + 136) != 17)
  {
LABEL_19:
    uint64_t v4 = *(void *)(v4 + 8);
    if ((char *)v4 == v3) {
      goto LABEL_20;
    }
  }
  (*(void (**)(void **__return_ptr))(*(void *)(v4 + 16) + 32))(__p);
  unint64_t v5 = v13;
  if ((v13 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  if (v5 != 5)
  {
    BOOL v10 = 0;
    if (((char)v13 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  unint64_t v6 = (void **)__p[0];
  if ((v13 & 0x80u) == 0) {
    unint64_t v6 = __p;
  }
  int v7 = *(_DWORD *)v6;
  int v8 = *((unsigned __int8 *)v6 + 4);
  BOOL v10 = v7 == 1970562419 && v8 == 112;
  if ((char)v13 < 0) {
LABEL_17:
  }
    operator delete(__p[0]);
LABEL_18:
  if (!v10) {
    goto LABEL_19;
  }
  if (*(char *)(v4 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v4 + 56), *(void *)(v4 + 64));
  }
  else
  {
    long long v11 = *(_OWORD *)(v4 + 56);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v4 + 72);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v11;
  }
}

void SDPMedia::setFingerprint(void *a1, long long *a2, long long *a3)
{
  uint64_t v6 = (uint64_t)(a1 + 17);
  uint64_t v7 = a1[18];
  if ((void *)v7 == a1 + 17)
  {
LABEL_20:
    SDPMediaFingerprint::SDPMediaFingerprint((uint64_t)__p, a2, a3);
    unsigned __int8 v14 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaFingerprint>(v6, 0, 0, (uint64_t)__p);
    v14[1] = v6;
    uint64_t v15 = a1[17];
    *unsigned __int8 v14 = v15;
    *(void *)(v15 + 8) = v14;
    a1[17] = v14;
    ++a1[19];
    SDPMediaFingerprint::~SDPMediaFingerprint(__p);
    return;
  }
  while (*(_DWORD *)(v7 + 136) != 18)
  {
LABEL_19:
    uint64_t v7 = *(void *)(v7 + 8);
    if (v7 == v6) {
      goto LABEL_20;
    }
  }
  (*(void (**)(void **__return_ptr))(*(void *)(v7 + 16) + 32))(__p);
  unint64_t v8 = v17;
  if ((v17 & 0x80u) != 0) {
    unint64_t v8 = (unint64_t)__p[1];
  }
  if (v8 != 11)
  {
    BOOL v13 = 0;
    if (((char)v17 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  int v9 = (void **)__p[0];
  if ((v17 & 0x80u) == 0) {
    int v9 = __p;
  }
  BOOL v10 = *v9;
  uint64_t v11 = *(uint64_t *)((char *)v9 + 3);
  BOOL v13 = v10 == (void *)0x72707265676E6966 && v11 == 0x746E697270726567;
  if ((char)v17 < 0) {
LABEL_17:
  }
    operator delete(__p[0]);
LABEL_18:
  if (!v13) {
    goto LABEL_19;
  }
  std::string::operator=((std::string *)(v7 + 56), (const std::string *)a2);
  std::string::operator=((std::string *)(v7 + 80), (const std::string *)a3);
}

void sub_1C5552624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SDPMediaFingerprint::~SDPMediaFingerprint((void **)va);
  _Unwind_Resume(a1);
}

void SDPMedia::setMaxPacketizationTime(SDPMedia *this, __int16 a2)
{
  uint64_t v4 = (char *)this + 136;
  uint64_t v5 = *((void *)this + 18);
  if ((SDPMedia *)v5 != (SDPMedia *)((char *)this + 136))
  {
    while (1)
    {
      if (*(_DWORD *)(v5 + 136) != 13) {
        goto LABEL_13;
      }
      (*(void (**)(void **__return_ptr))(*(void *)(v5 + 16) + 32))(__p);
      uint64_t v6 = (void *)HIBYTE(v14);
      if (SHIBYTE(v14) < 0) {
        uint64_t v6 = __p[1];
      }
      if (v6 != (void *)8) {
        break;
      }
      uint64_t v7 = (void **)__p[0];
      if (SHIBYTE(v14) >= 0) {
        uint64_t v7 = __p;
      }
      BOOL v8 = *v7 == (void *)0x656D69747078616DLL;
      if (SHIBYTE(v14) < 0) {
        goto LABEL_11;
      }
LABEL_12:
      if (v8)
      {
        *(_WORD *)(v5 + 5ims::StackConfig::~StackConfig(this + 6) = a2;
        return;
      }
LABEL_13:
      uint64_t v5 = *(void *)(v5 + 8);
      if ((char *)v5 == v4) {
        goto LABEL_14;
      }
    }
    BOOL v8 = 0;
    if ((SHIBYTE(v14) & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_11:
    operator delete(__p[0]);
    goto LABEL_12;
  }
LABEL_14:
  std::string::basic_string[abi:ne180100]<0>(v11, "maxptime");
  SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute((uint64_t)__p, (uint64_t)v11, a2, 1);
  int v9 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPPacketizationTimeAttribute>((uint64_t)v4, 0, 0, (const SDPPacketizationTimeAttribute *)__p);
  v9[1] = v4;
  uint64_t v10 = *((void *)this + 17);
  *int v9 = v10;
  *(void *)(v10 + 8) = v9;
  *((void *)this + 17) = v9;
  ++*((void *)this + 19);
  __p[0] = &unk_1F20E5C78;
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
}

void sub_1C55527D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMedia::maxPacketizationTime(SDPMedia *this)
{
  uint64_t v1 = (char *)this + 136;
  uint64_t v2 = *((void *)this + 18);
  if ((SDPMedia *)v2 == (SDPMedia *)((char *)this + 136)) {
    return 0;
  }
  while (*(_DWORD *)(v2 + 136) != 13)
  {
LABEL_13:
    uint64_t v2 = *(void *)(v2 + 8);
    if ((char *)v2 == v1) {
      return 0;
    }
  }
  (*(void (**)(void **__return_ptr))(*(void *)(v2 + 16) + 32))(__p);
  unint64_t v3 = v8;
  if ((v8 & 0x80u) != 0) {
    unint64_t v3 = (unint64_t)__p[1];
  }
  if (v3 != 8)
  {
    BOOL v5 = 0;
    if (((char)v8 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v4 = (void **)__p[0];
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  BOOL v5 = *v4 == (void *)0x656D69747078616DLL;
  if ((char)v8 < 0) {
LABEL_11:
  }
    operator delete(__p[0]);
LABEL_12:
  if (!v5) {
    goto LABEL_13;
  }
  return *(unsigned __int16 *)(v2 + 56);
}

void SDPMedia::addCandidateAttribute(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  SDPMediaCandidate::SDPMediaCandidate((uint64_t)v6, 1, &__p, *(_WORD *)(a1 + 16));
  unint64_t v3 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaCandidate>(a1 + 136, 0, 0, (const SDPMediaCandidate *)v6);
  v3[1] = a1 + 136;
  uint64_t v4 = *(void *)(a1 + 136);
  *unint64_t v3 = v4;
  *(void *)(v4 + 8) = v3;
  *(void *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = v3;
  ++*(void *)(a1 + 152);
  SDPMediaCandidate::~SDPMediaCandidate(v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C55529D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t SDPMedia::enableEncryption(uint64_t a1, uint64_t a2, char a3, char a4, char a5, int a6)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6 != 23) {
    return 0;
  }
  unsigned __int8 v8 = v7 >= 0 ? (uint64_t *)a2 : *(uint64_t **)a2;
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v11 = *(uint64_t *)((char *)v8 + 15);
  BOOL v12 = v9 == 0x315F4D435F534541 && v10 == 0x5F43414D485F3832;
  if (!v12 || v11 != 0x30385F314148535FLL) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v35, "crypto");
  char v27 = 1;
  unint64_t v26 = &unk_1F20E5C78;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string __p = v35;
  }
  unint64_t v26 = &unk_1F20DBE20;
  __int16 v29 = 1;
  std::vector<unsigned char>::vector(v30, 0x1EuLL);
  char v31 = 1;
  char v32 = a3 ^ 1;
  char v33 = a4 ^ 1;
  char v34 = a5 ^ 1;
  uint64_t v20 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaCrypto>(a1 + 136, 0, 0, (const SDPMediaCrypto *)&v26);
  v20[1] = a1 + 136;
  uint64_t v21 = *(void *)(a1 + 136);
  *uint64_t v20 = v21;
  *(void *)(v21 + 8) = v20;
  *(void *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = v20;
  ++*(void *)(a1 + 152);
  SDPMediaCrypto::~SDPMediaCrypto((SDPMediaCrypto *)&v26);
  *(_DWORD *)(a1 + 32) = 4;
  if (a6)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "requested");
    SDPMediaEndToAccessEdgeProtection::SDPMediaEndToAccessEdgeProtection((uint64_t)&v26, (uint64_t **)v24);
    uint64_t v22 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaEndToAccessEdgeProtection const&>(a1 + 136, 0, 0, (const SDPMediaEndToAccessEdgeProtection *)&v26);
    v22[1] = a1 + 136;
    uint64_t v23 = *(void *)(a1 + 136);
    void *v22 = v23;
    *(void *)(v23 + 8) = v22;
    *(void *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = v22;
    ++*(void *)(a1 + 152);
    unint64_t v26 = &unk_1F20E5C78;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
  return 1;
}

void sub_1C5552C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 65) < 0) {
    operator delete(*(void **)(v22 - 88));
  }
  _Unwind_Resume(exception_object);
}

void SDPMedia::removePreconditions(SDPMedia *this)
{
  SDPPreconditionTable::SDPPreconditionTable((SDPPreconditionTable *)&__p, 1);
  if ((void **)((char *)this + 160) != &__p) {
    std::vector<SDPPreconditionRow>::__assign_with_size[abi:ne180100]<SDPPreconditionRow*,SDPPreconditionRow*>((char *)this + 160, (char *)__p, (uint64_t)v3, 0xCCCCCCCCCCCCCCCDLL * ((v3 - (unsigned char *)__p) >> 2));
  }
  if (__p)
  {
    unint64_t v3 = __p;
    operator delete(__p);
  }
}

void sub_1C5552D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPMedia::valid(SDPMedia *this)
{
  uint64_t v2 = (char *)this + 88;
  for (uint64_t i = *((void *)this + 12); (char *)i != v2; uint64_t i = *(void *)(i + 8))
  {
    if (((*(uint64_t (**)(void))(*(void *)(i + 16) + 24))() & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v15, "sdp.media");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_18);
      uint64_t v12 = ims::debug((uint64_t)v15, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"SDPMedia::valid() Invalid connection", 36);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_26:
      *(unsigned char *)(v12 + 17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      return 0;
    }
  }
  if (*((_DWORD *)this + 3) == 6)
  {
    uint64_t v4 = *((void *)this + 18);
    if ((SDPMedia *)v4 != (SDPMedia *)((char *)this + 136))
    {
      while (1)
      {
        uint64_t v5 = *(unsigned int *)(v4 + 136);
        if (v5 == -1) {
          goto LABEL_31;
        }
        v15[0] = __p;
        if ((((uint64_t (*)(void **, uint64_t))off_1F20DB5A0[v5])(v15, v4 + 16) & 1) == 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 8);
        if ((SDPMedia *)v4 == (SDPMedia *)((char *)this + 136)) {
          goto LABEL_10;
        }
      }
LABEL_25:
      std::string::basic_string[abi:ne180100]<0>(v15, "sdp.media");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_18);
      uint64_t v12 = ims::debug((uint64_t)v15, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"SDPMedia::valid() Invalid attribute", 35);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_26;
    }
  }
LABEL_10:
  uint64_t v6 = *((void *)this + 18);
  if ((SDPMedia *)v6 != (SDPMedia *)((char *)this + 136))
  {
    while (1)
    {
      uint64_t v7 = *(unsigned int *)(v6 + 136);
      if (v7 == -1) {
        break;
      }
      v15[0] = __p;
      if ((((uint64_t (*)(void **, uint64_t))off_1F20DB638[v7])(v15, v6 + 16) & 1) == 0) {
        goto LABEL_25;
      }
      uint64_t v6 = *(void *)(v6 + 8);
      if ((SDPMedia *)v6 == (SDPMedia *)((char *)this + 136)) {
        goto LABEL_14;
      }
    }
LABEL_31:
    std::__throw_bad_variant_access[abi:ne180100]();
  }
LABEL_14:
  uint64_t v8 = *((void *)this + 6);
  if ((SDPMedia *)v8 != (SDPMedia *)((char *)this + 40))
  {
    while (1)
    {
      uint64_t v9 = *(unsigned int *)(v8 + 232);
      if (v9 == -1) {
        goto LABEL_31;
      }
      v15[0] = __p;
      char v10 = ((uint64_t (*)(void **, uint64_t))off_1F20DB6D0[v9])(v15, v8 + 112);
      if (*(unsigned __int16 *)(v8 + 24) > 0x7Fu || (v10 & 1) == 0) {
        break;
      }
      uint64_t v8 = *(void *)(v8 + 8);
      if ((SDPMedia *)v8 == (SDPMedia *)((char *)this + 40)) {
        goto LABEL_19;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "sdp.media");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_18);
    uint64_t v12 = ims::debug((uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"SDPMedia::valid() Invalid mediaInfo", 35);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_26;
  }
LABEL_19:
  if (*((unsigned char *)this + 8) && *((_DWORD *)this + 3)) {
    return *((_DWORD *)this + 8) != 0;
  }
  return 0;
}

void sub_1C5553158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaFormatInfo::SDPMediaFormatInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F20DB438;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = &unk_1F20E7518;
  *(_WORD *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = 255;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(_DWORD *)(a1 + 88) = 0x10000;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(_WORD *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = 255;
  *(void *)(a1 + 9ims::StackConfig::~StackConfig(this + 6) = &unk_1F20B3A68;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 21ims::StackConfig::~StackConfig(this + 6) = 0;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  *(_WORD *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = *(_WORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v6[0] = a1;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = a1;
  v6[4] = a1;
  v6[5] = a1;
  uint64_t v4 = *(unsigned int *)(a2 + 216);
  if (v4 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v7 = v6;
  off_1F20DB700[v4]((int)&v7, (SDPMediaFormatUnknownParams *)(a2 + 96));
  return a1;
}

void sub_1C5553308(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(v2);
  SDPMediaRTPMap::~SDPMediaRTPMap(v1);
  _Unwind_Resume(a1);
}

uint64_t SDPMediaFormatInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
    *(_WORD *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = *(_WORD *)(a2 + 56);
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
    v6[0] = a1;
    v6[1] = a1;
    v6[2] = a1;
    v6[3] = a1;
    v6[4] = a1;
    v6[5] = a1;
    uint64_t v4 = *(unsigned int *)(a2 + 216);
    if (v4 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    uint64_t v7 = v6;
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorI10overloadedIJZN18SDPMediaFormatInfoaSERKS7_E3__0ZNS7_aSES9_E3__1ZNS7_aSES9_E3__2ZNS7_aSES9_E3__3ZNS7_aSES9_E3__4ZNS7_aSES9_E3__5ZNS7_aSES9_E3__6EEEEJRKNS0_6__implIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEEEEDcOT_DpOT0____fmatrix[v4]((int)&v7, (SDPMediaFormatUnknownParams *)(a2 + 96));
  }
  return a1;
}

void SDPMediaFormatInfo::~SDPMediaFormatInfo(SDPMediaFormatInfo *this)
{
  *(void *)this = &unk_1F20DB438;
  uint64_t v1 = (void **)((char *)this + 16);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)this + 24);
  SDPMediaRTPMap::~SDPMediaRTPMap(v1);
}

{
  void **v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20DB438;
  uint64_t v1 = (void **)((char *)this + 16);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)this + 24);
  SDPMediaRTPMap::~SDPMediaRTPMap(v1);
  JUMPOUT(0x1C878E320);
}

uint64_t SDPMediaFormatInfo::setPayloadType(SDPMediaFormatInfo *this, __int16 a2)
{
  __int16 v5 = a2;
  *((_WORD *)this + 4) = a2;
  if ((*((char *)this + 87) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 87)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*((void *)this + 9)) {
LABEL_3:
  }
    *((_WORD *)this + 28) = a2;
LABEL_4:
  v4[0] = &v5;
  v4[1] = &v5;
  void v4[2] = &v5;
  std::string v4[3] = &v5;
  void v4[4] = &v5;
  v4[5] = &v5;
  uint64_t v2 = *((unsigned int *)this + 54);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v6 = v4;
  return ((uint64_t (*)(void **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorI10overloadedIJZN18SDPMediaFormatInfo14setPayloadTypeEtE3__0ZNS7_14setPayloadTypeEtE3__1ZNS7_14setPayloadTypeEtE3__2ZNS7_14setPayloadTypeEtE3__3ZNS7_14setPayloadTypeEtE3__4ZNS7_14setPayloadTypeEtE3__5ZNS7_14setPayloadTypeEtE3__6EEEEJRNS0_6__implIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEEEEDcOT_DpOT0____fmatrix[v2])(&v6, (char *)this + 96);
}

uint64_t SDPMediaFormatInfo::bandwidthAS(SDPMediaFormatInfo *this, unsigned __int8 a2)
{
  unsigned __int8 v37 = a2;
  __p[0] = &v37;
  __p[1] = &v37;
  v30[0] = &v37;
  v30[1] = &v37;
  v31[0] = (SDPMediaAMRSettings *)&v37;
  v31[1] = (SDPMediaAMRSettings *)&v37;
  uint64_t v2 = *((unsigned int *)this + 54);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  long long v38 = __p;
  uint64_t v4 = ((uint64_t (*)(void ***, char *))off_1F20DB7C0[v2])(&v38, (char *)this + 96);
  if (v5) {
    return v4;
  }
  if ((*((char *)this + 87) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 87))
    {
      uint64_t v6 = (void **)((char *)this + 64);
      *(_OWORD *)std::string __p = *((_OWORD *)this + 4);
      v30[0] = *((void **)this + 10);
      goto LABEL_9;
    }
    return 0;
  }
  std::string::size_type v8 = *((void *)this + 9);
  if (!v8) {
    return 0;
  }
  uint64_t v6 = (void **)((char *)this + 64);
  std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)this + 8), v8);
LABEL_9:
  uint64_t v9 = (void *)HIBYTE(v30[0]);
  if (SHIBYTE(v30[0]) < 0) {
    uint64_t v9 = __p[1];
  }
  if (v9 != (void *)3)
  {
    BOOL v14 = 0;
    if (SHIBYTE(v30[0]) < 0) {
      goto LABEL_25;
    }
LABEL_23:
    if (!v14) {
      goto LABEL_26;
    }
LABEL_24:
    uint64_t v36 = 0;
    *(_OWORD *)char v34 = 0u;
    long long v35 = 0u;
    *(_OWORD *)char v32 = 0u;
    long long v33 = 0u;
    *(_OWORD *)int v30 = 0u;
    *(_OWORD *)char v31 = 0u;
    *(_OWORD *)std::string __p = 0u;
    SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)__p, 0);
    uint64_t v15 = SDPMediaEVSSettings::evsBandwidthASValue((unint64_t)v32[1], (SDPMediaAMRSettings *)LOWORD(v34[0]), BYTE5(v31[1]), v37);
    goto LABEL_66;
  }
  char v10 = (void **)__p[0];
  if (SHIBYTE(v30[0]) >= 0) {
    char v10 = __p;
  }
  int v11 = *(unsigned __int16 *)v10;
  int v12 = *((unsigned __int8 *)v10 + 2);
  BOOL v14 = v11 == 22085 && v12 == 83;
  if ((SHIBYTE(v30[0]) & 0x80000000) == 0) {
    goto LABEL_23;
  }
LABEL_25:
  operator delete(__p[0]);
  if (v14) {
    goto LABEL_24;
  }
LABEL_26:
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)this + 8), *((void *)this + 9));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v6;
    v30[0] = v6[2];
  }
  char v16 = (void *)HIBYTE(v30[0]);
  if (SHIBYTE(v30[0]) < 0) {
    char v16 = __p[1];
  }
  if (v16 != (void *)6)
  {
    BOOL v21 = 0;
    if ((SHIBYTE(v30[0]) & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  unsigned __int8 v17 = (void **)__p[0];
  if (SHIBYTE(v30[0]) >= 0) {
    unsigned __int8 v17 = __p;
  }
  int v18 = *(_DWORD *)v17;
  int v19 = *((unsigned __int16 *)v17 + 2);
  BOOL v21 = v18 == 760368449 && v19 == 16983;
  if (SHIBYTE(v30[0]) < 0) {
LABEL_43:
  }
    operator delete(__p[0]);
LABEL_44:
  if (v21)
  {
    *(_OWORD *)char v31 = 0u;
    *(_OWORD *)char v32 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)int v30 = 0u;
    SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)__p, 0, 1);
    uint64_t v15 = SDPMediaAMRSettings::amrBandwidthASValue((SDPMediaAMRSettings *)HIWORD(v31[1]), BYTE2(v31[1]), v37, BYTE3(v31[1]));
    goto LABEL_66;
  }
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)this + 8), *((void *)this + 9));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v6;
    v30[0] = v6[2];
  }
  uint64_t v22 = (void *)HIBYTE(v30[0]);
  if (SHIBYTE(v30[0]) < 0) {
    uint64_t v22 = __p[1];
  }
  if (v22 != (void *)3)
  {
    BOOL v27 = 0;
    if ((SHIBYTE(v30[0]) & 0x80000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  uint64_t v23 = (void **)__p[0];
  if (SHIBYTE(v30[0]) >= 0) {
    uint64_t v23 = __p;
  }
  int v24 = *(unsigned __int16 *)v23;
  int v25 = *((unsigned __int8 *)v23 + 2);
  BOOL v27 = v24 == 19777 && v25 == 82;
  if (SHIBYTE(v30[0]) < 0) {
LABEL_63:
  }
    operator delete(__p[0]);
LABEL_64:
  if (!v27) {
    return 0;
  }
  *(_OWORD *)char v31 = 0u;
  *(_OWORD *)char v32 = 0u;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)int v30 = 0u;
  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)__p, 0, 0);
  uint64_t v15 = SDPMediaAMRSettings::amrBandwidthASValue((SDPMediaAMRSettings *)HIWORD(v31[1]), BYTE2(v31[1]), v37, BYTE3(v31[1]));
LABEL_66:
  uint64_t v7 = v15;
  __p[0] = &unk_1F20E5C78;
  if (SHIBYTE(v31[0]) < 0) {
    operator delete(v30[0]);
  }
  return v7;
}

void sub_1C5553848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaFormatInfo::setSDPMediaFormatParams(uint64_t a1, uint64_t a2)
{
  v4[0] = a1;
  v4[1] = a1;
  void v4[2] = a1;
  std::string v4[3] = a1;
  void v4[4] = a1;
  v4[5] = a1;
  uint64_t v2 = *(unsigned int *)(a2 + 120);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  char v5 = v4;
  return ((uint64_t (*)(void **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorI10overloadedIJZN18SDPMediaFormatInfo23setSDPMediaFormatParamsERKNS_7variantIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEE3__0ZNS7_23setSDPMediaFormatParamsESH_E3__1ZNS7_23setSDPMediaFormatParamsESH_E3__2ZNS7_23setSDPMediaFormatParamsESH_E3__3ZNS7_23setSDPMediaFormatParamsESH_E3__4ZNS7_23setSDPMediaFormatParamsESH_E3__5ZNS7_23setSDPMediaFormatParamsESH_E3__6EEEEJRKNS0_6__implIJS9_SA_SB_SC_SD_SE_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v5);
}

void SDPMedia::addSDPConnection(SDPMedia *this, const SDPConnection *a2)
{
  unint64_t v3 = (char *)this + 88;
  SDPConnection::SDPConnection((uint64_t)v6, (uint64_t)a2);
  uint64_t v4 = std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection>((uint64_t)v3, 0, 0, (uint64_t)v6);
  v4[1] = v3;
  uint64_t v5 = *((void *)this + 11);
  *uint64_t v4 = v5;
  *(void *)(v5 + 8) = v4;
  *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v4;
  ++*((void *)this + 13);
  v6[0] = &unk_1F20CB730;
  if (v7 < 0) {
    operator delete((void *)v6[3]);
  }
}

void sub_1C5553980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SDPMedia::validConnection(SDPMedia *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (char *)this + 88;
  for (uint64_t i = *((void *)this + 12); (char *)i != v3; uint64_t i = *(void *)(i + 8))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)(i + 16) + 24))(i + 16))
    {
      SDPConnection::SDPConnection(a2, i + 16);
      *(unsigned char *)(a2 + 5ims::StackConfig::~StackConfig(this + 6) = 1;
      return;
    }
  }
  long long v6 = 0u;
  LOBYTE(vims::StackConfig::~StackConfig(this + 6) = 1;
  uint64_t v5 = &unk_1F20CB730;
  __p[0] = 0;
  __p[1] = 0;
  long long v8 = 0uLL;
  SDPConnection::SDPConnection(a2, (uint64_t)&v5);
  *(unsigned char *)(a2 + 5ims::StackConfig::~StackConfig(this + 6) = 0;
  uint64_t v5 = &unk_1F20CB730;
  if (SBYTE7(v8) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5553AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMedia::validateRemoteAddress(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 88;
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3 == a1 + 88) {
    return 0;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v5 = (unint64_t)a2[1];
  }
  if (v4 >= 0) {
    long long v6 = a2;
  }
  else {
    long long v6 = *a2;
  }
  while (1)
  {
    char v7 = (char *)(v3 + 40);
    uint64_t v8 = *(unsigned __int8 *)(v3 + 63);
    unint64_t v9 = v8;
    char v10 = (const void *)(v3 + 40);
    if (*(char *)(v3 + 63) < 0)
    {
      char v10 = *(const void **)(v3 + 40);
      unint64_t v9 = *(void *)(v3 + 48);
    }
    size_t v11 = v5 >= v9 ? v9 : v5;
    if (memcmp(v10, v6, v11) || v5 != v9) {
      break;
    }
LABEL_27:
    uint64_t v3 = *(void *)(v3 + 8);
    if (v3 == v2) {
      return 0;
    }
  }
  if ((v8 & 0x80) != 0)
  {
    char v7 = *(char **)(v3 + 40);
    uint64_t v8 = *(void *)(v3 + 48);
  }
  if (v8 >= 8)
  {
    BOOL v13 = &v7[v8];
    BOOL v14 = v7;
    do
    {
      uint64_t v15 = (char *)memchr(v14, 46, v8 - 7);
      if (!v15) {
        break;
      }
      char v16 = v15;
      if (*(void *)v15 == 0x64696C61766E692ELL)
      {
        uint64_t result = 1;
        if (v16 == v13 || v16 - v7 == -1) {
          return result;
        }
        goto LABEL_27;
      }
      BOOL v14 = v15 + 1;
      uint64_t v8 = v13 - (v16 + 1);
    }
    while (v8 >= 8);
  }
  return 1;
}

SDPConnection *SDPMedia::setConnectionAddress(SDPConnection *result, std::string *__str, unsigned __int8 *a3)
{
  uint64_t v3 = (char *)result + 88;
  uint64_t v4 = *((void *)result + 12);
  if ((SDPConnection *)v4 != (SDPConnection *)((char *)result + 88))
  {
    do
    {
      std::string::operator=((std::string *)(v4 + 40), __str);
      uint64_t result = SDPConnection::setAddressTypeFromString((SDPConnection *)(v4 + 16), a3);
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while ((char *)v4 != v3);
  }
  return result;
}

void *SDPMedia::mediaCryptoList@<X0>(void *this@<X0>, void *a2@<X8>)
{
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  uint64_t v2 = this + 17;
  uint64_t v3 = this[18];
  if ((void *)v3 != this + 17)
  {
    uint64_t v5 = 0;
    long long v6 = a2;
    do
    {
      if (*(_DWORD *)(v3 + 136) == 3)
      {
        this = operator new(0x18uLL);
        this[1] = a2;
        this[2] = v3 + 16;
        *this = v6;
        v6[1] = this;
        *a2 = this;
        ++v5;
        long long v6 = this;
        a2[2] = v5;
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while ((void *)v3 != v2);
  }
  return this;
}

void sub_1C5553CEC(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned long long>::clear(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(void **a1, const SDPRTCPXR *a2)
{
  uint64_t v3 = (void *)**a1;
  uint64_t v4 = operator new(0x90uLL);
  *uint64_t v4 = 0;
  v4[1] = 0;
  SDPRTCPXR::SDPRTCPXR((SDPRTCPXR *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 0;
  uint64_t v5 = v3[17];
  v3 += 17;
  *uint64_t v4 = v5;
  v4[1] = v3;
  *(void *)(v5 + 8) = v4;
  *uint64_t v3 = v4;
  ++v3[2];
}

void sub_1C5553D6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 8);
  uint64_t v4 = (char *)operator new(0x90uLL);
  uint64_t v5 = v4;
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  unsigned char v4[24] = *(unsigned char *)(a2 + 8);
  *((void *)v4 + 2) = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 32), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 16);
    *((void *)v4 + ims::StackConfig::~StackConfig(this + 6) = *(void *)(a2 + 32);
  }
  *((void *)v5 + 2) = &unk_1F20B6838;
  long long v6 = (std::string *)(v5 + 56);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 40);
    *((void *)v5 + 9) = *(void *)(a2 + 56);
  }
  *((_DWORD *)v5 + 34) = 1;
  uint64_t v8 = *(void *)(v3 + 136);
  char v7 = (void *)(v3 + 136);
  *(void *)uint64_t v5 = v8;
  *((void *)v5 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v7;
  *(void *)(v8 + 8) = v5;
  *char v7 = v5;
  ++v7[2];
}

void sub_1C5553E90(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1ims::StackConfig::~StackConfig(this + 6) = v3;
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaCandidate *a2)
{
  uint64_t v3 = *(void **)(*(void *)a1 + 16);
  uint64_t v4 = operator new(0x90uLL);
  *uint64_t v4 = 0;
  v4[1] = 0;
  SDPMediaCandidate::SDPMediaCandidate((SDPMediaCandidate *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 2;
  uint64_t v5 = v3[17];
  v3 += 17;
  *uint64_t v4 = v5;
  v4[1] = v3;
  *(void *)(v5 + 8) = v4;
  *uint64_t v3 = v4;
  ++v3[2];
}

void sub_1C5553F30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaCrypto *a2)
{
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = operator new(0x90uLL);
  *uint64_t v4 = 0;
  v4[1] = 0;
  SDPMediaCrypto::SDPMediaCrypto((SDPMediaCrypto *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 3;
  uint64_t v5 = v3[17];
  v3 += 17;
  *uint64_t v4 = v5;
  v4[1] = v3;
  *(void *)(v5 + 8) = v4;
  *uint64_t v3 = v4;
  ++v3[2];
}

void sub_1C5553FB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  uint64_t v4 = (char *)operator new(0x90uLL);
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  unsigned char v4[24] = *(unsigned char *)(a2 + 8);
  *((void *)v4 + 2) = &unk_1F20E5C78;
  uint64_t v5 = (std::string *)(v4 + 32);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 16);
    *((void *)v4 + ims::StackConfig::~StackConfig(this + 6) = *(void *)(a2 + 32);
  }
  *((void *)v4 + 2) = &unk_1F20C8300;
  *((_DWORD *)v4 + 14) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v4 + 34) = 4;
  uint64_t v7 = *(void *)(v3 + 136);
  long long v6 = (void *)(v3 + 136);
  *(void *)uint64_t v4 = v7;
  *((void *)v4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v6;
  *(void *)(v7 + 8) = v4;
  *long long v6 = v4;
  ++v6[2];
}

void sub_1C55540A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaEndToAccessEdgeProtection *a2)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 40);
  uint64_t result = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaEndToAccessEdgeProtection const&>(v2 + 136, 0, 0, a2);
  uint64_t v4 = *(void *)(v2 + 136);
  *uint64_t result = v4;
  result[1] = v2 + 136;
  *(void *)(v4 + 8) = result;
  *(void *)(v2 + 13ims::StackConfig::~StackConfig(this + 6) = result;
  ++*(void *)(v2 + 152);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaFormatUnknownParams *a2)
{
  uint64_t v3 = *(void **)(*(void *)a1 + 48);
  uint64_t v4 = operator new(0x90uLL);
  *uint64_t v4 = 0;
  v4[1] = 0;
  SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatUnknownParams *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 6;
  uint64_t v5 = v3[17];
  v3 += 17;
  *uint64_t v4 = v5;
  v4[1] = v3;
  *(void *)(v5 + 8) = v4;
  *uint64_t v3 = v4;
  ++v3[2];
}

void sub_1C5554180(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaFormatAMRParams *a2)
{
  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)v2, a2);
  v2[0] = &unk_1F20E5C78;
  if (v3 < 0) {
    operator delete((void *)v2[2]);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaFormatEVSParams *a2)
{
  SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)v2, a2);
  v2[0] = &unk_1F20E5C78;
  if (v3 < 0) {
    operator delete((void *)v2[2]);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else {
    std::string __p = *(std::string *)(a2 + 16);
  }
  __int16 v4 = *(_WORD *)(a2 + 40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v3, *(_WORD *)(a2 + 40));
  int v5 = *(_DWORD *)(a2 + 44);
  uint64_t v6 = *(void *)(a2 + 48);
  v3[0] = &unk_1F20E5C78;
  if (v4 < 0) {
    operator delete((void *)v3[2]);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v3, *(_WORD *)(a2 + 40));
  __int16 v5 = *(_WORD *)(a2 + 42);
  v3[0] = &unk_1F20E5C78;
  if (v4 < 0) {
    operator delete((void *)v3[2]);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaRTPMap *a2)
{
  char v3 = *(void **)(*(void *)a1 + 56);
  char v4 = operator new(0x90uLL);
  *char v4 = 0;
  v4[1] = 0;
  SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 12;
  uint64_t v5 = v3[17];
  v3 += 17;
  *char v4 = v5;
  v4[1] = v3;
  *(void *)(v5 + 8) = v4;
  *char v3 = v4;
  ++v3[2];
}

void sub_1C5554438(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(SDPMedia **)(*(void *)a1 + 64);
  int v3 = *(unsigned __int8 *)(a2 + 42);
  __int16 v4 = *(_WORD *)(a2 + 40);
  if (v3) {
    SDPMedia::setMaxPacketizationTime(v2, v4);
  }
  else {
    SDPMedia::setPacketizationTime(v2, v4);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaPath *a2)
{
  int v3 = *(void **)(*(void *)a1 + 88);
  __int16 v4 = operator new(0x90uLL);
  *__int16 v4 = 0;
  v4[1] = 0;
  SDPMediaPath::SDPMediaPath((SDPMediaPath *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 14;
  uint64_t v5 = v3[17];
  v3 += 17;
  *__int16 v4 = v5;
  v4[1] = v3;
  *(void *)(v5 + 8) = v4;
  *int v3 = v4;
  ++v3[2];
}

void sub_1C55544D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaAcceptTypes *a2)
{
  int v3 = *(void **)(*(void *)a1 + 72);
  __int16 v4 = operator new(0x90uLL);
  *__int16 v4 = 0;
  v4[1] = 0;
  SDPMediaAcceptTypes::SDPMediaAcceptTypes((SDPMediaAcceptTypes *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 15;
  uint64_t v5 = v3[17];
  v3 += 17;
  *__int16 v4 = v5;
  v4[1] = v3;
  *(void *)(v5 + 8) = v4;
  *int v3 = v4;
  ++v3[2];
}

void sub_1C555455C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaAcceptWrappedTypes *a2)
{
  int v3 = *(void **)(*(void *)a1 + 80);
  __int16 v4 = operator new(0x90uLL);
  *__int16 v4 = 0;
  v4[1] = 0;
  SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes((SDPMediaAcceptWrappedTypes *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 16;
  uint64_t v5 = v3[17];
  v3 += 17;
  *__int16 v4 = v5;
  v4[1] = v3;
  *(void *)(v5 + 8) = v4;
  *int v3 = v4;
  ++v3[2];
}

void sub_1C55545E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(*(void *)a1 + 96);
  __int16 v4 = operator new(0x90uLL);
  *__int16 v4 = 0;
  v4[1] = 0;
  uint64_t result = SDPMediaSetup::SDPMediaSetup((uint64_t)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 17;
  uint64_t v6 = v3[17];
  v3 += 17;
  *__int16 v4 = v6;
  v4[1] = v3;
  *(void *)(v6 + 8) = v4;
  *int v3 = v4;
  ++v3[2];
  return result;
}

void sub_1C5554664(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(*(void *)a1 + 104);
  __int16 v4 = operator new(0x90uLL);
  *__int16 v4 = 0;
  v4[1] = 0;
  uint64_t result = SDPMediaFingerprint::SDPMediaFingerprint((uint64_t)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 18;
  uint64_t v6 = v3[17];
  v3 += 17;
  *__int16 v4 = v6;
  v4[1] = v3;
  *(void *)(v6 + 8) = v4;
  *int v3 = v4;
  ++v3[2];
  return result;
}

void sub_1C55546E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void SDPRTCPXR::SDPRTCPXR(SDPRTCPXR *this, const SDPRTCPXR *a2)
{
  if (*((char *)a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 16);
  }
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F20E5C78;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::string *)((char *)this + 1ims::StackConfig::~StackConfig(this + 6) = __p;
  }
  *(void *)this = &unk_1F20BC9D8;
  *((void *)this + 5) = *((void *)a2 + 5);
  uint64_t v4 = *((void *)a2 + 6);
  *((void *)this + ims::StackConfig::~StackConfig(this + 6) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 56), *((long long **)a2 + 7), *((long long **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
  uint64_t v5 = (std::string *)((char *)this + 80);
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 5);
    *((void *)this + 12) = *((void *)a2 + 12);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1C5554860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v8 = *(std::__shared_weak_count **)(v4 + 48);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)uint64_t v4 = v6;
  if (*(char *)(v4 + 39) < 0) {
    operator delete(*v5);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPRTCPXR *a2)
{
  SDPRTCPXR::SDPRTCPXR((SDPRTCPXR *)v3, a2);
  SDPRTCPXR::~SDPRTCPXR(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else {
    std::string v6 = *(std::string *)(a2 + 16);
  }
  uint64_t v4 = &unk_1F20B6838;
  if (*(char *)(a2 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else {
    std::string v7 = *(std::string *)(a2 + 40);
  }
  SDPUnsupportedAttribute::~SDPUnsupportedAttribute(&v4);
  return 1;
}

void sub_1C5554D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaCandidate *a2)
{
  SDPMediaCandidate::SDPMediaCandidate((SDPMediaCandidate *)v3, a2);
  SDPMediaCandidate::~SDPMediaCandidate(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaCrypto *a2)
{
  SDPMediaCrypto::SDPMediaCrypto((SDPMediaCrypto *)v3, a2);
  SDPMediaCrypto::~SDPMediaCrypto((SDPMediaCrypto *)v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else {
    std::string __p = *(std::string *)(a2 + 16);
  }
  int v5 = *(_DWORD *)(a2 + 40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaEndToAccessEdgeProtection *a2)
{
  SDPMediaEndToAccessEdgeProtection::SDPMediaEndToAccessEdgeProtection((SDPMediaEndToAccessEdgeProtection *)v3, a2);
  v3[0] = &unk_1F20E5C78;
  if (v4 < 0) {
    operator delete((void *)v3[2]);
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaFormatUnknownParams *a2)
{
  SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatUnknownParams *)v3, a2);
  SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaFormatAMRParams *a2)
{
  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)v3, a2);
  v3[0] = &unk_1F20E5C78;
  if (v4 < 0) {
    operator delete((void *)v3[2]);
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaFormatEVSParams *a2)
{
  SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)v3, a2);
  v3[0] = &unk_1F20E5C78;
  if (v4 < 0) {
    operator delete((void *)v3[2]);
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else {
    std::string __p = *(std::string *)(a2 + 16);
  }
  __int16 v5 = *(_WORD *)(a2 + 40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v4, *(_WORD *)(a2 + 40));
  int v6 = *(_DWORD *)(a2 + 44);
  uint64_t v7 = *(void *)(a2 + 48);
  v4[0] = &unk_1F20E5C78;
  if (v5 < 0) {
    operator delete((void *)v4[2]);
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v4, *(_WORD *)(a2 + 40));
  __int16 v6 = *(_WORD *)(a2 + 42);
  v4[0] = &unk_1F20E5C78;
  if (v5 < 0) {
    operator delete((void *)v4[2]);
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaRTPMap *a2)
{
  SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)v3, a2);
  SDPMediaRTPMap::~SDPMediaRTPMap(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPPacketizationTimeAttribute *a2)
{
  SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute((SDPPacketizationTimeAttribute *)v3, a2);
  v3[0] = &unk_1F20E5C78;
  if (v4 < 0) {
    operator delete((void *)v3[2]);
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaPath *a2)
{
  SDPMediaPath::SDPMediaPath((SDPMediaPath *)v3, a2);
  SDPMediaPath::~SDPMediaPath(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaAcceptTypes *a2)
{
  SDPMediaAcceptTypes::SDPMediaAcceptTypes((SDPMediaAcceptTypes *)v3, a2);
  SDPMediaAcceptTypes::~SDPMediaAcceptTypes(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaAcceptWrappedTypes *a2)
{
  SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes((SDPMediaAcceptWrappedTypes *)v3, a2);
  SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  SDPMediaSetup::SDPMediaSetup((uint64_t)v3, a2);
  SDPMediaSetup::~SDPMediaSetup(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  SDPMediaFingerprint::SDPMediaFingerprint((uint64_t)v3, a2);
  SDPMediaFingerprint::~SDPMediaFingerprint(v3);
  return 1;
}

void SDPMediaEndToAccessEdgeProtection::SDPMediaEndToAccessEdgeProtection(SDPMediaEndToAccessEdgeProtection *this, const SDPMediaEndToAccessEdgeProtection *a2)
{
  if (*((char *)a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 16);
  }
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F20E5C78;
  char v4 = (std::string *)((char *)this + 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)this + 4) = *((void *)&__p.__r_.__value_.__l + 2);
  }
  *(void *)this = &unk_1F20C7E20;
  *((unsigned char *)this + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *((unsigned char *)a2 + 40);
}

void sub_1C55553EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaPath *a2)
{
  SDPMediaPath::SDPMediaPath((SDPMediaPath *)v3, a2);
  SDPMediaPath::~SDPMediaPath(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaAcceptTypes *a2)
{
  SDPMediaAcceptTypes::SDPMediaAcceptTypes((SDPMediaAcceptTypes *)v3, a2);
  SDPMediaAcceptTypes::~SDPMediaAcceptTypes(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaAcceptWrappedTypes *a2)
{
  SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes((SDPMediaAcceptWrappedTypes *)v3, a2);
  SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  SDPMediaSetup::SDPMediaSetup((uint64_t)v3, a2);
  SDPMediaSetup::~SDPMediaSetup(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  SDPMediaFingerprint::SDPMediaFingerprint((uint64_t)v3, a2);
  SDPMediaFingerprint::~SDPMediaFingerprint(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_21,SDPMedia::valid(void)::$_22,SDPMedia::valid(void)::$_23,SDPMedia::valid(void)::$_24,SDPMedia::valid(void)::$_25,SDPMedia::valid(void)::$_26,SDPMedia::valid(void)::$_27>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_21,SDPMedia::valid(void)::$_22,SDPMedia::valid(void)::$_23,SDPMedia::valid(void)::$_24,SDPMedia::valid(void)::$_25,SDPMedia::valid(void)::$_26,SDPMedia::valid(void)::$_27>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_21,SDPMedia::valid(void)::$_22,SDPMedia::valid(void)::$_23,SDPMedia::valid(void)::$_24,SDPMedia::valid(void)::$_25,SDPMedia::valid(void)::$_26,SDPMedia::valid(void)::$_27>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_21,SDPMedia::valid(void)::$_22,SDPMedia::valid(void)::$_23,SDPMedia::valid(void)::$_24,SDPMedia::valid(void)::$_25,SDPMedia::valid(void)::$_26,SDPMedia::valid(void)::$_27>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_21,SDPMedia::valid(void)::$_22,SDPMedia::valid(void)::$_23,SDPMedia::valid(void)::$_24,SDPMedia::valid(void)::$_25,SDPMedia::valid(void)::$_26,SDPMedia::valid(void)::$_27>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_21,SDPMedia::valid(void)::$_22,SDPMedia::valid(void)::$_23,SDPMedia::valid(void)::$_24,SDPMedia::valid(void)::$_25,SDPMedia::valid(void)::$_26,SDPMedia::valid(void)::$_27>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::SDPMediaFormatInfo(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatUnknownParams *a2)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::SDPMediaFormatInfo(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatAMRParams *a2)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::SDPMediaFormatInfo(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatEVSParams *a2)
{
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::SDPMediaFormatInfo(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<3ul,SDPMediaFormatDTMFParams,SDPMediaFormatDTMFParams const&>((unsigned int *)(*(void *)(*(void *)a1 + 24) + 96), *(void *)(*(void *)a1 + 24) + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::SDPMediaFormatInfo(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::SDPMediaFormatInfo(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<0ul,SDPMediaFormatUnknownParams,SDPMediaFormatUnknownParams const&>(SDPMediaFormatUnknownParams *this, uint64_t a2, SDPMediaFormatUnknownParams *a3)
{
  uint64_t v5 = *((unsigned int *)this + 30);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    (*(&off_1F20DB730 + v5))((int)&v7, this);
LABEL_7:
    *((_DWORD *)this + 3(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = -1;
    SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams(this, a3);
    *((_DWORD *)this + 3(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
    return;
  }
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
  std::string::operator=((std::string *)(a2 + 16), (const std::string *)((char *)a3 + 16));
  *(_WORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *((_WORD *)a3 + 20);
  std::string::operator=((std::string *)(a2 + 48), (const std::string *)a3 + 2);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<1ul,SDPMediaFormatAMRParams,SDPMediaFormatAMRParams const&>(SDPMediaFormatAMRParams *this, uint64_t a2, SDPMediaFormatAMRParams *a3)
{
  uint64_t v5 = *((unsigned int *)this + 30);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
      std::string::operator=((std::string *)(a2 + 16), (const std::string *)((char *)a3 + 16));
      *(_WORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *((_WORD *)a3 + 20);
      long long v7 = *(_OWORD *)((char *)a3 + 42);
      *(void *)(a2 + 5ims::StackConfig::~StackConfig(this + 6) = *((void *)a3 + 7);
      *(_OWORD *)(a2 + 42) = v7;
      return;
    }
    (*(&off_1F20DB730 + v5))((int)&v8, this);
  }
  *((_DWORD *)this + 3(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = -1;
  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams(this, a3);
  *((_DWORD *)this + 3(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<2ul,SDPMediaFormatEVSParams,SDPMediaFormatEVSParams const&>(SDPMediaFormatEVSParams *this, uint64_t a2, SDPMediaFormatEVSParams *a3)
{
  uint64_t v5 = *((unsigned int *)this + 30);
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
      std::string::operator=((std::string *)(a2 + 16), (const std::string *)((char *)a3 + 16));
      *(_WORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *((_WORD *)a3 + 20);
      long long v7 = *(_OWORD *)((char *)a3 + 58);
      long long v8 = *(_OWORD *)((char *)a3 + 74);
      long long v9 = *(_OWORD *)((char *)a3 + 90);
      *(void *)(a2 + 10ims::StackConfig::~StackConfig(this + 6) = *(void *)((char *)a3 + 106);
      *(_OWORD *)(a2 + 9(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = v9;
      *(_OWORD *)(a2 + 74) = v8;
      *(_OWORD *)(a2 + 58) = v7;
      *(_OWORD *)(a2 + 42) = *(_OWORD *)((char *)a3 + 42);
      return;
    }
    (*(&off_1F20DB730 + v5))((int)&v10, this);
  }
  *((_DWORD *)this + 3(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = -1;
  SDPMediaFormatEVSParams::SDPMediaFormatEVSParams(this, a3);
  *((_DWORD *)this + 3(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 2;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<3ul,SDPMediaFormatDTMFParams,SDPMediaFormatDTMFParams const&>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[30];
  if (v5 != -1)
  {
    if (v5 == 3)
    {
      *(unsigned char *)(a2 + 8) = *(unsigned char *)(a3 + 8);
      uint64_t result = (uint64_t)std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a3 + 16));
      *(_WORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *(_WORD *)(a3 + 40);
      return result;
    }
    (*(&off_1F20DB730 + v5))((int)&v8, (SDPMediaFormatUnknownParams *)a1);
  }
  a1[30] = -1;
  uint64_t result = std::__variant_detail::__alt<3ul,SDPMediaFormatDTMFParams>::__alt[abi:ne180100]<SDPMediaFormatDTMFParams>((uint64_t)a1, a3);
  a1[30] = 3;
  return result;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<4ul,SDPMediaFormatTTYParams,SDPMediaFormatTTYParams const&>(SDPMediaFormatParams *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *((unsigned int *)this + 30);
  if (v5 != -1)
  {
    if (v5 == 4)
    {
      *(unsigned char *)(a2 + 8) = *(unsigned char *)(a3 + 8);
      std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a3 + 16));
      *(_WORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *(_WORD *)(a3 + 40);
      uint64_t v7 = *(void *)(a3 + 44);
      *(_DWORD *)(a2 + 52) = *(_DWORD *)(a3 + 52);
      *(void *)(a2 + 44) = v7;
      return;
    }
    (*(&off_1F20DB730 + v5))((int)&v8, this);
  }
  *((_DWORD *)this + 3(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = -1;
  SDPMediaFormatParams::SDPMediaFormatParams(this, *(_WORD *)(a3 + 40));
  *(void *)this = &unk_1F20E2998;
  *((_DWORD *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *(_DWORD *)(a3 + 44);
  *((void *)this + ims::StackConfig::~StackConfig(this + 6) = *(void *)(a3 + 48);
  *((_DWORD *)this + 3(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 4;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<5ul,SDPMediaFormatTTYRedParams,SDPMediaFormatTTYRedParams const&>(SDPMediaFormatParams *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *((unsigned int *)this + 30);
  if (v5 != -1)
  {
    if (v5 == 5)
    {
      *(unsigned char *)(a2 + 8) = *(unsigned char *)(a3 + 8);
      std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a3 + 16));
      *(_DWORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *(_DWORD *)(a3 + 40);
      return;
    }
    (*(&off_1F20DB730 + v5))((int)&v7, this);
  }
  *((_DWORD *)this + 3(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = -1;
  SDPMediaFormatParams::SDPMediaFormatParams(this, *(_WORD *)(a3 + 40));
  *(void *)this = &unk_1F20E2A10;
  *((_WORD *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *(_WORD *)(a3 + 42);
  *((_DWORD *)this + 3(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatUnknownParams *a2)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatAMRParams *a2)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatEVSParams *a2)
{
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<3ul,SDPMediaFormatDTMFParams,SDPMediaFormatDTMFParams const&>((unsigned int *)(*(void *)(*(void *)a1 + 24) + 96), *(void *)(*(void *)a1 + 24) + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
}

_WORD ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setPayloadType(unsigned short)::$_0,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_1,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_2,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_3,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_4,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_5,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> &>(_WORD ***result, uint64_t a2)
{
  *(_WORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = ***result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setPayloadType(unsigned short)::$_0,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_1,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_2,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_3,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_4,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_5,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> &>(uint64_t result, uint64_t a2)
{
  *(_WORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = **(_WORD **)(*(void *)result + 8);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setPayloadType(unsigned short)::$_0,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_1,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_2,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_3,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_4,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_5,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> &>(uint64_t result, uint64_t a2)
{
  *(_WORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = **(_WORD **)(*(void *)result + 16);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setPayloadType(unsigned short)::$_0,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_1,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_2,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_3,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_4,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_5,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> &>(uint64_t result, uint64_t a2)
{
  *(_WORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = **(_WORD **)(*(void *)result + 24);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setPayloadType(unsigned short)::$_0,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_1,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_2,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_3,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_4,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_5,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> &>(uint64_t result, uint64_t a2)
{
  *(_WORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = **(_WORD **)(*(void *)result + 32);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setPayloadType(unsigned short)::$_0,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_1,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_2,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_3,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_4,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_5,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> &>(uint64_t result, uint64_t a2)
{
  *(_WORD *)(a2 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = **(_WORD **)(*(void *)result + 40);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::bandwidthAS(BOOL)::$_0,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_1,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_2,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_3,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_4,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_5,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(unsigned __int8 ***a1, _WORD *a2)
{
  if (a2[20] == 255) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(_WORD *, void))(*(void *)a2 + 72))(a2, ***a1);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::bandwidthAS(BOOL)::$_0,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_1,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_2,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_3,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_4,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_5,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, _WORD *a2)
{
  if (a2[20] == 255) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(_WORD *, void))(*(void *)a2 + 72))(a2, **(unsigned __int8 **)(*(void *)a1 + 8));
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::bandwidthAS(BOOL)::$_0,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_1,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_2,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_3,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_4,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_5,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, _WORD *a2)
{
  if (a2[20] == 255) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(_WORD *, void))(*(void *)a2 + 72))(a2, **(unsigned __int8 **)(*(void *)a1 + 16));
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::bandwidthAS(BOOL)::$_0,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_1,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_2,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_3,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_4,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_5,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, _WORD *a2)
{
  if (a2[20] == 255) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(_WORD *, void))(*(void *)a2 + 72))(a2, **(unsigned __int8 **)(*(void *)a1 + 24));
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::bandwidthAS(BOOL)::$_0,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_1,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_2,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_3,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_4,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_5,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, _WORD *a2)
{
  if (a2[20] == 255) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(_WORD *, void))(*(void *)a2 + 72))(a2, **(unsigned __int8 **)(*(void *)a1 + 32));
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::bandwidthAS(BOOL)::$_0,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_1,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_2,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_3,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_4,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_5,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, _WORD *a2)
{
  if (a2[20] == 255) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(_WORD *, void))(*(void *)a2 + 72))(a2, **(unsigned __int8 **)(*(void *)a1 + 40));
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_0,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_1,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_2,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_3,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_4,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_5,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatUnknownParams *a2)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_0,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_1,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_2,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_3,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_4,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_5,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatAMRParams *a2)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_0,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_1,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_2,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_3,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_4,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_5,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatEVSParams *a2)
{
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_0,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_1,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_2,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_3,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_4,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_5,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<3ul,SDPMediaFormatDTMFParams,SDPMediaFormatDTMFParams const&>((unsigned int *)(*(void *)(*(void *)a1 + 24) + 96), *(void *)(*(void *)a1 + 24) + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_0,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_1,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_2,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_3,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_4,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_5,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_0,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_1,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_2,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_3,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_4,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_5,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::toStream(ImsOutStream &)::$_0,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_1,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_2,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_3,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_4,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_5,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(ImsOutStream ***a1, const SDPMediaFormatUnknownParams *a2)
{
  uint64_t v2 = *a1;
  SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatUnknownParams *)v4, a2);
  if (v5 != 255)
  {
    int v3 = *v2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)*v2 + 1), (uint64_t)"\r\n", 2);
    *((unsigned char *)v3 + 17) = 0;
    SDPAttribute::toStream((SDPAttribute *)v4, *v2);
  }
  SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams(v4);
}

void sub_1C55561AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams((void **)va);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::toStream(ImsOutStream &)::$_0,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_1,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_2,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_3,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_4,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_5,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t *a1, const SDPMediaFormatAMRParams *a2)
{
  uint64_t v2 = *a1;
  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)v10, a2);
  if (v18) {
    BOOL v3 = v13 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3 || v12 != 0 || v14 != 0 || v15 != 0 || v16 != 0 || v17 != 0)
  {
    uint64_t v9 = *(void *)(v2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"\r\n", 2);
    *(unsigned char *)(v9 + 17) = 0;
    SDPAttribute::toStream((SDPAttribute *)v10, *(ImsOutStream **)(v2 + 8));
  }
  v10[0] = &unk_1F20E5C78;
  if (v11 < 0) {
    operator delete((void *)v10[2]);
  }
}

void sub_1C555628C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::toStream(ImsOutStream &)::$_0,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_1,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_2,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_3,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_4,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_5,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t *a1, const SDPMediaFormatEVSParams *a2)
{
  uint64_t v2 = *a1;
  SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)v4, a2);
  if (v6 != 255)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"\r\n", 2);
    *(unsigned char *)(v3 + 17) = 0;
    SDPAttribute::toStream((SDPAttribute *)v4, *(ImsOutStream **)(v2 + 16));
  }
  v4[0] = &unk_1F20E5C78;
  if (v5 < 0) {
    operator delete((void *)v4[2]);
  }
}

void sub_1C5556364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::toStream(ImsOutStream &)::$_0,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_1,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_2,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_3,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_4,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_5,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v6 = *(unsigned char *)(a2 + 8);
  char v5 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else {
    std::string __p = *(std::string *)(a2 + 16);
  }
  __int16 v8 = *(_WORD *)(a2 + 40);
  char v5 = &unk_1F20B39F0;
  if (v8 != 255)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"\r\n", 2);
    *(unsigned char *)(v4 + 17) = 0;
    SDPAttribute::toStream((SDPAttribute *)&v5, *(ImsOutStream **)(v3 + 24));
  }
  char v5 = &unk_1F20E5C78;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5556498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::toStream(ImsOutStream &)::$_0,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_1,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_2,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_3,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_4,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_5,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v5, *(_WORD *)(a2 + 40));
  v5[0] = &unk_1F20E2998;
  int v7 = *(_DWORD *)(a2 + 44);
  uint64_t v8 = *(void *)(a2 + 48);
  if (v7)
  {
    uint64_t v4 = *(void *)(v3 + 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"\r\n", 2);
    *(unsigned char *)(v4 + 17) = 0;
    SDPAttribute::toStream((SDPAttribute *)v5, *(ImsOutStream **)(v3 + 32));
  }
  v5[0] = &unk_1F20E5C78;
  if (v6 < 0) {
    operator delete((void *)v5[2]);
  }
}

void sub_1C5556580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::toStream(ImsOutStream &)::$_0,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_1,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_2,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_3,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_4,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_5,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v5, *(_WORD *)(a2 + 40));
  v5[0] = &unk_1F20E2A10;
  __int16 v8 = *(_WORD *)(a2 + 42);
  if (v7 != 255)
  {
    uint64_t v4 = *(void *)(v3 + 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"\r\n", 2);
    *(unsigned char *)(v4 + 17) = 0;
    SDPAttribute::toStream((SDPAttribute *)v5, *(ImsOutStream **)(v3 + 40));
  }
  v5[0] = &unk_1F20E5C78;
  if (v6 < 0) {
    operator delete((void *)v5[2]);
  }
}

void sub_1C5556684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v7 = operator new(0x48uLL);
  *__int16 v7 = a2;
  v7[1] = a3;
  SDPConnection::SDPConnection((uint64_t)(v7 + 2), a4);
  return v7;
}

void sub_1C555670C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaEndToAccessEdgeProtection const&>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPMediaEndToAccessEdgeProtection *a4)
{
  __int16 v7 = operator new(0x90uLL);
  *__int16 v7 = a2;
  v7[1] = a3;
  SDPMediaEndToAccessEdgeProtection::SDPMediaEndToAccessEdgeProtection((SDPMediaEndToAccessEdgeProtection *)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 5;
  return v7;
}

void sub_1C5556774(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v7 = operator new(0x48uLL);
  *__int16 v7 = a2;
  v7[1] = a3;
  SDPConnection::SDPConnection((uint64_t)(v7 + 2), a4);
  return v7;
}

void sub_1C55567D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t LazuliMessageDecoder::decode(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v115, "decoder.laz");
  std::string::basic_string[abi:ne180100]<0>(&v114, "");
  uint64_t v6 = ims::debug((uint64_t)&v115, (uint64_t)&v114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"LazuliMessageDecoder::decode bytes = ", 37);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v114.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v115.__r_.__value_.__l.__data_);
  }
  memset(&__str, 0, sizeof(__str));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __str = *(std::string *)a2;
  }
  char v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    char v10 = memchr(p_str, 10, size);
    uint64_t v11 = 0;
    if (v10)
    {
      std::string::size_type v12 = v10 - (unsigned char *)p_str;
      if (v12 != -1)
      {
        memset(&v110, 0, sizeof(v110));
        std::string::basic_string(&v110, &__str, 0, v12, (std::allocator<char> *)&v115);
        std::string::basic_string(&v115, &__str, v12 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v114);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::string __str = v115;
        ims::chomp(&v110, "\r\n\t ", 3);
        memset(&__p, 0, sizeof(__p));
        std::string::size_type v13 = ims::nextToken(&v110, 0, &__p, 0x20u);
        if (v13 == -1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v115, "decoder.laz");
          std::string::basic_string[abi:ne180100]<0>(&v114, "");
          char v16 = (unsigned char *)ims::error((uint64_t)&v115, (uint64_t)&v114);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v16 + 1), (uint64_t)"LazuliMessageDecoder: no tokens in start line", 45);
          v16[17] = 0;
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_32;
        }
        std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
        }
        if (v14 != 4) {
          goto LABEL_26;
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (LODWORD(p_p->__r_.__value_.__l.__data_) != 1347572557)
        {
LABEL_26:
          std::string::basic_string[abi:ne180100]<0>(&v115, "decoder.laz");
          std::string::basic_string[abi:ne180100]<0>(&v114, "");
          char v16 = (unsigned char *)ims::error((uint64_t)&v115, (uint64_t)&v114);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v16 + 1), (uint64_t)"LazuliMessageDecoder: non MSRP protocol: ", 41);
          v16[17] = 0;
          (*(void (**)(unsigned char *, std::string *))(*(void *)v16 + 32))(v16, &__p);
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_32:
          v16[17] = 0;
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v115.__r_.__value_.__l.__data_);
          }
          uint64_t v11 = 0;
          goto LABEL_37;
        }
        memset(&v108, 0, sizeof(v108));
        std::string::size_type v18 = ims::nextToken(&v110, v13, &v108, 0x20u);
        if (v18 == -1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v115, "decoder.laz");
          std::string::basic_string[abi:ne180100]<0>(&v114, "");
          uint64_t v24 = ims::error((uint64_t)&v115, (uint64_t)&v114);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"LazuliMessageDecoder: no transaction ID in the message ", 55);
          *(unsigned char *)(v24 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v24 + 17) = 0;
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v115.__r_.__value_.__l.__data_);
          }
          uint64_t v11 = 0;
          goto LABEL_252;
        }
        memset(&__s1, 0, sizeof(__s1));
        if (ims::nextToken(&v110, v18, &__s1, 0x20u) == -1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v115, "decoder.laz");
          std::string::basic_string[abi:ne180100]<0>(&v114, "");
          uint64_t v25 = ims::error((uint64_t)&v115, (uint64_t)&v114);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"LazuliMessageDecoder: no method or status in the message ", 57);
          *(unsigned char *)(v25 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v25 + 17) = 0;
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v115.__r_.__value_.__l.__data_);
          }
          goto LABEL_79;
        }
        uint64_t v19 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        int v20 = SHIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v21 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v21 = __s1.__r_.__value_.__l.__size_;
        }
        if (v21 == 6)
        {
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            BOOL v28 = (std::string *)__s1.__r_.__value_.__r.__words[0];
            if (memcmp(__s1.__r_.__value_.__l.__data_, "REPORT", __s1.__r_.__value_.__l.__size_)) {
              goto LABEL_75;
            }
          }
          else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
          {
            p_s1 = &__s1;
            BOOL v27 = "REPORT";
            while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v27)
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              ++v27;
              if (!--v19) {
                goto LABEL_84;
              }
            }
            goto LABEL_72;
          }
LABEL_84:
          std::allocate_shared[abi:ne180100]<LazuliRequest,std::allocator<LazuliRequest>,std::string &,std::string const&,LazuliMessageEncodingMap const*&,void>((uint64_t *)&v115, (long long *)&v108, (long long *)"REPORT", *a1);
          char v34 = *(std::__shared_weak_count **)(a3 + 8);
          *(_OWORD *)a3 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
          if (v34) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v34);
          }
          std::string::basic_string[abi:ne180100]<0>(&v115, "decoder.laz");
          std::string::basic_string[abi:ne180100]<0>(&v114, "");
          uint64_t v35 = ims::debug((uint64_t)&v115, (uint64_t)&v114);
          uint64_t v32 = ImsOutStream::operator<<(v35, "Allocated new MSRP message - REPORT");
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_87:
          *(unsigned char *)(v32 + 17) = 0;
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v115.__r_.__value_.__l.__data_);
          }
          memset(&v106, 0, sizeof(v106));
          std::string::basic_string[abi:ne180100]<0>(&v106, "-------");
          if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v36 = &v108;
          }
          else {
            uint64_t v36 = (std::string *)v108.__r_.__value_.__r.__words[0];
          }
          if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v37 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v37 = v108.__r_.__value_.__l.__size_;
          }
          std::string::append(&v106, (const std::string::value_type *)v36, v37);
          std::string::basic_string[abi:ne180100]<0>(&v115, "decoder.laz");
          std::string::basic_string[abi:ne180100]<0>(&v114, "");
          uint64_t v38 = ims::debug((uint64_t)&v115, (uint64_t)&v114);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"MSRP expected endline: ", 23);
          *(unsigned char *)(v38 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(void *)v38 + 32))(v38, &v106);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v38 + 17) = 0;
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v115.__r_.__value_.__l.__data_);
          }
          memset(&v105, 0, sizeof(v105));
          while (1)
          {
            size_t v39 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(__str.__r_.__value_.__r.__words[2])
                : __str.__r_.__value_.__l.__size_;
            if (!v39) {
              break;
            }
            std::vector<std::string>::pointer v40 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__str
                : (std::string *)__str.__r_.__value_.__r.__words[0];
            long long v41 = memchr(v40, 10, v39);
            std::string::size_type v42 = v41 - (unsigned char *)v40;
            if (!v41 || v42 == -1) {
              break;
            }
            std::string::basic_string(&v115, &__str, 0, v42, (std::allocator<char> *)&v114);
            if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v105.__r_.__value_.__l.__data_);
            }
            std::string v105 = v115;
            if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
            {
              int64_t v44 = v105.__r_.__value_.__l.__size_;
              if (!v105.__r_.__value_.__l.__size_)
              {
LABEL_171:
                std::string::basic_string(&v115, &__str, v42 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v114);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                std::string __str = v115;
                break;
              }
              int v45 = (std::string *)v105.__r_.__value_.__r.__words[0];
            }
            else
            {
              int64_t v44 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
              if (!*((unsigned char *)&v115.__r_.__value_.__s + 23)) {
                goto LABEL_171;
              }
              int v45 = &v105;
            }
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v46 = &v106;
            }
            else {
              int v46 = (std::string *)v106.__r_.__value_.__r.__words[0];
            }
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int64_t v47 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
            }
            else {
              int64_t v47 = v106.__r_.__value_.__l.__size_;
            }
            if (v47)
            {
              if (v44 >= v47)
              {
                std::vector<std::string>::pointer v58 = (char *)v45 + v44;
                int v59 = v46->__r_.__value_.__s.__data_[0];
                unint64_t v60 = v45;
                do
                {
                  int64_t v61 = v44 - v47;
                  if (v61 == -1) {
                    break;
                  }
                  unint64_t v62 = (char *)memchr(v60, v59, v61 + 1);
                  if (!v62) {
                    break;
                  }
                  uint64_t v63 = v62;
                  if (!memcmp(v62, v46, v47))
                  {
                    if (v63 == v58 || v63 - (char *)v45 == -1) {
                      break;
                    }
                    goto LABEL_174;
                  }
                  unint64_t v60 = (std::string *)(v63 + 1);
                  int64_t v44 = v58 - (v63 + 1);
                }
                while (v44 >= v47);
              }
              std::string::basic_string(&v115, &__str, v42 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v114);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string __str = v115;
              size_t v48 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? HIBYTE(v105.__r_.__value_.__r.__words[2])
                  : v105.__r_.__value_.__l.__size_;
              if (v48)
              {
                std::vector<std::string>::pointer v49 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? &v105
                    : (std::string *)v105.__r_.__value_.__r.__words[0];
                long long v50 = memchr(v49, 58, v48);
                std::string::size_type v51 = v50 - (unsigned char *)v49;
                if (v50 && v51 != -1)
                {
                  uint64_t v53 = v48 <= v51 + 1 ? v51 + 1 : v48;
                  std::string v54 = &v49->__r_.__value_.__s.__data_[1];
                  int64_t v55 = v50 - (unsigned char *)v49;
                  while (1)
                  {
                    std::string::size_type v56 = v55 + 1;
                    if (v55 + 1 >= v48) {
                      break;
                    }
                    int v57 = v54[v55++];
                    if (v57 != 32) {
                      goto LABEL_155;
                    }
                  }
                  std::string::size_type v56 = v53;
LABEL_155:
                  uint64_t v116 = 0;
                  std::string::size_type v117 = 0;
                  long long v64 = (void *)*a1;
                  std::string::basic_string(&v115, &v105, 0, v51, (std::allocator<char> *)&v114);
                  std::string::basic_string(&v114, &v105, v56, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v118);
                  LazuliMessageEncodingMap::createHeader(v64, (uint64_t)&v115, (uint64_t)&v114, &v116);
                  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v114.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v115.__r_.__value_.__l.__data_);
                  }
                  uint64_t v65 = v116;
                  if (v116)
                  {
                    uint64_t v66 = *(void *)a3;
                    uint64_t v112 = v116;
                    long long v113 = v117;
                    if (v117) {
                      atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    LazuliMessage::addHeader(v66, (long long *)(v65 + 24), (char *)&v112, 0);
                    if (v113) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v113);
                    }
                  }
                  if (v117) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v117);
                  }
                  if (v65) {
                    continue;
                  }
                }
              }
            }
            break;
          }
LABEL_174:
          std::string::basic_string[abi:ne180100]<0>(&v115, "decoder.laz");
          std::string::basic_string[abi:ne180100]<0>(&v114, "");
          uint64_t v67 = ims::debug((uint64_t)&v115, (uint64_t)&v114);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v67 + 8), (uint64_t)"bufToDecodeSize=", 16);
          *(unsigned char *)(v67 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v67 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v67 + 8), (uint64_t)" headerCount=", 13);
          *(unsigned char *)(v67 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v67 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v67 + 64))(v67, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v67 + 17) = 0;
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v115.__r_.__value_.__l.__data_);
          }
          long long v68 = &v115;
          std::operator+<char>();
          int64_t v69 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v70 = &__str;
          }
          else {
            unint64_t v70 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          int v71 = SHIBYTE(v115.__r_.__value_.__r.__words[2]);
          long long v72 = (void *)v115.__r_.__value_.__r.__words[0];
          if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          {
            int64_t v73 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
          }
          else
          {
            int64_t v73 = v115.__r_.__value_.__l.__size_;
            long long v68 = (std::string *)v115.__r_.__value_.__r.__words[0];
          }
          if (v73)
          {
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int64_t v69 = __str.__r_.__value_.__l.__size_;
            }
            long long v74 = (char *)v70 + v69;
            if (v69 >= v73)
            {
              int v85 = v68->__r_.__value_.__s.__data_[0];
              long long v86 = v70;
              do
              {
                int64_t v87 = v69 - v73;
                if (v87 == -1) {
                  break;
                }
                unint64_t v88 = (char *)memchr(v86, v85, v87 + 1);
                if (!v88) {
                  break;
                }
                uint64_t v75 = v88;
                if (!memcmp(v88, v68, v73)) {
                  goto LABEL_189;
                }
                long long v86 = (std::string *)(v75 + 1);
                int64_t v69 = v74 - (v75 + 1);
              }
              while (v69 >= v73);
            }
            uint64_t v75 = v74;
LABEL_189:
            if (v75 == v74) {
              int64_t v76 = -1;
            }
            else {
              int64_t v76 = v75 - (char *)v70;
            }
          }
          else
          {
            int64_t v76 = 0;
          }
          if (v71 < 0) {
            operator delete(v72);
          }
          if (v76 == -1)
          {
            long long v77 = &v115;
            std::operator+<char>();
            int64_t v78 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v79 = &__str;
            }
            else {
              unint64_t v79 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            int v80 = SHIBYTE(v115.__r_.__value_.__r.__words[2]);
            int v81 = (void *)v115.__r_.__value_.__r.__words[0];
            if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            {
              int64_t v82 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
            }
            else
            {
              int64_t v82 = v115.__r_.__value_.__l.__size_;
              long long v77 = (std::string *)v115.__r_.__value_.__r.__words[0];
            }
            if (v82)
            {
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int64_t v78 = __str.__r_.__value_.__l.__size_;
              }
              long long v83 = (char *)v79 + v78;
              if (v78 >= v82)
              {
                int v97 = v77->__r_.__value_.__s.__data_[0];
                unint64_t v98 = v79;
                do
                {
                  int64_t v99 = v78 - v82;
                  if (v99 == -1) {
                    break;
                  }
                  uint64_t v100 = (char *)memchr(v98, v97, v99 + 1);
                  if (!v100) {
                    break;
                  }
                  std::string v84 = v100;
                  if (!memcmp(v100, v77, v82)) {
                    goto LABEL_207;
                  }
                  unint64_t v98 = (std::string *)(v84 + 1);
                  int64_t v78 = v83 - (v84 + 1);
                }
                while (v78 >= v82);
              }
              std::string v84 = v83;
LABEL_207:
              if (v84 == v83) {
                int64_t v76 = -1;
              }
              else {
                int64_t v76 = v84 - (char *)v79;
              }
            }
            else
            {
              int64_t v76 = 0;
            }
            if (v80 < 0) {
              operator delete(v81);
            }
            if (v76 == -1)
            {
              int64_t v89 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              long long v90 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &__str
                  : (std::string *)__str.__r_.__value_.__r.__words[0];
              uint64_t v91 = (v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v106
                  : (std::string *)v106.__r_.__value_.__r.__words[0];
              int64_t v76 = (v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? HIBYTE(v106.__r_.__value_.__r.__words[2])
                  : v106.__r_.__value_.__l.__size_;
              if (v76)
              {
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  int64_t v89 = __str.__r_.__value_.__l.__size_;
                }
                long long v92 = (char *)v90 + v89;
                if (v89 >= v76)
                {
                  int v101 = v91->__r_.__value_.__s.__data_[0];
                  uint64_t v102 = v90;
                  do
                  {
                    int64_t v103 = v89 - v76;
                    if (v103 == -1) {
                      break;
                    }
                    long long v104 = (char *)memchr(v102, v101, v103 + 1);
                    if (!v104) {
                      break;
                    }
                    uint64_t v93 = v104;
                    if (!memcmp(v104, v91, v76)) {
                      goto LABEL_234;
                    }
                    uint64_t v102 = (std::string *)(v93 + 1);
                    int64_t v89 = v92 - (v93 + 1);
                  }
                  while (v89 >= v76);
                }
                uint64_t v93 = v92;
LABEL_234:
                if (v93 == v92) {
                  int64_t v76 = -1;
                }
                else {
                  int64_t v76 = v93 - (char *)v90;
                }
              }
            }
          }
          if (*(void *)a3)
          {
            if (v94)
            {
              long long v95 = v94;
              unint64_t v96 = *(std::__shared_weak_count **)(a3 + 8);
              if (v96) {
                atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              memset(&v115, 0, sizeof(v115));
              std::string::basic_string(&v115, &__str, 0, v76, (std::allocator<char> *)&v114);
              std::string::operator=((std::string *)(v95 + 104), &v115);
              if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v115.__r_.__value_.__l.__data_);
              }
              if (v96) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v96);
              }
            }
          }
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v105.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v106.__r_.__value_.__l.__data_);
          }
          uint64_t v11 = 1;
          goto LABEL_250;
        }
        if (v21 == 4)
        {
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
            {
              uint64_t v22 = &__s1;
              uint64_t v23 = "SEND";
              while (v22->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v23)
              {
                uint64_t v22 = (std::string *)((char *)v22 + 1);
                ++v23;
                if (!--v19) {
                  goto LABEL_80;
                }
              }
              goto LABEL_72;
            }
LABEL_80:
            std::allocate_shared[abi:ne180100]<LazuliRequest,std::allocator<LazuliRequest>,std::string &,std::string const&,LazuliMessageEncodingMap const*&,void>((uint64_t *)&v115, (long long *)&v108, (long long *)"SEND", *a1);
            long long v33 = *(std::__shared_weak_count **)(a3 + 8);
            *(_OWORD *)a3 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
            if (v33) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v33);
            }
            std::string::basic_string[abi:ne180100]<0>(&v115, "decoder.laz");
            std::string::basic_string[abi:ne180100]<0>(&v114, "");
            uint64_t v32 = ims::debug((uint64_t)&v115, (uint64_t)&v114);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"Allocated new MSRP message - REQUEST", 36);
            *(unsigned char *)(v32 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            goto LABEL_87;
          }
          if (!memcmp(__s1.__r_.__value_.__l.__data_, "SEND", __s1.__r_.__value_.__l.__size_)) {
            goto LABEL_80;
          }
        }
LABEL_72:
        if (v20 >= 0) {
          BOOL v28 = &__s1;
        }
        else {
          BOOL v28 = (std::string *)__s1.__r_.__value_.__r.__words[0];
        }
LABEL_75:
        int v29 = strtoul((const char *)v28, 0, 10);
        if (v29)
        {
          std::allocate_shared[abi:ne180100]<LazuliResponse,std::allocator<LazuliResponse>,std::string &,unsigned int &,LazuliMessageEncodingMap const*&,void>((uint64_t *)&v115, (long long *)&v108, v29, *a1);
          int v30 = *(std::__shared_weak_count **)(a3 + 8);
          *(_OWORD *)a3 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          std::string::basic_string[abi:ne180100]<0>(&v115, "decoder.laz");
          std::string::basic_string[abi:ne180100]<0>(&v114, "");
          uint64_t v31 = ims::debug((uint64_t)&v115, (uint64_t)&v114);
          uint64_t v32 = ImsOutStream::operator<<(v31, "Allocated new MSRP message - RESPONSE");
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_87;
        }
LABEL_79:
        uint64_t v11 = 0;
LABEL_250:
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
LABEL_252:
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v108.__r_.__value_.__l.__data_);
        }
LABEL_37:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v110.__r_.__value_.__l.__data_);
        }
        if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_29;
        }
        return v11;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (v7 < 0) {
LABEL_29:
  }
    operator delete(__str.__r_.__value_.__l.__data_);
  return v11;
}

void sub_1C55578AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<LazuliRequest,std::allocator<LazuliRequest>,std::string &,std::string const&,LazuliMessageEncodingMap const*&,void>(uint64_t *a1, long long *a2, long long *a3, uint64_t a4)
{
  __int16 v8 = operator new(0xB0uLL);
  v8[1] = 0;
  int8x8_t v8[2] = 0;
  *__int16 v8 = &unk_1F20C2620;
  uint64_t result = LazuliRequest::LazuliRequest((uint64_t)(v8 + 3), a2, a3, a4);
  *a1 = result;
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1C5557B9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<LazuliResponse,std::allocator<LazuliResponse>,std::string &,unsigned int &,LazuliMessageEncodingMap const*&,void>(uint64_t *a1, long long *a2, int a3, uint64_t a4)
{
  __int16 v8 = operator new(0xA0uLL);
  v8[1] = 0;
  int8x8_t v8[2] = 0;
  *__int16 v8 = &unk_1F20C2670;
  uint64_t result = LazuliMessage::LazuliMessage((uint64_t)(v8 + 3), a2, a4);
  v8[3] = &unk_1F20D3198;
  *((_DWORD *)v8 + 38) = a3;
  *a1 = result;
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1C5557C4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void ims::analytics::SignallingDeferralEvent::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x90uLL);
  char v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1F20DB860;
  __int16 v8 = v6 + 3;
  uint64_t v10 = *a1;
  uint64_t v9 = (std::__shared_weak_count *)a1[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v6[3] = &unk_1F20DB998;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.ca.sigdeferral");
  ImsLogContainer::ImsLogContainer((uint64_t)(v7 + 4), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  void v7[3] = &unk_1F20DB8B0;
  _OWORD v7[4] = &unk_1F20DB8E8;
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v12 = v11;
  std::string::size_type v13 = (void **)(v7 + 17);
  if (v11)
  {
    *std::string::size_type v13 = v11;
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    *std::string::size_type v13 = v12;
    if (!v12)
    {
      xpc_object_t v14 = xpc_null_create();
      xpc_object_t v12 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C878F160](v12) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v12);
    goto LABEL_13;
  }
  xpc_object_t v14 = xpc_null_create();
LABEL_12:
  *std::string::size_type v13 = v14;
LABEL_13:
  xpc_release(v12);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v15 = *v13;
  xpc_object_t object = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v24 = v10;
  uint64_t v25 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ims::analytics::populateCellularInfo(&object, (uint64_t)&v24);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (*(void *)(a2 + 8))
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    gettimeofday((timeval *)&__p, 0);
    int64_t v16 = (SLODWORD(__p.__r_.__value_.__r.__words[1]) / 1000
                       + 1000 * LODWORD(__p.__r_.__value_.__l.__data_)
                       - *(_DWORD *)(a2 + 8)
                       + 1375609856);
  }
  else
  {
    int64_t v16 = 0;
  }
  xpc_object_t v22 = xpc_int64_create(*(unsigned char *)a2 == 0);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v7 + 17);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"type";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v22, &v23);
  xpc_release(v23);
  xpc_object_t v23 = 0;
  xpc_release(v22);
  xpc_object_t v22 = 0;
  xpc_object_t v20 = xpc_int64_create(v16);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v7 + 17);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"duration";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v20, &v21);
  xpc_release(v21);
  xpc_object_t v21 = 0;
  xpc_release(v20);
  xpc_object_t v20 = 0;
  xpc_object_t v18 = xpc_int64_create(*(unsigned __int16 *)(a2 + 16));
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v7 + 17);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"signallingType";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v18, &v19);
  xpc_release(v19);
  xpc_object_t v19 = 0;
  xpc_release(v18);
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a3 = v8;
  a3[1] = v7;
}

void sub_1C5557FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,xpc_object_t object)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  xpc_release(object);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  xpc_release(*v25);
  *(void *)(v23 + 13ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(v23 + 32) = &unk_1F20C9CA0;
  if (*(char *)(v23 + 87) < 0) {
    operator delete(*(void **)(v23 + 64));
  }
  if (*(char *)(v23 + 63) < 0) {
    operator delete(*(void **)(v23 + 40));
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v23);
  operator delete(v27);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<anonymous namespace'::SignallingDeferralEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DB860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::SignallingDeferralEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DB860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::SignallingDeferralEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::SignallingDeferralEventImpl::~SignallingDeferralEventImpl(_anonymous_namespace_::SignallingDeferralEventImpl *this)
{
  *(void *)this = &unk_1F20DB8B0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20DB8E8;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20DB8B0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20DB8E8;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  JUMPOUT(0x1C878E320);
}

xpc_object_t anonymous namespace'::SignallingDeferralEventImpl::getDict@<X0>(_anonymous_namespace_::SignallingDeferralEventImpl *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  *a2 = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void *anonymous namespace'::SignallingDeferralEventImpl::getName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "commcenterimssignallingdeferral");
}

void non-virtual thunk to'anonymous namespace'::SignallingDeferralEventImpl::~SignallingDeferralEventImpl(_anonymous_namespace_::SignallingDeferralEventImpl *this)
{
  *((void *)this - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20DB8B0;
  *(void *)this = &unk_1F20DB8E8;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 1IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *((void *)this - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20DB8B0;
  *(void *)this = &unk_1F20DB8E8;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 1IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1C878E320);
}

void SipRequireHeader::~SipRequireHeader(char **this)
{
  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipRequireHeader::clone(SipRequireHeader *this)
{
}

void sub_1C55585B4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

int *BambiCallTerminationReasons::defaultReason(BambiCallTerminationReasons *this)
{
  {
    BambiCallTerminationReasons::defaultReason(void)::reason = 0;
    xmmword_1EA3D5728 = 0u;
    unk_1EA3D5738 = 0u;
    xmmword_1EA3D5718 = 0u;
    unk_1EA3D5750 = 0u;
    unk_1EA3D5760 = 0u;
    unk_1EA3D5770 = 0u;
    unk_1EA3D577F = 0u;
    HIBYTE(xmmword_1EA3D5718) = 13;
    qmemcpy(&qword_1EA3D5710, "InternalError", 13);
    unk_1EA3D5744 = 0xA000001F4;
  }
  return &BambiCallTerminationReasons::defaultReason(void)::reason;
}

uint64_t BambiCallTerminationReason::BambiCallTerminationReason(uint64_t a1, const std::string *a2, const std::string *a3, int a4, int a5, int a6, int a7)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(void *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = 0;
  *(_DWORD *)(a1 + 64) = 10;
  *(_OWORD *)(a1 + 72) = 0u;
  std::string::size_type v13 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 119) = 0u;
  std::string::operator=((std::string *)(a1 + 8), a2);
  std::string::operator=(v13, a3);
  *(_DWORD *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = a6;
  *(_DWORD *)(a1 + 6(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = a4;
  *(_DWORD *)(a1 + 64) = a5;
  *(_DWORD *)(a1 + 128) = a7;
  return a1;
}

void sub_1C555872C(_Unwind_Exception *exception_object)
{
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 120);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  char v7 = *(std::__shared_weak_count **)(v1 + 104);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCallTerminationReason::BambiCallTerminationReason(uint64_t a1, long long *a2, int a3, long long *a4, long long *a5)
{
  *(_DWORD *)a1 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v9;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v10 = *a4;
    *(void *)(a1 + 48) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v10;
  }
  *(_DWORD *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = a3;
  *(void *)(a1 + 6(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0xA00000000;
  xpc_object_t v11 = (std::string *)(a1 + 72);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v12 = *a5;
    *(void *)(a1 + 88) = *((void *)a5 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *(void *)(a1 + 127) = 0;
  *(_OWORD *)(a1 + 9ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return a1;
}

void sub_1C5558864(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

SipHeader *BambiCallTerminationReason::addReasonToRequest(SipHeader *this, SipRequest *a2)
{
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 55)) {
      goto LABEL_8;
    }
LABEL_5:
    int v3 = *((_DWORD *)this + 14);
    uint64_t v4 = (atomic_ullong *)*((void *)this + 13);
    v12[0] = *((const SipParameterMap **)this + 12);
    v12[1] = (const SipParameterMap *)v4;
    if (v4) {
      atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
    }
    SipMessage::addReasonWithParams(a2, v3, v12, (uint64_t)this + 32, (const std::string *)this + 3);
  }
  if (*((void *)this + 5)) {
    goto LABEL_5;
  }
LABEL_8:
  char v5 = (void *)*((void *)this + 14);
  if (v5)
  {
    __int16 v8 = (void *)*v5;
    uint64_t v6 = v5 + 1;
    char v7 = v8;
    if (v8 != v6)
    {
      do
      {
        this = SipMessage::addHeader(a2, (uint64_t)(v7 + 4), (uint64_t)(v7 + 7), 0);
        long long v9 = (void *)v7[1];
        if (v9)
        {
          do
          {
            long long v10 = v9;
            long long v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            long long v10 = (void *)v7[2];
            BOOL v11 = *v10 == (void)v7;
            char v7 = v10;
          }
          while (!v11);
        }
        char v7 = v10;
      }
      while (v10 != v6);
    }
  }
  return this;
}

void sub_1C5558984(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallIncomingTerminationReasons::getDefaultReasonMap(BambiCallIncomingTerminationReasons *this@<X0>, uint64_t *a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_25, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_25))
  {
    __cxa_atexit((void (*)(void *))std::weak_ptr<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::~weak_ptr, &qword_1EBBDC4E0, &dword_1C51D1000);
    __cxa_guard_release(&_MergedGlobals_25);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDC4C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDC4C8))
  {
    __cxa_atexit(MEMORY[0x1E4FBA268], &BambiCallIncomingTerminationReasons::getDefaultReasonMap(void)const::sDefaultsMtx, &dword_1C51D1000);
    __cxa_guard_release(&qword_1EBBDC4C8);
  }
  std::mutex::lock(&BambiCallIncomingTerminationReasons::getDefaultReasonMap(void)const::sDefaultsMtx);
  *a2 = 0;
  a2[1] = 0;
  if (qword_1EBBDC4E8)
  {
    uint64_t v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_1EBBDC4E8);
    a2[1] = (uint64_t)v4;
    if (v4)
    {
      uint64_t v5 = qword_1EBBDC4E0;
      *a2 = qword_1EBBDC4E0;
      if (v5) {
        goto LABEL_11;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  *a2 = 0;
  a2[1] = 0;
  (*(void (**)(BambiCallIncomingTerminationReasons *))(*(void *)this + 8))(this);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  __int16 v8 = (std::__shared_weak_count *)qword_1EBBDC4E8;
  qword_1EBBDC4E0 = v7;
  qword_1EBBDC4E8 = v6;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_11:
  std::mutex::unlock(&BambiCallIncomingTerminationReasons::getDefaultReasonMap(void)const::sDefaultsMtx);
}

void sub_1C5558B1C(_Unwind_Exception *a1)
{
}

uint64_t std::weak_ptr<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::~weak_ptr(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void BambiCallIncomingTerminationReasons::createDefaultReasonMap(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  int v3 = operator new(0x30uLL);
  v3[1] = 0;
  void v3[2] = 0;
  *int v3 = &unk_1F20DBAA8;
  void v3[4] = 0;
  v3[3] = v3 + 4;
  uint64_t v4 = (uint64_t **)(v3 + 3);
  v3[5] = 0;
  *a1 = v3 + 3;
  a1[1] = v3;
  uint64_t v5 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v48, "Forbidden");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v5[1], &v48, &__p, 403, 16, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  ims::lowerCase((uint64_t)&v5[1].__shared_owners_, &v48);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&v48.__r_.__value_.__l.__data_, &__p);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 8);
  *((void *)v6 + 7) = v5 + 1;
  *((void *)v6 + 8) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  __int16 v8 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v48, "NoEmergencyCallLocation");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Emergency calls over WiFi not allowed in this location");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v8[1], &v48, &__p, 503, 31, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  LODWORD(v8[1].__vftable) = 2;
  ims::lowerCase((uint64_t)&v8[1].__shared_owners_, &v48);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  long long v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&v48.__r_.__value_.__l.__data_, &__p);
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = (std::__shared_weak_count *)*((void *)v9 + 8);
  *((void *)v9 + 7) = v8 + 1;
  *((void *)v9 + 8) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  BOOL v11 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v48, "TransferredToOtherDevice");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Call has been transferred to another device");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v11[1], &v48, &__p, 200, 9, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  ims::lowerCase((uint64_t)&v11[1].__shared_owners_, &v48);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  long long v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&v48.__r_.__value_.__l.__data_, &__p);
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v13 = (std::__shared_weak_count *)*((void *)v12 + 8);
  *((void *)v12 + 7) = v11 + 1;
  *((void *)v12 + 8) = v11;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  xpc_object_t v14 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v14->__shared_owners_ = 0;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v48, "CallCompletedElsewhere");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Call completed elsewhere");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v14[1], &v48, &__p, 200, 6, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  ims::lowerCase((uint64_t)&v14[1].__shared_owners_, &v48);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  char v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&v48.__r_.__value_.__l.__data_, &__p);
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  int64_t v16 = (std::__shared_weak_count *)*((void *)v15 + 8);
  *((void *)v15 + 7) = v14 + 1;
  *((void *)v15 + 8) = v14;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  char v17 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v48, "OtherSecondaryDeviceOnCall");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Secondary device already in use");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v17[1], &v48, &__p, 603, 7, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  ims::lowerCase((uint64_t)&v17[1].__shared_owners_, &v48);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  xpc_object_t v18 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&v48.__r_.__value_.__l.__data_, &__p);
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v19 = (std::__shared_weak_count *)*((void *)v18 + 8);
  *((void *)v18 + 7) = v17 + 1;
  *((void *)v18 + 8) = v17;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  xpc_object_t v20 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v48, "BusyHere");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v20[1], &v48, &__p, 486, 3, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  ims::lowerCase((uint64_t)&v20[1].__shared_owners_, &v48);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  xpc_object_t v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&v48.__r_.__value_.__l.__data_, &__p);
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v22 = (std::__shared_weak_count *)*((void *)v21 + 8);
  *((void *)v21 + 7) = v20 + 1;
  *((void *)v21 + 8) = v20;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  uint64_t v23 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v23->__shared_owners_ = 0;
  v23->__shared_weak_owners_ = 0;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v48, "TransactionDoesNotExist");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v23[1], &v48, &__p, 481, 11, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  ims::lowerCase((uint64_t)&v23[1].__shared_owners_, &v48);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  uint64_t v24 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&v48.__r_.__value_.__l.__data_, &__p);
  atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v25 = (std::__shared_weak_count *)*((void *)v24 + 8);
  *((void *)v24 + 7) = v23 + 1;
  *((void *)v24 + 8) = v23;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  unint64_t v26 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v48, "RequestTimeout");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v26[1], &v48, &__p, 408, 13, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  ims::lowerCase((uint64_t)&v26[1].__shared_owners_, &v48);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  BOOL v27 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&v48.__r_.__value_.__l.__data_, &__p);
  atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v28 = (std::__shared_weak_count *)*((void *)v27 + 8);
  *((void *)v27 + 7) = v26 + 1;
  *((void *)v27 + 8) = v26;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  int v29 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v29->__shared_owners_ = 0;
  v29->__shared_weak_owners_ = 0;
  v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v48, "TemporarilyUnavailable");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v29[1], &v48, &__p, 480, 14, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  ims::lowerCase((uint64_t)&v29[1].__shared_owners_, &v48);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  int v30 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&v48.__r_.__value_.__l.__data_, &__p);
  atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v31 = (std::__shared_weak_count *)*((void *)v30 + 8);
  *((void *)v30 + 7) = v29 + 1;
  *((void *)v30 + 8) = v29;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  uint64_t v32 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v32->__shared_owners_ = 0;
  v32->__shared_weak_owners_ = 0;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v48, "Decline");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v32[1], &v48, &__p, 603, 1, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  ims::lowerCase((uint64_t)&v32[1].__shared_owners_, &v48);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  long long v33 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&v48.__r_.__value_.__l.__data_, &__p);
  atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  char v34 = (std::__shared_weak_count *)*((void *)v33 + 8);
  *((void *)v33 + 7) = v32 + 1;
  *((void *)v33 + 8) = v32;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 1;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const(&)[18],char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&v48, "RequestTerminated", &SipResponse::kStatusRequestTerminated, (int *)&__p);
  long long v35 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  ims::lowerCase(v35 + 8, &v48);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  uint64_t v36 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&v48.__r_.__value_.__l.__data_, &__p);
  if (*((void *)&v35 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v37 = (std::__shared_weak_count *)*((void *)v36 + 8);
  *(_OWORD *)((char *)v36 + 5ims::StackConfig::~StackConfig(this + 6) = v35;
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  uint64_t v38 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v38->__shared_owners_ = 0;
  v38->__shared_weak_owners_ = 0;
  v38->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v48, "MediaTimeout");
  std::string::basic_string[abi:ne180100]<0>(&__p, "RTP Timeout");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v38[1], &v48, &__p, 0, 20, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  ims::lowerCase((uint64_t)&v38[1].__shared_owners_, &v48);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  size_t v39 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&v48.__r_.__value_.__l.__data_, &__p);
  atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  std::vector<std::string>::pointer v40 = (std::__shared_weak_count *)*((void *)v39 + 8);
  *((void *)v39 + 7) = v38 + 1;
  *((void *)v39 + 8) = v38;
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  long long v41 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v41->__shared_owners_ = 0;
  v41->__shared_weak_owners_ = 0;
  v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v48, "MediaHeartbeatTimeout");
  std::string::basic_string[abi:ne180100]<0>(&__p, "RTCP Timeout");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v41[1], &v48, &__p, 0, 21, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  ims::lowerCase((uint64_t)&v41[1].__shared_owners_, &v48);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  std::string::size_type v42 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&v48.__r_.__value_.__l.__data_, &__p);
  atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v43 = (std::__shared_weak_count *)*((void *)v42 + 8);
  *((void *)v42 + 7) = v41 + 1;
  *((void *)v42 + 8) = v41;
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const(&)[18],char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&v48, "SessionRedirected", &SipResponse::kStatusMovedTemporarily, (int *)&__p);
  long long v44 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  ims::lowerCase(v44 + 8, &v48);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  int v45 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&v48.__r_.__value_.__l.__data_, &__p);
  if (*((void *)&v44 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v44 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int v46 = (std::__shared_weak_count *)*((void *)v45 + 8);
  *(_OWORD *)((char *)v45 + 5ims::StackConfig::~StackConfig(this + 6) = v44;
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v44 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v44 + 1));
  }
}

void sub_1C5559814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (*(void *)(v20 + 8)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v20 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5559A94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v21);
  JUMPOUT(0x1C5559A7CLL);
}

void sub_1C5559AD8()
{
}

void BambiCallIncomingTerminationReasons::BambiCallIncomingTerminationReasons(BambiCallIncomingTerminationReasons *this, const BambiCallIncomingTerminationReasons *a2)
{
  BambiCallTerminationReasonsBase::BambiCallTerminationReasonsBase(this, a2);
  *(void *)uint64_t v2 = &unk_1F20DBC28;
  *(void *)(v2 + 17ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(v2 + 168) = v2 + 176;
  int v3 = (uint64_t **)(v2 + 168);
  *(void *)(v2 + 184) = 0;
  std::string::size_type v13 = 0;
  xpc_object_t v14 = 0;
  BambiCallTerminationReasonsBase::getCombinedReasonMap((void (***)(uint64_t *__return_ptr))v2, &v13);
  uint64_t v4 = (long long *)(v13 + 1);
  uint64_t v5 = (long long *)*v13;
  if ((void *)*v13 != v13 + 1)
  {
    do
    {
      long long v12 = 0;
      *(_OWORD *)std::string __p = 0u;
      long long v11 = 0u;
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, v5 + 2);
      uint64_t v6 = std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, *(_DWORD *)(*((void *)&v11 + 1) + 60), (_DWORD *)(*((void *)&v11 + 1) + 60));
      std::list<std::shared_ptr<BambiCallAction>>::push_back((uint64_t *)v6 + 5, *((uint64_t *)&v11 + 1), (uint64_t)v12);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (SBYTE7(v11) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v7 = (long long *)*((void *)v5 + 1);
      if (v7)
      {
        do
        {
          __int16 v8 = v7;
          uint64_t v7 = *(long long **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          __int16 v8 = (long long *)*((void *)v5 + 2);
          BOOL v9 = *(void *)v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != v4);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_1C5559BF8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy(v2, *((void **)v1 + 22));
  BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase(v1);
  _Unwind_Resume(a1);
}

void BambiCallTerminationReasonsBase::BambiCallTerminationReasonsBase(BambiCallTerminationReasonsBase *this, const BambiCallTerminationReasonsBase *a2)
{
  *(void *)this = &unk_1F20DBC68;
  *((_DWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 5ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(_OWORD *)((char *)this + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + ims::StackConfig::~StackConfig(this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 127) = 0u;
  *((unsigned char *)this + 39) = 13;
  qmemcpy((char *)this + 16, "Internal", 8);
  *(void *)((char *)this + 68) = 0xA000001F4;
  *((void *)this + 19) = 0;
  *((void *)this + 18) = (char *)this + 152;
  *((void *)this + 2(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  BambiCallTerminationReasonsBase::assign(this, a2);
}

void sub_1C5559CEC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy(v2, *v3);
  BambiCallTerminationReason::~BambiCallTerminationReason(v1);
  _Unwind_Resume(a1);
}

void BambiCallTerminationReasonsBase::getCombinedReasonMap(void (***this)(uint64_t *__return_ptr)@<X0>, void *a2@<X8>)
{
  uint64_t v10 = 0;
  long long v11 = 0;
  (**this)(&v10);
  uint64_t v7 = 0;
  __int16 v8 = 0;
  uint64_t v9 = 0;
  std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>::map[abi:ne180100]((uint64_t *)&v7, v10);
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>::map[abi:ne180100]((uint64_t *)&v4, (uint64_t)(this + 18));
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__node_handle_merge_unique[abi:ne180100]<std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>>(&v4, &v7);
  std::allocate_shared[abi:ne180100]<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>,std::allocator<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>,std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>&,void>((uint64_t)&v4, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)&v4, v5);
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)&v7, v8);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C5559DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)&a13, a14);
  int64_t v16 = *(std::__shared_weak_count **)(v14 - 32);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

void BambiCallIncomingTerminationReasons::assign(BambiCallIncomingTerminationReasons *this, const BambiCallIncomingTerminationReasons *a2)
{
  uint64_t v4 = (uint64_t **)((char *)this + 168);
  uint64_t v5 = (void *)((char *)this + 176);
  std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy((uint64_t)this + 168, *((void **)this + 22));
  *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v5;
  *((void *)this + 2IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  void *v5 = 0;
  BambiCallTerminationReasonsBase::assign(this, a2);
  char v15 = 0;
  int64_t v16 = 0;
  BambiCallTerminationReasonsBase::getCombinedReasonMap((void (***)(uint64_t *__return_ptr))this, &v15);
  uint64_t v6 = (long long *)(v15 + 1);
  uint64_t v7 = (long long *)*v15;
  if ((void *)*v15 != v15 + 1)
  {
    do
    {
      uint64_t v14 = 0;
      *(_OWORD *)std::string __p = 0u;
      long long v13 = 0u;
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, v7 + 2);
      __int16 v8 = std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, *(_DWORD *)(*((void *)&v13 + 1) + 60), (_DWORD *)(*((void *)&v13 + 1) + 60));
      std::list<std::shared_ptr<BambiCallAction>>::push_back((uint64_t *)v8 + 5, *((uint64_t *)&v13 + 1), (uint64_t)v14);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      if (SBYTE7(v13) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v9 = (long long *)*((void *)v7 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = *(long long **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (long long *)*((void *)v7 + 2);
          BOOL v11 = *(void *)v10 == (void)v7;
          uint64_t v7 = v10;
        }
        while (!v11);
      }
      uint64_t v7 = v10;
    }
    while (v10 != v6);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_1C5559F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallTerminationReasonsBase::assign(BambiCallTerminationReasonsBase *this, const BambiCallTerminationReasonsBase *a2)
{
  int v3 = (void *)((char *)this + 152);
  uint64_t v4 = (uint64_t **)((char *)this + 144);
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)this + 144, *((void **)this + 19));
  *(v3 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v3;
  *int v3 = 0;
  v3[1] = 0;
  uint64_t v5 = (long long *)*((void *)a2 + 18);
  uint64_t v6 = (char *)a2 + 152;
  if (v5 != (long long *)v6)
  {
    do
    {
      int64_t v16 = 0;
      memset(v15, 0, sizeof(v15));
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)v15, v5 + 2);
      ims::lowerCase((uint64_t)v15, &__p);
      p_p = &__p;
      uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p);
      uint64_t v9 = *(void *)&v15[24];
      __int16 v8 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = (std::__shared_weak_count *)*((void *)v7 + 8);
      *((void *)v7 + 7) = v9;
      *((void *)v7 + 8) = v8;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if ((v15[23] & 0x80000000) != 0) {
        operator delete(*(void **)v15);
      }
      BOOL v11 = (char *)*((void *)v5 + 1);
      if (v11)
      {
        do
        {
          long long v12 = v11;
          BOOL v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          long long v12 = (char *)*((void *)v5 + 2);
          BOOL v13 = *(void *)v12 == (void)v5;
          uint64_t v5 = (long long *)v12;
        }
        while (!v13);
      }
      uint64_t v5 = (long long *)v12;
    }
    while (v12 != v6);
  }
}

void sub_1C555A074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::pair<std::string const,std::shared_ptr<MessageSession>>::~pair((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *BambiCallIncomingTerminationReasons::addReason@<X0>(uint64_t **this@<X0>, const BambiCallTerminationReason *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  BambiCallTerminationReasonsBase::addReason(this, a2, a3);
  uint64_t v5 = std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(this + 21, *(_DWORD *)(*a3 + 60), (_DWORD *)(*a3 + 60));
  return std::list<std::shared_ptr<BambiCallAction>>::push_back((uint64_t *)v5 + 5, *a3, a3[1]);
}

void sub_1C555A0E8(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallTerminationReasonsBase::addReason(uint64_t **this@<X0>, const BambiCallTerminationReason *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,BambiCallTerminationReason const&,void>(a2, a3);
  ims::lowerCase(*a3 + 8, &__p);
  p_p = &__p;
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this + 18, (void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p);
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v8 = (std::__shared_weak_count *)*((void *)v5 + 8);
  *((void *)v5 + 7) = v7;
  *((void *)v5 + 8) = v6;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C555A1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  int64_t v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallIncomingTerminationReasons::reasonForResponse(BambiCallIncomingTerminationReasons *this@<X0>, const SipResponse *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v7 = (char *)*((void *)this + 22);
  uint64_t v5 = (char *)this + 176;
  uint64_t v6 = v7;
  if (!v7) {
    goto LABEL_111;
  }
  unsigned int v10 = *((_DWORD *)a2 + 22);
  BOOL v11 = v5;
  do
  {
    unsigned int v12 = *((_DWORD *)v6 + 8);
    BOOL v13 = v12 >= v10;
    if (v12 >= v10) {
      uint64_t v14 = (char **)v6;
    }
    else {
      uint64_t v14 = (char **)(v6 + 8);
    }
    if (v13) {
      BOOL v11 = v6;
    }
    uint64_t v6 = *v14;
  }
  while (*v14);
  if (v11 != v5
    && v10 >= *((_DWORD *)v11 + 8)
    && (char v15 = SipMessage::header<SipReasonHeader>((uint64_t)a2), *((void *)v11 + 7)))
  {
    uint64_t v53 = a4;
    int64_t v16 = v11 + 40;
    unint64_t v62 = 0;
    uint64_t v61 = 0;
    uint64_t v63 = 0xFFFFFFFFLL;
    if (v15)
    {
      char v17 = (unsigned __int8 **)v15[8];
      std::string::size_type v56 = (unsigned __int8 **)v15[9];
      if (v17 != v56)
      {
        while (1)
        {
          xpc_object_t v18 = *v17;
          int v59 = 0;
          uint64_t v58 = 0;
          int v19 = -1;
          uint64_t v60 = 0xFFFFFFFFLL;
          if (v18)
          {
            uint64_t v20 = (void *)*((void *)v11 + 6);
            if (v20 != v16) {
              break;
            }
          }
LABEL_98:
          if (v19 > (int)v63) {
            BambiCallIncomingTerminationReasons::BambiCallTerminationScore::operator=((uint64_t)&v61, &v58);
          }
          if (v59) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v59);
          }
          if (++v17 == v56)
          {
            uint64_t v43 = v61;
            std::string::size_type v42 = v62;
            if (v62) {
              atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v43)
            {
              std::string::basic_string[abi:ne180100]<0>(&v67, "bambi.call");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v44 = ims::debug((uint64_t)&v67, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"using matched reason ", 21);
              *(unsigned char *)(v44 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v44 + 32))(v44, v43 + 8);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v44 + 17) = 0;
              if (v66 < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v67.__r_.__value_.__l.__data_);
              }
            }
            void *v53 = v43;
            v53[1] = v42;
            goto LABEL_157;
          }
        }
        std::string v54 = v17;
        while (1)
        {
          std::string::size_type v22 = v20[2];
          xpc_object_t v21 = (std::__shared_weak_count *)v20[3];
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (*(unsigned char *)(v22 + 132) && (a3 & 1) == 0)
          {
            std::string::basic_string[abi:ne180100]<0>(&v67, "bambi.call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v23 = ims::debug((uint64_t)&v67, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"ignoring override reason ", 25);
            *(unsigned char *)(v23 + 17) = 0;
            (*(void (**)(uint64_t, std::string::size_type))(*(void *)v23 + 32))(v23, v22 + 8);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            goto LABEL_60;
          }
          uint64_t v24 = *(unsigned __int8 *)(v22 + 95);
          if (*(char *)(v22 + 95) < 0)
          {
            if (!*(void *)(v22 + 80))
            {
LABEL_41:
              int v30 = 0;
              goto LABEL_49;
            }
          }
          else if (!*(unsigned char *)(v22 + 95))
          {
            goto LABEL_41;
          }
          if ((v24 & 0x80u) == 0) {
            uint64_t v25 = *(unsigned __int8 *)(v22 + 95);
          }
          else {
            uint64_t v25 = *(void *)(v22 + 80);
          }
          uint64_t v26 = v18[23];
          int v27 = (char)v26;
          if ((v26 & 0x80u) != 0) {
            uint64_t v26 = *((void *)v18 + 1);
          }
          if (v25 != v26) {
            goto LABEL_43;
          }
          if (v27 >= 0) {
            BOOL v28 = v18;
          }
          else {
            BOOL v28 = *(unsigned __int8 **)v18;
          }
          if ((v24 & 0x80) != 0)
          {
            if (memcmp(*(const void **)(v22 + 72), v28, *(void *)(v22 + 80))) {
              goto LABEL_43;
            }
          }
          else if (*(unsigned char *)(v22 + 95))
          {
            int v29 = (unsigned __int8 *)(v22 + 72);
            while (*v29 == *v28)
            {
              ++v29;
              ++v28;
              if (!--v24) {
                goto LABEL_44;
              }
            }
LABEL_43:
            std::string::basic_string[abi:ne180100]<0>(&v67, "bambi.call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v23 = ims::debug((uint64_t)&v67, (uint64_t)__p);
            (*(void (**)(uint64_t, std::string::size_type))(*(void *)v23 + 32))(v23, v22 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)": unable to match reason protocol (", 35);
            *(unsigned char *)(v23 + 17) = 0;
            (*(void (**)(uint64_t, std::string::size_type))(*(void *)v23 + 32))(v23, v22 + 72);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" != ", 4);
            *(unsigned char *)(v23 + 17) = 0;
            (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v23 + 32))(v23, v18);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)")", 1);
            *(unsigned char *)(v23 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_60:
            *(unsigned char *)(v23 + 17) = 0;
            goto LABEL_61;
          }
LABEL_44:
          std::string::basic_string[abi:ne180100]<0>(&v67, "bambi.call");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v31 = ims::debug((uint64_t)&v67, (uint64_t)__p);
          (*(void (**)(uint64_t, std::string::size_type))(*(void *)v31 + 32))(v31, v22 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)": protocol matched (", 20);
          *(unsigned char *)(v31 + 17) = 0;
          (*(void (**)(uint64_t, std::string::size_type))(*(void *)v31 + 32))(v31, v22 + 72);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)")", 1);
          *(unsigned char *)(v31 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v31 + 17) = 0;
          if (v66 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v67.__r_.__value_.__l.__data_);
          }
          int v30 = 1;
LABEL_49:
          int v32 = *(_DWORD *)(v22 + 56);
          if (v32)
          {
            if (v32 != SipReason::cause((SipReason *)v18))
            {
              std::string::basic_string[abi:ne180100]<0>(&v67, "bambi.call");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v23 = ims::debug((uint64_t)&v67, (uint64_t)__p);
              (*(void (**)(uint64_t, std::string::size_type))(*(void *)v23 + 32))(v23, v22 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)": unable to match reason cause (", 32);
              *(unsigned char *)(v23 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v23 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" != ", 4);
              *(unsigned char *)(v23 + 17) = 0;
              SipReason::cause((SipReason *)v18);
              std::ostream::operator<<();
              *(unsigned char *)(v23 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)")", 1);
              *(unsigned char *)(v23 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_60;
            }
            std::string::basic_string[abi:ne180100]<0>(&v67, "bambi.call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v33 = ims::debug((uint64_t)&v67, (uint64_t)__p);
            (*(void (**)(uint64_t, std::string::size_type))(*(void *)v33 + 32))(v33, v22 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)": cause matched (", 17);
            *(unsigned char *)(v33 + 17) = 0;
            SipReason::cause((SipReason *)v18);
            std::ostream::operator<<();
            *(unsigned char *)(v33 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)")", 1);
            *(unsigned char *)(v33 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v33 + 17) = 0;
            if (v66 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v67.__r_.__value_.__l.__data_);
            }
            ++v30;
          }
          if (*(char *)(v22 + 55) < 0)
          {
            if (!*(void *)(v22 + 40)) {
              goto LABEL_79;
            }
          }
          else if (!*(unsigned char *)(v22 + 55))
          {
            goto LABEL_79;
          }
          SipReason::text((SipReason *)v18, &v67);
          int NumMatchesForPattern = ims::getNumMatchesForPattern((uint64_t *)&v67, (uint64_t *)(v22 + 32), 1u);
          int v35 = NumMatchesForPattern;
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v67.__r_.__value_.__l.__data_);
            if (v35)
            {
LABEL_72:
              std::string::basic_string[abi:ne180100]<0>(&v67, "bambi.call");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v36 = ims::debug((uint64_t)&v67, (uint64_t)__p);
              (*(void (**)(uint64_t, std::string::size_type))(*(void *)v36 + 32))(v36, v22 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)": text matched (", 16);
              *(unsigned char *)(v36 + 17) = 0;
              double v37 = SipReason::text((SipReason *)v18, &v64);
              (*(void (**)(uint64_t, std::string *, double))(*(void *)v36 + 32))(v36, &v64, v37);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)")", 1);
              *(unsigned char *)(v36 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v36 + 17) = 0;
              if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v64.__r_.__value_.__l.__data_);
              }
              if (v66 < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v67.__r_.__value_.__l.__data_);
              }
              ++v30;
LABEL_79:
              std::string::basic_string[abi:ne180100]<0>(&v67, "bambi.call");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v38 = ims::debug((uint64_t)&v67, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"matched ", 8);
              *(unsigned char *)(v38 + 17) = 0;
              (*(void (**)(uint64_t, std::string::size_type))(*(void *)v38 + 32))(v38, v22 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)" with score ", 12);
              *(unsigned char *)(v38 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v38 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v38 + 17) = 0;
              if (v66 < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v67.__r_.__value_.__l.__data_);
              }
              if (v30 < (int)v60) {
                goto LABEL_65;
              }
              std::string::basic_string[abi:ne180100]<0>(&v67, "bambi.call");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v39 = ims::debug((uint64_t)&v67, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"new highest scoring match is ", 29);
              *(unsigned char *)(v39 + 17) = 0;
              (*(void (**)(uint64_t, std::string::size_type))(*(void *)v39 + 32))(v39, v22 + 8);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v39 + 17) = 0;
              if (v66 < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v67.__r_.__value_.__l.__data_);
                if (!v21) {
                  goto LABEL_93;
                }
LABEL_88:
                atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
                v67.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
                atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              else
              {
                if (v21) {
                  goto LABEL_88;
                }
LABEL_93:
                v67.__r_.__value_.__l.__size_ = 0;
              }
              v67.__r_.__value_.__r.__words[0] = v22;
              LODWORD(v67.__r_.__value_.__r.__words[2]) = v30;
              BambiCallIncomingTerminationReasons::BambiCallTerminationScore::operator=((uint64_t)&v58, (uint64_t *)&v67);
              if (v67.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v67.__r_.__value_.__l.__size_);
              }
              if (v21) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v21);
              }
              goto LABEL_65;
            }
          }
          else if (NumMatchesForPattern)
          {
            goto LABEL_72;
          }
          std::string::basic_string[abi:ne180100]<0>(&v67, "bambi.call");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v40 = ims::debug((uint64_t)&v67, (uint64_t)__p);
          (*(void (**)(uint64_t, std::string::size_type))(*(void *)v40 + 32))(v40, v22 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)": unable to match reason text (", 31);
          *(unsigned char *)(v40 + 17) = 0;
          (*(void (**)(uint64_t, std::string::size_type))(*(void *)v40 + 32))(v40, v22 + 32);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)" != ", 4);
          *(unsigned char *)(v40 + 17) = 0;
          double v41 = SipReason::text((SipReason *)v18, &v64);
          (*(void (**)(uint64_t, std::string *, double))(*(void *)v40 + 32))(v40, &v64, v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)")", 1);
          *(unsigned char *)(v40 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v40 + 17) = 0;
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
LABEL_61:
          if (v66 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v67.__r_.__value_.__l.__data_);
          }
LABEL_65:
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
          uint64_t v20 = (void *)v20[1];
          if (v20 == v16)
          {
            int v19 = v60;
            char v17 = v54;
            goto LABEL_98;
          }
        }
      }
    }
    if (*((char *)a2 + 119) < 0) {
      std::string::__init_copy_ctor_external(&v64, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
    }
    else {
      std::string v64 = *(std::string *)((unsigned char *)a2 + 4);
    }
    void *v53 = 0;
    v53[1] = 0;
    int v45 = (void *)*((void *)v11 + 6);
    if (v45 != v16)
    {
      uint64_t v55 = 0;
      int v57 = 0;
      while (1)
      {
        uint64_t v46 = v45[2];
        int64_t v47 = (std::__shared_weak_count *)v45[3];
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!*(unsigned char *)(v46 + 132) || (a3 & 1) != 0)
        {
          if (!*(_DWORD *)(v46 + 56))
          {
            if (*(char *)(v46 + 55) < 0)
            {
              if (!*(void *)(v46 + 40)) {
                goto LABEL_138;
              }
            }
            else if (!*(unsigned char *)(v46 + 55))
            {
              goto LABEL_138;
            }
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::vector<std::string>::pointer v49 = &v64;
            }
            else {
              std::vector<std::string>::pointer v49 = (std::string *)v64.__r_.__value_.__r.__words[0];
            }
            if (*(char *)(v46 + 55) >= 0) {
              long long v50 = (const char *)(v46 + 32);
            }
            else {
              long long v50 = *(const char **)(v46 + 32);
            }
            if (!strcasecmp((const char *)v49, v50))
            {
LABEL_138:
              std::string::basic_string[abi:ne180100]<0>(&v67, "bambi.call");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v51 = ims::debug((uint64_t)&v67, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v51 + 8), (uint64_t)"matched ", 8);
              *(unsigned char *)(v51 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v51 + 32))(v51, v46 + 8);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v51 + 17) = 0;
              if (v66 < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v67.__r_.__value_.__l.__data_);
              }
              if (v47) {
                atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              void *v53 = v46;
              v53[1] = v47;
              if (v57) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v57);
              }
              uint64_t v55 = v46;
              int v57 = v47;
            }
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v67, "bambi.call");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v48 = ims::debug((uint64_t)&v67, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"ignoring override reason ", 25);
          *(unsigned char *)(v48 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 32))(v48, v46 + 8);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v48 + 17) = 0;
          if (v66 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v67.__r_.__value_.__l.__data_);
          }
        }
        if (v47) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        }
        int v45 = (void *)v45[1];
        if (v45 == v16)
        {
          if (v55)
          {
            std::string::basic_string[abi:ne180100]<0>(&v67, "bambi.call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v52 = ims::debug((uint64_t)&v67, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v52 + 8), (uint64_t)"using matching reason ", 22);
            *(unsigned char *)(v52 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v52 + 32))(v52, v55 + 8);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v52 + 17) = 0;
            if (v66 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v67.__r_.__value_.__l.__data_);
            }
          }
          break;
        }
      }
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
LABEL_157:
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
  }
  else
  {
LABEL_111:
    *a4 = 0;
    a4[1] = 0;
  }
}

void sub_1C555B2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (*(char *)(v30 - 89) < 0) {
    operator delete(*(void **)(v30 - 112));
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void *SipMessage::header<SipReasonHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "Reason");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

uint64_t BambiCallIncomingTerminationReasons::BambiCallTerminationScore::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v5 = *a2;
    uint64_t v4 = a2[1];
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    *(_DWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = *((_DWORD *)a2 + 4);
  }
  return a1;
}

void BambiCallIncomingTerminationReasons::reasonForByeOrCancelRequest(void (***this)(uint64_t *__return_ptr)@<X0>, const SipRequest *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v7 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
  uint64_t v8 = v7[23];
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = v7[23];
  }
  else {
    uint64_t v9 = *((void *)v7 + 1);
  }
  if (v9 != 3) {
    goto LABEL_12;
  }
  if ((v8 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v7, &SipRequest::kMethodBye, *((void *)v7 + 1))) {
      goto LABEL_23;
    }
LABEL_12:
    BOOL v11 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
    uint64_t v12 = v11[23];
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = v11[23];
    }
    else {
      uint64_t v13 = *((void *)v11 + 1);
    }
    if (v13 != 6)
    {
LABEL_120:
      *a4 = 0;
      a4[1] = 0;
      return;
    }
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, "CANCEL", *((void *)v11 + 1))) {
        goto LABEL_120;
      }
    }
    else if (v11[23])
    {
      uint64_t v14 = "CANCEL";
      do
      {
        if (*v11 != *(unsigned __int8 *)v14) {
          goto LABEL_120;
        }
        ++v11;
        ++v14;
        --v12;
      }
      while (v12);
    }
    goto LABEL_23;
  }
  if (v7[23])
  {
    unsigned int v10 = &SipRequest::kMethodBye;
    while (*v7 == *(unsigned __int8 *)v10)
    {
      ++v7;
      unsigned int v10 = (long long *)((char *)v10 + 1);
      if (!--v8) {
        goto LABEL_23;
      }
    }
    goto LABEL_12;
  }
LABEL_23:
  char v15 = SipMessage::header<SipReasonHeader>((uint64_t)a2);
  if (!v15) {
    goto LABEL_120;
  }
  int64_t v16 = (void *)v15[8];
  int64_t v47 = (void *)v15[9];
  if (v16 == v47) {
    goto LABEL_120;
  }
  while (2)
  {
    std::vector<std::string>::pointer v49 = v16;
    char v17 = (std::string::size_type *)*v16;
    *a4 = 0;
    a4[1] = 0;
    memset(&v59, 0, sizeof(v59));
    SipReason::text((SipReason *)v17, &v59);
    int v18 = SipReason::cause((SipReason *)v17);
    memset(&v58, 0, sizeof(v58));
    if (*((char *)v17 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v58, (const std::string::value_type *)*v17, v17[1]);
    }
    else
    {
      long long v19 = *(_OWORD *)v17;
      v58.__r_.__value_.__r.__words[2] = v17[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v19;
    }
    *a4 = 0;
    a4[1] = 0;
    std::string::size_type v56 = 0;
    int v57 = 0;
    BambiCallTerminationReasonsBase::getCombinedReasonMap(this, &v56);
    uint64_t v20 = (long long *)(v56 + 1);
    xpc_object_t v21 = (long long *)*v56;
    if ((void *)*v56 == v56 + 1) {
      goto LABEL_110;
    }
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    do
    {
      uint64_t v55 = 0;
      memset(v54, 0, sizeof(v54));
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)v54, v21 + 2);
      uint64_t v24 = *(void *)&v54[24];
      if (*(unsigned char *)(*(void *)&v54[24] + 132) && (a3 & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v52, "bambi.call");
        std::string::basic_string[abi:ne180100]<0>(&v51, "");
        uint64_t v25 = ims::warn((uint64_t)v52, (uint64_t)&v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"skipping ", 9);
        *(unsigned char *)(v25 + 17) = 0;
        LoggableString::LoggableString(&__p, (const std::string *)(*(void *)&v54[24] + 8));
        (*(void (**)(uint64_t, std::string *))(*(void *)v25 + 40))(v25, &__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)", overrides are not allowed for this call", 41);
        *(unsigned char *)(v25 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v25 + 17) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v51.__r_.__value_.__l.__data_);
        }
        if (v53 < 0) {
          operator delete(v52[0]);
        }
        goto LABEL_72;
      }
      int v26 = *(_DWORD *)(*(void *)&v54[24] + 56);
      if (!v26)
      {
        if (*(char *)(*(void *)&v54[24] + 55) < 0)
        {
          if (*(void *)(*(void *)&v54[24] + 40)) {
            goto LABEL_55;
          }
        }
        else if (*(unsigned char *)(*(void *)&v54[24] + 55))
        {
          goto LABEL_55;
        }
        std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v58.__r_.__value_.__l.__size_;
        }
        if (size != 3) {
          goto LABEL_72;
        }
        uint64_t v39 = &v58;
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v39 = (std::string *)v58.__r_.__value_.__r.__words[0];
        }
        int data_low = LOWORD(v39->__r_.__value_.__l.__data_);
        int v41 = v39->__r_.__value_.__s.__data_[2];
        BOOL v42 = data_low == 18771 && v41 == 80;
        BOOL v43 = !v42;
        if (v43 || v18 == 0) {
          goto LABEL_72;
        }
        int v26 = *(_DWORD *)(*(void *)&v54[24] + 60);
      }
      if (v26) {
        BOOL v27 = v26 == v18;
      }
      else {
        BOOL v27 = 1;
      }
      if (v27)
      {
LABEL_55:
        int v32 = 0;
        goto LABEL_56;
      }
      BOOL v28 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
      uint64_t v29 = v28[23];
      if ((v29 & 0x80u) == 0) {
        uint64_t v30 = v28[23];
      }
      else {
        uint64_t v30 = *((void *)v28 + 1);
      }
      if (v30 != 6) {
        goto LABEL_72;
      }
      if ((v29 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v28, "CANCEL", *((void *)v28 + 1))) {
          goto LABEL_72;
        }
LABEL_101:
        if (v18 != 200) {
          goto LABEL_72;
        }
        int v32 = 1;
        uint64_t v24 = *(void *)&v54[24];
LABEL_56:
        if (*(char *)(v24 + 55) < 0) {
          uint64_t v33 = *(void *)(v24 + 40);
        }
        else {
          uint64_t v33 = *(unsigned __int8 *)(v24 + 55);
        }
        if (((v33 == 0) & ~v32) != 0
          || ims::getNumMatchesForPattern((uint64_t *)&v59, (uint64_t *)(v24 + 32), 1u))
        {
          std::string::basic_string[abi:ne180100]<0>(v52, "bambi.call");
          std::string::basic_string[abi:ne180100]<0>(&v51, "");
          uint64_t v34 = ims::debug((uint64_t)v52, (uint64_t)&v51);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"matched ", 8);
          *(unsigned char *)(v34 + 17) = 0;
          LoggableString::LoggableString(&__p, (const std::string *)(*(void *)&v54[24] + 8));
          (*(void (**)(uint64_t, std::string *))(*(void *)v34 + 40))(v34, &__p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v34 + 17) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v51.__r_.__value_.__l.__data_);
          }
          if (v53 < 0) {
            operator delete(v52[0]);
          }
          uint64_t v22 = *(void *)&v54[24];
          int v35 = v55;
          if (v55) {
            atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *a4 = v22;
          a4[1] = v35;
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          uint64_t v23 = v35;
        }
        goto LABEL_72;
      }
      if (!v28[23]) {
        goto LABEL_101;
      }
      uint64_t v31 = "CANCEL";
      while (*v28 == *(unsigned __int8 *)v31)
      {
        ++v28;
        ++v31;
        if (!--v29) {
          goto LABEL_101;
        }
      }
LABEL_72:
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
      if ((v54[23] & 0x80000000) != 0) {
        operator delete(*(void **)v54);
      }
      uint64_t v36 = (long long *)*((void *)v21 + 1);
      if (v36)
      {
        do
        {
          double v37 = v36;
          uint64_t v36 = *(long long **)v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          double v37 = (long long *)*((void *)v21 + 2);
          BOOL v27 = *(void *)v37 == (void)v21;
          xpc_object_t v21 = v37;
        }
        while (!v27);
      }
      xpc_object_t v21 = v37;
    }
    while (v37 != v20);
    if (v22)
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "bambi.call");
      std::string::basic_string[abi:ne180100]<0>(v52, "");
      uint64_t v45 = ims::debug((uint64_t)v54, (uint64_t)v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"using matching reason ", 22);
      *(unsigned char *)(v45 + 17) = 0;
      LoggableString::LoggableString(&v51, (const std::string *)(v22 + 8));
      (*(void (**)(uint64_t, std::string *))(*(void *)v45 + 40))(v45, &v51);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v45 + 17) = 0;
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if (v53 < 0) {
        operator delete(v52[0]);
      }
      if ((v54[23] & 0x80000000) != 0) {
        operator delete(*(void **)v54);
      }
    }
LABEL_110:
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (!*a4)
    {
      uint64_t v46 = (std::__shared_weak_count *)a4[1];
      if (v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
      }
      int64_t v16 = v49 + 1;
      if (v49 + 1 == v47) {
        goto LABEL_120;
      }
      continue;
    }
    break;
  }
}

void sub_1C555BCC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  BOOL v43 = *(std::__shared_weak_count **)(v40 + 8);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (*(char *)(v41 - 121) < 0) {
    operator delete(*(void **)(v41 - 144));
  }
  if (*(char *)(v41 - 89) < 0) {
    operator delete(*(void **)(v41 - 112));
  }
  _Unwind_Resume(exception_object);
}

void BambiCallTerminationReasons::getDefaultReasonMap(BambiCallTerminationReasons *this@<X0>, uint64_t *a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDC4D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDC4D0))
  {
    __cxa_atexit((void (*)(void *))std::weak_ptr<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::~weak_ptr, &qword_1EBBDC4F0, &dword_1C51D1000);
    __cxa_guard_release(&qword_1EBBDC4D0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDC4D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDC4D8))
  {
    __cxa_atexit(MEMORY[0x1E4FBA268], &BambiCallTerminationReasons::getDefaultReasonMap(void)const::sDefaultsMtx, &dword_1C51D1000);
    __cxa_guard_release(&qword_1EBBDC4D8);
  }
  std::mutex::lock(&BambiCallTerminationReasons::getDefaultReasonMap(void)const::sDefaultsMtx);
  *a2 = 0;
  a2[1] = 0;
  if (qword_1EBBDC4F8)
  {
    uint64_t v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_1EBBDC4F8);
    a2[1] = (uint64_t)v4;
    if (v4)
    {
      uint64_t v5 = qword_1EBBDC4F0;
      *a2 = qword_1EBBDC4F0;
      if (v5) {
        goto LABEL_11;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  *a2 = 0;
  a2[1] = 0;
  (*(void (**)(BambiCallTerminationReasons *))(*(void *)this + 8))(this);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)qword_1EBBDC4F8;
  qword_1EBBDC4F0 = v7;
  qword_1EBBDC4F8 = v6;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_11:
  std::mutex::unlock(&BambiCallTerminationReasons::getDefaultReasonMap(void)const::sDefaultsMtx);
}

void sub_1C555BF5C(_Unwind_Exception *a1)
{
}

void BambiCallTerminationReasons::createDefaultReasonMap(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  int v3 = operator new(0x30uLL);
  v3[1] = 0;
  void v3[2] = 0;
  *int v3 = &unk_1F20DBAA8;
  v3[5] = 0;
  a1[1] = v3;
  void v3[4] = 0;
  v3[3] = v3 + 4;
  uint64_t v4 = (uint64_t **)(v3 + 3);
  *a1 = v3 + 3;
  LODWORD(v158.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[15],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "UserTriggered", (int *)&v158);
  long long v5 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  ims::lowerCase(__p.__r_.__value_.__r.__words[0] + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v5 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 8);
  *(_OWORD *)((char *)v6 + 5ims::StackConfig::~StackConfig(this + 6) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[22],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "RejectedByUser", "Call Rejected By User", (int *)&v158);
  long long v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  ims::lowerCase(v8 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v8 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v10 = (std::__shared_weak_count *)*((void *)v9 + 8);
  *(_OWORD *)((char *)v9 + 5ims::StackConfig::~StackConfig(this + 6) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[22],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "CallWaitingDisabled", "Call Waiting Disabled", (int *)&v158);
  long long v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  ims::lowerCase(v11 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v11 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v12 + 8);
  *(_OWORD *)((char *)v12 + 5ims::StackConfig::~StackConfig(this + 6) = v11;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[22],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "DoNotDisturb", "Call Rejected By User", (int *)&v158);
  long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  ims::lowerCase(v14 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  char v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v14 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int64_t v16 = (std::__shared_weak_count *)*((void *)v15 + 8);
  *(_OWORD *)((char *)v15 + 5ims::StackConfig::~StackConfig(this + 6) = v14;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[22],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "Blocked", "Call Rejected By User", (int *)&v158);
  long long v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v14 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
  }
  ims::lowerCase(v17 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  int v18 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v17 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v19 = (std::__shared_weak_count *)*((void *)v18 + 8);
  *(_OWORD *)((char *)v18 + 5ims::StackConfig::~StackConfig(this + 6) = v17;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v20 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "SRVCC");
  std::string::basic_string[abi:ne180100]<0>(&v158, "SRVCC");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v20[1], &__p, &v158, 500, 8, 0, 0);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  ims::lowerCase((uint64_t)&v20[1].__shared_owners_, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  xpc_object_t v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v22 = (std::__shared_weak_count *)*((void *)v21 + 8);
  *((void *)v21 + 7) = v20 + 1;
  *((void *)v21 + 8) = v20;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v23 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v23->__shared_owners_ = 0;
  v23->__shared_weak_owners_ = 0;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "DeferToSecondary");
  std::string::basic_string[abi:ne180100]<0>(&v158, "Deferred to Secondary Device");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v23[1], &__p, &v158, 480, 0, 0, 0);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  ims::lowerCase((uint64_t)&v23[1].__shared_owners_, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v24 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v25 = (std::__shared_weak_count *)*((void *)v24 + 8);
  *((void *)v24 + 7) = v23 + 1;
  *((void *)v24 + 8) = v23;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[25],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "AvoidVoicemail", "Do not send to voicemail", &SipResponse::kStatusAvoidVoicemail, (int *)&v158);
  long long v26 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  ims::lowerCase(v26 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  BOOL v27 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v26 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v28 = (std::__shared_weak_count *)*((void *)v27 + 8);
  *(_OWORD *)((char *)v27 + 5ims::StackConfig::~StackConfig(this + 6) = v26;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 6;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[25],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "CallCompletedElsewhere", "Call completed elsewhere", &SipResponse::kStatusRequestTerminated, (int *)&v158);
  long long v29 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  ims::lowerCase(v29 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v30 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v29 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = (std::__shared_weak_count *)*((void *)v30 + 8);
  *(_OWORD *)((char *)v30 + 5ims::StackConfig::~StackConfig(this + 6) = v29;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 7;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[32],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "OtherSecondaryDeviceOnCall", "Secondary device already in use", &SipResponse::kStatusDecline, (int *)&v158);
  long long v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v29 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
  }
  ims::lowerCase(v32 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v33 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v32 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v34 = (std::__shared_weak_count *)*((void *)v33 + 8);
  *(_OWORD *)((char *)v33 + 5ims::StackConfig::~StackConfig(this + 6) = v32;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 34;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[26],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "EstablishingAnotherCall", "Establishing Another Call", &SipResponse::kStatusBusyHere, (int *)&v158);
  long long v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v32 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
  }
  ims::lowerCase(v35 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v36 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v35 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  double v37 = (std::__shared_weak_count *)*((void *)v36 + 8);
  *(_OWORD *)((char *)v36 + 5ims::StackConfig::~StackConfig(this + 6) = v35;
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v38 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v38->__shared_owners_ = 0;
  v38->__shared_weak_owners_ = 0;
  v38->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "AlreadyOnMaxCalls");
  std::string::basic_string[abi:ne180100]<0>(&v158, "Already On Max Calls");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v38[1], &__p, &v158, 486, 34, 0, 0);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  ims::lowerCase((uint64_t)&v38[1].__shared_owners_, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v39 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v40 = (std::__shared_weak_count *)*((void *)v39 + 8);
  *((void *)v39 + 7) = v38 + 1;
  *((void *)v39 + 8) = v38;
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 25;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[32],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "NoLTE", "Moved to non-LTE access network", &SipResponse::kStatusNotAcceptableHere, (int *)&v158);
  long long v41 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  ims::lowerCase(v41 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  BOOL v42 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v41 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v43 = (std::__shared_weak_count *)*((void *)v42 + 8);
  *(_OWORD *)((char *)v42 + 5ims::StackConfig::~StackConfig(this + 6) = v41;
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v44 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v44->__shared_owners_ = 0;
  v44->__shared_weak_owners_ = 0;
  v44->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "NonVoiceLTE");
  std::string::basic_string[abi:ne180100]<0>(&v158, "Moved to LTE without VoLTE support");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v44[1], &__p, &v158, 488, 25, 0, 0);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v41 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
  }
  ims::lowerCase((uint64_t)&v44[1].__shared_owners_, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v45 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v46 = (std::__shared_weak_count *)*((void *)v45 + 8);
  *((void *)v45 + 7) = v44 + 1;
  *((void *)v45 + 8) = v44;
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 25;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[20],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "NotVoiceRegisteredNoLTE", "Not Acceptable Here", &SipResponse::kStatusNotAcceptableHere, (int *)&v158);
  long long v47 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  ims::lowerCase(v47 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v48 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v47 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::vector<std::string>::pointer v49 = (std::__shared_weak_count *)*((void *)v48 + 8);
  *(_OWORD *)((char *)v48 + 5ims::StackConfig::~StackConfig(this + 6) = v47;
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 25;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[20],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "NotVoiceRegisteredNonVoiceLTE", "Not Acceptable Here", &SipResponse::kStatusNotAcceptableHere, (int *)&v158);
  long long v50 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v47 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v47 + 1));
  }
  ims::lowerCase(v50 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::string v51 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v50 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v52 = (std::__shared_weak_count *)*((void *)v51 + 8);
  *(_OWORD *)((char *)v51 + 5ims::StackConfig::~StackConfig(this + 6) = v50;
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[16],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "SessionExpired", "Session Expired", (int *)&v158);
  long long v53 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v50 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
  }
  ims::lowerCase(v53 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::string v54 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v53 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v53 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v55 = (std::__shared_weak_count *)*((void *)v54 + 8);
  *(_OWORD *)((char *)v54 + 5ims::StackConfig::~StackConfig(this + 6) = v53;
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 19;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "MediaError", (int *)&v158);
  long long v56 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v53 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53 + 1));
  }
  ims::lowerCase(v56 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  int v57 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v56 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v56 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::string v58 = (std::__shared_weak_count *)*((void *)v57 + 8);
  *(_OWORD *)((char *)v57 + 5ims::StackConfig::~StackConfig(this + 6) = v56;
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 20;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[12],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "MediaTimeout", "RTP Timeout", (int *)&SipResponse::kStatusServerInternalError, (int *)&v158);
  long long v59 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v56 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v56 + 1));
  }
  ims::lowerCase(v59 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v60 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v59 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v59 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v61 = (std::__shared_weak_count *)*((void *)v60 + 8);
  *(_OWORD *)((char *)v60 + 5ims::StackConfig::~StackConfig(this + 6) = v59;
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 21;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[13],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "MediaHeartbeatTimeout", "RTCP Timeout", (int *)&v158);
  long long v62 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v59 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v59 + 1));
  }
  ims::lowerCase(v62 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v63 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v62 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v62 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::string v64 = (std::__shared_weak_count *)*((void *)v63 + 8);
  *(_OWORD *)((char *)v63 + 5ims::StackConfig::~StackConfig(this + 6) = v62;
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v65 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v65->__shared_owners_ = 0;
  v65->__shared_weak_owners_ = 0;
  v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "NoAnswer");
  std::string::basic_string[abi:ne180100]<0>(&v158, "No Answer");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v65[1], &__p, &v158, 486, 2, 0, 0);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v62 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v62 + 1));
  }
  ims::lowerCase((uint64_t)&v65[1].__shared_owners_, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  char v66 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string v67 = (std::__shared_weak_count *)*((void *)v66 + 8);
  *((void *)v66 + 7) = v65 + 1;
  *((void *)v66 + 8) = v65;
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[18],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "JoinedConference", "Joined N-way Call", (int *)&SipResponse::kStatusServerInternalError, (int *)&v158);
  long long v68 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  ims::lowerCase(v68 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  int64_t v69 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v68 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v68 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v70 = (std::__shared_weak_count *)*((void *)v69 + 8);
  *(_OWORD *)((char *)v69 + 5ims::StackConfig::~StackConfig(this + 6) = v68;
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[23],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "ConferenceJoinFailed", "Conference join failed", (int *)&v158);
  long long v71 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v68 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v68 + 1));
  }
  ims::lowerCase(v71 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  long long v72 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v71 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v71 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int64_t v73 = (std::__shared_weak_count *)*((void *)v72 + 8);
  *(_OWORD *)((char *)v72 + 5ims::StackConfig::~StackConfig(this + 6) = v71;
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[25],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "EmptyConference", "Conference call is empty", (int *)&SipResponse::kStatusServerInternalError, (int *)&v158);
  long long v74 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v71 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v71 + 1));
  }
  ims::lowerCase(v74 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v75 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v74 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int64_t v76 = (std::__shared_weak_count *)*((void *)v75 + 8);
  *(_OWORD *)((char *)v75 + 5ims::StackConfig::~StackConfig(this + 6) = v74;
  if (v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[13],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "ReferFailed", "REFER failed", (int *)&v158);
  long long v77 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v74 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v74 + 1));
  }
  ims::lowerCase(v77 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  int64_t v78 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v77 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v77 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v79 = (std::__shared_weak_count *)*((void *)v78 + 8);
  *(_OWORD *)((char *)v78 + 5ims::StackConfig::~StackConfig(this + 6) = v77;
  if (v79) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v79);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 28;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[18],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "OnEmergencyCall", "On Emergency Call", &SipResponse::kStatusBusyHere, (int *)&v158);
  long long v80 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v77 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
  }
  ims::lowerCase(v80 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  int v81 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v80 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v80 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int64_t v82 = (std::__shared_weak_count *)*((void *)v81 + 8);
  *(_OWORD *)((char *)v81 + 5ims::StackConfig::~StackConfig(this + 6) = v80;
  if (v82) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v82);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 29;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[12],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "InvalidSdp", "Invalid SDP", &SipResponse::kStatusNotAcceptableHere, (int *)&v158);
  long long v83 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v80 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80 + 1));
  }
  ims::lowerCase(v83 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::string v84 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v83 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v83 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int v85 = (std::__shared_weak_count *)*((void *)v84 + 8);
  *(_OWORD *)((char *)v84 + 5ims::StackConfig::~StackConfig(this + 6) = v83;
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v86 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v86->__shared_owners_ = 0;
  v86->__shared_weak_owners_ = 0;
  v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "MissingSdp");
  std::string::basic_string[abi:ne180100]<0>(&v158, "Missing SDP Answer");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v86[1], &__p, &v158, 488, 29, 0, 0);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v83 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
  }
  ims::lowerCase((uint64_t)&v86[1].__shared_owners_, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  int64_t v87 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v88 = (std::__shared_weak_count *)*((void *)v87 + 8);
  *((void *)v87 + 7) = v86 + 1;
  *((void *)v87 + 8) = v86;
  if (v88) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v88);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[20],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "CodecNotSupported", "Not Acceptable Here", &SipResponse::kStatusNotAcceptableHere, (int *)&v158);
  long long v89 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  std::__shared_weak_count::__release_shared[abi:ne180100](v86);
  ims::lowerCase(v89 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  long long v90 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v89 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v89 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v91 = (std::__shared_weak_count *)*((void *)v90 + 8);
  *(_OWORD *)((char *)v90 + 5ims::StackConfig::~StackConfig(this + 6) = v89;
  if (v91) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v91);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[20],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "ReceivedRejectSdp", "Received reject SDP", &SipResponse::kStatusNotAcceptableHere, (int *)&v158);
  long long v92 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v89 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v89 + 1));
  }
  ims::lowerCase(v92 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v93 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v92 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v92 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::vector<std::string>::pointer v94 = (std::__shared_weak_count *)*((void *)v93 + 8);
  *(_OWORD *)((char *)v93 + 5ims::StackConfig::~StackConfig(this + 6) = v92;
  if (v94) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v94);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[16],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "NoAckReceived", "No ACK received", (int *)&v158);
  long long v95 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v92 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v92 + 1));
  }
  ims::lowerCase(v95 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  unint64_t v96 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v95 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v95 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int v97 = (std::__shared_weak_count *)*((void *)v96 + 8);
  *(_OWORD *)((char *)v96 + 5ims::StackConfig::~StackConfig(this + 6) = v95;
  if (v97) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v97);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v98 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v98->__shared_owners_ = 0;
  v98->__shared_weak_owners_ = 0;
  v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "PreconditionFailure");
  std::string::basic_string[abi:ne180100]<0>(&v158, "Precondition Failure");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v98[1], &__p, &v158, 580, 23, 0, 2);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v95 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v95 + 1));
  }
  ims::lowerCase((uint64_t)&v98[1].__shared_owners_, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  int64_t v99 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v100 = (std::__shared_weak_count *)*((void *)v99 + 8);
  *((void *)v99 + 7) = v98 + 1;
  *((void *)v99 + 8) = v98;
  if (v100) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v100);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 23;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[26],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "WaitForRingingTimeout", "Remote device didn't ring", (int *)&SipResponse::kStatusServerInternalError, (int *)&v158);
  long long v101 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  std::__shared_weak_count::__release_shared[abi:ne180100](v98);
  ims::lowerCase(v101 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v102 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v101 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v101 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int64_t v103 = (std::__shared_weak_count *)*((void *)v102 + 8);
  *(_OWORD *)((char *)v102 + 5ims::StackConfig::~StackConfig(this + 6) = v101;
  if (v103) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v103);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v104 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v104->__shared_owners_ = 0;
  v104->__shared_weak_owners_ = 0;
  v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "LocalQualityOfServiceTimeout");
  std::string::basic_string[abi:ne180100]<0>(&v158, "Local QoS not established");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v104[1], &__p, &v158, 580, 24, 0, 1);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v101 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v101 + 1));
  }
  ims::lowerCase((uint64_t)&v104[1].__shared_owners_, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::string v105 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string v106 = (std::__shared_weak_count *)*((void *)v105 + 8);
  *((void *)v105 + 7) = v104 + 1;
  *((void *)v105 + 8) = v104;
  if (v106) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v106);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[20],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "HoldResumeTimeout", "Hold/resume timeout", (int *)&SipResponse::kStatusServerInternalError, (int *)&v158);
  long long v107 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  std::__shared_weak_count::__release_shared[abi:ne180100](v104);
  ims::lowerCase(v107 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::string v108 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v107 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v107 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v109 = (std::__shared_weak_count *)*((void *)v108 + 8);
  *(_OWORD *)((char *)v108 + 5ims::StackConfig::~StackConfig(this + 6) = v107;
  if (v109) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v109);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[14],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "Deregistering", (int *)&v158);
  long long v110 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v107 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v107 + 1));
  }
  ims::lowerCase(v110 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::string v111 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v110 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v110 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v112 = (std::__shared_weak_count *)*((void *)v111 + 8);
  *(_OWORD *)((char *)v111 + 5ims::StackConfig::~StackConfig(this + 6) = v110;
  if (v112) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v112);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 30;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[14],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "Deinitializing", (int *)&v158);
  long long v113 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v110 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v110 + 1));
  }
  ims::lowerCase(v113 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::string v114 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v113 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v113 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::string v115 = (std::__shared_weak_count *)*((void *)v114 + 8);
  *(_OWORD *)((char *)v114 + 5ims::StackConfig::~StackConfig(this + 6) = v113;
  if (v115) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v115);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v116 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v116->__shared_owners_ = 0;
  v116->__shared_weak_owners_ = 0;
  v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "RemoteCancel");
  std::string::basic_string[abi:ne180100]<0>(&v158, "Remote end CANCELed a completed transaction");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v116[1], &__p, &v158, 487, 5, 0, 0);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v113 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v113 + 1));
  }
  ims::lowerCase((uint64_t)&v116[1].__shared_owners_, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::string::size_type v117 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v118 = (std::__shared_weak_count *)*((void *)v117 + 8);
  *((void *)v117 + 7) = v116 + 1;
  *((void *)v117 + 8) = v116;
  if (v118) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v118);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 26;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[23],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "ExitEmergencyState", "Emergency state exited", (int *)&v158);
  long long v119 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  std::__shared_weak_count::__release_shared[abi:ne180100](v116);
  ims::lowerCase(v119 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::string v120 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v119 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v119 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::vector<std::string>::pointer v121 = (std::__shared_weak_count *)*((void *)v120 + 8);
  *(_OWORD *)((char *)v120 + 5ims::StackConfig::~StackConfig(this + 6) = v119;
  if (v121) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v121);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 32;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "AudioUnit", (int *)&v158);
  long long v122 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v119 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119 + 1));
  }
  ims::lowerCase(v122 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  unint64_t v123 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v122 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v122 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v124 = (std::__shared_weak_count *)*((void *)v123 + 8);
  *(_OWORD *)((char *)v123 + 5ims::StackConfig::~StackConfig(this + 6) = v122;
  if (v124) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v124);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 33;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "AVConferenceCrash", (int *)&v158);
  long long v125 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v122 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v122 + 1));
  }
  ims::lowerCase(v125 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v126 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v125 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v125 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v127 = (std::__shared_weak_count *)*((void *)v126 + 8);
  *(_OWORD *)((char *)v126 + 5ims::StackConfig::~StackConfig(this + 6) = v125;
  if (v127) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v127);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 35;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "BasebandCrash", (int *)&v158);
  long long v128 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v125 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v125 + 1));
  }
  ims::lowerCase(v128 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v129 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v128 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v128 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::vector<std::string>::pointer v130 = (std::__shared_weak_count *)*((void *)v129 + 8);
  *(_OWORD *)((char *)v129 + 5ims::StackConfig::~StackConfig(this + 6) = v128;
  if (v130) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v130);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v131 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v131->__shared_owners_ = 0;
  v131->__shared_weak_owners_ = 0;
  v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "BearerRevoked");
  std::string::basic_string[abi:ne180100]<0>(&v158, "Media bearer loss");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v131[1], &__p, &v158, 500, 11, 3, 0);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v128 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v128 + 1));
  }
  ims::lowerCase((uint64_t)&v131[1].__shared_owners_, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  unint64_t v132 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  atomic_fetch_add_explicit(&v131->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v133 = (std::__shared_weak_count *)*((void *)v132 + 8);
  *((void *)v132 + 7) = v131 + 1;
  *((void *)v132 + 8) = v131;
  if (v133) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v133);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v134 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v134->__shared_owners_ = 0;
  v134->__shared_weak_owners_ = 0;
  v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "TransferredToOtherDevice");
  std::string::basic_string[abi:ne180100]<0>(&v158, "Transferred to another device");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v134[1], &__p, &v158, 200, 0, 0, 0);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v131);
  ims::lowerCase((uint64_t)&v134[1].__shared_owners_, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v135 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  atomic_fetch_add_explicit(&v134->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string v136 = (std::__shared_weak_count *)*((void *)v135 + 8);
  *((void *)v135 + 7) = v134 + 1;
  *((void *)v135 + 8) = v134;
  if (v136) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v136);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 18;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "InternalError", (int *)&v158);
  long long v137 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  std::__shared_weak_count::__release_shared[abi:ne180100](v134);
  ims::lowerCase(v137 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v138 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v137 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v137 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::vector<std::string>::pointer v139 = (std::__shared_weak_count *)*((void *)v138 + 8);
  *(_OWORD *)((char *)v138 + 5ims::StackConfig::~StackConfig(this + 6) = v137;
  if (v139) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v139);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "NetworkError", (int *)&v158);
  long long v140 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v137 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v137 + 1));
  }
  ims::lowerCase(v140 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  unint64_t v141 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v140 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v140 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v142 = (std::__shared_weak_count *)*((void *)v141 + 8);
  *(_OWORD *)((char *)v141 + 5ims::StackConfig::~StackConfig(this + 6) = v140;
  if (v142) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v142);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v158.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[15],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "EmergencyUserTriggered", (int *)&v158);
  long long v143 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((void *)&v140 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v140 + 1));
  }
  ims::lowerCase(v143 + 8, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v144 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  if (*((void *)&v143 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v143 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v145 = (std::__shared_weak_count *)*((void *)v144 + 8);
  *(_OWORD *)((char *)v144 + 5ims::StackConfig::~StackConfig(this + 6) = v143;
  if (v145) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v145);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v146 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v146->__shared_owners_ = 0;
  v146->__shared_weak_owners_ = 0;
  v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "EmergencyUserTriggeredTimeout");
  std::string::basic_string[abi:ne180100]<0>(&v158, "User ends call SIP response time-out");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v146[1], &__p, &v158, 486, 0, 4, 0);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v143 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v143 + 1));
  }
  ims::lowerCase((uint64_t)&v146[1].__shared_owners_, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::string v147 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
  std::vector<std::string>::pointer v148 = (std::__shared_weak_count *)*((void *)v147 + 8);
  *((void *)v147 + 7) = v146 + 1;
  *((void *)v147 + 8) = v146;
  if (v148) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v148);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v149 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v149->__shared_owners_ = 0;
  v149->__shared_weak_owners_ = 0;
  v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "EmergencyTimeout");
  std::string::basic_string[abi:ne180100]<0>(&v158, "SIP response time-out");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v149[1], &__p, &v158, 500, 17, 4, 0);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v146);
  ims::lowerCase((uint64_t)&v149[1].__shared_owners_, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  unint64_t v150 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  atomic_fetch_add_explicit(&v149->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v151 = (std::__shared_weak_count *)*((void *)v150 + 8);
  *((void *)v150 + 7) = v149 + 1;
  *((void *)v150 + 8) = v149;
  if (v151) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v151);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v152 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v152->__shared_owners_ = 0;
  v152->__shared_weak_owners_ = 0;
  v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "EmergencySetupTimeout");
  std::string::basic_string[abi:ne180100]<0>(&v158, "Call-setup time-out");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v152[1], &__p, &v158, 500, 23, 6, 0);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v149);
  ims::lowerCase((uint64_t)&v152[1].__shared_owners_, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  long long v153 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
  v154 = (std::__shared_weak_count *)*((void *)v153 + 8);
  *((void *)v153 + 7) = v152 + 1;
  *((void *)v153 + 8) = v152;
  if (v154) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v154);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&v158, 0, sizeof(v158));
  long long v155 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v155->__shared_owners_ = 0;
  v155->__shared_weak_owners_ = 0;
  v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "TerminateChat");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v155[1], &__p, &v158, 200, 0, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v152);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  ims::lowerCase((uint64_t)&v155[1].__shared_owners_, &__p);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v156 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (void **)&__p.__r_.__value_.__l.__data_, &v158);
  atomic_fetch_add_explicit(&v155->__shared_owners_, 1uLL, memory_order_relaxed);
  v157 = (std::__shared_weak_count *)*((void *)v156 + 8);
  *((void *)v156 + 7) = v155 + 1;
  *((void *)v156 + 8) = v155;
  if (v157) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v157);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v155);
}

void sub_1C555E174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  uint64_t v23 = *(std::__shared_weak_count **)(v20 + 8);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

void sub_1C555E674()
{
}

uint64_t BambiCallTerminationReasonsBase::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a2 + 104);
  int v6 = (v4 | v5) == 0;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    int v6 = SipParameterMap::operator==((void *)v4, v5);
  }
  unint64_t v8 = *(void *)(a1 + 120);
  unint64_t v9 = *(void *)(a2 + 120);
  int v10 = (v8 | v9) == 0;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (*(void *)(v8 + 16) == *(void *)(v9 + 16))
    {
      long long v14 = *(unsigned __int8 **)v8;
      uint64_t v12 = (unsigned __int8 *)(v8 + 8);
      uint64_t v13 = v14;
      if (v14 == v12)
      {
        int v10 = 1;
      }
      else
      {
        char v15 = *(unsigned __int8 **)v9;
        do
        {
          int v10 = std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>((uint64_t)v44, v13 + 32, v15 + 32);
          if (!v10) {
            break;
          }
          int64_t v16 = (unsigned __int8 *)*((void *)v13 + 1);
          long long v17 = v13;
          if (v16)
          {
            do
            {
              uint64_t v13 = v16;
              int64_t v16 = *(unsigned __int8 **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              uint64_t v13 = (unsigned __int8 *)*((void *)v17 + 2);
              BOOL v7 = *(void *)v13 == (void)v17;
              long long v17 = v13;
            }
            while (!v7);
          }
          int v18 = (unsigned __int8 *)*((void *)v15 + 1);
          if (v18)
          {
            do
            {
              long long v19 = v18;
              int v18 = *(unsigned __int8 **)v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              long long v19 = (unsigned __int8 *)*((void *)v15 + 2);
              BOOL v7 = *(void *)v19 == (void)v15;
              char v15 = v19;
            }
            while (!v7);
          }
          char v15 = v19;
        }
        while (v13 != v12);
      }
    }
    else
    {
      int v10 = 0;
    }
  }
  uint64_t v20 = *(unsigned __int8 *)(a1 + 39);
  if ((v20 & 0x80u) == 0) {
    uint64_t v21 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v21 = *(void *)(a1 + 24);
  }
  uint64_t v22 = *(unsigned __int8 *)(a2 + 39);
  int v23 = (char)v22;
  if ((v22 & 0x80u) != 0) {
    uint64_t v22 = *(void *)(a2 + 24);
  }
  if (v21 != v22) {
    return 0;
  }
  uint64_t v24 = (const void **)(a1 + 16);
  if (v23 >= 0) {
    uint64_t v25 = (unsigned __int8 *)(a2 + 16);
  }
  else {
    uint64_t v25 = *(unsigned __int8 **)(a2 + 16);
  }
  if ((v20 & 0x80) != 0)
  {
    if (memcmp(*v24, v25, *(void *)(a1 + 24))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    while (*(unsigned __int8 *)v24 == *v25)
    {
      uint64_t v24 = (const void **)((char *)v24 + 1);
      ++v25;
      if (!--v20) {
        goto LABEL_43;
      }
    }
    return 0;
  }
LABEL_43:
  uint64_t v26 = *(unsigned __int8 *)(a1 + 63);
  if ((v26 & 0x80u) == 0) {
    uint64_t v27 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    uint64_t v27 = *(void *)(a1 + 48);
  }
  uint64_t v28 = *(unsigned __int8 *)(a2 + 63);
  int v29 = (char)v28;
  if ((v28 & 0x80u) != 0) {
    uint64_t v28 = *(void *)(a2 + 48);
  }
  if (v27 != v28) {
    return 0;
  }
  uint64_t v30 = (const void **)(a1 + 40);
  if (v29 >= 0) {
    uint64_t v31 = (unsigned __int8 *)(a2 + 40);
  }
  else {
    uint64_t v31 = *(unsigned __int8 **)(a2 + 40);
  }
  if ((v26 & 0x80) != 0)
  {
    if (!memcmp(*v30, v31, *(void *)(a1 + 48))) {
      goto LABEL_58;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 63))
  {
    while (*(unsigned __int8 *)v30 == *v31)
    {
      uint64_t v30 = (const void **)((char *)v30 + 1);
      ++v31;
      if (!--v26) {
        goto LABEL_58;
      }
    }
    return 0;
  }
LABEL_58:
  if (*(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
    return 0;
  }
  int v32 = *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72) ? v6 : 0;
  if ((v32 & v10) != 1 || *(void *)(a1 + 160) != *(void *)(a2 + 160)) {
    return 0;
  }
  uint64_t v33 = *(long long **)(a1 + 144);
  uint64_t v34 = (long long *)(a1 + 152);
  if (v33 != v34)
  {
    long long v35 = (void **)(a2 + 152);
    while (1)
    {
      uint64_t v45 = 0;
      memset(v44, 0, sizeof(v44));
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)v44, v33 + 2);
      uint64_t v36 = ims::lowerCase(*(void *)&v44[24] + 8, &__p);
      double v37 = (void **)*v35;
      if (!*v35) {
        goto LABEL_73;
      }
      uint64_t v38 = v35;
      do
      {
        uint64_t v36 = (char *)ReasonCompare::operator()((uint64_t)v36, v37 + 4, (void **)&__p.__r_.__value_.__l.__data_);
        uint64_t v39 = v37 + 1;
        if (!v36)
        {
          uint64_t v39 = v37;
          uint64_t v38 = v37;
        }
        double v37 = (void **)*v39;
      }
      while (*v39);
      if (v38 == v35 || ReasonCompare::operator()((uint64_t)v36, (void **)&__p.__r_.__value_.__l.__data_, v38 + 4)) {
LABEL_73:
      }
        uint64_t v38 = v35;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v35 == v38 || *(void **)&v44[24] != v38[7]) {
        break;
      }
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      if ((v44[23] & 0x80000000) != 0) {
        operator delete(*(void **)v44);
      }
      uint64_t v40 = (long long *)*((void *)v33 + 1);
      if (v40)
      {
        do
        {
          long long v41 = v40;
          uint64_t v40 = *(long long **)v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          long long v41 = (long long *)*((void *)v33 + 2);
          BOOL v7 = *(void *)v41 == (void)v33;
          uint64_t v33 = v41;
        }
        while (!v7);
      }
      uint64_t result = 1;
      uint64_t v33 = v41;
      if (v41 == v34) {
        return result;
      }
    }
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
    if ((v44[23] & 0x80000000) != 0) {
      operator delete(*(void **)v44);
    }
    return 0;
  }
  return 1;
}

void sub_1C555EA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::pair<std::string const,std::shared_ptr<MessageSession>>::~pair((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void BambiCallTerminationReasonsBase::reason(void (***a1)(uint64_t *__return_ptr)@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v10 = 0;
  BOOL v11 = 0;
  BambiCallTerminationReasonsBase::getCombinedReasonMap(a1, &v10);
  uint64_t v6 = v10;
  ims::lowerCase(a2, &__p);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::find<std::string>(v6, (void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 + 8 == v7)
  {
    std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,BambiCallTerminationReason const&,void>((const BambiCallTerminationReason *)(a1 + 1), a3);
  }
  else
  {
    *a3 = *(void *)(v7 + 56);
    uint64_t v8 = *(void *)(v7 + 64);
    a3[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C555EB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallTerminationReasonsBase::setReasonsFromPref(void (***a1)(uint64_t *__return_ptr), uint64_t a2, uint64_t a3)
{
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  unint64_t v96 = 0;
  int v97 = 0;
  uint64_t v98 = 0;
  ImsDictPref::keysAndValues(a2, &v99, &v96);
  uint64_t v4 = v99;
  if (v100 != v99)
  {
    unint64_t v5 = 0;
    uint64_t v73 = a3;
    while (1)
    {
      uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
      if ((v6 & 0x80u) != 0) {
        uint64_t v6 = *(void *)(a3 + 8);
      }
      unint64_t v7 = v4 + 24 * v5;
      if (v6)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a3, (const void **)v7, &v95);
      }
      else if (*(char *)(v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
      }
      else
      {
        long long v8 = *(_OWORD *)v7;
        v95.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v8;
      }
      uint64_t v94 = 0;
      long long v92 = 0u;
      long long v93 = 0u;
      *(_OWORD *)&v90[16] = 0u;
      long long v91 = 0u;
      *(_OWORD *)long long v89 = 0u;
      *(_OWORD *)long long v90 = 0u;
      memset(v88, 0, sizeof(v88));
      HIBYTE(v88[3]) = 13;
      qmemcpy(&v88[1], "InternalError", 13);
      *(void *)&v90[12] = 0xA000001F4;
      std::string __p = 0;
      *(void *)&long long v87 = 0;
      BambiCallTerminationReasonsBase::getCombinedReasonMap(a1, &__p);
      unint64_t v9 = __p;
      ims::lowerCase((uint64_t)&v95, &v102);
      uint64_t v10 = (void *)std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::find<std::string>((uint64_t)v9, (void **)&v102.__r_.__value_.__l.__data_);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v102.__r_.__value_.__l.__data_);
      }
      if ((char *)__p + 8 == (char *)v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
      }
      else
      {
        uint64_t v11 = v10[7];
        uint64_t v12 = (std::__shared_weak_count *)v10[8];
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      if ((void)v87) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v87);
      }
      if (v11)
      {
        LODWORD(v88[0]) = *(_DWORD *)v11;
        std::string::operator=((std::string *)&v88[1], (const std::string *)(v11 + 8));
        std::string::operator=((std::string *)v89, (const std::string *)(v11 + 32));
        uint64_t v13 = *(void *)(v11 + 56);
        *(_DWORD *)&v90[16] = *(_DWORD *)(v11 + 64);
        *(void *)&v90[8] = v13;
        std::string::operator=((std::string *)&v90[24], (const std::string *)(v11 + 72));
        uint64_t v15 = *(void *)(v11 + 96);
        uint64_t v14 = *(void *)(v11 + 104);
        if (v14) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
        }
        int64_t v16 = (std::__shared_weak_count *)*((void *)&v92 + 1);
        *(void *)&long long v92 = v15;
        *((void *)&v92 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v14;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        uint64_t v18 = *(void *)(v11 + 112);
        uint64_t v17 = *(void *)(v11 + 120);
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
        long long v19 = (std::__shared_weak_count *)*((void *)&v93 + 1);
        *(void *)&long long v93 = v18;
        *((void *)&v93 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v17;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        int v20 = *(_DWORD *)(v11 + 128);
        *(_DWORD *)((char *)&v94 + IMSCallOptions::~IMSCallOptions(this + 3) = *(_DWORD *)(v11 + 131);
        LODWORD(v94) = v20;
        std::string::basic_string[abi:ne180100]<0>(&v102, "bambi.call");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        uint64_t v21 = ims::debug((uint64_t)&v102, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"overriding based on existing termination reason ", 48);
        *(unsigned char *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(void *)v21 + 32))(v21, &v88[1]);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v21 + 17) = 0;
        if (SHIBYTE(v87) < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v102.__r_.__value_.__l.__data_);
          if (!v12) {
            goto LABEL_32;
          }
        }
        else if (!v12)
        {
          goto LABEL_32;
        }
        goto LABEL_31;
      }
      if (((unsigned int (*)(void))(*a1)[3])(a1))
      {
        std::string::basic_string[abi:ne180100]<0>(&v102, "bambi.call");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        uint64_t v30 = ims::debug((uint64_t)&v102, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"adding custom termination reason ", 33);
        *(unsigned char *)(v30 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(void *)v30 + 32))(v30, &v95);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v30 + 17) = 0;
        if (SHIBYTE(v87) < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v102.__r_.__value_.__l.__data_);
        }
        std::string::operator=((std::string *)&v88[1], &v95);
        BYTE4(v94) = 1;
        if (!v12)
        {
LABEL_32:
          uint64_t v22 = *(uint64_t **)&v96[8 * v5];
          memset(&v102, 0, sizeof(v102));
          long long v87 = 0uLL;
          std::string __p = &v87;
          std::string v84 = 0;
          uint64_t v85 = 0;
          long long v83 = (uint64_t *)&v84;
          memset(&__str, 0, sizeof(__str));
          if (!v22) {
            __cxa_bad_typeid();
          }
          uint64_t v24 = *v22;
          if (v23)
          {
            int v25 = (*(uint64_t (**)(uint64_t *))(v24 + 56))(v22);
            goto LABEL_39;
          }
          {
            (*(void (**)(std::string *__return_ptr, uint64_t *))(*v22 + 48))(&v81, v22);
            if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v102.__r_.__value_.__l.__data_);
            }
            int v25 = 0;
            std::string v102 = v81;
LABEL_39:
            int v26 = 0;
            BYTE5(v94) = 0;
LABEL_40:
            std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = __str.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              std::string::basic_string[abi:ne180100]<0>(&v81, "bambi.call");
              std::string::basic_string[abi:ne180100]<0>(v79, "");
              uint64_t v28 = ims::debug((uint64_t)&v81, (uint64_t)v79);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"Setting reason protocol for ", 28);
              *(unsigned char *)(v28 + 17) = 0;
              (*(void (**)(uint64_t, std::string *))(*(void *)v28 + 32))(v28, &v95);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)" to ", 4);
              *(unsigned char *)(v28 + 17) = 0;
              (*(void (**)(uint64_t, std::string *))(*(void *)v28 + 32))(v28, &__str);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v28 + 17) = 0;
              if (v80 < 0) {
                operator delete(v79[0]);
              }
              if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v81.__r_.__value_.__l.__data_);
              }
              std::string::operator=((std::string *)&v90[24], &__str);
            }
            if (v25)
            {
              if ((v25 - 300) > 0x18F)
              {
                std::string::basic_string[abi:ne180100]<0>(&v81, "bambi.call");
                std::string::basic_string[abi:ne180100]<0>(v79, "");
                uint64_t v29 = ims::error((uint64_t)&v81, (uint64_t)v79);
                std::ostream::operator<<();
                *(unsigned char *)(v29 + 17) = 0;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)" is not a valid SIP status code", 31);
              }
              else
              {
                *(_DWORD *)&v90[12] = v25;
                std::string::basic_string[abi:ne180100]<0>(&v81, "bambi.call");
                std::string::basic_string[abi:ne180100]<0>(v79, "");
                uint64_t v29 = ims::debug((uint64_t)&v81, (uint64_t)v79);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"Setting SIP status code for ", 28);
                *(unsigned char *)(v29 + 17) = 0;
                (*(void (**)(uint64_t, std::string *))(*(void *)v29 + 32))(v29, &v95);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)" to ", 4);
                *(unsigned char *)(v29 + 17) = 0;
                std::ostream::operator<<();
              }
              *(unsigned char *)(v29 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v29 + 17) = 0;
              if (v80 < 0) {
                operator delete(v79[0]);
              }
              if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v81.__r_.__value_.__l.__data_);
              }
            }
            std::string::size_type v31 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
            if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v31 = v102.__r_.__value_.__l.__size_;
            }
            if (!v31) {
              goto LABEL_71;
            }
            std::string::operator=((std::string *)v89, &v102);
            std::string::basic_string[abi:ne180100]<0>(&v81, "bambi.call");
            std::string::basic_string[abi:ne180100]<0>(v79, "");
            uint64_t v32 = ims::debug((uint64_t)&v81, (uint64_t)v79);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"Setting Reason header text for ", 31);
            *(unsigned char *)(v32 + 17) = 0;
            (*(void (**)(uint64_t, std::string *))(*(void *)v32 + 32))(v32, &v95);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)" to ", 4);
            *(unsigned char *)(v32 + 17) = 0;
            (*(void (**)(uint64_t, void **))(*(void *)v32 + 32))(v32, v89);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v32 + 17) = 0;
            if (v80 < 0) {
              operator delete(v79[0]);
            }
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v81.__r_.__value_.__l.__data_);
              if (v26)
              {
LABEL_72:
                *(_DWORD *)&v90[8] = v26;
                std::string::basic_string[abi:ne180100]<0>(&v81, "bambi.call");
                std::string::basic_string[abi:ne180100]<0>(v79, "");
                uint64_t v33 = ims::debug((uint64_t)&v81, (uint64_t)v79);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"Setting Reason header cause for ", 32);
                *(unsigned char *)(v33 + 17) = 0;
                (*(void (**)(uint64_t, std::string *))(*(void *)v33 + 32))(v33, &v95);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)" to ", 4);
                *(unsigned char *)(v33 + 17) = 0;
                std::ostream::operator<<();
                *(unsigned char *)(v33 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v33 + 17) = 0;
                if (v80 < 0) {
                  operator delete(v79[0]);
                }
                if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v81.__r_.__value_.__l.__data_);
                }
              }
            }
            else
            {
LABEL_71:
              if (v26) {
                goto LABEL_72;
              }
            }
            if (*((void *)&v87 + 1))
            {
              std::string::basic_string[abi:ne180100]<0>(&v81, "bambi.call");
              std::string::basic_string[abi:ne180100]<0>(v79, "");
              uint64_t v37 = ims::debug((uint64_t)&v81, (uint64_t)v79);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"Adding extra headers for Reason ", 32);
              *(unsigned char *)(v37 + 17) = 0;
              (*(void (**)(uint64_t, std::string *))(*(void *)v37 + 32))(v37, &v95);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)":", 1);
              *(unsigned char *)(v37 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v37 + 17) = 0;
              if (v80 < 0) {
                operator delete(v79[0]);
              }
              if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v81.__r_.__value_.__l.__data_);
              }
              uint64_t v38 = __p;
              if (__p != &v87)
              {
                do
                {
                  std::string::basic_string[abi:ne180100]<0>(&v81, "bambi.call");
                  std::string::basic_string[abi:ne180100]<0>(v79, "");
                  uint64_t v39 = ims::debug((uint64_t)&v81, (uint64_t)v79);
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 32))(v39, (uint64_t)v38 + 32);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)": ", 2);
                  *(unsigned char *)(v39 + 17) = 0;
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 32))(v39, (uint64_t)v38 + 56);
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(unsigned char *)(v39 + 17) = 0;
                  if (v80 < 0) {
                    operator delete(v79[0]);
                  }
                  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v81.__r_.__value_.__l.__data_);
                  }
                  uint64_t v40 = (long long *)*((void *)v38 + 1);
                  if (v40)
                  {
                    do
                    {
                      long long v41 = v40;
                      uint64_t v40 = *(long long **)v40;
                    }
                    while (v40);
                  }
                  else
                  {
                    do
                    {
                      long long v41 = (long long *)*((void *)v38 + 2);
                      BOOL v42 = *(void *)v41 == (void)v38;
                      uint64_t v38 = v41;
                    }
                    while (!v42);
                  }
                  uint64_t v38 = v41;
                }
                while (v41 != &v87);
              }
              BOOL v43 = operator new(0x30uLL);
              v43[1] = 0;
              v43[2] = 0;
              *BOOL v43 = &unk_1F20DBB48;
              v43[4] = 0;
              v43[3] = v43 + 4;
              uint64_t v44 = (uint64_t **)(v43 + 3);
              v43[5] = 0;
              uint64_t v45 = (std::__shared_weak_count *)*((void *)&v93 + 1);
              *(void *)&long long v93 = v43 + 3;
              *((void *)&v93 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v43;
              if (!v45
                || (std::__shared_weak_count::__release_shared[abi:ne180100](v45),
                    uint64_t v44 = (uint64_t **)v93,
                    (void **)v93 != &__p))
              {
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v44, (long long *)__p, &v87);
              }
            }
            if (v85)
            {
              std::string::basic_string[abi:ne180100]<0>(&v81, "bambi.call");
              std::string::basic_string[abi:ne180100]<0>(v79, "");
              uint64_t v46 = ims::debug((uint64_t)&v81, (uint64_t)v79);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)"Adding extra params for Reason ", 31);
              *(unsigned char *)(v46 + 17) = 0;
              (*(void (**)(uint64_t, std::string *))(*(void *)v46 + 32))(v46, &v95);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)":", 1);
              *(unsigned char *)(v46 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v46 + 17) = 0;
              if (v80 < 0) {
                operator delete(v79[0]);
              }
              if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v81.__r_.__value_.__l.__data_);
              }
              long long v47 = operator new(0x40uLL);
              v47[1] = 0;
              void v47[2] = 0;
              *long long v47 = &unk_1F20DBB98;
              v47[6] = 0;
              v47[5] = 0;
              v47[3] = &unk_1F20B37B0;
              v47[4] = v47 + 5;
              *((_WORD *)v47 + 28) = 256;
              uint64_t v48 = (std::__shared_weak_count *)*((void *)&v92 + 1);
              *(void *)&long long v92 = v47 + 3;
              *((void *)&v92 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v47;
              if (v48) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v48);
              }
              std::vector<std::string>::pointer v49 = v83;
              if (v83 != (uint64_t *)&v84)
              {
                do
                {
                  std::string::basic_string[abi:ne180100]<0>(&v81, "bambi.call");
                  std::string::basic_string[abi:ne180100]<0>(v79, "");
                  uint64_t v50 = ims::debug((uint64_t)&v81, (uint64_t)v79);
                  (*(void (**)(uint64_t, uint64_t *))(*(void *)v50 + 32))(v50, v49 + 4);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)"=", 1);
                  *(unsigned char *)(v50 + 17) = 0;
                  (*(void (**)(uint64_t, uint64_t *))(*(void *)v50 + 32))(v50, v49 + 7);
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(unsigned char *)(v50 + 17) = 0;
                  if (v80 < 0) {
                    operator delete(v79[0]);
                  }
                  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v81.__r_.__value_.__l.__data_);
                  }
                  v81.__r_.__value_.__r.__words[0] = (std::string::size_type)(v49 + 4);
                  std::string v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v92 + 8), (void **)v49 + 4, (uint64_t)&std::piecewise_construct, (long long **)&v81);
                  std::string::operator=((std::string *)(v51 + 7), (const std::string *)(v49 + 7));
                  uint64_t v52 = (uint64_t *)v49[1];
                  if (v52)
                  {
                    do
                    {
                      long long v53 = v52;
                      uint64_t v52 = (uint64_t *)*v52;
                    }
                    while (v52);
                  }
                  else
                  {
                    do
                    {
                      long long v53 = (uint64_t *)v49[2];
                      BOOL v42 = *v53 == (void)v49;
                      std::vector<std::string>::pointer v49 = v53;
                    }
                    while (!v42);
                  }
                  std::vector<std::string>::pointer v49 = v53;
                }
                while (v53 != (uint64_t *)&v84);
              }
            }
            (*a1)[2](&v75);
            if (v76) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v76);
            }
LABEL_124:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v83, v84);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, (void *)v87);
            if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v102.__r_.__value_.__l.__data_);
            }
            goto LABEL_134;
          }
          {
            std::string::basic_string[abi:ne180100]<0>(&v81, "bambi.call");
            std::string::basic_string[abi:ne180100]<0>(v79, "");
            uint64_t v54 = ims::error((uint64_t)&v81, (uint64_t)v79);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)"value for termination reason ", 29);
            *(unsigned char *)(v54 + 17) = 0;
            (*(void (**)(uint64_t, std::string *))(*(void *)v54 + 32))(v54, &v95);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)" has unknown type", 17);
            *(unsigned char *)(v54 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v54 + 17) = 0;
            if (v80 < 0) {
              operator delete(v79[0]);
            }
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v81.__r_.__value_.__l.__data_);
            }
            goto LABEL_124;
          }
          std::string::basic_string[abi:ne180100]<0>(&v81, "StatusCode");
          uint64_t v35 = (*(uint64_t (**)(void *, std::string *))(*(void *)v34 + 88))(v34, &v81);
          if (v35) {
            int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 56))(v35);
          }
          else {
            int v25 = 0;
          }
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v81, "ReasonHeaderText");
          ImsDictPref::stringChildValue((uint64_t)v34, (uint64_t)&v81, (uint64_t)&v102);
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v81, "ReasonHeaderCause");
          uint64_t v55 = (*(uint64_t (**)(void *, std::string *))(*(void *)v34 + 88))(v34, &v81);
          if (v55) {
            int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 56))(v55);
          }
          else {
            int v26 = 0;
          }
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v81, "ReasonHeaderProtocol");
          ImsDictPref::stringChildValue((uint64_t)v34, (uint64_t)&v81, (uint64_t)&__str);
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          std::string::size_type v56 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v56 = __str.__r_.__value_.__l.__size_;
          }
          if (!v56)
          {
            std::string::basic_string[abi:ne180100]<0>(&v81, "Protocol");
            ImsDictPref::stringChildValue((uint64_t)v34, (uint64_t)&v81, (uint64_t)&__str);
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v81.__r_.__value_.__l.__data_);
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&v81, "EnableCSFB");
          uint64_t v57 = (*(uint64_t (**)(void *, std::string *))(*(void *)v34 + 88))(v34, &v81);
          if (v57) {
            int v70 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 40))(v57);
          }
          else {
            int v70 = 0;
          }
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v81, "DisableCSFB");
          uint64_t v58 = (*(uint64_t (**)(void *, std::string *))(*(void *)v34 + 88))(v34, &v81);
          if (v58) {
            int v72 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 40))(v58);
          }
          else {
            int v72 = 0;
          }
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v81, "DropsRegistration");
          uint64_t v59 = (*(uint64_t (**)(void *, std::string *))(*(void *)v34 + 88))(v34, &v81);
          if (v59) {
            char v71 = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 40))(v59);
          }
          else {
            char v71 = 0;
          }
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          memset(&v81, 0, sizeof(v81));
          std::string::basic_string[abi:ne180100]<0>(v79, "TerminationEvent");
          ImsDictPref::stringChildValue((uint64_t)v34, (uint64_t)v79, (uint64_t)&v81);
          if (v80 < 0) {
            operator delete(v79[0]);
          }
          std::string::size_type v60 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v60 = v81.__r_.__value_.__l.__size_;
          }
          if (v60)
          {
            int v61 = BambiCallSessionTerminationBaseEvent::reasonForName((uint64_t)&v81);
            if (v61 == 38)
            {
              std::string::basic_string[abi:ne180100]<0>(v79, "bambi.call");
              std::string::basic_string[abi:ne180100]<0>(v77, "");
              uint64_t v62 = ims::error((uint64_t)v79, (uint64_t)v77);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v62 + 8), (uint64_t)"unknown termination event ", 26);
              *(unsigned char *)(v62 + 17) = 0;
              (*(void (**)(uint64_t, std::string *))(*(void *)v62 + 32))(v62, &v81);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v62 + 17) = 0;
              if (v78 < 0) {
                operator delete(v77[0]);
              }
              if (v80 < 0) {
                operator delete(v79[0]);
              }
              goto LABEL_190;
            }
          }
          else
          {
LABEL_190:
            int v61 = 38;
          }
          std::string::basic_string[abi:ne180100]<0>(v79, "ExtraHeaders");
          uint64_t v63 = ImsDictPref::typedChildWithName<ImsDictPref>((uint64_t)v34);
          uint64_t v64 = (uint64_t)v63;
          if (v80 < 0)
          {
            operator delete(v79[0]);
            if (!v64) {
              goto LABEL_196;
            }
          }
          else if (!v63)
          {
LABEL_196:
            std::string::basic_string[abi:ne180100]<0>(v79, "ExtraParams");
            uint64_t v65 = ImsDictPref::typedChildWithName<ImsDictPref>((uint64_t)v34);
            uint64_t v66 = (uint64_t)v65;
            if (v80 < 0)
            {
              operator delete(v79[0]);
              if (!v66) {
                goto LABEL_201;
              }
            }
            else if (!v65)
            {
LABEL_201:
              if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v81.__r_.__value_.__l.__data_);
              }
              if (v72)
              {
                int v67 = 2;
                goto LABEL_207;
              }
              if (v70)
              {
                int v67 = 1;
LABEL_207:
                LODWORD(v88[0]) = v67;
              }
              BYTE5(v94) = v71;
              if (v61 != 38)
              {
                std::string::basic_string[abi:ne180100]<0>(&v81, "bambi.call");
                std::string::basic_string[abi:ne180100]<0>(v79, "");
                uint64_t v68 = ims::debug((uint64_t)&v81, (uint64_t)v79);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v68 + 8), (uint64_t)"Setting termination event for ", 30);
                *(unsigned char *)(v68 + 17) = 0;
                (*(void (**)(uint64_t, std::string *))(*(void *)v68 + 32))(v68, &v95);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v68 + 8), (uint64_t)" to ", 4);
                *(unsigned char *)(v68 + 17) = 0;
                if (v61 <= 37) {
                  unsigned int v69 = v61;
                }
                else {
                  unsigned int v69 = 10;
                }
                (*(void (**)(uint64_t, uint64_t))(*(void *)v68 + 32))(v68, reasonStrings + 24 * v69);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v68 + 17) = 0;
                if (v80 < 0) {
                  operator delete(v79[0]);
                }
                if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v81.__r_.__value_.__l.__data_);
                }
                *(_DWORD *)&v90[16] = v61;
              }
              goto LABEL_40;
            }
            ImsDictPref::stringMapValue(v66, &v83);
            goto LABEL_201;
          }
          ImsDictPref::stringMapValue(v64, (uint64_t **)&__p);
          goto LABEL_196;
        }
LABEL_31:
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        goto LABEL_32;
      }
      std::string::basic_string[abi:ne180100]<0>(&v102, "bambi.call");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v36 = ims::error((uint64_t)&v102, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"unknown termination reason in prefs: ", 37);
      *(unsigned char *)(v36 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v36 + 32))(v36, &v95);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v36 + 17) = 0;
      if (SHIBYTE(v87) < 0) {
        operator delete(__p);
      }
      if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        break;
      }
      operator delete(v102.__r_.__value_.__l.__data_);
      if (v12) {
        goto LABEL_133;
      }
LABEL_134:
      if (*((void *)&v93 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v93 + 1));
      }
      a3 = v73;
      if (*((void *)&v92 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v92 + 1));
      }
      if (SHIBYTE(v91) < 0) {
        operator delete(*(void **)&v90[24]);
      }
      if ((v90[7] & 0x80000000) != 0) {
        operator delete(v89[0]);
      }
      if (SHIBYTE(v88[3]) < 0) {
        operator delete(v88[1]);
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      ++v5;
      uint64_t v4 = v99;
      if (v5 >= 0xAAAAAAAAAAAAAAABLL * ((v100 - v99) >> 3)) {
        goto LABEL_217;
      }
    }
    if (!v12) {
      goto LABEL_134;
    }
LABEL_133:
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    goto LABEL_134;
  }
LABEL_217:
  if (v96)
  {
    int v97 = v96;
    operator delete(v96);
  }
  v88[0] = &v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
}

void sub_1C55604A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,void *a46,uint64_t a47,void *a48,void *a49,int a50,__int16 a51,char a52,char a53,uint64_t a54)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a45, a46);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a48, a49);
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  BambiCallTerminationReason::~BambiCallTerminationReason((BambiCallTerminationReason *)&a54);
  if (*(char *)(v54 - 185) < 0) {
    operator delete(*(void **)(v54 - 208));
  }
  std::string::size_type v56 = *(void **)(v54 - 176);
  if (v56)
  {
    *(void *)(v54 - 168) = v56;
    operator delete(v56);
  }
  a54 = v54 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  _Unwind_Resume(a1);
}

BOOL ReasonCompare::operator()(uint64_t a1, void **a2, void **a3)
{
  std::string::basic_string[abi:ne180100]<0>(v16, "Override_");
  ims::lowerCase((uint64_t)v16, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v7 = (void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v7 >= 0) {
    long long v8 = a2;
  }
  else {
    long long v8 = *a2;
  }
  if ((char)v7 < 0) {
    unint64_t v7 = a2[1];
  }
  long long v19 = v8;
  int v20 = v7;
  BOOL v9 = std::string_view::starts_with[abi:ne180100](&v19, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "Override_");
  ims::lowerCase((uint64_t)v16, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v11 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = (void *)*((unsigned __int8 *)a3 + 23);
  if ((char)v12 >= 0) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = *a3;
  }
  if ((char)v12 < 0) {
    uint64_t v12 = a3[1];
  }
  long long v19 = v13;
  int v20 = v12;
  BOOL v14 = std::string_view::starts_with[abi:ne180100](&v19, v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v9 && !v14) {
    return 0;
  }
  if (v9 || !v14) {
    return (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a3) & 0x80u) != 0;
  }
  return 1;
}

void sub_1C5560874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCallIncomingTerminationReasons::canAddCustomReasons(BambiCallIncomingTerminationReasons *this)
{
  return 1;
}

uint64_t BambiCallTerminationReasonsBase::canAddCustomReasons(BambiCallTerminationReasonsBase *this)
{
  return 0;
}

void BambiCallTerminationReasons::~BambiCallTerminationReasons(BambiCallTerminationReasons *this)
{
  BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase(this);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<BambiCallTerminationReason>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiCallTerminationReason>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBAF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<BambiCallTerminationReason>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    operator delete(v4);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, _OWORD **a3)
{
  uint64_t v12 = 0;
  unint64_t v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    uint64_t v11[2] = 1;
    uint64_t v6 = operator new(0x48uLL);
    v11[1] = a1 + 1;
    long long v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + ims::StackConfig::~StackConfig(this + 6) = v9;
    v8[1] = 0;
    int8x8_t v8[2] = 0;
    *long long v8 = 0;
    *((void *)v6 + 7) = 0;
    *((void *)v6 + 8) = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void *std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__find_equal<std::string>(uint64_t a1, void *a2, void **a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = (void *)v4;
        long long v8 = (void **)(v4 + 32);
        a1 = ReasonCompare::operator()(a1, a3, (void **)(v4 + 32));
        if (!a1) {
          break;
        }
        uint64_t v4 = *v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      a1 = ReasonCompare::operator()(a1, v8, a3);
      if (!a1) {
        break;
      }
      unint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const(&)[18],char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(void *a1, char *a2, int *a3, int *a4)
{
  long long v8 = operator new(0xA0uLL);
  v8[1] = 0;
  int8x8_t v8[2] = 0;
  *long long v8 = &unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v10, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v8 + 3), &v10, &__p, *a3, *a4, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  *a1 = v8 + 3;
  a1[1] = v8;
}

void sub_1C5560CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    unint64_t v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = (uint64_t *)(v7 + 5);
    v7[6] = (uint64_t *)(v7 + 5);
    v7[7] = 0;
    *unint64_t v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    std::string v10 = (uint64_t *)**a1;
    size_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      size_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[15],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(void *a1, char *a2, int *a3)
{
  uint64_t v6 = operator new(0xA0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v8, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "User Triggered");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v6 + 3), &v8, &__p, 486, *a3, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_1C5560EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[22],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(void *a1, char *a2, char *a3, int *a4)
{
  std::string v8 = operator new(0xA0uLL);
  v8[1] = 0;
  int8x8_t v8[2] = 0;
  *std::string v8 = &unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v10, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v8 + 3), &v10, &__p, 486, *a4, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  *a1 = v8 + 3;
  a1[1] = v8;
}

void sub_1C5560FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[25],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(void *a1, char *a2, char *a3, int *a4, int *a5)
{
  std::string v10 = operator new(0xA0uLL);
  v10[1] = 0;
  uint64_t v10[2] = 0;
  void *v10 = &unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v10 + 3), &v12, &__p, *a4, *a5, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1C5561110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[32],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(void *a1, char *a2, char *a3, int *a4, int *a5)
{
  std::string v10 = operator new(0xA0uLL);
  v10[1] = 0;
  uint64_t v10[2] = 0;
  void *v10 = &unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v10 + 3), &v12, &__p, *a4, *a5, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1C556122C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[26],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(void *a1, char *a2, char *a3, int *a4, int *a5)
{
  std::string v10 = operator new(0xA0uLL);
  v10[1] = 0;
  uint64_t v10[2] = 0;
  void *v10 = &unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v10 + 3), &v12, &__p, *a4, *a5, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1C5561348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[20],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(void *a1, char *a2, char *a3, int *a4, int *a5)
{
  std::string v10 = operator new(0xA0uLL);
  v10[1] = 0;
  uint64_t v10[2] = 0;
  void *v10 = &unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v10 + 3), &v12, &__p, *a4, *a5, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1C5561464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[16],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(void *a1, char *a2, char *a3, int *a4)
{
  std::string v8 = operator new(0xA0uLL);
  v8[1] = 0;
  int8x8_t v8[2] = 0;
  *std::string v8 = &unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v10, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v8 + 3), &v10, &__p, 500, *a4, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  *a1 = v8 + 3;
  a1[1] = v8;
}

void sub_1C556157C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(void *a1, char *a2, int *a3)
{
  uint64_t v6 = operator new(0xA0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v8, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v6 + 3), &v8, &__p, 500, *a3, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_1C556168C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[12],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(void *a1, char *a2, char *a3, int *a4, int *a5)
{
  std::string v10 = operator new(0xA0uLL);
  v10[1] = 0;
  uint64_t v10[2] = 0;
  void *v10 = &unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v10 + 3), &v12, &__p, *a4, *a5, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1C55617A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[13],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(void *a1, char *a2, char *a3, int *a4)
{
  std::string v8 = operator new(0xA0uLL);
  v8[1] = 0;
  int8x8_t v8[2] = 0;
  *std::string v8 = &unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v10, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v8 + 3), &v10, &__p, 500, *a4, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  *a1 = v8 + 3;
  a1[1] = v8;
}

void sub_1C55618C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[18],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(void *a1, char *a2, char *a3, int *a4, int *a5)
{
  std::string v10 = operator new(0xA0uLL);
  v10[1] = 0;
  uint64_t v10[2] = 0;
  void *v10 = &unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v10 + 3), &v12, &__p, *a4, *a5, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1C55619DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[23],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(void *a1, char *a2, char *a3, int *a4)
{
  std::string v8 = operator new(0xA0uLL);
  v8[1] = 0;
  int8x8_t v8[2] = 0;
  *std::string v8 = &unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v10, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v8 + 3), &v10, &__p, 500, *a4, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  *a1 = v8 + 3;
  a1[1] = v8;
}

void sub_1C5561AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[14],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(void *a1, char *a2, int *a3)
{
  uint64_t v6 = operator new(0xA0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1F20DBAF8;
  std::string::basic_string[abi:ne180100]<0>(&v8, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Deregistering");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v6 + 3), &v8, &__p, 486, *a3, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_1C5561C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1C5561C8C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    BOOL v5 = (BOOL)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      unint64_t v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          std::string v8 = v7;
          unint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          std::string v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>> const&>(BOOL a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v6 = (uint64_t *)a2;
  unint64_t v7 = (uint64_t **)a1;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  std::string v8 = (uint64_t *)(a1 + 8);
  if (a1 + 8 == a2 || (a1 = ReasonCompare::operator()(a1, a3, (void **)(a2 + 32))))
  {
    if (*v7 == v6)
    {
      uint64_t v10 = (uint64_t)v6;
LABEL_16:
      if (*v6)
      {
        uint64_t v22 = v10;
        uint64_t v13 = (uint64_t **)(v10 + 8);
      }
      else
      {
        uint64_t v22 = (uint64_t)v6;
        uint64_t v13 = (uint64_t **)v6;
      }
      goto LABEL_30;
    }
    uint64_t v9 = *v6;
    if (*v6)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = *(void *)(v9 + 8);
      }
      while (v9);
    }
    else
    {
      uint64_t v16 = (uint64_t)v6;
      do
      {
        uint64_t v10 = *(void *)(v16 + 16);
        BOOL v17 = *(void *)v10 == v16;
        uint64_t v16 = v10;
      }
      while (v17);
    }
    if (ReasonCompare::operator()(a1, (void **)(v10 + 32), a3)) {
      goto LABEL_16;
    }
LABEL_29:
    uint64_t v13 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__find_equal<std::string>((uint64_t)v7, &v22, a3);
    goto LABEL_30;
  }
  BOOL v11 = ReasonCompare::operator()(a1, (void **)v6 + 4, a3);
  if (v11)
  {
    uint64_t v13 = (uint64_t **)(v6 + 1);
    std::string v12 = (uint64_t *)v6[1];
    if (v12)
    {
      BOOL v14 = (void *)v6[1];
      do
      {
        uint64_t v15 = (uint64_t)v14;
        BOOL v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = (uint64_t)v6;
      do
      {
        uint64_t v15 = *(void *)(v18 + 16);
        BOOL v17 = *(void *)v15 == v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if ((uint64_t *)v15 != v8)
    {
      if (!ReasonCompare::operator()(v11, a3, (void **)(v15 + 32))) {
        goto LABEL_29;
      }
      std::string v12 = *v13;
    }
    if (v12)
    {
      uint64_t v22 = v15;
      uint64_t v13 = (uint64_t **)v15;
    }
    else
    {
      uint64_t v22 = (uint64_t)v6;
    }
LABEL_30:
    uint64_t v6 = *v13;
    if (*v13) {
      return v6;
    }
    goto LABEL_20;
  }
  uint64_t v21 = v6;
  uint64_t v22 = (uint64_t)v6;
  uint64_t v13 = &v21;
  if (!v6)
  {
LABEL_20:
    void v20[2] = (uint64_t *)1;
    v20[0] = (uint64_t *)operator new(0x48uLL);
    v20[1] = v8;
    std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)(v20[0] + 4), a4);
    std::__tree<unsigned int>::__insert_node_at(v7, v22, v13, v20[0]);
    uint64_t v6 = v20[0];
    v20[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)v20);
  }
  return v6;
}

void sub_1C5561F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__node_handle_merge_unique[abi:ne180100]<std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>>(uint64_t **result, uint64_t **a2)
{
  int v3 = a2 + 1;
  uint64_t v2 = *a2;
  if (*a2 != (uint64_t *)(a2 + 1))
  {
    BOOL v5 = result;
    do
    {
      uint64_t v11 = 0;
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__find_equal<std::string>((uint64_t)v5, &v11, (void **)v2 + 4);
      uint64_t v6 = result;
      unint64_t v7 = (uint64_t *)v2[1];
      std::string v8 = v2;
      if (v7)
      {
        do
        {
          uint64_t v9 = v7;
          unint64_t v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v8[2];
          BOOL v10 = *v9 == (void)v8;
          std::string v8 = v9;
        }
        while (!v10);
      }
      if (!*result)
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a2, v2);
        uint64_t result = (uint64_t **)std::__tree<unsigned int>::__insert_node_at(v5, v11, v6, v2);
      }
      uint64_t v2 = v9;
    }
    while (v9 != (uint64_t *)v3);
  }
  return result;
}

void *std::allocate_shared[abi:ne180100]<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>,std::allocator<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>,std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  uint64_t result = std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::__shared_ptr_emplace[abi:ne180100]<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>&,std::allocator<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1C556203C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::__shared_ptr_emplace[abi:ne180100]<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>&,std::allocator<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20DBAA8;
  std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>::map[abi:ne180100](a1 + 3, a2);
  return a1;
}

void sub_1C5562098(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,BambiCallTerminationReason const&,void>@<X0>(const BambiCallTerminationReason *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xA0uLL);
  uint64_t result = std::__shared_ptr_emplace<BambiCallTerminationReason>::__shared_ptr_emplace[abi:ne180100]<BambiCallTerminationReason const&,std::allocator<BambiCallTerminationReason>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1C55620F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<BambiCallTerminationReason>::__shared_ptr_emplace[abi:ne180100]<BambiCallTerminationReason const&,std::allocator<BambiCallTerminationReason>,0>(void *a1, const BambiCallTerminationReason *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20DBAF8;
  BambiCallTerminationReason::BambiCallTerminationReason((BambiCallTerminationReason *)(a1 + 3), a2);
  return a1;
}

void sub_1C5562150(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::find<std::string>(uint64_t a1, void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    a1 = ReasonCompare::operator()(a1, (void **)(v3 + 32), a2);
    uint64_t v6 = (uint64_t *)(v3 + 8);
    if (!a1)
    {
      uint64_t v6 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v6;
  }
  while (*v6);
  if (v5 == v2 || ReasonCompare::operator()(a1, a2, (void **)(v5 + 32))) {
    return v2;
  }
  return v5;
}

void std::__shared_ptr_emplace<std::map<std::string,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBB48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<std::string,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBB48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<std::map<std::string,std::string>>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<SipParameterMap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBB98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipParameterMap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DBB98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipParameterMap>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void SipViaHop::SipViaHop(SipViaHop *this, const SipViaHop *a2)
{
  SipHop::SipHop(this, a2);
  *(void *)uint64_t v4 = &unk_1F20DBCA8;
  *(_OWORD *)(v4 + 104) = 0u;
  uint64_t v5 = (std::string *)(v4 + 104);
  *(_OWORD *)(v4 + 12(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *(void *)(v4 + 13ims::StackConfig::~StackConfig(this + 6) = 0;
  uint64_t v6 = *((void *)a2 + 16);
  if (v6)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v6 + 32))(&v9);
    unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 17);
    long long v8 = v9;
    long long v9 = 0uLL;
    *((_OWORD *)this + 8) = v8;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      if (*((void *)&v9 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
      }
    }
  }
  else
  {
    *((void *)this + 1ims::StackConfig::~StackConfig(this + 6) = 0;
    *((void *)this + 17) = 0;
  }
  std::string::operator=(v5, (const std::string *)((char *)a2 + 104));
}

void sub_1C55623DC(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 136);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*v2);
  }
  SipHop::~SipHop((SipHop *)v1);
  _Unwind_Resume(a1);
}

void SipViaHop::~SipViaHop(SipViaHop *this)
{
  *(void *)this = &unk_1F20DBCA8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  SipHop::~SipHop(this);
}

{
  uint64_t vars8;

  SipViaHop::~SipViaHop(this);
  JUMPOUT(0x1C878E320);
}

long long *SipViaHop::branch(SipViaHop *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "branch");
  uint64_t v2 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 72, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if ((void **)((char *)this + 80) == v2) {
    return &ims::kEmptyString;
  }
  else {
    return (long long *)(v2 + 7);
  }
}

void sub_1C5562528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipViaHop::setBranch(uint64_t a1, const std::string *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "branch");
  unint64_t v7 = __p;
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 72), __p, (uint64_t)&std::piecewise_construct, (long long **)&v7);
  std::string::operator=((std::string *)(v4 + 7), a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C55625C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipViaHop::supportsRport(SipViaHop *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "rport");
  uint64_t v2 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 72, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return (void **)((char *)this + 80) != v2;
}

void sub_1C5562648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipViaHop::rport(SipViaHop *this)
{
  uint64_t v1 = (char *)this + 64;
  std::string::basic_string[abi:ne180100]<0>(__p, "rport");
  unsigned __int16 v2 = SipParameterMap::uintParameter((uint64_t)v1, __p, 0);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C55626C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipViaHop::setSupportsRport(uint64_t **this, int a2)
{
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "rport");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_15);
    unint64_t v7 = v5;
    uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 9, v5, (uint64_t)&std::piecewise_construct, (long long **)&v7);
    std::string::operator=((std::string *)(v3 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "rport");
    SipParameterMap::clearParameter((uint64_t)(this + 8), v5);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_1C55627A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipViaHop::setRport(SipViaHop *this, uint64_t a2)
{
  uint64_t v4 = (char *)this + 64;
  std::string::basic_string[abi:ne180100]<0>(__p, "rport");
  SipParameterMap::setParameter((uint64_t)v4, (long long *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = *((void *)this + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 64))(result, a2);
  }
  return result;
}

void sub_1C5562870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipViaHop::setReceived()
{
  memset(&__str, 0, sizeof(__str));
  IpAddress::asString();
}

void sub_1C55629C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t SipViaHop::keep(SipViaHop *this)
{
  uint64_t v1 = (char *)this + 64;
  std::string::basic_string[abi:ne180100]<0>(__p, "keep");
  unint64_t v2 = SipParameterMap::uintParameter((uint64_t)v1, __p, 0);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C5562A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipViaHop::setSupportsKeep(uint64_t **this, int a2)
{
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "keep");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_15);
    char v7 = v5;
    uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 9, v5, (uint64_t)&std::piecewise_construct, (long long **)&v7);
    std::string::operator=((std::string *)(v3 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "keep");
    SipParameterMap::clearParameter((uint64_t)(this + 8), v5);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_1C5562B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *SipViaHop::toStream(SipViaHop *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"SIP", 3);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v4 = (void *)*((void *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 47;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"2.0", 3);
  *((unsigned char *)a2 + 17) = 0;
  char v5 = (void *)*((void *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 47;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 104));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  char v6 = (void *)*((void *)a2 + 1);
  char v9 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(char *, ImsOutStream *))(*((void *)this + 1) + 8))((char *)this + 8, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  SipParameterMap::toStream((SipViaHop *)((char *)this + 64), a2, 0, 0, 0, 0);
  return a2;
}

void sub_1C5562CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipViaHeader::~SipViaHeader(SipViaHeader *this)
{
  *(void *)this = &unk_1F20DBCF8;
  unint64_t v2 = (void *)*((void *)this + 8);
  uint64_t v3 = (void *)*((void *)this + 9);
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
      }
      ++v2;
    }
    while (v2 != v3);
    unint64_t v2 = (void *)*((void *)this + 8);
  }
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  SipViaHeader::~SipViaHeader(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipViaHeader::encodeValue(SipViaHeader *this, ImsOutStream *a2)
{
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)this + 9) != v2)
  {
    unint64_t v5 = 0;
    do
    {
      if (v5)
      {
        char v6 = (void *)*((void *)a2 + 1);
        char v8 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v8, 1);
        *((unsigned char *)a2 + 17) = 0;
        uint64_t v2 = *((void *)this + 8);
      }
      (*(void (**)(void, ImsOutStream *))(**(void **)(v2 + 8 * v5) + 40))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *((void *)this + 8);
    }
    while (v5 < (*((void *)this + 9) - v2) >> 3);
  }
  return 1;
}

uint64_t SipViaHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  memset(&v3, 0, sizeof(v3));
  if (ims::nextToken(a2, 0, &v3, 0x2Cu) != -1) {
    operator new();
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C55637F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipViaHeader::mergeHeader(SipViaHeader *this, const SipHeader *lpsrc)
{
  if (v2 && v2[9] != v2[8]) {
    operator new();
  }
  return v2 != 0;
}

void sub_1C5563A4C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4006157D98);
  _Unwind_Resume(a1);
}

char *std::vector<SipViaHop *>::insert(char **a1, char *a2, char *a3)
{
  std::string v3 = a3;
  char v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = a2 - *a1;
  char v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v9 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v9)
  {
    unint64_t v14 = ((v5 - v6) >> 3) + 1;
    if (v14 >> 61) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v7 >> 3;
    uint64_t v17 = v9 - (void)v6;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    if (v18)
    {
      int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v18);
    }
    else
    {
      int v20 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v21 = &v20[8 * v16];
    uint64_t v22 = &v20[8 * v19];
    if (v16 == v19)
    {
      if (v7 < 1)
      {
        if (v6 == a2) {
          unint64_t v24 = 1;
        }
        else {
          unint64_t v24 = v7 >> 2;
        }
        int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v24);
        uint64_t v21 = &v25[8 * (v24 >> 2)];
        uint64_t v22 = &v25[8 * v26];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        unint64_t v23 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v23 = v16 + 1;
        }
        v21 -= 8 * (v23 >> 1);
      }
    }
    *(void *)uint64_t v21 = *(void *)v3;
    uint64_t v27 = *a1;
    uint64_t v28 = v21;
    if (*a1 != v8)
    {
      uint64_t v29 = v8;
      uint64_t v28 = v21;
      do
      {
        uint64_t v30 = *((void *)v29 - 1);
        v29 -= 8;
        *((void *)v28 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v30;
        v28 -= 8;
      }
      while (v29 != v27);
    }
    std::string::size_type v31 = a1[1];
    int64_t v32 = v31 - v8;
    if (v31 != v8) {
      memmove(v21 + 8, v8, v31 - v8);
    }
    uint64_t v33 = *a1;
    *a1 = v28;
    a1[1] = &v21[v32 + 8];
    a1[2] = v22;
    if (v33) {
      operator delete(v33);
    }
    return v21;
  }
  else if (v8 == v5)
  {
    *(void *)char v8 = *(void *)a3;
    a1[1] = v8 + 8;
  }
  else
  {
    BOOL v10 = v8 + 8;
    uint64_t v11 = v5 - 8;
    std::string v12 = a1[1];
    while (v11 < v5)
    {
      uint64_t v13 = *(void *)v11;
      v11 += 8;
      *(void *)std::string v12 = v13;
      v12 += 8;
    }
    a1[1] = v12;
    if (v5 != v10) {
      memmove(&v5[-8 * ((v5 - v10) >> 3)], v8, v5 - v10);
    }
    if (v8 <= v3) {
      v3 += 8 * (a1[1] > v3);
    }
    *(void *)char v8 = *(void *)v3;
  }
  return v8;
}

void sub_1C5563C74(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void SipViaHop::clone(SipViaHop *this)
{
}

void sub_1C5563CD4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4006157D98);
  _Unwind_Resume(a1);
}

uint64_t SipViaHop::transport(SipViaHop *this)
{
  return (uint64_t)this + 104;
}

void SipViaHop::returnAddress(SipViaHop *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 16);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 17);
    *a2 = v2;
    a2[1] = v3;
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    SipHost::ipAddress((SipViaHop *)((char *)this + 8), a2);
  }
}

void SipViaHeader::clone(SipViaHeader *this)
{
}

void sub_1C5563EA0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40888A45CFLL);
  _Unwind_Resume(a1);
}

uint64_t SipViaHeader::allowsDuplicates(SipViaHeader *this)
{
  return 1;
}

uint64_t SipViaHeader::allowsMerging(SipViaHeader *this)
{
  return 1;
}

void BambiAccessBarring::BambiAccessBarring(BambiAccessBarring *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_1F20DBDA8;
  *((_WORD *)this + 52) = 100;
  *((_DWORD *)this + 27) = 0;
  *((unsigned char *)this + 112) = 0;
  *((_DWORD *)this + 29) = 0;
  *((unsigned char *)this + 12(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *((unsigned char *)this + 188) = 0;
  *((void *)this + 2ims::StackConfig::~StackConfig(this + 6) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0u;
  *((void *)this + 22) = 0;
  *((void *)this + 24) = (char *)this + 200;
}

void sub_1C5563FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiAccessBarring::~BambiAccessBarring(BambiAccessBarring *this)
{
  *(void *)this = &unk_1F20DBDA8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3) {
      uint64_t v4 = *((void *)this + 18);
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v5)
  {
    char v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *((void *)this + 21);
      if (v8 && v4)
      {
        if (*(char *)(v8 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 4160), *(void *)(v8 + 4168));
        }
        else {
          std::string __p = *(std::string *)(v8 + 4160);
        }
        (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v4 + 40))(v4, &__p, 4);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((void **)this + 25));
  unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  BOOL v10 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  BambiAccessBarring::~BambiAccessBarring(this);
  JUMPOUT(0x1C878E320);
}

void BambiAccessBarring::setDelegate(BambiAccessBarring *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 19);
  *((void *)this + 18) = v4;
  *((void *)this + 19) = v3;
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  BambiAccessBarring::registerForUac(this);
}

uint64_t BambiAccessBarring::alwaysListen(BambiAccessBarring *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 22);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  unint64_t v5 = (SipStack *)*((void *)this + 21);
  if (v5)
  {
    char v6 = (ImsPrefs *)SipStack::prefs(v5);
    RegisterSmsWhenAccessBarringZeroKey = (void **)ImsPrefs::getRegisterSmsWhenAccessBarringZeroKey(v6);
    uint64_t v8 = ImsPrefs::BOOLValue(v6, RegisterSmsWhenAccessBarringZeroKey);
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v8;
}

void sub_1C5564278(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiAccessBarring::updateRegistrationForBarring(BambiAccessBarring *this)
{
  if (!*((void *)this + 20))
  {
    uint64_t v10 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 56))(this);
    (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Cannot update registration due to barring indication: no BambiClient", 68);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    return;
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 21);
      if (!v5)
      {
LABEL_57:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
      if (!*((_WORD *)this + 52) && (*((unsigned char *)this + 116) & 1) != 0)
      {
        uint64_t v49 = 0;
        long long v47 = 0u;
        long long v48 = 0u;
        *(_OWORD *)uint64_t v45 = 0u;
        *(_OWORD *)uint64_t v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        *(_OWORD *)BOOL v42 = 0u;
        long long v39 = 0u;
        *(_OWORD *)uint64_t v40 = 0u;
        *(_OWORD *)uint64_t v37 = 0u;
        long long v38 = 0u;
        *(_OWORD *)uint64_t v36 = 0u;
        uint64_t v18 = *(void *)(v5 + 144);
        uint64_t v20 = *(void *)(v18 + 248);
        uint64_t v19 = *(std::__shared_weak_count **)(v18 + 256);
        if (v19)
        {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          int v21 = *(_DWORD *)(v20 + 1104);
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        else
        {
          int v21 = *(_DWORD *)(v20 + 1104);
        }
        if ((v21 & 4) == 0 || (*((unsigned char *)this + 116) & 4) != 0)
        {
          uint64_t v30 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
          (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v30);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"barring IMS services for both voice and sms", 43);
          *(unsigned char *)(v30 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v30 + 17) = 0;
        }
        else if (BambiAccessBarring::alwaysListen(this))
        {
          uint64_t v27 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
          (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v27);
          uint64_t v28 = (unsigned char *)ImsOutStream::operator<<(v27, "registering for SMS only due to access barring change");
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v28[17] = 0;
          uint64_t v29 = (void *)*((void *)this + 20);
          if (*(char *)(v5 + 4183) < 0) {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
          }
          else {
            std::string __p = *(std::string *)(v5 + 4160);
          }
          std::string::basic_string[abi:ne180100]<0>(v33, "");
          std::string::basic_string[abi:ne180100]<0>(v31, "");
          BambiClient::updateRegisteredServices(v29, (unsigned __int8 *)&__p, 4, (uint64_t)v36, (uint64_t)v33, (uint64_t)v31, 0);
LABEL_32:
          if (v32 < 0) {
            operator delete(v31[0]);
          }
          if (v34 < 0) {
            operator delete(v33[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
        uint64_t v49 = 0;
        long long v47 = 0u;
        long long v48 = 0u;
        *(_OWORD *)uint64_t v45 = 0u;
        *(_OWORD *)uint64_t v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        *(_OWORD *)BOOL v42 = 0u;
        long long v39 = 0u;
        *(_OWORD *)uint64_t v40 = 0u;
        *(_OWORD *)uint64_t v37 = 0u;
        long long v38 = 0u;
        *(_OWORD *)uint64_t v36 = 0u;
        uint64_t v6 = *(void *)(v5 + 144);
        uint64_t v8 = *(void *)(v6 + 248);
        uint64_t v7 = *(std::__shared_weak_count **)(v6 + 256);
        if (v7)
        {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          int v9 = *(_DWORD *)(v8 + 1136);
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        else
        {
          int v9 = *(_DWORD *)(v8 + 1136);
        }
        if (SipStack::registeredForSms((SipStack *)v5))
        {
          char v11 = SipStack::registeredForVoice((SipStack *)v5);
          char v12 = (v9 & 1) != 0 ? v11 : 1;
          if ((v12 & 1) == 0)
          {
            uint64_t v13 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
            (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"registering for ", 16);
            *(unsigned char *)(v13 + 17) = 0;
            uint64_t v14 = *(void *)(v5 + 144);
            uint64_t v16 = *(void *)(v14 + 248);
            uint64_t v15 = *(std::__shared_weak_count **)(v14 + 256);
            if (v15)
            {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              int v17 = *(_DWORD *)(v16 + 1136);
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            else
            {
              int v17 = *(_DWORD *)(v16 + 1136);
            }
            std::string::basic_string[abi:ne180100]<0>(v33, ",");
            BambiServices::namesForServiceMask(v17, &__p);
            (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 32))(v13, &__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" due to access barring change", 29);
            *(unsigned char *)(v13 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v13 + 17) = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v34 < 0) {
              operator delete(v33[0]);
            }
            uint64_t v22 = (void *)*((void *)this + 20);
            if (*(char *)(v5 + 4183) < 0) {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
            }
            else {
              std::string __p = *(std::string *)(v5 + 4160);
            }
            uint64_t v23 = *(void *)(v5 + 144);
            uint64_t v25 = *(void *)(v23 + 248);
            unint64_t v24 = *(std::__shared_weak_count **)(v23 + 256);
            if (v24)
            {
              atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
              int v26 = *(_DWORD *)(v25 + 1136);
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            }
            else
            {
              int v26 = *(_DWORD *)(v25 + 1136);
            }
            std::string::basic_string[abi:ne180100]<0>(v33, "");
            std::string::basic_string[abi:ne180100]<0>(v31, "");
            BambiClient::updateRegisteredServices(v22, (unsigned __int8 *)&__p, v26, (uint64_t)v36, (uint64_t)v33, (uint64_t)v31, 0);
            goto LABEL_32;
          }
        }
      }
      if (SHIBYTE(v47) < 0) {
        operator delete(v46[1]);
      }
      if (SHIBYTE(v46[0]) < 0) {
        operator delete(v45[0]);
      }
      if (SBYTE7(v43) < 0) {
        operator delete(v42[0]);
      }
      if (SHIBYTE(v41) < 0) {
        operator delete(v40[1]);
      }
      if (SHIBYTE(v38) < 0) {
        operator delete(v37[1]);
      }
      if (SHIBYTE(v37[0]) < 0) {
        operator delete(v36[0]);
      }
      goto LABEL_57;
    }
  }
}

void sub_1C55648E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28)
{
  ims::AccessNetworks::~AccessNetworks(&a28);
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  _Unwind_Resume(a1);
}

void BambiAccessBarring::updateVoiceInfo(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, ImsResult *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"received update voice barring factor: ", 38);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)", time: ", 8);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)", SpecialAccessClass: ", 22);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)", services : ", 13);
  *(unsigned char *)(v6 + 17) = 0;
  int v7 = *((_DWORD *)a2 + 3);
  std::string::basic_string[abi:ne180100]<0>(v32, ",");
  BambiServices::namesForServiceMask(v7, &v34);
  LoggableString::LoggableString(&__p, &v34);
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 40))(v6, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 176);
  if (v8)
  {
    int v9 = std::__shared_weak_count::lock(v8);
    if (v9) {
      uint64_t v10 = *(SipStack **)(a1 + 168);
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    int v9 = 0;
  }
  if (TelephonyRadiosGetRadioVendor() == 1)
  {
    if (v10)
    {
      char v11 = (ImsPrefs *)SipStack::prefs(v10);
      HonorSimAccessClassBeforeBarringKey = (void **)ImsPrefs::getHonorSimAccessClassBeforeBarringKey(v11);
      if (ImsPrefs::BOOLValue(v11, HonorSimAccessClassBeforeBarringKey))
      {
        unsigned int v13 = *((unsigned __int8 *)a2 + 8);
        unsigned int v14 = *(_DWORD *)(a1 + 184);
        if (!v14)
        {
          uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"SIM access class is zero, all barring indications will be honored", 65);
          *(unsigned char *)(v15 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v15 + 17) = 0;
        }
        if (v14 >= 0x800 && ((v14 >> 11) & (__rbit32(v13) >> 27)) != v14 >> 11)
        {
          long long v29 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
          LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741825;
          uint64_t v16 = ImsResult::operator<<<char [52]>((uint64_t)&__p, "Barring indication not intended for our sim class (");
          uint64_t v17 = ImsResult::operator<<<unsigned int>(v16);
          uint64_t v18 = (ImsResult *)ImsResult::operator<<<char [2]>(v17, ")");
          uint64_t v19 = ImsLogContainer::logResult((ImsLogContainer *)a1, v18);
          ImsResult::ImsResult(a3, (const std::string *)v19);
          goto LABEL_44;
        }
      }
    }
  }
  *((void *)a3 + 2) = 0;
  *((void *)a3 + IMSCallOptions::~IMSCallOptions(this + 3) = 0;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)a3 = &unk_1F20B2680;
  *((void *)a3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
  *((void *)a3 + 4) = 0;
  if (!*((unsigned char *)a2 + 16))
  {
    *a2 = 100;
    *((_DWORD *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    *((unsigned char *)a2 + 8) = 0;
    *((_DWORD *)a2 + IMSCallOptions::~IMSCallOptions(this + 3) = 1;
    *((unsigned char *)a2 + 1ims::StackConfig::~StackConfig(this + 6) = 1;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741825;
    uint64_t v20 = ImsResult::operator<<<char [15]>((uint64_t)&__p, "invalid factor");
    ImsResult::operator=((uint64_t)a3, v20);
    ImsResult::~ImsResult((ImsResult *)&__p);
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Received AccessBarring information is invalid, but letting it through", 69);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
  }
  int v22 = *a2;
  if (v22 == *(unsigned __int16 *)(a1 + 104)
    && *((_DWORD *)a2 + 3) == *(_DWORD *)(a1 + 116)
    && *((_DWORD *)a2 + 1) == *(_DWORD *)(a1 + 108)
    && *((unsigned __int8 *)a2 + 8) == *(unsigned __int8 *)(a1 + 112))
  {
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"Barring ignored, no change in barring information", 49);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    if (*(unsigned char *)(a1 + 136))
    {
      if ((unsigned __int16 *)(a1 + 104) != a2)
      {
        *(_WORD *)(a1 + 104) = v22;
        *(_DWORD *)(a1 + 108) = *((_DWORD *)a2 + 1);
        *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 8);
        *(_DWORD *)(a1 + 11ims::StackConfig::~StackConfig(this + 6) = *((_DWORD *)a2 + 3);
        *(unsigned char *)(a1 + 12(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = *((unsigned char *)a2 + 16);
      }
      *(unsigned char *)(a1 + 188) = 0;
      uint64_t v24 = *(void *)(a1 + 160);
      if (v24)
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        if (BambiClient::callCountExcludingCall(v24, &__p))
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"not updating registration state due to barring factor change while in active call", 81);
          *(unsigned char *)(v25 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v25 + 17) = 0;
          *(unsigned char *)(a1 + 188) = 1;
        }
        else
        {
          BambiAccessBarring::updateRegistrationForBarring((BambiAccessBarring *)a1);
        }
      }
      uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"updated voice barring factor: ", 30);
      *(unsigned char *)(v26 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v26 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)", time: ", 8);
      *(unsigned char *)(v26 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v26 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)", services : ", 13);
      *(unsigned char *)(v26 + 17) = 0;
      int v27 = *(_DWORD *)(a1 + 116);
      std::string::basic_string[abi:ne180100]<0>(v32, ",");
      BambiServices::namesForServiceMask(v27, &v34);
      LoggableString::LoggableString(&__p, &v34);
      (*(void (**)(uint64_t, std::string *))(*(void *)v26 + 40))(v26, &__p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v26 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(__p.__r_.__value_.__r.__words[2]) = 0;
      ImsResult::operator=((uint64_t)a3, (uint64_t)&__p);
LABEL_44:
      ImsResult::~ImsResult((ImsResult *)&__p);
      if (!v9) {
        return;
      }
      goto LABEL_45;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"Barring ignored, non-LTE RAT", 28);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v23 + 17) = 0;
  if (v9) {
LABEL_45:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_1C5565320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  ImsResult::~ImsResult((ImsResult *)&a10);
  ImsResult::~ImsResult(v27);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<unsigned int>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    operator new();
  }
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  return a1;
}

void sub_1C5565470(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [2]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5565518(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t BambiAccessBarring::isServiceBarred(uint64_t **a1, int a2)
{
  uint64_t v4 = a1[25];
  if (v4)
  {
    size_t v5 = a1 + 24;
    uint64_t v6 = (uint64_t *)(a1 + 25);
    do
    {
      int v7 = *((_DWORD *)v4 + 8);
      BOOL v8 = v7 < a2;
      if (v7 >= a2) {
        int v9 = (uint64_t **)v4;
      }
      else {
        int v9 = (uint64_t **)(v4 + 1);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != (uint64_t *)(a1 + 25) && *((_DWORD *)v6 + 8) <= a2)
    {
      if (std::chrono::system_clock::now().__d_.__rep_ / 1000 <= v6[6] + *((unsigned int *)v6 + 10))
      {
        uint64_t v21 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
        ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"UAC barring is in effect for service ", 37);
        *(unsigned char *)(v21 + 17) = 0;
        int v22 = ims::Services::nameForService(a2);
        size_t v23 = strlen(v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)v22, v23);
        *(unsigned char *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v21 + 17) = 0;
        return 1;
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v5, v6);
      operator delete(v6);
    }
  }
  if (!*((unsigned char *)a1 + 139))
  {
    uint64_t v15 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
    ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v15);
    uint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = "access barring is not enabled";
    uint64_t v18 = 29;
LABEL_21:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v19 = 0;
    *(unsigned char *)(v15 + 17) = 0;
    return v19;
  }
  if (!*((unsigned char *)a1 + 138))
  {
    uint64_t v15 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
    ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v15);
    uint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = "not listening for access barring";
    uint64_t v18 = 32;
    goto LABEL_21;
  }
  memset(&v30, 0, sizeof(v30));
  uint64_t v10 = (char *)ims::Services::nameForService(a2);
  std::string::basic_string[abi:ne180100]<0>(&v30, v10);
  if ((*((_DWORD *)a1 + 29) & a2) == 0)
  {
    uint64_t v20 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
    ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"service ", 8);
    *(unsigned char *)(v20 + 17) = 0;
    LoggableString::LoggableString(&__p, &v30);
    (*(void (**)(uint64_t, std::string *))(*(void *)v20 + 40))(v20, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" not barred", 11);
    *(unsigned char *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_28;
  }
  time_t v11 = time(0);
  time_t v12 = v11;
  if (a2 != 1 || v11 >= (uint64_t)a1[16])
  {
    if (*((_DWORD *)a1 + 27))
    {
      if (*((unsigned __int16 *)a1 + 52) <= (unsigned __int16)((int)random() % 100))
      {
        uint64_t v24 = random();
        HIDWORD(v25) = 1071854387;
        LODWORD(v25) = *((_DWORD *)a1 + 27);
        a1[16] = (uint64_t *)(v12 + (((double)((v24 + 1) % 100) / 100.0 * 0.6 + 0.7) * (double)v25));
        uint64_t v26 = ((uint64_t (*)(uint64_t **))(*a1)[4])(a1);
        ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"barring ", 8);
        *(unsigned char *)(v26 + 17) = 0;
        LoggableString::LoggableString(&__p, &v30);
        (*(void (**)(uint64_t, std::string *))(*(void *)v26 + 40))(v26, &__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)" call (barringFactor = ", 23);
        *(unsigned char *)(v26 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v26 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)", rand3 = ", 10);
        *(unsigned char *)(v26 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v26 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)", rand4 = ", 10);
        *(unsigned char *)(v26 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v26 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)", Ty = ", 7);
        *(unsigned char *)(v26 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v26 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)")", 1);
        *(unsigned char *)(v26 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v26 + 17) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v13 = ((uint64_t (*)(uint64_t **))(*a1)[4])(a1);
        ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"access barring is in effect until ", 34);
        *(unsigned char *)(v13 + 17) = 0;
        ims::formatTimeAndIntervalFromNow((ims *)a1[16], v13, v27);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_34;
      }
      uint64_t v20 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
      ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"allowing ", 9);
      *(unsigned char *)(v20 + 17) = 0;
      LoggableString::LoggableString(&__p, &v30);
      (*(void (**)(uint64_t, std::string *))(*(void *)v20 + 40))(v20, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" call (barringFactor = ", 23);
      *(unsigned char *)(v20 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)", rand3 = ", 10);
      *(unsigned char *)(v20 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)")", 1);
      *(unsigned char *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      uint64_t v20 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
      ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"no ", 3);
      *(unsigned char *)(v20 + 17) = 0;
      LoggableString::LoggableString(&__p, &v30);
      (*(void (**)(uint64_t, std::string *))(*(void *)v20 + 40))(v20, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" service access barring in effect", 33);
      *(unsigned char *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
LABEL_28:
    *(unsigned char *)(v20 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v19 = 0;
    goto LABEL_35;
  }
  uint64_t v13 = ((uint64_t (*)(uint64_t **))(*a1)[4])(a1);
  ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"access barring is still in effect until ", 40);
  *(unsigned char *)(v13 + 17) = 0;
  ims::formatTimeAndIntervalFromNow((ims *)a1[16], v13, v14);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_34:
  *(unsigned char *)(v13 + 17) = 0;
  uint64_t v19 = 1;
LABEL_35:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  return v19;
}

void sub_1C5565FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiAccessBarring::isVoiceRegistrationBarred(BambiAccessBarring *this)
{
  if (*((unsigned char *)this + 139))
  {
    if (*((unsigned char *)this + 138))
    {
      if (*((unsigned char *)this + 136))
      {
        if (*((unsigned char *)this + 116))
        {
          int v6 = *((unsigned __int16 *)this + 52);
          uint64_t v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
          (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v2);
          uint64_t v3 = *(void **)(v2 + 8);
          if (!v6)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"isVoiceRegistrationBarred: zero barring factor for voice, service barred", 72);
            uint64_t v7 = 1;
            goto LABEL_12;
          }
          uint64_t v4 = "isVoiceRegistrationBarred: non-zero barring factor";
          uint64_t v5 = 50;
        }
        else
        {
          uint64_t v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
          (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v2);
          uint64_t v3 = *(void **)(v2 + 8);
          uint64_t v4 = "isVoiceRegistrationBarred: voice service not barred";
          uint64_t v5 = 51;
        }
      }
      else
      {
        uint64_t v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
        (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v2);
        uint64_t v3 = *(void **)(v2 + 8);
        uint64_t v4 = "isVoiceRegistrationBarred: not on LTE";
        uint64_t v5 = 37;
      }
    }
    else
    {
      uint64_t v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
      (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v2);
      uint64_t v3 = *(void **)(v2 + 8);
      uint64_t v4 = "isVoiceRegistrationBarred: not listening for access barring";
      uint64_t v5 = 59;
    }
  }
  else
  {
    uint64_t v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
    (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v2);
    uint64_t v3 = *(void **)(v2 + 8);
    uint64_t v4 = "isVoiceRegistrationBarred: access barring is not enabled";
    uint64_t v5 = 56;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  uint64_t v7 = 0;
LABEL_12:
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  return v7;
}

uint64_t BambiAccessBarring::clear(BambiAccessBarring *this)
{
  *((_WORD *)this + 52) = 100;
  *((_DWORD *)this + 27) = 0;
  *((unsigned char *)this + 112) = 0;
  *((unsigned char *)this + 12(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *((_DWORD *)this + 29) = 0;
  *((void *)this + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  uint64_t v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
  (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"clearing access barring values", 30);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  return result;
}

uint64_t BambiAccessBarring::reset(BambiAccessBarring *this)
{
  uint64_t v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
  (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"resetting settings", 18);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  *((_DWORD *)this + 34) = 0;
  return BambiAccessBarring::clear(this);
}

void BambiAccessBarring::checkFlags(BambiAccessBarring *this)
{
  int v2 = *((unsigned __int8 *)this + 139);
  if (*((unsigned char *)this + 139))
  {
    if (BambiAccessBarring::alwaysListen(this))
    {
      uint64_t v3 = (char *)this + 138;
      if (*((unsigned char *)this + 138)) {
        return;
      }
      *uint64_t v3 = 1;
      goto LABEL_9;
    }
    int v2 = *((unsigned __int8 *)this + 137);
    if (*((unsigned char *)this + 137)) {
      int v2 = *((unsigned char *)this + 136) != 0;
    }
  }
  uint64_t v3 = (char *)this + 138;
  if (*((unsigned __int8 *)this + 138) == v2) {
    return;
  }
  *uint64_t v3 = v2;
  if (!v2)
  {
    uint64_t v5 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
    (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"shouldn't listen for access barring changes", 43);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    BambiAccessBarring::clear(this);
    goto LABEL_11;
  }
LABEL_9:
  uint64_t v4 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
  (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"should listen for access barring changes", 40);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
LABEL_11:
  int v6 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = *((void *)this + 18);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  int v9 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v9)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v9);
    if (v10)
    {
      time_t v11 = v10;
      if (v8)
      {
        uint64_t v12 = *((void *)this + 21);
        if (v12)
        {
          memset(&v19, 0, sizeof(v19));
          uint64_t v13 = (ImsPrefs *)SipStack::prefs((SipStack *)v12);
          AccessBarringTypeKey = (const ImsPrefsKeyEnum *)ImsPrefs::getAccessBarringTypeKey(v13);
          ImsPrefs::stringValue(v13, AccessBarringTypeKey, &v19);
          if (*v3)
          {
            uint64_t v15 = *(unsigned int *)(v12 + 4100);
            if (*(char *)(v12 + 4183) < 0) {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v12 + 4160), *(void *)(v12 + 4168));
            }
            else {
              std::string __p = *(std::string *)(v12 + 4160);
            }
            uint64_t v16 = nas::barringTypeFromString((uint64_t)&v19);
            (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(void *)v8 + 16))(v8, &__p, v15, v16);
          }
          else
          {
            if (*(char *)(v12 + 4183) < 0) {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v12 + 4160), *(void *)(v12 + 4168));
            }
            else {
              std::string __p = *(std::string *)(v12 + 4160);
            }
            uint64_t v17 = nas::barringTypeFromString((uint64_t)&v19);
            (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v8 + 32))(v8, &__p, v17);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v19.__r_.__value_.__l.__data_);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C5566828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void BambiAccessBarring::registrationStateChanged(BambiAccessBarring *this, int a2)
{
  if (*((unsigned __int8 *)this + 137) != a2)
  {
    *((unsigned char *)this + 137) = a2;
    uint64_t v4 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
    (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v4);
    if (a2) {
      uint64_t v5 = "";
    }
    else {
      uint64_t v5 = "not ";
    }
    if (a2) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = 4;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)v5, v6);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"registered", 10);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    BambiAccessBarring::checkFlags(this);
  }
}

void BambiAccessBarring::allCallsEnded(BambiAccessBarring *this)
{
  if (*((unsigned char *)this + 188))
  {
    uint64_t v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
    (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"All calls have ended, update registration for deferred barring indication", 73);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    *((unsigned char *)this + 188) = 0;
    BambiAccessBarring::updateRegistrationForBarring(this);
  }
}

void BambiAccessBarring::setEnabled(BambiAccessBarring *this, int a2)
{
  if (*((unsigned __int8 *)this + 139) != a2)
  {
    *((unsigned char *)this + 139) = a2;
    uint64_t v4 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
    (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"access barring is ", 18);
    *(unsigned char *)(v4 + 17) = 0;
    if (a2) {
      uint64_t v5 = "";
    }
    else {
      uint64_t v5 = "not ";
    }
    if (a2) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = 4;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)v5, v6);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"enabled", 7);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    BambiAccessBarring::checkFlags(this);
  }
}

uint64_t BambiAccessBarring::updateSimAccessClass(BambiAccessBarring *this, const unsigned int *a2)
{
  *((_DWORD *)this + 4ims::StackConfig::~StackConfig(this + 6) = *a2;
  uint64_t v3 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
  (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Our sim class is ", 17);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  return result;
}

uint64_t **BambiAccessBarring::setUacBarring(uint64_t a1, int a2, int a3)
{
  int v7 = a2;
  if (!a3) {
    return (uint64_t **)std::__tree<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::__map_value_compare<ims::Services::ServiceType,std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::less<ims::Services::ServiceType>,true>,std::allocator<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>>>::__erase_unique<ims::Services::ServiceType>(a1 + 192, &v7);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v5 = std::chrono::system_clock::now().__d_.__rep_ / 1000;
  uint64_t v8 = &v7;
  uint64_t result = std::__tree<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::__map_value_compare<ims::Services::ServiceType,std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::less<ims::Services::ServiceType>,true>,std::allocator<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>>>::__emplace_unique_key_args<ims::Services::ServiceType,std::piecewise_construct_t const&,std::tuple<ims::Services::ServiceType const&>,std::tuple<>>((uint64_t **)(a1 + 192), &v7, (uint64_t)&std::piecewise_construct, &v8);
  *((_DWORD *)result + 1(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = a3;
  *((_DWORD *)result + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  result[6] = (uint64_t *)v5;
  return result;
}

void *BambiAccessBarring::logPrefix(BambiAccessBarring *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"AccessBarring: ", 15);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

uint64_t std::__tree<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::__map_value_compare<ims::Services::ServiceType,std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::less<ims::Services::ServiceType>,true>,std::allocator<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>>>::__erase_unique<ims::Services::ServiceType>(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      int v7 = (uint64_t *)v2;
    }
    else {
      int v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t **std::__tree<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::__map_value_compare<ims::Services::ServiceType,std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::less<ims::Services::ServiceType>,true>,std::allocator<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>>>::__emplace_unique_key_args<ims::Services::ServiceType,std::piecewise_construct_t const&,std::tuple<ims::Services::ServiceType const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    time_t v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + ims::StackConfig::~StackConfig(this + 6) = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void SDPMediaCrypto::value(SDPMediaCrypto *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 72))
  {
    memset(&v21, 0, sizeof(v21));
    if (base64Encode(*((void *)this + 6), *((void *)this + 7) - *((void *)this + 6), &v21))
    {
      uint64_t v20 = 0;
      long long v18 = 0u;
      memset(v19, 0, sizeof(v19));
      *(_OWORD *)std::string __p = 0u;
      long long v17 = 0u;
      memset(v15, 0, sizeof(v15));
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
      uint64_t v4 = (void *)std::ostream::operator<<();
      char v22 = 32;
      int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v22, 1);
      BOOL v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"AES_CM_128_HMAC_SHA1_80", 23);
      char v22 = 32;
      int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v22, 1);
      int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"inline", 6);
      char v22 = 58;
      int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v22, 1);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v10 = &v21;
      }
      else {
        int v10 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v21.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, size);
      if (!*((unsigned char *)this + 73))
      {
        char v22 = 32;
        uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v22, 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"UNENCRYPTED_SRTP", 16);
      }
      if (!*((unsigned char *)this + 74))
      {
        char v22 = 32;
        uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v22, 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"UNENCRYPTED_SRTCP", 17);
      }
      if (!*((unsigned char *)this + 75))
      {
        char v22 = 32;
        unsigned int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v22, 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"UNAUTHENTICATED_SRTP", 20);
      }
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15 + 8, a2);
      *(void *)&v15[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v15 + *(void *)(*(void *)&v15[0] - QMIRTPSession::configure((QMIRTPSession *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      *((void *)&v15[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
      if (SHIBYTE(v17) < 0) {
        operator delete(__p[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C878E270](v19);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(a2, "");
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1C55671CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 41) < 0) {
    operator delete(*(void **)(v1 - 64));
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPMediaCrypto::valid(SDPMediaCrypto *this)
{
  return *((unsigned char *)this + 8) && *((unsigned char *)this + 72) != 0;
}

void SipConnectionUser::setTransport(uint64_t a1, void *a2, int a3)
{
  BOOL v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    int v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    int v7 = 0;
  }
  uint64_t v9 = *a2;
  if (v8 != *a2)
  {
    uint64_t v10 = a2[1];
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
    }
    time_t v11 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = v10;
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
    if (a3)
    {
      if (*a2)
      {
        if ((*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 80))(*a2, a1))
        {
          std::string::basic_string[abi:ne180100]<0>(v18, "sip.txn");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v12 = ims::debug((uint64_t)v18, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"added connection user to ", 25);
          *(unsigned char *)(v12 + 17) = 0;
          (*(void (**)(void, uint64_t))(*(void *)*a2 + 104))(*a2, v12);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v12 + 17) = 0;
          if (v17 < 0) {
            operator delete(__p[0]);
          }
          if (v19 < 0) {
            operator delete(v18[0]);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v18, "sip.txn");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v13 = ims::debug((uint64_t)v18, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Failed to add connection user to ", 33);
          *(unsigned char *)(v13 + 17) = 0;
          (*(void (**)(void, uint64_t))(*(void *)*a2 + 104))(*a2, v13);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v13 + 17) = 0;
          if (v17 < 0) {
            operator delete(__p[0]);
          }
          if (v19 < 0) {
            operator delete(v18[0]);
          }
          unsigned int v14 = *(std::__shared_weak_count **)(a1 + 16);
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
          if (v14) {
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      if (v8)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "sip.txn");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v15 = ims::debug((uint64_t)v18, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"removing connection user from ", 30);
        *(unsigned char *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 104))(v8, v15);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v15 + 17) = 0;
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 88))(v8, a1);
      }
    }
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C55675EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void SipConnectionUser::~SipConnectionUser(SipConnectionUser *this)
{
  *(void *)this = &unk_1F20DBE78;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *((void *)this + 1);
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      if (v4)
      {
        uint64_t v6 = 0;
        int v7 = 0;
        (*(void (**)(SipConnectionUser *, uint64_t *, uint64_t))(*(void *)this + 48))(this, &v6, 1);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
      }
    }
    int v5 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t SipTransaction::SipTransaction(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const std::string *a5)
{
  *(void *)a1 = &unk_1F20DC120;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(void *)(a1 + 5ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 8(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = &unk_1F20DBE78;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 9ims::StackConfig::~StackConfig(this + 6) = v10;
  *(void *)(a1 + 96 + *(void *)(v10 - 4SipDialog::~SipDialog((SipDialog *)((char *)this - 8)) = a2[2];
  *(void *)(a1 + 12(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(unsigned char *)(a1 + 108) = 1;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 13ims::StackConfig::~StackConfig(this + 6) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.txn");
  ImsLogContainer::ImsLogContainer(a1 + 176, &__p, (const std::string *)(a3 + 64));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 28(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 288) = 0;
  uint64_t v11 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 72) = &unk_1F20DBF70;
  *(void *)(a1 + 9ims::StackConfig::~StackConfig(this + 6) = a2[3];
  *(void *)(a1 + *(void *)(v11 - QMIRTPSession::configure((QMIRTPSession *)((char *)this - 24)) = a2[4];
  *(void *)(a1 + 17ims::StackConfig::~StackConfig(this + 6) = &unk_1F20DC020;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 36(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 40(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 37ims::StackConfig::~StackConfig(this + 6) = &unk_1F20B37B0;
  *(void *)(a1 + 384) = a1 + 392;
  *(_WORD *)(a1 + 408) = 256;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 416));
  std::string::operator=((std::string *)(a1 + 328), a5);
  (*(void (**)(std::string *__return_ptr))(**(void **)a4 + 32))(&__p);
  long long v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 312);
  *(_OWORD *)(a1 + 304) = v12;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  *(void *)(a1 + 32(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = a3;
  unsigned int v14 = *(std::__shared_weak_count **)(a1 + 360);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 36(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  *(unsigned char *)(a1 + 368) = 1;
  *(void *)(a1 + 29ims::StackConfig::~StackConfig(this + 6) = 0;
  *(void *)(a1 + 56(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  *(void *)(a1 + 52(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = a1 + *(void *)(*(void *)a1 - 24);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.txn");
  std::string::operator=((std::string *)(a1 + 464), &__p);
  std::string::operator=((std::string *)(a1 + 488), (const std::string *)(a3 + 64));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v15 = (SipUserAgent *)SipTransportLayer::userAgent((SipTransportLayer *)a3);
  *(void *)(a1 + 552) = SipUserAgent::config(v15) + 512;
  return a1;
}

void sub_1C5567AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, SipConnectionUser *a9, void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  SipTimerContainer::~SipTimerContainer(v19);
  *(void *)(v16 + 37ims::StackConfig::~StackConfig(this + 6) = v21;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v16 + 384, *(void **)(v16 + 392));
  size_t v23 = *(std::__shared_weak_count **)(v16 + 360);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (*(char *)(v16 + 351) < 0) {
    operator delete(*v20);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(v16 + 312);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  unint64_t v25 = *(std::__shared_weak_count **)(v16 + 288);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  ImsLogContainer::~ImsLogContainer(a10);
  SipLockable::~SipLockable(v18, v17);
  SipConnectionUser::~SipConnectionUser(a9);
  SipTypedStateMachine<SipTransactionState>::~SipTypedStateMachine(v16);
  _Unwind_Resume(a1);
}

uint64_t SipTypedStateMachine<SipTransactionState>::~SipTypedStateMachine(uint64_t a1)
{
  *(void *)a1 = &unk_1F20DC120;
  if (*(void *)(a1 + 40))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(*(void **)(a1 + 32));
    *(void *)(a1 + 32) = 0;
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)(a1 + 16) + 8 * i) = 0;
    }
    *(void *)(a1 + 4(*(void (**)(MediaSessionQueue *, uint64_t, void))(*(void *)this + 232))(this, 2, 0) = 0;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(*(void **)(a1 + 32));
  int v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 1ims::StackConfig::~StackConfig(this + 6) = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void SipTransaction::~SipTransaction(SipTransaction *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  int v5 = (SipTransaction *)((char *)this + 72);
  *((void *)this + 9) = &unk_1F20DBF70;
  uint64_t v6 = (SipTransaction *)((char *)this + 96);
  *((void *)this + 12) = a2[3];
  *(void *)((char *)this + *(void *)(v4 - QMIRTPSession::configure((QMIRTPSession *)((char *)this - 24)) = a2[4];
  int v7 = (char *)this + 176;
  *((void *)this + 22) = &unk_1F20DC020;
  uint64_t v8 = ImsLogContainer::debugStream((SipTransaction *)((char *)this + 176));
  (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))((char *)this + 176, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"~SipTransaction", 15);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  uint64_t v9 = *((void *)this + 37);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 70);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  SipTimerContainer::~SipTimerContainer((SipTransaction *)((char *)this + 416));
  *((void *)this + 47) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 384, *((void **)this + 49));
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  long long v12 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  *((void *)this + 22) = &unk_1F20C9CA0;
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  SipLockable::~SipLockable(v6, a2 + 1);
  SipConnectionUser::~SipConnectionUser(v5);
  SipTypedStateMachine<SipTransactionState>::~SipTypedStateMachine((uint64_t)this);
}

void SipTransaction::logPrefix(SipTransaction *this, ImsOutStream *a2)
{
  (*(void (**)(void **__return_ptr))(*((void *)this + 12) + 24))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5567FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipTransaction::logPrefix(SipTransaction *this, ImsOutStream *a2)
{
}

void SipTransaction::initialize(SipTransaction *this)
{
}

void sub_1C55680B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v18 - 24);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x1C878E320](v17, 0x10B3C40AC51C97CLL);
  _Unwind_Resume(a1);
}

void SipTransaction::terminationLocksReleased(SipTransaction *this)
{
  uint64_t v2 = (void *)((char *)this + 176);
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 22) + 64))((char *)this + 176);
  (*(void (**)(void *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"SipTransaction::terminationLocksReleased", 40);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  SipTimerContainer::cancelAllTimers((SipTimerContainer *)(v2 + 30));
  uint64_t v4 = v2[22];
  if (v4)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v15, (void *)this + 35);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 48))(v4, &v15);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    int v5 = (std::__shared_weak_count *)*((void *)this + 45);
    *((void *)this + 44) = 0;
    *((void *)this + 45) = 0;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  memset(&v14, 0, sizeof(v14));
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 37) + 112))(*((void *)this + 37));
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    v14.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  }
  memset(&v13, 0, sizeof(v13));
  if (*((char *)this + 351) < 0) {
    std::string::__init_copy_ctor_external(&v13, *((const std::string::value_type **)this + 41), *((void *)this + 42));
  }
  else {
    std::string v13 = *(std::string *)((char *)this + 328);
  }
  memset(&v12, 0, sizeof(v12));
  uint64_t v8 = (char *)SipMessage::header<SipCallIdHeader>(*((void *)this + 37));
  uint64_t v9 = (long long *)(v8 + 64);
  if (!v8) {
    uint64_t v9 = &ims::kEmptyString;
  }
  if (*((char *)v9 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else {
    std::string v12 = *(std::string *)v9;
  }
  SipTransactionLayer::transactionTerminated(*((void **)this + 40), (uint64_t)&v13, (uint64_t)&v14);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  (*(void (**)(char *, uint64_t *, uint64_t))(*((void *)this + 9) + 48))((char *)this + 72, &v10, 1);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}