void BambiCall::setInputFrequencyLevel(BambiCall *this, const __CFData *a2)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *((void *)this + 51);
  if (v2)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v4, (void *)this + 23);
    (*(void (**)(uint64_t, uint64_t *, const __CFData *))(*(void *)v2 + 200))(v2, &v4, a2);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C538E7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::setOutputFrequencyLevel(BambiCall *this, const __CFData *a2)
{
  uint64_t v2 = *((void *)this + 51);
  if (v2)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v4, (void *)this + 23);
    (*(void (**)(uint64_t, uint64_t *, const __CFData *))(*(void *)v2 + 208))(v2, &v4, a2);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C538E854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::fakeNetworkBasedCallWaiting(BambiCall *this)
{
  uint64_t v2 = (const BambiCallOptions *)(*((void *)this + 49) + 792);
  memset(v7, 0, sizeof(v7));
  BambiCallOptions::BambiCallOptions((BambiCallOptions *)v7, v2);
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  SipUri::SipUri((SipUri *)v5, (BambiCall *)((char *)this + 1048));
  BambiCall::initializeMobileOriginated(this, (const SipUri *)v5, (const BambiCallOptions *)v7, (uint64_t)v4);
  ImsResult::~ImsResult((ImsResult *)v4);
  SipSession::sendInvite(*((uint64_t **)this + 49), (uint64_t)&SipSession::kInviteTypeFakeNetworkBasedCallWaiting, (ImsResult *)v3);
  ImsResult::~ImsResult((ImsResult *)v3);
  SipUri::~SipUri((SipUri *)v5);
  BambiCallOptions::~BambiCallOptions((void **)v7);
}

void sub_1C538E964(_Unwind_Exception *a1)
{
}

void *SipMessage::header<SipMinSEHeader>(uint64_t a1)
{
  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "Min-SE");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

uint64_t BambiCall::processCallEvent(BambiCall *this, BambiCallEvent *a2)
{
  uint64_t v230 = *MEMORY[0x1E4F143B8];
  memset(v198, 0, sizeof(v198));
  uint64_t v4 = (void *)((char *)this + 184);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v224, (void *)this + 23);
  long long v197 = v224;
  long long v224 = 0uLL;
  LoggableString::LoggableString((LoggableString *)__p, "processCallEvent");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v198, (std::__shared_weak_count **)&v197, (const std::string *)__p);
  if (SHIBYTE(v202[0]) < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)&v197 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v197 + 1));
  }
  if (*((void *)&v224 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v224 + 1));
  }
  v5 = (char *)this + 80;
  uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"processing call event ", 22);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(BambiCallEvent *, uint64_t))(*(void *)a2 + 16))(a2, v6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v195, v4);
  uint64_t v8 = v195;
  v7 = v196;
  if (v196) {
    atomic_fetch_add_explicit(&v196->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v9 = (std::__shared_weak_count *)*((void *)a2 + 3);
  *((void *)a2 + 2) = v8;
  *((void *)a2 + 3) = v7;
  if (v9)
  {
    std::__shared_weak_count::__release_weak(v9);
    v7 = v196;
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  unsigned int v10 = *((_DWORD *)a2 + 2) & 0xFFFFFFFE;
  if (v10 == 14)
  {
    if (v11)
    {
      v12 = v11;
      BOOL v13 = v11[147] != 0;
      if (v11[145]) {
        goto LABEL_16;
      }
      v22 = (std::__shared_weak_count *)*((void *)this + 46);
      if (!v22) {
        goto LABEL_16;
      }
      v23 = std::__shared_weak_count::lock(v22);
      if (!v23) {
        goto LABEL_16;
      }
      uint64_t v24 = *((void *)this + 45);
      if (v24)
      {
        int v25 = *((_DWORD *)v12 + 10);
        switch(v25)
        {
          case 23:
            int v26 = *(unsigned __int8 *)(v24 + 240);
LABEL_324:
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
            if (v26) {
              v12[144] = 1;
            }
LABEL_16:
            v14 = (std::__shared_weak_count *)*((void *)this + 46);
            BOOL v189 = v13;
            if (!v14)
            {
              v17 = 0;
              v16 = 0;
              goto LABEL_38;
            }
            v15 = std::__shared_weak_count::lock(v14);
            v16 = v15;
            if (!v15)
            {
              v17 = 0;
              goto LABEL_38;
            }
            v17 = (SipStack *)*((void *)this + 45);
            uint64_t v18 = *((void *)v12 + 6);
            if (!v18 || !v17)
            {
LABEL_38:
              int v29 = *((_DWORD *)v12 + 2);
              v190 = v17;
              if (v29 != 15)
              {
                int v187 = 0;
LABEL_74:
                if (v29 == 14 && BambiCall::isWPSCall(this))
                {
                  uint64_t v43 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
                  (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v43);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"Ending WPS call", 15);
                  *(unsigned char *)(v43 + 17) = 0;
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(unsigned char *)(v43 + 17) = 0;
                  if (v12[144])
                  {
                    uint64_t v44 = *((void *)this + 49);
                    if (v44)
                    {
                      uint64_t v45 = *(void *)(v44 + 720);
                      if (v45)
                      {
                        if ((*(unsigned int (**)(uint64_t))(*(void *)v45 + 48))(v45) == 14)
                        {
                          uint64_t v46 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
                          (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v46);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)"WPS Call requiring CSFB ended in cleanup state - defer sending event until timer expires", 88);
                          *(unsigned char *)(v46 + 17) = 0;
                          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                          *(unsigned char *)(v46 + 17) = 0;
                        }
                      }
                    }
                    goto LABEL_139;
                  }
                  uint64_t v47 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
                  (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v47);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)"WPS call ended normally, not performing CSFB", 44);
                  *(unsigned char *)(v47 + 17) = 0;
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(unsigned char *)(v47 + 17) = 0;
                  SipSession::exitWPSCleanup(*((SipSession **)this + 49));
                }
                if (*((unsigned char *)this + 1496) || *((unsigned char *)this + 1497))
                {
                  uint64_t v48 = *((void *)this + 51);
                  if (v48) {
                    (*(void (**)(uint64_t, unsigned char *))(*(void *)v48 + 16))(v48, v12);
                  }
                  v49 = (BambiClient *)BambiCall::bambiClient(this);
                  BambiClient::handleCallTerminationEvent(v49, (BambiCallSessionTerminationBaseEvent *)v12);
                  goto LABEL_87;
                }
                if (*((int *)v12 + 10) < 10)
                {
                  v142 = (void *)*((void *)this + 51);
                  if (!v142) {
                    goto LABEL_87;
                  }
                  v143 = (void (**)(void))(*v142 + 16);
                }
                else
                {
                  if (v17)
                  {
                    uint64_t v60 = BambiCall::bambiClient(this);
                    v61 = v17;
                    v62 = v12;
                    uint64_t v63 = reasonStrings;
                    if (*((int *)v12 + 10) <= 37) {
                      unsigned int v64 = *((_DWORD *)v12 + 10);
                    }
                    else {
                      unsigned int v64 = 10;
                    }
                    if (*((char *)v61 + 4183) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)v61 + 520), *((void *)v61 + 521));
                    }
                    else
                    {
                      *(_OWORD *)__p = *((_OWORD *)v61 + 260);
                      v202[0] = *((void **)v61 + 522);
                    }
                    uint64_t v173 = *(void *)(v60 + 248);
                    if (v173) {
                      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v173 + 112))(v173, v63 + 24 * v64, __p);
                    }
                    if (SHIBYTE(v202[0]) < 0) {
                      operator delete(__p[0]);
                    }
                    v12 = v62;
                    v17 = v190;
                  }
                  v174 = (void *)*((void *)this + 51);
                  if (!v174)
                  {
LABEL_87:
                    std::string::basic_string[abi:ne180100]<0>(v226, "processSessionTerminationCallEvent");
                    uint64_t v50 = *((void *)this + 25);
                    if (v50)
                    {
                      v186 = v12;
                      memset(v225, 0, 56);
                      *(void *)&long long v224 = &unk_1F20B2680;
                      *((void *)&v224 + 1) = &_bambiDomain;
                      v51 = *(void **)(v50 + 1904);
                      v52 = (void *)(v50 + 1912);
                      if (v51 != (void *)(v50 + 1912))
                      {
                        while (1)
                        {
                          v53 = (unint64_t *)v51[5];
                          if (v53 && v53[4])
                          {
                            uint64_t v54 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
                            (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v54);
                            (*(void (**)(uint64_t, void **))(*(void *)v54 + 32))(v54, v226);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)": terminating media session ", 28);
                            *(unsigned char *)(v54 + 17) = 0;
                            std::ostream::operator<<();
                            *(unsigned char *)(v54 + 17) = 0;
                            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                            *(unsigned char *)(v54 + 17) = 0;
                            RTPManager::terminateSessionWithId(*((RTPManager **)this + 47), v53[4]);
                            v55 = (void *)BambiCall::bambiClient(this);
                            BambiClient::setMediaSessionIdForStream(v55, (BambiCallMediaStream *)v53, 0);
                          }
                          memset(&v202[1], 0, 48);
                          __p[0] = &unk_1F20B2680;
                          __p[1] = &_bambiDomain;
                          LODWORD(v202[0]) = 0;
                          ImsResult::operator=((uint64_t)&v224, (uint64_t)__p);
                          ImsResult::~ImsResult((ImsResult *)__p);
                          memset(&v202[1], 0, 48);
                          __p[0] = &unk_1F20B2680;
                          __p[1] = &_bambiDomain;
                          LODWORD(v202[0]) = 0;
                          if (*((uint64_t **)&v224 + 1) != &_bambiDomain) {
                            break;
                          }
                          int v56 = v225[0];
                          ImsResult::~ImsResult((ImsResult *)__p);
                          if (!v56)
                          {
                            v57 = (void *)v51[1];
                            if (v57)
                            {
                              do
                              {
                                v58 = v57;
                                v57 = (void *)*v57;
                              }
                              while (v57);
                            }
                            else
                            {
                              do
                              {
                                v58 = (void *)v51[2];
                                BOOL v59 = *v58 == (void)v51;
                                v51 = v58;
                              }
                              while (!v59);
                            }
                            v51 = v58;
                            if (v58 != v52) {
                              continue;
                            }
                          }
                          goto LABEL_109;
                        }
                        ImsResult::~ImsResult((ImsResult *)__p);
                      }
LABEL_109:
                      ImsResult::~ImsResult((ImsResult *)&v224);
                      v12 = v186;
                      v17 = v190;
                    }
                    if (v227 < 0)
                    {
                      operator delete(v226[0]);
                      if (!v17) {
                        goto LABEL_139;
                      }
                    }
                    else if (!v17)
                    {
LABEL_139:
                      if (v16) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
                      }
                      goto LABEL_141;
                    }
                    v65 = (ImsPrefs *)SipStack::prefs(v17);
                    NoFallbackVoiceServiceKey = (void **)ImsPrefs::getNoFallbackVoiceServiceKey(v65);
                    if ((v189 & ImsPrefs::BOOLValue(v65, NoFallbackVoiceServiceKey)) == 1)
                    {
                      uint64_t v67 = *((void *)v17 + 18);
                      v68 = *(void **)(v67 + 248);
                      uint64_t v69 = *(void *)(v67 + 256);
                      if (v69) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 8), 1uLL, memory_order_relaxed);
                      }
                      SipRegistrationClient::dropRegistrationWhenCallsEnd(v68, 0x15u);
                    }
                    if (v12[147])
                    {
                      uint64_t v70 = *((void *)v17 + 18);
                      uint64_t v71 = *(void *)(v70 + 248);
                      v72 = *(std::__shared_weak_count **)(v70 + 256);
                      if (v72) {
                        atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v71 + 168))(v71, 18, 0, 0);
                      if (v72) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v72);
                      }
                      SipTransportLayer::removeConnections(*((SipTransportLayer **)v17 + 20), 0, 1, 1);
                      uint64_t v73 = BambiCall::bambiClient(this);
                      if (*((char *)v17 + 4183) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)v17 + 520), *((void *)v17 + 521));
                      }
                      else
                      {
                        *(_OWORD *)__p = *((_OWORD *)v17 + 260);
                        v202[0] = *((void **)v17 + 522);
                      }
                      uint64_t v77 = *(void *)(v73 + 248);
                      if (v77) {
                        (*(void (**)(uint64_t, void **))(*(void *)v77 + 96))(v77, __p);
                      }
                      if (SHIBYTE(v202[0]) < 0) {
                        operator delete(__p[0]);
                      }
                    }
                    else if (v187)
                    {
                      SipStack::handleFallbackRequested(v17);
                    }
                    goto LABEL_139;
                  }
                  v143 = (void (**)(void))(*v174 + 280);
                }
                (*v143)();
                goto LABEL_87;
              }
              if (!v30) {
                goto LABEL_72;
              }
              v31 = v30;
              if (!v30[6])
              {
LABEL_59:
                int v37 = *((_DWORD *)v31 + 10);
                if ((v37 == 17 || *((unsigned char *)v31 + 144)) && (*((unsigned char *)this + 1496) || *((unsigned char *)this + 1497)))
                {
                  uint64_t v38 = BambiCall::bambiClient(this);
                  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v199, v4);
                  uint64_t v39 = BambiClient::callCountExcludingCall(v38, &v199);
                  if (v200) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v200);
                  }
                  if (v39)
                  {
                    uint64_t v40 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
                    (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v40);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"not terminating registration due to ", 36);
                    *(unsigned char *)(v40 + 17) = 0;
                    int v41 = *((_DWORD *)v31 + 10);
                    if (v41 > 37) {
                      int v41 = 10;
                    }
                    LoggableString::LoggableString((std::string *)__p, (const std::string *)(reasonStrings + 24 * v41));
                    (*(void (**)(uint64_t, void **))(*(void *)v40 + 40))(v40, __p);
                    v17 = v190;
                    BOOL v42 = v37 == 17;
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)" since we have another ongoing call", 35);
                    *(unsigned char *)(v40 + 17) = 0;
                    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_69:
                    *(unsigned char *)(v40 + 17) = 0;
                    if (SHIBYTE(v202[0]) < 0) {
                      operator delete(__p[0]);
                    }
                    int v187 = 0;
                    goto LABEL_73;
                  }
                  if (v190)
                  {
                    if (!*(unsigned char *)(SipUserAgent::config(*((SipUserAgent **)v190 + 18)) + 456))
                    {
                      uint64_t v170 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
                      (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v170);
                      uint64_t v171 = ImsOutStream::operator<<(v170, "not terminating registration due to ");
                      int v172 = *((_DWORD *)v31 + 10);
                      if (v172 > 37) {
                        int v172 = 10;
                      }
                      LoggableString::LoggableString((std::string *)__p, (const std::string *)(reasonStrings + 24 * v172));
                      (*(void (**)(uint64_t, void **))(*(void *)v171 + 40))(v171, __p);
                      v17 = v190;
                      BOOL v42 = v37 == 17;
                      uint64_t v40 = ImsOutStream::operator<<(v171, " since this is a secondary device");
                      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      goto LABEL_69;
                    }
                    if (v37 == 17 && ims::AccessNetwork::isNR((ims::AccessNetwork *)((char *)v190 + 3160)))
                    {
                      uint64_t v74 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
                      (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v74);
                      uint64_t v75 = ImsOutStream::operator<<(v74, "triggering registration termination for EPSFB due to ");
                      int v76 = *((_DWORD *)v31 + 10);
                      if (v76 > 37) {
                        int v76 = 10;
                      }
LABEL_354:
                      LoggableString::LoggableString((std::string *)__p, (const std::string *)(reasonStrings + 24 * v76));
                      (*(void (**)(uint64_t, void **))(*(void *)v75 + 40))(v75, __p);
                      v17 = v190;
                      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v75 + 64))(v75, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      *(unsigned char *)(v75 + 17) = 0;
                      if (SHIBYTE(v202[0]) < 0) {
                        operator delete(__p[0]);
                      }
                      BOOL v42 = 0;
                      int v187 = 1;
                      goto LABEL_73;
                    }
                    if (*((unsigned char *)v190 + 1120))
                    {
                      uint64_t v164 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
                      (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v164);
                      uint64_t v165 = ImsOutStream::operator<<(v164, "not terminating registration due to ");
                      int v166 = *((_DWORD *)v31 + 10);
                      if (v166 > 37) {
                        int v166 = 10;
                      }
                      LoggableString::LoggableString((std::string *)__p, (const std::string *)(reasonStrings + 24 * v166));
                      (*(void (**)(uint64_t, void **))(*(void *)v165 + 40))(v165, __p);
                      v17 = v190;
                      BOOL v42 = v37 == 17;
                      uint64_t v40 = ImsOutStream::operator<<(v165, " since CSFB is disabled");
                      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      goto LABEL_69;
                    }
                    if (!*(unsigned char *)(SipUserAgent::config(*((SipUserAgent **)v190 + 18)) + 1120))
                    {
                      uint64_t v180 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
                      (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v180);
                      uint64_t v181 = ImsOutStream::operator<<(v180, "not terminating registration due to ");
                      int v182 = *((_DWORD *)v31 + 10);
                      if (v182 > 37) {
                        int v182 = 10;
                      }
                      LoggableString::LoggableString((std::string *)__p, (const std::string *)(reasonStrings + 24 * v182));
                      (*(void (**)(uint64_t, void **))(*(void *)v181 + 40))(v181, __p);
                      v17 = v190;
                      BOOL v42 = v37 == 17;
                      uint64_t v40 = ImsOutStream::operator<<(v181, " since our prefs say not to");
                      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      goto LABEL_69;
                    }
                    if (*((void *)this + 65))
                    {
                      v175 = (ImsPrefs *)SipStack::prefs(v190);
                      EmergencyAnonymousAutomaticRedialKey = (void **)ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(v175);
                      if (ImsPrefs::BOOLValue(v175, EmergencyAnonymousAutomaticRedialKey))
                      {
                        uint64_t v177 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
                        (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v177);
                        uint64_t v178 = ImsOutStream::operator<<(v177, "not terminating registration due to ");
                        int v179 = *((_DWORD *)v31 + 10);
                        if (v179 > 37) {
                          int v179 = 10;
                        }
                        LoggableString::LoggableString((std::string *)__p, (const std::string *)(reasonStrings + 24 * v179));
                        (*(void (**)(uint64_t, void **))(*(void *)v178 + 40))(v178, __p);
                        v17 = v190;
                        BOOL v42 = v37 == 17;
                        uint64_t v40 = ImsOutStream::operator<<(v178, " since automatic emergency redial is enabled");
                        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                        goto LABEL_69;
                      }
                    }
                    if (!*((unsigned char *)v190 + 3708))
                    {
                      uint64_t v183 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
                      (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v183);
                      uint64_t v184 = ImsOutStream::operator<<(v183, "not terminating registration due to ");
                      int v185 = *((_DWORD *)v31 + 10);
                      if (v185 > 37) {
                        int v185 = 10;
                      }
                      LoggableString::LoggableString((std::string *)__p, (const std::string *)(reasonStrings + 24 * v185));
                      (*(void (**)(uint64_t, void **))(*(void *)v184 + 40))(v184, __p);
                      v17 = v190;
                      BOOL v42 = v37 == 17;
                      uint64_t v40 = ImsOutStream::operator<<(v184, " since no legacy RAT types are available");
                      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      goto LABEL_69;
                    }
                  }
                  uint64_t v75 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
                  (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v75);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v75 + 8), (uint64_t)"triggering registration termination due to ", 43);
                  *(unsigned char *)(v75 + 17) = 0;
                  int v76 = *((_DWORD *)v31 + 10);
                  if (v76 > 37) {
                    int v76 = 10;
                  }
                  goto LABEL_354;
                }
LABEL_72:
                int v187 = 0;
                BOOL v42 = v189;
                v17 = v190;
LABEL_73:
                int v29 = *((_DWORD *)v12 + 2);
                BOOL v189 = v42;
                goto LABEL_74;
              }
              unsigned int v32 = v10;
              *(void *)&long long v205 = 0;
              long long v203 = 0u;
              *(_OWORD *)v204 = 0u;
              memset(v202, 0, sizeof(v202));
              *(_OWORD *)__p = 0u;
              SipResponse::SipResponse((SipResponse *)__p, v30[6]);
              if (v190)
              {
                uint64_t v33 = *((void *)v190 + 18);
                uint64_t v35 = *(void *)(v33 + 248);
                v34 = *(std::__shared_weak_count **)(v33 + 256);
                if (v34) {
                  atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (*((char *)v31 + 87) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&v224, (const std::string::value_type *)v31[8], (std::string::size_type)v31[9]);
                }
                else
                {
                  long long v224 = *((_OWORD *)v31 + 4);
                  *(void *)&v225[0] = v31[10];
                }
                int v36 = SipRegistrationClient::disableIfInWrongCountry(v35, (uint64_t)__p, (const std::string *)&v224);
                if (SBYTE7(v225[0]) < 0) {
                  operator delete((void *)v224);
                }
                if (v34)
                {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
                  if ((v36 & 1) == 0) {
                    goto LABEL_56;
                  }
                  goto LABEL_55;
                }
                if (v36)
                {
LABEL_55:
                  v12[144] = 0;
                  SipTransportLayer::removeConnections(*((SipTransportLayer **)v190 + 20), 0, 1, 1);
                }
              }
LABEL_56:
              __p[0] = &unk_1F20DD488;
              if (SBYTE7(v205) < 0) {
                operator delete(v204[0]);
              }
              SipMessage::~SipMessage((SipMessage *)__p);
              unsigned int v10 = v32;
              goto LABEL_59;
            }
            v188 = v15;
            uint64_t v19 = *((void *)this + 45);
            int v20 = *(_DWORD *)(v18 + 88);
            std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
            BOOL v21 = SipResponseCodeMap::containsResponseCodeForMethod(v19 + 1232, __p, v20, 0);
            if (SHIBYTE(v202[0]) < 0) {
              operator delete(__p[0]);
            }
            if (v21)
            {
              if (!v12[146] || *((void *)this + 65)) {
                goto LABEL_25;
              }
              if (!ims::AccessNetwork::isNR((ims::AccessNetwork *)(v19 + 3160)))
              {
                v17 = (SipStack *)v19;
                goto LABEL_37;
              }
              if (*(unsigned char *)(v19 + 3224)) {
                goto LABEL_25;
              }
              std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
              BOOL v168 = SipResponseCodeMap::containsResponseCodeForMethod(v19 + 1264, __p, v20, 0);
              if (SHIBYTE(v202[0]) < 0) {
                operator delete(__p[0]);
              }
              if (!v168)
              {
LABEL_25:
                v17 = (SipStack *)v19;
LABEL_37:
                v16 = v188;
                goto LABEL_38;
              }
              uint64_t v169 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
              (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v169);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v169 + 8), (uint64_t)"disallowing redial because of RedialNRSANonEmBlockedResponses", 61);
              *(unsigned char *)(v169 + 17) = 0;
              v28 = (unsigned char *)(v169 + 17);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v169 + 64))(v169, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            else
            {
              uint64_t v27 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
              (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v27);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"disallowing redial because response code not in silentRedialAllowedResponses", 76);
              *(unsigned char *)(v27 + 17) = 0;
              v28 = (unsigned char *)(v27 + 17);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            v17 = (SipStack *)v19;
            unsigned char *v28 = 0;
            v12[146] = 0;
            goto LABEL_37;
          case 24:
            uint64_t v167 = 241;
            if (!*((unsigned char *)this + 1496)) {
              uint64_t v167 = 242;
            }
            int v26 = *(unsigned __int8 *)(v24 + v167);
            goto LABEL_324;
          case 29:
            int v26 = *(unsigned __int8 *)(v24 + 1122);
            goto LABEL_324;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      goto LABEL_16;
    }
  }
LABEL_141:
  if (*((unsigned char *)this + 1496) || *((unsigned char *)this + 1497) || (int v82 = *((_DWORD *)a2 + 2), v82 == 2) || v82 == 23)
  {
    v78 = (std::__shared_weak_count *)*((void *)this + 46);
    if (v78)
    {
      v79 = std::__shared_weak_count::lock(v78);
      if (v79)
      {
        uint64_t v80 = *((void *)this + 45);
        if (v80)
        {
          SipStack::handleCallEvent(*((SipStack **)this + 45), a2);
          int v81 = 1;
        }
        else
        {
          int v81 = 0;
        }
      }
      else
      {
        int v81 = 0;
        uint64_t v80 = 0;
      }
    }
    else
    {
      int v81 = 0;
      uint64_t v80 = 0;
      v79 = 0;
    }
    int v85 = *((_DWORD *)a2 + 2);
    if (v85 <= 21)
    {
      switch(v85)
      {
        case 2:
          *((unsigned char *)this + 1497) = 1;
          __p[0] = 0;
          __p[1] = 0;
          gettimeofday((timeval *)__p, 0);
          *((void *)this + 214) = 1000 * (uint64_t)__p[0] + SLODWORD(__p[1]) / 1000 + 2208988800000;
          uint64_t v87 = *((void *)this + 23);
          v86 = (std::__shared_weak_count *)*((void *)this + 24);
          if (v86)
          {
            atomic_fetch_add_explicit(&v86->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v86->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          if (v81 && *(_DWORD *)(v80 + 2676))
          {
            if (v86) {
              atomic_fetch_add_explicit(&v86->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            v229 = 0;
            v88 = operator new(0x20uLL);
            void *v88 = &unk_1F20C6378;
            v88[1] = this;
            v88[2] = v87;
            v88[3] = v86;
            v229 = v88;
            SipTimerContainer::startTimer((int8x8_t *)this + 27, (uint64_t)"AutoRingTimer");
            std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v228);
          }
          else
          {
            uint64_t v108 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
            (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v108);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v108 + 8), (uint64_t)"no auto-ring timer set", 22);
            *(unsigned char *)(v108 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v108 + 64))(v108, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v108 + 17) = 0;
          }
          if (*((unsigned char *)this + 1809))
          {
            dispatch_time_t v109 = dispatch_time(0, 500);
            v110 = sImsDispatchQueue;
            if (!sImsDispatchQueue)
            {
              v110 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
              sImsDispatchQueue = (uint64_t)v110;
            }
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 1174405120;
            block[2] = ___ZN9BambiCall16processCallEventEP14BambiCallEvent_block_invoke_68;
            block[3] = &__block_descriptor_tmp_71_2;
            block[4] = this;
            block[5] = v87;
            v192 = v86;
            if (v86) {
              atomic_fetch_add_explicit(&v86->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            dispatch_after(v109, v110, block);
            if (v192) {
              std::__shared_weak_count::__release_weak(v192);
            }
          }
          if (v86)
          {
            std::__shared_weak_count::__release_weak(v86);
            v100 = v86;
            goto LABEL_226;
          }
          goto LABEL_230;
        case 3:
          if (*(_DWORD *)(*((void *)this + 49) + 1396) == 2)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "ProvisionalResponse");
            BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, (std::string *)__p);
            goto LABEL_228;
          }
          goto LABEL_230;
        case 4:
          if (!*((void *)this + 212))
          {
            __p[0] = 0;
            __p[1] = 0;
            gettimeofday((timeval *)__p, 0);
            *((void *)this + 212) = 1000 * (uint64_t)__p[0] + SLODWORD(__p[1]) / 1000 + 2208988800000;
          }
          if (!*((void *)this + 213))
          {
            __p[0] = 0;
            __p[1] = 0;
            gettimeofday((timeval *)__p, 0);
            *((void *)this + 213) = 1000 * (uint64_t)__p[0] + SLODWORD(__p[1]) / 1000 + 2208988800000;
          }
          v92 = (std::__shared_weak_count *)*((void *)this + 46);
          if (v92)
          {
            v92 = std::__shared_weak_count::lock(v92);
            v93 = v92;
            if (v92) {
              v92 = (std::__shared_weak_count *)*((void *)this + 45);
            }
          }
          else
          {
            v93 = 0;
          }
          v116 = (ImsPrefs *)SipStack::prefs((SipStack *)v92);
          EnableRingbackAudioForTextCallsKey = (void **)ImsPrefs::getEnableRingbackAudioForTextCallsKey(v116);
          if (ImsPrefs::BOOLValue(v116, EnableRingbackAudioForTextCallsKey))
          {
            if (v93) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v93);
            }
          }
          else
          {
            if (*((unsigned char *)this + 752))
            {
              if (v93) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v93);
              }
              goto LABEL_230;
            }
            int v158 = *((unsigned __int8 *)this + 753);
            if (v93) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v93);
            }
            if (v158)
            {
LABEL_230:
              if (v10 != 14 && *((void *)this + 51))
              {
                uint64_t v111 = *((void *)this + 49);
                if (v111 && !(*(unsigned int (**)(uint64_t))(*(void *)v111 + 264))(v111))
                {
                  (*(void (**)(void, BambiCallEvent *))(**((void **)this + 51) + 16))(*((void *)this + 51), a2);
                }
                else
                {
                  uint64_t v112 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
                  (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))(v5, v112);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v112 + 8), (uint64_t)"call ended while processing ", 28);
                  *(unsigned char *)(v112 + 17) = 0;
                  (*(void (**)(void **__return_ptr, BambiCallEvent *))(*(void *)a2 + 24))(__p, a2);
                  (*(void (**)(uint64_t, void **))(*(void *)v112 + 40))(v112, __p);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v112 + 8), (uint64_t)" event", 6);
                  *(unsigned char *)(v112 + 17) = 0;
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v112 + 64))(v112, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(unsigned char *)(v112 + 17) = 0;
                  if (SHIBYTE(v202[0]) < 0)
                  {
                    operator delete(__p[0]);
                    if (!v79) {
                      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v198);
                    }
                    goto LABEL_239;
                  }
                }
              }
              goto LABEL_238;
            }
          }
          if (*(_DWORD *)(*((void *)this + 49) + 1396) == 2)
          {
            if (*((_DWORD *)this + 114) != 4)
            {
              uint64_t v118 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
              (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v118);
              v119 = (unsigned char *)ImsOutStream::operator<<(v118, "early media is enforced. Activating session for network ringback tone.");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v119 + 64))(v119, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v119[17] = 0;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "Ringing");
            BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, (std::string *)__p);
            if (SHIBYTE(v202[0]) < 0) {
              operator delete(__p[0]);
            }
            if (*((_DWORD *)this + 114) == 4)
            {
              uint64_t v120 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
              (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v120);
              v121 = (unsigned char *)ImsOutStream::operator<<(v120, "early media is enforced. Activating session and starting local ringback tone.");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v121 + 64))(v121, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v121[17] = 0;
              uint64_t v122 = *((void *)this + 25);
              uint64_t v123 = *(void *)(v122 + 1912);
              if (v123)
              {
                uint64_t v124 = v122 + 1912;
                uint64_t v125 = v122 + 1912;
                do
                {
                  int v126 = *(_DWORD *)(v123 + 32);
                  BOOL v127 = v126 < 2;
                  if (v126 >= 2) {
                    v128 = (uint64_t *)v123;
                  }
                  else {
                    v128 = (uint64_t *)(v123 + 8);
                  }
                  if (!v127) {
                    uint64_t v125 = v123;
                  }
                  uint64_t v123 = *v128;
                }
                while (*v128);
                if (v125 != v124 && *(int *)(v125 + 32) <= 2)
                {
                  uint64_t v129 = *(void *)(v125 + 40);
                  if (v129)
                  {
LABEL_265:
                    (*(void (**)(void, void))(**((void **)this + 47) + 40))(*((void *)this + 47), *(void *)(v129 + 32));
                    goto LABEL_230;
                  }
                }
              }
            }
          }
          else
          {
            uint64_t v130 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
            (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v130);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v130 + 8), (uint64_t)"early media is not enforced. Starting local ringback tone.", 58);
            *(unsigned char *)(v130 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v130 + 64))(v130, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v130 + 17) = 0;
            uint64_t v131 = *((void *)this + 25);
            uint64_t v132 = *(void *)(v131 + 1912);
            if (v132)
            {
              uint64_t v133 = v131 + 1912;
              uint64_t v134 = v131 + 1912;
              do
              {
                int v135 = *(_DWORD *)(v132 + 32);
                BOOL v136 = v135 < 2;
                if (v135 >= 2) {
                  v137 = (uint64_t *)v132;
                }
                else {
                  v137 = (uint64_t *)(v132 + 8);
                }
                if (!v136) {
                  uint64_t v134 = v132;
                }
                uint64_t v132 = *v137;
              }
              while (*v137);
              if (v134 != v133 && *(int *)(v134 + 32) <= 2)
              {
                uint64_t v129 = *(void *)(v134 + 40);
                if (v129) {
                  goto LABEL_265;
                }
              }
            }
          }
          goto LABEL_230;
        case 7:
          if (*(_DWORD *)(*((void *)this + 49) + 1396) == 2)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "CallIsBeingForwarded");
            BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, (std::string *)__p);
            goto LABEL_228;
          }
          v114 = (std::__shared_weak_count *)*((void *)this + 46);
          if (v114)
          {
            v114 = std::__shared_weak_count::lock(v114);
            v115 = v114;
            if (v114) {
              v114 = (std::__shared_weak_count *)*((void *)this + 45);
            }
          }
          else
          {
            v115 = 0;
          }
          v144 = (ImsPrefs *)SipStack::prefs((SipStack *)v114);
          StopLocalRingbackToneOn181Key = (void **)ImsPrefs::getStopLocalRingbackToneOn181Key(v144);
          int v146 = ImsPrefs::BOOLValue(v144, StopLocalRingbackToneOn181Key);
          if (v115) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v115);
          }
          v147 = *(uint64_t (**)(char *))(*(void *)v5 + 64);
          if (v146)
          {
            uint64_t v148 = v147((char *)this + 80);
            (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v148);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v148 + 8), (uint64_t)"Received a 181, stopping local ringback tone", 44);
            *(unsigned char *)(v148 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v148 + 64))(v148, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v148 + 17) = 0;
            uint64_t v149 = *((void *)this + 25);
            uint64_t v150 = *(void *)(v149 + 1912);
            if (v150)
            {
              uint64_t v151 = v149 + 1912;
              uint64_t v152 = v149 + 1912;
              do
              {
                int v153 = *(_DWORD *)(v150 + 32);
                BOOL v154 = v153 < 2;
                if (v153 >= 2) {
                  v155 = (uint64_t *)v150;
                }
                else {
                  v155 = (uint64_t *)(v150 + 8);
                }
                if (!v154) {
                  uint64_t v152 = v150;
                }
                uint64_t v150 = *v155;
              }
              while (*v155);
              if (v152 != v151 && *(int *)(v152 + 32) <= 2)
              {
                uint64_t v156 = *(void *)(v152 + 40);
                if (v156) {
                  (*(void (**)(void, void))(**((void **)this + 47) + 48))(*((void *)this + 47), *(void *)(v156 + 32));
                }
              }
            }
          }
          else
          {
            uint64_t v157 = v147((char *)this + 80);
            (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v157);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v157 + 8), (uint64_t)"Received a 181, not stopping local ringback tone", 48);
            *(unsigned char *)(v157 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v157 + 64))(v157, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v157 + 17) = 0;
          }
          goto LABEL_230;
        case 8:
          if (!*((void *)this + 212))
          {
            __p[0] = 0;
            __p[1] = 0;
            gettimeofday((timeval *)__p, 0);
            *((void *)this + 212) = 1000 * (uint64_t)__p[0] + SLODWORD(__p[1]) / 1000 + 2208988800000;
          }
          if (*(_DWORD *)(*((void *)this + 49) + 1396) == 2)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "SessionProgress");
            BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, (std::string *)__p);
            goto LABEL_228;
          }
          goto LABEL_230;
        case 9:
          uint64_t v94 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
          (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v94);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v94 + 8), (uint64_t)"confirmed session with ", 23);
          *(unsigned char *)(v94 + 17) = 0;
          (*(void (**)(char *, uint64_t))(*((void *)this + 131) + 40))((char *)this + 1048, v94);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v94 + 64))(v94, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v94 + 17) = 0;
          if (v81)
          {
            SipUserAgent::transportLayer(*(SipUserAgent **)(v80 + 144), &v224);
            uint64_t v95 = v224;
            std::string::basic_string[abi:ne180100]<0>(__p, "successful call");
            SipTransportLayer::resetTransportErrors(v95, (const std::string *)__p);
            if (SHIBYTE(v202[0]) < 0) {
              operator delete(__p[0]);
            }
            if (*((void *)&v224 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v224 + 1));
            }
          }
          *((void *)this + 54) = time(0);
          __p[0] = 0;
          __p[1] = 0;
          gettimeofday((timeval *)__p, 0);
          *((void *)this + 218) = 1000 * (uint64_t)__p[0] + SLODWORD(__p[1]) / 1000 + 2208988800000;
          uint64_t v96 = *((void *)this + 25);
          if (v96) {
            SDPSession::enableRTCPBandwidthSpecifiers(v96);
          }
          if (!v81 || !*(unsigned char *)(v80 + 2673))
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "SessionConfirmed");
            BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, (std::string *)__p);
            goto LABEL_228;
          }
          uint64_t v98 = *((void *)this + 23);
          v97 = (std::__shared_weak_count *)*((void *)this + 24);
          if (v97) {
            atomic_fetch_add_explicit(&v97->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v99 = BambiCall::bambiClient(this);
          LoggableString::LoggableString((LoggableString *)__p, "activateMediaSession");
          v193[0] = MEMORY[0x1E4F143A8];
          v193[1] = 1174405120;
          v193[2] = ___ZN9BambiCall16processCallEventEP14BambiCallEvent_block_invoke;
          v193[3] = &__block_descriptor_tmp_65_1;
          v193[4] = this;
          v193[5] = v98;
          v194 = v97;
          if (v97) {
            atomic_fetch_add_explicit(&v97->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, void **, void *))(*(void *)v99 + 208))(v99, __p, v193);
          if (SHIBYTE(v202[0]) < 0) {
            operator delete(__p[0]);
          }
          if (v194) {
            std::__shared_weak_count::__release_weak(v194);
          }
          if (v97)
          {
            v100 = v97;
LABEL_226:
            std::__shared_weak_count::__release_weak(v100);
          }
          goto LABEL_230;
        default:
          goto LABEL_230;
      }
    }
    switch(v85)
    {
      case 22:
        if (*((void *)this + 49))
        {
          if (v101)
          {
            v102 = SipMessage::header<SipMinSEHeader>((uint64_t)v101 + 40);
            uint64_t v103 = *(void *)v5;
            if (!v102)
            {
              uint64_t v91 = (*(uint64_t (**)(char *))(v103 + 56))((char *)this + 80);
              (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))(v5, v91);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v91 + 8), (uint64_t)"no Min-SE header in Interval Too Small response", 47);
              *(unsigned char *)(v91 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v91 + 64))(v91, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_308:
              *(unsigned char *)(v91 + 17) = 0;
              if (!v79) {
                return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v198);
              }
              goto LABEL_239;
            }
            uint64_t v104 = (*(uint64_t (**)(char *))(v103 + 64))((char *)this + 80);
            (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v104);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v104 + 8), (uint64_t)"received 422 response for initial invite.  Starting over in new dialog with Min-SE = ", 85);
            *(unsigned char *)(v104 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v104 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v104 + 64))(v104, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v104 + 17) = 0;
            memset(v225, 0, sizeof(v225));
            v105 = (const BambiCallOptions *)(*((void *)this + 49) + 792);
            long long v224 = 0u;
            BambiCallOptions::BambiCallOptions((BambiCallOptions *)&v224, v105);
            uint64_t v223 = 0;
            long long v221 = 0u;
            long long v222 = 0u;
            long long v219 = 0u;
            long long v220 = 0u;
            long long v217 = 0u;
            long long v218 = 0u;
            long long v215 = 0u;
            long long v216 = 0u;
            long long v213 = 0u;
            long long v214 = 0u;
            long long v211 = 0u;
            long long v212 = 0u;
            long long v209 = 0u;
            long long v210 = 0u;
            long long v207 = 0u;
            long long v208 = 0u;
            long long v205 = 0u;
            long long v206 = 0u;
            long long v203 = 0u;
            *(_OWORD *)v204 = 0u;
            memset(v202, 0, sizeof(v202));
            *(_OWORD *)__p = 0u;
            SipUri::SipUri((SipUri *)__p, (BambiCall *)((char *)this + 1048));
            DWORD1(v225[1]) = v102[26];
            BambiCall::initializeMobileOriginated(this, (const SipUri *)__p, (const BambiCallOptions *)&v224, (uint64_t)v226);
            ImsResult::~ImsResult((ImsResult *)v226);
            if (BYTE2(v225[2])) {
              v106 = "InitialInvite";
            }
            else {
              v106 = "EmptyInvite";
            }
            SipSession::sendInvite(*((uint64_t **)this + 49), (uint64_t)v106, (ImsResult *)&v199);
            ImsResult::~ImsResult((ImsResult *)&v199);
            *((unsigned char *)this + 460) = 0;
            SipUri::~SipUri((SipUri *)__p);
            v107 = (void **)&v224;
LABEL_314:
            BambiCallOptions::~BambiCallOptions(v107);
            if (!v79) {
              return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v198);
            }
            goto LABEL_239;
          }
        }
        break;
      case 23:
        std::string::basic_string[abi:ne180100]<0>(__p, "PreconditionsSatisfied");
        BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, (std::string *)__p);
LABEL_228:
        if (SHIBYTE(v202[0]) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_230;
      case 32:
        if (*((void *)this + 49))
        {
          if (v89)
          {
            unsigned int v90 = *((_DWORD *)this + 453) + 1;
            *((_DWORD *)this + 453) = v90;
            if (v90 >= 4)
            {
              uint64_t v91 = (*(uint64_t (**)(char *))(*(void *)v5 + 56))((char *)this + 80);
              (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))(v5, v91);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v91 + 8), (uint64_t)"too many subsequent redirection requests.", 41);
              *(unsigned char *)(v91 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v91 + 64))(v91, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_308;
            }
            v138 = v89;
            unsigned int v139 = time(0);
            unsigned int v140 = v138[112];
            uint64_t v141 = *(void *)v5;
            if (v140 && v140 < v139)
            {
              uint64_t v91 = (*(uint64_t (**)(char *))(v141 + 56))((char *)this + 80);
              (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))(v5, v91);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v91 + 8), (uint64_t)"received session moved response to initial invite with expired contact.", 71);
              *(unsigned char *)(v91 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v91 + 64))(v91, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_308;
            }
            uint64_t v159 = (*(uint64_t (**)(char *))(v141 + 64))((char *)this + 80);
            (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v159);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v159 + 8), (uint64_t)"received session moved response for initial invite.  Redialing to new URI ", 74);
            *(unsigned char *)(v159 + 17) = 0;
            uint64_t v161 = *((void *)v138 + 5);
            v160 = (const SipUri *)(v138 + 10);
            (*(void (**)(const SipUri *, uint64_t))(v161 + 40))(v160, v159);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v159 + 64))(v159, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v159 + 17) = 0;
            long long v218 = 0u;
            long long v219 = 0u;
            long long v216 = 0u;
            long long v217 = 0u;
            long long v214 = 0u;
            long long v215 = 0u;
            long long v212 = 0u;
            long long v213 = 0u;
            long long v210 = 0u;
            long long v211 = 0u;
            long long v208 = 0u;
            long long v209 = 0u;
            long long v206 = 0u;
            long long v207 = 0u;
            *(_OWORD *)v204 = 0u;
            long long v205 = 0u;
            long long v203 = 0u;
            v162 = (const BambiCallOptions *)(*((void *)this + 49) + 792);
            *(_OWORD *)__p = 0u;
            memset(v202, 0, sizeof(v202));
            BambiCallOptions::BambiCallOptions((BambiCallOptions *)__p, v162);
            BambiCall::initializeMobileOriginated(this, v160, (const BambiCallOptions *)__p, (uint64_t)&v224);
            ImsResult::~ImsResult((ImsResult *)&v224);
            if (BYTE2(v202[4])) {
              v163 = "InitialInvite";
            }
            else {
              v163 = "EmptyInvite";
            }
            SipSession::sendInvite(*((uint64_t **)this + 49), (uint64_t)v163, (ImsResult *)v226);
            ImsResult::~ImsResult((ImsResult *)v226);
            *((unsigned char *)this + 460) = 0;
            v107 = __p;
            goto LABEL_314;
          }
        }
        break;
      default:
        goto LABEL_230;
    }
LABEL_238:
    if (!v79) {
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v198);
    }
LABEL_239:
    std::__shared_weak_count::__release_shared[abi:ne180100](v79);
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v198);
  }
  uint64_t v83 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v83);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v83 + 8), (uint64_t)"suppressing call event ", 23);
  *(unsigned char *)(v83 + 17) = 0;
  (*(void (**)(BambiCallEvent *, uint64_t))(*(void *)a2 + 16))(a2, v83);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v83 + 8), (uint64_t)" for hidden call ", 17);
  *(unsigned char *)(v83 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)__p, (const std::string *)((char *)this + 472));
  (*(void (**)(uint64_t, void **))(*(void *)v83 + 56))(v83, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v83 + 64))(v83, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v83 + 17) = 0;
  if (SHIBYTE(v202[3]) < 0) {
    operator delete(v202[1]);
  }
  if (SHIBYTE(v202[0]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v84 = *((void *)this + 51);
  if (v84) {
    (*(void (**)(uint64_t, BambiCallEvent *))(*(void *)v84 + 288))(v84, a2);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v198);
}

void sub_1C5391930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::activateAllMediaSessionIfAppropriate(uint64_t a1, std::string *a2)
{
  uint64_t v2 = *(void *)(a1 + 200);
  if (!v2) {
    return 0;
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  v15 = &unk_1F20B2680;
  v16 = &_bambiDomain;
  uint64_t v17 = 0;
  v3 = *(void **)(v2 + 1904);
  uint64_t v4 = (void *)(v2 + 1912);
  if (v3 != (void *)(v2 + 1912))
  {
    while (1)
    {
      int v7 = BambiCall::activateMediaSessionIfAppropriate(a1, v3[5], a2);
      long long v26 = 0uLL;
      *((void *)&v25 + 1) = 0;
      BOOL v21 = &unk_1F20B2680;
      v22 = &_bambiDomain;
      int v8 = v7 ? 0 : 0x40000000;
      int v23 = v8;
      *(void *)&long long v25 = 0;
      long long v24 = 0uLL;
      ImsResult::operator=((uint64_t)&v15, (uint64_t)&v21);
      ImsResult::~ImsResult((ImsResult *)&v21);
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      BOOL v21 = &unk_1F20B2680;
      v22 = &_bambiDomain;
      int v23 = 0;
      if (v16 != &_bambiDomain) {
        break;
      }
      int v9 = v17;
      ImsResult::~ImsResult((ImsResult *)&v21);
      if (!v9)
      {
        unsigned int v10 = (void *)v3[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            unsigned int v10 = (void *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (void *)v3[2];
            BOOL v12 = *v11 == (void)v3;
            v3 = v11;
          }
          while (!v12);
        }
        v3 = v11;
        if (v11 != v4) {
          continue;
        }
      }
      goto LABEL_17;
    }
    ImsResult::~ImsResult((ImsResult *)&v21);
  }
LABEL_17:
  uint64_t v13 = (*(unsigned int (**)(uint64_t *, void))(*v16 + 24))(v16, v17) ^ 1;
  ImsResult::~ImsResult((ImsResult *)&v15);
  return v13;
}

void sub_1C5391E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN9BambiCall16processCallEventEP14BambiCallEvent_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "DeferredSessionConfirmed");
        BambiCall::activateAllMediaSessionIfAppropriate(v3, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5391EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void ___ZN9BambiCall16processCallEventEP14BambiCallEvent_block_invoke_68(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (BambiCall *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5]) {
        BambiCall::textSessionDetected(v3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5391F8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiCall::internalStart(BambiCall *this@<X0>, uint64_t a2@<X8>)
{
  v18.tv_sec = 0;
  *(void *)&v18.tv_usec = 0;
  gettimeofday(&v18, 0);
  *((void *)this + 214) = 1000 * v18.tv_sec + v18.tv_usec / 1000 + 2208988800000;
  *((void *)this + 212) = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 49);
      if (v6)
      {
        uint64_t v7 = *((void *)this + 45);
        if (v7)
        {
          ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(*(void *)(v7 + 144) + 656), 24, (std::string *)&v18);
          std::string::operator=((std::string *)(v6 + 1408), (const std::string *)&v18);
          if (SBYTE7(v19) < 0) {
            operator delete((void *)v18.tv_sec);
          }
          uint64_t v8 = *((void *)this + 49);
          int v9 = *(SipDialog **)(v8 + 248);
          unsigned int v10 = *(std::__shared_weak_count **)(v8 + 256);
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          SipDialog::updateLocalUri(v9);
          if (v10) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          }
        }
      }
    }
  }
  else
  {
    v5 = 0;
  }
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  timeval v18 = (timeval)0;
  long long v19 = 0u;
  v17[0] = 0;
  v17[1] = 0;
  BambiCall::initializeMediaForSession((uint64_t)&v18, (uint64_t)this, v17);
  if ((*(unsigned int (**)(void, void))(**(void **)&v18.tv_usec + 24))(*(void *)&v18.tv_usec, v19))
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    v12[0] = &unk_1F20B2680;
    v12[1] = &_bambiDomain;
    int v13 = 1073741826;
    v11 = (const std::string *)ImsResult::operator<<<char [26]>((uint64_t)v12, "No media session for call");
    ims::result::resultWithCause(v11, (const ImsResult *)&v18, (uint64_t)v17);
  }
  ImsResult::ImsResult(a2, (uint64_t)&v18);
  ImsResult::~ImsResult((ImsResult *)&v18);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C53921AC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [26]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C53922AC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void BambiCall::detachSipSession(BambiCall *this)
{
  if (*((void *)this + 49))
  {
    uint64_t v2 = (void *)((char *)this + 392);
    uint64_t v3 = (void *)((char *)this + 80);
    uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
    (*(void (**)(void *, uint64_t))(*v3 + 16))(v3, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"detaching SipSession", 20);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    uint64_t v5 = v3[39];
    uint64_t v6 = *(std::__shared_weak_count **)(v5 + 784);
    *(_OWORD *)(v5 + 776) = 0u;
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 50);
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    LoggableString::LoggableString((LoggableString *)__p, "Session");
    (*(void (**)(BambiCall *, void **))(*(void *)this + 40))(this, __p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C5392434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCall::shouldFakeLocalQOS(BambiCall *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 45);
      if (v5)
      {
        if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v5 + 3160))
          && *(unsigned char *)(BambiCall::bambiClient(this) + 234))
        {
          uint64_t v7 = *((void *)this + 10);
          uint64_t v6 = (char *)this + 80;
          uint64_t v8 = (*(uint64_t (**)(char *))(v7 + 64))(v6);
          (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"faking QoS indication for WiFi call", 35);
          *(unsigned char *)(v8 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v8 + 17) = 0;
LABEL_7:
          uint64_t v9 = 1;
          goto LABEL_22;
        }
        if (!*(unsigned char *)(v5 + 2636))
        {
          unint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          unsigned int v10 = *(long long **)(BambiCall::bambiClient(this) + 336);
          if (v10)
          {
            do
            {
              std::vector<std::shared_ptr<IpAddress> const,std::allocator<std::shared_ptr<IpAddress> const>>::push_back[abi:ne180100](&v28, v10 + 1);
              unsigned int v10 = *(long long **)v10;
            }
            while (v10);
            unint64_t v12 = v28;
            uint64_t v11 = v29;
            while (v12 != v11)
            {
              int v13 = (std::__shared_weak_count *)*((void *)this + 24);
              if (!v13 || (uint64_t v14 = *((void *)this + 23), (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
                std::__throw_bad_weak_ptr[abi:ne180100]();
              }
              uint64_t v16 = *(void *)v12;
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
              if (v16 != v14 && *(void *)(*(void *)v12 + 392) && *(unsigned char *)(*(void *)v12 + 463))
              {
                uint64_t v22 = *((void *)this + 10);
                long long v21 = (char *)this + 80;
                uint64_t v23 = (*(uint64_t (**)(char *))(v22 + 64))(v21);
                (*(void (**)(char *, uint64_t))(*(void *)v21 + 16))(v21, v23);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"QoS already established for call ", 33);
                *(unsigned char *)(v23 + 17) = 0;
                ObfuscatedString::ObfuscatedString((uint64_t)v24, (const std::string *)(*(void *)v12 + 472));
                (*(void (**)(uint64_t, void **))(*(void *)v23 + 56))(v23, v24);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)". Faking QoS indication.", 24);
                *(unsigned char *)(v23 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v23 + 17) = 0;
                if (v27 < 0) {
                  operator delete(__p);
                }
                if (v25 < 0) {
                  operator delete(v24[0]);
                }
                v24[0] = &v28;
                std::vector<std::shared_ptr<BambiCallAction>>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
                goto LABEL_7;
              }
              v12 += 16;
            }
          }
          uint64_t v18 = *((void *)this + 10);
          uint64_t v17 = (char *)this + 80;
          uint64_t v19 = (*(uint64_t (**)(char *))(v18 + 64))(v17);
          (*(void (**)(char *, uint64_t))(*(void *)v17 + 16))(v17, v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"no existing calls with QoS established", 38);
          *(unsigned char *)(v19 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v19 + 17) = 0;
          v24[0] = &v28;
          std::vector<std::shared_ptr<BambiCallAction>>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
        }
      }
      uint64_t v9 = 0;
LABEL_22:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      return v9;
    }
  }
  return 0;
}

void sub_1C5392804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a10 = (void **)&a16;
  std::vector<std::shared_ptr<BambiCallAction>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

double BambiCall::ring@<D0>(int8x8_t *this@<X0>, uint64_t a2@<X8>)
{
  SipTimerContainer::cancelTimer(this + 27, (std::string *)"AutoRingTimer");
  uint64_t v4 = (int8x8_t *)this[49];
  if (v4)
  {
    SipSession::sendRingingNotification(v4, a2);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 1073741826;
  }
  return result;
}

void BambiCall::answer(std::string *a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::operator=(a1 + 40, a2);
  size = (std::__shared_weak_count *)a1[15].__r_.__value_.__l.__size_;
  if (!size)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = std::__shared_weak_count::lock(size);
  if (!v6 || (std::string::pointer data = a1[15].__r_.__value_.__l.__data_) == 0)
  {
LABEL_7:
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0x40000000;
    if (!v6) {
      return;
    }
    goto LABEL_8;
  }
  uint64_t v8 = *((void *)data + 364);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v9, &a1[7].__r_.__value_.__r.__words[2]);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 128))(v8, &v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1C53929E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::answerFromHandler@<X0>(BambiCall *this@<X0>, uint64_t a2@<X8>)
{
  memset(v10, 0, sizeof(v10));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v8, (void *)this + 23);
  long long v9 = v8;
  long long v8 = 0uLL;
  LoggableString::LoggableString((LoggableString *)&__p, "answerFromHandler");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v10, (std::__shared_weak_count **)&v9, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"BambiCall::answerFromHandler", 28);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v5 = (SipSessionTimer **)*((void *)this + 49);
  if (v5)
  {
    SipSession::acceptInvitation(v5, (ImsResult *)a2);
  }
  else
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 1073741826;
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v10);
}

void sub_1C5392BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, char a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::endWithReason(BambiCall *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BambiCall::terminationReason((uint64_t)a1, a2, (BambiCallTerminationReason *)v5);
  BambiCall::endWithReason(a1, (const BambiCallTerminationReason *)v5, a3);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
}

void sub_1C5392C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BambiCallTerminationReason::~BambiCallTerminationReason((BambiCallTerminationReason *)va);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::endWithReason@<X0>(BambiCall *this@<X0>, const BambiCallTerminationReason *a2@<X1>, uint64_t a3@<X8>)
{
  memset(v27, 0, sizeof(v27));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v25, (void *)this + 23);
  long long v26 = v25;
  long long v25 = 0uLL;
  LoggableString::LoggableString((LoggableString *)&__p, "endWithReason");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v27, (std::__shared_weak_count **)&v26, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"BambiCall::endWithReason", 24);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (*((void *)this + 49))
  {
    SipTimerContainer::cancelTimer((int8x8_t *)this + 27, (std::string *)"MediaTimeoutDeferTimer");
    uint64_t v7 = *((unsigned __int8 *)a2 + 31);
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *((void *)a2 + 2);
    }
    if (v7 == 5
      && (v8 >= 0 ? (char v9 = (char *)a2 + 8) : (char v9 = (char *)*((void *)a2 + 1)),
          (int v10 = *(_DWORD *)v9, v11 = v9[4], v10 == *(_DWORD *)"SRVCC")
        ? (BOOL v12 = v11 == str_7_10[4])
        : (BOOL v12 = 0),
          v12))
    {
      *(void *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      BambiCall::silentHangUp((uint64_t)this, *((_DWORD *)a2 + 16), (ImsResult *)a3);
      uint64_t v16 = (RTPManager *)*((void *)this + 47);
      if (v16) {
        RTPManager::srvccHandoverCompleted(v16);
      }
      uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 46);
      if (v17)
      {
        uint64_t v18 = std::__shared_weak_count::lock(v17);
        if (v18)
        {
          uint64_t v19 = v18;
          long long v20 = (SipStack *)*((void *)this + 45);
          if (v20) {
            SipStack::handleSRVCCRequested(v20);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
      }
    }
    else
    {
      SipSession::hangUp(*((SipSession **)this + 49), a3);
    }
  }
  else
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741826;
    int v13 = (ImsResult *)ImsResult::operator<<<char [15]>((uint64_t)&__p, "no SIP session");
    uint64_t v14 = ImsLogContainer::logResult((BambiCall *)((char *)this + 80), v13);
    ImsResult::ImsResult((ImsResult *)a3, (const std::string *)v14);
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v27);
}

void sub_1C5392F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  ImsResult::~ImsResult(v25);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v27 - 96);
  _Unwind_Resume(a1);
}

void BambiCall::terminationReason(uint64_t a1@<X0>, uint64_t a2@<X1>, BambiCallTerminationReason *a3@<X8>)
{
  uint64_t v5 = *(BambiCallTerminationReasons **)(a1 + 368);
  if (v5
    && (uint64_t v5 = (BambiCallTerminationReasons *)std::__shared_weak_count::lock((std::__shared_weak_count *)v5)) != 0
    && (uint64_t v7 = *(void *)(a1 + 360),
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5),
        v7))
  {
    int v8 = *(std::__shared_weak_count **)(a1 + 368);
    if (v8)
    {
      int v8 = std::__shared_weak_count::lock(v8);
      char v9 = v8;
      if (v8) {
        int v8 = *(std::__shared_weak_count **)(a1 + 360);
      }
    }
    else
    {
      char v9 = 0;
    }
    SipStack::callTerminationReason((uint64_t)v8, a2, a3);
    if (v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  else
  {
    int v10 = BambiCallTerminationReasons::defaultReason(v5);
    BambiCallTerminationReason::BambiCallTerminationReason(a3, (const BambiCallTerminationReason *)v10);
  }
}

void sub_1C5393090(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::silentHangUp(uint64_t a1@<X0>, int a2@<W1>, ImsResult *a3@<X8>)
{
  uint64_t v5 = *(SipSession **)(a1 + 392);
  if (v5)
  {
    SipSession::silentHangUp(v5, a2, (uint64_t)a3);
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    v8[0] = &unk_1F20B2680;
    v8[1] = &_bambiDomain;
    int v9 = 1073741826;
    uint64_t v6 = (ImsResult *)ImsResult::operator<<<char [15]>((uint64_t)v8, "no SIP session");
    uint64_t v7 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 80), v6);
    ImsResult::ImsResult(a3, (const std::string *)v7);
    ImsResult::~ImsResult((ImsResult *)v8);
  }
}

void sub_1C5393170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void BambiCall::suspendWithMediaError(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  v16[4] = *MEMORY[0x1E4F143B8];
  if ((*(char *)(a1 + 1695) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 1695)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (!*(void *)(a1 + 1680))
  {
LABEL_3:
    uint64_t v6 = a1 + 80;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 48))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(a1 + 80, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Continuing SIP session despite media timeout ", 45);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(void *)v7 + 32))(v7, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    std::string::operator=((std::string *)(a1 + 1672), a2);
  }
LABEL_4:
  uint64_t v9 = *(void *)(a1 + 184);
  int v8 = *(std::__shared_weak_count **)(a1 + 192);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v10 = *(std::__shared_weak_count **)(a1 + 368);
  if (v10)
  {
    long long v10 = std::__shared_weak_count::lock(v10);
    long long v11 = v10;
    if (v10) {
      long long v10 = *(std::__shared_weak_count **)(a1 + 360);
    }
  }
  else
  {
    long long v11 = 0;
  }
  long long v12 = (ImsPrefs *)SipStack::prefs((SipStack *)v10);
  EmergencyMediaTimeoutDeferalTimerSecondsKey = (void **)ImsPrefs::getEmergencyMediaTimeoutDeferalTimerSecondsKey(v12);
  int v14 = ImsPrefs::intValue(v12, EmergencyMediaTimeoutDeferalTimerSecondsKey);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v14)
  {
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    long long v15 = operator new(0x20uLL);
    void *v15 = &unk_1F20C63F8;
    v15[1] = a1;
    v15[2] = v9;
    v15[3] = v8;
    v16[3] = v15;
    SipTimerContainer::startTimer((int8x8_t *)(a1 + 216), (uint64_t)"MediaTimeoutDeferTimer");
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v16);
  }
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  if (v8)
  {
    std::__shared_weak_count::__release_weak(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1C5393410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

void BambiCall::deferredEndWithReason(BambiCall *this, uint64_t a2)
{
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x4002000000;
  v9[3] = __Block_byref_object_copy__2;
  v9[4] = __Block_byref_object_dispose__2;
  memset(&v10, 0, sizeof(v10));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v10 = *(std::string *)a2;
  }
  uint64_t v3 = *((void *)this + 24);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = BambiCall::bambiClient(this);
  LoggableString::LoggableString((LoggableString *)__p, "deferredHangup");
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v5, (void *)this + 23);
  v7[0] = v5;
  v7[1] = v6;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  BambiClient::performBlock(v4, (uint64_t)__p, (uint64_t)v7);
}

void sub_1C5393668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  _Block_object_dispose(&a28, 8);
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void ___ZN9BambiCall21deferredEndWithReasonERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    uint64_t v3 = (BambiCall *)a1[5];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[6])
      {
        BambiCall::endWithReason(v3, *(void *)(a1[4] + 8) + 40, (uint64_t)v6);
        ImsResult::~ImsResult((ImsResult *)v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5393788(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c33_ZTSNSt3__18weak_ptrI9BambiCallEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c33_ZTSNSt3__18weak_ptrI9BambiCallEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

BOOL BambiCall::senderIsPrivate(BambiCall *this)
{
  uint64_t v1 = *((void *)this + 49);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 248);
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 256);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2)
  {
    uint64_t v4 = *((void *)this + 49);
    uint64_t v6 = *(void *)(v4 + 248);
    uint64_t v5 = *(std::__shared_weak_count **)(v4 + 256);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v7 = *(unsigned __int8 *)(v6 + 1872) != 0;
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      if (!v3) {
        return v7;
      }
    }
    else
    {
      BOOL v7 = *(unsigned __int8 *)(v6 + 1872) != 0;
      if (!v3) {
        return v7;
      }
    }
    goto LABEL_10;
  }
  BOOL v7 = 0;
  if (v3) {
LABEL_10:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v7;
}

ImsOutStream *BambiCall::printCallInfo(BambiCall *this, ImsOutStream *a2, int a3)
{
  uint64_t v6 = *((void *)this + 49);
  if (v6) {
    (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v6 + 248))(v6, a2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Local Hold State: ", 20);
  *((unsigned char *)a2 + 17) = 0;
  int v7 = *((_DWORD *)this + 112);
  if (v7 == 3)
  {
    v26.__r_.__value_.__r.__words[2] = 0x400000000000000;
    int v8 = "held";
  }
  else if (v7 == 2)
  {
    v26.__r_.__value_.__r.__words[2] = 0x700000000000000;
    int v8 = "holding";
  }
  else if (v7)
  {
    v26.__r_.__value_.__r.__words[2] = 0x700000000000000;
    int v8 = "resumed";
  }
  else
  {
    v26.__r_.__value_.__r.__words[2] = 0x800000000000000;
    int v8 = "resuming";
  }
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
  LoggableString::LoggableString(&__p, &v26);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  media direction:    ", 22);
  *((unsigned char *)a2 + 17) = 0;
  ims::toString<MediaDirection>((unsigned int *)this + 113, &v26);
  LoggableString::LoggableString(&__p, &v26);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Created:        ", 18);
  *((unsigned char *)a2 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 53), (uint64_t)a2, v9);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (*((void *)this + 54))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Confirmed:      ", 18);
    *((unsigned char *)a2 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 54), (uint64_t)a2, v10);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
  uint64_t v11 = *((void *)this + 25);
  if (v11)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v20 = &unk_1F20B2680;
    long long v21 = &_bambiDomain;
    uint64_t v22 = 0;
    long long v12 = *(void **)(v11 + 1904);
    int v13 = (void *)(v11 + 1912);
    if (v12 != (void *)(v11 + 1912))
    {
      while (1)
      {
        uint64_t v14 = v12[5];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Media Session:  ", 18);
        *((unsigned char *)a2 + 17) = 0;
        std::ostream::operator<<();
        *((unsigned char *)a2 + 17) = 0;
        (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *((unsigned char *)a2 + 17) = 0;
        if (a3 && *(void *)(v14 + 32))
        {
          *(_OWORD *)&v26.__r_.__value_.__l.__data_ = 0uLL;
          BambiCall::localSdp(this, (uint64_t *)&v26);
          if (v26.__r_.__value_.__r.__words[0])
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  SDP:", 6);
            *((unsigned char *)a2 + 17) = 0;
            (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *((unsigned char *)a2 + 17) = 0;
            (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *((unsigned char *)a2 + 17) = 0;
            (*(void (**)(std::string::size_type, ImsOutStream *))(*(void *)v26.__r_.__value_.__l.__data_
                                                                           + 16))(v26.__r_.__value_.__r.__words[0], a2);
            (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *((unsigned char *)a2 + 17) = 0;
          }
          if (v26.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v26.__r_.__value_.__l.__size_);
          }
        }
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
        LODWORD(__p.__r_.__value_.__r.__words[2]) = 0;
        ImsResult::operator=((uint64_t)&v20, (uint64_t)&__p);
        ImsResult::~ImsResult((ImsResult *)&__p);
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
        LODWORD(__p.__r_.__value_.__r.__words[2]) = 0;
        if (v21 != &_bambiDomain) {
          break;
        }
        int v15 = v22;
        ImsResult::~ImsResult((ImsResult *)&__p);
        if (!v15)
        {
          uint64_t v16 = (void *)v12[1];
          if (v16)
          {
            do
            {
              uint64_t v17 = v16;
              uint64_t v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              uint64_t v17 = (void *)v12[2];
              BOOL v18 = *v17 == (void)v12;
              long long v12 = v17;
            }
            while (!v18);
          }
          long long v12 = v17;
          if (v17 != v13) {
            continue;
          }
        }
        goto LABEL_38;
      }
      ImsResult::~ImsResult((ImsResult *)&__p);
    }
LABEL_38:
    ImsResult::~ImsResult((ImsResult *)&v20);
  }
  return a2;
}

void sub_1C5393E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCall::checkForActivate(BambiCall *this, unsigned int a2, int a3)
{
  uint64_t v5 = (SDPSession *)*((void *)this + 25);
  if (!v5 || (SDPSession::hasStream(v5) & 1) == 0)
  {
    if (!a3) {
      return 0;
    }
    uint64_t v15 = *((void *)this + 10);
    uint64_t v14 = (char *)this + 80;
    uint64_t v16 = (*(uint64_t (**)(char *))(v15 + 56))(v14);
    (*(void (**)(char *, uint64_t))(*(void *)v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"checkForActivate: no media session for call ", 44);
    *(unsigned char *)(v16 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v39, (const std::string *)(v14 + 392));
    (*(void (**)(uint64_t, void **))(*(void *)v16 + 56))(v16, v39);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_15:
    *(unsigned char *)(v16 + 17) = 0;
    goto LABEL_16;
  }
  int v7 = (SipSession *)*((void *)this + 49);
  if (!v7)
  {
    if (!a3) {
      return 0;
    }
    uint64_t v18 = *((void *)this + 10);
    uint64_t v17 = (char *)this + 80;
    uint64_t v16 = (*(uint64_t (**)(char *))(v18 + 56))(v17);
    (*(void (**)(char *, uint64_t))(*(void *)v17 + 16))(v17, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"checkForActivate: no SIP session for call ", 42);
    *(unsigned char *)(v16 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v39, (const std::string *)(v17 + 392));
    (*(void (**)(uint64_t, void **))(*(void *)v16 + 56))(v16, v39);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_15;
  }
  if ((SipSession::confirmed(v7) & 1) == 0)
  {
    if (a3)
    {
      uint64_t v20 = *((void *)this + 10);
      uint64_t v19 = (char *)this + 80;
      uint64_t v10 = (*(uint64_t (**)(char *))(v20 + 64))(v19);
      (*(void (**)(char *, uint64_t))(*(void *)v19 + 16))(v19, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"checkForActivate: session ", 26);
      *(unsigned char *)(v10 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v39, (const std::string *)(v19 + 392));
      (*(void (**)(uint64_t, void **))(*(void *)v10 + 56))(v10, v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" is not confirmed, so call can't be made ", 41);
      *(unsigned char *)(v10 + 17) = 0;
      if (a2) {
        uint64_t v11 = "active";
      }
      else {
        uint64_t v11 = "inactive";
      }
      long long v12 = *(void **)(v10 + 8);
      if (a2) {
        uint64_t v13 = 6;
      }
      else {
        uint64_t v13 = 8;
      }
      goto LABEL_29;
    }
    return 0;
  }
  if ((*(unsigned int (**)(void))(**((void **)this + 49) + 264))(*((void *)this + 49)))
  {
    if (a3)
    {
      uint64_t v9 = *((void *)this + 10);
      int v8 = (char *)this + 80;
      uint64_t v10 = (*(uint64_t (**)(char *))(v9 + 64))(v8);
      (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))(v8, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"checkForActivate: session ", 26);
      *(unsigned char *)(v10 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v39, (const std::string *)(v8 + 392));
      (*(void (**)(uint64_t, void **))(*(void *)v10 + 56))(v10, v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" is terminated, so call can't be made ", 38);
      *(unsigned char *)(v10 + 17) = 0;
      if (a2) {
        uint64_t v11 = "active";
      }
      else {
        uint64_t v11 = "inactive";
      }
      long long v12 = *(void **)(v10 + 8);
      if (a2) {
        uint64_t v13 = 6;
      }
      else {
        uint64_t v13 = 8;
      }
LABEL_29:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v11, v13);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
LABEL_16:
      if (v42 < 0) {
        operator delete(__p);
      }
LABEL_18:
      if (SHIBYTE(v40) < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
    return 0;
  }
  if (SipSession::terminating(*((SipSession **)this + 49)))
  {
    if (a3)
    {
      uint64_t v22 = *((void *)this + 10);
      long long v21 = (char *)this + 80;
      uint64_t v23 = (*(uint64_t (**)(char *))(v22 + 64))(v21);
      (*(void (**)(char *, uint64_t))(*(void *)v21 + 16))(v21, v23);
      uint64_t v24 = ImsOutStream::operator<<(v23, "checkForActivate: session ");
      ObfuscatedString::ObfuscatedString((uint64_t)v39, (const std::string *)(v21 + 392));
      (*(void (**)(uint64_t, void **))(*(void *)v24 + 56))(v24, v39);
      uint64_t v25 = ImsOutStream::operator<<(v24, " is terminating, so call can't be made ");
      if (a2) {
        std::string v26 = "active";
      }
      else {
        std::string v26 = "inactive";
      }
      uint64_t v27 = (unsigned char *)ImsOutStream::operator<<(v25, v26);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v27[17] = 0;
      ims::AccessNetwork::~AccessNetwork(v39);
    }
    return 0;
  }
  uint64_t result = ((*((_DWORD *)this + 112) & 0xFFFFFFFE) != 2) ^ a2;
  if (((((*((_DWORD *)this + 112) & 0xFFFFFFFE) != 2) ^ a2) & 1) == 0 && a3)
  {
    uint64_t v30 = *((void *)this + 10);
    long long v29 = (_DWORD *)((char *)this + 80);
    uint64_t v31 = (*(uint64_t (**)(_DWORD *))(v30 + 64))(v29);
    (*(void (**)(_DWORD *, uint64_t))(*(void *)v29 + 16))(v29, v31);
    uint64_t v32 = ImsOutStream::operator<<(v31, "checkForActivate: already ");
    uint64_t v33 = v32;
    int v34 = v29[92];
    if (v34 == 3)
    {
      uint64_t v40 = 0x400000000000000;
      uint64_t v35 = "held";
    }
    else if (v34 == 2)
    {
      uint64_t v40 = 0x700000000000000;
      uint64_t v35 = "holding";
    }
    else if (v34)
    {
      uint64_t v40 = 0x700000000000000;
      uint64_t v35 = "resumed";
    }
    else
    {
      uint64_t v40 = 0x800000000000000;
      uint64_t v35 = "resuming";
    }
    *(_OWORD *)uint64_t v39 = *(_OWORD *)v35;
    (*(void (**)(uint64_t, void **))(*(void *)v32 + 32))(v32, v39);
    uint64_t v36 = ImsOutStream::operator<<(v33, ", so call can't be made ");
    if (a2) {
      int v37 = "active";
    }
    else {
      int v37 = "inactive";
    }
    uint64_t v38 = (unsigned char *)ImsOutStream::operator<<(v36, v37);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v38[17] = 0;
    goto LABEL_18;
  }
  return result;
}

void sub_1C5394648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::performLocalHold(BambiCall *this)
{
  if (BambiCall::checkForActivate(this, 0, 1))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 46);
    if (v2)
    {
      uint64_t v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t v5 = *((void *)this + 45);
        if (v5)
        {
          uint64_t v6 = *(void *)(v5 + 2912);
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v7, (void *)this + 23);
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 104))(v6, &v7);
          if (v8) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
    }
  }
}

void sub_1C5394730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void BambiCall::performLocalResume(BambiCall *this)
{
  if (BambiCall::checkForActivate(this, 1u, 1))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 46);
    if (v2)
    {
      uint64_t v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t v5 = *((void *)this + 45);
        if (v5)
        {
          uint64_t v6 = *(void *)(v5 + 2912);
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v7, (void *)this + 23);
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 112))(v6, &v7);
          if (v8) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
    }
  }
}

void sub_1C5394804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void BambiCall::performLocalHoldFromHandler(BambiCall *this)
{
  uint64_t v2 = (SipSession *)*((void *)this + 49);
  if (!v2
    || !SipSession::confirmed(v2)
    || (uint64_t v3 = (SipSession *)*((void *)this + 49)) != 0
    && (SipSession::terminating(v3)
     || (uint64_t v4 = *((void *)this + 49)) != 0
     && ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 264))(v4) & 1) != 0)
    || (SDPSession::hasStream(*((SDPSession **)this + 25)) & 1) != 0)
  {
    uint64_t v5 = BambiCall::checkForActivate(this, 0, 1);
    if ((v5 & 1) == 0)
    {
      uint64_t v18 = *((void *)this + 23);
      uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 24);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = BambiCall::bambiClient(this);
      LoggableString::LoggableString((LoggableString *)&v39, "localHoldNoOpBlock");
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v35, (void *)this + 23);
      v37[0] = v35;
      v37[1] = v36;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v28 = MEMORY[0x1E4F143A8];
      uint64_t v29 = 1174405120;
      uint64_t v30 = ___ZN9BambiCall27performLocalHoldFromHandlerEv_block_invoke;
      uint64_t v31 = &__block_descriptor_tmp_109;
      uint64_t v32 = this;
      uint64_t v33 = v18;
      int v34 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      BambiClient::performBlock(v19, (uint64_t)&v39, (uint64_t)v37);
    }
    uint64_t v6 = *((void *)this + 25);
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v22 = &unk_1F20B2680;
    uint64_t v23 = &_bambiDomain;
    uint64_t v24 = 0;
    uint64_t v7 = *(void **)(v6 + 1904);
    int v8 = (void *)(v6 + 1912);
    if (v7 != (void *)(v6 + 1912))
    {
      while (1)
      {
        uint64_t v9 = *((void *)this + 47);
        uint64_t v10 = *(void *)(v7[5] + 32);
        unsigned int v11 = capabilities::radio::mav20Plus((capabilities::radio *)v5) ? 2 : 4;
        RTPManager::deactivateSessionWithId(v9, v10, v11);
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        uint64_t v39 = &unk_1F20B2680;
        uint64_t v40 = &_bambiDomain;
        unsigned int v41 = 0;
        ImsResult::operator=((uint64_t)&v22, (uint64_t)&v39);
        ImsResult::~ImsResult((ImsResult *)&v39);
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        uint64_t v39 = &unk_1F20B2680;
        uint64_t v40 = &_bambiDomain;
        unsigned int v41 = 0;
        if (v23 != &_bambiDomain) {
          break;
        }
        int v13 = v24;
        ImsResult::~ImsResult(v12);
        if (!v13)
        {
          uint64_t v14 = (void *)v7[1];
          if (v14)
          {
            do
            {
              uint64_t v15 = v14;
              uint64_t v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              uint64_t v15 = (void *)v7[2];
              BOOL v16 = *v15 == (void)v7;
              uint64_t v7 = v15;
            }
            while (!v16);
          }
          uint64_t v7 = v15;
          if (v15 != v8) {
            continue;
          }
        }
        goto LABEL_28;
      }
      ImsResult::~ImsResult(v12);
    }
LABEL_28:
    ImsResult::~ImsResult((ImsResult *)&v22);
    if (*((void *)this + 49) && *((_DWORD *)this + 112) == 1 && !*(unsigned char *)(BambiCall::bambiClient(this) + 232))
    {
      SipSession::sendInvite(*((uint64_t **)this + 49), (uint64_t)"HoldInvite", (ImsResult *)&v39);
      char v20 = (*(uint64_t (**)(uint64_t *, void))(*v40 + 24))(v40, v41);
      ImsResult::~ImsResult((ImsResult *)&v39);
      if ((v20 & 1) == 0)
      {
        *((_DWORD *)this + 112) = 2;
        *((void *)this + 55) = time(0);
      }
    }
  }
  else
  {
    uint64_t v21 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 56))((char *)this + 80);
    (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"performLocalHold: we're confirmed but don't have a media session. Killing call object.", 86);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    BambiCall::silentHangUp((uint64_t)this, 18, (ImsResult *)v38);
    ImsResult::~ImsResult((ImsResult *)v38);
  }
}

void sub_1C5394C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27)
{
  ImsResult::~ImsResult((ImsResult *)(v27 - 160));
  _Unwind_Resume(a1);
}

void ___ZN9BambiCall27performLocalHoldFromHandlerEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(std::__shared_weak_count **)(v3 + 368);
        if (v6)
        {
          uint64_t v7 = std::__shared_weak_count::lock(v6);
          if (v7)
          {
            int v8 = v7;
            uint64_t v9 = *(void *)(v3 + 360);
            if (v9) {
              (*(void (**)(void))(**(void **)(v9 + 2912) + 136))(*(void *)(v9 + 2912));
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5394DCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiCall::performLocalResumeFromHandler(BambiCall *this)
{
  uint64_t v2 = (SipSession *)*((void *)this + 49);
  if (!v2
    || !SipSession::confirmed(v2)
    || (uint64_t v3 = (SipSession *)*((void *)this + 49)) != 0
    && (SipSession::terminating(v3)
     || (uint64_t v4 = *((void *)this + 49)) != 0
     && ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 264))(v4) & 1) != 0)
    || (SDPSession::hasStream(*((SDPSession **)this + 25)) & 1) != 0)
  {
    if ((BambiCall::checkForActivate(this, 1u, 1) & 1) == 0)
    {
      uint64_t v7 = *((void *)this + 23);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 24);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = BambiCall::bambiClient(this);
      LoggableString::LoggableString((LoggableString *)&__p, "localResumeNoOpBlock");
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v20, (void *)this + 23);
      v22[0] = v20;
      v22[1] = v21;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v13 = MEMORY[0x1E4F143A8];
      uint64_t v14 = 1174405120;
      uint64_t v15 = ___ZN9BambiCall29performLocalResumeFromHandlerEv_block_invoke;
      BOOL v16 = &__block_descriptor_tmp_114;
      uint64_t v17 = this;
      uint64_t v18 = v7;
      uint64_t v19 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      BambiClient::performBlock(v8, (uint64_t)&__p, (uint64_t)v22);
    }
    if (*((void *)this + 49) && *((_DWORD *)this + 112) == 3 && !*(unsigned char *)(BambiCall::bambiClient(this) + 232))
    {
      SipSession::sendInvite(*((uint64_t **)this + 49), (uint64_t)"ResumeInvite", (ImsResult *)&__p);
      char v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)v11 + 24))(v11, v12);
      ImsResult::~ImsResult((ImsResult *)&__p);
      if ((v5 & 1) == 0)
      {
        *((_DWORD *)this + 112) = 0;
        *((void *)this + 55) = 0;
      }
    }
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 56))((char *)this + 80);
    (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"performLocalResume: we're confirmed but don't have a media session. Killing call object.", 88);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    BambiCall::silentHangUp((uint64_t)this, 18, (ImsResult *)v23);
    ImsResult::~ImsResult((ImsResult *)v23);
  }
}

void sub_1C53950E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30)
{
}

void ___ZN9BambiCall29performLocalResumeFromHandlerEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      char v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(std::__shared_weak_count **)(v3 + 368);
        if (v6)
        {
          uint64_t v7 = std::__shared_weak_count::lock(v6);
          if (v7)
          {
            uint64_t v8 = v7;
            uint64_t v9 = *(void *)(v3 + 360);
            if (v9) {
              (*(void (**)(void))(**(void **)(v9 + 2912) + 144))(*(void *)(v9 + 2912));
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5395204(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiCall::localHoldFailed(BambiCall *this)
{
  *((_DWORD *)this + 112) = 1;
  *((unsigned char *)this + 1810) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "SessionHoldFailed");
  char v2 = BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, (std::string *)__p);
  char v3 = v2;
  if (SBYTE7(v13) < 0)
  {
    operator delete(__p[0]);
    if ((v3 & 1) == 0) {
      return;
    }
  }
  else if ((v2 & 1) == 0)
  {
    return;
  }
  if (*((void *)this + 51))
  {
    uint64_t v14 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v13 = 0u;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v10, (void *)this + 23);
    BambiCallEvent::BambiCallEvent((uint64_t)__p, 16, &v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    (*(void (**)(void, void **))(**((void **)this + 51) + 16))(*((void *)this + 51), __p);
    __p[0] = &unk_1F20B8640;
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v4)
  {
    char v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 45);
      if (v7) {
        (*(void (**)(void))(**(void **)(v7 + 2912) + 144))(*(void *)(v7 + 2912));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  if (*((void *)this + 51))
  {
    BambiCall::sendHoldResumeIndication(this, 0);
    uint64_t v14 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v13 = 0u;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v8, (void *)this + 23);
    BambiCallEvent::BambiCallEvent((uint64_t)__p, 11, &v8);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    (*(void (**)(void, void **))(**((void **)this + 51) + 16))(*((void *)this + 51), __p);
    __p[0] = &unk_1F20B8640;
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
}

void sub_1C5395410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::__shared_weak_count *a19)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

void BambiCall::localResumeFailed(BambiCall *this)
{
  if (*((void *)this + 51))
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    *(_OWORD *)uint64_t v11 = 0u;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v8, (void *)this + 23);
    BambiCallEvent::BambiCallEvent((uint64_t)&v10, 17, &v8);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    (*(void (**)(void, long long *))(**((void **)this + 51) + 16))(*((void *)this + 51), &v10);
    *(void *)&long long v10 = &unk_1F20B8640;
    if (v11[1]) {
      std::__shared_weak_count::__release_weak(v11[1]);
    }
  }
  char v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2)
  {
    char v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 45);
      if (v5) {
        (*(void (**)(void))(**(void **)(v5 + 2912) + 136))(*(void *)(v5 + 2912));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  if (*((void *)this + 51))
  {
    BambiCall::sendHoldResumeIndication(this, 1);
    uint64_t v12 = 0;
    long long v10 = 0u;
    *(_OWORD *)uint64_t v11 = 0u;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v6, (void *)this + 23);
    BambiCallEvent::BambiCallEvent((uint64_t)&v10, 13, &v6);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    (*(void (**)(void, long long *))(**((void **)this + 51) + 16))(*((void *)this + 51), &v10);
    *(void *)&long long v10 = &unk_1F20B8640;
    if (v11[1]) {
      std::__shared_weak_count::__release_weak(v11[1]);
    }
  }
  *((_DWORD *)this + 112) = 3;
}

void sub_1C5395620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void BambiCall::prepareCall(BambiCall *this)
{
  char v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2)
  {
    char v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 45);
      if (v5)
      {
        if (*((void *)this + 65))
        {
          uint64_t v6 = *(BambiEmergencyCallHandler **)(v5 + 4240);
          uint64_t v7 = *(std::__shared_weak_count **)(v5 + 4248);
          if (v7) {
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v8, (void *)this + 23);
          BambiEmergencyCallHandler::prepareCall(v6, &v8, (uint64_t)v10);
          ImsResult::~ImsResult((ImsResult *)v10);
          if (v9) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          }
          if (v7) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v7);
          }
        }
        else
        {
          *((unsigned char *)this + 465) = 1;
          (*(void (**)(void))(**(void **)(v5 + 2912) + 152))(*(void *)(v5 + 2912));
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C539574C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

double BambiCall::refer@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(uint64_t **)(a1 + 392);
  if (!v6) {
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)(*(void *)a2 + 392);
  if (!v8) {
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(v8 + 248);
  long long v10 = *(std::__shared_weak_count **)(v8 + 256);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (v11)
    {
      uint64_t v6 = *(uint64_t **)(a1 + 392);
      uint64_t v12 = *(void *)(*(void *)a2 + 392);
      uint64_t v14 = *(void *)(v12 + 248);
      long long v13 = *(std::__shared_weak_count **)(v12 + 256);
      uint64_t v19 = v14;
      uint64_t v20 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_9;
    }
LABEL_15:
    double result = 0.0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 1073741826;
    return result;
  }
  if (!v11) {
    goto LABEL_15;
  }
  uint64_t v19 = v11;
  uint64_t v20 = 0;
LABEL_9:
  uint64_t v15 = (std::__shared_weak_count *)a3[1];
  uint64_t v17 = *a3;
  uint64_t v18 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSession::refer(v6, &v19, (uint64_t)&v17, (ImsResult *)a4);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  return result;
}

void sub_1C53958CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCall::isWPSCall(BambiCall *this)
{
  char v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2)
  {
    char v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 45);
      if (v5)
      {
        uint64_t v6 = (ImsPrefs *)SipStack::prefs(*((SipStack **)this + 45));
        IgnoreWPSCallsOverNRKey = (void **)ImsPrefs::getIgnoreWPSCallsOverNRKey(v6);
        if (ImsPrefs::BOOLValue(v6, IgnoreWPSCallsOverNRKey))
        {
          if ((uint64_t v8 = *((void *)this + 49)) != 0 && *(unsigned char *)(v8 + 1758)
            || ims::AccessNetwork::isNR((ims::AccessNetwork *)(v5 + 3160)))
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v4);
            return 0;
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  memset(&__p, 0, sizeof(__p));
  BOOL isTelUri = SipUri::isTelUri((BambiCall *)((char *)this + 1048));
  uint64_t v11 = (char *)this + 1224;
  uint64_t v12 = 1176;
  if (isTelUri) {
    uint64_t v12 = 1224;
  }
  else {
    uint64_t v11 = (char *)this + 1176;
  }
  if (v11[23] < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)((char *)this + v12), *((void *)v11 + 1));
  }
  else {
    std::string __p = *(std::string *)v11;
  }
  p_p = &__p;
  int v14 = isPhoneNumber((unsigned __int8 *)&__p);
  char v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (v14)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else
    {
      int64_t size = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (size >= 4)
    {
      uint64_t v17 = (char *)p_p + size;
      uint64_t v18 = p_p;
      do
      {
        uint64_t v19 = (char *)memchr(v18, 42, size - 3);
        if (!v19) {
          break;
        }
        if (*(_DWORD *)v19 == 842478122)
        {
          if (v19 == v17 || v19 - (char *)p_p == -1) {
            break;
          }
          uint64_t v9 = 1;
          if ((v15 & 0x80) == 0) {
            return v9;
          }
          goto LABEL_31;
        }
        uint64_t v18 = (std::string *)(v19 + 1);
        int64_t size = v17 - (char *)v18;
      }
      while (v17 - (char *)v18 >= 4);
    }
  }
  uint64_t v9 = 0;
  if (v15 < 0) {
LABEL_31:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1C5395A8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiCall::notifyMergedCallInitialized(BambiCall *this)
{
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  long long v3 = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  long long v2 = 0uLL;
  BambiCallConferenceEvent::BambiCallConferenceEvent((uint64_t)&v3, 5, &v2);
  (*(void (**)(BambiCall *, long long *))(*(void *)this + 56))(this, &v3);
  *(void *)&long long v3 = &unk_1F20C3488;
  uint64_t v7 = (void **)v5 + 1;
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v7);
  *(void *)&long long v3 = &unk_1F20B8640;
  if (v4[1]) {
    std::__shared_weak_count::__release_weak(v4[1]);
  }
}

void sub_1C5395B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  BambiCallConferenceEvent::~BambiCallConferenceEvent((BambiCallConferenceEvent *)va);
  _Unwind_Resume(a1);
}

void BambiCall::setMediaSessionCreated(BambiCall *this)
{
  *((unsigned char *)this + 460) = 0;
  long long v2 = (SipSession *)*((void *)this + 49);
  if (!v2)
  {
    uint64_t v5 = *((void *)this + 10);
    uint64_t v4 = (char *)this + 80;
    uint64_t v6 = (*(uint64_t (**)(char *))(v5 + 56))(v4);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v6);
    uint64_t v7 = *(void **)(v6 + 8);
    uint64_t v8 = "BambiCall::setMediaSessionCreated, No SIP session";
    uint64_t v9 = 49;
LABEL_31:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    return;
  }
  if (SipSession::confirmed(v2)) {
    goto LABEL_30;
  }
  SipSession::clientInviteTransaction(*((SipSession **)this + 49), (uint64_t *)&v67);
  if (v67) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = *((unsigned char *)this + 1496) != 0;
  }
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  if (!v3)
  {
LABEL_30:
    uint64_t v23 = *((void *)this + 10);
    uint64_t v22 = (char *)this + 80;
    uint64_t v6 = (*(uint64_t (**)(char *))(v23 + 64))(v22);
    (*(void (**)(char *, uint64_t))(*(void *)v22 + 16))(v22, v6);
    uint64_t v7 = *(void **)(v6 + 8);
    uint64_t v8 = "BambiCall::setMediaSessionCreated() is being ignored";
    uint64_t v9 = 52;
    goto LABEL_31;
  }
  uint64_t v66 = 0;
  long long v65 = 0u;
  long long v64 = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v62, (void *)this + 23);
  BambiCallEvent::BambiCallEvent((uint64_t)&v64, 24, &v62);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  (*(void (**)(void, long long *))(**((void **)this + 51) + 16))(*((void *)this + 51), &v64);
  BambiCall::localSdp(this, (uint64_t *)&v67);
  long long v10 = v67;
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  if (!v10)
  {
    uint64_t v24 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 56))((char *)this + 80);
    (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"BambiCall::setMediaSessionCreated, No SDP for call", 50);
    *(unsigned char *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v24 + 17) = 0;
    uint64_t v25 = *((void *)this + 25);
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    int v56 = &unk_1F20B2680;
    v57 = &_bambiDomain;
    uint64_t v58 = 0;
    long long v26 = *(void **)(v25 + 1904);
    uint64_t v27 = (void *)(v25 + 1912);
    if (v26 != (void *)(v25 + 1912))
    {
      while (1)
      {
        uint64_t v28 = (unint64_t *)v26[5];
        RTPManager::terminateSessionWithId(*((RTPManager **)this + 47), v28[4]);
        uint64_t v29 = (void *)BambiCall::bambiClient(this);
        BambiClient::setMediaSessionIdForStream(v29, (BambiCallMediaStream *)v28, 0);
        long long v70 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        uint64_t v67 = &unk_1F20B2680;
        v68 = (std::__shared_weak_count *)&_bambiDomain;
        int v69 = 0;
        ImsResult::operator=((uint64_t)&v56, (uint64_t)&v67);
        ImsResult::~ImsResult((ImsResult *)&v67);
        long long v70 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        uint64_t v67 = &unk_1F20B2680;
        v68 = (std::__shared_weak_count *)&_bambiDomain;
        int v69 = 0;
        if (v57 != &_bambiDomain) {
          break;
        }
        int v31 = v58;
        ImsResult::~ImsResult(v30);
        if (!v31)
        {
          uint64_t v32 = (void *)v26[1];
          if (v32)
          {
            do
            {
              uint64_t v33 = v32;
              uint64_t v32 = (void *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              uint64_t v33 = (void *)v26[2];
              BOOL v21 = *v33 == (void)v26;
              long long v26 = v33;
            }
            while (!v21);
          }
          long long v26 = v33;
          if (v33 != v27) {
            continue;
          }
        }
        goto LABEL_57;
      }
      ImsResult::~ImsResult(v30);
    }
LABEL_57:
    uint64_t v40 = (ImsResult *)&v56;
    goto LABEL_64;
  }
  uint64_t v55 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  if (*((unsigned char *)this + 722)) {
    uint64_t v11 = "InitialInvite";
  }
  else {
    uint64_t v11 = "EmptyInvite";
  }
  SipSession::sendInvite(*((uint64_t **)this + 49), (uint64_t)v11, (ImsResult *)&v51);
  if ((*(uint64_t (**)(void, void))(**((void **)&v51 + 1) + 24))(*((void *)&v51 + 1), v52))
  {
    uint64_t v12 = (SDPSession *)*((void *)this + 25);
    if (SDPSession::hasStream(v12))
    {
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      uint64_t v45 = &unk_1F20B2680;
      uint64_t v46 = &_bambiDomain;
      uint64_t v47 = 0;
      long long v13 = (void *)*((void *)v12 + 238);
      int v14 = (void *)((char *)v12 + 1912);
      if (v13 != (void *)((char *)v12 + 1912))
      {
        while (1)
        {
          char v15 = (unint64_t *)v13[5];
          RTPManager::terminateSessionWithId(*((RTPManager **)this + 47), v15[4]);
          BOOL v16 = (void *)BambiCall::bambiClient(this);
          BambiClient::setMediaSessionIdForStream(v16, (BambiCallMediaStream *)v15, 0);
          long long v70 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          uint64_t v67 = &unk_1F20B2680;
          v68 = (std::__shared_weak_count *)&_bambiDomain;
          int v69 = 0;
          ImsResult::operator=((uint64_t)&v45, (uint64_t)&v67);
          ImsResult::~ImsResult((ImsResult *)&v67);
          long long v70 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          uint64_t v67 = &unk_1F20B2680;
          v68 = (std::__shared_weak_count *)&_bambiDomain;
          int v69 = 0;
          if (v46 != &_bambiDomain) {
            break;
          }
          int v18 = v47;
          ImsResult::~ImsResult(v17);
          if (!v18)
          {
            uint64_t v19 = (void *)v13[1];
            if (v19)
            {
              do
              {
                uint64_t v20 = v19;
                uint64_t v19 = (void *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                uint64_t v20 = (void *)v13[2];
                BOOL v21 = *v20 == (void)v13;
                long long v13 = v20;
              }
              while (!v21);
            }
            long long v13 = v20;
            if (v20 != v14) {
              continue;
            }
          }
          goto LABEL_62;
        }
        ImsResult::~ImsResult(v17);
      }
LABEL_62:
      ImsResult::~ImsResult((ImsResult *)&v45);
    }
    goto LABEL_63;
  }
  int v34 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v34)
  {
    uint64_t v35 = std::__shared_weak_count::lock(v34);
    if (v35)
    {
      uint64_t v36 = *((void *)this + 45);
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
  uint64_t v36 = 0;
LABEL_48:
  int v37 = (char *)this + 1576;
  std::string::operator=((std::string *)((char *)this + 1576), (const std::string *)(v36 + 3160));
  std::string::operator=((std::string *)((char *)this + 1600), (const std::string *)(v36 + 3184));
  long long v38 = *(_OWORD *)(v36 + 3208);
  *((unsigned char *)this + 1640) = *(unsigned char *)(v36 + 3224);
  *(_OWORD *)((char *)this + 1624) = v38;
  std::string::operator=((std::string *)((char *)this + 1504), (const std::string *)((char *)this + 1576));
  std::string::operator=((std::string *)((char *)this + 1528), (const std::string *)((char *)this + 1600));
  *((_OWORD *)this + 97) = *(_OWORD *)((char *)this + 1624);
  *((unsigned char *)this + 1568) = *((unsigned char *)this + 1640);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if ((*((char *)this + 1599) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 1599)) {
      goto LABEL_63;
    }
LABEL_54:
    if (*((char *)this + 1623) < 0) {
      uint64_t v39 = *((void *)this + 201);
    }
    else {
      uint64_t v39 = *((unsigned __int8 *)this + 1623);
    }
    if (v39)
    {
      uint64_t v42 = *((void *)this + 10);
      unsigned int v41 = (char *)this + 80;
      uint64_t v43 = (*(uint64_t (**)(char *))(v42 + 64))(v41);
      (*(void (**)(char *, uint64_t))(*(void *)v41 + 16))(v41, v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"starting MO call on access network ", 35);
      *(unsigned char *)(v43 + 17) = 0;
      long long v44 = (unsigned char *)ims::operator<<(v43, (uint64_t)v37);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v44[17] = 0;
    }
    goto LABEL_63;
  }
  if (*((void *)this + 198)) {
    goto LABEL_54;
  }
LABEL_63:
  uint64_t v40 = (ImsResult *)&v51;
LABEL_64:
  ImsResult::~ImsResult(v40);
  *(void *)&long long v64 = &unk_1F20B8640;
  if (*((void *)&v65 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v65 + 1));
  }
}

void sub_1C5396314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  *(void *)(v28 - 176) = &unk_1F20B8640;
  uint64_t v30 = *(std::__shared_weak_count **)(v28 - 152);
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::localSdp(BambiCall *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (SDPSession *)*((void *)this + 25);
  if (SDPSession::hasStream(v4))
  {
    unsigned int v5 = (*((_DWORD *)this + 112) & 0xFFFFFFFE) == 2;
    SDPSession::localSdp(v4, v5, a2);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void BambiCall::setMediaSessionConfigured(BambiCall *this)
{
  if (*((void *)this + 49))
  {
    uint64_t v9 = 0;
    long long v7 = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v5, (void *)this + 23);
    BambiCallEvent::BambiCallEvent((uint64_t)&v7, 27, &v5);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    (*(void (**)(void, long long *))(**((void **)this + 51) + 16))(*((void *)this + 51), &v7);
    *((unsigned char *)this + 461) = 1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "MediaConfigured");
    BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(void *)&long long v7 = &unk_1F20B8640;
    if (v8[1]) {
      std::__shared_weak_count::__release_weak(v8[1]);
    }
  }
  else
  {
    long long v2 = (char *)this + 80;
    uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 56))((char *)this + 80);
    (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"BambiCall::setMediaSessionConfigured, No SIP session", 52);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
  }
}

void sub_1C53965CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21) {
    std::__shared_weak_count::__release_weak(a21);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::handleMediaSessionActivated(BambiCall *this)
{
  uint64_t v6 = 0;
  long long v4 = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v2, (void *)this + 23);
  BambiCallEvent::BambiCallEvent((uint64_t)&v4, 25, &v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  (*(void (**)(void, long long *))(**((void **)this + 51) + 16))(*((void *)this + 51), &v4);
  *((unsigned char *)this + 1810) = 0;
  *(void *)&long long v4 = &unk_1F20B8640;
  if (v5[1]) {
    std::__shared_weak_count::__release_weak(v5[1]);
  }
}

void sub_1C53966D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::handleMediaSessionDeactivated(BambiCall *this)
{
  uint64_t v6 = 0;
  long long v4 = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v2, (void *)this + 23);
  BambiCallEvent::BambiCallEvent((uint64_t)&v4, 26, &v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  (*(void (**)(void, long long *))(**((void **)this + 51) + 16))(*((void *)this + 51), &v4);
  *(void *)&long long v4 = &unk_1F20B8640;
  if (v5[1]) {
    std::__shared_weak_count::__release_weak(v5[1]);
  }
}

void sub_1C53967C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCall::applyMediaSettingsUsingForkIfRequired(BambiCall *a1, BambiCallMediaStream *a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(SipOfferAnswer **)(*(void *)a3 + 656);
  uint64_t v9 = *(std::__shared_weak_count **)(*(void *)a3 + 664);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipOfferAnswer::local(v8, &v48);
  uint64_t v11 = *v48;
  long long v10 = (std::__shared_weak_count *)v48[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v12 = *(SipOfferAnswer **)(*(void *)a3 + 656);
  long long v13 = *(std::__shared_weak_count **)(*(void *)a3 + 664);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipOfferAnswer::remote(v12, &v48);
  uint64_t v15 = *v48;
  int v14 = (std::__shared_weak_count *)v48[1];
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v16 = *(void *)(*(void *)a3 + 656);
  uint64_t v17 = *(std::__shared_weak_count **)(*(void *)a3 + 664);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(void *)(v16 + 152);
  uint64_t v20 = *(void *)(v18 + 16);
  uint64_t v19 = *(std::__shared_weak_count **)(v18 + 24);
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v21 = *(void *)(v20 + 40) == *(void *)(v20 + 24);
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  else
  {
    BOOL v21 = *(void *)(v20 + 40) == *(void *)(v20 + 24);
  }
  int v43 = a4;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v21) {
    uint64_t v22 = v15;
  }
  else {
    uint64_t v22 = v11;
  }
  if (v21) {
    uint64_t v23 = v14;
  }
  else {
    uint64_t v23 = v10;
  }
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v14) {
    char v24 = v21;
  }
  else {
    char v24 = 1;
  }
  if (v21) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v15;
  }
  if (v24)
  {
    long long v26 = 0;
  }
  else
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v25 = v15;
    long long v26 = v14;
  }
  if (!*((void *)a2 + 4))
  {
    uint64_t v34 = *((void *)a1 + 10);
    uint64_t v33 = (void *)((char *)a1 + 80);
    uint64_t v35 = (*(uint64_t (**)(void *))(v34 + 48))(v33);
    (*(void (**)(void *, uint64_t))(*v33 + 16))(v33, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"applyMediaSettingsUsingForkIfRequired: media session not valid", 62);
    *(unsigned char *)(v35 + 17) = 0;
    uint64_t v36 = (unsigned char *)(v35 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_62;
  }
  if (!v11)
  {
    uint64_t v38 = *((void *)a1 + 10);
    int v37 = (void *)((char *)a1 + 80);
    uint64_t v39 = (*(uint64_t (**)(void *))(v38 + 56))(v37);
    (*(void (**)(void *, uint64_t))(*v37 + 16))(v37, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"applyMediaSettingsUsingForkIfRequired: no local SDP", 51);
    *(unsigned char *)(v39 + 17) = 0;
    uint64_t v36 = (unsigned char *)(v39 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_62;
  }
  uint64_t v42 = a2;
  uint64_t v28 = (void *)((char *)a1 + 80);
  uint64_t v27 = *((void *)a1 + 10);
  if (!v15)
  {
    uint64_t v40 = (*(uint64_t (**)(void *))(v27 + 56))((void *)a1 + 10);
    (*(void (**)(void *, uint64_t))(*v28 + 16))(v28, v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"applyMediaSettingsUsingForkIfRequired: no remote SDP", 52);
    *(unsigned char *)(v40 + 17) = 0;
    uint64_t v36 = (unsigned char *)(v40 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_62:
    uint64_t v32 = 0;
    *uint64_t v36 = 0;
    if (!v26) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  uint64_t v29 = (*(uint64_t (**)(void *))(v27 + 64))((void *)a1 + 10);
  (*(void (**)(void *, uint64_t))(*v28 + 16))((void *)a1 + 10, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"applyMediaSettingsUsingForkIfRequired: updating sdp for session", 63);
  *(unsigned char *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v29 + 17) = 0;
  uint64_t v30 = *((void *)a1 + 25);
  uint64_t v46 = v22;
  uint64_t v47 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v44 = v25;
  uint64_t v45 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SDPSession::handleOfferAnswer(v30, &v46, &v44, *(void *)(v11 + 144)) == 2) {
    int v31 = 1;
  }
  else {
    int v31 = v43;
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (v31) {
    BambiCall::updateMediaSettings(a1, v42);
  }
  uint64_t v32 = 1;
  if (v26) {
LABEL_63:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
LABEL_64:
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v32;
}

void sub_1C5396D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
    if (!v17)
    {
LABEL_5:
      if (!v16) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if (!v17)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  if (!v16)
  {
LABEL_6:
    if (!v15)
    {
LABEL_12:
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      _Unwind_Resume(exception_object);
    }
LABEL_11:
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    goto LABEL_12;
  }
LABEL_10:
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  if (!v15) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void SipOfferAnswer::local(SipOfferAnswer *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 19);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v5 = *(void *)(v4 + 16);
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void SipOfferAnswer::remote(SipOfferAnswer *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 19);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(v4 + 24);
  uint64_t v5 = *(void *)(v4 + 32);
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void BambiCall::updateMediaSettings(BambiCall *this, BambiCallMediaStream *a2)
{
  if (a2 && *((unsigned char *)this + 464))
  {
    if (BambiCall::shouldContinueUpdatingSession((SipSession **)this))
    {
      uint64_t v12 = 0;
      long long v13 = 0;
      SipSession::getMostRecentRemoteFork(*((SipSession **)this + 49), &v12);
      if (v12) {
        std::string::operator=((std::string *)((char *)this + 1024), (const std::string *)(v12 + 152));
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v4 = *((void *)this + 47);
      uint64_t v5 = *((void *)a2 + 4);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 26);
      uint64_t v10 = *((void *)this + 25);
      uint64_t v11 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RTPManager::updateSdpForSession(v4, v5, &v10, *((_DWORD *)this + 113));
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
    else
    {
      uint64_t v8 = *((void *)this + 10);
      long long v7 = (char *)this + 80;
      uint64_t v9 = (*(uint64_t (**)(char *))(v8 + 64))(v7);
      (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))(v7, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Skipped updating sdp for media session (", 40);
      *(unsigned char *)(v9 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v9 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)")", 1);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
    }
  }
}

void sub_1C5396FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::handleActiveForkChanged(uint64_t a1, std::string::size_type *a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 200);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  BOOL v21 = &unk_1F20B2680;
  uint64_t v22 = &_bambiDomain;
  uint64_t v23 = 0;
  uint64_t v5 = *(void **)(v4 + 1904);
  uint64_t v6 = (void *)(v4 + 1912);
  if (v5 != (void *)(v4 + 1912))
  {
    while (1)
    {
      uint64_t v9 = (BambiCallMediaStream *)v5[5];
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      __p.__r_.__value_.__r.__words[0] = *a2;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v11 = BambiCall::applyMediaSettingsUsingForkIfRequired((BambiCall *)a1, v9, (uint64_t)&__p, a3);
      long long v29 = 0uLL;
      *((void *)&v28 + 1) = 0;
      *(void *)uint64_t v27 = &unk_1F20B2680;
      *(void *)&v27[8] = &_bambiDomain;
      if (v11) {
        int v12 = 0;
      }
      else {
        int v12 = 0x40000000;
      }
      *(_DWORD *)&v27[16] = v12;
      *(void *)&v27[32] = 0;
      *(void *)&long long v28 = 0;
      *(void *)&v27[24] = 0;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      ImsResult::operator=((uint64_t)&v21, (uint64_t)v27);
      ImsResult::~ImsResult((ImsResult *)v27);
      *(_OWORD *)&v27[24] = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      *(void *)uint64_t v27 = &unk_1F20B2680;
      *(void *)&v27[8] = &_bambiDomain;
      *(_DWORD *)&v27[16] = 0;
      if (v22 != &_bambiDomain) {
        break;
      }
      int v13 = v23;
      ImsResult::~ImsResult((ImsResult *)v27);
      if (!v13)
      {
        int v14 = (void *)v5[1];
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            int v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v15 = (void *)v5[2];
            BOOL v16 = *v15 == (void)v5;
            uint64_t v5 = v15;
          }
          while (!v16);
        }
        uint64_t v5 = v15;
        if (v15 != v6) {
          continue;
        }
      }
      goto LABEL_19;
    }
    ImsResult::~ImsResult((ImsResult *)v27);
  }
LABEL_19:
  if (((*(uint64_t (**)(uint64_t *, void))(*v22 + 24))(v22, v23) & 1) == 0)
  {
    memset(v27, 0, sizeof(v27));
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v19, (void *)(a1 + 184));
    BambiCallEvent::BambiCallEvent((uint64_t)v27, 28, &v19);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    (*(void (**)(void, unsigned char *))(**(void **)(a1 + 408) + 16))(*(void *)(a1 + 408), v27);
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"handleActiveForkChanged", 23);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "ActiveForkChanged");
    BambiCall::activateAllMediaSessionIfAppropriate(a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(void *)uint64_t v27 = &unk_1F20B8640;
    if (*(void *)&v27[24]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v27[24]);
    }
  }
  ImsResult::~ImsResult((ImsResult *)&v21);
}

void sub_1C5397350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a26 = &unk_1F20B8640;
  if (a29) {
    std::__shared_weak_count::__release_weak(a29);
  }
  ImsResult::~ImsResult((ImsResult *)&a17);
  _Unwind_Resume(a1);
}

void BambiCall::terminationLocksReleased(BambiCall *this)
{
  uint64_t v2 = (void *)((char *)this + 80);
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(void *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"BambiCall::terminationLocksReleased()", 37);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  uint64_t v4 = v2[41];
  if (v4)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v34, (void *)this + 23);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 192))(v4, &v34);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      long long v7 = v6;
      uint64_t v8 = (void *)*((void *)this + 45);
      if (v8)
      {
        if (*((void *)this + 65))
        {
          uint64_t v9 = (BambiEmergencyCallHandler *)v8[530];
          uint64_t v10 = (std::__shared_weak_count *)v8[531];
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v32, (void *)this + 23);
          BambiEmergencyCallHandler::handleCallInvalidated(v9, &v32);
          if (v33) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          }
          if (v10) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          }
        }
        uint64_t v11 = v8[364];
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v30, (void *)this + 23);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 168))(v11, &v30);
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  uint64_t v12 = *((void *)this + 25);
  if (v12)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v24 = &unk_1F20B2680;
    long long v25 = &_bambiDomain;
    uint64_t v26 = 0;
    int v13 = *(void **)(v12 + 1904);
    int v14 = (void *)(v12 + 1912);
    if (v13 != (void *)(v12 + 1912))
    {
      while (1)
      {
        uint64_t v15 = (BambiCallMediaStream *)v13[5];
        BOOL v16 = (BambiClient *)BambiCall::bambiClient(this);
        BambiClient::invalidateStream(v16, v15);
        long long v39 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        uint64_t v36 = &unk_1F20B2680;
        int v37 = &_bambiDomain;
        int v38 = 0;
        ImsResult::operator=((uint64_t)&v24, (uint64_t)&v36);
        ImsResult::~ImsResult((ImsResult *)&v36);
        long long v39 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        uint64_t v36 = &unk_1F20B2680;
        int v37 = &_bambiDomain;
        int v38 = 0;
        if (v25 != &_bambiDomain) {
          break;
        }
        int v17 = v26;
        ImsResult::~ImsResult((ImsResult *)&v36);
        if (!v17)
        {
          uint64_t v18 = (void *)v13[1];
          if (v18)
          {
            do
            {
              uint64_t v19 = v18;
              uint64_t v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              uint64_t v19 = (void *)v13[2];
              BOOL v20 = *v19 == (void)v13;
              int v13 = v19;
            }
            while (!v20);
          }
          int v13 = v19;
          if (v19 != v14) {
            continue;
          }
        }
        goto LABEL_29;
      }
      ImsResult::~ImsResult((ImsResult *)&v36);
    }
LABEL_29:
    ImsResult::~ImsResult((ImsResult *)&v24);
  }
  BOOL v21 = (void *)BambiCall::bambiClient(this);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v22, (void *)this + 23);
  BambiClient::invalidateCall(v21, &v22);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
}

void sub_1C5397748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

void BambiCall::loggableName(BambiCall *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C5397910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a18);
  _Unwind_Resume(a1);
}

void BambiCall::logPrefix(BambiCall *this, ImsOutStream *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 45);
      if (v6)
      {
        (*(void (**)(void **__return_ptr))(*(void *)v6 + 104))(v9);
        (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" [", 2);
        *((unsigned char *)a2 + 17) = 0;
        (*(void (**)(void **__return_ptr, BambiCall *))(*(void *)this + 24))(__p, this);
        (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"]: ", 3);
        *((unsigned char *)a2 + 17) = 0;
        if (v8 < 0) {
          operator delete(__p[0]);
        }
        if (v10 < 0) {
          operator delete(v9[0]);
        }
LABEL_12:
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        return;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  (*(void (**)(void **__return_ptr, BambiCall *))(*(void *)this + 24))(v9, this);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v5) {
    goto LABEL_12;
  }
}

void sub_1C5397B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'BambiCall::logPrefix(BambiCall *this, ImsOutStream *a2)
{
}

uint64_t BambiCall::handleInitializationFailure(BambiCall *this)
{
  memset(v8, 0, sizeof(v8));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v6, (void *)this + 23);
  long long v7 = v6;
  long long v6 = 0uLL;
  LoggableString::LoggableString((LoggableString *)&__p, "handleInitializationFailure");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v8, (std::__shared_weak_count **)&v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 56))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"BambiCall::handleInitializationFailure", 38);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = (SipSession *)*((void *)this + 49);
  if (v3)
  {
    SipSession::handleInitializationFailure(v3);
    BambiCall::detachSipSession(this);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v8);
}

void sub_1C5397D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, char a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::createLocalSdpForFork(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 200);
  unsigned int v5 = *(_DWORD *)(a1 + 448) & 0xFFFFFFFE;
  long long v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  char v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SDPSession::createLocalSdpForFork(v4, v5 == 2, &v7, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C5397DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::setDirectionForSdpBasedOnHoldState(void *a1, void **a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[46];
  if (v4)
  {
    unsigned int v5 = std::__shared_weak_count::lock(v4);
    if (v5) {
      uint64_t v6 = a1[45];
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    unsigned int v5 = 0;
  }
  if (*a2 && (!v6 || *(unsigned char *)(v6 + 1024)))
  {
    uint64_t v7 = (SipSession *)a1[49];
    if (!v7 || (SipSession::confirmed(v7) & 1) == 0)
    {
      uint64_t v8 = (*(uint64_t (**)(void *))(a1[10] + 64))(a1 + 10);
      (*(void (**)(void *, uint64_t))(a1[10] + 16))(a1 + 10, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"setting direction of outgoing SDP to ", 37);
      *(unsigned char *)(v8 + 17) = 0;
      uint64_t v9 = (unsigned int *)a1 + 113;
      ims::toString<MediaDirection>(v9, &v10);
      LoggableString::LoggableString(&__p, &v10);
      (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &__p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      SDPModel::setDirectionForSessionAndMedia(*a2, *v9);
    }
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5397F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::interface(BambiCall *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 46);
  if (!v4 || (unsigned int v5 = std::__shared_weak_count::lock(v4)) == 0)
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *((void *)this + 45);
  if (!v7) {
    goto LABEL_21;
  }
  uint64_t v8 = *(void *)(v7 + 160);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 168);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      goto LABEL_21;
    }
    uint64_t v8 = *(void *)(v7 + 160);
    std::string v10 = *(std::__shared_weak_count **)(v7 + 168);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    if (!v8) {
      goto LABEL_21;
    }
    std::string v10 = 0;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 144))(v8);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v11)
  {
    uint64_t v12 = *(void *)(v7 + 160);
    int v13 = *(std::__shared_weak_count **)(v7 + 168);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 144))(v12);
    if (*(char *)(v14 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v14 + 32), *(void *)(v14 + 40));
    }
    else
    {
      long long v15 = *(_OWORD *)(v14 + 32);
      a2->__r_.__value_.__r.__words[2] = *(void *)(v14 + 48);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v15;
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    goto LABEL_22;
  }
LABEL_21:
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
LABEL_22:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1C5398178(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiCall::address(BambiCall *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 45);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  SipStack::mediaAddress((SipStack *)v2, (uint64_t)v6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  SipHost::address((SipHost *)v6, &v4);
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  SipHost::~SipHost((SipHost *)v6);
}

void sub_1C5398274(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  SipHost::~SipHost((SipHost *)va);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::setQualityOfServiceRevoked(BambiCall *this, unsigned int a2)
{
  uint64_t v47 = 0;
  long long v48 = 0;
  uint64_t v49 = 0;
  uint64_t v3 = *((void *)this + 49);
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(v3 + 248);
  unsigned int v5 = *(std::__shared_weak_count **)(v3 + 256);
  if (!v5)
  {
    if (v6) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v12 = *((void *)this + 10);
    uint64_t v11 = (char *)this + 80;
    uint64_t v13 = (*(uint64_t (**)(char *))(v12 + 56))(v11);
    (*(void (**)(char *, uint64_t))(*(void *)v11 + 16))(v11, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"setQualityOfServiceRevoked: no SIP session", 42);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v14 = 0;
    *(unsigned char *)(v13 + 17) = 0;
    goto LABEL_63;
  }
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v3 = *((void *)this + 49);
LABEL_6:
  if (*(_DWORD *)(v3 + 1528) == a2)
  {
    *(_DWORD *)(v3 + 1528) = -1;
    *(unsigned char *)(v3 + 1560) = 0;
    *(void *)(v3 + 1544) = *(void *)(v3 + 1536);
    SipSessionInterface::stack((std::__shared_weak_count *)v3, &__p);
    uint64_t v7 = (ImsPrefs *)SipStack::prefs((SipStack *)__p);
    uint64_t v8 = (void **)ImsPrefs::getEndCallOnAudioBearerRevokedKey(v7);
    int v9 = ImsPrefs::BOOLValue(v7, v8);
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    if (v9)
    {
      uint64_t v10 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 32))((char *)this + 80);
      (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Local QoS bearer revoked. Ending call!", 38);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "BearerRevoked");
      BambiCall::endWithReason(this, (uint64_t)&__p, (uint64_t)v46);
      ImsResult::~ImsResult((ImsResult *)v46);
      if (v45 < 0) {
        operator delete(__p);
      }
    }
LABEL_62:
    uint64_t v14 = 1;
    goto LABEL_63;
  }
  long long v15 = *(unint64_t **)(v3 + 248);
  BOOL v16 = *(std::__shared_weak_count **)(v3 + 256);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipDialog::allForks(v15, (unint64_t *)&v47);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  int v17 = v47;
  uint64_t v18 = v48;
  if (v47 != v48)
  {
    while (1)
    {
      uint64_t v20 = *v17;
      uint64_t v19 = (std::__shared_weak_count *)v17[1];
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v20)
      {
        uint64_t v21 = *(void *)(v20 + 864);
        if (v21)
        {
          unint64_t v22 = (uint64_t *)(v20 + 864);
          uint64_t v23 = v20 + 864;
          uint64_t v24 = *(void *)(v20 + 864);
          do
          {
            unsigned int v25 = *(_DWORD *)(v24 + 32);
            BOOL v26 = v25 >= a2;
            if (v25 >= a2) {
              long long v27 = (uint64_t *)v24;
            }
            else {
              long long v27 = (uint64_t *)(v24 + 8);
            }
            if (v26) {
              uint64_t v23 = v24;
            }
            uint64_t v24 = *v27;
          }
          while (*v27);
          if ((uint64_t *)v23 != v22 && *(_DWORD *)(v23 + 32) <= a2) {
            break;
          }
        }
      }
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v17 += 2;
      if (v17 == v18) {
        goto LABEL_35;
      }
    }
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      uint64_t v21 = *v22;
    }
    if (v21)
    {
      uint64_t v31 = v20 + 864;
      do
      {
        unsigned int v32 = *(_DWORD *)(v21 + 32);
        BOOL v33 = v32 >= a2;
        if (v32 >= a2) {
          uint64_t v34 = (uint64_t *)v21;
        }
        else {
          uint64_t v34 = (uint64_t *)(v21 + 8);
        }
        if (v33) {
          uint64_t v31 = v21;
        }
        uint64_t v21 = *v34;
      }
      while (*v34);
      if ((uint64_t *)v31 != v22 && *(_DWORD *)(v31 + 32) <= a2)
      {
        uint64_t v35 = *(unsigned int *)(v31 + 44);
        if (v35)
        {
          if (v35 != 2) {
            goto LABEL_56;
          }
          SipSessionInterface::stack(*((std::__shared_weak_count **)this + 49), &__p);
          uint64_t v36 = (ImsPrefs *)SipStack::prefs((SipStack *)__p);
          int v37 = (void **)ImsPrefs::getEndCallOnAudioBearerRevokedKey(v36);
          int v38 = ImsPrefs::BOOLValue(v36, v37);
          if (v44) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v44);
          }
          if (v38)
          {
            uint64_t v39 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 48))((char *)this + 80);
            (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v39);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"Audio bearer revoked.  Ending call!", 35);
            *(unsigned char *)(v39 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v39 + 17) = 0;
            std::string::basic_string[abi:ne180100]<0>(&__p, "BearerRevoked");
            BambiCall::endWithReason(this, (uint64_t)&__p, (uint64_t)v42);
            ImsResult::~ImsResult((ImsResult *)v42);
            if (v45 < 0) {
              operator delete(__p);
            }
          }
          else
          {
LABEL_56:
            uint64_t v40 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 32))((char *)this + 80);
            (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v40);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"Bearer revoked for media type ", 30);
            *(unsigned char *)(v40 + 17) = 0;
            (*(void (**)(uint64_t, void **))(*(void *)v40 + 32))(v40, &__p);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v40 + 17) = 0;
            if (v45 < 0) {
              operator delete(__p);
            }
            if (v35 == 4) {
              BambiCall::setTextMediaSessionMode((uint64_t)this, 0);
            }
          }
        }
      }
    }
    unsigned int v50 = a2;
    std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::__erase_unique<unsigned int>(v20 + 856, &v50);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    goto LABEL_62;
  }
LABEL_35:
  uint64_t v29 = *((void *)this + 10);
  long long v28 = (char *)this + 80;
  uint64_t v30 = (*(uint64_t (**)(char *))(v29 + 48))(v28);
  (*(void (**)(char *, uint64_t))(*(void *)v28 + 16))(v28, v30);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"Call does not own a fork using bearer ", 38);
  *(unsigned char *)(v30 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v30 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  uint64_t v14 = 0;
  *(unsigned char *)(v30 + 17) = 0;
LABEL_63:
  std::string __p = &v47;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v14;
}

void sub_1C5398974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::string __p = (void *)(v25 - 112);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::setQualityOfServiceEstablished(uint64_t a1, unsigned int a2, int a3, void *a4)
{
  std::string __p = 0;
  int v38 = 0;
  uint64_t v39 = 0;
  uint64_t v8 = *(void *)(a1 + 392);
  if (!v8) {
    goto LABEL_36;
  }
  uint64_t v10 = *(unint64_t **)(v8 + 248);
  int v9 = *(std::__shared_weak_count **)(v8 + 256);
  if (!v9)
  {
    if (v10)
    {
      uint64_t v12 = 0;
      goto LABEL_8;
    }
LABEL_36:
    v36[0] = &__p;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
    goto LABEL_37;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  if (!v10) {
    goto LABEL_36;
  }
  uint64_t v11 = *(void *)(a1 + 392);
  uint64_t v10 = *(unint64_t **)(v11 + 248);
  uint64_t v12 = *(std::__shared_weak_count **)(v11 + 256);
  if (v12)
  {
    char v13 = 0;
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_9;
  }
LABEL_8:
  char v13 = 1;
LABEL_9:
  SipDialog::allForks(v10, (unint64_t *)&__p);
  if ((v13 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v14 = (char *)__p;
  long long v15 = v38;
  if (__p == v38) {
    goto LABEL_36;
  }
  uint64_t v16 = a1 + 80;
  while (1)
  {
    int v17 = *(SipDialogFork **)v14;
    uint64_t v18 = (std::__shared_weak_count *)*((void *)v14 + 1);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v17) {
      goto LABEL_29;
    }
    uint64_t v19 = *((void *)v17 + 108);
    if (!v19) {
      goto LABEL_29;
    }
    uint64_t v20 = (void *)((char *)v17 + 864);
    do
    {
      unsigned int v21 = *(_DWORD *)(v19 + 32);
      BOOL v22 = v21 >= a2;
      if (v21 >= a2) {
        uint64_t v23 = (uint64_t *)v19;
      }
      else {
        uint64_t v23 = (uint64_t *)(v19 + 8);
      }
      if (v22) {
        uint64_t v20 = (void *)v19;
      }
      uint64_t v19 = *v23;
    }
    while (*v23);
    if (v20 == (void *)((char *)v17 + 864)
      || *((_DWORD *)v20 + 8) > a2
      || !SipDialogFork::getBearerPortCount(v17, a2)
      || a4[1] != *a4)
    {
LABEL_29:
      char v24 = 1;
      if (!v18) {
        goto LABEL_31;
      }
LABEL_30:
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      goto LABEL_31;
    }
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 48))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(a1 + 80, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"An existing bearer has been updated without ports.  Revoking bearer.", 68);
    *(unsigned char *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v25 + 17) = 0;
    char v4 = BambiCall::setQualityOfServiceRevoked((BambiCall *)a1, a2);
    char v24 = 0;
    if (v18) {
      goto LABEL_30;
    }
LABEL_31:
    if ((v24 & 1) == 0) {
      break;
    }
    v14 += 16;
    if (v14 == v15) {
      goto LABEL_36;
    }
  }
  v36[0] = &__p;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
  if (v4) {
    return 0;
  }
LABEL_37:
  BOOL v26 = *(SipSession **)(a1 + 392);
  if ((!v26 || (SipSession::confirmed(v26) & 1) == 0) && !*(unsigned char *)(a1 + 460))
  {
    uint64_t v31 = *(void *)(a1 + 392);
    if (v31)
    {
      if (((*(uint64_t (**)(uint64_t))(*(void *)v31 + 264))(v31) & 1) == 0 && *(void *)(a1 + 392))
      {
        uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"Local QoS established for bearer ", 33);
        *(unsigned char *)(v32 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v32 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)" on ", 4);
        *(unsigned char *)(v32 + 17) = 0;
        if (a3) {
          BOOL v33 = "local";
        }
        else {
          BOOL v33 = "remote";
        }
        if (a3) {
          uint64_t v34 = 5;
        }
        else {
          uint64_t v34 = 6;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)v33, v34);
        *(unsigned char *)(v32 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)" ports: ", 8);
        *(unsigned char *)(v32 + 17) = 0;
        std::string::basic_string[abi:ne180100]<0>(v36, ", ");
        ims::join<std::__wrap_iter<unsigned short const*>>();
      }
    }
  }
  uint64_t v28 = *(void *)(a1 + 80);
  uint64_t v27 = a1 + 80;
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(v28 + 64))(v27);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"it's not time for QoS", 21);
  *(unsigned char *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  uint64_t result = 0;
  *(unsigned char *)(v29 + 17) = 0;
  return result;
}

void sub_1C5398F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::setTextMediaSessionMode(uint64_t a1, int a2)
{
  if (a2 != 2 * *(unsigned __int8 *)(a1 + 753))
  {
    uint64_t v4 = a1 + 80;
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
    uint64_t v6 = a2 == 2 ? "setTextMediaSessionMode to RTT for call " : "setTextMediaSessionMode to OFF for call ";
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)v6, 40);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, v4 + 392);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    *(unsigned char *)(v4 + 673) = a2 == 2;
    *(unsigned char *)(v4 + 672) = 0;
    SDPSession::setTextMediaSessionMode(*(void *)(v4 + 120), a2);
    uint64_t v7 = *(void *)(v4 + 120);
    uint64_t v8 = *(void *)(v7 + 1912);
    if (!v8) {
      goto LABEL_19;
    }
    uint64_t v9 = v7 + 1912;
    uint64_t v10 = v7 + 1912;
    do
    {
      int v11 = *(_DWORD *)(v8 + 32);
      BOOL v12 = v11 < 4;
      if (v11 >= 4) {
        char v13 = (uint64_t *)v8;
      }
      else {
        char v13 = (uint64_t *)(v8 + 8);
      }
      if (!v12) {
        uint64_t v10 = v8;
      }
      uint64_t v8 = *v13;
    }
    while (*v13);
    if (v10 != v9 && *(int *)(v10 + 32) <= 4 && (uint64_t v14 = *(void *)(v10 + 40)) != 0)
    {
      if (*(void *)(v14 + 32))
      {
        if (*(unsigned char *)(a1 + 753))
        {
          uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 64))(v4);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Found existing text media session ID ", 37);
          *(unsigned char *)(v15 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v15 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v15 + 17) = 0;
        }
      }
      else
      {
        uint64_t v31 = 0;
        memset(v30, 0, sizeof(v30));
        uint64_t v19 = *(std::__shared_weak_count **)(a1 + 368);
        if (v19)
        {
          uint64_t v19 = std::__shared_weak_count::lock(v19);
          uint64_t v20 = v19;
          if (v19) {
            uint64_t v19 = *(std::__shared_weak_count **)(a1 + 360);
          }
        }
        else
        {
          uint64_t v20 = 0;
        }
        SipStack::mediaAddress((SipStack *)v19, (uint64_t)v30);
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        SipHost::address((SipHost *)v30, &v28);
        uint64_t v21 = BambiCall::bambiClient((BambiCall *)a1);
        unsigned int v22 = *(_DWORD *)(a1 + 452);
        uint64_t v23 = *(std::__shared_weak_count **)(a1 + 208);
        uint64_t v25 = *(void *)(a1 + 200);
        BOOL v26 = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BambiClient::createMediaSessionForStream(v21, v14, (uint64_t)&v28, v22, (uint64_t)&v25, (uint64_t)v27);
        ImsResult::~ImsResult((ImsResult *)v27);
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        SipHost::~SipHost((SipHost *)v30);
      }
    }
    else
    {
LABEL_19:
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"No text stream available", 24);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
    }
    int v17 = *(SipSession **)(a1 + 392);
    if (v17)
    {
      if (!SipSession::terminating(v17))
      {
        uint64_t v18 = *(std::__shared_weak_count **)(a1 + 392);
        if (v18)
        {
          if (((uint64_t (*)(std::__shared_weak_count *))v18->__vftable[6].__get_deleter)(v18)) {
            return;
          }
          uint64_t v18 = *(std::__shared_weak_count **)(a1 + 392);
        }
        SipSession::upgradeToRtt(v18, 1, (uint64_t)v24);
        ImsResult::~ImsResult((ImsResult *)v24);
      }
    }
  }
}

void sub_1C53993CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v19 - 136);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  SipHost::~SipHost((SipHost *)(v19 - 128));
  _Unwind_Resume(a1);
}

void BambiCall::remoteDisplayNumber(BambiCall *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)a2, (char *)&str_35_0);
  if (SipUri::isValidUri((BambiCall *)((char *)this + 1048)))
  {
    if (BambiCall::senderIsPrivate(this))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        *(void *)(a2 + 8) = 0;
        uint64_t v4 = *(unsigned char **)a2;
      }
      else
      {
        *(unsigned char *)(a2 + 23) = 0;
        uint64_t v4 = (unsigned char *)a2;
      }
      *uint64_t v4 = 0;
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      BOOL isTelUri = SipUri::isTelUri((BambiCall *)((char *)this + 1048));
      uint64_t v6 = (char *)this + 1224;
      uint64_t v7 = 1176;
      if (isTelUri) {
        uint64_t v7 = 1224;
      }
      else {
        uint64_t v6 = (char *)this + 1176;
      }
      if (v6[23] < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)((char *)this + v7), *((void *)v6 + 1));
      }
      else {
        std::string __p = *(std::string *)v6;
      }
      if (isPhoneNumber((unsigned __int8 *)&__p)) {
        std::string::operator=((std::string *)a2, &__p);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *((void *)this + 45);
      if (v11) {
        SipStack::massageIncomingDisplayNumber(v11, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

void sub_1C539954C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::remoteDisplayName(BambiCall *this@<X0>, std::string *a2@<X8>)
{
  if (BambiCall::senderIsPrivate(this))
  {
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_35_0);
  }
  else if (*((char *)this + 1479) < 0)
  {
    uint64_t v4 = (const std::string::value_type *)*((void *)this + 182);
    std::string::size_type v5 = *((void *)this + 183);
    std::string::__init_copy_ctor_external(a2, v4, v5);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 91);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 184);
  }
}

void BambiCall::remoteDisplayCountryCode(BambiCall *this@<X0>, std::string *a2@<X8>)
{
  if (BambiCall::senderIsPrivate(this) || (uint64_t v4 = (BambiCall *)((char *)this + 1048), !SipUri::isValidUri(v4)))
  {
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_35_0);
  }
  else
  {
    SipUri::countryCodeFromPhoneContext(v4, a2);
  }
}

void BambiCall::sendEmergencyLocationUpdate(uint64_t a1@<X0>, const ims::LocationInfo *a2@<X1>, ImsResult *a3@<X8>)
{
  if (*(void *)(a1 + 392))
  {
    ims::LocationInfo::LocationInfo((ims::LocationInfo *)v6, a2);
    BambiCall::setEmergencyLocationInfo(a1, v6);
    if (v14 < 0) {
      operator delete(__p);
    }
    if (v12 < 0) {
      operator delete(v11);
    }
    if (v10 < 0) {
      operator delete(v9);
    }
    if (v8 < 0) {
      operator delete(v7);
    }
    SipSession::sendUpdate(*(uint64_t **)(a1 + 392), (uint64_t)&SipSession::kUpdateTypeEmergencyLocationUpdate, a3);
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    v15[0] = &unk_1F20B2680;
    v15[1] = &_bambiDomain;
    int v16 = 1073741827;
    std::string::size_type v5 = (const std::string *)ImsResult::operator<<<char [15]>((uint64_t)v15, "No SIP session");
    ImsResult::ImsResult(a3, v5);
    ImsResult::~ImsResult((ImsResult *)v15);
  }
}

void sub_1C53997B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ims::LocationInfo::~LocationInfo((void **)va);
  _Unwind_Resume(a1);
}

void BambiCall::sendEmergencyLocationPublish(uint64_t a1@<X0>, const ims::LocationInfo *a2@<X1>, ImsResult *a3@<X8>)
{
  if (*(void *)(a1 + 392))
  {
    ims::LocationInfo::LocationInfo((ims::LocationInfo *)v6, a2);
    BambiCall::setEmergencyLocationInfo(a1, v6);
    if (v14 < 0) {
      operator delete(__p);
    }
    if (v12 < 0) {
      operator delete(v11);
    }
    if (v10 < 0) {
      operator delete(v9);
    }
    if (v8 < 0) {
      operator delete(v7);
    }
    SipSession::sendPublish(*(void *)(a1 + 392), (unsigned __int8 *)&SipSession::kPublishTypeEmergencyLocation, (uint64_t)a3);
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    v15[0] = &unk_1F20B2680;
    v15[1] = &_bambiDomain;
    int v16 = 1073741827;
    std::string::size_type v5 = (const std::string *)ImsResult::operator<<<char [15]>((uint64_t)v15, "No SIP session");
    ImsResult::ImsResult(a3, v5);
    ImsResult::~ImsResult((ImsResult *)v15);
  }
}

void sub_1C53998EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ims::LocationInfo::~LocationInfo((void **)va);
  _Unwind_Resume(a1);
}

void BambiCall::sendReinvite(ImsResult *a1, uint64_t *a2, uint64_t a3)
{
  if (a2)
  {
    SipSession::sendInvite(a2, a3, a1);
  }
  else
  {
    long long v7 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    v5[0] = &unk_1F20B2680;
    v5[1] = &_bambiDomain;
    int v6 = 1073741827;
    uint64_t v4 = (const std::string *)ImsResult::operator<<<char [15]>((uint64_t)v5, "No SIP session");
    ImsResult::ImsResult(a1, v4);
    ImsResult::~ImsResult((ImsResult *)v5);
  }
}

void sub_1C53999CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void BambiCall::handleSRVCCFailure(RTPManager **this@<X0>, int a2@<W1>, ImsResult *a3@<X8>)
{
  if (this[49])
  {
    RTPManager::srvccHandoverFailed(this[47]);
    int v6 = this[49];
    if (v6 && SipSession::confirmed(v6))
    {
      long long v7 = (uint64_t *)this[49];
      BambiCall::sendReinvite(a3, v7, (uint64_t)"SRVCCFailureInvite");
    }
    else
    {
      *(_OWORD *)long long v18 = 0u;
      memset(v19, 0, 48);
      if (a2) {
        long long v8 = "handover cancelled";
      }
      else {
        long long v8 = "failure to transition to CS domain";
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v8);
      SipReason::SipReason((unsigned __int8 *)v18, &SipReason::kProtocolSip, 487, (uint64_t)__p);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      long long v9 = (unint64_t **)this[49];
      if (SBYTE7(v19[0]) < 0)
      {
        std::string::__init_copy_ctor_external(&v11, (const std::string::value_type *)v18[0], (std::string::size_type)v18[1]);
      }
      else
      {
        *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)v18;
        v11.__r_.__value_.__r.__words[2] = *(void *)&v19[0];
      }
      char v12 = &unk_1F20B37B0;
      std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(v13, *(void ***)&v19[1], (void **)&v19[1] + 1);
      char v15 = 1;
      char v14 = BYTE8(v19[2]);
      SipSession::sendUpdateWithLocalSdpInAllForks(v9, "UpdateTypeSRVCCFailure", (uint64_t)&v11, (uint64_t)a3);
      char v12 = &unk_1F20B37B0;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v13, (void *)v13[1]);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      *((void *)&v19[0] + 1) = &unk_1F20B37B0;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v19[1], *((void **)&v19[1] + 1));
      if (SBYTE7(v19[0]) < 0) {
        operator delete(v18[0]);
      }
    }
  }
  else
  {
    memset((char *)v19 + 8, 0, 48);
    v18[0] = &unk_1F20B2680;
    v18[1] = &_bambiDomain;
    LODWORD(v19[0]) = 1073741826;
    char v10 = (const std::string *)ImsResult::operator<<<char [15]>((uint64_t)v18, "No SIP session");
    ImsResult::ImsResult(a3, v10);
    ImsResult::~ImsResult((ImsResult *)v18);
  }
}

void sub_1C5399C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
}

void SipReason::SipReason(std::string *this, const SipReason *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B37B0;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)&this[1].__r_.__value_.__l.__size_, *((void ***)a2 + 4), (void **)a2 + 5);
  this[2].__r_.__value_.__s.__data_[9] = 1;
  this[2].__r_.__value_.__s.__data_[8] = *((unsigned char *)a2 + 56);
}

void sub_1C5399D30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::handleAccessNetworkChange(BambiCall *this@<X0>, const ims::AccessNetwork *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if ((a3 & 1) == 0)
  {
    BOOL isWifi = ims::AccessNetwork::isWifi((BambiCall *)((char *)this + 1576));
    if (isWifi == ims::AccessNetwork::isWifi(a2))
    {
      uint64_t v22 = *((void *)this + 10);
      uint64_t v21 = (char *)this + 80;
      uint64_t v23 = (*(uint64_t (**)(char *))(v22 + 64))(v21);
      (*(void (**)(char *, uint64_t))(*(void *)v21 + 16))(v21, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"handleAccessNetworkChange: access network hasn't changed", 56);
      *(unsigned char *)(v23 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v23 + 17) = 0;
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(void *)a4 = &unk_1F20B2680;
      *(void *)(a4 + 8) = &_bambiDomain;
      *(_DWORD *)(a4 + 16) = 0;
      return;
    }
  }
  long long v8 = (SipSession *)*((void *)this + 49);
  if (!v8)
  {
    uint64_t v18 = *((void *)this + 10);
    char v17 = (char *)this + 80;
    uint64_t v19 = (*(uint64_t (**)(char *))(v18 + 48))(v17);
    (*(void (**)(char *, uint64_t))(*(void *)v17 + 16))(v17, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"handleAccessNetworkChange: no SIP session", 41);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    uint64_t v49 = &unk_1F20B2680;
    unsigned int v50 = &_bambiDomain;
    LODWORD(v51) = 1073741826;
    uint64_t v20 = (const std::string *)ImsResult::operator<<<char [15]>((uint64_t)&v49, "No SIP session");
    ImsResult::ImsResult((ImsResult *)a4, v20);
LABEL_14:
    ImsResult::~ImsResult((ImsResult *)&v49);
    return;
  }
  if ((SipSession::confirmed(v8) & 1) == 0)
  {
    uint64_t v25 = *((void *)this + 10);
    char v24 = (char *)this + 80;
    uint64_t v26 = (*(uint64_t (**)(char *))(v25 + 64))(v24);
    (*(void (**)(char *, uint64_t))(*(void *)v24 + 16))(v24, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"handleAccessNetworkChange: call is not confirmed", 48);
    *(unsigned char *)(v26 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v26 + 17) = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    uint64_t v49 = &unk_1F20B2680;
    unsigned int v50 = &_bambiDomain;
    LODWORD(v51) = 1073741826;
    uint64_t v27 = (const std::string *)ImsResult::operator<<<char [14]>((uint64_t)&v49, "Not confirmed");
    ImsResult::ImsResult((ImsResult *)a4, v27);
    goto LABEL_14;
  }
  long long v9 = (std::__shared_weak_count *)*((void *)this + 46);
  if (!v9)
  {
    char v10 = 0;
    goto LABEL_16;
  }
  char v10 = std::__shared_weak_count::lock(v9);
  if (!v10)
  {
LABEL_16:
    uint64_t v11 = 0;
    goto LABEL_17;
  }
  uint64_t v11 = *((void *)this + 45);
  if ((*((_DWORD *)this + 112) & 0xFFFFFFFE) != 2 || !v11 || *(unsigned char *)(v11 + 1192))
  {
LABEL_17:
    uint64_t v28 = (SipSession *)*((void *)this + 49);
    if (v28)
    {
      if (SipSession::terminating(v28)
        || (uint64_t v29 = *((void *)this + 49)) != 0
        && (*(unsigned int (**)(uint64_t))(*(void *)v29 + 264))(v29))
      {
        uint64_t v31 = *((void *)this + 10);
        uint64_t v30 = (char *)this + 80;
        uint64_t v32 = (*(uint64_t (**)(char *))(v31 + 64))(v30);
        (*(void (**)(char *, uint64_t))(*(void *)v30 + 16))(v30, v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"handleAccessNetworkChange: call is terminating", 46);
        *(unsigned char *)(v32 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v32 + 17) = 0;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        uint64_t v49 = &unk_1F20B2680;
        unsigned int v50 = &_bambiDomain;
        LODWORD(v51) = 1073741826;
        BOOL v33 = (const std::string *)ImsResult::operator<<<char [11]>((uint64_t)&v49, "Terminated");
        ImsResult::ImsResult((ImsResult *)a4, v33);
        goto LABEL_45;
      }
    }
    if (*((void *)this + 65))
    {
      uint64_t v35 = *((void *)this + 10);
      uint64_t v34 = (char *)this + 80;
      uint64_t v36 = (*(uint64_t (**)(char *))(v35 + 64))(v34);
      (*(void (**)(char *, uint64_t))(*(void *)v34 + 16))(v34, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"handleAccessNetworkChange: not refreshing access network for emergency call", 75);
      *(unsigned char *)(v36 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v36 + 17) = 0;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      uint64_t v49 = &unk_1F20B2680;
      unsigned int v50 = &_bambiDomain;
      LODWORD(v51) = 1073741826;
      operator new();
    }
    uint64_t v51 = 0;
    long long v52 = 0uLL;
    long long v54 = 0uLL;
    long long v53 = 0uLL;
    uint64_t v49 = &unk_1F20B2680;
    unsigned int v50 = &_bambiDomain;
    if (!v11) {
      goto LABEL_40;
    }
    uint64_t v37 = *(unsigned __int8 *)(v11 + 1191);
    if ((v37 & 0x80u) == 0) {
      uint64_t v38 = *(unsigned __int8 *)(v11 + 1191);
    }
    else {
      uint64_t v38 = *(void *)(v11 + 1176);
    }
    if (v38 == 6)
    {
      if ((v37 & 0x80) != 0)
      {
        if (memcmp(*(const void **)(v11 + 1168), "INVITE", *(void *)(v11 + 1176))) {
          goto LABEL_36;
        }
      }
      else if (*(unsigned char *)(v11 + 1191))
      {
        uint64_t v39 = "INVITE";
        uint64_t v40 = (unsigned __int8 *)(v11 + 1168);
        while (*v40 == *(unsigned __int8 *)v39)
        {
          ++v40;
          ++v39;
          if (!--v37) {
            goto LABEL_41;
          }
        }
        goto LABEL_36;
      }
LABEL_41:
      BambiCall::sendReinvite((ImsResult *)__p, *((uint64_t **)this + 49), (uint64_t)&SipSession::kInviteTypeAccessNetworkRefresh);
      ImsResult::operator=((uint64_t)&v49, (uint64_t)__p);
      ImsResult::~ImsResult((ImsResult *)__p);
LABEL_42:
      if (((*(uint64_t (**)(uint64_t *, void))(*v50 + 24))(v50, v51) & 1) == 0) {
        ims::AccessNetwork::operator=((uint64_t)this + 1576, (uint64_t)a2);
      }
      ImsResult::ImsResult(a4, (uint64_t)&v49);
LABEL_45:
      ImsResult::~ImsResult((ImsResult *)&v49);
      if (!v10) {
        return;
      }
      goto LABEL_46;
    }
LABEL_36:
    if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)(v11 + 1168), "UPDATE"))
    {
      memset(v46, 0, sizeof(v46));
      std::string::basic_string[abi:ne180100]<0>(__p, "Access Network Refresh");
      SipReason::SipReason((unsigned __int8 *)v46, &SipReason::kProtocolSip, 200, (uint64_t)__p);
      if (v48 < 0) {
        operator delete(__p[0]);
      }
      long long v41 = (unint64_t **)*((void *)this + 49);
      SipReason::SipReason(v45, (const SipReason *)v46);
      SipSession::sendUpdateWithLocalSdpInAllForks(v41, SipSession::kUpdateTypeAccessNetworkRefresh, (uint64_t)v45, (uint64_t)__p);
      ImsResult::operator=((uint64_t)&v49, (uint64_t)__p);
      ImsResult::~ImsResult((ImsResult *)__p);
      SipReason::~SipReason((SipReason *)v45);
      SipReason::~SipReason((SipReason *)v46);
      goto LABEL_42;
    }
LABEL_40:
    uint64_t v43 = *((void *)this + 10);
    uint64_t v42 = (char *)this + 80;
    uint64_t v44 = (*(uint64_t (**)(char *))(v43 + 64))(v42);
    (*(void (**)(char *, uint64_t))(*(void *)v42 + 16))(v42, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"not sending access network refresh: no refresh method configured", 64);
    *(unsigned char *)(v44 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v44 + 17) = 0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_45;
  }
  uint64_t v13 = *((void *)this + 10);
  char v12 = (char *)this + 80;
  uint64_t v14 = (*(uint64_t (**)(char *))(v13 + 64))(v12);
  (*(void (**)(char *, uint64_t))(*(void *)v12 + 16))(v12, v14);
  char v15 = (unsigned char *)ImsOutStream::operator<<(v14, "handleAccessNetworkChange: call is not active");
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v15[17] = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t v49 = &unk_1F20B2680;
  unsigned int v50 = &_bambiDomain;
  LODWORD(v51) = 1073741826;
  int v16 = (const std::string *)ImsResult::operator<<<char [11]>((uint64_t)&v49, "Not active");
  ImsResult::ImsResult((ImsResult *)a4, v16);
  ImsResult::~ImsResult((ImsResult *)&v49);
LABEL_46:
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
}

void sub_1C539A77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  ImsResult::~ImsResult((ImsResult *)(v31 - 136));
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(a1);
}

double BambiCall::prepareInvite@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void BambiCall::terminateMediaSession(RTPManager **this)
{
  uint64_t v2 = BambiCall::bambiClient((BambiCall *)this);
  if (v2)
  {
    uint64_t v3 = this[25];
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    char v12 = &unk_1F20B2680;
    uint64_t v13 = &_bambiDomain;
    uint64_t v14 = 0;
    long long v4 = (void *)*((void *)v3 + 238);
    std::string::size_type v5 = (void *)((char *)v3 + 1912);
    if (v4 != (void *)((char *)v3 + 1912))
    {
      int v6 = (void *)v2;
      while (1)
      {
        long long v7 = (unint64_t *)v4[5];
        RTPManager::terminateSessionWithId(this[47], v7[4]);
        BambiClient::setMediaSessionIdForStream(v6, (BambiCallMediaStream *)v7, 0);
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        uint64_t v18 = &unk_1F20B2680;
        uint64_t v19 = &_bambiDomain;
        int v20 = 0;
        ImsResult::operator=((uint64_t)&v12, (uint64_t)&v18);
        ImsResult::~ImsResult((ImsResult *)&v18);
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        uint64_t v18 = &unk_1F20B2680;
        uint64_t v19 = &_bambiDomain;
        int v20 = 0;
        if (v13 != &_bambiDomain) {
          break;
        }
        int v8 = v14;
        ImsResult::~ImsResult((ImsResult *)&v18);
        if (!v8)
        {
          long long v9 = (void *)v4[1];
          if (v9)
          {
            do
            {
              char v10 = v9;
              long long v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              char v10 = (void *)v4[2];
              BOOL v11 = *v10 == (void)v4;
              long long v4 = v10;
            }
            while (!v11);
          }
          long long v4 = v10;
          if (v10 != v5) {
            continue;
          }
        }
        goto LABEL_14;
      }
      ImsResult::~ImsResult((ImsResult *)&v18);
    }
LABEL_14:
    ImsResult::~ImsResult((ImsResult *)&v12);
  }
}

void sub_1C539AA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void BambiCall::handleTimer(int8x8_t *this, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  size_t v3 = *((void *)a2 + 1);
  if ((v2 & 0x80u) == 0) {
    uint64_t v4 = a2[23];
  }
  else {
    uint64_t v4 = *((void *)a2 + 1);
  }
  switch(v4)
  {
    case 13:
      if ((v2 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, "AutoRingTimer", v3)) {
          return;
        }
LABEL_30:
        BambiCall::ring(this, (uint64_t)v18);
        char v10 = (ImsResult *)v18;
        goto LABEL_44;
      }
      if (!a2[23]) {
        goto LABEL_30;
      }
      int v6 = "AutoRingTimer";
      while (*a2 == *(unsigned __int8 *)v6)
      {
        ++a2;
        ++v6;
        if (!--v2) {
          goto LABEL_30;
        }
      }
      return;
    case 16:
      if ((v2 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, "EPSWatchdogTimer", v3)) {
          return;
        }
      }
      else if (a2[23])
      {
        long long v7 = "EPSWatchdogTimer";
        do
        {
          if (*a2 != *(unsigned __int8 *)v7) {
            return;
          }
          ++a2;
          ++v7;
          --v2;
        }
        while (v2);
      }
      BOOL v11 = (std::__shared_weak_count *)this[46];
      if (v11)
      {
        char v12 = std::__shared_weak_count::lock(v11);
        if (v12) {
          int8x8_t v13 = this[45];
        }
        else {
          int8x8_t v13 = 0;
        }
      }
      else
      {
        int8x8_t v13 = 0;
        char v12 = 0;
      }
      if (!ims::AccessNetwork::isLTE((ims::AccessNetwork *)(*(void *)&v13 + 3160)))
      {
        int8x8_t v15 = this[51];
        if (v15)
        {
          if (*(char *)(*(void *)&v13 + 4183) < 0) {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(*(void *)&v13 + 4160), *(void *)(*(void *)&v13 + 4168));
          }
          else {
            std::string __p = *(std::string *)(*(void *)&v13 + 4160);
          }
          (*(void (**)(int8x8_t, std::string *))(**(void **)&v15 + 256))(v15, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      return;
    case 18:
      if ((v2 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, "RTTNegotiatedTimer", v3)) {
          return;
        }
      }
      else if (a2[23])
      {
        int v8 = "RTTNegotiatedTimer";
        do
        {
          if (*a2 != *(unsigned __int8 *)v8) {
            return;
          }
          ++a2;
          ++v8;
          --v2;
        }
        while (v2);
      }
      if (this[94].i8[1])
      {
        int8x8_t v14 = this[25];
        if (!*(unsigned char *)(*(void *)&v14 + 1328)
          || ((*(uint64_t (**)(void))(*(void *)(*(void *)&v14 + 1032) + 24))() & 1) == 0)
        {
          BambiCall::textSessionDeactivated((BambiCall *)this);
        }
      }
      return;
    case 22:
      if ((v2 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, "MediaTimeoutDeferTimer", v3)) {
          return;
        }
      }
      else if (a2[23])
      {
        long long v9 = "MediaTimeoutDeferTimer";
        do
        {
          if (*a2 != *(unsigned __int8 *)v9) {
            return;
          }
          ++a2;
          ++v9;
          --v2;
        }
        while (v2);
      }
      BambiCall::endWithReason((BambiCall *)this, (uint64_t)&this[209], (uint64_t)v17);
      char v10 = (ImsResult *)v17;
LABEL_44:
      ImsResult::~ImsResult(v10);
      return;
    default:
      return;
  }
}

void sub_1C539AD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::sipSessionState(BambiCall *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 49);
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 664) + 24))(v3 + 664);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 + 664) + 16))(v3 + 664, v4);
    if (*(char *)(v5 + 23) < 0)
    {
      long long v7 = *(const std::string::value_type **)v5;
      std::string::size_type v8 = *(void *)(v5 + 8);
      std::string::__init_copy_ctor_external(a2, v7, v8);
    }
    else
    {
      long long v6 = *(_OWORD *)v5;
      a2->__r_.__value_.__r.__words[2] = *(void *)(v5 + 16);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "UnknownState");
  }
}

void BambiCall::handleAudioStreamTokens(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1496) || *(unsigned char *)(a1 + 1497))
  {
    uint64_t v4 = *(void *)(a1 + 408);
    if (v4)
    {
      uint64_t v5 = *(void (**)(void))(*(void *)v4 + 224);
      v5();
    }
  }
  else
  {
    uint64_t v6 = a1 + 80;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(a1 + 80, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Audio stream tokens detected, but call is still hidden. Delaying notification", 77);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    uint64_t v9 = *(void *)(a1 + 184);
    std::string::size_type v8 = *(std::__shared_weak_count **)(a1 + 192);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_time_t v10 = dispatch_time(0, 250000000);
    BOOL v11 = sImsDispatchQueue;
    if (!sImsDispatchQueue)
    {
      BOOL v11 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v11;
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN9BambiCall23handleAudioStreamTokensEN3ims7CFArrayE_block_invoke;
    block[3] = &__block_descriptor_tmp_206;
    block[4] = a1;
    block[5] = v9;
    int8x8_t v14 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    char v12 = *(const void **)(a2 + 8);
    v15[0] = &unk_1F20E38B0;
    v15[1] = v12;
    if (v12) {
      CFRetain(v12);
    }
    v15[0] = &unk_1F20E39B8;
    dispatch_after(v10, v11, block);
    ims::CFType::~CFType((ims::CFType *)v15);
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1C539B100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9BambiCall23handleAudioStreamTokensEN3ims7CFArrayE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = (const void *)a1[8];
        v7[0] = &unk_1F20E38B0;
        v7[1] = v6;
        if (v6) {
          CFRetain(v6);
        }
        v7[0] = &unk_1F20E39B8;
        BambiCall::handleAudioStreamTokens(v3, v7);
        ims::CFType::~CFType((ims::CFType *)v7);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C539B1D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE56c18_ZTSN3ims7CFArrayE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1 + 7;
  CFTypeRef result = (CFTypeRef)a2[8];
  a1[7] = &unk_1F20E38B0;
  a1[8] = result;
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *uint64_t v4 = &unk_1F20E39B8;
  return result;
}

void sub_1C539B27C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE56c18_ZTSN3ims7CFArrayE(uint64_t a1)
{
  ims::CFType::~CFType((ims::CFType *)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void BambiCall::handleTextStreamToken(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 1496) || *(unsigned char *)(a1 + 1497)) && !*(unsigned char *)(a1 + 1809))
  {
    uint64_t v11 = *(void *)(a1 + 408);
    if (v11)
    {
      char v12 = *(void (**)(void))(*(void *)v11 + 232);
      v12();
    }
  }
  else
  {
    uint64_t v4 = a1 + 80;
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(a1 + 80, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Text stream token detected, but call is still hidden. Delaying notification", 75);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v7 = *(void *)(a1 + 184);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 192);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_time_t v8 = dispatch_time(0, 250000000);
    uint64_t v9 = sImsDispatchQueue;
    if (!sImsDispatchQueue)
    {
      uint64_t v9 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v9;
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN9BambiCall21handleTextStreamTokenEN3ims8CFNumberE_block_invoke;
    block[3] = &__block_descriptor_tmp_209;
    block[4] = a1;
    block[5] = v7;
    int8x8_t v14 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_time_t v10 = *(const void **)(a2 + 8);
    v15[0] = &unk_1F20E38B0;
    v15[1] = v10;
    if (v10) {
      CFRetain(v10);
    }
    v15[0] = &unk_1F20E3960;
    dispatch_after(v8, v9, block);
    ims::CFType::~CFType((ims::CFType *)v15);
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1C539B568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9BambiCall21handleTextStreamTokenEN3ims8CFNumberE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = (const void *)a1[8];
        v7[0] = &unk_1F20E38B0;
        v7[1] = v6;
        if (v6) {
          CFRetain(v6);
        }
        v7[0] = &unk_1F20E3960;
        BambiCall::handleTextStreamToken(v3, v7);
        ims::CFType::~CFType((ims::CFType *)v7);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C539B640(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE56c19_ZTSN3ims8CFNumberE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1 + 7;
  CFTypeRef result = (CFTypeRef)a2[8];
  a1[7] = &unk_1F20E38B0;
  a1[8] = result;
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *uint64_t v4 = &unk_1F20E3960;
  return result;
}

void sub_1C539B6E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE56c19_ZTSN3ims8CFNumberE(uint64_t a1)
{
  ims::CFType::~CFType((ims::CFType *)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void BambiCall::setRelayMode(BambiCall *this, int a2)
{
  uint64_t v4 = (char *)this + 80;
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"setRelayMode to ", 16);
  *(unsigned char *)(v5 + 17) = 0;
  if (a2) {
    uint64_t v6 = "Enable";
  }
  else {
    uint64_t v6 = "Disable";
  }
  if (a2) {
    uint64_t v7 = 6;
  }
  else {
    uint64_t v7 = 7;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)v6, v7);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  v4[674] = a2;
  uint64_t v8 = *((void *)v4 + 15);
  uint64_t v9 = *(void *)(v8 + 1912);
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v10 = v8 + 1912;
  uint64_t v11 = v8 + 1912;
  do
  {
    int v12 = *(_DWORD *)(v9 + 32);
    BOOL v13 = v12 < 2;
    if (v12 >= 2) {
      int8x8_t v14 = (uint64_t *)v9;
    }
    else {
      int8x8_t v14 = (uint64_t *)(v9 + 8);
    }
    if (!v13) {
      uint64_t v11 = v9;
    }
    uint64_t v9 = *v14;
  }
  while (*v14);
  if (v11 != v10 && *(int *)(v11 + 32) <= 2 && (uint64_t v15 = *(void *)(v11 + 40)) != 0)
  {
    RTPManager::setRelayMode(*((RTPManager **)this + 47), *(void *)(v15 + 32), a2);
    if (!a2) {
      return;
    }
  }
  else
  {
LABEL_20:
    uint64_t v16 = (*(uint64_t (**)(char *))(*(void *)v4 + 56))(v4);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"No audio stream for relay", 25);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    if (!a2) {
      return;
    }
  }
  long long v17 = (RTPManager *)*((void *)this + 47);
  if (v17)
  {
    RTPManager::handleAudioReadyEvent(v17);
  }
}

void BambiCall::setScreeningMode(BambiCall *this, uint64_t a2)
{
  uint64_t v4 = (void *)((char *)this + 80);
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(void *, uint64_t))(*v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"setScreeningMode to ", 20);
  *(unsigned char *)(v5 + 17) = 0;
  if (a2) {
    uint64_t v6 = "Enable";
  }
  else {
    uint64_t v6 = "Disable";
  }
  if (a2) {
    uint64_t v7 = 6;
  }
  else {
    uint64_t v7 = 7;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)v6, v7);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t v8 = v4[15];
  uint64_t v9 = *(void *)(v8 + 1912);
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v10 = v8 + 1912;
  uint64_t v11 = v8 + 1912;
  do
  {
    int v12 = *(_DWORD *)(v9 + 32);
    BOOL v13 = v12 < 2;
    if (v12 >= 2) {
      int8x8_t v14 = (uint64_t *)v9;
    }
    else {
      int8x8_t v14 = (uint64_t *)(v9 + 8);
    }
    if (!v13) {
      uint64_t v11 = v9;
    }
    uint64_t v9 = *v14;
  }
  while (*v14);
  if (v11 != v10 && *(int *)(v11 + 32) <= 2 && (uint64_t v15 = *(void *)(v11 + 40)) != 0)
  {
    RTPManager::setScreeningMode(*((RTPManager **)this + 47), *(void *)(v15 + 32), a2);
    if (!a2) {
      return;
    }
  }
  else
  {
LABEL_20:
    uint64_t v16 = (*(uint64_t (**)(void *))(*v4 + 56))(v4);
    (*(void (**)(void *, uint64_t))(*v4 + 16))(v4, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"No audio stream for screening", 29);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    if (!a2) {
      return;
    }
  }
  long long v17 = (RTPManager *)*((void *)this + 47);
  if (v17)
  {
    RTPManager::handleAudioReadyEvent(v17);
  }
}

void BambiCall::handleEmptyInvite(BambiCall *this)
{
  uint64_t v1 = *((void *)this + 25);
  if (v1)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v15 = &unk_1F20B2680;
    uint64_t v16 = &_bambiDomain;
    uint64_t v17 = 0;
    uint64_t v2 = *(void **)(v1 + 1904);
    uint64_t v3 = (void *)(v1 + 1912);
    if (v2 != (void *)(v1 + 1912))
    {
      uint64_t v5 = (char *)this + 80;
      while (1)
      {
        uint64_t v6 = v2[5];
        if (*(_WORD *)(v6 + 56))
        {
          if ((*((_DWORD *)this + 112) & 0xFFFFFFFE) == 2)
          {
            BambiCall::setMediaDirection((uint64_t)this, v2[5], 1, 1);
          }
          else
          {
            BambiCall::setMediaDirection((uint64_t)this, v2[5], 1, 0);
            uint64_t v8 = *((void *)this + 47);
            uint64_t v9 = *(void *)(v6 + 32);
            uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 26);
            uint64_t v27 = (void *)*((void *)this + 25);
            uint64_t v28 = v10;
            if (v10) {
              atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            RTPManager::updateSdpForSession(v8, v9, (uint64_t *)&v27, *((_DWORD *)this + 113));
            if (v28) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v28);
            }
            RTPManager::activateSessionWithId(*((void *)this + 47), *(uint64_t **)(v6 + 32), *((_DWORD *)this + 113), 1);
          }
        }
        else
        {
          uint64_t v7 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))(v5);
          (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))(v5, v7);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleEmptyInvite: Ignoring disabled media type ", 48);
          *(unsigned char *)(v7 + 17) = 0;
          (*(void (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, &v27);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v7 + 17) = 0;
          if (v29 < 0) {
            operator delete(v27);
          }
        }
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v21 = &unk_1F20B2680;
        long long v22 = &_bambiDomain;
        int v23 = 0;
        ImsResult::operator=((uint64_t)&v15, (uint64_t)&v21);
        ImsResult::~ImsResult((ImsResult *)&v21);
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v21 = &unk_1F20B2680;
        long long v22 = &_bambiDomain;
        int v23 = 0;
        if (v16 != &_bambiDomain) {
          break;
        }
        int v11 = v17;
        ImsResult::~ImsResult((ImsResult *)&v21);
        if (!v11)
        {
          int v12 = (void *)v2[1];
          if (v12)
          {
            do
            {
              BOOL v13 = v12;
              int v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              BOOL v13 = (void *)v2[2];
              BOOL v14 = *v13 == (void)v2;
              uint64_t v2 = v13;
            }
            while (!v14);
          }
          uint64_t v2 = v13;
          if (v13 != v3) {
            continue;
          }
        }
        goto LABEL_24;
      }
      ImsResult::~ImsResult((ImsResult *)&v21);
    }
LABEL_24:
    ImsResult::~ImsResult((ImsResult *)&v15);
  }
}

void sub_1C539BEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  long long v20 = *(std::__shared_weak_count **)(v18 - 104);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

void BambiCall::spamInfo(BambiCall *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 49);
  if (v2)
  {
    *(void *)a2 = *(void *)(v2 + 1648);
    uint64_t v3 = (std::string *)(a2 + 8);
    if (*(char *)(v2 + 1679) < 0)
    {
      std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(v2 + 1656), *(void *)(v2 + 1664));
    }
    else
    {
      uint64_t v4 = (long long *)(v2 + 1656);
      long long v5 = *v4;
      v3->__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
      *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v5;
    }
  }
  else
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

void BambiCall::remoteCompanyName(BambiCall *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 49);
  if (v2)
  {
    if (*(char *)(v2 + 1727) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 1704), *(void *)(v2 + 1712));
    }
    else
    {
      uint64_t v3 = (long long *)(v2 + 1704);
      long long v4 = *v3;
      a2->__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_35_0);
  }
}

void BambiCall::remoteImageUrl(BambiCall *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 49);
  if (v2)
  {
    if (*(char *)(v2 + 1703) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 1680), *(void *)(v2 + 1688));
    }
    else
    {
      uint64_t v3 = (long long *)(v2 + 1680);
      long long v4 = *v3;
      a2->__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_35_0);
  }
}

void BambiCall::startEPSWatchdogTimer(int8x8_t *this)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)this[46];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      long long v4 = v3;
      long long v5 = (SipStack *)this[45];
      if (v5)
      {
        uint64_t v6 = (ImsPrefs *)SipStack::prefs(v5);
        EPSFallbackTimerSecondsKey = (void **)ImsPrefs::getEPSFallbackTimerSecondsKey(v6);
        ImsPrefs::intValue(v6, EPSFallbackTimerSecondsKey);
        int8x8_t v9 = this[23];
        uint64_t v8 = (std::__shared_weak_count *)this[24];
        if (v8)
        {
          atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(&this[28], "EPSWatchdogTimer"))
        {
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v10 = operator new(0x20uLL);
          *uint64_t v10 = &unk_1F20C6478;
          v10[1] = this;
          v10[2] = v9;
          _OWORD v10[3] = v8;
          v11[3] = v10;
          SipTimerContainer::startTimer(this + 27, (uint64_t)"EPSWatchdogTimer");
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v11);
        }
        if (v8)
        {
          std::__shared_weak_count::__release_weak(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C539C164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::isConferenceCall(BambiCall *this)
{
  return 0;
}

BOOL BambiCall::isParticipant(BambiCall *this)
{
  return *((void *)this + 185) != 0;
}

uint64_t BambiCall::isUnlistedEmergency(BambiCall *this)
{
  return 0;
}

void *std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C62F8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C62F8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  CFTypeRef result = (char *)operator new(0x20uLL);
  *(void *)CFTypeRef result = &unk_1F20C62F8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C62F8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C539C420(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::target_type()
{
}

void std::__shared_ptr_emplace<SDPSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C6540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SDPSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C6540;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<SDPSession>::__on_zero_shared(uint64_t a1)
{
}

void *std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C6378;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C6378;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  CFTypeRef result = (char *)operator new(0x20uLL);
  *(void *)CFTypeRef result = &unk_1F20C6378;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C6378;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C539C748(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C63F8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C63F8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  CFTypeRef result = (char *)operator new(0x20uLL);
  *(void *)CFTypeRef result = &unk_1F20C63F8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C63F8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C539C9F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void *std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C6478;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C6478;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  CFTypeRef result = (char *)operator new(0x20uLL);
  *(void *)CFTypeRef result = &unk_1F20C6478;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C6478;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C539CC98(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void LazuliMessageEncodingMap::LazuliMessageEncodingMap(LazuliMessageEncodingMap *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  uint64_t v2 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v13, "");
  LazuliMessageIdHeader::create(v2, &v15);
  long long v16 = v15;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, &v16);
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
  if (v14 < 0) {
    operator delete((void *)v13);
  }
  uint64_t v3 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v13, "");
  LazuliSuccessReportHeader::create(v3, &v15);
  long long v12 = v15;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, &v12);
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
  if (v14 < 0) {
    operator delete((void *)v13);
  }
  long long v4 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v13, "");
  LazuliFailureReportHeader::create(v4, &v15);
  long long v11 = v15;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, &v11);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  if (v14 < 0) {
    operator delete((void *)v13);
  }
  LazuliByteRangeHeader::create(&v13);
  long long v10 = v13;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, &v10);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(&v13, "");
  LazuliContentTypeHeader::create((uint64_t)v5, &v15);
  long long v9 = v15;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, &v9);
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
  if (v14 < 0) {
    operator delete((void *)v13);
  }
  LazuliStatusHeader::create(0, (std::__shared_weak_count **)&v13);
  long long v8 = v13;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, &v8);
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  LazuliToPathHeader::create(&v13);
  long long v7 = v13;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, &v7);
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
  LazuliFromPathHeader::create(&v13);
  long long v6 = v13;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, &v6);
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
}

void sub_1C539CF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  *(void *)(v12 - 96) = v11;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 96));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v10);
  _Unwind_Resume(a1);
}

void LazuliMessageEncodingMap::addHeaderPrototype(uint64_t a1, long long *a2)
{
  memset(&__p, 0, sizeof(__p));
  uint64_t v4 = *(void *)a2;
  if (*(char *)(*(void *)a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 24), *(void *)(v4 + 32));
  }
  else {
    std::string __p = *(std::string *)(v4 + 24);
  }
  ims::lowerCase((char *)&__p);
  ims::chomp(&__p, "\r\n\t ", 3);
  p_p = &__p;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  uint64_t v7 = *(void *)a2;
  uint64_t v6 = *((void *)a2 + 1);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  long long v8 = (std::__shared_weak_count *)*((void *)v5 + 6);
  *((void *)v5 + 5) = v7;
  *((void *)v5 + 6) = v6;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::vector<std::shared_ptr<LazuliHeader>>::push_back[abi:ne180100]((uint64_t *)(a1 + 40), a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C539D0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LazuliMessageEncodingMap::createHeader(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  memset(&__str, 0, sizeof(__str));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __str = *(std::string *)a2;
  }
  ims::lowerCase((char *)&__str);
  ims::chomp(&__str, "\r\n\t ", 3);
  long long v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(a1, (unsigned __int8 *)&__str);
  if (v8)
  {
    (*(void (**)(void **__return_ptr))(**((void **)v8 + 5) + 72))(v16);
    uint64_t v10 = v16[0];
    long long v9 = (std::__shared_weak_count *)v16[1];
    uint64_t v11 = *(void *)(a3 + 8);
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
    }
    if (v11 && ((*(uint64_t (**)(void *, uint64_t))(*(void *)v16[0] + 56))(v16[0], a3) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "laz.decode");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v13 = ims::error((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Unable to decode header: ", 25);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, a3);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      *a4 = 0;
      a4[1] = 0;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    else
    {
      *a4 = v10;
      a4[1] = v9;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "laz.decode");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v12 = ims::error((uint64_t)v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"header not found: ", 18);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 32))(v12, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    *a4 = 0;
    a4[1] = 0;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C539D42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

SipHeader *SipAuthorizationHeader::SipAuthorizationHeader(SipHeader *a1, const SipHeader *a2)
{
  SipHeader::SipHeader(a1, a2);
  *uint64_t v4 = &unk_1F20C65A8;
  uint64_t v5 = *((void *)a2 + 8);
  if (v5) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  *((void *)a1 + 8) = v5;
  return a1;
}

{
  uint64_t v3;

  SipHeader::SipHeader(a1, a2);
  *(void *)uint64_t v3 = &unk_1F20C65A8;
  std::string::operator=((std::string *)(v3 + 8), (const std::string *)"Authorization");
  *((void *)a1 + 8) = 0;
  return a1;
}

void sub_1C539D540(_Unwind_Exception *a1)
{
  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

void sub_1C539D5A8(_Unwind_Exception *a1)
{
  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

void SipAuthorizationHeader::~SipAuthorizationHeader(SipAuthorizationHeader *this)
{
  *(void *)this = &unk_1F20C65A8;
  uint64_t v2 = *((void *)this + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  SipAuthorizationHeader::~SipAuthorizationHeader(this);
  JUMPOUT(0x1C878E320);
}

BOOL SipAuthorizationHeader::encodeValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (v1) {
    (*(void (**)(void))(*(void *)v1 + 72))(*(void *)(a1 + 64));
  }
  return v1 != 0;
}

BOOL SipAuthorizationHeader::setValueFromString(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = SipAuthScheme::createFromString(a2);
  if (v3) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 72))(v3);
  }
  *(void *)(a1 + 64) = v3;
  return v3 != 0;
}

void SipAuthorizationHeader::clone(SipAuthorizationHeader *this)
{
}

void sub_1C539D76C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40ADE1DEA6);
  _Unwind_Resume(a1);
}

void *ImsBlock::ImsBlock(void *a1, long long *a2, void *aBlock)
{
  *a1 = &unk_1F20C6658;
  uint64_t v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  a1[4] = 0;
  if (aBlock)
  {
    uint64_t v7 = _Block_copy(aBlock);
    long long v8 = (const void *)a1[4];
    a1[4] = v7;
    if (v8) {
      _Block_release(v8);
    }
  }
  return a1;
}

void ImsBlock::ImsBlock(ImsBlock *this, const LoggableString *a2)
{
  *(void *)this = &unk_1F20C6658;
  uint64_t v3 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *((void *)this + 4) = 0;
}

void ImsBlock::~ImsBlock(ImsBlock *this)
{
  *(void *)this = &unk_1F20C6658;
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    _Block_release(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  ImsBlock::~ImsBlock(this);
  JUMPOUT(0x1C878E320);
}

void *ImsCapturableBlock<std::shared_ptr<SipLockable>>::ImsCapturableBlock(void *a1, long long *a2, uint64_t *a3, void *aBlock)
{
  *ImsBlock::ImsBlock(a1, a2, aBlock) = &unk_1F20C6768;
  uint64_t v7 = *a3;
  long long v6 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  a1[5] = v7;
  a1[6] = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

void ImsDestructableBlock::~ImsDestructableBlock(ImsDestructableBlock *this)
{
  *(void *)this = &unk_1F20C6690;
  if (*((unsigned char *)this + 56)) {
    (*(void (**)(void))(*((void *)this + 8) + 16))();
  }
  uint64_t v2 = (const void *)*((void *)this + 8);
  if (v2) {
    _Block_release(v2);
  }
  ImsCapturableBlock<std::shared_ptr<SipLockable>>::~ImsCapturableBlock(this);
}

{
  uint64_t vars8;

  ImsDestructableBlock::~ImsDestructableBlock(this);
  JUMPOUT(0x1C878E320);
}

void ImsCapturableBlock<std::shared_ptr<SipLockable>>::~ImsCapturableBlock(ImsBlock *this)
{
  *(void *)this = &unk_1F20C6768;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  ImsBlock::~ImsBlock(this);
}

uint64_t ImsDestructableBlock::perform(ImsDestructableBlock *this)
{
  *((unsigned char *)this + 56) = 0;
  return (*(uint64_t (**)(void))(*((void *)this + 4) + 16))();
}

void ImsBlockQueue::~ImsBlockQueue(ImsBlockQueue *this)
{
  *(void *)this = &unk_1F20C6748;
  ImsBlockQueue::clearBlocks(this, 0);
  std::__list_imp<unsigned long long>::clear((void *)this + 11);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  uint64_t vars8;

  ImsBlockQueue::~ImsBlockQueue(this);
  JUMPOUT(0x1C878E320);
}

void ImsBlockQueue::clearBlocks(ImsBlockQueue *this, int a2)
{
  uint64_t v35 = 0;
  ImsLock::set((pthread_mutex_t *)((char *)this + 24), &v35, (uint64_t)&v36);
  ImsResult::~ImsResult((ImsResult *)&v36);
  uint64_t v36 = &v36;
  uint64_t v37 = &v36;
  uint64_t v38 = 0;
  long long v4 = (uint64_t *)((char *)this + 88);
  uint64_t v5 = *((void *)this + 12);
  if ((ImsBlockQueue *)v5 != (ImsBlockQueue *)((char *)this + 88))
  {
    do
    {
      if (!a2)
      {
LABEL_23:
        std::string::basic_string[abi:ne180100]<0>(__p, "util");
        std::string::basic_string[abi:ne180100]<0>(v31, "");
        uint64_t v17 = ims::debug((uint64_t)__p, (uint64_t)v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"flushing unexecuted block ", 26);
        *(unsigned char *)(v17 + 17) = 0;
        (*(void (**)(void, uint64_t))(**(void **)(v5 + 16) + 16))(*(void *)(v5 + 16), v17);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v17 + 17) = 0;
        if (v32 < 0) {
          operator delete(v31[0]);
        }
        if ((char)v34 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v18 = *(void *)(v5 + 16);
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        goto LABEL_29;
      }
      (*(void (**)(void **__return_ptr))(**(void **)(v5 + 16) + 24))(__p);
      unint64_t v6 = v34;
      if ((v34 & 0x80u) != 0) {
        unint64_t v6 = (unint64_t)__p[1];
      }
      if (v6 == 17)
      {
        uint64_t v7 = (void **)__p[0];
        if ((v34 & 0x80u) == 0) {
          uint64_t v7 = __p;
        }
        long long v8 = *v7;
        long long v9 = v7[1];
        int v10 = *((unsigned __int8 *)v7 + 16);
        BOOL v13 = v8 == (void *)0x6C436E4F6C6C6163 && v9 == (void *)0x75657551746E6569 && v10 == 101;
        if (((char)v34 & 0x80000000) == 0)
        {
LABEL_20:
          if (!v13) {
            goto LABEL_23;
          }
          goto LABEL_21;
        }
      }
      else
      {
        BOOL v13 = 0;
        if (((char)v34 & 0x80000000) == 0) {
          goto LABEL_20;
        }
      }
      operator delete(__p[0]);
      if (!v13) {
        goto LABEL_23;
      }
LABEL_21:
      char v14 = operator new(0x18uLL);
      uint64_t v15 = *(void *)(v5 + 16);
      v14[1] = &v36;
      v14[2] = v15;
      long long v16 = v36;
      void *v14 = v36;
      v16[1] = v14;
      uint64_t v36 = v14;
      ++v38;
LABEL_29:
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while ((uint64_t *)v5 != v4);
  }
  if (v4 != (uint64_t *)&v36)
  {
    long long v19 = v37;
    long long v20 = (uint64_t *)*((void *)this + 12);
    if (v37 != &v36 && v20 != v4)
    {
      do
      {
        v20[2] = v19[2];
        long long v19 = (void *)v19[1];
        long long v20 = (uint64_t *)v20[1];
      }
      while (v19 != &v36 && v20 != v4);
    }
    if (v20 == v4)
    {
      if (v19 != &v36)
      {
        long long v25 = operator new(0x18uLL);
        long long v26 = v25;
        *long long v25 = 0;
        v25[1] = 0;
        v25[2] = v19[2];
        uint64_t v27 = (void *)v19[1];
        uint64_t v28 = 1;
        if (v27 != &v36)
        {
          char v29 = v25;
          do
          {
            long long v25 = operator new(0x18uLL);
            *long long v25 = v29;
            v25[1] = 0;
            v25[2] = v27[2];
            v29[1] = v25;
            ++v28;
            uint64_t v27 = (void *)v27[1];
            char v29 = v25;
          }
          while (v27 != &v36);
        }
        uint64_t v30 = *((void *)this + 11);
        *(void *)(v30 + 8) = v26;
        *long long v26 = v30;
        *((void *)this + 11) = v25;
        v25[1] = v4;
        *((void *)this + 13) += v28;
      }
    }
    else
    {
      uint64_t v22 = *((void *)this + 11);
      uint64_t v23 = *v20;
      *(void *)(v23 + 8) = *(void *)(v22 + 8);
      **(void **)(v22 + 8) = v23;
      do
      {
        long long v24 = (uint64_t *)v20[1];
        --*((void *)this + 13);
        operator delete(v20);
        long long v20 = v24;
      }
      while (v24 != v4);
    }
  }
  cleanOldPrefs();
  std::__list_imp<unsigned long long>::clear(&v36);
  ImsLock::~ImsLock(&v35);
}

void sub_1C539DEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,pthread_mutex_t *a21,uint64_t a22)
{
}

void cleanOldPrefs(void)
{
  std::string::basic_string[abi:ne180100]<0>(&p_p, "audit");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v0 = ims::spam((uint64_t)&p_p, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v0 + 8), (uint64_t)"Cleaning up old prefs", 21);
  *(unsigned char *)(v0 + 17) = 0;
  uint64_t v1 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v0 + 64))(v0, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v0 + 17) = 0;
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(p_p);
  }
  uint64_t v18 = 0;
  long long v19 = 0;
  uint64_t v2 = (IPTelephonyManager *)IMSClientManager::instance(v1);
  IPTelephonyManager::getInstance(&v18, v2);
  if (v18)
  {
    uint64_t v3 = *(void *)(v18 + 168);
    if (v3)
    {
      std::string __p = 0;
      long long v21 = 0;
      unint64_t v22 = 0;
      BambiClient::sipStacks((BambiClient *)v3, (uint64_t *)&__p);
      long long v4 = *(_OWORD *)(v3 + 168);
      uint64_t v5 = *(void *)(v3 + 176);
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v6 = v21;
      if ((unint64_t)v21 >= v22)
      {
        long long v16 = v4;
        uint64_t v8 = (v21 - (unsigned char *)__p) >> 4;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 60) {
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v22 - (void)__p;
        if ((uint64_t)(v22 - (void)__p) >> 3 > v9) {
          unint64_t v9 = v10 >> 3;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        uint64_t v27 = &v22;
        uint64_t v12 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)&v22, v11);
        BOOL v13 = (char *)&v12[2 * v8];
        p_p = v12;
        long long v24 = v13;
        long long v26 = &v12[2 * v14];
        *(_OWORD *)BOOL v13 = v16;
        long long v25 = v13 + 16;
        std::vector<std::shared_ptr<SipStack>>::__swap_out_circular_buffer((uint64_t *)&__p, &p_p);
        uint64_t v7 = v21;
        std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((void **)&p_p);
      }
      else
      {
        *(void *)long long v21 = v4;
        *((void *)v6 + 1) = v5;
        uint64_t v7 = v6 + 16;
      }
      long long v21 = v7;
      long long v24 = 0;
      long long v25 = 0;
      p_p = (void **)&v24;
      for (i = (SipStack **)__p; i != (SipStack **)v7; i += 2)
      {
        SipStack::carrierIdentifier(*i, &v17);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&p_p, (void **)&v17.__r_.__value_.__l.__data_, (uint64_t)&v17);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
      }
      BambiPrefsManager::sanitize((void **)&p_p);
      std::__tree<std::string>::destroy((uint64_t)&p_p, v24);
      p_p = &__p;
      std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&p_p);
    }
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_1C539E1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **p_p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((void **)(v25 - 56));
  p_p = &__p;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(a1);
}

void ImsBlockQueue::addBlock(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = 0;
  ImsLock::set((pthread_mutex_t *)(a1 + 24), &v6, (uint64_t)&v7);
  ImsResult::~ImsResult((ImsResult *)&v7);
  std::string::basic_string[abi:ne180100]<0>(&v7, "util");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)&v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"queuing destructable block ", 27);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 40))(v3, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" (", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" block(s) already on queue)", 27);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  operator new();
}

void sub_1C539E5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,pthread_mutex_t *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  ImsLock::~ImsLock(&a22);
  _Unwind_Resume(a1);
}

void ___ZN13ImsBlockQueue8addBlockERK14LoggableStringNSt3__110shared_ptrI11SipLockableEEU13block_pointerFvvES8__block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (ImsBlockQueue *)a1[4];
    long long v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      char v5 = v4;
      if (a1[5]) {
        ImsBlockQueue::executeBlocks(v3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C539E6B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ImsBlockQueue::executeBlocks(ImsBlockQueue *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 24);
  v13[0] = 0;
  ImsLock::set((pthread_mutex_t *)((char *)this + 24), (pthread_mutex_t **)v13, (uint64_t)v15);
  ImsResult::~ImsResult((ImsResult *)v15);
  uint64_t v3 = *((void *)this + 13);
  ImsLock::~ImsLock((pthread_mutex_t **)v13);
  if (v3)
  {
    while (1)
    {
      v13[0] = 0;
      ImsLock::set(v2, (pthread_mutex_t **)v13, (uint64_t)v15);
      ImsResult::~ImsResult((ImsResult *)v15);
      uint64_t v4 = *((void *)this + 13);
      if (!v4) {
        break;
      }
      char v5 = (uint64_t *)*((void *)this + 12);
      uint64_t v6 = v5[2];
      uint64_t v7 = *v5;
      *(void *)(v7 + 8) = v5[1];
      *(void *)v5[1] = v7;
      *((void *)this + 13) = v4 - 1;
      operator delete(v5);
      ImsLock::~ImsLock((pthread_mutex_t **)v13);
      if (v6)
      {
        std::string::basic_string[abi:ne180100]<0>(v15, "util");
        std::string::basic_string[abi:ne180100]<0>(v13, "");
        uint64_t v8 = ims::debug((uint64_t)v15, (uint64_t)v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"performing block ", 17);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v6 + 24))(__p, v6);
        (*(void (**)(uint64_t, void **))(*(void *)v8 + 40))(v8, __p);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        if (v12 < 0) {
          operator delete(__p[0]);
        }
        if (v14 < 0) {
          operator delete(v13[0]);
        }
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      if (!--v3) {
        goto LABEL_14;
      }
    }
    ImsLock::~ImsLock((pthread_mutex_t **)v13);
  }
LABEL_14:
  v13[0] = 0;
  ImsLock::set(v2, (pthread_mutex_t **)v13, (uint64_t)v15);
  ImsResult::~ImsResult((ImsResult *)v15);
  uint64_t v9 = *((void *)this + 13);
  ImsLock::~ImsLock((pthread_mutex_t **)v13);
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "util");
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    uint64_t v10 = ims::debug((uint64_t)v15, (uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"leaving ", 8);
    *(unsigned char *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" new blocks for later", 21);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
  else
  {
    cleanOldPrefs();
  }
}

void sub_1C539EA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c38_ZTSNSt3__18weak_ptrI13ImsBlockQueueEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__18weak_ptrI13ImsBlockQueueEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ImsBlock::loggableName(ImsBlock *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

uint64_t ImsBlock::perform(ImsBlock *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 4) + 16))();
}

uint64_t std::vector<std::shared_ptr<SipStack>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<SipStack>>,std::reverse_iterator<std::shared_ptr<SipStack>*>,std::reverse_iterator<std::shared_ptr<SipStack>*>,std::reverse_iterator<std::shared_ptr<SipStack>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<SipStack>>,std::reverse_iterator<std::shared_ptr<SipStack>*>,std::reverse_iterator<std::shared_ptr<SipStack>*>,std::reverse_iterator<std::shared_ptr<SipStack>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  void v12[2] = &v14;
  v12[3] = 1;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v14 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v14;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<SipStack>>,std::reverse_iterator<std::shared_ptr<SipStack>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<SipStack>>,std::reverse_iterator<std::shared_ptr<SipStack>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<SipStack> const>,std::reverse_iterator<std::shared_ptr<SipStack> const*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void ImsCapturableBlock<std::shared_ptr<SipLockable>>::~ImsCapturableBlock(ImsBlock *a1)
{
  ImsCapturableBlock<std::shared_ptr<SipLockable>>::~ImsCapturableBlock(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t ImsCapturableBlock<std::shared_ptr<SipLockable>>::perform(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

std::string *SipClientInviteTransactionState::SipClientInviteTransactionState(std::string *a1, std::string::size_type *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  std::string::size_type v5 = *a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTransactionState::SipTransactionState(a1, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20C67D0;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20C6850;
  return a1;
}

void sub_1C539ECF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipClientInviteTransactionState::sendAckForResponse(SipClientInviteTransactionState *this, const SipResponse *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v3)
  {
    std::string::size_type v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = (void *)*((void *)this + 26);
      if (v7)
      {
        if (v8)
        {
          long long v9 = v8;
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v10 = (char *)v8 + 176;
          uint64_t v11 = (*(uint64_t (**)(uint64_t))(*((void *)v8 + 22) + 64))((uint64_t)v8 + 176);
          (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))(v10, v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"sending ACK from transaction", 28);
          *(unsigned char *)(v11 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v11 + 17) = 0;
          SipClientInviteTransaction::sendAckForResponse(v9, a2, (uint64_t)v17);
          ImsResult::~ImsResult((ImsResult *)v17);
          char v12 = v6;
        }
        else
        {
          uint64_t v13 = (*(uint64_t (**)(void *))(v7[22] + 56))(v7 + 22);
          (*(void (**)(void *, uint64_t))(v7[22] + 16))(v7 + 22, v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"How did a ", 10);
          *(unsigned char *)(v13 + 17) = 0;
          long long v14 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
          size_t v15 = strlen(v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)v14, v15);
          *(unsigned char *)(v13 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" end up in a ", 13);
          *(unsigned char *)(v13 + 17) = 0;
          size_t v16 = strlen((const char *)((unint64_t)"NSt3__110shared_ptrI14SipTransactionEE" & 0x7FFFFFFFFFFFFFFFLL));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (unint64_t)"NSt3__110shared_ptrI14SipTransactionEE" & 0x7FFFFFFFFFFFFFFFLL, v16);
          *(unsigned char *)(v13 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"?", 1);
          *(unsigned char *)(v13 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          char v12 = 0;
          *(unsigned char *)(v13 + 17) = 0;
        }
        (*(void (**)(void *, uint64_t))(*v7 + 32))(v7, 4);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C539F014(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipClientInviteCallingTransactionState::SipClientInviteCallingTransactionState(uint64_t a1, std::string::size_type *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = (std::string::size_type)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipClientInviteTransactionState::SipClientInviteTransactionState((std::string *)a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_1F20C6880;
  *(void *)(a1 + 8) = &unk_1F20C6908;
  *(_DWORD *)(a1 + 224) = 1;
  return a1;
}

void sub_1C539F0E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipClientInviteCallingTransactionState::enterState(SipClientInviteCallingTransactionState *this)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  *((_DWORD *)this + 56) = 1;
  uint64_t v3 = *((void *)this + 24);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_1F20C6BD0;
  v4[1] = this;
  v4[2] = v3;
  v4[3] = v2;
  v14[3] = v4;
  SipTimerContainer::startSipTimer((int8x8_t *)this + 3, (uint64_t)&SipTimers::kTimerB, (uint64_t)v14, 0);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v14);
  std::string::size_type v5 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *((void *)this + 26);
      if (v8)
      {
        if (SipTransaction::retryEnabled(*((SipTransaction **)this + 26)))
        {
          if (v2) {
            atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          long long v9 = operator new(0x20uLL);
          void *v9 = &unk_1F20C6BD0;
          v9[1] = this;
          v9[2] = v3;
          v9[3] = v2;
          uint64_t v13[3] = v9;
          SipTimerContainer::startSipTimer((int8x8_t *)this + 3, (uint64_t)&SipTimers::kTimerA, (uint64_t)v13, *((_DWORD *)this + 56));
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v13);
        }
        else
        {
          uint64_t v11 = *(void *)(v8 + 176);
          uint64_t v10 = v8 + 176;
          uint64_t v12 = (*(uint64_t (**)(uint64_t))(v11 + 64))(v10);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v12);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"retry is not enabled.  Not setting Timer A.", 43);
          *(unsigned char *)(v12 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v12 + 17) = 0;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1C539F330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

void SipClientInviteCallingTransactionState::handleTimer(int8x8_t *a1, unsigned __int8 *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[27];
  if (v3)
  {
    std::string::size_type v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = (SipTransaction *)a1[26];
      if (v7)
      {
        if (operator==(a2, (uint64_t)&SipTimers::kTimerA))
        {
          if (SipTransaction::retryEnabled(v7))
          {
            (*(void (**)(void *__return_ptr, SipTransaction *))(*(void *)v7 + 128))(v14, v7);
            ImsResult::~ImsResult((ImsResult *)v14);
            int8x8_t v9 = a1[24];
            uint64_t v8 = (std::__shared_weak_count *)a1[25];
            if (v8)
            {
              atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              a1[28].i32[0] *= 2;
              atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            else
            {
              a1[28].i32[0] *= 2;
            }
            size_t v16 = 0;
            uint64_t v13 = operator new(0x20uLL);
            *uint64_t v13 = &unk_1F20C6C50;
            v13[1] = a1;
            v13[2] = v9;
            uint64_t v13[3] = v8;
            size_t v16 = v13;
            SipTimerContainer::startSipTimer(a1 + 3, (uint64_t)&SipTimers::kTimerA, (uint64_t)v15, a1[28].i32[0]);
            std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v15);
            if (v8)
            {
              std::__shared_weak_count::__release_weak(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          else
          {
            uint64_t v11 = *((void *)v7 + 22);
            uint64_t v10 = (char *)v7 + 176;
            uint64_t v12 = (*(uint64_t (**)(char *))(v11 + 64))(v10);
            (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))(v10, v12);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"retry is no longer enabled. Not resending INVITE or resetting Timer A.", 70);
            *(unsigned char *)(v12 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v12 + 17) = 0;
          }
        }
        else if (operator==(a2, (uint64_t)&SipTimers::kTimerB))
        {
          SipTransaction::handleTimeout(v7);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C539F5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v11)
  {
    std::__shared_weak_count::__release_weak(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

BOOL SipClientInviteCallingTransactionState::handleResponse(SipClientInviteCallingTransactionState *this, const SipResponse *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v3)
  {
    std::string::size_type v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 26);
      BOOL v8 = v7 != 0;
      if (v7)
      {
        unsigned int v9 = *((_DWORD *)a2 + 22);
        if (v9 / 0x64 == 1)
        {
          uint64_t v10 = 3;
          goto LABEL_11;
        }
        if (v9 / 0x64 == 2)
        {
          uint64_t v10 = 5;
LABEL_11:
          (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, v10);
          goto LABEL_12;
        }
        if (v9 >= 0x12C)
        {
          SipClientInviteTransactionState::sendAckForResponse(this, a2);
          uint64_t v10 = 4;
          goto LABEL_11;
        }
      }
LABEL_12:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v8;
    }
  }
  return 0;
}

void sub_1C539F710(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipClientInviteCallingTransactionState::handleConnectionError(int8x8_t *this)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  int8x8_t v3 = this[24];
  uint64_t v2 = (std::__shared_weak_count *)this[25];
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    this[28].i32[0] = 1;
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    this[28].i32[0] = 1;
  }
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_1F20C6CD0;
  v4[1] = this;
  v4[2] = v3;
  v4[3] = v2;
  v5[3] = v4;
  SipTimerContainer::startSipTimer(this + 3, (uint64_t)&SipTimers::kTimerA, (uint64_t)v5, this[28].i32[0]);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v5);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1C539F810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

std::string *SipClientInviteProceedingTransactionState::SipClientInviteProceedingTransactionState(std::string *a1, std::string::size_type *a2)
{
  int8x8_t v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = (std::string::size_type)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipClientInviteTransactionState::SipClientInviteTransactionState(a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20C6938;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20C69C0;
  return a1;
}

void sub_1C539F8E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipClientInviteProceedingTransactionState::handleResponse(SipClientInviteProceedingTransactionState *this, const SipResponse *a2)
{
  int8x8_t v3 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v3)
  {
    std::string::size_type v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = (void *)*((void *)this + 26);
      BOOL v8 = v7 != 0;
      if (!v7) {
        goto LABEL_12;
      }
      unsigned int v9 = *((_DWORD *)a2 + 22);
      if (v9 / 0x64 == 1) {
        goto LABEL_12;
      }
      if (v9 / 0x64 == 2)
      {
        uint64_t v10 = 5;
      }
      else
      {
        if (v9 < 0x12C)
        {
          uint64_t v12 = v7[22];
          uint64_t v11 = v7 + 22;
          uint64_t v13 = (*(uint64_t (**)(void *))(v12 + 56))(v11);
          (*(void (**)(void *, uint64_t))(*v11 + 16))(v11, v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"What the heck is this?", 22);
          *(unsigned char *)(v13 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v13 + 17) = 0;
          uint64_t v14 = (*(uint64_t (**)(void *))(*v11 + 56))(v11);
          (*(void (**)(void *, uint64_t))(*v11 + 16))(v11, v14);
          (*(void (**)(const SipResponse *, uint64_t))(*(void *)a2 + 16))(a2, v14);
          goto LABEL_12;
        }
        SipClientInviteTransactionState::sendAckForResponse(this, a2);
        uint64_t v10 = 4;
      }
      (*(void (**)(void *, uint64_t))(*v7 + 32))(v7, v10);
LABEL_12:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v8;
    }
  }
  return 0;
}

void sub_1C539FB10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *SipClientInviteCompletedTransactionState::SipClientInviteCompletedTransactionState(std::string *a1, std::string::size_type *a2)
{
  int8x8_t v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = (std::string::size_type)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipClientInviteTransactionState::SipClientInviteTransactionState(a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20C69F0;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20C6A78;
  return a1;
}

void sub_1C539FBBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipClientInviteCompletedTransactionState::enterState(int8x8_t *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)this[27];
  if (v2)
  {
    int8x8_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int8x8_t v5 = this[26];
      if (!*(void *)&v5)
      {
LABEL_19:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
      int8x8_t v7 = this[24];
      uint64_t v6 = (std::__shared_weak_count *)this[25];
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v8 = *(std::__shared_weak_count **)(*(void *)&v5 + 88);
      if (v8)
      {
        uint64_t v9 = *(void *)(*(void *)&v5 + 80);
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v10 = std::__shared_weak_count::lock(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (v10 && v9 && (*(unsigned int (**)(uint64_t))(*(void *)v9 + 72))(v9))
        {
          if (byte_1EBBDB5C0[23] < 0) {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)byte_1EBBDB5C0, *(std::string::size_type *)&byte_1EBBDB5C0[8]);
          }
          else {
            std::string __p = *(std::string *)byte_1EBBDB5C0;
          }
          if (v6) {
            atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          size_t v16 = 0;
          uint64_t v12 = operator new(0x20uLL);
          void *v12 = &unk_1F20C6D50;
          v12[1] = this;
          void v12[2] = v7;
          v12[3] = v6;
          size_t v16 = v12;
          SipTimerContainer::startTimer(this + 3, (uint64_t)&__p);
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v15);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
LABEL_16:
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_17:
          if (v6)
          {
            std::__shared_weak_count::__release_weak(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = operator new(0x20uLL);
      void *v11 = &unk_1F20C6D50;
      v11[1] = this;
      v11[2] = v7;
      v11[3] = v6;
      v14[3] = v11;
      SipTimerContainer::startSipTimer(this + 3, (uint64_t)&SipTimers::kTimerD, (uint64_t)v14, 0);
      std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v14);
      if (!v10) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
}

void sub_1C539FE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (v20)
  {
    std::__shared_weak_count::__release_weak(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

void SipClientInviteCompletedTransactionState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  if (operator==(a2, (uint64_t)&SipTimers::kTimerD))
  {
    int8x8_t v3 = *(std::__shared_weak_count **)(a1 + 216);
    if (v3)
    {
      uint64_t v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        int8x8_t v5 = v4;
        uint64_t v6 = *(void *)(a1 + 208);
        if (v6) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 7);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void sub_1C539FF50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipClientInviteCompletedTransactionState::handleResponse(SipClientInviteCompletedTransactionState *this, const SipResponse *a2)
{
  if (*((_DWORD *)a2 + 22) < 0x12Cu)
  {
    int8x8_t v3 = (std::__shared_weak_count *)*((void *)this + 27);
    if (v3)
    {
      uint64_t v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        int8x8_t v5 = v4;
        uint64_t v6 = *((void *)this + 26);
        if (v6)
        {
          uint64_t v8 = *(void *)(v6 + 176);
          uint64_t v7 = v6 + 176;
          uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 64))(v7);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"ignoring non-error response", 27);
          *(unsigned char *)(v9 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v9 + 17) = 0;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
  else
  {
    SipClientInviteTransactionState::sendAckForResponse(this, a2);
  }
  return 0;
}

void sub_1C53A0078(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *SipClientInviteTerminationPendingTransactionState::SipClientInviteTerminationPendingTransactionState(std::string *a1, std::string::size_type *a2)
{
  int8x8_t v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = (std::string::size_type)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipClientInviteTransactionState::SipClientInviteTransactionState(a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20C6AA8;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20C6B28;
  return a1;
}

void sub_1C53A0124(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipClientInviteTerminationPendingTransactionState::handleResponse(SipClientInviteTerminationPendingTransactionState *this, const SipResponse *a2)
{
  if (*((_DWORD *)a2 + 22) >= 0x12Cu)
  {
    SipClientInviteTransactionState::sendAckForResponse(this, a2);
    return 0;
  }
  if ((unsigned __int16)*((_DWORD *)a2 + 22) - 200 < 0x64) {
    return 1;
  }
  uint64_t result = *((void *)this + 27);
  if (result)
  {
    uint64_t result = (uint64_t)std::__shared_weak_count::lock((std::__shared_weak_count *)result);
    if (result)
    {
      uint64_t v4 = (std::__shared_weak_count *)result;
      uint64_t v5 = *((void *)this + 26);
      if (v5)
      {
        uint64_t v7 = *(void *)(v5 + 176);
        uint64_t v6 = v5 + 176;
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 64))(v6);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"ignoring ", 9);
        *(unsigned char *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" response", 9);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      return 0;
    }
  }
  return result;
}

void sub_1C53A029C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipClientInviteCallingTransactionState::~SipClientInviteCallingTransactionState(SipClientInviteCallingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipClientInviteCallingTransactionState::id(SipClientInviteCallingTransactionState *this)
{
  return 2;
}

void non-virtual thunk to'SipClientInviteCallingTransactionState::~SipClientInviteCallingTransactionState(SipClientInviteCallingTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipClientInviteCallingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipClientInviteProceedingTransactionState::~SipClientInviteProceedingTransactionState(SipClientInviteProceedingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipClientInviteProceedingTransactionState::id(SipClientInviteProceedingTransactionState *this)
{
  return 3;
}

void non-virtual thunk to'SipClientInviteProceedingTransactionState::~SipClientInviteProceedingTransactionState(SipClientInviteProceedingTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipClientInviteProceedingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipClientInviteCompletedTransactionState::~SipClientInviteCompletedTransactionState(SipClientInviteCompletedTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipClientInviteCompletedTransactionState::id(SipClientInviteCompletedTransactionState *this)
{
  return 4;
}

void non-virtual thunk to'SipClientInviteCompletedTransactionState::~SipClientInviteCompletedTransactionState(SipClientInviteCompletedTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipClientInviteCompletedTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipClientInviteTerminationPendingTransactionState::~SipClientInviteTerminationPendingTransactionState(SipClientInviteTerminationPendingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipClientInviteTerminationPendingTransactionState::id(SipClientInviteTerminationPendingTransactionState *this)
{
  return 5;
}

void non-virtual thunk to'SipClientInviteTerminationPendingTransactionState::~SipClientInviteTerminationPendingTransactionState(SipClientInviteTerminationPendingTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipClientInviteTerminationPendingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipClientInviteTransactionState::~SipClientInviteTransactionState(SipClientInviteTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipTransactionState::id(SipTransactionState *this)
{
  return 0;
}

void non-virtual thunk to'SipClientInviteTransactionState::~SipClientInviteTransactionState(SipClientInviteTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipClientInviteTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C6BD0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C6BD0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C6BD0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C6BD0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C53A07A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C6C50;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C6C50;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C6C50;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C6C50;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C53A0A4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void *std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C6CD0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C6CD0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C6CD0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C6CD0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C53A0CF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C6D50;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C6D50;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C6D50;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C6D50;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C53A0F9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void XcapUri::XcapUri(XcapUri *this, const XcapDocumentSelector *a2, const XcapNodeSelector *a3)
{
}

void sub_1C53A105C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*(void **)(v1 + 40));
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XcapUri::constructUri(XcapUri *this)
{
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  long long v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  memset(v12, 0, sizeof(v12));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/", 1);
  uint64_t v2 = *(XcapDocumentSelector **)this;
  if (*(char *)(*(void *)this + 47) < 0)
  {
    if (!*((void *)v2 + 4)) {
      goto LABEL_23;
    }
  }
  else if (!*(unsigned char *)(*(void *)this + 47))
  {
    goto LABEL_23;
  }
  XcapDocumentSelector::asString(v2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  if (*v5 || v5[1])
  {
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/", 1);
    XcapNodeSelector::fetchPath(*((XcapNodeSelector **)this + 1), &__p);
    uint64_t v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    uint64_t v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(__p.__r_.__value_.__r.__words[2])
       : __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_23:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12 + 8, &__p);
  uint64_t v9 = (void **)((char *)this + 16);
  if (*((char *)this + 39) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)uint64_t v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *((void *)this + 4) = *((void *)&__p.__r_.__value_.__l + 2);
  XcapNodeSelector::fetchQuery(*((XcapNodeSelector **)this + 1), &__p);
  std::string::operator=((std::string *)((char *)this + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)&v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(*(void *)&v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v12[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v16);
}

void sub_1C53A1308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void XcapUri::~XcapUri(XcapUri *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    if (*(char *)(v2 + 47) < 0) {
      operator delete(*(void **)(v2 + 24));
    }
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C878E320](v2, 0x1012C403467C318);
  }
  uint64_t v3 = (XcapNodeSelector *)*((void *)this + 1);
  if (v3)
  {
    XcapNodeSelector::~XcapNodeSelector(v3);
    MEMORY[0x1C878E320]();
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

ImsOutStream *XcapUri::log(XcapDocumentSelector **this, ImsOutStream *a2)
{
  if (*this)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Domain Selector: ", 17);
    *((unsigned char *)a2 + 17) = 0;
    XcapDocumentSelector::asString(*this, __p);
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 32))(a2, __p);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (this[1])
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Node Selector: ", 15);
      *((unsigned char *)a2 + 17) = 0;
      XcapNodeSelector::asString(this[1], __p);
      (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 32))(a2, __p);
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return a2;
}

void sub_1C53A1568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipIdString::SipIdString(SipIdString *this)
{
  *(void *)this = &unk_1F20C6DD0;
  uint64_t v1 = (char *)this + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_19);
  ObfuscatedString::ObfuscatedString((uint64_t)v1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C53A1600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipIdString::set(uint64_t a1, const std::string *a2)
{
  ObfuscatedString::ObfuscatedString((uint64_t)__p, a2);
  uint64_t v3 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*v3);
  }
  *(_OWORD *)uint64_t v3 = *(_OWORD *)__p;
  *(void *)(a1 + 24) = v7;
  HIBYTE(v7) = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t v4 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*v4);
    int v5 = SHIBYTE(v7);
    *(_OWORD *)uint64_t v4 = v8;
    *(void *)(a1 + 48) = v9;
    HIBYTE(v9) = 0;
    LOBYTE(v8) = 0;
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v4 = v8;
    *(void *)(a1 + 48) = v9;
  }
}

void SipCallId::generate(SipCallId *this)
{
  v1[0] = 0;
  v1[1] = 0;
  ImsRandomNumberGenerator<unsigned char>::ImsRandomNumberGenerator(v1);
}

void sub_1C53A17B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator((void *)(v15 - 32));
  _Unwind_Resume(a1);
}

void SipSessionId::generateFromCallId(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    v3[0] = 0;
    v3[1] = 0;
    ImsRandomNumberGenerator<unsigned char>::ImsRandomNumberGenerator(v3);
  }
}

void sub_1C53A19A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (*(char *)(v22 - 49) < 0) {
    operator delete(*(void **)(v22 - 72));
  }
  ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator((void *)(v22 - 48));
  _Unwind_Resume(a1);
}

void SipIdString::~SipIdString(void **this)
{
  *this = &unk_1F20C6DD0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C6DD0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t SipIdString::log(uint64_t a1, uint64_t a2)
{
  return a2;
}

std::string *SipIdString::loggableName@<X0>(SipIdString *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (const std::string *)((char *)this + 8);
  ObfuscatedString::str((SipIdString *)((char *)this + 8));
  return LoggableString::LoggableString(a2, v3);
}

uint64_t QMISipLogger::procedureForInstance(QMISipLogger *this, unsigned int a2)
{
  unsigned int v12 = a2;
  uint64_t v3 = (uint64_t **)((char *)this + 248);
  uint64_t v4 = (char *)*((void *)this + 32);
  if (v4)
  {
    int v5 = (char *)this + 256;
    char v6 = (char *)this + 256;
    do
    {
      unsigned int v7 = *((_DWORD *)v4 + 7);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = (char **)v4;
      }
      else {
        uint64_t v9 = (char **)(v4 + 8);
      }
      if (v8) {
        char v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != v5 && *((_DWORD *)v6 + 7) <= a2) {
      return *((unsigned __int16 *)std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, a2, &v12)+ 16);
    }
  }
  uint64_t v10 = std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, a2, &v12);
  uint64_t result = 0;
  *((_WORD *)v10 + 16) = 0;
  return result;
}

void QMISipLogger::reportHighestProcedure(QMISipLogger *this, unsigned int a2)
{
  unsigned int v3 = __clz(QMISipLogger::procedureForInstance(this, a2) | 1) ^ 0x1F;
  unsigned int v18 = v3;
  uint64_t v4 = (*(uint64_t (**)(QMISipLogger *))(*(void *)this + 64))(this);
  (*(void (**)(QMISipLogger *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Highest procedure is ", 21);
  *(unsigned char *)(v4 + 17) = 0;
  ims::toString<nas::ProcedureType>((int *)&v18, &__p);
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" for instance ", 14);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v21 < 0) {
    operator delete(__p);
  }
  if (*((unsigned char *)this + 192))
  {
    *(_OWORD *)size_t v16 = 0u;
    long long v17 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v16);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 0x40000000;
    v14[2] = ___ZN12QMISipLogger22reportHighestProcedureEj_block_invoke;
    v14[3] = &__block_descriptor_tmp_8;
    unsigned int v15 = v3;
    int v5 = (const void **)v16[1];
    if (v16[1] != (void *)v17)
    {
      while (*((unsigned char *)*v5 + 8) != 1)
      {
        if (++v5 == (const void **)v17) {
          goto LABEL_11;
        }
      }
    }
    if (v5 == (const void **)v17) {
LABEL_11:
    }
      operator new();
    if (!v6) {
      __cxa_bad_cast();
    }
    ___ZN12QMISipLogger22reportHighestProcedureEj_block_invoke((uint64_t)v14, v6 + 3);
    unsigned int v12 = 0;
    uint64_t v13 = 0;
    uint64_t v7 = *(void *)(*((void *)this + 34) + 240);
    if (v7)
    {
      BOOL v8 = *(const void **)(v7 + 8);
      uint64_t v9 = *(std::__shared_weak_count **)(v7 + 16);
      long long v20 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v8
      {
        unsigned int v12 = v10;
        uint64_t v13 = v9;
        p_p = &__p;
      }
      else
      {
        p_p = (void **)&v12;
      }
      std::string *p_p = 0;
      p_p[1] = 0;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v12 && v12[96])
      {
        qmi::ClientRouter::get();
        operator new();
      }
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v16);
  }
}

void sub_1C53A2194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  if (a11) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v32, a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12QMISipLogger22reportHighestProcedureEj_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void QMISipLogger::recordProcedure(uint64_t **this, void *a2, int a3, int a4, int a5)
{
  char v7 = a3;
  int v28 = a3;
  uint64_t v11 = *a2;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v11)
  {
    unsigned int v12 = *(_DWORD *)(v11 + 4100);
    if (!v10) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unsigned int v12 = 0;
  if (v10) {
LABEL_5:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_6:
  unsigned int v27 = v12;
  int v13 = QMISipLogger::procedureForInstance((QMISipLogger *)this, v12);
  if (!ims::AccessNetwork::isWifi((ims::AccessNetwork *)(*a2 + 3160)) || a5 != 0)
  {
    unsigned int v15 = std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(this + 31, v12, &v27);
    int v16 = *((unsigned __int16 *)v15 + 16);
    int v17 = v16 & ~(1 << v7);
    int v18 = v16 | (1 << v7);
    if (!a4) {
      LOWORD(v18) = v17;
    }
    *((_WORD *)v15 + 16) = v18;
    int v19 = *((unsigned __int16 *)std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(this + 31, v12, &v27)+ 16);
    uint64_t v20 = ((uint64_t (*)(uint64_t **))(*this)[8])(this);
    ((void (*)(uint64_t **, uint64_t))(*this)[2])(this, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Procedure ", 10);
    *(unsigned char *)(v20 + 17) = 0;
    if (v13 == v19)
    {
      ims::toString<nas::ProcedureType>(&v28, __p);
      (*(void (**)(uint64_t, void **))(*(void *)v20 + 32))(v20, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" already ", 9);
      *(unsigned char *)(v20 + 17) = 0;
      if (a4) {
        char v21 = "started";
      }
      else {
        char v21 = "ended";
      }
      if (a4) {
        uint64_t v22 = 7;
      }
      else {
        uint64_t v22 = 5;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)v21, v22);
      *(unsigned char *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" for instance ", 14);
      *(unsigned char *)(v20 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v20 + 17) = 0;
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      ims::toString<nas::ProcedureType>(&v28, __p);
      (*(void (**)(uint64_t, void **))(*(void *)v20 + 32))(v20, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" ", 1);
      *(unsigned char *)(v20 + 17) = 0;
      if (a4) {
        uint64_t v23 = "started";
      }
      else {
        uint64_t v23 = "ended";
      }
      if (a4) {
        uint64_t v24 = 7;
      }
      else {
        uint64_t v24 = 5;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)v23, v24);
      *(unsigned char *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" for instance ", 14);
      *(unsigned char *)(v20 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v20 + 17) = 0;
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      QMISipLogger::reportHighestProcedure((QMISipLogger *)this, v12);
    }
  }
}

void sub_1C53A25A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QMISipLogger::~QMISipLogger(QMISipLogger *this)
{
  *(void *)this = &unk_1F20C6E18;
  *((void *)this + 13) = &unk_1F20C6F68;
  *((void *)this + 17) = &unk_1F20C6F98;
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((void **)this + 32));
  LegacyQMISipLogger::~LegacyQMISipLogger(this);
}

{
  uint64_t vars8;

  QMISipLogger::~QMISipLogger(this);
  JUMPOUT(0x1C878E320);
}

void QMISipLogger::logSipRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void non-virtual thunk to'QMISipLogger::logSipRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void QMISipLogger::logSipResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void non-virtual thunk to'QMISipLogger::logSipResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void QMISipLogger::logEarlyMTSessionRequestedEvent(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v5 = *(std::__shared_weak_count **)(v4 + 368);
  if (v5)
  {
    char v6 = std::__shared_weak_count::lock(v5);
    uint64_t v9 = v6;
    if (v6) {
      uint64_t v8 = *(void *)(v4 + 360);
    }
  }
  else
  {
    char v6 = 0;
  }
  QMISipLogger::recordProcedure(a1, &v8, 6, 1, 0);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  char v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C53A27C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMISipLogger::logEarlyMTSessionRequestedEvent(uint64_t a1, uint64_t *a2)
{
}

void QMISipLogger::logSessionRequestedEvent(uint64_t **a1, uint64_t *a2, char a3, int a4)
{
  uint64_t v8 = *a2;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v9 = *(std::__shared_weak_count **)(v8 + 368);
  if (v9)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v9);
    int v16 = v10;
    if (v10) {
      uint64_t v15 = *(void *)(v8 + 360);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  QMISipLogger::recordProcedure(a1, &v15, 6, 1, 0);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
  ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"QMISipLogger::logSessionRequestedEvent [appCallId=", 50);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  unsigned int v12 = (std::__shared_weak_count *)a2[1];
  uint64_t v13 = *a2;
  long long v14 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LegacyQMISipLogger::logSessionRequestedEvent((uint64_t)a1, (uint64_t)&v13, a3, a4);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_1C53A2988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMISipLogger::logSessionRequestedEvent(uint64_t a1, uint64_t *a2, char a3, int a4)
{
}

void QMISipLogger::logSessionProgressEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"QMISipLogger::logSessionProgressEvent [appCallId=", 49);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  int v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  char v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LegacyQMISipLogger::logSessionProgressEvent(a1, (uint64_t)&v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C53A2B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMISipLogger::logSessionProgressEvent(uint64_t a1, uint64_t *a2)
{
}

void QMISipLogger::logRingingEvent(unsigned char *a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 64))(a1);
  (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 16))(a1, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"QMISipLogger::logRingingEvent [appCallId=", 41);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  uint64_t v9 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v10 = *(std::string **)a2;
  uint64_t v11 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LegacyQMISipLogger::logRingingEvent(a1, &v10, a3, a4);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C53A2C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMISipLogger::logRingingEvent(uint64_t a1, uint64_t a2, char a3, char a4)
{
}

void QMISipLogger::logPrackResponse(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"QMISipLogger::logPrackResponse [appCallId=", 42);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  uint64_t v9 = (std::__shared_weak_count *)a3[1];
  uint64_t v10 = *a3;
  uint64_t v11 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LegacyQMISipLogger::logPrackResponse(a1, a2, &v10, a4);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C53A2DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMISipLogger::logPrackResponse(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
}

void QMISipLogger::logIncomingPrack(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"QMISipLogger::logIncomingPrack [appCallId=", 42);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  uint64_t v9 = (std::__shared_weak_count *)a3[1];
  uint64_t v10 = *a3;
  uint64_t v11 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LegacyQMISipLogger::logIncomingPrack(a1, a2, &v10, a4);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C53A2F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMISipLogger::logIncomingPrack(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
}

void QMISipLogger::logSessionConfirmedEvent(unsigned char *a1, uint64_t *a2, char a3, char a4)
{
  uint64_t v8 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 64))(a1);
  (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 16))(a1, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"QMISipLogger::logSessionConfirmedEvent [appCallId=", 50);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = *a2;
  uint64_t v11 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LegacyQMISipLogger::logSessionConfirmedEvent(a1, (uint64_t)&v10, a3, a4);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C53A30B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMISipLogger::logSessionConfirmedEvent(uint64_t a1, uint64_t *a2, char a3, char a4)
{
}

uint64_t QMISipLogger::logSessionTerminationEvent(QMISipLogger *this, const BambiCallSessionTerminationBaseEvent *a2, char a3, char a4)
{
  uint64_t v8 = (*(uint64_t (**)(QMISipLogger *))(*(void *)this + 64))(this);
  (*(void (**)(QMISipLogger *, uint64_t))(*(void *)this + 16))(this, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"QMISipLogger::logSessionTerminationEvent [appCallId=", 52);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  return LegacyQMISipLogger::logSessionTerminationEvent(this, a2, a3, a4);
}

uint64_t non-virtual thunk to'QMISipLogger::logSessionTerminationEvent(QMISipLogger *this, const BambiCallSessionTerminationBaseEvent *a2, char a3, char a4)
{
  return QMISipLogger::logSessionTerminationEvent((QMISipLogger *)((char *)this - 136), a2, a3, a4);
}

void QMISipLogger::logSessionTerminatedEvent(QMISipLogger *this, const BambiCallSessionTerminatedEvent *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v5 = std::__shared_weak_count::lock(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v5)
    {
      if (v4)
      {
        uint64_t v6 = *((void *)this + 34);
        char v7 = *(std::__shared_weak_count **)(v4 + 368);
        if (v7)
        {
          uint64_t v8 = std::__shared_weak_count::lock(v7);
          if (v8) {
            uint64_t v9 = *(void *)(v4 + 360);
          }
          else {
            uint64_t v9 = 0;
          }
        }
        else
        {
          uint64_t v9 = 0;
          uint64_t v8 = 0;
        }
        if (*(char *)(v9 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v9 + 4160), *(void *)(v9 + 4168));
        }
        else {
          std::string v15 = *(std::string *)(v9 + 4160);
        }
        uint64_t v10 = BambiClient::callCountForStack(v6, (unsigned __int8 *)&v15);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        if (!v10)
        {
          uint64_t v13 = 0;
          long long v14 = 0;
          uint64_t v11 = *(std::__shared_weak_count **)(v4 + 368);
          if (v11)
          {
            unsigned int v12 = std::__shared_weak_count::lock(v11);
            long long v14 = v12;
            if (v12) {
              uint64_t v13 = *(void *)(v4 + 360);
            }
          }
          else
          {
            unsigned int v12 = 0;
          }
          QMISipLogger::recordProcedure((uint64_t **)this, &v13, 6, 0, 0);
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C53A3374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMISipLogger::logSessionTerminatedEvent(QMISipLogger *this, const BambiCallSessionTerminatedEvent *a2)
{
}

void QMISipLogger::logWiFiHandover(QMISipLogger *this, uint64_t *a2, int a3)
{
  uint64_t v6 = *a2;
  if (*a2)
  {
    uint64_t v7 = *((void *)this + 34);
    if (*(char *)(v6 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v6 + 4160), *(void *)(v6 + 4168));
    }
    else {
      std::string v16 = *(std::string *)(v6 + 4160);
    }
    uint64_t v8 = BambiClient::callCountForStack(v7, (unsigned __int8 *)&v16);
    uint64_t v9 = v8;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if (!v9) {
        return;
      }
    }
    else if (!v8)
    {
      return;
    }
    uint64_t v6 = *a2;
  }
  if (a3)
  {
    uint64_t v10 = (std::__shared_weak_count *)a2[1];
    v15[0] = v6;
    v15[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QMISipLogger::recordProcedure((uint64_t **)this, v15, 6, 0, 1);
  }
  else
  {
    uint64_t v10 = (std::__shared_weak_count *)a2[1];
    v14[0] = v6;
    v14[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QMISipLogger::recordProcedure((uint64_t **)this, v14, 6, 1, 0);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)a2[1];
  uint64_t v12 = *a2;
  uint64_t v13 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LegacyQMISipLogger::logWiFiHandover((uint64_t)this, &v12, a3);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1C53A351C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMISipLogger::logWiFiHandover(uint64_t a1, uint64_t *a2, int a3)
{
}

void QMISipLogger::logRegistrationError(uint64_t **a1, void *a2)
{
  unsigned int v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMISipLogger::recordProcedure(a1, v5, 4, 0, 0);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C53A35FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMISipLogger::logRegistrationError(uint64_t a1, void *a2)
{
}

void QMISipLogger::logRegistrationRequest(uint64_t **a1, void *a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 92))
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    v6[0] = *a2;
    v6[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QMISipLogger::recordProcedure(a1, v6, 4, 1, 0);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  int v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C53A36B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMISipLogger::logRegistrationRequest(uint64_t a1, void *a2, uint64_t a3)
{
}

void QMISipLogger::logRegistrationSuccess(uint64_t **a1, void *a2)
{
  unsigned int v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMISipLogger::recordProcedure(a1, v5, 4, 0, 0);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C53A376C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMISipLogger::logRegistrationSuccess(uint64_t a1, void *a2)
{
}

void QMISipLogger::logRegistrationStateChange(uint64_t **this, void *a2, _DWORD *a3)
{
  if (*a3)
  {
    if (*a3 != 1) {
      goto LABEL_14;
    }
    int v5 = (std::__shared_weak_count *)a2[1];
    v10[0] = *a2;
    v10[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QMISipLogger::recordProcedure(this, v10, 4, 1, 0);
  }
  else
  {
    uint64_t v6 = *a2;
    int v5 = (std::__shared_weak_count *)a2[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v6) {
      unsigned int v7 = *(_DWORD *)(v6 + 4100);
    }
    else {
      unsigned int v7 = 0;
    }
    unsigned int v11 = v7;
    uint64_t v8 = ((uint64_t (*)(uint64_t **))(*this)[8])(this);
    ((void (*)(uint64_t **, uint64_t))(*this)[2])(this, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Clearing Procedure flags for instance ", 38);
    *(unsigned char *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    *((_WORD *)std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(this + 31, v7, &v11)+ 16) = 0;
    QMISipLogger::reportHighestProcedure((QMISipLogger *)this, v7);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
LABEL_14:
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C53A3958(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMISipLogger::logRegistrationStateChange(uint64_t a1, void *a2, _DWORD *a3)
{
}

void QMISipLogger::logSmsSendAttemptedEvent(uint64_t **a1, void *a2)
{
  unsigned int v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMISipLogger::recordProcedure(a1, v5, 2, 1, 0);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C53A3A10(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMISipLogger::logSmsSendAttemptedEvent(uint64_t a1, void *a2)
{
}

void QMISipLogger::logSmsSendCompletedEvent(uint64_t **a1, void *a2)
{
  unsigned int v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMISipLogger::recordProcedure(a1, v5, 2, 0, 0);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C53A3AC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMISipLogger::logSmsSendCompletedEvent(uint64_t a1, void *a2)
{
}

uint64_t LegacyQMISipLogger::start(LegacyQMISipLogger *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 80))();
}

{
  NSObject *v2;
  char v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  long long v8;
  std::__shared_weak_count *v9;
  IPTelephonyManager *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p;
  char v18;
  dispatch_object_t object;
  void *v20;
  char v21;
  unsigned char v22[16];
  long long v23;

  if (!*((unsigned char *)this + 192))
  {
    uint64_t v2 = sImsDispatchQueue;
    if (sImsDispatchQueue
      || (uint64_t v2 = dispatch_queue_create("com.apple.ipTelephony.queue", 0), (sImsDispatchQueue = (uint64_t)v2) != 0))
    {
      dispatch_retain(v2);
      unsigned int v3 = 0;
    }
    else
    {
      unsigned int v3 = 1;
    }
    std::string::basic_string[abi:ne180100]<0>(&v20, "LegacyQMISipLogger:MAVIMS");
    object = v2;
    if ((v3 & 1) == 0) {
      dispatch_retain(v2);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ims");
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 19);
    if (v4)
    {
      int v5 = *((void *)this + 18);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::string v15 = 0;
      std::string v16 = 0;
      uint64_t v6 = std::__shared_weak_count::lock(v4);
      unsigned int v7 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      else {
        int v5 = 0;
      }
      std::string v15 = v5;
      std::string v16 = v6;
      std::__shared_weak_count::__release_weak(v4);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
    else
    {
      std::string v15 = 0;
      std::string v16 = 0;
    }
    IPTelephonyManager::getInstance((uint64_t *)&v11);
    IPTelephonyManager::getBBServerConnection(v11, &v13);
    qmi::Client::createWithQueueLocal();
    uint64_t v8 = v23;
    uint64_t v23 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 23);
    *((_OWORD *)this + 11) = v8;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    qmi::Client::~Client((qmi::Client *)v22);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v16) {
      std::__shared_weak_count::__release_weak(v16);
    }
    if (v18 < 0) {
      operator delete(__p);
    }
    if (object) {
      dispatch_release(object);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    qmi::Client::setHandler();
    qmi::Client::start((LegacyQMISipLogger *)((char *)this + 160));
    *((unsigned char *)this + 192) = 1;
    *((void *)this + 30) = 0;
    *((_DWORD *)this + 57) = 0;
    *((_DWORD *)this + 58) = 0;
    if ((v3 & 1) == 0) {
      dispatch_release(v2);
    }
  }
  return 1;
}

uint64_t LegacyQMISipLogger::isATCommandModeEnabled(LegacyQMISipLogger *this)
{
  return *((unsigned __int8 *)this + 194);
}

uint64_t non-virtual thunk to'LegacyQMISipLogger::start(LegacyQMISipLogger *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 13) + 80))();
}

{
  LegacyQMISipLogger::start((LegacyQMISipLogger *)((char *)this - 104));
  return 1;
}

void std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)(a2 + 8)) {
      qmi::Client::send();
    }
    unsigned int v3 = *(const void **)(a2 + 32);
    if (v3) {
      _Block_release(v3);
    }
    JUMPOUT(0x1C878E320);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    unsigned int v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_WORD *)v7 + 16) = 0;
    std::__shared_weak_count *v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    unsigned int v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unsigned int v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::ProcType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::ProcType>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::ProcType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::ProcType>::clone()
{
}

uint64_t __copy_helper_block_e8_32c73_ZTSNSt3__110shared_ptrIZN12QMISipLogger22reportHighestProcedureEjE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c73_ZTSNSt3__110shared_ptrIZN12QMISipLogger22reportHighestProcedureEjE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMISipLogger::reportHighestProcedure(unsigned int)::$_0,std::allocator<QMISipLogger::reportHighestProcedure(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7148;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMISipLogger::reportHighestProcedure(unsigned int)::$_0,std::allocator<QMISipLogger::reportHighestProcedure(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7148;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas14SetImsProcType8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C53A3EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void LegacyQMISipLogger::LegacyQMISipLogger(LegacyQMISipLogger *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.log");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *(void *)this = &unk_1F20C7198;
  *((void *)this + 13) = &unk_1F20C72E8;
  *((void *)this + 17) = &unk_1F20C7318;
  *((_OWORD *)this + 10) = 0u;
  *((unsigned char *)this + 194) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((unsigned char *)this + 192) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.log");
  std::string::basic_string[abi:ne180100]<0>(v3, "");
  uint64_t v2 = ims::debug((uint64_t)&__p, (uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"LegacyQMISipLogger to start", 27);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C53A40C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 223) < 0) {
    operator delete(*v24);
  }
  qmi::Client::~Client(v22);
  char v26 = *(std::__shared_weak_count **)(v20 + 152);
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  *(void *)(v20 + 104) = v21;
  if (*(char *)(v20 + 135) < 0) {
    operator delete(*v23);
  }
  ImsLogContainer::~ImsLogContainer((void **)v20);
  _Unwind_Resume(a1);
}

void LegacyQMISipLogger::~LegacyQMISipLogger(LegacyQMISipLogger *this)
{
  *(void *)this = &unk_1F20C7198;
  *((void *)this + 13) = &unk_1F20C72E8;
  *((void *)this + 17) = &unk_1F20C7318;
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  qmi::Client::~Client((LegacyQMISipLogger *)((char *)this + 160));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this + 13) = &unk_1F20B9188;
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  LegacyQMISipLogger::~LegacyQMISipLogger(this);
  JUMPOUT(0x1C878E320);
}

void sub_1C53A4498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,dispatch_object_t object,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if ((v29 & 1) == 0) {
    dispatch_release(v28);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18LegacyQMISipLogger5startEv_block_invoke()
{
  std::string::basic_string[abi:ne180100]<0>(v3, "qmi.log");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v0 = ims::debug((uint64_t)v3, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v0 + 8), (uint64_t)"LegacyQMISipLogger Started", 26);
  *(unsigned char *)(v0 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v0 + 64))(v0, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v0 + 17) = 0;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_1C53A45EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LegacyQMISipLogger::stop(uint64_t this)
{
  if (*(unsigned char *)(this + 192)) {
    return MEMORY[0x1F4178728](this + 160);
  }
  return this;
}

uint64_t non-virtual thunk to'LegacyQMISipLogger::stop(uint64_t this)
{
  if (*(unsigned char *)(this + 88)) {
    return MEMORY[0x1F4178728](this + 56);
  }
  return this;
}

void LegacyQMISipLogger::logSessionRequestedEvent(uint64_t a1, uint64_t a2, char a3, int a4)
{
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v8 = ims::debug((uint64_t)&aBlock, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"LegacyQMISipLogger::logSessionRequestedEvent [appCallId=", 56);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v41 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(aBlock.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a1 + 192))
  {
    uint64_t v9 = BambiCall::bambiClient(*(BambiCall **)a2);
    memset(&__str, 0, sizeof(__str));
    uint64_t v10 = *(BambiCall **)a2;
    if (*(char *)(*(void *)a2 + 519) < 0) {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v10 + 62), *((void *)v10 + 63));
    }
    else {
      std::string __str = *(std::string *)((char *)v10 + 496);
    }
    time_t v11 = time(0);
    *(unsigned char *)(a1 + 224) = a3;
    *(_OWORD *)&aBlock.__r_.__value_.__l.__data_ = 0uLL;
    if ((unint64_t)BambiClient::callCountExcludingCall(v9, &aBlock) < 2 || a4) {
      std::string::operator=((std::string *)(a1 + 200), &__str);
    }
    *(void *)(a1 + 240) = v11;
    uint64_t v12 = *(BambiCall **)a2;
    uint64_t v13 = *(std::__shared_weak_count **)(*(void *)a2 + 368);
    if (v13)
    {
      long long v14 = std::__shared_weak_count::lock(v13);
      if (v14) {
        uint64_t v15 = *((void *)v12 + 45);
      }
      else {
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v15 = 0;
      long long v14 = 0;
    }
    if (*(char *)(v15 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&aBlock, *(const std::string::value_type **)(v15 + 4160), *(void *)(v15 + 4168));
    }
    else {
      std::string aBlock = *(std::string *)(v15 + 4160);
    }
    uint64_t v16 = *(void *)(v9 + 152);
    if (v16)
    {
      int v17 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v16 + 312, (void **)&aBlock.__r_.__value_.__l.__data_);
      if ((void **)(v16 + 320) == v17) {
        int v18 = 0;
      }
      else {
        int v18 = *((_DWORD *)v17 + 14);
      }
      LOBYTE(v16) = v18 == 1;
    }
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(aBlock.__r_.__value_.__l.__data_);
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if ((v16 & 1) == 0)
    {
      long long v61 = 0u;
      long long v62 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v61);
      v55[0] = MEMORY[0x1E4F143A8];
      v55[1] = 1174405120;
      int v56 = ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke;
      v57 = &__block_descriptor_tmp_11_4;
      char v59 = a4;
      char v60 = a3;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v58, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string v58 = __str;
      }
      int v19 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>((uint64_t)&v61);
      uint64_t v20 = (capabilities::radio *)((uint64_t (*)(void *, char *))v56)(v55, v19);
      if (capabilities::radio::mav20Plus(v20))
      {
        uint64_t v21 = *(BambiCall **)a2;
        uint64_t v22 = *(std::__shared_weak_count **)(*(void *)a2 + 368);
        if (v22 && (uint64_t v23 = std::__shared_weak_count::lock(v22)) != 0)
        {
          int v24 = *(_DWORD *)(*((void *)v21 + 45) + 4100);
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        else
        {
          int v24 = MEMORY[0x1004];
        }
        v51[0] = MEMORY[0x1E4F143A8];
        v51[1] = 0x40000000;
        long long v52 = ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_12;
        long long v53 = &__block_descriptor_tmp_14;
        int v54 = v24;
        uint64_t v25 = qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>((uint64_t)&v61);
        v52((uint64_t)v51, v25);
      }
      if ((a4 & 1) != 0 || !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 304))(a1))
      {
        std::string __p = (void *)(a1 + 160);
        uint64_t v39 = QMIServiceMsg::create();
        int v40 = 25000;
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        v34[0] = MEMORY[0x1E4F143A8];
        v34[1] = 0x40000000;
        v34[2] = ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_20;
        v34[3] = &__block_descriptor_tmp_21;
        v34[4] = a1;
        aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
        aBlock.__r_.__value_.__l.__size_ = 0x40000000;
        aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        long long v65 = &unk_1E65100B8;
        uint64_t v66 = v34;
        unsigned int v27 = _Block_copy(&aBlock);
        uint64_t v43 = v27;
        if (v39)
        {
          qmi::Client::send();
          unsigned int v27 = v43;
        }
        if (v27) {
          _Block_release(v27);
        }
      }
      else
      {
        memset(&v50, 0, sizeof(v50));
        char v26 = *(BambiCall **)a2;
        if (*(char *)(*(void *)a2 + 1247) < 0)
        {
          std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)v26 + 153), *((void *)v26 + 154));
          char v26 = *(BambiCall **)a2;
        }
        else
        {
          std::string v50 = *(std::string *)((unsigned char *)v26 + 51);
        }
        v44[0] = MEMORY[0x1E4F143A8];
        v44[1] = 1174405120;
        char v45 = ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_2;
        uint64_t v46 = &__block_descriptor_tmp_15;
        int v28 = *(std::__shared_weak_count **)(a2 + 8);
        uint64_t v47 = v26;
        char v48 = v28;
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v49, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
        }
        else {
          std::string v49 = v50;
        }
        char v29 = (const void **)*((void *)&v61 + 1);
        if (*((void *)&v61 + 1) != (void)v62)
        {
          while (*((unsigned char *)*v29 + 8) != 18)
          {
            if (++v29 == (const void **)v62) {
              goto LABEL_60;
            }
          }
        }
        if (v29 == (const void **)v62) {
LABEL_60:
        }
          operator new();
        if (!v30) {
          __cxa_bad_cast();
        }
        v45((uint64_t)v44, (uint64_t)v30 + 16);
        std::string __p = (void *)(a1 + 160);
        uint64_t v39 = QMIServiceMsg::create();
        int v40 = 25000;
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        v35[0] = MEMORY[0x1E4F143A8];
        v35[1] = 1174405120;
        v35[2] = ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_16;
        v35[3] = &__block_descriptor_tmp_19_1;
        uint64_t v32 = *(BambiCall **)a2;
        uint64_t v31 = *(std::__shared_weak_count **)(a2 + 8);
        v35[4] = a1;
        v35[5] = v32;
        uint64_t v36 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v37 = a3;
        aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
        aBlock.__r_.__value_.__l.__size_ = 0x40000000;
        aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        long long v65 = &unk_1E65100B8;
        uint64_t v66 = v35;
        BOOL v33 = _Block_copy(&aBlock);
        uint64_t v43 = v33;
        if (v39)
        {
          qmi::Client::send();
          BOOL v33 = v43;
        }
        if (v33) {
          _Block_release(v33);
        }
        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v61);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C53A4ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v63 - 208));
  if (*(char *)(v63 - 153) < 0) {
    operator delete(*(void **)(v63 - 176));
  }
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 56);
  *(unsigned char *)a2 = v4;
  *(_WORD *)(a2 + 1) = 513;
  *(_WORD *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(a1 + 57);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v5 = *(unsigned __int16 *)(a1 + 40);
  }
  else {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 55);
  }
  *(_WORD *)(a2 + 12) = v5;
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = (uint64_t *)(a1 + 32);
    uint64_t v8 = (unint64_t *)(a2 + 16);
    do
    {
      uint64_t v9 = a1 + 32;
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v9 = *v7;
      }
      char v10 = *(unsigned char *)(v9 + v6);
      uint64_t v12 = *(unsigned char **)(a2 + 24);
      unint64_t v11 = *(void *)(a2 + 32);
      if ((unint64_t)v12 >= v11)
      {
        unint64_t v14 = *v8;
        uint64_t v15 = &v12[-*v8];
        unint64_t v16 = (unint64_t)(v15 + 1);
        if ((uint64_t)(v15 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = v11 - v14;
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v18 = v16;
        }
        if (v18) {
          int v19 = (char *)operator new(v18);
        }
        else {
          int v19 = 0;
        }
        uint64_t v20 = &v15[(void)v19];
        uint64_t v21 = &v15[(void)v19];
        *uint64_t v21 = v10;
        uint64_t v13 = v21 + 1;
        if (v12 != (unsigned char *)v14)
        {
          uint64_t v22 = &v12[~v14];
          do
          {
            char v23 = *--v12;
            (v22--)[(void)v19] = v23;
          }
          while (v12 != (unsigned char *)v14);
          uint64_t v12 = (unsigned char *)*v8;
          uint64_t v20 = v19;
        }
        *(void *)(a2 + 16) = v20;
        *(void *)(a2 + 24) = v13;
        *(void *)(a2 + 32) = &v19[v18];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        unsigned char *v12 = v10;
        uint64_t v13 = v12 + 1;
      }
      *(void *)(a2 + 24) = v13;
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(a2 + 12));
    int v4 = *(unsigned __int8 *)(a1 + 56);
  }
  if (v4) {
    char v24 = 5;
  }
  else {
    char v24 = 6;
  }
  *(unsigned char *)(a2 + 7) = v24;
  *(_DWORD *)(a2 + 8) = 0;
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  char v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

uint64_t ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_12(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = 1;
  *(_DWORD *)(a2 + 4) = BambiCall::senderIsPrivate(*(BambiCall **)(a1 + 32));
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 368);
  if (v5 && (unint64_t v6 = std::__shared_weak_count::lock(v5)) != 0)
  {
    *(unsigned char *)(a2 + 8) = *(unsigned char *)(*(void *)(v4 + 360) + 176);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = MEMORY[0xB0];
  }
  *(void *)(a2 + 12) = 0x300000001;
  *(_DWORD *)(a2 + 20) = 0;
  if (*(char *)(a1 + 71) < 0) {
    int v7 = *(unsigned __int8 *)(a1 + 56);
  }
  else {
    int v7 = *(unsigned __int8 *)(a1 + 71);
  }
  *(unsigned char *)(a2 + 24) = v7;
  if (v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = (unint64_t *)(a2 + 32);
    do
    {
      uint64_t v10 = a1 + 48;
      if (*(char *)(a1 + 71) < 0) {
        uint64_t v10 = *(void *)(a1 + 48);
      }
      char v11 = *(unsigned char *)(v10 + v8);
      uint64_t v13 = *(unsigned char **)(a2 + 40);
      unint64_t v12 = *(void *)(a2 + 48);
      if ((unint64_t)v13 >= v12)
      {
        unint64_t v15 = *v9;
        unint64_t v16 = &v13[-*v9];
        unint64_t v17 = (unint64_t)(v16 + 1);
        if ((uint64_t)(v16 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v18 = v12 - v15;
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v19 = v17;
        }
        if (v19) {
          uint64_t v20 = (char *)operator new(v19);
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v21 = &v16[(void)v20];
        uint64_t v22 = &v16[(void)v20];
        unsigned char *v22 = v11;
        unint64_t v14 = v22 + 1;
        if (v13 != (unsigned char *)v15)
        {
          char v23 = &v13[~v15];
          do
          {
            char v24 = *--v13;
            (v23--)[(void)v20] = v24;
          }
          while (v13 != (unsigned char *)v15);
          uint64_t v13 = (unsigned char *)*v9;
          uint64_t v21 = v20;
        }
        *(void *)(a2 + 32) = v21;
        *(void *)(a2 + 40) = v14;
        *(void *)(a2 + 48) = &v20[v19];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *uint64_t v13 = v11;
        unint64_t v14 = v13 + 1;
      }
      *(void *)(a2 + 40) = v14;
      ++v8;
    }
    while (v8 < *(unsigned __int8 *)(a2 + 24));
  }
}

void __copy_helper_block_e8_32c36_ZTSNSt3__110shared_ptrI9BambiCallEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3 = *(void *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C53A53D0(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c36_ZTSNSt3__110shared_ptrI9BambiCallEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  char v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_16(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  long long v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v6 = *(unsigned char *)(a1 + 56);
  v42[0] = 0;
  v42[1] = v42;
  v42[2] = 0x2000000000;
  char v43 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "qmi.log");
  std::string::basic_string[abi:ne180100]<0>(aBlock, "");
  uint64_t v7 = ims::debug((uint64_t)__p, (uint64_t)aBlock);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"logSessionRequestedEvent", 24);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" handleResponseForIncomingCall  for incoming call ", 50);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (SHIBYTE(v45) < 0) {
    operator delete(aBlock[0]);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (*((_DWORD *)a2 + 1))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(aBlock, "");
    uint64_t v8 = ims::debug((uint64_t)__p, (uint64_t)aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"logSessionRequestedEvent", 24);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" request failed for incoming call", 33);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_16:
    *(unsigned char *)(v8 + 17) = 0;
    if (SHIBYTE(v45) < 0) {
      operator delete(aBlock[0]);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_47;
  }
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 0x40000000;
  uint64_t v39 = (uint64_t (*)(uint64_t, void **))___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke;
  int v40 = &unk_1E650FFE8;
  char v41 = v42;
  TlvValue = (void *)qmi::MessageBase::findTlvValue(a2);
  char v11 = TlvValue;
  if (!TlvValue) {
    goto LABEL_15;
  }
  int v12 = v10;
  __p[0] = TlvValue;
  LOBYTE(aBlock[0]) = tlv::parseV<mavims::tlv::IncomingCallBasebandCallId>((tlv **)__p, v10);
  if (!__p[0])
  {
    if (((unsigned int (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 18, v11, v12))
    {
      goto LABEL_13;
    }
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(__p, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(aBlock, "");
    uint64_t v8 = ims::error((uint64_t)__p, (uint64_t)aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"LegacyQMISipLogger::handleResponseForIncomingCall did not contain a baseband Call Id", 84);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_16;
  }
  v39((uint64_t)v38, aBlock);
LABEL_13:
  long long v36 = 0u;
  long long v37 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v36);
  memset(&v35, 0, sizeof(v35));
  if (*(char *)(v4 + 519) < 0) {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v4 + 496), *(void *)(v4 + 504));
  }
  else {
    std::string v35 = *(std::string *)(v4 + 496);
  }
  __p[0] = (void *)MEMORY[0x1E4F143A8];
  __p[1] = (void *)1174405120;
  uint64_t v31 = ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke_2;
  uint64_t v32 = &__block_descriptor_tmp_81;
  char v34 = v6;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v33, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  }
  else {
    std::string v33 = v35;
  }
  uint64_t v13 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>((uint64_t)&v36);
  unint64_t v14 = (capabilities::radio *)((uint64_t (*)(void **, char *))v31)(__p, v13);
  if (capabilities::radio::mav20Plus(v14))
  {
    unint64_t v15 = *(std::__shared_weak_count **)(v4 + 368);
    if (v15 && (unint64_t v16 = std::__shared_weak_count::lock(v15)) != 0)
    {
      int v17 = *(_DWORD *)(*(void *)(v4 + 360) + 4100);
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    else
    {
      int v17 = MEMORY[0x1004];
    }
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 0x40000000;
    v28[2] = ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke_82;
    v28[3] = &__block_descriptor_tmp_83;
    int v29 = v17;
    unint64_t v18 = qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>((uint64_t)&v36);
    ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke_82((uint64_t)v28, v18);
  }
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 0x40000000;
  v27[2] = ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke_2_84;
  _OWORD v27[3] = &unk_1E6510030;
  v27[4] = v42;
  size_t v19 = (const void **)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1) != (void)v37)
  {
    while (*((unsigned char *)*v19 + 8) != 19)
    {
      if (++v19 == (const void **)v37) {
        goto LABEL_37;
      }
    }
  }
  if (v19 == (const void **)v37) {
LABEL_37:
  }
    operator new();
  if (!v20) {
    __cxa_bad_cast();
  }
  ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke_2_84((uint64_t)v27, (uint64_t)v20 + 12);
  v22[5] = v3 + 160;
  uint64_t v23 = QMIServiceMsg::create();
  int v24 = 25000;
  uint64_t v25 = 0;
  char v26 = 0;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 0x40000000;
  void v22[2] = ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke_3;
  v22[3] = &__block_descriptor_tmp_88;
  v22[4] = v3;
  aBlock[0] = (void *)MEMORY[0x1E4F143A8];
  aBlock[1] = (void *)0x40000000;
  char v45 = ___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v46 = &unk_1E65100B8;
  uint64_t v47 = v22;
  uint64_t v21 = _Block_copy(aBlock);
  char v26 = v21;
  if (v23)
  {
    qmi::Client::send();
    uint64_t v21 = v26;
  }
  if (v21) {
    _Block_release(v21);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v36);
LABEL_47:
  _Block_object_dispose(v42, 8);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C53A5C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v49 - 240));
  _Block_object_dispose((const void *)(v49 - 168), 8);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__110shared_ptrI9BambiCallEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__110shared_ptrI9BambiCallEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_20(uint64_t a1, uint64_t a2)
{
}

void LegacyQMISipLogger::handleResponse(uint64_t a1, const char *a2)
{
  if (*(_DWORD *)(a1 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)v9, (uint64_t)__p);
    size_t v4 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)a2, v4);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" request failed: ", 17);
    *(unsigned char *)(v3 + 17) = 0;
    long long v5 = (const char *)qmi::asString();
    size_t v6 = strlen(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)v5, v6);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
}

void sub_1C53A5E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'LegacyQMISipLogger::logSessionRequestedEvent(uint64_t a1, uint64_t a2, char a3, int a4)
{
}

void LegacyQMISipLogger::logSessionProgressEvent(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 192))
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"LegacyQMISipLogger::logRingingEvent", 35);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"P-Asserted-Identity tel phone number ", 37);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, *(void *)a2 + 1224);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::debug((uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"P-Asserted-Identity Context ", 28);
    *(unsigned char *)(v5 + 17) = 0;
    size_t v6 = SipUri::phoneContext((SipUri *)(*(void *)a2 + 1048));
    (*(void (**)(uint64_t, long long *))(*(void *)v5 + 32))(v5, v6);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
}

void sub_1C53A6104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'LegacyQMISipLogger::logSessionProgressEvent(uint64_t a1, uint64_t a2)
{
}

void LegacyQMISipLogger::logRingingEvent(unsigned char *a1, std::string **a2, char a3, char a4)
{
  if (a1[192])
  {
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v8 = ims::debug((uint64_t)&aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"LegacyQMISipLogger::logRingingEvent [appCallId=", 47);
    *(unsigned char *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v37 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(aBlock.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v9 = ims::debug((uint64_t)&aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"LegacyQMISipLogger::logRingingEvent", 35);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v37 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(aBlock.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v10 = ims::debug((uint64_t)&aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"P-Asserted-Identity tel phone number ", 37);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v10 + 32))(v10, *a2 + 51);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v37 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(aBlock.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v11 = ims::debug((uint64_t)&aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"P-Asserted-Identity Context ", 28);
    *(unsigned char *)(v11 + 17) = 0;
    int v12 = SipUri::phoneContext((SipUri *)&(*a2)[43].__r_.__value_.__r.__words[2]);
    (*(void (**)(uint64_t, long long *))(*(void *)v11 + 32))(v11, v12);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v37 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(aBlock.__r_.__value_.__l.__data_);
    }
    memset(&v56, 0, sizeof(v56));
    uint64_t v13 = *a2;
    if ((*a2)[21].__r_.__value_.__s.__data_[15] < 0)
    {
      std::string::__init_copy_ctor_external(&v56, (const std::string::value_type *)v13[20].__r_.__value_.__r.__words[2], v13[21].__r_.__value_.__r.__words[0]);
      uint64_t v13 = *a2;
    }
    else
    {
      std::string v56 = *(std::string *)((char *)v13 + 496);
    }
    uint64_t v14 = BambiCall::bambiClient((BambiCall *)v13);
    unint64_t v15 = *a2;
    std::string::size_type size = (std::__shared_weak_count *)(*a2)[15].__r_.__value_.__l.__size_;
    if (size)
    {
      int v17 = std::__shared_weak_count::lock(size);
      if (v17) {
        std::string::pointer data = v15[15].__r_.__value_.__l.__data_;
      }
      else {
        std::string::pointer data = 0;
      }
    }
    else
    {
      std::string::pointer data = 0;
      int v17 = 0;
    }
    if (data[4183] < 0) {
      std::string::__init_copy_ctor_external(&aBlock, *((const std::string::value_type **)data + 520), *((void *)data + 521));
    }
    else {
      std::string aBlock = *(std::string *)(data + 4160);
    }
    uint64_t v19 = *(void *)(v14 + 152);
    if (v19)
    {
      uint64_t v20 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v19 + 312, (void **)&aBlock.__r_.__value_.__l.__data_);
      if ((void **)(v19 + 320) == v20) {
        int v21 = 0;
      }
      else {
        int v21 = *((_DWORD *)v20 + 14);
      }
      LOBYTE(v19) = v21 == 1;
    }
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(aBlock.__r_.__value_.__l.__data_);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if ((v19 & 1) == 0)
    {
      long long v54 = 0u;
      long long v55 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v54);
      v49[0] = MEMORY[0x1E4F143A8];
      v49[1] = 1174405120;
      std::string v50 = ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke;
      uint64_t v51 = &__block_descriptor_tmp_28_0;
      char v53 = a3;
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v52, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
      }
      else {
        std::string v52 = v56;
      }
      uint64_t v22 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>((uint64_t)&v54);
      uint64_t v23 = (capabilities::radio *)((uint64_t (*)(void *, char *))v50)(v49, v22);
      if (capabilities::radio::mav20Plus(v23))
      {
        int v24 = *a2;
        uint64_t v25 = (std::__shared_weak_count *)(*a2)[15].__r_.__value_.__l.__size_;
        if (v25 && (char v26 = std::__shared_weak_count::lock(v25)) != 0)
        {
          int v27 = *(_DWORD *)(v24[15].__r_.__value_.__r.__words[0] + 4100);
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
        else
        {
          int v27 = MEMORY[0x1004];
        }
        v45[0] = MEMORY[0x1E4F143A8];
        v45[1] = 0x40000000;
        uint64_t v46 = ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_29;
        uint64_t v47 = &__block_descriptor_tmp_30_0;
        int v48 = v27;
        int v28 = qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>((uint64_t)&v54);
        v46((uint64_t)v45, v28);
      }
      if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 304))(a1))
      {
        memset(&aBlock, 0, sizeof(aBlock));
        int v29 = *a2;
        if (SHIBYTE((*a2)[51].__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&aBlock, v29[51].__r_.__value_.__l.__data_, v29[51].__r_.__value_.__l.__size_);
        }
        else {
          std::string aBlock = v29[51];
        }
        v40[0] = MEMORY[0x1E4F143A8];
        v40[1] = 1174405120;
        char v41 = ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_2;
        uint64_t v42 = &__block_descriptor_tmp_33_0;
        char v44 = a4;
        if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v43, aBlock.__r_.__value_.__l.__data_, aBlock.__r_.__value_.__l.__size_);
        }
        else {
          std::string v43 = aBlock;
        }
        uint64_t v30 = (const void **)*((void *)&v54 + 1);
        if (*((void *)&v54 + 1) != (void)v55)
        {
          while (*((unsigned char *)*v30 + 8) != 16)
          {
            if (++v30 == (const void **)v55) {
              goto LABEL_62;
            }
          }
        }
        if (v30 == (const void **)v55) {
LABEL_62:
        }
          operator new();
        if (!v31) {
          __cxa_bad_cast();
        }
        v41((unsigned __int8 *)v40, (uint64_t)v31 + 16);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(aBlock.__r_.__value_.__l.__data_);
        }
      }
      std::string __p = a1 + 160;
      uint64_t v35 = QMIServiceMsg::create();
      int v36 = 25000;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      v33[0] = MEMORY[0x1E4F143A8];
      v33[1] = 0x40000000;
      v33[2] = ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_34;
      v33[3] = &__block_descriptor_tmp_36_0;
      v33[4] = a1;
      aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
      aBlock.__r_.__value_.__l.__size_ = 0x40000000;
      aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      std::string v58 = &unk_1E65100B8;
      char v59 = v33;
      uint64_t v32 = _Block_copy(&aBlock);
      uint64_t v39 = v32;
      if (v35)
      {
        qmi::Client::send();
        uint64_t v32 = v39;
      }
      if (v32) {
        _Block_release(v32);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v54);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C53A6AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (*(char *)(v48 - 121) < 0) {
    operator delete(*(void **)(v48 - 144));
  }
  if (a48 < 0) {
    operator delete(__p);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v48 - 208));
  if (*(char *)(v48 - 153) < 0) {
    operator delete(*(void **)(v48 - 176));
  }
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a2 = 0;
  *(unsigned char *)(a2 + 2) = 2;
  *(_WORD *)(a2 + 4) = 180;
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(a1 + 56);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v4 = *(unsigned __int16 *)(a1 + 40);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 55);
  }
  *(_WORD *)(a2 + 12) = v4;
  if (v4)
  {
    unint64_t v5 = 0;
    size_t v6 = (uint64_t *)(a1 + 32);
    uint64_t v7 = (unint64_t *)(a2 + 16);
    do
    {
      uint64_t v8 = a1 + 32;
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v8 = *v6;
      }
      char v9 = *(unsigned char *)(v8 + v5);
      uint64_t v11 = *(unsigned char **)(a2 + 24);
      unint64_t v10 = *(void *)(a2 + 32);
      if ((unint64_t)v11 >= v10)
      {
        unint64_t v13 = *v7;
        uint64_t v14 = &v11[-*v7];
        unint64_t v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v16 = v10 - v13;
        if (2 * v16 > v15) {
          unint64_t v15 = 2 * v16;
        }
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v17 = v15;
        }
        if (v17) {
          unint64_t v18 = (char *)operator new(v17);
        }
        else {
          unint64_t v18 = 0;
        }
        uint64_t v19 = &v14[(void)v18];
        uint64_t v20 = &v14[(void)v18];
        *uint64_t v20 = v9;
        int v12 = v20 + 1;
        if (v11 != (unsigned char *)v13)
        {
          int v21 = &v11[~v13];
          do
          {
            char v22 = *--v11;
            (v21--)[(void)v18] = v22;
          }
          while (v11 != (unsigned char *)v13);
          uint64_t v11 = (unsigned char *)*v7;
          uint64_t v19 = v18;
        }
        *(void *)(a2 + 16) = v19;
        *(void *)(a2 + 24) = v12;
        *(void *)(a2 + 32) = &v18[v17];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        unsigned char *v11 = v9;
        int v12 = v11 + 1;
      }
      *(void *)(a2 + 24) = v12;
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(a2 + 12));
  }
  *(unsigned char *)(a2 + 7) = 9;
  *(_DWORD *)(a2 + 8) = 0;
}

uint64_t ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_29(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_2(unsigned __int8 *a1, uint64_t a2)
{
  *(unsigned char *)a2 = a1[56];
  *(void *)(a2 + 4) = 0x100000003;
  if ((char)a1[55] < 0) {
    int v4 = a1[40];
  }
  else {
    int v4 = a1[55];
  }
  *(unsigned char *)(a2 + 12) = v4;
  if (v4)
  {
    unint64_t v5 = 0;
    size_t v6 = (unsigned __int8 **)(a1 + 32);
    uint64_t v7 = (unint64_t *)(a2 + 16);
    do
    {
      uint64_t v8 = a1 + 32;
      if ((char)a1[55] < 0) {
        uint64_t v8 = *v6;
      }
      unsigned __int8 v9 = v8[v5];
      uint64_t v11 = *(unsigned char **)(a2 + 24);
      unint64_t v10 = *(void *)(a2 + 32);
      if ((unint64_t)v11 >= v10)
      {
        unint64_t v13 = *v7;
        uint64_t v14 = &v11[-*v7];
        unint64_t v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v16 = v10 - v13;
        if (2 * v16 > v15) {
          unint64_t v15 = 2 * v16;
        }
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v17 = v15;
        }
        if (v17) {
          unint64_t v18 = (char *)operator new(v17);
        }
        else {
          unint64_t v18 = 0;
        }
        uint64_t v19 = &v14[(void)v18];
        uint64_t v20 = &v14[(void)v18];
        *uint64_t v20 = v9;
        int v12 = v20 + 1;
        if (v11 != (unsigned char *)v13)
        {
          int v21 = &v11[~v13];
          do
          {
            char v22 = *--v11;
            (v21--)[(void)v18] = v22;
          }
          while (v11 != (unsigned char *)v13);
          uint64_t v11 = (unsigned char *)*v7;
          uint64_t v19 = v18;
        }
        *(void *)(a2 + 16) = v19;
        *(void *)(a2 + 24) = v12;
        *(void *)(a2 + 32) = &v18[v17];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        unsigned char *v11 = v9;
        int v12 = v11 + 1;
      }
      *(void *)(a2 + 24) = v12;
      ++v5;
    }
    while (v5 < *(unsigned __int8 *)(a2 + 12));
  }
}

void ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_34(uint64_t a1, uint64_t a2)
{
}

void non-virtual thunk to'LegacyQMISipLogger::logRingingEvent(uint64_t a1, std::string **a2, char a3, char a4)
{
}

void LegacyQMISipLogger::logSessionConfirmedEvent(unsigned char *a1, uint64_t a2, char a3, char a4)
{
  if (a1[192])
  {
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v8 = ims::debug((uint64_t)&aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"LegacyQMISipLogger::logSessionConfirmedEvent [appCallId=", 56);
    *(unsigned char *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v34 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(aBlock.__r_.__value_.__l.__data_);
    }
    uint64_t v9 = BambiCall::bambiClient(*(BambiCall **)a2);
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v10 = ims::debug((uint64_t)&aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Current call count is ", 22);
    *(unsigned char *)(v10 + 17) = 0;
    long long v53 = 0uLL;
    BambiClient::callCountExcludingCall(v9, &v53);
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v34 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(aBlock.__r_.__value_.__l.__data_);
    }
    memset(&v55, 0, sizeof(v55));
    uint64_t v11 = *(BambiCall **)a2;
    if (*(char *)(*(void *)a2 + 519) < 0)
    {
      std::string::__init_copy_ctor_external(&v55, *((const std::string::value_type **)v11 + 62), *((void *)v11 + 63));
      uint64_t v11 = *(BambiCall **)a2;
    }
    else
    {
      std::string v55 = *(std::string *)((char *)v11 + 496);
    }
    char v12 = *((unsigned char *)v11 + 1496);
    unint64_t v13 = (std::__shared_weak_count *)*((void *)v11 + 46);
    if (v13)
    {
      uint64_t v14 = std::__shared_weak_count::lock(v13);
      if (v14) {
        uint64_t v15 = *((void *)v11 + 45);
      }
      else {
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v14 = 0;
    }
    if (*(char *)(v15 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&aBlock, *(const std::string::value_type **)(v15 + 4160), *(void *)(v15 + 4168));
    }
    else {
      std::string aBlock = *(std::string *)(v15 + 4160);
    }
    uint64_t v16 = *(void *)(v9 + 152);
    if (v16)
    {
      size_t v17 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v16 + 312, (void **)&aBlock.__r_.__value_.__l.__data_);
      if ((void **)(v16 + 320) == v17) {
        int v18 = 0;
      }
      else {
        int v18 = *((_DWORD *)v17 + 14);
      }
      LOBYTE(v16) = v18 == 1;
    }
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(aBlock.__r_.__value_.__l.__data_);
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if ((v16 & 1) == 0)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v53);
      v47[0] = MEMORY[0x1E4F143A8];
      v47[1] = 1174405120;
      uint64_t v48 = ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke;
      uint64_t v49 = &__block_descriptor_tmp_41_0;
      char v51 = v12;
      char v52 = a3;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v50, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
      }
      else {
        std::string v50 = v55;
      }
      uint64_t v19 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>((uint64_t)&v53);
      uint64_t v20 = (capabilities::radio *)((uint64_t (*)(void *, char *))v48)(v47, v19);
      if (capabilities::radio::mav20Plus(v20))
      {
        int v21 = *(BambiCall **)a2;
        char v22 = *(std::__shared_weak_count **)(*(void *)a2 + 368);
        if (v22 && (uint64_t v23 = std::__shared_weak_count::lock(v22)) != 0)
        {
          int v24 = *(_DWORD *)(*((void *)v21 + 45) + 4100);
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        else
        {
          int v24 = MEMORY[0x1004];
        }
        v43[0] = MEMORY[0x1E4F143A8];
        v43[1] = 0x40000000;
        char v44 = ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_42;
        char v45 = &__block_descriptor_tmp_43;
        int v46 = v24;
        uint64_t v25 = qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>((uint64_t)&v53);
        v44((uint64_t)v43, v25);
      }
      if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 304))(a1))
      {
        v37[0] = MEMORY[0x1E4F143A8];
        v37[1] = 1174405120;
        uint64_t v38 = ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_2;
        uint64_t v39 = &__block_descriptor_tmp_45;
        char v42 = a4;
        char v26 = *(std::__shared_weak_count **)(a2 + 8);
        int v40 = *(BambiCall **)a2;
        char v41 = v26;
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v27 = (const void **)*((void *)&v53 + 1);
        if (*((void *)&v53 + 1) != (void)v54)
        {
          while (*((unsigned char *)*v27 + 8) != 17)
          {
            if (++v27 == (const void **)v54) {
              goto LABEL_50;
            }
          }
        }
        if (v27 == (const void **)v54) {
LABEL_50:
        }
          operator new();
        if (!v28) {
          __cxa_bad_cast();
        }
        v38((uint64_t)v37, (uint64_t)v28 + 12);
        if (v41) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        }
      }
      std::string __p = a1 + 160;
      uint64_t v32 = QMIServiceMsg::create();
      int v33 = 25000;
      uint64_t v35 = 0;
      int v36 = 0;
      v30[0] = MEMORY[0x1E4F143A8];
      v30[1] = 0x40000000;
      v30[2] = ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_46;
      _OWORD v30[3] = &__block_descriptor_tmp_48;
      v30[4] = a1;
      aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
      aBlock.__r_.__value_.__l.__size_ = 0x40000000;
      aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      v57 = &unk_1E65100B8;
      std::string v58 = v30;
      int v29 = _Block_copy(&aBlock);
      int v36 = v29;
      if (v32)
      {
        qmi::Client::send();
        int v29 = v36;
      }
      if (v29) {
        _Block_release(v29);
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v53);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C53A7608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v43 - 208));
  if (*(char *)(v43 - 153) < 0) {
    operator delete(*(void **)(v43 - 176));
  }
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 56);
  *(unsigned char *)a2 = v4 ^ 1;
  *(_WORD *)(a2 + 1) = 513;
  *(_WORD *)(a2 + 4) = 200;
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(a1 + 57);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v5 = *(unsigned __int16 *)(a1 + 40);
  }
  else {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 55);
  }
  *(_WORD *)(a2 + 12) = v5;
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = (uint64_t *)(a1 + 32);
    uint64_t v8 = (unint64_t *)(a2 + 16);
    do
    {
      uint64_t v9 = a1 + 32;
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v9 = *v7;
      }
      char v10 = *(unsigned char *)(v9 + v6);
      char v12 = *(unsigned char **)(a2 + 24);
      unint64_t v11 = *(void *)(a2 + 32);
      if ((unint64_t)v12 >= v11)
      {
        unint64_t v14 = *v8;
        uint64_t v15 = &v12[-*v8];
        unint64_t v16 = (unint64_t)(v15 + 1);
        if ((uint64_t)(v15 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = v11 - v14;
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v18 = v16;
        }
        if (v18) {
          uint64_t v19 = (char *)operator new(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = &v15[(void)v19];
        int v21 = &v15[(void)v19];
        *int v21 = v10;
        unint64_t v13 = v21 + 1;
        if (v12 != (unsigned char *)v14)
        {
          char v22 = &v12[~v14];
          do
          {
            char v23 = *--v12;
            (v22--)[(void)v19] = v23;
          }
          while (v12 != (unsigned char *)v14);
          char v12 = (unsigned char *)*v8;
          uint64_t v20 = v19;
        }
        *(void *)(a2 + 16) = v20;
        *(void *)(a2 + 24) = v13;
        *(void *)(a2 + 32) = &v19[v18];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        unsigned char *v12 = v10;
        unint64_t v13 = v12 + 1;
      }
      *(void *)(a2 + 24) = v13;
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(a2 + 12));
    int v4 = *(unsigned __int8 *)(a1 + 56);
  }
  if (v4) {
    char v24 = 13;
  }
  else {
    char v24 = 12;
  }
  *(unsigned char *)(a2 + 7) = v24;
  *(_DWORD *)(a2 + 8) = 0;
}

uint64_t ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_42(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_2(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a2 = *(unsigned char *)(a1 + 48);
  *(_DWORD *)(a2 + 4) = 1;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(std::__shared_weak_count **)(v3 + 368);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    *(unsigned char *)(a2 + 8) = *(unsigned char *)(*(void *)(v3 + 360) + 176);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = MEMORY[0xB0];
  }
  *(_DWORD *)(a2 + 12) = 1;
}

uint64_t __copy_helper_block_e8_32c37_ZTSKNSt3__110shared_ptrI9BambiCallEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c37_ZTSKNSt3__110shared_ptrI9BambiCallEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_46(uint64_t a1, uint64_t a2)
{
}

void non-virtual thunk to'LegacyQMISipLogger::logSessionConfirmedEvent(uint64_t a1, uint64_t a2, char a3, char a4)
{
}

uint64_t LegacyQMISipLogger::logSessionTerminationEvent(LegacyQMISipLogger *this, const BambiCallSessionTerminationBaseEvent *a2, char a3, char a4)
{
  if (!*((unsigned char *)this + 192)) {
    return 1013;
  }
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v8 = ims::debug((uint64_t)&aBlock, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"LegacyQMISipLogger::logSessionTerminationEvent [appCallId=", 58);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v43 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(aBlock.__r_.__value_.__l.__data_);
    if (!a2) {
      return 1013;
    }
  }
  else if (!a2)
  {
    return 1013;
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (!v9) {
    return 1013;
  }
  uint64_t v10 = *((void *)a2 + 2);
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v11 = std::__shared_weak_count::lock(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!v11) {
    return 1013;
  }
  if (v10)
  {
    uint64_t v12 = BambiCall::bambiClient((BambiCall *)v10);
    memset(&v67, 0, sizeof(v67));
    uint64_t v38 = v11;
    if (*(char *)(v10 + 519) < 0) {
      std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(v10 + 496), *(void *)(v10 + 504));
    }
    else {
      std::string v67 = *(std::string *)(v10 + 496);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&v61, "");
    uint64_t v15 = ims::debug((uint64_t)&__p, (uint64_t)&v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Current call count is ", 22);
    *(unsigned char *)(v15 + 17) = 0;
    *(_OWORD *)&aBlock.__r_.__value_.__l.__data_ = 0uLL;
    BambiClient::callCountExcludingCall(v12, &aBlock);
    std::ostream::operator<<();
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" SIP callID=", 12);
    *(unsigned char *)(v15 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&aBlock, (const std::string *)(v10 + 472));
    (*(void (**)(uint64_t, std::string *))(*(void *)v15 + 56))(v15, &aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" handover ", 10);
    *(unsigned char *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (v66 < 0) {
      operator delete(v64);
    }
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(aBlock.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v62) < 0) {
      operator delete((void *)v61);
    }
    if (v43 < 0) {
      operator delete(__p);
    }
    uint64_t v16 = *((void *)a2 + 6);
    if (v16)
    {
      int v17 = *((unsigned __int8 *)a2 + 56);
      int v18 = *(_DWORD *)(v16 + 88);
      if (v18 == 408) {
        int v19 = 23;
      }
      else {
        int v19 = 22;
      }
      int v37 = v19;
      int v20 = 2;
    }
    else
    {
      uint64_t v21 = *((int *)a2 + 10);
      if (v21 > 0xD)
      {
        int v20 = 0;
        int v18 = 0;
        int v37 = 23;
        int v17 = 1;
      }
      else
      {
        int v18 = 0;
        int v17 = dword_1C56D0D38[v21];
        int v20 = dword_1C56D0D70[v21];
        int v37 = dword_1C56D0DA8[v21];
      }
    }
    char v22 = *(std::__shared_weak_count **)(v10 + 368);
    if (v22)
    {
      char v23 = std::__shared_weak_count::lock(v22);
      if (v23) {
        uint64_t v24 = *(void *)(v10 + 360);
      }
      else {
        uint64_t v24 = 0;
      }
    }
    else
    {
      uint64_t v24 = 0;
      char v23 = 0;
    }
    if (*(char *)(v24 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&aBlock, *(const std::string::value_type **)(v24 + 4160), *(void *)(v24 + 4168));
    }
    else {
      std::string aBlock = *(std::string *)(v24 + 4160);
    }
    uint64_t v25 = *(void *)(v12 + 152);
    if (v25)
    {
      char v26 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v25 + 312, (void **)&aBlock.__r_.__value_.__l.__data_);
      if ((void **)(v25 + 320) == v26) {
        int v27 = 0;
      }
      else {
        int v27 = *((_DWORD *)v26 + 14);
      }
      LOBYTE(v25) = v27 == 1;
    }
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(aBlock.__r_.__value_.__l.__data_);
    }
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if ((v25 & 1) == 0)
    {
      long long v61 = 0u;
      long long v62 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v61);
      v52[0] = MEMORY[0x1E4F143A8];
      v52[1] = 1174405120;
      long long v53 = ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke;
      long long v54 = &__block_descriptor_tmp_54;
      int v56 = v17;
      int v57 = v20;
      int v58 = v18;
      char v60 = a3;
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v55, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
      }
      else {
        std::string v55 = v67;
      }
      int v59 = v37;
      int v28 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>((uint64_t)&v61);
      int v29 = (capabilities::radio *)((uint64_t (*)(void *, char *))v53)(v52, v28);
      if (capabilities::radio::mav20Plus(v29))
      {
        uint64_t v30 = *(std::__shared_weak_count **)(v10 + 368);
        if (v30 && (uint64_t v31 = std::__shared_weak_count::lock(v30)) != 0)
        {
          int v32 = *(_DWORD *)(*(void *)(v10 + 360) + 4100);
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        else
        {
          int v32 = MEMORY[0x1004];
        }
        v48[0] = MEMORY[0x1E4F143A8];
        v48[1] = 0x40000000;
        uint64_t v49 = ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke_55;
        std::string v50 = &__block_descriptor_tmp_56;
        int v51 = v32;
        int v33 = qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>((uint64_t)&v61);
        v49((uint64_t)v48, v33);
      }
      if ((*(unsigned int (**)(LegacyQMISipLogger *))(*(void *)this + 304))(this))
      {
        v46[0] = MEMORY[0x1E4F143A8];
        v46[1] = 0x40000000;
        v46[2] = ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke_2;
        v46[3] = &__block_descriptor_tmp_57_0;
        char v47 = a4;
        _OWORD v46[4] = this;
        v46[5] = a2;
        char v34 = (const void **)*((void *)&v61 + 1);
        if (*((void *)&v61 + 1) != (void)v62)
        {
          while (*((unsigned char *)*v34 + 8) != 20)
          {
            if (++v34 == (const void **)v62) {
              goto LABEL_68;
            }
          }
        }
        if (v34 == (const void **)v62) {
LABEL_68:
        }
          operator new();
        if (!v35) {
          __cxa_bad_cast();
        }
        ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke_2((uint64_t)v46, (uint64_t)v35 + 16);
      }
      std::string __p = (char *)this + 160;
      uint64_t v41 = QMIServiceMsg::create();
      int v42 = 25000;
      uint64_t v44 = 0;
      char v45 = 0;
      v39[0] = MEMORY[0x1E4F143A8];
      v39[1] = 0x40000000;
      v39[2] = ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke_3;
      v39[3] = &__block_descriptor_tmp_59;
      v39[4] = this;
      aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
      aBlock.__r_.__value_.__l.__size_ = 0x40000000;
      aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      long long v64 = &unk_1E65100B8;
      long long v65 = v39;
      int v36 = _Block_copy(&aBlock);
      char v45 = v36;
      if (v41)
      {
        qmi::Client::send();
        int v36 = v45;
      }
      if (v36) {
        _Block_release(v36);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v61);
    }
    *((void *)this + 30) = 0;
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    uint64_t v13 = 1003;
    unint64_t v11 = v38;
  }
  else
  {
    uint64_t v13 = 1013;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  return v13;
}

void sub_1C53A81E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v45 - 192));
  if (*(char *)(v45 - 89) < 0) {
    operator delete(*(void **)(v45 - 112));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 60);
  *(unsigned char *)a2 = *(_DWORD *)(a1 + 56);
  *(unsigned char *)(a2 + 1) = 0;
  *(unsigned char *)(a2 + 2) = v4;
  *(_WORD *)(a2 + 4) = *(_DWORD *)(a1 + 64);
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(a1 + 72);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v5 = *(unsigned __int16 *)(a1 + 40);
  }
  else {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 55);
  }
  *(_WORD *)(a2 + 12) = v5;
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = (uint64_t *)(a1 + 32);
    uint64_t v8 = (unint64_t *)(a2 + 16);
    do
    {
      uint64_t v9 = a1 + 32;
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v9 = *v7;
      }
      char v10 = *(unsigned char *)(v9 + v6);
      uint64_t v12 = *(unsigned char **)(a2 + 24);
      unint64_t v11 = *(void *)(a2 + 32);
      if ((unint64_t)v12 >= v11)
      {
        unint64_t v14 = *v8;
        uint64_t v15 = &v12[-*v8];
        unint64_t v16 = (unint64_t)(v15 + 1);
        if ((uint64_t)(v15 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = v11 - v14;
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v18 = v16;
        }
        if (v18) {
          int v19 = (char *)operator new(v18);
        }
        else {
          int v19 = 0;
        }
        int v20 = &v15[(void)v19];
        uint64_t v21 = &v15[(void)v19];
        *uint64_t v21 = v10;
        uint64_t v13 = v21 + 1;
        if (v12 != (unsigned char *)v14)
        {
          char v22 = &v12[~v14];
          do
          {
            char v23 = *--v12;
            (v22--)[(void)v19] = v23;
          }
          while (v12 != (unsigned char *)v14);
          uint64_t v12 = (unsigned char *)*v8;
          int v20 = v19;
        }
        *(void *)(a2 + 16) = v20;
        *(void *)(a2 + 24) = v13;
        *(void *)(a2 + 32) = &v19[v18];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        unsigned char *v12 = v10;
        uint64_t v13 = v12 + 1;
      }
      *(void *)(a2 + 24) = v13;
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(a2 + 12));
  }
  *(unsigned char *)(a2 + 7) = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a2 + 8) = 0;
}

uint64_t ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke_55(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a2 = *(unsigned char *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(v21, "qmi.log");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v21, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" callEndCauseFromEvent for call", 31);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (*(void *)(v3 + 48) || (uint64_t v5 = *(int *)(v3 + 40), v5 > 0x11)) {
    int v6 = 4;
  }
  else {
    int v6 = dword_1C56D0DE0[v5];
  }
  *(_DWORD *)(a2 + 4) = v6;
  uint64_t v8 = *(unsigned char **)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  if ((unint64_t)v8 >= v7)
  {
    unint64_t v10 = *(void *)(a2 + 8);
    unint64_t v11 = &v8[-v10];
    uint64_t v12 = (uint64_t)&v8[-v10 + 1];
    if (v12 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = v7 - v10;
    if (2 * v13 > v12) {
      uint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v14 = v12;
    }
    if (v14) {
      uint64_t v15 = operator new(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = &v15[v14];
    v11[(void)v15] = 0;
    uint64_t v9 = (uint64_t)&v11[(void)v15 + 1];
    if (v8 == (unsigned char *)v10)
    {
      uint64_t v15 = &v11[(void)v15];
    }
    else
    {
      unint64_t v17 = &v8[~v10];
      do
      {
        char v18 = *--v8;
        (v17--)[(void)v15] = v18;
      }
      while (v8 != (unsigned char *)v10);
      uint64_t v8 = *(unsigned char **)(a2 + 8);
    }
    *(void *)(a2 + 8) = v15;
    *(void *)(a2 + 16) = v9;
    *(void *)(a2 + 24) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v8 = 0;
    uint64_t v9 = (uint64_t)(v8 + 1);
  }
  *(void *)(a2 + 16) = v9;
}

void sub_1C53A864C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke_3(uint64_t a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'LegacyQMISipLogger::logSessionTerminationEvent(LegacyQMISipLogger *this, const BambiCallSessionTerminationBaseEvent *a2, char a3, char a4)
{
  return LegacyQMISipLogger::logSessionTerminationEvent((LegacyQMISipLogger *)((char *)this - 136), a2, a3, a4);
}

void LegacyQMISipLogger::logIncomingPrack(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  if (*(unsigned char *)(a1 + 192))
  {
    std::string::basic_string[abi:ne180100]<0>(aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v7 = ims::debug((uint64_t)aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"LegacyQMISipLogger::logIncomingPrack [appCallId=", 48);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v21 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(aBlock[0]);
    }
    memset(&v34, 0, sizeof(v34));
    uint64_t v8 = *a3;
    if (*(char *)(*a3 + 519) < 0) {
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(v8 + 496), *(void *)(v8 + 504));
    }
    else {
      std::string v34 = *(std::string *)(v8 + 496);
    }
    memset(v33, 0, sizeof(v33));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v33);
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 1174405120;
    int v29 = ___ZN18LegacyQMISipLogger16logIncomingPrackERK10SipRequestNSt3__110shared_ptrI9BambiCallEEh_block_invoke;
    uint64_t v30 = &__block_descriptor_tmp_63_0;
    char v32 = a4;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v31, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
    }
    else {
      std::string v31 = v34;
    }
    uint64_t v9 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>((uint64_t)v33);
    unint64_t v10 = (capabilities::radio *)((uint64_t (*)(void *, char *))v29)(v28, v9);
    if (capabilities::radio::mav20Plus(v10))
    {
      uint64_t v11 = *a3;
      uint64_t v12 = *(std::__shared_weak_count **)(v11 + 368);
      if (v12 && (unint64_t v13 = std::__shared_weak_count::lock(v12)) != 0)
      {
        int v14 = *(_DWORD *)(*(void *)(v11 + 360) + 4100);
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      else
      {
        int v14 = MEMORY[0x1004];
      }
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 0x40000000;
      uint64_t v25 = ___ZN18LegacyQMISipLogger16logIncomingPrackERK10SipRequestNSt3__110shared_ptrI9BambiCallEEh_block_invoke_64;
      char v26 = &__block_descriptor_tmp_65;
      int v27 = v14;
      uint64_t v15 = qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>((uint64_t)v33);
      v25((uint64_t)v24, v15);
    }
    std::string __p = (void *)(a1 + 160);
    uint64_t v19 = QMIServiceMsg::create();
    int v20 = 25000;
    uint64_t v22 = 0;
    char v23 = 0;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 0x40000000;
    v17[2] = ___ZN18LegacyQMISipLogger16logIncomingPrackERK10SipRequestNSt3__110shared_ptrI9BambiCallEEh_block_invoke_2;
    v17[3] = &__block_descriptor_tmp_67;
    v17[4] = a1;
    aBlock[0] = (void *)MEMORY[0x1E4F143A8];
    aBlock[1] = (void *)0x40000000;
    int v36 = ___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    int v37 = &unk_1E65100B8;
    uint64_t v38 = v17;
    unint64_t v16 = _Block_copy(aBlock);
    char v23 = v16;
    if (v19)
    {
      qmi::Client::send();
      unint64_t v16 = v23;
    }
    if (v16) {
      _Block_release(v16);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v33);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C53A8A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v37 - 144));
  if (*(char *)(v37 - 89) < 0) {
    operator delete(*(void **)(v37 - 112));
  }
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMISipLogger16logIncomingPrackERK10SipRequestNSt3__110shared_ptrI9BambiCallEEh_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a2 = 0;
  *(unsigned char *)(a2 + 2) = 3;
  *(_WORD *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(a1 + 56);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v4 = *(unsigned __int16 *)(a1 + 40);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 55);
  }
  *(_WORD *)(a2 + 12) = v4;
  if (v4)
  {
    unint64_t v5 = 0;
    int v6 = (uint64_t *)(a1 + 32);
    uint64_t v7 = (unint64_t *)(a2 + 16);
    do
    {
      uint64_t v8 = a1 + 32;
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v8 = *v6;
      }
      char v9 = *(unsigned char *)(v8 + v5);
      uint64_t v11 = *(unsigned char **)(a2 + 24);
      unint64_t v10 = *(void *)(a2 + 32);
      if ((unint64_t)v11 >= v10)
      {
        unint64_t v13 = *v7;
        int v14 = &v11[-*v7];
        unint64_t v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v16 = v10 - v13;
        if (2 * v16 > v15) {
          unint64_t v15 = 2 * v16;
        }
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v17 = v15;
        }
        if (v17) {
          char v18 = (char *)operator new(v17);
        }
        else {
          char v18 = 0;
        }
        uint64_t v19 = &v14[(void)v18];
        int v20 = &v14[(void)v18];
        *int v20 = v9;
        uint64_t v12 = v20 + 1;
        if (v11 != (unsigned char *)v13)
        {
          char v21 = &v11[~v13];
          do
          {
            char v22 = *--v11;
            (v21--)[(void)v18] = v22;
          }
          while (v11 != (unsigned char *)v13);
          uint64_t v11 = (unsigned char *)*v7;
          uint64_t v19 = v18;
        }
        *(void *)(a2 + 16) = v19;
        *(void *)(a2 + 24) = v12;
        *(void *)(a2 + 32) = &v18[v17];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        unsigned char *v11 = v9;
        uint64_t v12 = v11 + 1;
      }
      *(void *)(a2 + 24) = v12;
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(a2 + 12));
  }
  *(unsigned char *)(a2 + 7) = 31;
  *(_DWORD *)(a2 + 8) = 0;
}

uint64_t ___ZN18LegacyQMISipLogger16logIncomingPrackERK10SipRequestNSt3__110shared_ptrI9BambiCallEEh_block_invoke_64(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN18LegacyQMISipLogger16logIncomingPrackERK10SipRequestNSt3__110shared_ptrI9BambiCallEEh_block_invoke_2(uint64_t a1, uint64_t a2)
{
}

void non-virtual thunk to'LegacyQMISipLogger::logIncomingPrack(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
}

void LegacyQMISipLogger::logPrackResponse(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  if (*(unsigned char *)(a1 + 192))
  {
    std::string::basic_string[abi:ne180100]<0>(aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v8 = ims::debug((uint64_t)aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"LegacyQMISipLogger::logPrackResponse [appCallId=", 48);
    *(unsigned char *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v22 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(aBlock[0]);
    }
    memset(&v36, 0, sizeof(v36));
    uint64_t v9 = *a3;
    if (*(char *)(*a3 + 519) < 0) {
      std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v9 + 496), *(void *)(v9 + 504));
    }
    else {
      std::string v36 = *(std::string *)(v9 + 496);
    }
    memset(v35, 0, sizeof(v35));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v35);
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 1174405120;
    uint64_t v30 = ___ZN18LegacyQMISipLogger16logPrackResponseERK11SipResponseNSt3__110shared_ptrI9BambiCallEEh_block_invoke;
    std::string v31 = &__block_descriptor_tmp_69;
    uint64_t v32 = a2;
    char v34 = a4;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v33, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    }
    else {
      std::string v33 = v36;
    }
    unint64_t v10 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>((uint64_t)v35);
    uint64_t v11 = (capabilities::radio *)((uint64_t (*)(void *, char *))v30)(v29, v10);
    if (capabilities::radio::mav20Plus(v11))
    {
      uint64_t v12 = *a3;
      unint64_t v13 = *(std::__shared_weak_count **)(v12 + 368);
      if (v13 && (int v14 = std::__shared_weak_count::lock(v13)) != 0)
      {
        int v15 = *(_DWORD *)(*(void *)(v12 + 360) + 4100);
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      else
      {
        int v15 = MEMORY[0x1004];
      }
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 0x40000000;
      char v26 = ___ZN18LegacyQMISipLogger16logPrackResponseERK11SipResponseNSt3__110shared_ptrI9BambiCallEEh_block_invoke_70;
      int v27 = &__block_descriptor_tmp_71_0;
      int v28 = v15;
      unint64_t v16 = qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>((uint64_t)v35);
      v26((uint64_t)v25, v16);
    }
    std::string __p = (void *)(a1 + 160);
    uint64_t v20 = QMIServiceMsg::create();
    int v21 = 25000;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    v18[2] = ___ZN18LegacyQMISipLogger16logPrackResponseERK11SipResponseNSt3__110shared_ptrI9BambiCallEEh_block_invoke_2;
    v18[3] = &__block_descriptor_tmp_73_0;
    v18[4] = a1;
    aBlock[0] = (void *)MEMORY[0x1E4F143A8];
    aBlock[1] = (void *)0x40000000;
    uint64_t v38 = ___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    uint64_t v39 = &unk_1E65100B8;
    int v40 = v18;
    size_t v17 = _Block_copy(aBlock);
    uint64_t v24 = v17;
    if (v20)
    {
      qmi::Client::send();
      size_t v17 = v24;
    }
    if (v17) {
      _Block_release(v17);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v35);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C53A8FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v37 - 144));
  if (*(char *)(v37 - 89) < 0) {
    operator delete(*(void **)(v37 - 112));
  }
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMISipLogger16logPrackResponseERK11SipResponseNSt3__110shared_ptrI9BambiCallEEh_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a2 = 0;
  *(unsigned char *)(a2 + 2) = 3;
  *(_WORD *)(a2 + 4) = *(_DWORD *)(*(void *)(a1 + 32) + 88);
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0) {
    uint64_t v4 = *(unsigned __int16 *)(a1 + 48);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 63);
  }
  *(_WORD *)(a2 + 12) = v4;
  if (v4)
  {
    unint64_t v5 = 0;
    int v6 = (uint64_t *)(a1 + 40);
    uint64_t v7 = (unint64_t *)(a2 + 16);
    do
    {
      uint64_t v8 = a1 + 40;
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v8 = *v6;
      }
      char v9 = *(unsigned char *)(v8 + v5);
      uint64_t v11 = *(unsigned char **)(a2 + 24);
      unint64_t v10 = *(void *)(a2 + 32);
      if ((unint64_t)v11 >= v10)
      {
        unint64_t v13 = *v7;
        int v14 = &v11[-*v7];
        unint64_t v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v16 = v10 - v13;
        if (2 * v16 > v15) {
          unint64_t v15 = 2 * v16;
        }
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v17 = v15;
        }
        if (v17) {
          char v18 = (char *)operator new(v17);
        }
        else {
          char v18 = 0;
        }
        uint64_t v19 = &v14[(void)v18];
        uint64_t v20 = &v14[(void)v18];
        *uint64_t v20 = v9;
        uint64_t v12 = v20 + 1;
        if (v11 != (unsigned char *)v13)
        {
          int v21 = &v11[~v13];
          do
          {
            char v22 = *--v11;
            (v21--)[(void)v18] = v22;
          }
          while (v11 != (unsigned char *)v13);
          uint64_t v11 = (unsigned char *)*v7;
          uint64_t v19 = v18;
        }
        *(void *)(a2 + 16) = v19;
        *(void *)(a2 + 24) = v12;
        *(void *)(a2 + 32) = &v18[v17];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        unsigned char *v11 = v9;
        uint64_t v12 = v11 + 1;
      }
      *(void *)(a2 + 24) = v12;
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(a2 + 12));
  }
  *(unsigned char *)(a2 + 7) = 38;
  *(_DWORD *)(a2 + 8) = 0;
}

uint64_t ___ZN18LegacyQMISipLogger16logPrackResponseERK11SipResponseNSt3__110shared_ptrI9BambiCallEEh_block_invoke_70(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN18LegacyQMISipLogger16logPrackResponseERK11SipResponseNSt3__110shared_ptrI9BambiCallEEh_block_invoke_2(uint64_t a1, uint64_t a2)
{
}

void non-virtual thunk to'LegacyQMISipLogger::logPrackResponse(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
}

uint64_t ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke_2(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a2 = 1;
  *(unsigned char *)(a2 + 2) = 0;
  *(_WORD *)(a2 + 4) = 180;
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(a1 + 56);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v4 = *(unsigned __int16 *)(a1 + 40);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 55);
  }
  *(_WORD *)(a2 + 12) = v4;
  if (v4)
  {
    unint64_t v5 = 0;
    int v6 = (uint64_t *)(a1 + 32);
    uint64_t v7 = (unint64_t *)(a2 + 16);
    do
    {
      uint64_t v8 = a1 + 32;
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v8 = *v6;
      }
      char v9 = *(unsigned char *)(v8 + v5);
      uint64_t v11 = *(unsigned char **)(a2 + 24);
      unint64_t v10 = *(void *)(a2 + 32);
      if ((unint64_t)v11 >= v10)
      {
        unint64_t v13 = *v7;
        int v14 = &v11[-*v7];
        unint64_t v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v16 = v10 - v13;
        if (2 * v16 > v15) {
          unint64_t v15 = 2 * v16;
        }
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v17 = v15;
        }
        if (v17) {
          char v18 = (char *)operator new(v17);
        }
        else {
          char v18 = 0;
        }
        uint64_t v19 = &v14[(void)v18];
        uint64_t v20 = &v14[(void)v18];
        *uint64_t v20 = v9;
        uint64_t v12 = v20 + 1;
        if (v11 != (unsigned char *)v13)
        {
          int v21 = &v11[~v13];
          do
          {
            char v22 = *--v11;
            (v21--)[(void)v18] = v22;
          }
          while (v11 != (unsigned char *)v13);
          uint64_t v11 = (unsigned char *)*v7;
          uint64_t v19 = v18;
        }
        *(void *)(a2 + 16) = v19;
        *(void *)(a2 + 24) = v12;
        *(void *)(a2 + 32) = &v18[v17];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        unsigned char *v11 = v9;
        uint64_t v12 = v11 + 1;
      }
      *(void *)(a2 + 24) = v12;
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(a2 + 12));
  }
  *(unsigned char *)(a2 + 7) = 9;
  *(_DWORD *)(a2 + 8) = 0;
}

uint64_t ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke_82(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke_2_84(uint64_t result, uint64_t a2)
{
  *(unsigned char *)a2 = *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24);
  *(_DWORD *)(a2 + 4) = 1;
  return result;
}

void ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke_3(uint64_t a1, uint64_t a2)
{
}

void LegacyQMISipLogger::setATCommandMode(LegacyQMISipLogger *this, int a2)
{
  if (*((unsigned __int8 *)this + 194) != a2)
  {
    *((unsigned char *)this + 194) = a2;
    std::string::basic_string[abi:ne180100]<0>(v10, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)v10, (uint64_t)__p);
    uint64_t v4 = v3;
    if (a2) {
      unint64_t v5 = "Enabling";
    }
    else {
      unint64_t v5 = "Disabling";
    }
    int v6 = *(void **)(v3 + 8);
    if (a2) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = 9;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v5, v7);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"AT Command Mode", 15);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
  }
}

void sub_1C53A949C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'LegacyQMISipLogger::setATCommandMode(LegacyQMISipLogger *this, int a2)
{
}

uint64_t LegacyQMISipLogger::logWiFiHandover(uint64_t result, uint64_t *a2, char a3)
{
  if (*(void *)(result + 240))
  {
    uint64_t v3 = result;
    if (*(unsigned char *)(result + 192))
    {
      ++*(_DWORD *)(result + 228);
      if ((a3 & 1) == 0) {
        ++*(_DWORD *)(result + 232);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "qmi.log");
      std::string::basic_string[abi:ne180100]<0>(aBlock, "");
      uint64_t v6 = ims::debug((uint64_t)__p, (uint64_t)aBlock);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handover total ", 15);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" wifiToCellHandovers ", 21);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (SHIBYTE(v47) < 0) {
        operator delete(aBlock[0]);
      }
      if (SBYTE7(v38) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v45 = 0;
      long long v43 = 0u;
      memset(v44, 0, sizeof(v44));
      *(_OWORD *)uint64_t v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v38 = 0u;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      int v7 = *(char *)(v3 + 223);
      if (v7 >= 0) {
        uint64_t v8 = v3 + 200;
      }
      else {
        uint64_t v8 = *(void *)(v3 + 200);
      }
      if (v7 >= 0) {
        uint64_t v9 = *(unsigned __int8 *)(v3 + 223);
      }
      else {
        uint64_t v9 = *(void *)(v3 + 208);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v8, v9);
      LOBYTE(aBlock[0]) = 48;
      unint64_t v10 = std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, (char *)aBlock);
      uint64_t v11 = *v10;
      *(uint64_t *)((char *)v10 + *(void *)(*v10 - 24) + 24) = 4;
      *(_DWORD *)((char *)v10 + *(void *)(v11 - 24) + 8) = *(_DWORD *)((unsigned char *)v10 + *(void *)(v11 - 24) + 8) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      memset(&v36, 0, sizeof(v36));
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], &v36);
      std::string::basic_string[abi:ne180100]<0>(aBlock, "qmi.log");
      std::string::basic_string[abi:ne180100]<0>(&v19, "");
      uint64_t v12 = ims::debug((uint64_t)aBlock, (uint64_t)&v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"LegacyQMISipLogger::logWiFiHandover handover total ", 51);
      *(unsigned char *)(v12 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v12 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" notify BB call ID ", 19);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v12 + 32))(v12, &v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"_currentAppCallId ", 18);
      *(unsigned char *)(v12 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
      if (v22 < 0) {
        operator delete(v19);
      }
      if (SHIBYTE(v47) < 0) {
        operator delete(aBlock[0]);
      }
      memset(v35, 0, sizeof(v35));
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v35);
      v29[0] = MEMORY[0x1E4F143A8];
      v29[1] = 1174405120;
      uint64_t v30 = ___ZN18LegacyQMISipLogger15logWiFiHandoverENSt3__110shared_ptrI8SipStackEEbb_block_invoke;
      std::string v31 = &__block_descriptor_tmp_101;
      uint64_t v32 = v3;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v33, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
      }
      else {
        std::string v33 = v36;
      }
      char v34 = a3;
      unint64_t v13 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>((uint64_t)v35);
      int v14 = (capabilities::radio *)((uint64_t (*)(void *, char *))v30)(v29, v13);
      if (capabilities::radio::mav20Plus(v14))
      {
        uint64_t v15 = *a2;
        if (*a2) {
          LODWORD(v15) = *(_DWORD *)(v15 + 4100);
        }
        v25[0] = MEMORY[0x1E4F143A8];
        v25[1] = 0x40000000;
        char v26 = ___ZN18LegacyQMISipLogger15logWiFiHandoverENSt3__110shared_ptrI8SipStackEEbb_block_invoke_102;
        int v27 = &__block_descriptor_tmp_103;
        int v28 = v15;
        unint64_t v16 = qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>((uint64_t)v35);
        v26((uint64_t)v25, v16);
      }
      uint64_t v19 = (void *)(v3 + 160);
      uint64_t v20 = QMIServiceMsg::create();
      int v21 = 25000;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 0x40000000;
      v18[2] = ___ZN18LegacyQMISipLogger15logWiFiHandoverENSt3__110shared_ptrI8SipStackEEbb_block_invoke_2;
      v18[3] = &__block_descriptor_tmp_105;
      v18[4] = v3;
      aBlock[0] = (void *)MEMORY[0x1E4F143A8];
      aBlock[1] = (void *)0x40000000;
      char v47 = ___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      uint64_t v48 = &unk_1E65100B8;
      uint64_t v49 = v18;
      size_t v17 = _Block_copy(aBlock);
      uint64_t v24 = v17;
      if (v20)
      {
        qmi::Client::send();
        size_t v17 = v24;
      }
      if (v17) {
        _Block_release(v17);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v35);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      __p[0] = *(void **)MEMORY[0x1E4FBA418];
      *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
      __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
      if (SHIBYTE(v42) < 0) {
        operator delete(v41[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x1C878E270](v44);
    }
  }
  return result;
}

void sub_1C53A9B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMISipLogger15logWiFiHandoverENSt3__110shared_ptrI8SipStackEEbb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  *(_WORD *)a2 = 0;
  *(unsigned char *)(a2 + 2) = 2;
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(v4 + 224);
  if (*(char *)(a1 + 63) < 0) {
    uint64_t v5 = *(unsigned __int16 *)(a1 + 48);
  }
  else {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 63);
  }
  *(_WORD *)(a2 + 12) = v5;
  if (v5)
  {
    unint64_t v6 = 0;
    int v7 = (uint64_t *)(a1 + 40);
    uint64_t v8 = (unint64_t *)(a2 + 16);
    do
    {
      uint64_t v9 = a1 + 40;
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v9 = *v7;
      }
      char v10 = *(unsigned char *)(v9 + v6);
      uint64_t v12 = *(unsigned char **)(a2 + 24);
      unint64_t v11 = *(void *)(a2 + 32);
      if ((unint64_t)v12 >= v11)
      {
        unint64_t v14 = *v8;
        uint64_t v15 = &v12[-*v8];
        unint64_t v16 = (unint64_t)(v15 + 1);
        if ((uint64_t)(v15 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = v11 - v14;
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v18 = v16;
        }
        if (v18) {
          uint64_t v19 = (char *)operator new(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = &v15[(void)v19];
        int v21 = &v15[(void)v19];
        *int v21 = v10;
        unint64_t v13 = v21 + 1;
        if (v12 != (unsigned char *)v14)
        {
          char v22 = &v12[~v14];
          do
          {
            char v23 = *--v12;
            (v22--)[(void)v19] = v23;
          }
          while (v12 != (unsigned char *)v14);
          uint64_t v12 = (unsigned char *)*v8;
          uint64_t v20 = v19;
        }
        *(void *)(a2 + 16) = v20;
        *(void *)(a2 + 24) = v13;
        *(void *)(a2 + 32) = &v19[v18];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        unsigned char *v12 = v10;
        unint64_t v13 = v12 + 1;
      }
      *(void *)(a2 + 24) = v13;
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(a2 + 12));
  }
  if (*(unsigned char *)(a1 + 64)) {
    char v24 = 44;
  }
  else {
    char v24 = 45;
  }
  *(unsigned char *)(a2 + 7) = v24;
  *(_DWORD *)(a2 + 8) = 0;
}

uint64_t ___ZN18LegacyQMISipLogger15logWiFiHandoverENSt3__110shared_ptrI8SipStackEEbb_block_invoke_102(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN18LegacyQMISipLogger15logWiFiHandoverENSt3__110shared_ptrI8SipStackEEbb_block_invoke_2(uint64_t a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'LegacyQMISipLogger::logWiFiHandover(uint64_t a1, uint64_t *a2, char a3)
{
  return LegacyQMISipLogger::logWiFiHandover(a1 - 136, a2, a3);
}

char *qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 1)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 16;
}

void *qmi::MutableMessageBase::TlvWrapper<mavims::tlv::SipPacketInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20C7710;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::SipPacketInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20C7710;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::SipPacketInfo>::getSize(uint64_t a1)
{
  return *(void *)(a1 + 40) - *(void *)(a1 + 32) + 13;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::SipPacketInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = mavims::tlv::writeField(v5, a1 + 16);
  *a2 = result;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = result - v5;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::SipPacketInfo>::clone()
{
}

void sub_1C53AA17C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1091C4030C8ECF9);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 2)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::PairedSub>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::PairedSub>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::PairedSub>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::PairedSub>::clone()
{
}

void *qmi::MutableMessageBase::TlvWrapper<mavims::tlv::IncomingCallInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20C77B0;
  char v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::IncomingCallInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20C77B0;
  char v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::IncomingCallInfo>::getSize(uint64_t a1)
{
  return *(void *)(a1 + 56) - *(void *)(a1 + 48) + 10;
}

void *qmi::MutableMessageBase::TlvWrapper<mavims::tlv::IncomingCallInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<mavims::tlv::IncomingCallInfo>((unsigned char **)a2, a1 + 16);
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::IncomingCallInfo>::clone()
{
}

void sub_1C53AA5A0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1091C405FD21850);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      unint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C53AA688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void *qmi::MutableMessageBase::TlvWrapper<mavims::tlv::OutgoingCallInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20C7800;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::OutgoingCallInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20C7800;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::OutgoingCallInfo>::getSize(uint64_t a1)
{
  return *(void *)(a1 + 40) - *(void *)(a1 + 32) + 7;
}

void *qmi::MutableMessageBase::TlvWrapper<mavims::tlv::OutgoingCallInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *a2;
  __int16 v6 = *a2 + 3;
  *a2 += 3;
  *(unsigned char *)(v5 + 3) = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(v5 + 4) = *(_DWORD *)(a1 + 20);
  *(unsigned char *)(v5 + 5) = *(_DWORD *)(a1 + 24);
  *(unsigned char *)(v5 + 6) = *(unsigned char *)(a1 + 28);
  uint64_t result = memcpy((void *)(v5 + 7), *(const void **)(a1 + 32), *(void *)(a1 + 40) - *(void *)(a1 + 32));
  uint64_t v8 = v5 + 7 + *(void *)(a1 + 40) - *(void *)(a1 + 32);
  *a2 = v8;
  *(unsigned char *)uint64_t v5 = v4;
  *(_WORD *)(v5 + 1) = v8 - v6;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::OutgoingCallInfo>::clone()
{
}

void sub_1C53AA8BC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1091C40DB3BAA9ALL);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ConnectedCallInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ConnectedCallInfo>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ConnectedCallInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 12);
  *(unsigned char *)(v3 + 4) = *(_DWORD *)(result + 16);
  *(unsigned char *)(v3 + 5) = *(unsigned char *)(result + 20);
  *(unsigned char *)(v3 + 6) = *(_DWORD *)(result + 24);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ConnectedCallInfo>::clone()
{
}

void *qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ReleasedCallInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20C78A0;
  char v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ReleasedCallInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20C78A0;
  char v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ReleasedCallInfo>::getSize(uint64_t a1)
{
  return *(void *)(a1 + 32) - *(void *)(a1 + 24) + 8;
}

void *qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ReleasedCallInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *a2;
  __int16 v6 = *a2 + 3;
  *a2 += 3;
  *(unsigned char *)(v5 + 3) = *(unsigned char *)(a1 + 16);
  *(_DWORD *)(v5 + 4) = *(_DWORD *)(a1 + 20);
  uint64_t result = memcpy((void *)(v5 + 8), *(const void **)(a1 + 24), *(void *)(a1 + 32) - *(void *)(a1 + 24));
  uint64_t v8 = v5 + 8 + *(void *)(a1 + 32) - *(void *)(a1 + 24);
  *a2 = v8;
  *(unsigned char *)uint64_t v5 = v4;
  *(_WORD *)(v5 + 1) = v8 - v6;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ReleasedCallInfo>::clone()
{
}

void sub_1C53AAB80(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1091C40B9267B58);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::RingingInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::RingingInfo>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::RingingInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 12);
  *(unsigned char *)(v3 + 4) = *(_DWORD *)(result + 16);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::RingingInfo>::clone()
{
}

void *IMSMetricsManager::IMSMetricsManager(void *a1, uint64_t a2, uint64_t *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.metrics.mgr");
  ImsLogContainer::ImsLogContainer((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  a1[13] = 0;
  a1[14] = 0;
  *a1 = &unk_1F20C7928;
  __int16 v6 = a1 + 19;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  a1[19] = a1 + 19;
  a1[20] = a1 + 19;
  uint64_t v7 = a1 + 22;
  a1[21] = 0;
  a1[22] = a1 + 22;
  a1[23] = a1 + 22;
  a1[24] = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = a2;
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    char v10 = (std::__shared_weak_count *)a1[27];
    a1[26] = v8;
    a1[27] = v9;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    a1[27] = 0;
    a1[26] = v8;
  }
  unint64_t v11 = (char *)operator new(0x2B0uLL);
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)unint64_t v11 = &unk_1F20C7A20;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.awd");
  ImsLogContainer::ImsLogContainer((uint64_t)(v11 + 24), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)v11 + 3) = &unk_1F20BB838;
  *((_OWORD *)v11 + 11) = 0u;
  uint64_t v12 = v11 + 128;
  *((void *)v11 + 17) = 0;
  *((void *)v11 + 18) = 0;
  *((void *)v11 + 16) = &unk_1F20BB9C8;
  *((void *)v11 + 19) = 0;
  *((void *)v11 + 20) = &unk_1F20BB9F8;
  *((void *)v11 + 77) = 0;
  *((_OWORD *)v11 + 39) = 0u;
  *((_OWORD *)v11 + 41) = 0u;
  *((_OWORD *)v11 + 12) = 0u;
  *((_OWORD *)v11 + 13) = 0u;
  *((_OWORD *)v11 + 14) = 0u;
  *((_OWORD *)v11 + 15) = 0u;
  *((_OWORD *)v11 + 16) = 0u;
  *((_OWORD *)v11 + 17) = 0u;
  *(_OWORD *)(v11 + 284) = 0u;
  *((_DWORD *)v11 + 88) = 0;
  *((_OWORD *)v11 + 20) = 0u;
  *((_OWORD *)v11 + 21) = 0u;
  *((_OWORD *)v11 + 19) = 0u;
  *((_DWORD *)v11 + 102) = 0;
  *(_OWORD *)(v11 + 392) = 0u;
  *(_OWORD *)(v11 + 376) = 0u;
  *(_OWORD *)(v11 + 360) = 0u;
  *((_DWORD *)v11 + 116) = 0;
  *((_OWORD *)v11 + 26) = 0u;
  *((_OWORD *)v11 + 27) = 0u;
  *((_OWORD *)v11 + 28) = 0u;
  *(_OWORD *)(v11 + 472) = 0u;
  *(_OWORD *)(v11 + 488) = 0u;
  *(_OWORD *)(v11 + 501) = 0u;
  *((void *)v11 + 84) = xpc_null_create();
  v11[680] = 0;
  unint64_t v13 = (std::__shared_weak_count *)a1[16];
  a1[15] = v11 + 24;
  a1[16] = v11;
  if (!v13
    || ((std::__shared_weak_count::__release_shared[abi:ne180100](v13), uint64_t v14 = a1[15], v11 = (char *)a1[16], v14)
      ? (uint64_t v12 = (char *)(v14 + 104))
      : (uint64_t v12 = 0),
        v11))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = operator new(0x20uLL);
  void v15[2] = v12;
  void v15[3] = v11;
  uint64_t v16 = a1[19];
  void *v15 = v16;
  v15[1] = v6;
  *(void *)(v16 + 8) = v15;
  a1[19] = v15;
  ++a1[21];
  uint64_t v18 = a1[15];
  uint64_t v17 = a1[16];
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = operator new(0x20uLL);
  uint64_t v20 = v18 + 136;
  if (!v18) {
    uint64_t v20 = 0;
  }
  v19[2] = v20;
  v19[3] = v17;
  uint64_t v21 = a1[22];
  *uint64_t v19 = v21;
  v19[1] = v7;
  *(void *)(v21 + 8) = v19;
  a1[22] = v19;
  ++a1[24];
  RadioVendor = (capabilities::radio *)TelephonyRadiosGetRadioVendor();
  if (RadioVendor == 1)
  {
    if (capabilities::radio::mav20Plus(RadioVendor))
    {
      uint64_t v30 = a1[26];
      uint64_t v25 = (std::__shared_weak_count *)operator new(0x130uLL);
      v25->__shared_owners_ = 0;
      v25->__shared_weak_owners_ = 0;
      v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7AC0;
      std::string v31 = (std::__shared_weak_count_vtbl *)&v25[1];
      LegacyQMISipLogger::LegacyQMISipLogger((LegacyQMISipLogger *)&v25[1]);
      v25[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C6E18;
      v25[5].__shared_owners_ = (uint64_t)&unk_1F20C6F68;
      v25[6].__shared_weak_owners_ = (uint64_t)&unk_1F20C6F98;
      v25[11].__shared_owners_ = (uint64_t)&v25[11].__shared_weak_owners_;
      v25[11].__shared_weak_owners_ = 0;
      v25[12].__vftable = 0;
      v25[12].__shared_owners_ = v30;
    }
    else
    {
      uint64_t v25 = (std::__shared_weak_count *)operator new(0x110uLL);
      v25->__shared_owners_ = 0;
      v25->__shared_weak_owners_ = 0;
      v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7B10;
      std::string v31 = (std::__shared_weak_count_vtbl *)&v25[1];
      LegacyQMISipLogger::LegacyQMISipLogger((LegacyQMISipLogger *)&v25[1]);
    }
    shared_owners = (std::__shared_weak_count *)v25[7].__shared_owners_;
    if (shared_owners)
    {
      if (shared_owners->__shared_owners_ != -1)
      {
LABEL_31:
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        char v34 = operator new(0x20uLL);
        v34[2] = (char *)v31 + 104;
        v34[3] = v25;
        uint64_t v35 = a1[19];
        void *v34 = v35;
        v34[1] = v6;
        *(void *)(v35 + 8) = v34;
        a1[19] = v34;
        ++a1[21];
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        int v28 = operator new(0x20uLL);
        p_on_zero_shared = (uint64_t *)&v31[3].__on_zero_shared;
        goto LABEL_32;
      }
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v25[7].__vftable = v31;
      v25[7].__shared_owners_ = (uint64_t)v25;
      std::__shared_weak_count::__release_weak(shared_owners);
    }
    else
    {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v25[7].__vftable = v31;
      v25[7].__shared_owners_ = (uint64_t)v25;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    goto LABEL_31;
  }
  if (RadioVendor != 2)
  {
    uint64_t v32 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"unknown radio vendor ", 21);
    *(unsigned char *)(v32 + 17) = 0;
    TelephonyRadiosGetRadioVendor();
    std::ostream::operator<<();
    *(unsigned char *)(v32 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v32 + 17) = 0;
    goto LABEL_33;
  }
  char v24 = (IMSCallManager *)a1[25];
  char v23 = (BambiClient *)a1[26];
  uint64_t v25 = (std::__shared_weak_count *)operator new(0xE0uLL);
  v25->__shared_owners_ = 0;
  v25->__shared_weak_owners_ = 0;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7A70;
  IBISipLogger::IBISipLogger((IBISipLogger *)&v25[1], v24, v23);
  atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  char v26 = operator new(0x20uLL);
  v26[2] = (char *)v25 + 128;
  v26[3] = v25;
  uint64_t v27 = a1[19];
  *char v26 = v27;
  v26[1] = v6;
  *(void *)(v27 + 8) = v26;
  a1[19] = v26;
  ++a1[21];
  atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  int v28 = operator new(0x20uLL);
  p_on_zero_shared = &v25[6].__shared_weak_owners_;
LABEL_32:
  void v28[2] = p_on_zero_shared;
  v28[3] = v25;
  uint64_t v36 = a1[22];
  void *v28 = v36;
  v28[1] = v7;
  *(void *)(v36 + 8) = v28;
  a1[22] = v28;
  ++a1[24];
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
LABEL_33:
  uint64_t v37 = operator new(0x88uLL);
  v37[1] = 0;
  void v37[2] = 0;
  *uint64_t v37 = &unk_1F20C79D0;
  long long v38 = powerlog::PowerLogger::PowerLogger((powerlog::PowerLogger *)(v37 + 3));
  long long v39 = (std::__shared_weak_count *)a1[18];
  a1[17] = v38;
  a1[18] = v37;
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  return a1;
}

void sub_1C53AB290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v21);
  if (*v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*v19);
  }
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(v17);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(v16);
  char v22 = *(std::__shared_weak_count **)(v15 + 144);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  char v23 = *(std::__shared_weak_count **)(v15 + 128);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  char v24 = *(std::__shared_weak_count **)(v15 + 112);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  ImsLogContainer::~ImsLogContainer((void **)v15);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::~IMSMetricsManager(IMSMetricsManager *this)
{
  *(void *)this = &unk_1F20C7928;
  char v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 22);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 19);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  char v4 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  IMSMetricsManager::~IMSMetricsManager(this);
  JUMPOUT(0x1C878E320);
}

void IMSMetricsManager::create(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  __int16 v6 = (std::__shared_weak_count *)operator new(0x100uLL);
  uint64_t v7 = v6;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7B60;
  uint64_t v8 = &v6[1].__vftable;
  uint64_t v9 = *a2;
  char v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v12[0] = v9;
  v12[1] = (uint64_t)v10;
  IMSMetricsManager::IMSMetricsManager(&v6[1].__vftable, a1, v12);
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    *uint64_t v8 = &unk_1F20C7BB0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  else
  {
    *uint64_t v8 = &unk_1F20C7BB0;
  }
  shared_weak_owners = (std::__shared_weak_count *)v7[5].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[5].__shared_owners_ = (uint64_t)v8;
    v7[5].__shared_weak_owners_ = (uint64_t)v7;
    goto LABEL_10;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[5].__shared_owners_ = (uint64_t)v8;
    v7[5].__shared_weak_owners_ = (uint64_t)v7;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_10:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *a3 = v8;
  a3[1] = v7;
}

void sub_1C53AB5BC(_Unwind_Exception *a1)
{
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logSipRequest(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(*a2 + 2681))
  {
    uint64_t v9 = *(void *)(a1 + 120);
    char v10 = (std::__shared_weak_count *)a2[1];
    uint64_t v17 = *a2;
    uint64_t v18 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 112))(v9, &v17, a3, a4, a5);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  else
  {
    uint64_t v11 = a1 + 176;
    uint64_t v12 = *(void *)(a1 + 184);
    if (v12 != a1 + 176)
    {
      do
      {
        unint64_t v13 = *(void (****)(void, uint64_t *, uint64_t, uint64_t, uint64_t))(v12 + 16);
        uint64_t v14 = (std::__shared_weak_count *)a2[1];
        uint64_t v15 = *a2;
        uint64_t v16 = v14;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (**v13)(v13, &v15, a3, a4, a5);
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        uint64_t v12 = *(void *)(v12 + 8);
      }
      while (v12 != v11);
    }
  }
}

void sub_1C53AB718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logSipResponse(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(*a2 + 2681))
  {
    uint64_t v9 = *(void *)(a1 + 120);
    char v10 = (std::__shared_weak_count *)a2[1];
    uint64_t v17 = *a2;
    uint64_t v18 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 120))(v9, &v17, a3, a4, a5);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  else
  {
    uint64_t v11 = a1 + 176;
    uint64_t v12 = *(void *)(a1 + 184);
    if (v12 != a1 + 176)
    {
      do
      {
        uint64_t v13 = *(void *)(v12 + 16);
        uint64_t v14 = (std::__shared_weak_count *)a2[1];
        uint64_t v15 = *a2;
        uint64_t v16 = v14;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 8))(v13, &v15, a3, a4, a5);
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        uint64_t v12 = *(void *)(v12 + 8);
      }
      while (v12 != v11);
    }
  }
}

void sub_1C53AB870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logSipRequestFromNonProxyDropped(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 128))(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C53AB90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logEarlyMTSessionRequestedEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 176;
  uint64_t v3 = *(void *)(a1 + 184);
  if (v3 != a1 + 176)
  {
    do
    {
      uint64_t v5 = *(void *)(v3 + 16);
      __int16 v6 = (std::__shared_weak_count *)a2[1];
      uint64_t v7 = *a2;
      uint64_t v8 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 32))(v5, &v7);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
}

void sub_1C53AB9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logSessionRequestedEvent(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1 + 176;
  uint64_t v5 = *(void *)(a1 + 184);
  if (v5 != a1 + 176)
  {
    do
    {
      uint64_t v9 = *(void *)(v5 + 16);
      char v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v11 = *a2;
      uint64_t v12 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v9 + 40))(v9, &v11, a3, a4);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != v4);
  }
}

void sub_1C53ABA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logRingingEvent(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1 + 176;
  uint64_t v5 = *(void *)(a1 + 184);
  if (v5 != a1 + 176)
  {
    do
    {
      uint64_t v9 = *(void *)(v5 + 16);
      char v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v11 = *a2;
      uint64_t v12 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v9 + 64))(v9, &v11, a3, a4);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != v4);
  }
}

void sub_1C53ABB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logSessionProgress(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = a1 + 176;
  uint64_t v5 = *(void *)(a1 + 184);
  if (v5 != a1 + 176)
  {
    do
    {
      uint64_t v9 = *(void *)(v5 + 16);
      char v10 = (std::__shared_weak_count *)a3[1];
      uint64_t v11 = *a3;
      uint64_t v12 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v9 + 88))(v9, a2, &v11, a4);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != v4);
  }
}

void sub_1C53ABC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logSessionConfirmedEvent(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1 + 176;
  uint64_t v5 = *(void *)(a1 + 184);
  if (v5 != a1 + 176)
  {
    do
    {
      uint64_t v9 = *(void *)(v5 + 16);
      char v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v11 = *a2;
      uint64_t v12 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, &v11, a3, a4);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != v4);
  }
}

void sub_1C53ABCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IMSMetricsManager::logSessionTerminationEvent(IMSMetricsManager *this, const BambiCallSessionTerminationBaseEvent *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (char *)this + 176;
  uint64_t v6 = *((void *)this + 23);
  if ((IMSMetricsManager *)v6 == (IMSMetricsManager *)((char *)this + 176)) {
    return 0;
  }
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = (*(uint64_t (**)(void, const BambiCallSessionTerminationBaseEvent *, uint64_t, uint64_t, uint64_t))(**(void **)(v6 + 16) + 72))(*(void *)(v6 + 16), a2, a3, a4, a5);
    uint64_t v13 = *(const void **)(v6 + 16);
    if (v13
    {
      uint64_t v14 = *(std::__shared_weak_count **)(v6 + 24);
      if (v14)
      {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      uint64_t v11 = v12;
    }
    uint64_t v6 = *(void *)(v6 + 8);
  }
  while ((char *)v6 != v5);
  return v11;
}

void IMSMetricsManager::logIncomingPrack(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = a1 + 176;
  uint64_t v5 = *(void *)(a1 + 184);
  if (v5 != a1 + 176)
  {
    do
    {
      uint64_t v9 = *(void *)(v5 + 16);
      char v10 = (std::__shared_weak_count *)a3[1];
      uint64_t v11 = *a3;
      uint64_t v12 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v9 + 16))(v9, a2, &v11, a4);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != v4);
  }
}

void sub_1C53ABEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logWiFiHandover(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(*a2 + 2681))
  {
    uint64_t v7 = *(void *)(a1 + 120);
    uint64_t v8 = (std::__shared_weak_count *)a2[1];
    uint64_t v15 = *a2;
    uint64_t v16 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v7 + 288))(v7, &v15, a3, a4);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  else
  {
    uint64_t v9 = a1 + 176;
    uint64_t v10 = *(void *)(a1 + 184);
    if (v10 != a1 + 176)
    {
      do
      {
        uint64_t v11 = *(void *)(v10 + 16);
        uint64_t v12 = (std::__shared_weak_count *)a2[1];
        uint64_t v13 = *a2;
        uint64_t v14 = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v11 + 168))(v11, &v13, a3, a4);
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        uint64_t v10 = *(void *)(v10 + 8);
      }
      while (v10 != v9);
    }
  }
}

void sub_1C53AC01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logPrackResponse(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = a1 + 176;
  uint64_t v5 = *(void *)(a1 + 184);
  if (v5 != a1 + 176)
  {
    do
    {
      uint64_t v9 = *(void *)(v5 + 16);
      uint64_t v10 = (std::__shared_weak_count *)a3[1];
      uint64_t v11 = *a3;
      uint64_t v12 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v9 + 24))(v9, a2, &v11, a4);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != v4);
  }
}

void sub_1C53AC0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logRegistrationSuccess(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(*a2 + 2681))
  {
    uint64_t v5 = *(void *)(a1 + 120);
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    uint64_t v13 = *a2;
    uint64_t v14 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v5 + 296))(v5, &v13, a3);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  else
  {
    uint64_t v7 = a1 + 176;
    uint64_t v8 = *(void *)(a1 + 184);
    if (v8 != a1 + 176)
    {
      do
      {
        uint64_t v9 = *(void *)(v8 + 16);
        uint64_t v10 = (std::__shared_weak_count *)a2[1];
        uint64_t v11 = *a2;
        uint64_t v12 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v9 + 184))(v9, &v11, a3);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        uint64_t v8 = *(void *)(v8 + 8);
      }
      while (v8 != v7);
    }
  }
}

void sub_1C53AC228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logRegistrationError(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(*a2 + 2681))
  {
    uint64_t v5 = *(void *)(a1 + 120);
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    uint64_t v13 = *a2;
    uint64_t v14 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v5 + 304))(v5, &v13, a3);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  else
  {
    uint64_t v7 = a1 + 176;
    uint64_t v8 = *(void *)(a1 + 184);
    if (v8 != a1 + 176)
    {
      do
      {
        uint64_t v9 = *(void *)(v8 + 16);
        uint64_t v10 = (std::__shared_weak_count *)a2[1];
        uint64_t v11 = *a2;
        uint64_t v12 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v9 + 192))(v9, &v11, a3);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        uint64_t v8 = *(void *)(v8 + 8);
      }
      while (v8 != v7);
    }
  }
}

void sub_1C53AC368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logRegistrationRequest(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(*a2 + 2681))
  {
    uint64_t v5 = *(void *)(a1 + 120);
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    uint64_t v13 = *a2;
    uint64_t v14 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v5 + 312))(v5, &v13, a3);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  else
  {
    uint64_t v7 = a1 + 176;
    uint64_t v8 = *(void *)(a1 + 184);
    if (v8 != a1 + 176)
    {
      do
      {
        uint64_t v9 = *(void *)(v8 + 16);
        uint64_t v10 = (std::__shared_weak_count *)a2[1];
        uint64_t v11 = *a2;
        uint64_t v12 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v9 + 176))(v9, &v11, a3);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        uint64_t v8 = *(void *)(v8 + 8);
      }
      while (v8 != v7);
    }
  }
}

void sub_1C53AC4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logRegistrationTerminated(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(*a2 + 2681))
  {
    uint64_t v3 = *(void *)(a1 + 120);
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    uint64_t v11 = *a2;
    uint64_t v12 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 320))(v3, &v11);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  else
  {
    uint64_t v5 = a1 + 176;
    uint64_t v6 = *(void *)(a1 + 184);
    if (v6 != a1 + 176)
    {
      do
      {
        uint64_t v7 = *(void *)(v6 + 16);
        uint64_t v8 = (std::__shared_weak_count *)a2[1];
        uint64_t v9 = *a2;
        uint64_t v10 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 208))(v7, &v9);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while (v6 != v5);
    }
  }
}

void sub_1C53AC5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logRegistrationTerminated(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(*a2 + 2681))
  {
    uint64_t v5 = *(void *)(a1 + 120);
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    uint64_t v13 = *a2;
    uint64_t v14 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v5 + 328))(v5, &v13, a3);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  else
  {
    uint64_t v7 = a1 + 176;
    uint64_t v8 = *(void *)(a1 + 184);
    if (v8 != a1 + 176)
    {
      do
      {
        uint64_t v9 = *(void *)(v8 + 16);
        uint64_t v10 = (std::__shared_weak_count *)a2[1];
        uint64_t v11 = *a2;
        uint64_t v12 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v9 + 200))(v9, &v11, a3);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        uint64_t v8 = *(void *)(v8 + 8);
      }
      while (v8 != v7);
    }
  }
}

void sub_1C53AC714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logRegistrationStateChange(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(*a2 + 2681))
  {
    uint64_t v5 = *(void *)(a1 + 120);
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    uint64_t v13 = *a2;
    uint64_t v14 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v5 + 336))(v5, &v13, a3);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  else
  {
    uint64_t v7 = a1 + 176;
    uint64_t v8 = *(void *)(a1 + 184);
    if (v8 != a1 + 176)
    {
      do
      {
        uint64_t v9 = *(void *)(v8 + 16);
        uint64_t v10 = (std::__shared_weak_count *)a2[1];
        uint64_t v11 = *a2;
        uint64_t v12 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v9 + 216))(v9, &v11, a3);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        uint64_t v8 = *(void *)(v8 + 8);
      }
      while (v8 != v7);
    }
  }
}

void sub_1C53AC854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logDeRegistration(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(*a2 + 2681))
  {
    uint64_t v3 = *(void *)(a1 + 120);
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    uint64_t v11 = *a2;
    uint64_t v12 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 344))(v3, &v11);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  else
  {
    uint64_t v5 = a1 + 176;
    uint64_t v6 = *(void *)(a1 + 184);
    if (v6 != a1 + 176)
    {
      do
      {
        uint64_t v7 = *(void *)(v6 + 16);
        uint64_t v8 = (std::__shared_weak_count *)a2[1];
        uint64_t v9 = *a2;
        uint64_t v10 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 224))(v7, &v9);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while (v6 != v5);
    }
  }
}

void sub_1C53AC980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logSmsSendAttemptedEvent(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(*a2 + 2681))
  {
    uint64_t v3 = *(void *)(a1 + 120);
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    uint64_t v11 = *a2;
    uint64_t v12 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 352))(v3, &v11);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  else
  {
    uint64_t v5 = a1 + 176;
    uint64_t v6 = *(void *)(a1 + 184);
    if (v6 != a1 + 176)
    {
      do
      {
        uint64_t v7 = *(void *)(v6 + 16);
        uint64_t v8 = (std::__shared_weak_count *)a2[1];
        uint64_t v9 = *a2;
        uint64_t v10 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 232))(v7, &v9);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while (v6 != v5);
    }
  }
}

void sub_1C53ACAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logSmsSendCompletedEvent(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(*a2 + 2681))
  {
    uint64_t v3 = *(void *)(a1 + 120);
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    uint64_t v11 = *a2;
    uint64_t v12 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 360))(v3, &v11);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  else
  {
    uint64_t v5 = a1 + 176;
    uint64_t v6 = *(void *)(a1 + 184);
    if (v6 != a1 + 176)
    {
      do
      {
        uint64_t v7 = *(void *)(v6 + 16);
        uint64_t v8 = (std::__shared_weak_count *)a2[1];
        uint64_t v9 = *a2;
        uint64_t v10 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 240))(v7, &v9);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while (v6 != v5);
    }
  }
}

void sub_1C53ACBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logSignalingReduction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AnalyticsLogger::logSignalingReduction(v3, v5, a3);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C53ACC70(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::addCallEndInfo(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v3 = *a2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  AnalyticsLogger::addCallEndInfo(v2, &object);
  xpc_release(object);
}

void sub_1C53ACCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void IMSMetricsManager::logLazuliRefer(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *(void *)(a1 + 120);
  uint64_t v12 = (std::__shared_weak_count *)a2[1];
  uint64_t v15 = *a2;
  uint64_t v16 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v14 = *(std::string *)a3;
  }
  if (*(char *)(a7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
  }
  else {
    std::string __p = *(std::string *)a7;
  }
  (*(void (**)(uint64_t, uint64_t *, std::string *, uint64_t, uint64_t, uint64_t, std::string *))(*(void *)v11 + 176))(v11, &v15, &v14, a4, a5, a6, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_1C53ACE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logLazuliMessageSessionSetup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v16 = *(void *)(a1 + 120);
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v21 = *(std::string *)a5;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v20 = *(std::string *)a6;
  }
  if (*(char *)(a7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
  }
  else {
    std::string v19 = *(std::string *)a7;
  }
  if (*(char *)(a8 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a8, *(void *)(a8 + 8));
  }
  else {
    std::string v18 = *(std::string *)a8;
  }
  if (*(char *)(a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a9, *(void *)(a9 + 8));
  }
  else
  {
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
    v17.__r_.__value_.__r.__words[2] = *(void *)(a9 + 16);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, std::string *, std::string *, std::string *, std::string *, std::string *, char))(*(void *)v16 + 184))(v16, a2, a3, a4, &v21, &v20, &v19, &v18, &v17, a10);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1C53AD02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (*(char *)(v37 - 73) < 0) {
    operator delete(*(void **)(v37 - 96));
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logLazuliMessageSessionEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = *(void *)(a1 + 120);
  if (*(char *)(a7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
  }
  else {
    std::string v17 = *(std::string *)a7;
  }
  if (*(char *)(a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a9, *(void *)(a9 + 8));
  }
  else
  {
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
    v16.__r_.__value_.__r.__words[2] = *(void *)(a9 + 16);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, std::string *, uint64_t, std::string *))(*(void *)v15 + 192))(v15, a2, a3, a4, a5, a6, &v17, a8, &v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1C53AD1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logLazuliMessageSessionSendReceive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v15 = *(void *)(a1 + 120);
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v17 = *(std::string *)a5;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v16 = *(std::string *)a6;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, std::string *, std::string *, uint64_t, uint64_t, char))(*(void *)v15 + 200))(v15, a2, a3, a4, &v17, &v16, a7, a8, a9);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1C53AD310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logLazuliMessageSendReceive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = *(void *)(a1 + 120);
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v18 = *(std::string *)a5;
  }
  if (*(char *)(a8 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a8, *(void *)(a8 + 8));
  }
  else {
    std::string v17 = *(std::string *)a8;
  }
  if (*(char *)(a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a9, *(void *)(a9 + 8));
  }
  else
  {
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
    v16.__r_.__value_.__r.__words[2] = *(void *)(a9 + 16);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, std::string *, uint64_t, uint64_t, std::string *, std::string *))(*(void *)v15 + 208))(v15, a2, a3, a4, &v18, a6, a7, &v17, &v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C53AD494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void *IMSMetricsManager::logPrefix(IMSMetricsManager *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"ims_metrics: ", 13);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void std::__shared_ptr_emplace<powerlog::PowerLogger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C79D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<powerlog::PowerLogger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C79D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<powerlog::PowerLogger>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AnalyticsLogger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AnalyticsLogger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7A20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<AnalyticsLogger>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<IBISipLogger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7A70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IBISipLogger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7A70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<IBISipLogger>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<QMISipLogger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7AC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMISipLogger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7AC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<QMISipLogger>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<LegacyQMISipLogger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7B10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LegacyQMISipLogger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7B10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LegacyQMISipLogger>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<IMSMetricsManager::create(IMSCallManager *,std::shared_ptr<BambiClient>)::ManagerWrapper,std::allocator<IMSMetricsManager::create(IMSCallManager *,std::shared_ptr<BambiClient>)::ManagerWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IMSMetricsManager::create(IMSCallManager *,std::shared_ptr<BambiClient>)::ManagerWrapper,std::allocator<IMSMetricsManager::create(IMSCallManager *,std::shared_ptr<BambiClient>)::ManagerWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7B60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<IMSMetricsManager::create(IMSCallManager *,std::shared_ptr<BambiClient>)::ManagerWrapper,std::allocator<IMSMetricsManager::create(IMSCallManager *,std::shared_ptr<BambiClient>)::ManagerWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void IMSMetricsManager::create(IMSCallManager *,std::shared_ptr<BambiClient>)::ManagerWrapper::~ManagerWrapper(IMSMetricsManager *a1)
{
  IMSMetricsManager::~IMSMetricsManager(a1);
  JUMPOUT(0x1C878E320);
}

double ims::analytics::RegistrationResultEvent::createRegistrationSuccess@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  long long v27 = 0uLL;
  _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_127RegistrationResultEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(&v27);
  uint64_t v6 = v27;
  uint64_t v8 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a2 + 48);
  if (!*(_DWORD *)(v9 + 456))
  {
    xpc_object_t v48 = xpc_string_create("ATM_REG_DE_UE");
    if (!v48) {
      xpc_object_t v48 = xpc_null_create();
    }
    goto LABEL_18;
  }
  if (!*(unsigned char *)(a2 + 144))
  {
    xpc_object_t v48 = xpc_string_create("ATM_REG_INIT");
    if (!v48) {
      xpc_object_t v48 = xpc_null_create();
    }
LABEL_18:
    uint64_t v46 = v6 + 112;
    char v47 = "type";
    xpc::dict::object_proxy::operator=((uint64_t)&v46, &v48, &v49);
    xpc_release(v49);
    xpc_object_t v49 = 0;
    xpc_release(v48);
    xpc_object_t v48 = 0;
    goto LABEL_19;
  }
  xpc_object_t v48 = xpc_string_create("ATM_REG_RE");
  if (!v48) {
    xpc_object_t v48 = xpc_null_create();
  }
  uint64_t v46 = v6 + 112;
  char v47 = "type";
  xpc::dict::object_proxy::operator=((uint64_t)&v46, &v48, &v49);
  xpc_release(v49);
  xpc_object_t v49 = 0;
  xpc_release(v48);
  xpc_object_t v48 = 0;
  if (*(char *)(a2 + 175) >= 0) {
    uint64_t v10 = (const char *)(a2 + 152);
  }
  else {
    uint64_t v10 = *(const char **)(a2 + 152);
  }
  xpc_object_t v44 = xpc_string_create(v10);
  if (!v44) {
    xpc_object_t v44 = xpc_null_create();
  }
  uint64_t v46 = v6 + 112;
  char v47 = "rereg_reason";
  xpc::dict::object_proxy::operator=((uint64_t)&v46, &v44, &v45);
  xpc_release(v45);
  xpc_object_t v45 = 0;
  xpc_release(v44);
  xpc_object_t v44 = 0;
LABEL_19:
  xpc_object_t object = xpc_int64_create(*(unsigned int *)(v9 + 456));
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v11 = (xpc_object_t *)(v6 + 112);
  uint64_t v46 = v6 + 112;
  char v47 = "expires";
  xpc::dict::object_proxy::operator=((uint64_t)&v46, &object, &v43);
  xpc_release(v43);
  xpc_object_t v43 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  if (*(char *)(v8 + 3255) < 0) {
    uint64_t v12 = *(void *)(v8 + 3240);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(v8 + 3255);
  }
  uint64_t v13 = (const char *)(v8 + 3160);
  if (v12)
  {
    if (*(char *)(v8 + 3279) < 0 ? *(void *)(v8 + 3264) : *(unsigned __int8 *)(v8 + 3279)) {
      uint64_t v13 = (const char *)(v8 + 3232);
    }
  }
  if (v13[23] < 0) {
    uint64_t v13 = *(const char **)v13;
  }
  xpc_object_t v40 = xpc_string_create(v13);
  if (!v40) {
    xpc_object_t v40 = xpc_null_create();
  }
  uint64_t v46 = v6 + 112;
  char v47 = "rat_info";
  xpc::dict::object_proxy::operator=((uint64_t)&v46, &v40, &v41);
  xpc_release(v41);
  xpc_object_t v41 = 0;
  xpc_release(v40);
  xpc_object_t v40 = 0;
  int v15 = *(_DWORD *)(v9 + 504);
  if (v15)
  {
    xpc_object_t v38 = xpc_string_create("ATM_REGD_VS");
    if (!v38) {
      xpc_object_t v38 = xpc_null_create();
    }
  }
  else
  {
    if ((v15 & 4) == 0) {
      goto LABEL_42;
    }
    xpc_object_t v38 = xpc_string_create("ATM_REGD_S");
    if (!v38) {
      xpc_object_t v38 = xpc_null_create();
    }
  }
  uint64_t v46 = v6 + 112;
  char v47 = "feature";
  xpc::dict::object_proxy::operator=((uint64_t)&v46, &v38, &v39);
  xpc_release(v39);
  xpc_object_t v39 = 0;
  xpc_release(v38);
  xpc_object_t v38 = 0;
LABEL_42:
  xpc_object_t v36 = xpc_string_create("ATM_CALL_Status_200");
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  uint64_t v46 = v6 + 112;
  char v47 = "result";
  xpc::dict::object_proxy::operator=((uint64_t)&v46, &v36, &v37);
  xpc_release(v37);
  xpc_object_t v37 = 0;
  xpc_release(v36);
  xpc_object_t v36 = 0;
  unint64_t v16 = *(void *)(a2 + 56);
  unint64_t v17 = *(void *)(a2 + 64);
  BOOL v18 = v17 >= v16;
  unsigned int v19 = v17 - v16;
  if (!v18) {
    unsigned int v19 = 0;
  }
  if (v16) {
    int64_t v20 = v19;
  }
  else {
    int64_t v20 = 0;
  }
  xpc_object_t v34 = xpc_int64_create(v20);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  uint64_t v46 = v6 + 112;
  char v47 = "latency";
  xpc::dict::object_proxy::operator=((uint64_t)&v46, &v34, &v35);
  xpc_release(v35);
  xpc_object_t v35 = 0;
  xpc_release(v34);
  xpc_object_t v34 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2))
  {
    if (*(_DWORD *)(v9 + 456)) {
      std::string v21 = "ATM_REG_RE_EMERGENCY";
    }
    else {
      std::string v21 = "ATM_REG_DE_EMERGENCY";
    }
    xpc_object_t v32 = xpc_string_create(v21);
    if (!v32) {
      xpc_object_t v32 = xpc_null_create();
    }
    uint64_t v46 = v6 + 112;
    char v47 = "type";
    xpc::dict::object_proxy::operator=((uint64_t)&v46, &v32, &v33);
    xpc_release(v33);
    xpc_object_t v33 = 0;
    xpc_release(v32);
    xpc_object_t v32 = 0;
  }
  char v22 = (ImsPrefs *)SipStack::prefs((SipStack *)v8);
  DefaultRemoteSipPortKey = (void **)ImsPrefs::getDefaultRemoteSipPortKey(v22);
  unsigned int v24 = ImsPrefs::intValue(v22, DefaultRemoteSipPortKey);
  xpc_object_t v30 = xpc_int64_create(v24);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  uint64_t v46 = v6 + 112;
  char v47 = "port";
  xpc::dict::object_proxy::operator=((uint64_t)&v46, &v30, &v31);
  xpc_release(v31);
  xpc_object_t v31 = 0;
  xpc_release(v30);
  xpc_object_t v30 = 0;
  xpc_object_t v25 = *v11;
  if (*v11)
  {
    xpc_retain(*v11);
    if (!v7) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  xpc_object_t v25 = xpc_null_create();
  if (v7)
  {
LABEL_62:
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
LABEL_63:
  xpc_release(v25);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
  }
  xpc_object_t v28 = xpc_int64_create(*(unsigned int *)(a2 + 180));
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  uint64_t v46 = v6 + 112;
  char v47 = "KeepAliveTimer";
  xpc::dict::object_proxy::operator=((uint64_t)&v46, &v28, &v29);
  xpc_release(v29);
  xpc_object_t v29 = 0;
  xpc_release(v28);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  double result = *(double *)&v27;
  *a3 = v27;
  return result;
}

void sub_1C53ADFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_127RegistrationResultEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(void *a1)
{
  uint64_t v2 = operator new(0x90uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_1F20C7C28;
  v2[3] = &unk_1F20C7D60;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.ca.regresult");
  ImsLogContainer::ImsLogContainer((uint64_t)(v2 + 4), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v2[3] = &unk_1F20C7C78;
  v2[4] = &unk_1F20C7CB0;
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    v2[17] = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    v2[17] = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_10;
    }
  }
  if (MEMORY[0x1C878F160](v4) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_10:
    v2[17] = v5;
    goto LABEL_11;
  }
  xpc_retain(v4);
LABEL_11:
  xpc_release(v4);
  *a1 = v2 + 3;
  a1[1] = v2;
}

void sub_1C53AE13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void ims::analytics::RegistrationResultEvent::createRegistrationTerminated(uint64_t *a1@<X0>, int64_t a2@<X1>, _anonymous_namespace_::RegistrationResultEventImpl **a3@<X8>)
{
  int v15 = 0;
  unint64_t v16 = 0;
  _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_127RegistrationResultEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(&v15);
  uint64_t v6 = v15;
  uint64_t v8 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v21 = xpc_string_create("ATM_REG_DE_UE");
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  uint64_t v9 = (xpc_object_t *)((char *)v6 + 112);
  unsigned int v19 = (char *)v6 + 112;
  int64_t v20 = "type";
  xpc::dict::object_proxy::operator=((uint64_t)&v19, &v21, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v21);
  xpc_object_t v21 = 0;
  uint64_t v10 = (ImsPrefs *)SipStack::prefs((SipStack *)v8);
  DefaultRemoteSipPortKey = (void **)ImsPrefs::getDefaultRemoteSipPortKey(v10);
  unsigned int v12 = ImsPrefs::intValue(v10, DefaultRemoteSipPortKey);
  xpc_object_t v17 = xpc_int64_create(v12);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  unsigned int v19 = (char *)v6 + 112;
  int64_t v20 = "port";
  xpc::dict::object_proxy::operator=((uint64_t)&v19, &v17, &v18);
  xpc_release(v18);
  xpc_object_t v18 = 0;
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_object_t v13 = *v9;
  if (*v9)
  {
    xpc_retain(*v9);
    if (!v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  xpc_object_t v13 = xpc_null_create();
  if (v7)
  {
LABEL_9:
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
LABEL_10:
  xpc_release(v13);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
  }
  std::string v14 = v16;
  *a3 = v6;
  a3[1] = v14;
}

void sub_1C53AE350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::RegistrationResultEventImpl::processPcscfPinningDroppedRequestsCount(_anonymous_namespace_::RegistrationResultEventImpl *this, int64_t value)
{
  xpc_object_t v4 = xpc_int64_create(value);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  v3[0] = (char *)this + 112;
  v3[1] = "pcscf_pinning_message_count";
  xpc::dict::object_proxy::operator=((uint64_t)v3, &v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

void ims::analytics::RegistrationResultEvent::createRegistrationTerminated(uint64_t *a1@<X0>, uint64_t a2@<X1>, int64_t a3@<X2>, _anonymous_namespace_::RegistrationResultEventImpl **a4@<X8>)
{
  unsigned int v19 = 0;
  int64_t v20 = 0;
  _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_127RegistrationResultEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(&v19);
  uint64_t v8 = v19;
  uint64_t v10 = *a1;
  uint64_t v9 = (std::__shared_weak_count *)a1[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a2 + 48);
  xpc_object_t v33 = xpc_string_create("ATM_REG_DE_NE");
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  unsigned int v12 = (xpc_object_t *)((char *)v8 + 112);
  xpc_object_t v31 = (char *)v8 + 112;
  xpc_object_t v32 = "type";
  xpc::dict::object_proxy::operator=((uint64_t)&v31, &v33, &v34);
  xpc_release(v34);
  xpc_object_t v34 = 0;
  xpc_release(v33);
  xpc_object_t v33 = 0;
  xpc_object_t v29 = xpc_int64_create(*(unsigned int *)(v11 + 456));
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  xpc_object_t v31 = (char *)v8 + 112;
  xpc_object_t v32 = "expires";
  xpc::dict::object_proxy::operator=((uint64_t)&v31, &v29, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v29);
  xpc_object_t v29 = 0;
  int v13 = *(_DWORD *)(v11 + 504);
  if (v13)
  {
    xpc_object_t v27 = xpc_string_create("ATM_REGD_VS");
    if (!v27) {
      xpc_object_t v27 = xpc_null_create();
    }
    xpc_object_t v31 = (char *)v8 + 112;
    xpc_object_t v32 = "feature";
    xpc::dict::object_proxy::operator=((uint64_t)&v31, &v27, &v28);
    xpc_release(v28);
    xpc_object_t v28 = 0;
    xpc_release(v27);
    xpc_object_t v27 = 0;
  }
  else if ((v13 & 4) != 0)
  {
    xpc_object_t v25 = xpc_string_create("ATM_REGD_S");
    if (!v25) {
      xpc_object_t v25 = xpc_null_create();
    }
    xpc_object_t v31 = (char *)v8 + 112;
    xpc_object_t v32 = "feature";
    xpc::dict::object_proxy::operator=((uint64_t)&v31, &v25, &v26);
    xpc_release(v26);
    xpc_object_t v26 = 0;
    xpc_release(v25);
    xpc_object_t v25 = 0;
  }
  xpc_object_t v23 = xpc_string_create("ATM_CALL_Status_200");
  if (!v23) {
    xpc_object_t v23 = xpc_null_create();
  }
  xpc_object_t v31 = (char *)v8 + 112;
  xpc_object_t v32 = "result";
  xpc::dict::object_proxy::operator=((uint64_t)&v31, &v23, &v24);
  xpc_release(v24);
  xpc_object_t v24 = 0;
  xpc_release(v23);
  xpc_object_t v23 = 0;
  std::string v14 = (ImsPrefs *)SipStack::prefs((SipStack *)v10);
  DefaultRemoteSipPortKey = (void **)ImsPrefs::getDefaultRemoteSipPortKey(v14);
  unsigned int v16 = ImsPrefs::intValue(v14, DefaultRemoteSipPortKey);
  xpc_object_t v21 = xpc_int64_create(v16);
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_object_t v31 = (char *)v8 + 112;
  xpc_object_t v32 = "port";
  xpc::dict::object_proxy::operator=((uint64_t)&v31, &v21, &v22);
  xpc_release(v22);
  xpc_object_t v22 = 0;
  xpc_release(v21);
  xpc_object_t v21 = 0;
  xpc_object_t v17 = *v12;
  if (*v12)
  {
    xpc_retain(*v12);
    if (!v9) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  xpc_object_t v17 = xpc_null_create();
  if (v9)
  {
LABEL_21:
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
LABEL_22:
  xpc_release(v17);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  else
  {
  }
  xpc_object_t v18 = v20;
  *a4 = v8;
  a4[1] = v18;
}

void sub_1C53AE76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

double ims::analytics::RegistrationResultEvent::createRegistrationError@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  *(_OWORD *)xpc_object_t v33 = 0uLL;
  _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_127RegistrationResultEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(v33);
  uint64_t v6 = *(void *)&v33[0];
  uint64_t v8 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (xpc_object_t *)(v6 + 112);
  uint64_t v9 = *(void **)(v6 + 112);
  xpc_object_t v71 = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t v71 = xpc_null_create();
  }
  uint64_t v69 = v8;
  long long v70 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ims::analytics::populateCellularInfo(&v71, (uint64_t)&v69);
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  xpc_release(v71);
  xpc_object_t v71 = 0;
  if (*(unsigned char *)(a2 + 137))
  {
    xpc_object_t v67 = xpc_string_create("ATM_REG_DE_EMERGENCY");
    if (!v67) {
      xpc_object_t v67 = xpc_null_create();
    }
    v51[0] = (void *)(v6 + 112);
    v51[1] = "type";
    xpc::dict::object_proxy::operator=((uint64_t)v51, &v67, &v68);
    xpc_release(v68);
    xpc_object_t v68 = 0;
    xpc_release(v67);
    xpc_object_t v67 = 0;
  }
  else if (*(unsigned char *)(a2 + 140))
  {
    xpc_object_t v65 = xpc_string_create("ATM_REG_DE_UE");
    if (!v65) {
      xpc_object_t v65 = xpc_null_create();
    }
    v51[0] = (void *)(v6 + 112);
    v51[1] = "type";
    xpc::dict::object_proxy::operator=((uint64_t)v51, &v65, &v66);
    xpc_release(v66);
    xpc_object_t v66 = 0;
    xpc_release(v65);
    xpc_object_t v65 = 0;
  }
  else if (*(unsigned char *)(a2 + 136))
  {
    xpc_object_t v63 = xpc_string_create("ATM_REG_RE");
    if (!v63) {
      xpc_object_t v63 = xpc_null_create();
    }
    v51[0] = (void *)(v6 + 112);
    v51[1] = "type";
    xpc::dict::object_proxy::operator=((uint64_t)v51, &v63, &v64);
    xpc_release(v64);
    xpc_object_t v64 = 0;
    xpc_release(v63);
    xpc_object_t v63 = 0;
    if (*(char *)(a2 + 167) >= 0) {
      uint64_t v11 = (const char *)(a2 + 144);
    }
    else {
      uint64_t v11 = *(const char **)(a2 + 144);
    }
    xpc_object_t v61 = xpc_string_create(v11);
    if (!v61) {
      xpc_object_t v61 = xpc_null_create();
    }
    v51[0] = (void *)(v6 + 112);
    v51[1] = "rereg_reason";
    xpc::dict::object_proxy::operator=((uint64_t)v51, &v61, &v62);
    xpc_release(v62);
    xpc_object_t v62 = 0;
    xpc_release(v61);
    xpc_object_t v61 = 0;
  }
  else
  {
    xpc_object_t v59 = xpc_string_create("ATM_REG_INIT");
    if (!v59) {
      xpc_object_t v59 = xpc_null_create();
    }
    v51[0] = (void *)(v6 + 112);
    v51[1] = "type";
    xpc::dict::object_proxy::operator=((uint64_t)v51, &v59, &v60);
    xpc_release(v60);
    xpc_object_t v60 = 0;
    xpc_release(v59);
    xpc_object_t v59 = 0;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  unint64_t v13 = *(void *)(a2 + 56);
  BOOL v14 = v13 >= v12;
  unsigned int v15 = v13 - v12;
  if (!v14) {
    unsigned int v15 = 0;
  }
  if (v12) {
    int64_t v16 = v15;
  }
  else {
    int64_t v16 = 0;
  }
  xpc_object_t v57 = xpc_int64_create(v16);
  if (!v57) {
    xpc_object_t v57 = xpc_null_create();
  }
  v51[0] = (void *)(v6 + 112);
  v51[1] = "latency";
  xpc::dict::object_proxy::operator=((uint64_t)v51, &v57, &v58);
  xpc_release(v58);
  xpc_object_t v58 = 0;
  xpc_release(v57);
  xpc_object_t v57 = 0;
  xpc_object_t v17 = (ImsResult *)(a2 + 64);
  xpc_object_t v18 = *(uint64_t **)(a2 + 72);
  if (v18 == &SipResultDomain::_domain)
  {
    if (*(_DWORD *)(a2 + 80) != 401)
    {
      LODWORD(v46[0]) = *(_DWORD *)(a2 + 80);
      ims::detail::to_string_impl<int,std::integral_constant<BOOL,false>>::operator()();
    }
    uint64_t v56 = 0;
    long long v54 = 0u;
    memset(v55, 0, sizeof(v55));
    long long v53 = 0u;
    *(_OWORD *)int v51 = 0u;
    memset(v52, 0, sizeof(v52));
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
    unsigned int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"REG_TOO_MANY_AUTH_RETRIES", 25);
    LOBYTE(__p[0]) = 58;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)__p, 1);
    uint64_t v20 = a2 + 64;
    do
      uint64_t v20 = *(void *)(v20 + 32);
    while (v20);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v51[1], __p);
    if (v48 >= 0) {
      xpc_object_t v21 = __p;
    }
    else {
      xpc_object_t v21 = (void **)__p[0];
    }
    xpc_object_t v49 = xpc_string_create((const char *)v21);
    if (!v49) {
      xpc_object_t v49 = xpc_null_create();
    }
    v46[0] = v6 + 112;
    v46[1] = "result";
    xpc::dict::object_proxy::operator=((uint64_t)v46, &v49, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v49);
    xpc_object_t v49 = 0;
    if (v48 < 0) {
      operator delete(__p[0]);
    }
    v51[0] = *(void **)MEMORY[0x1E4FBA418];
    *(void **)((char *)v51 + *((void *)v51[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
    v51[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
    if (SHIBYTE(v53) < 0) {
      operator delete(*((void **)&v52[3] + 1));
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C878E270](v55);
  }
  else if (v18 == &_posixDomain)
  {
    xpc_object_t v44 = xpc_string_create("Reg_POSIX_Error");
    if (!v44) {
      xpc_object_t v44 = xpc_null_create();
    }
    v51[0] = (void *)(v6 + 112);
    v51[1] = "result";
    xpc::dict::object_proxy::operator=((uint64_t)v51, &v44, &v45);
    xpc_release(v45);
    xpc_object_t v45 = 0;
    xpc_release(v44);
    xpc_object_t v44 = 0;
  }
  else
  {
    memset((char *)v52 + 8, 0, 48);
    v51[0] = &unk_1F20B2680;
    v51[1] = &_bambiDomain;
    LODWORD(v52[0]) = 1073741830;
    if (v18 != &_bambiDomain)
    {
      ImsResult::~ImsResult((ImsResult *)v51);
LABEL_62:
      xpc_object_t v40 = xpc_string_create("Reg_LOST_CONNECTION");
      if (!v40) {
        xpc_object_t v40 = xpc_null_create();
      }
      v51[0] = (void *)(v6 + 112);
      v51[1] = "result";
      xpc::dict::object_proxy::operator=((uint64_t)v51, &v40, &v41);
      xpc_release(v41);
      xpc_object_t v41 = 0;
      xpc_release(v40);
      xpc_object_t v40 = 0;
      goto LABEL_65;
    }
    int v22 = *(_DWORD *)(a2 + 80);
    ImsResult::~ImsResult((ImsResult *)v51);
    if (v22 != 1073741830) {
      goto LABEL_62;
    }
    xpc_object_t v42 = xpc_string_create("ATM_REG_AUTHTIMEOUTERROR");
    if (!v42) {
      xpc_object_t v42 = xpc_null_create();
    }
    v51[0] = (void *)(v6 + 112);
    v51[1] = "result";
    xpc::dict::object_proxy::operator=((uint64_t)v51, &v42, &v43);
    xpc_release(v43);
    xpc_object_t v43 = 0;
    xpc_release(v42);
    xpc_object_t v42 = 0;
  }
LABEL_65:
  if (*(char *)(v8 + 3255) < 0) {
    uint64_t v23 = *(void *)(v8 + 3240);
  }
  else {
    uint64_t v23 = *(unsigned __int8 *)(v8 + 3255);
  }
  xpc_object_t v24 = (const char *)(v8 + 3160);
  if (v23)
  {
    if (*(char *)(v8 + 3279) < 0 ? *(void *)(v8 + 3264) : *(unsigned __int8 *)(v8 + 3279)) {
      xpc_object_t v24 = (const char *)(v8 + 3232);
    }
  }
  if (v24[23] < 0) {
    xpc_object_t v24 = *(const char **)v24;
  }
  xpc_object_t v38 = xpc_string_create(v24);
  if (!v38) {
    xpc_object_t v38 = xpc_null_create();
  }
  v51[0] = (void *)(v6 + 112);
  v51[1] = "rat_info";
  xpc::dict::object_proxy::operator=((uint64_t)v51, &v38, &v39);
  xpc_release(v39);
  xpc_object_t v39 = 0;
  xpc_release(v38);
  xpc_object_t v38 = 0;
  ImsResult::description(v17, v51);
  if (SBYTE7(v52[0]) < 0)
  {
    xpc_object_t v26 = v51[1];
    operator delete(v51[0]);
    if (!v26) {
      goto LABEL_89;
    }
  }
  else if (!BYTE7(v52[0]))
  {
    goto LABEL_89;
  }
  ImsResult::description(v17, v51);
  if ((SBYTE7(v52[0]) & 0x80u) == 0) {
    xpc_object_t v27 = v51;
  }
  else {
    xpc_object_t v27 = (void **)v51[0];
  }
  xpc_object_t v36 = xpc_string_create((const char *)v27);
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  __p[0] = (void *)(v6 + 112);
  __p[1] = "q_reason";
  xpc::dict::object_proxy::operator=((uint64_t)__p, &v36, &v37);
  xpc_release(v37);
  xpc_object_t v37 = 0;
  xpc_release(v36);
  xpc_object_t v36 = 0;
  if (SBYTE7(v52[0]) < 0) {
    operator delete(v51[0]);
  }
LABEL_89:
  xpc_object_t v28 = (ImsPrefs *)SipStack::prefs((SipStack *)v8);
  DefaultRemoteSipPortKey = (void **)ImsPrefs::getDefaultRemoteSipPortKey(v28);
  unsigned int v30 = ImsPrefs::intValue(v28, DefaultRemoteSipPortKey);
  xpc_object_t v34 = xpc_int64_create(v30);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  v51[0] = (void *)(v6 + 112);
  v51[1] = "port";
  xpc::dict::object_proxy::operator=((uint64_t)v51, &v34, &v35);
  xpc_release(v35);
  xpc_object_t v35 = 0;
  xpc_release(v34);
  xpc_object_t v34 = 0;
  xpc_object_t v31 = *v10;
  if (*v10)
  {
    xpc_retain(*v10);
    if (!v7) {
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  xpc_object_t v31 = xpc_null_create();
  if (v7)
  {
LABEL_93:
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
LABEL_94:
  xpc_release(v31);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
  }
  double result = v33[0];
  *a3 = *(_OWORD *)v33;
  return result;
}

void sub_1C53AF0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::ostringstream::~ostringstream((uint64_t)&a33);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::RegistrationResultEventImpl::populateLazuliFields(uint64_t a1, char a2)
{
  xpc_object_t v4 = xpc_BOOL_create(a2 != 0);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  v3[0] = a1 + 112;
  v3[1] = "is_RCS";
  xpc::dict::object_proxy::operator=((uint64_t)v3, &v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

void ims::detail::to_string_impl<int,std::integral_constant<BOOL,false>>::operator()()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C53AF314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__shared_ptr_emplace<anonymous namespace'::RegistrationResultEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::RegistrationResultEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7C28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::RegistrationResultEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::RegistrationResultEventImpl::~RegistrationResultEventImpl(_anonymous_namespace_::RegistrationResultEventImpl *this)
{
  *(void *)this = &unk_1F20C7C78;
  *((void *)this + 1) = &unk_1F20C7CB0;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20C7C78;
  *((void *)this + 1) = &unk_1F20C7CB0;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  JUMPOUT(0x1C878E320);
}

xpc_object_t anonymous namespace'::RegistrationResultEventImpl::getDict@<X0>(_anonymous_namespace_::RegistrationResultEventImpl *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  *a2 = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void *anonymous namespace'::RegistrationResultEventImpl::getName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "atm_Registration_Result");
}

void non-virtual thunk to'anonymous namespace'::RegistrationResultEventImpl::~RegistrationResultEventImpl(_anonymous_namespace_::RegistrationResultEventImpl *this)
{
  *((void *)this - 1) = &unk_1F20C7C78;
  *(void *)this = &unk_1F20C7CB0;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *((void *)this - 1) = &unk_1F20C7C78;
  *(void *)this = &unk_1F20C7CB0;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1C878E320);
}

uint64_t base64Encode(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v6 = (void *)MEMORY[0x1C878EAB0]();
  uint64_t v7 = [MEMORY[0x1E4F1C9B8] dataWithBytes:a1 length:a2];
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = [v7 base64Encoding];
    uint64_t v10 = v9;
    if (v9
      && (uint64_t v11 = (const std::string::value_type *)[v9 cStringUsingEncoding:1]) != 0)
    {
      std::string::__assign_external(a3, v11);
      uint64_t v12 = 1;
    }
    else
    {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_1C53AF7C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL base64Decode(uint64_t *a1, unint64_t *a2)
{
  xpc_object_t v4 = (void *)MEMORY[0x1C878EAB0]();
  if (*((char *)a1 + 23) >= 0) {
    xpc_object_t v5 = a1;
  }
  else {
    xpc_object_t v5 = (uint64_t *)*a1;
  }
  uint64_t v6 = [NSString stringWithUTF8String:v5];
  if (v6)
  {
    uint64_t v7 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBase64Encoding:v6];
    uint64_t v8 = v7;
    BOOL v9 = v7 != 0;
    if (v7)
    {
      unint64_t v10 = [v7 length];
      unint64_t v11 = *a2;
      unint64_t v12 = a2[1];
      unint64_t v13 = v12 - *a2;
      if (v10 <= v13)
      {
        if (v10 < v13)
        {
          unint64_t v12 = v11 + v10;
          a2[1] = v11 + v10;
        }
      }
      else
      {
        std::vector<unsigned char>::__append(a2, v10 - v13);
        unint64_t v11 = *a2;
        unint64_t v12 = a2[1];
      }
      [v8 getBytes:v11 length:v12 - v11];
    }
  }
  else
  {
    BOOL v9 = 0;
  }

  return v9;
}

void sub_1C53AF8C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaSendRecvAttribute(uint64_t a1)
{
  return 1;
}

uint64_t SDPParser::parseMediaSendOnlyAttribute(uint64_t a1)
{
  return 1;
}

uint64_t SDPParser::parseMediaRecvOnlyAttribute(uint64_t a1)
{
  return 1;
}

uint64_t SDPParser::parseMediaInactiveAttribute(uint64_t a1)
{
  return 1;
}

uint64_t SDPParser::parseMediaPacketTimeAttribute(uint64_t a1, const std::string *a2)
{
  __int16 v18 = 0;
  memset(v17, 0, 160);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v10, a2, 8);
  MEMORY[0x1C878DFE0](&v10, &v18);
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "ptime");
    SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute((uint64_t)v8, (uint64_t)v6, v18, 0);
    xpc_object_t v3 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPPacketizationTimeAttribute>(a1 + 136, 0, 0, (const SDPPacketizationTimeAttribute *)v8);
    v3[1] = a1 + 136;
    uint64_t v4 = *(void *)(a1 + 136);
    void *v3 = v4;
    *(void *)(v4 + 8) = v3;
    *(void *)(a1 + 136) = v3;
    ++*(void *)(a1 + 152);
    v8[0] = &unk_1F20E5C78;
    if (v9 < 0) {
      operator delete((void *)v8[2]);
    }
    if (v7 < 0) {
      operator delete(v6[0]);
    }
  }
  *(void *)&long long v10 = *MEMORY[0x1E4FBA410];
  *(void *)((char *)&v10 + *(void *)(v10 - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v11 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v16) < 0) {
    operator delete((void *)v15);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270](&v17[8]);
  return 1;
}

void sub_1C53AFB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::istringstream::~istringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void SDPPacketizationTimeAttribute::~SDPPacketizationTimeAttribute(void **this)
{
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t SDPParser::parseMediaMaxPacketTimeAttribute(uint64_t a1, const std::string *a2)
{
  __int16 v18 = 0;
  memset(v17, 0, 160);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v10, a2, 8);
  MEMORY[0x1C878DFE0](&v10, &v18);
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "maxptime");
    SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute((uint64_t)v8, (uint64_t)v6, v18, 1);
    xpc_object_t v3 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPPacketizationTimeAttribute>(a1 + 136, 0, 0, (const SDPPacketizationTimeAttribute *)v8);
    v3[1] = a1 + 136;
    uint64_t v4 = *(void *)(a1 + 136);
    void *v3 = v4;
    *(void *)(v4 + 8) = v3;
    *(void *)(a1 + 136) = v3;
    ++*(void *)(a1 + 152);
    v8[0] = &unk_1F20E5C78;
    if (v9 < 0) {
      operator delete((void *)v8[2]);
    }
    if (v7 < 0) {
      operator delete(v6[0]);
    }
  }
  *(void *)&long long v10 = *MEMORY[0x1E4FBA410];
  *(void *)((char *)&v10 + *(void *)(v10 - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v11 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v16) < 0) {
    operator delete((void *)v15);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270](&v17[8]);
  return 1;
}

void sub_1C53AFE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::istringstream::~istringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaCandidateAttribute(uint64_t a1, const std::string *a2)
{
  memset(v31, 0, sizeof(v31));
  *(_OWORD *)xpc_object_t v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v24 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v24, a2, 8);
  int v23 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v19 = 0;
  memset(&v18, 0, sizeof(v18));
  __int16 v17 = 0;
  MEMORY[0x1C878DFE0](&v24, (char *)&v23 + 2);
  if (HIWORD(v23))
  {
    MEMORY[0x1C878DFE0](&v24, &v23);
    if ((_WORD)v23)
    {
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v24, (uint64_t)&v20);
      uint64_t v3 = HIBYTE(v22);
      if (v22 < 0) {
        uint64_t v3 = v21;
      }
      if (v3)
      {
        MEMORY[0x1C878DFD0](&v24, &v19);
        if (v19)
        {
          std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v24, (uint64_t)&v18);
          std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v18.__r_.__value_.__l.__size_;
          }
          if (size)
          {
            MEMORY[0x1C878DFE0](&v24, &v17);
            __int16 v5 = v17;
            if (v17)
            {
              __int16 v6 = v23;
              if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v12, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
                __int16 v5 = v17;
              }
              else
              {
                std::string v12 = v18;
              }
              SDPMediaCandidate::SDPMediaCandidate((uint64_t)v13, v6, &v12, v5);
              long long v10 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaCandidate>(a1 + 136, 0, 0, (const SDPMediaCandidate *)v13);
              v10[1] = a1 + 136;
              uint64_t v11 = *(void *)(a1 + 136);
              *long long v10 = v11;
              *(void *)(v11 + 8) = v10;
              *(void *)(a1 + 136) = v10;
              ++*(void *)(a1 + 152);
              SDPMediaCandidate::~SDPMediaCandidate(v13);
              if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v12.__r_.__value_.__l.__data_);
              }
              uint64_t v8 = 1;
              goto LABEL_24;
            }
            std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parse");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v7 = ims::error((uint64_t)v13, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"SDPMediaCandidate parse error, no port", 38);
            *(unsigned char *)(v7 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parse");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v7 = ims::error((uint64_t)v13, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"SDPMediaCandidate parse error, no ipAddress", 43);
            *(unsigned char *)(v7 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parse");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v7 = ims::error((uint64_t)v13, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"SDPMediaCandidate parse error, no priority", 42);
          *(unsigned char *)(v7 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parse");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v7 = ims::error((uint64_t)v13, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"SDPMediaCandidate parse error, no transportType", 47);
        *(unsigned char *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parse");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v7 = ims::error((uint64_t)v13, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"SDPMediaCandidate parse error, no componentId", 45);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parse");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::error((uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"SDPMediaCandidate parse error, no foundation", 44);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v7 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  uint64_t v8 = 0;
LABEL_24:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v20);
  }
  *(void *)&long long v24 = *MEMORY[0x1E4FBA410];
  *(void *)((char *)&v24 + *(void *)(v24 - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v25 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v30) < 0) {
    operator delete(v29[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270]((char *)v31 + 8);
  return v8;
}

void sub_1C53B0468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  std::istringstream::~istringstream((uint64_t)&a50);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaCryptoAttribute(uint64_t a1, const std::string *a2)
{
  memset(v80, 0, 160);
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v73 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v73, a2, 8);
  __int16 v72 = 1;
  uint64_t v69 = 0;
  long long v70 = 0;
  uint64_t v71 = 0;
  std::vector<unsigned char>::vector(&v69, 0x1EuLL);
  MEMORY[0x1C878DFE0](&v73, &v72);
  if (v72)
  {
    xpc_object_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v73, (uint64_t)&v66);
    uint64_t v3 = HIBYTE(v68);
    if (v68 < 0) {
      uint64_t v3 = v67;
    }
    if (v3 == 23)
    {
      uint64_t v7 = (uint64_t *)&v66;
      if (v68 < 0) {
        uint64_t v7 = (uint64_t *)v66;
      }
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      uint64_t v10 = *(uint64_t *)((char *)v7 + 15);
      char v13 = v8 == 0x315F4D435F534541 && v9 == 0x5F43414D485F3832 && v10 == 0x30385F314148535FLL;
    }
    else
    {
      if (!v3)
      {
        std::string::basic_string[abi:ne180100]<0>(&v55, "sdp");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        uint64_t v4 = ims::error((uint64_t)&v55, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"SDPMediaCrypto parse error, no crypto-suite", 43);
        *(unsigned char *)(v4 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v4 + 17) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        uint64_t v5 = 0;
LABEL_61:
        if (SHIBYTE(v68) < 0) {
          operator delete(v66);
        }
        goto LABEL_63;
      }
      char v13 = 0;
    }
    memset(&__p, 0, sizeof(__p));
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v73, (uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      std::string::basic_string[abi:ne180100]<0>(&v55, "sdp");
      std::string::basic_string[abi:ne180100]<0>(&v64, "");
      uint64_t v25 = ims::error((uint64_t)&v55, (uint64_t)&v64);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"SDPMediaCrypto parse error, no key-params", 41);
      *(unsigned char *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v25 + 17) = 0;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      uint64_t v5 = 0;
      goto LABEL_59;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    char v16 = memchr(p_p, 58, size);
    if (v16) {
      std::string::size_type v17 = v16 - (unsigned char *)p_p;
    }
    else {
      std::string::size_type v17 = -1;
    }
    std::string::basic_string(&v55, &__p, 0, v17, (std::allocator<char> *)&v63);
    std::string v64 = v55;
    std::string::size_type v18 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    int v19 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v18 = v64.__r_.__value_.__l.__size_;
    }
    if (v18 != 6) {
      goto LABEL_47;
    }
    uint64_t v20 = (std::string *)v64.__r_.__value_.__r.__words[0];
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v20 = &v64;
    }
    int data = (int)v20->__r_.__value_.__l.__data_;
    int v22 = WORD2(v20->__r_.__value_.__r.__words[0]);
    if (data != 1768713833 || v22 != 25966)
    {
LABEL_47:
      std::string::basic_string[abi:ne180100]<0>(&v55, "sdp");
      std::string::basic_string[abi:ne180100]<0>(&v63, "");
      uint64_t v24 = ims::error((uint64_t)&v55, (uint64_t)&v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"SDPMediaCrypto parse error, unsupported key-param", 49);
      *(unsigned char *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v24 + 17) = 0;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      uint64_t v5 = 0;
LABEL_52:
      if (v19 < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
LABEL_59:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_61;
    }
    memset(&v63, 0, sizeof(v63));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v27 = __p.__r_.__value_.__l.__size_;
    }
    if (v27
      && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (long long v28 = &__p)
        : (long long v28 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          (xpc_object_t v29 = memchr(v28, 124, v27)) != 0))
    {
      std::string::size_type v30 = v17 + 1;
      if (v29 - (unsigned char *)v28 != -1)
      {
        std::string::size_type v31 = v29 - (unsigned char *)v28 - v30;
LABEL_80:
        std::string::basic_string(&v55, &__p, v30, v31, (std::allocator<char> *)&v60);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
        std::string v63 = v55;
        if (base64Decode((uint64_t *)&v63, (unint64_t *)&v69) && v70 - (unsigned char *)v69 == 30)
        {
          xpc_object_t v60 = 0;
          uint64_t v61 = 0;
          uint64_t v62 = 0;
          std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v73, (uint64_t)&v60);
          char v32 = 1;
          char v33 = 1;
          char v34 = 1;
          while (1)
          {
            uint64_t v35 = HIBYTE(v62);
            if (v62 < 0) {
              uint64_t v35 = v61;
            }
            if (v35 <= 16)
            {
              if (v35 == 16)
              {
                xpc_object_t v40 = (uint64_t *)v60;
                if (v62 >= 0) {
                  xpc_object_t v40 = (uint64_t *)&v60;
                }
                uint64_t v42 = *v40;
                uint64_t v41 = v40[1];
                BOOL v44 = v42 != 0x505952434E454E55 || v41 != 0x505452535F444554;
                v32 &= v44;
              }
              else if (!v35)
              {
                if ((*(_DWORD *)(a1 + 32) | 2) == 6)
                {
                  SDPMediaCrypto::SDPMediaCrypto((uint64_t)&v55, v72, (uint64_t)&v69, v13, v32 & 1, v33 & 1, v34 & 1);
                  std::list<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::emplace_back<SDPMediaCrypto>((uint64_t *)(a1 + 136), (const SDPMediaCrypto *)&v55);
                  SDPMediaCrypto::~SDPMediaCrypto((SDPMediaCrypto *)&v55);
                  uint64_t v5 = 1;
                }
                else
                {
                  std::string::basic_string[abi:ne180100]<0>(&v55, "sdp.parse");
                  std::string::basic_string[abi:ne180100]<0>(v58, "");
                  uint64_t v53 = ims::error((uint64_t)&v55, (uint64_t)v58);
                  long long v54 = (unsigned char *)ImsOutStream::operator<<(v53, "Invalid protocol type used for SRTP: ");
                  (*(void (**)(unsigned char *, void **))(*(void *)v54 + 32))(v54, v56);
                  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  v54[17] = 0;
                  if (v57 < 0) {
                    operator delete(v56[0]);
                  }
                  if (v59 < 0) {
                    operator delete(v58[0]);
                  }
                  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v55.__r_.__value_.__l.__data_);
                  }
                  uint64_t v5 = 0;
                }
                if (SHIBYTE(v62) < 0) {
                  operator delete(v60);
                }
                goto LABEL_133;
              }
            }
            else if (v35 == 17)
            {
              xpc_object_t v45 = (uint64_t *)v60;
              if (v62 >= 0) {
                xpc_object_t v45 = (uint64_t *)&v60;
              }
              uint64_t v46 = *v45;
              uint64_t v47 = v45[1];
              int v48 = *((unsigned __int8 *)v45 + 16);
              BOOL v51 = v46 != 0x505952434E454E55 || v47 != 0x435452535F444554 || v48 != 80;
              v33 &= v51;
            }
            else if (v35 == 20)
            {
              if (v62 >= 0) {
                xpc_object_t v36 = &v60;
              }
              else {
                xpc_object_t v36 = v60;
              }
              unint64_t v37 = bswap64(*(void *)v36);
              unint64_t v38 = 0x554E41555448454ELL;
              if (v37 == 0x554E41555448454ELL
                && (unint64_t v37 = bswap64(*((void *)v36 + 1)), v38 = 0x544943415445445FLL, v37 == 0x544943415445445FLL)
                && (unint64_t v37 = bswap32(*((_DWORD *)v36 + 4)), v38 = 1397904464, v37 == 1397904464))
              {
                int v39 = 0;
              }
              else if (v37 < v38)
              {
                int v39 = -1;
              }
              else
              {
                int v39 = 1;
              }
              v34 &= v39 != 0;
            }
            if (SHIBYTE(v62) < 0)
            {
              *(unsigned char *)xpc_object_t v60 = 0;
              uint64_t v61 = 0;
            }
            else
            {
              LOBYTE(v60) = 0;
              HIBYTE(v62) = 0;
            }
            std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v73, (uint64_t)&v60);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v55, "sdp");
        std::string::basic_string[abi:ne180100]<0>(&v60, "");
        uint64_t v52 = ims::error((uint64_t)&v55, (uint64_t)&v60);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v52 + 8), (uint64_t)"SDPMediaCrypto parse error, invalid key and salt", 48);
        *(unsigned char *)(v52 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v52 + 17) = 0;
        if (SHIBYTE(v62) < 0) {
          operator delete(v60);
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        uint64_t v5 = 0;
LABEL_133:
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
        goto LABEL_52;
      }
    }
    else
    {
      std::string::size_type v30 = v17 + 1;
    }
    std::string::size_type v31 = -1;
    goto LABEL_80;
  }
  std::string::basic_string[abi:ne180100]<0>(&v55, "sdp");
  std::string::basic_string[abi:ne180100]<0>(&v66, "");
  uint64_t v6 = ims::error((uint64_t)&v55, (uint64_t)&v66);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SDPMediaCrypto parse error, no tag", 34);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v68) < 0) {
    operator delete(v66);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = 0;
LABEL_63:
  if (v69)
  {
    long long v70 = v69;
    operator delete(v69);
  }
  *(void *)&long long v73 = *MEMORY[0x1E4FBA410];
  *(void *)((char *)&v73 + *(void *)(v73 - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v74 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v79) < 0) {
    operator delete((void *)v78);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270](&v80[8]);
  return v5;
}

void sub_1C53B0F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a10 < 0) {
    operator delete(a46);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a62) {
    operator delete(a62);
  }
  std::istringstream::~istringstream((uint64_t)&a66);
  _Unwind_Resume(a1);
}

void *std::list<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::emplace_back<SDPMediaCrypto>(uint64_t *a1, const SDPMediaCrypto *a2)
{
  xpc_object_t result = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaCrypto>((uint64_t)a1, 0, 0, a2);
  uint64_t v4 = *a1;
  *xpc_object_t result = *a1;
  result[1] = a1;
  *(void *)(v4 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

uint64_t SDPParser::parseMediaEndToAccessEdgeProtection(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  SDPMediaEndToAccessEdgeProtection::SDPMediaEndToAccessEdgeProtection((uint64_t)v7, (uint64_t **)&v6);
  uint64_t v3 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaEndToAccessEdgeProtection const&>(a1 + 136, 0, 0, (const SDPMediaEndToAccessEdgeProtection *)v7);
  v3[1] = a1 + 136;
  uint64_t v4 = *(void *)(a1 + 136);
  void *v3 = v4;
  *(void *)(v4 + 8) = v3;
  *(void *)(a1 + 136) = v3;
  ++*(void *)(a1 + 152);
  v7[0] = &unk_1F20E5C78;
  if (v8 < 0) {
    operator delete((void *)v7[2]);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C53B12D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void SDPMediaEndToAccessEdgeProtection::~SDPMediaEndToAccessEdgeProtection(void **this)
{
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t SDPParser::parseMediaPathAttribute(uint64_t a1, std::string *a2)
{
  uint64_t v7 = &unk_1F20E7F48;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  LazuliRouteSet::fromString((LazuliRouteSet *)&v7, a2);
  SDPMediaPath::SDPMediaPath((SDPMediaPath *)v6, (const LazuliRouteSet *)&v7);
  uint64_t v3 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaPath>(a1 + 136, 0, 0, (const SDPMediaPath *)v6);
  v3[1] = a1 + 136;
  uint64_t v4 = *(void *)(a1 + 136);
  void *v3 = v4;
  *(void *)(v4 + 8) = v3;
  *(void *)(a1 + 136) = v3;
  ++*(void *)(a1 + 152);
  SDPMediaPath::~SDPMediaPath(v6);
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)&v7);
  return 1;
}

void sub_1C53B1424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SDPMediaPath::~SDPMediaPath((void **)va);
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(v2 - 72));
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaAcceptTypesAttribute(uint64_t a1, const std::string *a2)
{
  memset(v23, 0, sizeof(v23));
  *(_OWORD *)std::string __p = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v16, a2, 8);
  char v13 = 0;
  char v14 = 0;
  unint64_t v15 = 0;
  __s[0] = 0;
  __s[1] = 0;
  int64_t v12 = 0;
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v16, (uint64_t)__s);
  while (1)
  {
    uint64_t v3 = (std::string::value_type *)HIBYTE(v12);
    if (v12 < 0) {
      uint64_t v3 = __s[1];
    }
    if (!v3) {
      break;
    }
    uint64_t v4 = v14;
    if ((unint64_t)v14 >= v15)
    {
      std::string v6 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string&>((uint64_t *)&v13, (long long *)__s);
    }
    else
    {
      if (SHIBYTE(v12) < 0)
      {
        std::string::__init_copy_ctor_external(v14, __s[0], (std::string::size_type)__s[1]);
      }
      else
      {
        long long v5 = *(_OWORD *)__s;
        v14->__r_.__value_.__r.__words[2] = v12;
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
      }
      std::string v6 = v4 + 1;
    }
    char v14 = v6;
    if (SHIBYTE(v12) < 0)
    {
      *__s[0] = 0;
      __s[1] = 0;
    }
    else
    {
      LOBYTE(__s[0]) = 0;
      HIBYTE(v12) = 0;
    }
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v16, (uint64_t)__s);
  }
  SDPMediaAcceptTypes::SDPMediaAcceptTypes((uint64_t)v10, &v13);
  uint64_t v7 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaAcceptTypes>(a1 + 136, 0, 0, (const SDPMediaAcceptTypes *)v10);
  v7[1] = a1 + 136;
  uint64_t v8 = *(void *)(a1 + 136);
  void *v7 = v8;
  *(void *)(v8 + 8) = v7;
  *(void *)(a1 + 136) = v7;
  ++*(void *)(a1 + 152);
  SDPMediaAcceptTypes::~SDPMediaAcceptTypes(v10);
  if (SHIBYTE(v12) < 0) {
    operator delete(__s[0]);
  }
  v10[0] = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
  *(void *)&long long v16 = *MEMORY[0x1E4FBA410];
  *(void *)((char *)&v16 + *(void *)(v16 - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v17 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v22) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270]((char *)v23 + 8);
  return 1;
}

void sub_1C53B16A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  a9 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::istringstream::~istringstream((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaAcceptWrappedTypesAttribute(uint64_t a1, const std::string *a2)
{
  memset(v23, 0, sizeof(v23));
  *(_OWORD *)std::string __p = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v16, a2, 8);
  char v13 = 0;
  char v14 = 0;
  unint64_t v15 = 0;
  __s[0] = 0;
  __s[1] = 0;
  int64_t v12 = 0;
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v16, (uint64_t)__s);
  while (1)
  {
    uint64_t v3 = (std::string::value_type *)HIBYTE(v12);
    if (v12 < 0) {
      uint64_t v3 = __s[1];
    }
    if (!v3) {
      break;
    }
    uint64_t v4 = v14;
    if ((unint64_t)v14 >= v15)
    {
      std::string v6 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string&>((uint64_t *)&v13, (long long *)__s);
    }
    else
    {
      if (SHIBYTE(v12) < 0)
      {
        std::string::__init_copy_ctor_external(v14, __s[0], (std::string::size_type)__s[1]);
      }
      else
      {
        long long v5 = *(_OWORD *)__s;
        v14->__r_.__value_.__r.__words[2] = v12;
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
      }
      std::string v6 = v4 + 1;
    }
    char v14 = v6;
    if (SHIBYTE(v12) < 0)
    {
      *__s[0] = 0;
      __s[1] = 0;
    }
    else
    {
      LOBYTE(__s[0]) = 0;
      HIBYTE(v12) = 0;
    }
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v16, (uint64_t)__s);
  }
  SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes((uint64_t)v10, &v13);
  uint64_t v7 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaAcceptWrappedTypes>(a1 + 136, 0, 0, (const SDPMediaAcceptWrappedTypes *)v10);
  v7[1] = a1 + 136;
  uint64_t v8 = *(void *)(a1 + 136);
  void *v7 = v8;
  *(void *)(v8 + 8) = v7;
  *(void *)(a1 + 136) = v7;
  ++*(void *)(a1 + 152);
  SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(v10);
  if (SHIBYTE(v12) < 0) {
    operator delete(__s[0]);
  }
  v10[0] = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
  *(void *)&long long v16 = *MEMORY[0x1E4FBA410];
  *(void *)((char *)&v16 + *(void *)(v16 - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v17 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v22) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270]((char *)v23 + 8);
  return 1;
}

void sub_1C53B195C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  a9 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::istringstream::~istringstream((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaSetupAttribute(uint64_t a1, long long *a2)
{
  uint64_t v3 = a1 + 136;
  SDPMediaSetup::SDPMediaSetup((uint64_t)v7, a2);
  uint64_t v4 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaSetup>(v3, 0, 0, (uint64_t)v7);
  v4[1] = v3;
  uint64_t v5 = *(void *)(a1 + 136);
  *uint64_t v4 = v5;
  *(void *)(v5 + 8) = v4;
  *(void *)(a1 + 136) = v4;
  ++*(void *)(a1 + 152);
  SDPMediaSetup::~SDPMediaSetup(v7);
  return 1;
}

void sub_1C53B1A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t SDPParser::parseMediaFingerprintAttribute(uint64_t a1, const std::string *a2)
{
  memset(v22, 0, sizeof(v22));
  *(_OWORD *)long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v15 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v15, a2, 8);
  memset(&v14, 0, sizeof(v14));
  std::string::basic_string[abi:ne180100]<0>(&v14, "");
  long long __p = 0uLL;
  uint64_t v13 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  memset(&__str, 0, sizeof(__str));
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v15, (uint64_t)&__str);
  while (1)
  {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (!size) {
      break;
    }
    std::string::size_type v4 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v4 = v14.__r_.__value_.__l.__size_;
    }
    if (v4)
    {
      uint64_t v5 = HIBYTE(v13);
      if (v13 < 0) {
        uint64_t v5 = *((void *)&__p + 1);
      }
      if (v5) {
        break;
      }
      p_p = (std::string *)&__p;
    }
    else
    {
      p_p = &v14;
    }
    std::string::operator=(p_p, &__str);
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v15, (uint64_t)&__str);
  }
  SDPMediaFingerprint::SDPMediaFingerprint((uint64_t)v10, (long long *)&v14, &__p);
  uint64_t v7 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaFingerprint>(a1 + 136, 0, 0, (uint64_t)v10);
  v7[1] = a1 + 136;
  uint64_t v8 = *(void *)(a1 + 136);
  void *v7 = v8;
  *(void *)(v8 + 8) = v7;
  *(void *)(a1 + 136) = v7;
  ++*(void *)(a1 + 152);
  SDPMediaFingerprint::~SDPMediaFingerprint(v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v15 = *MEMORY[0x1E4FBA410];
  *(void *)((char *)&v15 + *(void *)(v15 - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v16 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270]((char *)v22 + 8);
  return 1;
}

void sub_1C53B1CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  std::istringstream::~istringstream((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaRTPMapAttribute(void *a1, const std::string *a2)
{
  unsigned __int16 v49 = 255;
  memset(&v48, 0, sizeof(v48));
  memset(&__str, 0, sizeof(__str));
  memset(v46, 0, sizeof(v46));
  *(_OWORD *)BOOL v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v39 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v39, a2, 8);
  uint64_t v3 = (void *)MEMORY[0x1C878DFE0](&v39, &v49);
  if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "sdp.parse");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v4 = ims::error((uint64_t)&v34, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Payload type missing from RTPMap", 32);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v39, (uint64_t)&__str);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    uint64_t v7 = memchr(p_str, 47, size);
    if (v7) {
      std::string::size_type v8 = v7 - (unsigned char *)p_str;
    }
    else {
      std::string::size_type v8 = -1;
    }
  }
  else
  {
    std::string::size_type v8 = -1;
  }
  std::string::basic_string(&v34, &__str, 0, v8, (std::allocator<char> *)&__p);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::string v48 = v34;
  if (v8 == -1)
  {
    __int16 v13 = 0;
LABEL_40:
    __int16 v15 = 1;
    goto LABEL_41;
  }
  std::string::basic_string(&v34, &__str, v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = v34;
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v9 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v9 = __str.__r_.__value_.__l.__size_;
  }
  if (v9)
  {
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v10 = &__str;
    }
    else {
      long long v10 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    uint64_t v11 = memchr(v10, 47, v9);
    if (v11) {
      std::string::size_type v12 = v11 - (unsigned char *)v10;
    }
    else {
      std::string::size_type v12 = -1;
    }
  }
  else
  {
    std::string::size_type v12 = -1;
  }
  std::string::basic_string(&v34, &__str, 0, v12, (std::allocator<char> *)&__p);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string v14 = (void *)v34.__r_.__value_.__r.__words[0];
    __int16 v13 = atoi(v34.__r_.__value_.__l.__data_);
    operator delete(v14);
  }
  else
  {
    __int16 v13 = atoi((const char *)&v34);
  }
  if (v12 == -1) {
    goto LABEL_40;
  }
  std::string::basic_string(&v34, &__str, v12 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    int v23 = (void *)v34.__r_.__value_.__r.__words[0];
    __int16 v15 = atoi(v34.__r_.__value_.__l.__data_);
    operator delete(v23);
  }
  else
  {
    __int16 v15 = atoi((const char *)&v34);
  }
LABEL_41:
  uint64_t v16 = a1[6];
  if ((void *)v16 == a1 + 5)
  {
LABEL_45:
    std::string::basic_string[abi:ne180100]<0>(&v34, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v18 = ims::warn((uint64_t)&v34, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"RTP map attribute included for unexpected media format.", 55);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    __int16 v19 = v49;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v31, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
    }
    else {
      std::string v31 = v48;
    }
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v34, v19, (long long *)&v31, v13, v15);
    long long v20 = operator new(0x90uLL);
    *long long v20 = 0;
    v20[1] = 0;
    SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)(v20 + 2), (const SDPMediaRTPMap *)&v34);
    *((_DWORD *)v20 + 34) = 12;
    uint64_t v21 = a1[17];
    *long long v20 = v21;
    v20[1] = a1 + 17;
    *(void *)(v21 + 8) = v20;
    a1[17] = v20;
    ++a1[19];
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    LOBYTE(v22) = 0;
  }
  else
  {
    __int16 v17 = v49;
    while (*(unsigned __int16 *)(v16 + 24) != v49)
    {
      uint64_t v16 = *(void *)(v16 + 8);
      if ((void *)v16 == a1 + 5) {
        goto LABEL_45;
      }
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v33, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
    }
    else {
      std::string v33 = v48;
    }
    long long v22 = &v34;
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v34, v17, (long long *)&v33, v13, v15);
    *(unsigned char *)(v16 + 40) = v34.__r_.__value_.__s.__data_[8];
    std::string::operator=((std::string *)(v16 + 48), (const std::string *)&v34.__r_.__value_.__r.__words[2]);
    *(_WORD *)(v16 + 72) = v35;
    std::string::operator=((std::string *)(v16 + 80), &v36);
    *(_DWORD *)(v16 + 104) = v37;
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::find<std::string>((uint64_t)&v48) == &qword_1EBBDB468) {
      goto LABEL_80;
    }
    memset(&__p, 0, sizeof(__p));
    uint64_t v24 = *(unsigned int *)(v16 + 232);
    if (v24 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
    ((void (*)(std::string *__return_ptr, std::string *, uint64_t))off_1F20C7D88[v24])(&__p, &v34, v16 + 112);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
    }
    if (v25)
    {
      uint64_t v50 = 0;
      long long v26 = (uint64_t **)std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::__find_equal<std::string>((uint64_t)&SDPParser::mediaFormatParameterParsers, &v50, (uint64_t)&v48);
      size_t v27 = *v26;
      if (!*v26)
      {
        v34.__r_.__value_.__r.__words[2] = 0;
        size_t v27 = (uint64_t *)operator new(0x40uLL);
        v34.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_1EBBDB468;
        v34.__r_.__value_.__s.__data_[16] = 0;
        long long v28 = (std::string *)(v27 + 4);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v28, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
          v27[6] = v48.__r_.__value_.__r.__words[2];
        }
        v27[7] = 0;
        std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::mediaFormatParameterParsers, v50, v26, v27);
      }
      xpc_object_t v29 = (uint64_t (*)(uint64_t, std::string *, std::string *))v27[7];
      long long v22 = (std::string *)v49;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v32, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v32 = __p;
      }
      LOBYTE(v22) = v29(v16 + 16, v22, &v32);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v25) {
        goto LABEL_81;
      }
      goto LABEL_80;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v25) {
LABEL_80:
    }
      LOBYTE(v22) = 1;
  }
LABEL_81:
  *(void *)&long long v39 = *MEMORY[0x1E4FBA410];
  *(void *)((char *)&v39 + *(void *)(v39 - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v40 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v45) < 0) {
    operator delete(v44[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270]((char *)v46 + 8);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  return v22 & 1;
}

void sub_1C53B24AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v49, v48);
  if (a47 < 0) {
    operator delete(__p);
  }
  std::istringstream::~istringstream((uint64_t)&a48);
  if (*(char *)(v50 - 105) < 0) {
    operator delete(*(void **)(v50 - 128));
  }
  if (*(char *)(v50 - 73) < 0) {
    operator delete(*(void **)(v50 - 96));
  }
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaFormatParamsAttribute(void *a1, const std::string *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v38 = 0;
  memset(&v37, 0, sizeof(v37));
  memset(v36, 0, sizeof(v36));
  *(_OWORD *)std::string v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v29 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v29, a2, 8);
  MEMORY[0x1C878DFE0](&v29, &v38);
  std::ios_base::getloc((const std::ios_base *)((char *)&v29 + *(void *)(v29 - 24)));
  uint64_t v3 = std::locale::use_facet((const std::locale *)v39, MEMORY[0x1E4FBA258]);
  unsigned __int8 v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale((std::locale *)v39);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v29, (uint64_t)&v37, v4);
  uint64_t v5 = a1[6];
  if ((void *)v5 != a1 + 5)
  {
    while (*(unsigned __int16 *)(v5 + 24) != v38)
    {
      uint64_t v5 = *(void *)(v5 + 8);
      if ((void *)v5 == a1 + 5) {
        goto LABEL_4;
      }
    }
    *(_OWORD *)__s = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    *(_OWORD *)std::string __p = 0u;
    SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)__p, (const SDPMediaRTPMap *)(v5 + 32));
    uint64_t v8 = v5 + 16;
    if (SBYTE7(v28) < 0)
    {
      if (!__s[1]) {
        goto LABEL_24;
      }
      std::string::__init_copy_ctor_external(v39, __s[0], (std::string::size_type)__s[1]);
    }
    else
    {
      if (!BYTE7(v28)) {
        goto LABEL_24;
      }
      *(_OWORD *)&v39[0].__r_.__value_.__l.__data_ = *(_OWORD *)__s;
      v39[0].__r_.__value_.__r.__words[2] = v28;
    }
    std::string::size_type v12 = std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::find<std::string>((uint64_t)v39);
    if (SHIBYTE(v39[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39[0].__r_.__value_.__l.__data_);
    }
    if (v12 != &qword_1EBBDB468)
    {
      if (SBYTE7(v28) < 0)
      {
        std::string::__init_copy_ctor_external(v39, __s[0], (std::string::size_type)__s[1]);
      }
      else
      {
        *(_OWORD *)&v39[0].__r_.__value_.__l.__data_ = *(_OWORD *)__s;
        v39[0].__r_.__value_.__r.__words[2] = v28;
      }
      v22[0] = 0;
      std::string v14 = (uint64_t **)std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::__find_equal<std::string>((uint64_t)&SDPParser::mediaFormatParameterParsers, v22, (uint64_t)v39);
      __int16 v15 = *v14;
      if (!*v14)
      {
        __int16 v15 = (uint64_t *)operator new(0x40uLL);
        *((_OWORD *)v15 + 2) = *(_OWORD *)&v39[0].__r_.__value_.__l.__data_;
        uint64_t v16 = v39[0].__r_.__value_.__r.__words[2];
        memset(v39, 0, 24);
        v15[6] = v16;
        v15[7] = 0;
        std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::mediaFormatParameterParsers, (uint64_t)v22[0], v14, v15);
      }
      __int16 v17 = (uint64_t (*)(uint64_t, uint64_t, std::string *))v15[7];
      uint64_t v18 = v38;
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v23, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
      }
      else {
        std::string v23 = v37;
      }
      uint64_t v11 = v17(v8, v18, &v23);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v39[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39[0].__r_.__value_.__l.__data_);
      }
LABEL_40:
      SDPMediaRTPMap::~SDPMediaRTPMap(__p);
      goto LABEL_41;
    }
LABEL_24:
    __int16 v13 = v38;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v21, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
    }
    else {
      std::string v21 = v37;
    }
    SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatParams *)v22, v13, (long long *)&v21);
    SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatUnknownParams *)v39, (const SDPMediaFormatUnknownParams *)v22);
    int v40 = 0;
    SDPMediaFormatInfo::setSDPMediaFormatParams(v8, (uint64_t)v39);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v39);
    SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams(v22);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    uint64_t v11 = 1;
    goto LABEL_40;
  }
LABEL_4:
  std::string::basic_string[abi:ne180100]<0>(v39, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::warn((uint64_t)v39, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Format parameters attribute included for unexpected media format.", 65);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SBYTE7(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v39[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39[0].__r_.__value_.__l.__data_);
  }
  __int16 v7 = v38;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = v37;
  }
  SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatParams *)v39, v7, (long long *)&v20);
  size_t v9 = operator new(0x90uLL);
  void *v9 = 0;
  v9[1] = 0;
  SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatUnknownParams *)(v9 + 2), (const SDPMediaFormatUnknownParams *)v39);
  *((_DWORD *)v9 + 34) = 6;
  uint64_t v10 = a1[17];
  void *v9 = v10;
  v9[1] = a1 + 17;
  *(void *)(v10 + 8) = v9;
  a1[17] = v9;
  ++a1[19];
  SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams((void **)&v39[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
LABEL_41:
  *(void *)&long long v29 = *MEMORY[0x1E4FBA410];
  *(void *)((char *)&v29 + *(void *)(v29 - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v30 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v35) < 0) {
    operator delete(v34[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270]((char *)v36 + 8);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_1C53B2B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  SDPMediaRTPMap::~SDPMediaRTPMap(&a38);
  std::istringstream::~istringstream((uint64_t)&a51);
  if (*(char *)(v51 - 201) < 0) {
    operator delete(*(void **)(v51 - 224));
  }
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaPreconditionCurrentAttribute(uint64_t a1, std::string *a2)
{
  uint64_t v12 = 3;
  uint64_t v11 = 0;
  int v13 = 0;
  int v10 = 0;
  uint64_t v3 = SDPPrecondition::parse((unsigned int *)&v10, a2);
  LOBYTE(v13) = v3;
  if (v3)
  {
    SDPPreconditionTable::processPrecondition((void **)(a1 + 160), &v10);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "sdp.parse");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::error((uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"SDPMedia attribute parsing error: invalid precondition", 54);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  return v3;
}

void sub_1C53B2DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseMediaPreconditionDesiredAttribute(uint64_t a1, std::string *a2)
{
  uint64_t v12 = 3;
  uint64_t v11 = 0;
  int v13 = 0;
  int v10 = 1;
  uint64_t v3 = SDPPrecondition::parse((unsigned int *)&v10, a2);
  LOBYTE(v13) = v3;
  if (v3)
  {
    SDPPreconditionTable::processPrecondition((void **)(a1 + 160), &v10);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "sdp.parse");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::error((uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"SDPMedia attribute parsing error: invalid precondition", 54);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  return v3;
}

void sub_1C53B2EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseMediaPreconditionConfirmedAttribute(uint64_t a1, std::string *a2)
{
  uint64_t v12 = 3;
  uint64_t v11 = 0;
  int v13 = 0;
  int v10 = 2;
  uint64_t v3 = SDPPrecondition::parse((unsigned int *)&v10, a2);
  LOBYTE(v13) = v3;
  if (v3)
  {
    SDPPreconditionTable::processPrecondition((void **)(a1 + 160), &v10);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "sdp.parse");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::error((uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"SDPMedia attribute parsing error: invalid precondition", 54);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  return v3;
}

void sub_1C53B3034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20E5C78;
  char v7 = (std::string *)(a1 + 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 32) = *((void *)&__p.__r_.__value_.__l + 2);
  }
  *(void *)a1 = &unk_1F20C7DC8;
  *(_WORD *)(a1 + 40) = a3;
  *(unsigned char *)(a1 + 42) = a4;
  return a1;
}

void sub_1C53B3150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPPacketizationTimeAttribute::value@<X0>(void *a1@<X8>)
{
  uint64_t v9 = 0;
  long long v7 = 0u;
  memset(v8, 0, sizeof(v8));
  *(_OWORD *)std::string __p = 0u;
  long long v6 = 0u;
  memset(v4, 0, sizeof(v4));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v4 + 8, a1);
  *(void *)&v4[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v4 + *(void *)(*(void *)&v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v4[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v8);
}

void sub_1C53B333C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SDPMediaCrypto::SDPMediaCrypto(uint64_t a1, __int16 a2, uint64_t a3, char a4, char a5, char a6, char a7)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "crypto");
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20E5C78;
  if (SHIBYTE(v16) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v16;
  }
  *(void *)a1 = &unk_1F20DBE20;
  *(_WORD *)(a1 + 40) = a2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 48), *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  *(unsigned char *)(a1 + 72) = a4;
  *(unsigned char *)(a1 + 73) = a5;
  *(unsigned char *)(a1 + 74) = a6;
  *(unsigned char *)(a1 + 75) = a7;
  return a1;
}

void sub_1C53B3470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaEndToAccessEdgeProtection::SDPMediaEndToAccessEdgeProtection(uint64_t a1, uint64_t **a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "3ge2ae");
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20E5C78;
  uint64_t v4 = (std::string *)(a1 + 16);
  if (SHIBYTE(v14) < 0)
  {
    std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v14;
  }
  *(void *)a1 = &unk_1F20C7E20;
  *(unsigned char *)(a1 + 40) = 1;
  uint64_t v5 = (uint64_t *)*((unsigned __int8 *)a2 + 23);
  int v6 = (char)v5;
  if ((char)v5 < 0) {
    uint64_t v5 = a2[1];
  }
  if (v5 == (uint64_t *)9)
  {
    if (v6 >= 0) {
      long long v7 = (uint64_t *)a2;
    }
    else {
      long long v7 = *a2;
    }
    uint64_t v8 = *v7;
    int v9 = *((unsigned __int8 *)v7 + 8);
    BOOL v11 = v8 == 0x6574736575716572 && v9 == 100;
  }
  else
  {
    BOOL v11 = 0;
  }
  *(unsigned char *)(a1 + 40) = v11;
  return a1;
}

void sub_1C53B35C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *SDPMediaEndToAccessEdgeProtection::value@<X0>(SDPMediaEndToAccessEdgeProtection *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 40)) {
    uint64_t v2 = "requested";
  }
  else {
    uint64_t v2 = "applied";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_0,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_1,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_2,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_3,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_4,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_5,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_0,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_1,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_2,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_3,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_4,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_5,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_0,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_1,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_2,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_3,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_4,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_5,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_0,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_1,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_2,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_3,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_4,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_5,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_0,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_1,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_2,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_3,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_4,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_5,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_0,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_1,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_2,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_3,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_4,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_5,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
}

SDPMediaFormatParams *SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams(SDPMediaFormatParams *a1, __int16 a2, long long *a3)
{
  SDPMediaFormatParams::SDPMediaFormatParams(a1, a2);
  v5->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3A68;
  int v6 = v5 + 2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    v6->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_1C53B37CC(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F20E5C78;
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*(void **)(v1 + 16));
  }
  _Unwind_Resume(exception_object);
}

void *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPPacketizationTimeAttribute>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPPacketizationTimeAttribute *a4)
{
  long long v7 = operator new(0x90uLL);
  void *v7 = a2;
  v7[1] = a3;
  SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute((SDPPacketizationTimeAttribute *)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 13;
  return v7;
}

void sub_1C53B3858(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute(SDPPacketizationTimeAttribute *this, const SDPPacketizationTimeAttribute *a2)
{
  if (*((char *)a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 16);
  }
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F20E5C78;
  uint64_t v4 = (std::string *)((char *)this + 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)this + 4) = *((void *)&__p.__r_.__value_.__l + 2);
  }
  *(void *)this = &unk_1F20C7DC8;
  *((_WORD *)this + 20) = *((_WORD *)a2 + 20);
  *((unsigned char *)this + 42) = *((unsigned char *)a2 + 42);
}

void sub_1C53B3950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaCandidate>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPMediaCandidate *a4)
{
  long long v7 = operator new(0x90uLL);
  void *v7 = a2;
  v7[1] = a3;
  SDPMediaCandidate::SDPMediaCandidate((SDPMediaCandidate *)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 2;
  return v7;
}

void sub_1C53B39C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void SDPMediaCandidate::SDPMediaCandidate(SDPMediaCandidate *this, const SDPMediaCandidate *a2)
{
  if (*((char *)a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 16);
  }
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F20E5C78;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::string *)((char *)this + 16) = __p;
  }
  *(void *)this = &unk_1F20B8848;
  *((_WORD *)this + 20) = *((_WORD *)a2 + 20);
  uint64_t v4 = (std::string *)((char *)this + 48);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 3);
    *((void *)this + 8) = *((void *)a2 + 8);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *((_WORD *)this + 36) = *((_WORD *)a2 + 36);
}

void sub_1C53B3AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)uint64_t v14 = v16;
  if (*(char *)(v14 + 39) < 0) {
    operator delete(*v15);
  }
  _Unwind_Resume(exception_object);
}

void *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaCrypto>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPMediaCrypto *a4)
{
  long long v7 = operator new(0x90uLL);
  void *v7 = a2;
  v7[1] = a3;
  SDPMediaCrypto::SDPMediaCrypto((SDPMediaCrypto *)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 3;
  return v7;
}

void sub_1C53B3B7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaPath>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPMediaPath *a4)
{
  long long v7 = operator new(0x90uLL);
  void *v7 = a2;
  v7[1] = a3;
  SDPMediaPath::SDPMediaPath((SDPMediaPath *)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 14;
  return v7;
}

void sub_1C53B3BE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaAcceptTypes>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPMediaAcceptTypes *a4)
{
  long long v7 = operator new(0x90uLL);
  void *v7 = a2;
  v7[1] = a3;
  SDPMediaAcceptTypes::SDPMediaAcceptTypes((SDPMediaAcceptTypes *)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 15;
  return v7;
}

void sub_1C53B3C4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaAcceptWrappedTypes>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPMediaAcceptWrappedTypes *a4)
{
  long long v7 = operator new(0x90uLL);
  void *v7 = a2;
  v7[1] = a3;
  SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes((SDPMediaAcceptWrappedTypes *)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 16;
  return v7;
}

void sub_1C53B3CB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaSetup>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v7 = operator new(0x90uLL);
  void *v7 = a2;
  v7[1] = a3;
  SDPMediaSetup::SDPMediaSetup((uint64_t)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 17;
  return v7;
}

void sub_1C53B3D1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaFingerprint>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v7 = operator new(0x90uLL);
  void *v7 = a2;
  v7[1] = a3;
  SDPMediaFingerprint::SDPMediaFingerprint((uint64_t)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 18;
  return v7;
}

void sub_1C53B3D84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::find<std::string>(uint64_t a1)
{
  uint64_t v1 = qword_1EBBDB468;
  if (!qword_1EBBDB468) {
    return &qword_1EBBDB468;
  }
  uint64_t v2 = *(char *)(a1 + 23) >= 0 ? (const char *)a1 : *(const char **)a1;
  uint64_t v3 = &qword_1EBBDB468;
  do
  {
    if (*(char *)(v1 + 55) >= 0) {
      uint64_t v4 = (const char *)(v1 + 32);
    }
    else {
      uint64_t v4 = *(const char **)(v1 + 32);
    }
    int v5 = strcasecmp(v4, v2);
    int v6 = (uint64_t *)(v1 + 8);
    if (v5 >= 0)
    {
      int v6 = (uint64_t *)v1;
      uint64_t v3 = (uint64_t *)v1;
    }
    uint64_t v1 = *v6;
  }
  while (*v6);
  if (v3 == &qword_1EBBDB468) {
    return &qword_1EBBDB468;
  }
  long long v7 = *((char *)v3 + 55) >= 0 ? (const char *)(v3 + 4) : (const char *)v3[4];
  if (strcasecmp(v2, v7) < 0) {
    return &qword_1EBBDB468;
  }
  return v3;
}

void XcapCallBarringManager::_fetchCallBarring()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)v0);
}

void sub_1C53B4028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)&a24);
  _Unwind_Resume(a1);
}

void XcapCallBarringManager::CallBarringInfo::fetchRuleIdOrDefaultForProperty(std::string *a1, uint64_t a2, int a3)
{
  __int16 v28 = a3;
  char v29 = BYTE2(a3);
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  BYTE2(v26[0]) = BYTE2(a3);
  uint64_t v6 = a2 + 8;
  LOWORD(v26[0]) = a3;
  if (a2 + 16 == std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::find<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>(a2 + 8, (unsigned __int8 *)v26))
  {
    if (*(void *)(a2 + 24))
    {
      std::string::operator=(a1, (const std::string *)(*(void *)v6 + 40));
      std::string::basic_string[abi:ne180100]<0>(v26, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v8 = ims::error((uint64_t)v26, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v8 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Rule not exist. Choose the first one - ", 39);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, a1);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      int v9 = (unsigned __int8 *)qword_1EBBDB348;
      if (!qword_1EBBDB348) {
        goto LABEL_34;
      }
      int v10 = &qword_1EBBDB348;
      do
      {
        unsigned int v11 = v9[32];
        BOOL v12 = v11 == a3;
        if (v11 < a3) {
          char v13 = -1;
        }
        else {
          char v13 = 1;
        }
        if (v12)
        {
          unsigned int v14 = v9[33];
          BOOL v15 = v14 == BYTE1(a3);
          char v13 = v14 < BYTE1(a3) ? -1 : 1;
          if (v15)
          {
            unsigned int v16 = v9[34];
            BOOL v17 = v16 == BYTE2(a3);
            char v13 = v16 < BYTE2(a3) ? -1 : 1;
            if (v17) {
              char v13 = 0;
            }
          }
        }
        BOOL v18 = v13 < 0;
        if (v13 >= 0) {
          __int16 v19 = v9;
        }
        else {
          __int16 v19 = v9 + 8;
        }
        if (!v18) {
          int v10 = (uint64_t *)v9;
        }
        int v9 = *(unsigned __int8 **)v19;
      }
      while (*(void *)v19);
      if (v10 == &qword_1EBBDB348
        || ((unsigned int v20 = *((unsigned __int8 *)v10 + 32), v21 = v20 > a3, v20 != a3)
         || (v22 = *((unsigned __int8 *)v10 + 33), v12 = v22 == BYTE1(a3), BOOL v21 = v22 > BYTE1(a3), !v12)
         || (v23 = *((unsigned __int8 *)v10 + 34), BOOL v21 = v23 > BYTE2(a3), v23 != BYTE2(a3)))
        && v21)
      {
LABEL_34:
        int v10 = &qword_1EBBDB348;
      }
      std::string::operator=(a1, (const std::string *)(v10 + 5));
      std::string::basic_string[abi:ne180100]<0>(v26, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v8 = ims::error((uint64_t)v26, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v8 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Rule not exist. Choose from the default rules - ", 48);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, a1);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(unsigned char *)(v8 + 17) = 0;
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
  }
  else
  {
    uint64_t v7 = std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::find<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>(v6, (unsigned __int8 *)&v28);
    std::string::operator=(a1, (const std::string *)(v7 + 40));
  }
}

void sub_1C53B4398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN22XcapCallBarringManager17_fetchCallBarringENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, uint64_t a2, bambi::XmlParser *a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a1 + 40);
  if ((*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16)))
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    goto LABEL_57;
  }
  __int16 v9 = *(_WORD *)(v5 + 57);
  if (!*(unsigned char *)(v5 + 56))
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long __p = 0u;
    long long v51 = 0u;
    memset(v50, 0, sizeof(v50));
    XcapCBRule::XcapCBRule((XcapCBRule *)v50);
    std::string v48 = 0;
    uint64_t v49 = 0;
    if (bambi::XmlParser::parseXml(a3, (uint64_t)v50, v14, v15))
    {
      std::allocate_shared[abi:ne180100]<XcapDocumentCallBarring,std::allocator<XcapDocumentCallBarring>,XcapDocumentCallBarring::Direction &,void>((uint64_t *)&v48, v9);
      XcapDocumentCallBarring::addRule(v48, (const XcapCBRule *)v50);
    }
    *(void *)uint64_t v50 = &unk_1F20C2EF0;
    *(void *)&v50[8] = &unk_1F20C2F68;
    if ((void)v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55);
    }
    if (SBYTE7(v54) < 0) {
      operator delete((void *)__p);
    }
    bambi::XmlTreeItem::~XmlTreeItem((void **)&v50[8]);
    goto LABEL_6;
  }
  *(_OWORD *)uint64_t v50 = 0uLL;
  std::allocate_shared[abi:ne180100]<XcapDocumentCallBarring,std::allocator<XcapDocumentCallBarring>,XcapDocumentCallBarring::Direction &,void>((uint64_t *)v50, v9);
  uint64_t v10 = *(void *)v50;
  if (!bambi::XmlParser::parseXml(a3, *(uint64_t *)v50, v11, v12))
  {
    std::string v48 = 0;
    uint64_t v49 = 0;
    if (*(void *)&v50[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v50[8]);
    }
    goto LABEL_6;
  }
  std::string v48 = (XcapDocumentCallBarring *)v10;
  uint64_t v49 = *(std::__shared_weak_count **)&v50[8];
  if (v10)
  {
    std::string::basic_string[abi:ne180100]<0>(v50, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v46, "");
    uint64_t v16 = ims::debug((uint64_t)v50, (uint64_t)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v10 + 104))(v44, v10);
    (*(void (**)(uint64_t, void **))(*(void *)v16 + 32))(v16, v44);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    if (v45 < 0) {
      operator delete(v44[0]);
    }
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    if ((v50[23] & 0x80000000) != 0) {
      operator delete(*(void **)v50);
    }
    uint64_t v42 = v5;
    BOOL v17 = *(unsigned char **)(v5 + 48);
    int v18 = *(unsigned __int8 *)(v6 + 365);
    unsigned char *v17 = 1;
    __int16 v19 = *(uint64_t **)(v10 + 88);
    unsigned int v20 = *(uint64_t **)(v10 + 96);
    if (v19 == v20)
    {
LABEL_49:
      char v13 = v48;
      uint64_t v5 = v42;
      goto LABEL_50;
    }
    uint64_t v21 = (uint64_t **)(v17 + 8);
    while (1)
    {
      uint64_t v22 = *v19;
      uint64_t v23 = *v19 + 64;
      if (v18)
      {
        if (*(char *)(v22 + 87) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v50, *(const std::string::value_type **)(v22 + 64), *(void *)(v22 + 72));
        }
        else
        {
          *(_OWORD *)uint64_t v50 = *(_OWORD *)v23;
          *(void *)&v50[16] = *(void *)(v23 + 16);
        }
        __int16 v24 = *(unsigned __int8 *)(v10 + 81);
        uint64_t v25 = *(void *)(v22 + 88);
        long long v26 = *(std::__shared_weak_count **)(v22 + 96);
        if (v26)
        {
          char v27 = 1;
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          __int16 v28 = *(unsigned __int8 *)(v25 + 65);
          uint64_t v25 = *(void *)(v22 + 88);
          char v29 = *(std::__shared_weak_count **)(v22 + 96);
          if (v29)
          {
            char v27 = 0;
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          char v29 = 0;
          __int16 v28 = *(unsigned __int8 *)(v25 + 65);
          char v27 = 1;
        }
        BYTE2(v44[0]) = *(unsigned char *)(v25 + 66);
        LOWORD(v44[0]) = v24 | (v28 << 8);
        v46[0] = v44;
        long long v30 = std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::__emplace_unique_key_args<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::piecewise_construct_t const&,std::tuple<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>&&>,std::tuple<>>(v21, (unsigned __int8 *)v44, (_WORD **)v46);
        long long v31 = v30 + 5;
        if (*((char *)v30 + 63) < 0) {
          operator delete((void *)*v31);
        }
        *(_OWORD *)long long v31 = *(_OWORD *)v50;
        v31[2] = *(void *)&v50[16];
        v50[23] = 0;
        v50[0] = 0;
        if ((v27 & 1) == 0) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
        if ((v50[23] & 0x80000000) == 0) {
          goto LABEL_48;
        }
      }
      else
      {
        if (*(char *)(v22 + 87) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v50, *(const std::string::value_type **)(v22 + 64), *(void *)(v22 + 72));
        }
        else
        {
          *(_OWORD *)uint64_t v50 = *(_OWORD *)v23;
          *(void *)&v50[16] = *(void *)(v23 + 16);
        }
        __int16 v32 = *(unsigned __int8 *)(v10 + 81);
        uint64_t v33 = *(void *)(v22 + 88);
        std::string v34 = *(std::__shared_weak_count **)(v22 + 96);
        if (v34) {
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        __int16 v35 = *(unsigned __int8 *)(v33 + 65);
        BYTE2(v44[0]) = 0;
        LOWORD(v44[0]) = v32 | (v35 << 8);
        v46[0] = v44;
        std::string v36 = std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::__emplace_unique_key_args<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::piecewise_construct_t const&,std::tuple<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>&&>,std::tuple<>>(v21, (unsigned __int8 *)v44, (_WORD **)v46);
        std::string v37 = v36 + 5;
        if (*((char *)v36 + 63) < 0) {
          operator delete((void *)*v37);
        }
        *(_OWORD *)std::string v37 = *(_OWORD *)v50;
        void v37[2] = *(void *)&v50[16];
        v50[23] = 0;
        v50[0] = 0;
        if (!v34) {
          goto LABEL_48;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        if ((v50[23] & 0x80000000) == 0) {
          goto LABEL_48;
        }
      }
      operator delete(*(void **)v50);
LABEL_48:
      if (++v19 == v20) {
        goto LABEL_49;
      }
    }
  }
LABEL_6:
  char v13 = 0;
LABEL_50:
  unsigned __int16 v38 = v49;
  if (v49) {
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v39 = *(_WORD *)(v5 + 57);
  *(_OWORD *)uint64_t v50 = 0uLL;
  std::allocate_shared[abi:ne180100]<XcapDocumentCallBarring,std::allocator<XcapDocumentCallBarring>,XcapDocumentCallBarring::Direction &,void>((uint64_t *)v50, v39);
  uint64_t v7 = *(XcapDocumentCallBarring **)v50;
  *(unsigned char *)(*(void *)v50 + 80) = 0;
  if (v13)
  {
    RuleForCondition = (const XcapCBRule *)XcapDocumentCallBarring::findRuleForCondition((uint64_t)v13, HIBYTE(v39));
    if (RuleForCondition)
    {
      *((unsigned char *)v7 + 80) = *((unsigned char *)v13 + 80);
      XcapDocumentCallBarring::addRule(v7, RuleForCondition);
    }
  }
  uint64_t v8 = *(std::__shared_weak_count **)&v50[8];
  if (v38)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
LABEL_57:
  uint64_t v41 = *(void *)(v5 + 32);
  ImsResult::ImsResult((ImsResult *)v43, (const std::string *)a2);
  (*(void (**)(uint64_t, unsigned char *, XcapDocumentCallBarring *))(v41 + 16))(v41, v43, v7);
  ImsResult::~ImsResult((ImsResult *)v43);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C53B4960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,std::__shared_weak_count *a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  XcapCBRule::~XcapCBRule((XcapCBRule *)&a35);
  _Unwind_Resume(a1);
}

void XcapCallBarringManager::setCallBarring(uint64_t a1, int a2, char a3, char a4)
{
  if (a2 == 1) {
    uint64_t v4 = a1 + 376;
  }
  else {
    uint64_t v4 = a1 + 408;
  }
  if (!*(void *)(v4 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v8, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::info((uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"No Rule-Ids. Perform GET before PUT", 35);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    XcapCallBarringManager::_fetchCallBarring();
  }
  XcapCallBarringManager::_setCallBarring(a1, a2 & 0xFFFFFF, a3, a4);
}

void sub_1C53B4C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 49) < 0) {
    operator delete(*(void **)(v22 - 72));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN22XcapCallBarringManager14setCallBarringENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEbbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1)
{
}

void XcapCallBarringManager::_setCallBarring(uint64_t a1, int a2, char a3, char a4)
{
  if (a2 == 1) {
    uint64_t v7 = a1 + 376;
  }
  else {
    uint64_t v7 = a1 + 408;
  }
  int v8 = a2 & 0xFFFFFF;
  if (*(void *)(v7 + 24))
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    memset(v16, 0, sizeof(v16));
    XcapCBRule::XcapCBRule((XcapCBRule *)v16);
    if (XcapCallBarringManager::_makeCallBarringRule(a1, v8, a3, a4, (uint64_t)v16))
    {
      uint64_t v15 = 0;
      *(_OWORD *)char v13 = 0u;
      long long v14 = 0u;
      XcapCallBarringManager::_generateNodeSelectorForCBRule((uint64_t)v13);
    }
    std::string::basic_string[abi:ne180100]<0>(v13, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v10 = ims::error((uint64_t)v13, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Failed to set Call Barring", 26);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v12 < 0) {
      operator delete(__p);
    }
    if (SBYTE7(v14) < 0) {
      operator delete(v13[0]);
    }
    v16[0] = &unk_1F20C2EF0;
    v16[1] = &unk_1F20C2F68;
    if ((void)v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19);
    }
    if (SBYTE7(v18) < 0) {
      operator delete((void *)v17);
    }
    bambi::XmlTreeItem::~XmlTreeItem((void **)&v16[1]);
  }
  else
  {
    int v9 = a2 & 0xFFFFFF;
    XcapCallBarringManager::_setCallBarringForDoc(a1, v9, a3, a4);
  }
}

void sub_1C53B4FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,std::__shared_weak_count *a54)
{
  MEMORY[0x1C878E320](v54, 0x10B2C409DA9FE99);
  if (a29 < 0) {
    operator delete(__p);
  }
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)&a30);
  a39 = &unk_1F20C2EF0;
  a40 = &unk_1F20C2F68;
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  bambi::XmlTreeItem::~XmlTreeItem(&a40);
  _Unwind_Resume(a1);
}

void XcapCallBarringManager::activateCallBarring(uint64_t a1, int a2, char a3)
{
  if (a2 == 1) {
    uint64_t v3 = a1 + 376;
  }
  else {
    uint64_t v3 = a1 + 408;
  }
  if (!*(void *)(v3 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::info((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"No Rule-Ids. Perform GET before PUT", 35);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    XcapCallBarringManager::_fetchCallBarring();
  }
  XcapCallBarringManager::_setCallBarringActivationMode(a1, a2 & 0xFFFFFF, a3);
}

void sub_1C53B5288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 49) < 0) {
    operator delete(*(void **)(v22 - 72));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN22XcapCallBarringManager19activateCallBarringENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1)
{
}

void XcapCallBarringManager::_setCallBarringActivationMode(uint64_t a1, int a2, char a3)
{
  if (a2 == 1) {
    uint64_t v3 = a1 + 376;
  }
  else {
    uint64_t v3 = a1 + 408;
  }
  if (*(void *)(v3 + 24))
  {
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    XcapCallBarringManager::_generateNodeSelectorForCBRule((uint64_t)v5);
  }
  int v4 = a2 & 0xFFFFFF;
  XcapCallBarringManager::_setCallBarringForDoc(a1, v4, 1, a3);
}

void sub_1C53B54F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  MEMORY[0x1C878E320](v27, 0x10B2C409DA9FE99);
  if (a26 < 0) {
    operator delete(__p);
  }
  bambi::XmlTreeItem::~XmlTreeItem(v26);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)(v28 - 96));
  _Unwind_Resume(a1);
}

void XcapCallBarringManager::_setCallBarringForDoc(uint64_t a1, int a2, char a3, char a4)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v15 = 0u;
  memset(v14, 0, sizeof(v14));
  XcapCBRule::XcapCBRule((XcapCBRule *)v14);
  if (XcapCallBarringManager::_makeCallBarringRule(a1, a2 & 0xFFFFFF, a3, a4, (uint64_t)v14))
  {
    uint64_t v13 = 0;
    long long __p = 0u;
    long long v12 = 0u;
    XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)&__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v9, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v8 = ims::error((uint64_t)v9, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Failed to set Call Barring", 26);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SBYTE7(v12) < 0) {
    operator delete((void *)__p);
  }
  if (SBYTE7(v10) < 0) {
    operator delete(v9[0]);
  }
  v14[0] = &unk_1F20C2EF0;
  v14[1] = &unk_1F20C2F68;
  if ((void)v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v17);
  }
  if (SBYTE7(v16) < 0) {
    operator delete((void *)v15);
  }
  bambi::XmlTreeItem::~XmlTreeItem((void **)&v14[1]);
}

void sub_1C53B58A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  MEMORY[0x1C878E320](v49, 0x10B2C409DA9FE99);
  if (a26 < 0) {
    operator delete(__p);
  }
  XcapDocumentCallBarring::~XcapDocumentCallBarring((XcapDocumentCallBarring *)&a27);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)&a44);
  XcapCBRule::~XcapCBRule((XcapCBRule *)(v50 - 176));
  _Unwind_Resume(a1);
}

BOOL XcapCallBarringManager::_makeCallBarringRule(uint64_t a1, int a2, char a3, char a4, uint64_t a5)
{
  if (a5)
  {
    if (a2 == 1) {
      uint64_t v9 = a1 + 376;
    }
    else {
      uint64_t v9 = a1 + 408;
    }
    XcapCallBarringManager::CallBarringInfo::fetchRuleIdOrDefaultForProperty(&__str, v9, a2 & 0xFFFFFF);
    std::string::operator=((std::string *)(a5 + 64), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    *(unsigned char *)(a5 + 104) = a3;
    uint64_t v11 = *(void *)(a5 + 88);
    long long v10 = *(std::__shared_weak_count **)(a5 + 96);
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      *(unsigned char *)(v11 + 65) = BYTE1(a2);
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      uint64_t v11 = *(void *)(a5 + 88);
      long long v12 = *(std::__shared_weak_count **)(a5 + 96);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        *(unsigned char *)(v11 + 64) = a4;
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        return a5 != 0;
      }
    }
    else
    {
      *(unsigned char *)(v11 + 65) = BYTE1(a2);
    }
    *(unsigned char *)(v11 + 64) = a4;
    return a5 != 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v13 = ims::error((uint64_t)&__str, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"NULL rule object to make CB rule", 32);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a5 != 0;
}

void sub_1C53B5B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN22XcapCallBarringManager21_setCallBarringForDocENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEbbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const std::string *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, unsigned char *, void))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1C53B5B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void XcapCallBarringManager::_generateNodeSelectorForCBRule(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)a1);
}

void sub_1C53B5C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  XcapNodeSelector::~XcapNodeSelector(v15);
  _Unwind_Resume(a1);
}

void ___ZN22XcapCallBarringManager22_setCallBarringForRuleENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEbbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const std::string *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, unsigned char *, void))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1C53B5CF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN22XcapCallBarringManager36_setCallBarringActivationModeForRuleENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const std::string *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, unsigned char *, void))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1C53B5D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void XcapCallBarringManager::~XcapCallBarringManager(XcapCallBarringManager *this)
{
  XcapCallBarringManager::~XcapCallBarringManager(this);
  JUMPOUT(0x1C878E320);
}

{
  *(void *)this = &unk_1F20C7E78;
  std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(*((char **)this + 53));
  std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(*((char **)this + 49));
  *(void *)this = &unk_1F20BBE38;
  XcapConfig::~XcapConfig((void **)this + 1);
}

uint64_t std::allocate_shared[abi:ne180100]<XcapDocumentCallBarring,std::allocator<XcapDocumentCallBarring>,XcapDocumentCallBarring::Direction &,void>(uint64_t *a1, unsigned __int8 a2)
{
  int v4 = operator new(0x88uLL);
  v4[1] = 0;
  v4[2] = 0;
  *int v4 = &unk_1F20C7EB0;
  uint64_t result = XcapDocumentCallBarring::XcapDocumentCallBarring((uint64_t)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_1C53B5E0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<XcapDocumentCallBarring>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7EB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<XcapDocumentCallBarring>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C7EB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<XcapDocumentCallBarring>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(*((void *)a1 + 1));
    if (a1[63] < 0) {
      operator delete(*((void **)a1 + 5));
    }
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::__emplace_unique_key_args<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::piecewise_construct_t const&,std::tuple<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>&&>,std::tuple<>>(uint64_t **a1, unsigned __int8 *a2, _WORD **a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    uint64_t v8 = a1 + 1;
LABEL_9:
    long long v10 = (uint64_t *)operator new(0x40uLL);
    char v11 = *((unsigned char *)*a3 + 2);
    *((_WORD *)v10 + 16) = **a3;
    *((unsigned char *)v10 + 34) = v11;
    v10[6] = 0;
    v10[7] = 0;
    v10[5] = 0;
    *long long v10 = 0;
    v10[1] = 0;
    void v10[2] = (uint64_t)v8;
    *uint64_t v6 = v10;
    long long v12 = (uint64_t *)**a1;
    uint64_t v13 = v10;
    if (v12)
    {
      *a1 = v12;
      uint64_t v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v5;
      uint64_t v9 = (unsigned __int8 *)(v5 + 4);
      if ((std::__tuple_compare_three_way[abi:ne180100]<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,0ul,1ul,2ul>(a2, (unsigned __int8 *)v5 + 32) & 0x80) == 0)break; {
      uint64_t v5 = *v8;
      }
      uint64_t v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if ((std::__tuple_compare_three_way[abi:ne180100]<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,0ul,1ul,2ul>(v9, a2) & 0x80) == 0)break; {
    uint64_t v6 = v8 + 1;
    }
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  long long v10 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v10;
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,0ul,1ul,2ul>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v3 = *a1;
  unsigned int v4 = *a2;
  if (v3 < v4) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = 1;
  }
  if (v3 == v4)
  {
    unsigned int v6 = a1[1];
    unsigned int v7 = a2[1];
    uint64_t result = v6 < v7 ? 0xFFFFFFFFLL : 1;
    if (v6 == v7)
    {
      unsigned int v8 = a1[2];
      unsigned int v9 = a2[2];
      BOOL v10 = v8 == v9;
      if (v8 < v9) {
        unsigned int v11 = -1;
      }
      else {
        unsigned int v11 = 1;
      }
      if (v10) {
        return 0;
      }
      else {
        return v11;
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::find<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    char v6 = std::__tuple_compare_three_way[abi:ne180100]<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,0ul,1ul,2ul>((unsigned __int8 *)(v3 + 32), a2);
    if (v6 >= 0) {
      unsigned int v7 = (uint64_t *)v3;
    }
    else {
      unsigned int v7 = (uint64_t *)(v3 + 8);
    }
    if (v6 >= 0) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::__tuple_compare_three_way[abi:ne180100]<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,0ul,1ul,2ul>(a2, (unsigned __int8 *)(v5 + 32)) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t SDPSettingsBuilder::SDPSettingsBuilder(uint64_t a1, void *a2, char a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = &unk_1F20B4230;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 24) = a3;
  std::string::operator=(&SDPSettingsBuilder::_username, (const std::string *)(*a2 + 112));
  return a1;
}

void sub_1C53B61CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void SDPSettingsBuilder::findRTPMatches(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = a2;
  }
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a3;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  uint64_t v22 = v5;
  if (v7 != v5)
  {
    while (1)
    {
      uint64_t v9 = *(void *)(v6 + 8);
      if (v9 != v6) {
        break;
      }
LABEL_58:
      uint64_t v7 = *(void *)(v7 + 8);
      if (v7 == v22) {
        return;
      }
    }
    while (1)
    {
      uint64_t v10 = *(unsigned __int16 *)(v7 + 24);
      long long v32 = 0u;
      long long v33 = 0u;
      memset(v31, 0, sizeof(v31));
      SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)v31, (const SDPMediaRTPMap *)(v7 + 32));
      long long v29 = 0u;
      long long v30 = 0u;
      memset(v28, 0, sizeof(v28));
      SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)v28, (const SDPMediaRTPMap *)(v9 + 32));
      if (v10 <= 0x5F && v10 == *(unsigned __int16 *)(v9 + 24))
      {
        (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a5, v10);
        goto LABEL_57;
      }
      uint64_t v11 = BYTE7(v33);
      if (SBYTE7(v33) < 0) {
        uint64_t v11 = *((void *)&v32 + 1);
      }
      if (!v11) {
        goto LABEL_57;
      }
      uint64_t v12 = BYTE7(v30);
      if (SBYTE7(v30) < 0) {
        uint64_t v12 = *((void *)&v29 + 1);
      }
      if (!v12) {
        goto LABEL_57;
      }
      if (SBYTE7(v33) < 0)
      {
        std::string::__init_copy_ctor_external(&v27, (const std::string::value_type *)v32, *((std::string::size_type *)&v32 + 1));
        if ((BYTE7(v30) & 0x80) != 0)
        {
LABEL_22:
          std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v29, *((std::string::size_type *)&v29 + 1));
          goto LABEL_23;
        }
      }
      else
      {
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v32;
        v27.__r_.__value_.__r.__words[2] = v33;
        if ((BYTE7(v30) & 0x80) != 0) {
          goto LABEL_22;
        }
      }
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v29;
      v26.__r_.__value_.__r.__words[2] = v30;
LABEL_23:
      char v13 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v14 = &v27;
      }
      else {
        long long v14 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      int v15 = SHIBYTE(v26.__r_.__value_.__r.__words[2]);
      char v16 = (void *)v26.__r_.__value_.__r.__words[0];
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v17 = &v26;
      }
      else {
        long long v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if (strcasecmp((const char *)v14, (const char *)v17)) {
        goto LABEL_39;
      }
      int v18 = WORD4(v33);
      if (!WORD4(v33)) {
        int v18 = 8000;
      }
      int v19 = WORD4(v30);
      if (!WORD4(v30)) {
        int v19 = 8000;
      }
      if (v18 == v19)
      {
        BOOL v20 = WORD5(v33) == WORD5(v30);
        if (v15 < 0) {
          goto LABEL_36;
        }
      }
      else
      {
LABEL_39:
        BOOL v20 = 0;
        if (v15 < 0)
        {
LABEL_36:
          operator delete(v16);
          if ((*((unsigned char *)&v27.__r_.__value_.__s + 23) & 0x80) != 0) {
            goto LABEL_37;
          }
          goto LABEL_41;
        }
      }
      if (v13 < 0)
      {
LABEL_37:
        operator delete(v27.__r_.__value_.__l.__data_);
        if (v20) {
          goto LABEL_42;
        }
        goto LABEL_57;
      }
LABEL_41:
      if (v20)
      {
LABEL_42:
        std::string::basic_string[abi:ne180100]<0>(&v27, "sdp.settings");
        std::string::basic_string[abi:ne180100]<0>(&v26, "");
        uint64_t v21 = ims::debug((uint64_t)&v27, (uint64_t)&v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Trying dynamic match: ", 22);
        *(unsigned char *)(v21 + 17) = 0;
        if (SBYTE7(v30) < 0)
        {
          std::string::__init_copy_ctor_external(&v25, (const std::string::value_type *)v29, *((std::string::size_type *)&v29 + 1));
        }
        else
        {
          *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v29;
          v25.__r_.__value_.__r.__words[2] = v30;
        }
        (*(void (**)(uint64_t, std::string *))(*(void *)v21 + 32))(v21, &v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"(", 1);
        *(unsigned char *)(v21 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v21 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)":", 1);
        *(unsigned char *)(v21 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v21 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)")", 1);
        *(unsigned char *)(v21 + 17) = 0;
        if (SBYTE7(v33) < 0)
        {
          std::string::__init_copy_ctor_external(&v24, (const std::string::value_type *)v32, *((std::string::size_type *)&v32 + 1));
        }
        else
        {
          *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v32;
          v24.__r_.__value_.__r.__words[2] = v33;
        }
        (*(void (**)(uint64_t, std::string *))(*(void *)v21 + 32))(v21, &v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"(", 1);
        *(unsigned char *)(v21 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v21 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)":", 1);
        *(unsigned char *)(v21 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v21 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)")", 1);
        *(unsigned char *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v21 + 17) = 0;
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        (*(void (**)(void))(a4 + 16))();
      }
LABEL_57:
      SDPMediaRTPMap::~SDPMediaRTPMap((void **)v28);
      SDPMediaRTPMap::~SDPMediaRTPMap((void **)v31);
      uint64_t v9 = *(void *)(v9 + 8);
      if (v9 == v6) {
        goto LABEL_58;
      }
    }
  }
}

void sub_1C53B66BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  SDPMediaRTPMap::~SDPMediaRTPMap(&a45);
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)(v45 - 176));
  _Unwind_Resume(a1);
}

void SDPSettingsBuilder::connectionForMedia(SDPMedia *this@<X1>, SDPModel **a2@<X0>, uint64_t a3@<X8>)
{
  long long v11 = 0u;
  long long v12 = 0u;
  memset(v10, 0, sizeof(v10));
  SDPMedia::validConnection(this, (uint64_t)v10);
  if (BYTE8(v12))
  {
    SDPConnection::SDPConnection(a3, (uint64_t)v10);
LABEL_6:
    *(unsigned char *)(a3 + 56) = BYTE8(v12);
    goto LABEL_7;
  }
  SDPModel::validConnection(*a2, (uint64_t)&v5);
  v10[8] = v6;
  *(void *)&v10[12] = *(void *)((char *)&v6 + 4);
  std::string::operator=((std::string *)&v10[24], &v7);
  LOWORD(v12) = v8;
  BYTE8(v12) = v9;
  uint64_t v5 = &unk_1F20CB730;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v7.__r_.__value_.__l.__data_);
    if (BYTE8(v12)) {
      goto LABEL_5;
    }
  }
  else if (v9)
  {
LABEL_5:
    SDPConnection::SDPConnection(a3, (uint64_t)v10);
    goto LABEL_6;
  }
  long long v6 = 0u;
  uint64_t v8 = 0;
  LOBYTE(v6) = 1;
  uint64_t v5 = &unk_1F20CB730;
  memset(&v7, 0, sizeof(v7));
  SDPConnection::SDPConnection(a3, (uint64_t)&v5);
  *(unsigned char *)(a3 + 56) = 0;
  uint64_t v5 = &unk_1F20CB730;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
LABEL_7:
  *(void *)uint64_t v10 = &unk_1F20CB730;
  if (SHIBYTE(v11) < 0) {
    operator delete(*(void **)&v10[24]);
  }
}

void sub_1C53B68E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

unint64_t SDPSettingsBuilder::generateBandwidthSpecifierInfo(unint64_t result, SDPModel **a2, uint64_t a3)
{
  unint64_t v4 = result;
  if (*(void *)(a3 + 128))
  {
    uint64_t v5 = a3 + 112;
    uint64_t v6 = *(void *)(a3 + 120);
    if (v6 != a3 + 112)
    {
      do
      {
        int v7 = *(_DWORD *)(v6 + 28);
        switch(v7)
        {
          case 4:
            BOOL isHeld = SDPModel::isHeld(*a2);
            uint64_t result = SDPBandwidth::bandwidth((SDPBandwidth *)(v6 + 16), isHeld);
            *(void *)(v4 + 56) = result;
            *(unsigned char *)(v4 + 32) = 1;
            break;
          case 3:
            BOOL v10 = SDPModel::isHeld(*a2);
            uint64_t result = SDPBandwidth::bandwidth((SDPBandwidth *)(v6 + 16), v10);
            *(void *)(v4 + 64) = result;
            *(unsigned char *)(v4 + 33) = 1;
            break;
          case 2:
            BOOL v8 = SDPModel::isHeld(*a2);
            uint64_t result = SDPBandwidth::bandwidth((SDPBandwidth *)(v6 + 16), v8);
            *(void *)(v4 + 48) = result;
            break;
        }
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while (v6 != v5);
    }
  }
  else
  {
    uint64_t v11 = (uint64_t)*a2 + 296;
    for (uint64_t i = *((void *)*a2 + 38); i != v11; uint64_t i = *(void *)(i + 8))
    {
      int v13 = *(_DWORD *)(i + 28);
      switch(v13)
      {
        case 4:
          BOOL v16 = SDPModel::isHeld(*a2);
          uint64_t result = SDPBandwidth::bandwidth((SDPBandwidth *)(i + 16), v16);
          *(void *)(v4 + 56) = result;
          *(unsigned char *)(v4 + 32) = 1;
          break;
        case 3:
          BOOL v15 = SDPModel::isHeld(*a2);
          uint64_t result = SDPBandwidth::bandwidth((SDPBandwidth *)(i + 16), v15);
          *(void *)(v4 + 64) = result;
          *(unsigned char *)(v4 + 33) = 1;
          break;
        case 2:
          BOOL v14 = SDPModel::isHeld(*a2);
          uint64_t result = SDPBandwidth::bandwidth((SDPBandwidth *)(i + 16), v14);
          *(void *)(v4 + 48) = result;
          break;
      }
    }
  }
  return result;
}

void *SDPSettingsBuilder::copyGeneralMediaSettings(std::string *this, SDPMediaSettings *a2, SDPMedia *a3, SDPMedia *a4, const ImsPrefs *a5)
{
  std::string::operator=(this + 3, &SDPSettingsBuilder::_username);
  LOWORD(this[1].__r_.__value_.__l.__data_) = *((void *)a2 + 2);
  *(_WORD *)&this[1].__r_.__value_.__s.__data_[2] = *((void *)a3 + 2);
  SDPMedia::mediaCryptoList(a2, &v17);
  BOOL v8 = v18;
  if (v18 != &v17)
  {
    char v9 = (SDPMediaCrypto *)&this[4].__r_.__value_.__r.__words[1];
    BOOL v10 = (SDPMediaCrypto *)&this[8];
    do
    {
      uint64_t v11 = v8[2];
      if (*(unsigned char *)(v11 + 72))
      {
        SDPMedia::mediaCryptoList(a3, &v15);
        long long v12 = v16;
        if (v16 != &v15)
        {
          while (1)
          {
            int v13 = (unsigned __int16 *)v12[2];
            if (v13[20] == *(unsigned __int16 *)(v11 + 40)) {
              break;
            }
            long long v12 = (uint64_t *)v12[1];
            if (v12 == &v15) {
              goto LABEL_9;
            }
          }
          std::optional<SDPMediaCrypto>::operator=[abi:ne180100]<SDPMediaCrypto const&,void>(v9, (const SDPMediaCrypto *)v11);
          std::optional<SDPMediaCrypto>::operator=[abi:ne180100]<SDPMediaCrypto const&,void>(v10, (const SDPMediaCrypto *)v13);
        }
LABEL_9:
        std::__list_imp<unsigned long long>::clear(&v15);
      }
      BOOL v8 = (uint64_t *)v8[1];
    }
    while (v8 != &v17);
  }
  return std::__list_imp<unsigned long long>::clear(&v17);
}

void sub_1C53B6BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void SDPSettingsBuilder::copyRemoteMediaSettings(uint64_t a1, void *a2, SDPMedia *this)
{
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  *(_OWORD *)uint64_t v17 = 0u;
  uint64_t v6 = (atomic_ullong *)a2[1];
  v15[0] = *(SDPModel **)a2;
  v15[1] = (SDPModel *)v6;
  if (v6) {
    atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  }
  SDPSettingsBuilder::connectionForMedia(this, v15, (uint64_t)&v16);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
  }
  if (BYTE8(v19))
  {
    if (IpAddress::isAddress((std::string *)&v17[1]))
    {
      SDPMediaSettings::setRemoteAddress(a1, (std::string *)&v17[1]);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "::");
      SDPMediaSettings::setRemoteAddress(a1, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v7 = *((void *)this + 18);
  if ((SDPMedia *)v7 == (SDPMedia *)((char *)this + 136))
  {
LABEL_14:
    int v9 = 0;
  }
  else
  {
    uint64_t v8 = *((void *)this + 18);
    while (*(_DWORD *)(v8 + 136) != 4)
    {
      uint64_t v8 = *(void *)(v8 + 8);
      if ((SDPMedia *)v8 == (SDPMedia *)((char *)this + 136)) {
        goto LABEL_14;
      }
    }
    while (*(_DWORD *)(v7 + 136) != 4)
      uint64_t v7 = *(void *)(v7 + 8);
    int v9 = *(_DWORD *)(v7 + 56);
  }
  *(_DWORD *)(a1 + 40) = v9;
  uint64_t v10 = *a2 + 392;
  uint64_t v11 = *(void *)(*a2 + 400);
  if (v11 == v10)
  {
LABEL_22:
    int v13 = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(*a2 + 400);
    while (*(_DWORD *)(v12 + 136) != 4)
    {
      uint64_t v12 = *(void *)(v12 + 8);
      if (v12 == v10) {
        goto LABEL_22;
      }
    }
    while (*(_DWORD *)(v11 + 136) != 4)
      uint64_t v11 = *(void *)(v11 + 8);
    int v13 = *(_DWORD *)(v11 + 56);
  }
  *(_DWORD *)(a1 + 36) = v13;
  *(void *)&long long v16 = &unk_1F20CB730;
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[1]);
  }
}

void sub_1C53B6DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPSettingsBuilder::isIPv6(uint64_t a1, SDPMedia *a2)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  *(_OWORD *)std::string __p = 0u;
  uint64_t v2 = *(atomic_ullong **)(a1 + 8);
  v7[0] = *(SDPModel **)a1;
  v7[1] = (SDPModel *)v2;
  if (v2) {
    atomic_fetch_add_explicit(v2 + 1, 1uLL, memory_order_relaxed);
  }
  SDPSettingsBuilder::connectionForMedia(a2, v7, (uint64_t)&v8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v2);
  }
  int v3 = BYTE8(v11);
  int v4 = (int)__p[0];
  *(void *)&long long v8 = &unk_1F20CB730;
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  return v3 && v4 == 2;
}

void sub_1C53B6EB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_SDPSettingsBuilder_cpp()
{
  return __cxa_atexit(MEMORY[0x1E4FBA210], &SDPSettingsBuilder::_username, &dword_1C51D1000);
}

uint64_t ImsListenSocket::ImsListenSocket(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5 = ImsSocket::ImsSocket(a1, a3);
  *(void *)uint64_t v5 = &unk_1F20C7F00;
  *(void *)(v5 + 80) = &unk_1F20C7F70;
  *(_DWORD *)(v5 + 88) = 0;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(void *)(v5 + 128) = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
    long long v8 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v6;
    *(void *)(a1 + 128) = v7;
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v6;
    *(void *)(a1 + 128) = 0;
  }
  return a1;
}

void ImsListenSocket::initialize(ImsResult *a1, void *a2, ImsSocket *this, dispatch_object_t *a4, uint64_t a5)
{
  long long v10 = (_DWORD *)a2[5];
  if (v10 && *v10 != -1) {
    (*(void (**)(void *))(*a2 + 8))(a2);
  }
  ImsSocket::setNoSigpipeOptionForSocket(this, (uint64_t)v23);
  ImsResult::~ImsResult((ImsResult *)v23);
  if (listen((int)this, 64))
  {
    *((void *)a1 + 8) = 0;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    int v11 = *__error();
    *(_OWORD *)((char *)a1 + 24) = 0u;
    *(_OWORD *)((char *)a1 + 40) = 0u;
    *(_OWORD *)((char *)a1 + 56) = 0u;
    *(void *)a1 = &unk_1F20B2680;
    *((void *)a1 + 1) = &_posixDomain;
    *((_DWORD *)a1 + 4) = v11;
    std::string::basic_string[abi:ne180100]<0>(v15, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v12 = ims::error((uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Couldn't listen on socket: ", 27);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(ImsResult *, uint64_t))(*(void *)a1 + 16))(a1, v12);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v15[0]);
    }
    close((int)this);
  }
  else if (ImsSocket::_createSocketWithDispatch((uint64_t)a2, (int)this, a4, a5, 1))
  {
    *(_OWORD *)((char *)a1 + 24) = 0u;
    *(_OWORD *)((char *)a1 + 40) = 0u;
    *(_OWORD *)((char *)a1 + 56) = 0u;
    *(void *)a1 = &unk_1F20B2680;
    *((void *)a1 + 1) = &_bambiDomain;
    *((_DWORD *)a1 + 4) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v13 = ims::error((uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Unable to create CFSocket", 25);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v15[0]);
    }
    close((int)this);
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    v15[0] = &unk_1F20B2680;
    v15[1] = &_bambiDomain;
    int v16 = 0x40000000;
    BOOL v14 = (const std::string *)ImsResult::operator<<<char [40]>((uint64_t)v15, "Unable to create CFSocket for listening");
    ImsResult::ImsResult(a1, v14);
    ImsResult::~ImsResult((ImsResult *)v15);
  }
}

void sub_1C53B72D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsListenSocket::socketReadCallback(ImsListenSocket *this)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)std::string v27 = 0u;
  long long v28 = 0u;
  socklen_t v26 = 128;
  v27[0] = -1;
  v27[0] = accept(**((_DWORD **)this + 5), (sockaddr *)&v27[2], &v26);
  if (v27[0] >= 1)
  {
    uint64_t v24 = 0;
    std::string v25 = 0;
    IpAddress::createAddress((IpAddress *)&v27[2], (uint64_t)&v24);
    uint64_t v2 = v24;
    if (v24)
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "net");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v3 = ims::debug((uint64_t)v22, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Accepted incoming connection from ", 34);
      *(unsigned char *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, v3);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v3 + 17) = 0;
      if (v21 < 0) {
        operator delete(__p);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      int v4 = *((_DWORD *)this + 22);
      int v5 = *((_DWORD *)this + 17);
      uint64_t v6 = (std::__shared_weak_count *)operator new(0xC8uLL);
      v6->__shared_owners_ = 0;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3D70;
      v22[0] = 0;
      v22[1] = 0;
      ImsTcpSocket::ImsTcpSocket((uint64_t)&v6[1], (uint64_t *)v22, v4, v5);
      std::string __p = &v6[1];
      long long v20 = v6;
      std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&__p, &v6[1].__shared_owners_, (uint64_t)&v6[1]);
      uint64_t v7 = v20;
      if (__p) {
        long long v8 = (char *)__p + 80;
      }
      else {
        long long v8 = 0;
      }
      uint64_t v9 = v27[0];
      v17[0] = &unk_1F20B3050;
      v17[1] = 0;
      std::string::basic_string[abi:ne180100]<0>(v22, "");
      (*(void (**)(void **__return_ptr, char *, uint64_t, uint64_t *, char *, char *, void, void *, void **))(*(void *)v8 + 112))(v18, v8, v9, &v24, (char *)this + 56, (char *)this + 96, 0, v17, v22);
      ImsResult::~ImsResult((ImsResult *)v18);
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      ims::CFType::~CFType((ims::CFType *)v17);
      long long v10 = (std::__shared_weak_count *)*((void *)this + 16);
      if (v10)
      {
        int v11 = std::__shared_weak_count::lock(v10);
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = *((void *)this + 15);
          if (v13)
          {
            uint64_t v15 = v8;
            int v16 = v7;
            if (v7) {
              atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, char **))(*(void *)v13 + 16))(v13, &v15);
            if (v16) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "net");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v14 = ims::error((uint64_t)v22, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"No valid remote IP address for ImsListenSocket ", 47);
      *(unsigned char *)(v14 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      if (v21 < 0) {
        operator delete(__p);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      close(v27[0]);
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
  }
}

void sub_1C53B7740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,std::__shared_weak_count *a35)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }
  _Unwind_Resume(a1);
}

void ImsListenSocket::initializeSocket(uint64_t a1@<X0>, uint64_t *a2@<X1>, dispatch_object_t *a3@<X2>, const std::string *a4@<X3>, uint64_t a5@<X7>, ImsResult *a6@<X8>, char a7)
{
  v24[0] = &unk_1F20B3050;
  v24[1] = 0;
  uint64_t v13 = *a2;
  uint64_t v12 = (std::__shared_weak_count *)a2[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (const sockaddr *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 72))(v13);
  *(_DWORD *)(a1 + 64) = v14->sa_family;
  std::string::operator=((std::string *)(a1 + 96), a4);
  uint64_t v15 = (int *)socket(*(_DWORD *)(a1 + 64), 1, 0);
  if ((v15 & 0x80000000) != 0)
  {
    *((void *)a6 + 8) = 0;
    *((_OWORD *)a6 + 2) = 0u;
    *((_OWORD *)a6 + 3) = 0u;
    *(_OWORD *)a6 = 0u;
    *((_OWORD *)a6 + 1) = 0u;
    int v19 = *__error();
    *(_OWORD *)((char *)a6 + 24) = 0u;
    *(_OWORD *)((char *)a6 + 40) = 0u;
    *(_OWORD *)((char *)a6 + 56) = 0u;
    *(void *)a6 = &unk_1F20B2680;
    *((void *)a6 + 1) = &_posixDomain;
    *((_DWORD *)a6 + 4) = v19;
    std::string::basic_string[abi:ne180100]<0>(v27, "net");
    std::string::basic_string[abi:ne180100]<0>(v32, "");
    uint64_t v20 = ims::error((uint64_t)v27, (uint64_t)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"ImsListenSocket: failed to create socket : ", 43);
    *(unsigned char *)(v20 + 17) = 0;
    (*(void (**)(ImsResult *, uint64_t))(*(void *)a6 + 16))(a6, v20);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v20 + 17) = 0;
    if (v33 < 0) {
      operator delete(v32[0]);
    }
    if (SBYTE7(v28) < 0) {
      operator delete(v27[0]);
    }
  }
  else
  {
    uint64_t v16 = *(unsigned __int8 *)(a5 + 23);
    if ((v16 & 0x80u) != 0) {
      uint64_t v16 = *(void *)(a5 + 8);
    }
    if (v16)
    {
      uint64_t v31 = 0;
      long long v29 = 0u;
      long long v30 = 0u;
      *(_OWORD *)std::string v27 = 0u;
      long long v28 = 0u;
      char v17 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 136))(v13);
      ImsSocket::bindSocketToInterface(v15, v17, a5, (uint64_t)v27);
      if ((*(unsigned int (**)(void *, void))(*(void *)v27[1] + 24))(v27[1], v28))
      {
        std::string::basic_string[abi:ne180100]<0>(v32, "net");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v18 = ims::error((uint64_t)v32, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Unable to bind socket to interface: ", 36);
        *(unsigned char *)(v18 + 17) = 0;
        (*((void (**)(void **, uint64_t))v27[0] + 2))(v27, v18);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v18 + 17) = 0;
        if (v26 < 0) {
          operator delete(__p[0]);
        }
        if (v33 < 0) {
          operator delete(v32[0]);
        }
      }
      ImsResult::~ImsResult((ImsResult *)v27);
    }
    if (a7)
    {
      ImsSocket::setReusePortOptionForSocket((ImsSocket *)v15, (uint64_t)v27);
      ImsResult::~ImsResult((ImsResult *)v27);
    }
    if (bind((int)v15, v14, v14->sa_len) < 0)
    {
      *((void *)a6 + 8) = 0;
      *((_OWORD *)a6 + 2) = 0u;
      *((_OWORD *)a6 + 3) = 0u;
      *(_OWORD *)a6 = 0u;
      *((_OWORD *)a6 + 1) = 0u;
      int v21 = *__error();
      *(_OWORD *)((char *)a6 + 24) = 0u;
      *(_OWORD *)((char *)a6 + 40) = 0u;
      *(_OWORD *)((char *)a6 + 56) = 0u;
      *(void *)a6 = &unk_1F20B2680;
      *((void *)a6 + 1) = &_posixDomain;
      *((_DWORD *)a6 + 4) = v21;
      std::string::basic_string[abi:ne180100]<0>(v32, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v22 = ims::error((uint64_t)v32, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Couldn't bind listen socket to ", 31);
      *(unsigned char *)(v22 + 17) = 0;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 40))(v13, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v23 + 17) = 0;
      (*(void (**)(ImsResult *, uint64_t))(*(void *)a6 + 16))(a6, v23);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v23 + 17) = 0;
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      close((int)v15);
    }
    else
    {
      ImsListenSocket::initialize(a6, (void *)a1, (ImsSocket *)v15, a3, (uint64_t)a4);
    }
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  ims::CFType::~CFType((ims::CFType *)v24);
}

void sub_1C53B7D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v24 - 81) < 0) {
    operator delete(*(void **)(v24 - 104));
  }
  ImsResult::~ImsResult((ImsResult *)&a18);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  ims::CFType::~CFType((ims::CFType *)&a10);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ImsListenSocket::initializeSocket(uint64_t a1@<X0>, uint64_t *a2@<X1>, dispatch_object_t *a3@<X2>, const std::string *a4@<X3>, uint64_t a5@<X7>, ImsResult *a6@<X8>, char a7)
{
}

void ImsListenSocket::initializeSocket(ImsSocket *this@<X1>, void *a2@<X0>, dispatch_object_t *a3@<X2>, uint64_t a4@<X3>, ImsResult *a5@<X8>)
{
}

void non-virtual thunk to'ImsListenSocket::initializeSocket(ImsSocket *this@<X1>, uint64_t a2@<X0>, dispatch_object_t *a3@<X2>, uint64_t a4@<X3>, ImsResult *a5@<X8>)
{
}

void ImsListenSocket::setDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = v3;
  *(void *)(a1 + 128) = v2;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void non-virtual thunk to'ImsListenSocket::setDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v2;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t ImsListenSocket::setMaxSegmentSizeForSocket(uint64_t this, int a2)
{
  *(_DWORD *)(this + 88) = a2;
  return this;
}

uint64_t non-virtual thunk to'ImsListenSocket::setMaxSegmentSizeForSocket(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t ImsListenSocket::socketLocalAddress@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t non-virtual thunk to'ImsListenSocket::socketLocalAddress@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this - 48);
  *a2 = *(void *)(this - 56);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t ImsListenSocket::closeSocket(ImsListenSocket *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(uint64_t (**)(ImsListenSocket *))(*(void *)this + 8);
  return v3(this);
}

uint64_t non-virtual thunk to'ImsListenSocket::closeSocket(ImsListenSocket *this)
{
  return ImsListenSocket::closeSocket((ImsListenSocket *)((char *)this - 80));
}

void ImsListenSocket::~ImsListenSocket(ImsListenSocket *this)
{
  ImsListenSocket::~ImsListenSocket(this);
  JUMPOUT(0x1C878E320);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20C7F00;
  *((void *)this + 10) = &unk_1F20C7F70;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  ImsSocket::~ImsSocket(this);
}

void ImsListenSocket::resetSocketDelegate(ImsListenSocket *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void non-virtual thunk to'ImsListenSocket::~ImsListenSocket(ImsListenSocket *this)
{
}

{
  uint64_t vars8;

  ImsListenSocket::~ImsListenSocket((ImsListenSocket *)((char *)this - 80));
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'ImsListenSocket::resetSocketDelegate(ImsListenSocket *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

ImsOutStream *RTCPXRReceiverReferenceTimeReport::toStream(RTCPXRReceiverReferenceTimeReport *this, ImsOutStream *a2)
{
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  return a2;
}

uint64_t bambi::XmlParserItem::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  if (result)
  {
    uint64_t v7 = result;
    bambi::XmlParser::parseNode(result, a3, a1);
    long long v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 56);
    return v8(v7, a2);
  }
  return result;
}

void bambi::XmlParser::parseNode(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v20 = 0;
    int v21 = 0;
    uint64_t v22 = 0;
    int v5 = *(void **)(v3 + 72);
    if (a3)
    {
      if (v5 && v5[3])
      {
        std::string::basic_string[abi:ne180100]<0>(&v23, "");
        std::string::basic_string[abi:ne180100]<0>(&v19, *(char **)(*(void *)(v3 + 72) + 24));
        bambi::XmlParserNamespace::XmlParserNamespace((uint64_t)&v16, &v23, &v19);
        std::vector<bambi::XmlParserNamespace>::push_back[abi:ne180100](&v20, (long long *)&v16);
        if (v18 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v16.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      for (; v5; int v5 = (void *)*v5)
      {
        memset(&v23, 0, sizeof(v23));
        memset(&v19, 0, sizeof(v19));
        uint64_t v7 = (const std::string::value_type *)v5[2];
        if (v7) {
          std::string::__assign_external(&v23, v7);
        }
        long long v8 = (const std::string::value_type *)v5[3];
        if (v8) {
          std::string::__assign_external(&v19, v8);
        }
        std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v23.__r_.__value_.__l.__size_;
        }
        if (size) {
          goto LABEL_28;
        }
        std::string::size_type v10 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        char v11 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v10 = v19.__r_.__value_.__l.__size_;
        }
        if (v10)
        {
LABEL_28:
          bambi::XmlParserNamespace::XmlParserNamespace((uint64_t)&v16, &v23, &v19);
          std::vector<bambi::XmlParserNamespace>::push_back[abi:ne180100](&v20, (long long *)&v16);
          if (v18 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
          char v11 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        }
        if (v11 < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v20 != v21) {
      (*(void (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v20);
    }
    for (uint64_t i = *(void *)(v3 + 88); i; uint64_t i = *(void *)(i + 48))
    {
      if (*(void *)(i + 16))
      {
        uint64_t v13 = *(void *)(i + 24);
        if (v13)
        {
          if (*(void *)(v13 + 80))
          {
            memset(&v16, 0, sizeof(v16));
            std::string::basic_string[abi:ne180100]<0>(&v16, *(char **)(i + 16));
            memset(&v23, 0, sizeof(v23));
            std::string::basic_string[abi:ne180100]<0>(&v23, *(char **)(*(void *)(i + 24) + 80));
            (*(void (**)(uint64_t, std::string *, std::string *))(*(void *)a1 + 32))(a1, &v16, &v23);
            if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v23.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v16.__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }
    memset(&v16, 0, sizeof(v16));
    memset(&v23, 0, sizeof(v23));
    if (*(_DWORD *)(v3 + 8) == 3)
    {
      std::string::__assign_external(&v23, *(const std::string::value_type **)(v3 + 80));
      std::string::__assign_external(&v16, *(const std::string::value_type **)(v3 + 16));
      (*(void (**)(uint64_t, std::string *, std::string *))(*(void *)a1 + 24))(a1, &v16, &v23);
    }
    for (std::string::size_type j = *(void *)(v3 + 24); j; std::string::size_type j = *(void *)(j + 48))
    {
      int v15 = *(_DWORD *)(j + 8);
      if (v15 == 3)
      {
        std::string::__assign_external(&v23, *(const std::string::value_type **)(j + 80));
        std::string::__assign_external(&v16, *(const std::string::value_type **)(v3 + 16));
        (*(void (**)(uint64_t, std::string *, std::string *))(*(void *)a1 + 24))(a1, &v16, &v23);
      }
      else if (v15 == 1)
      {
        std::string::__assign_external(&v16, *(const std::string::value_type **)(j + 16));
        v19.__r_.__value_.__r.__words[0] = j;
        (*(void (**)(uint64_t, std::string *, std::string *))(*(void *)a1 + 64))(a1, &v16, &v19);
      }
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
    std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "bambi.xml");
    std::string::basic_string[abi:ne180100]<0>(&v23, "");
    uint64_t v6 = ims::error((uint64_t)&v16, (uint64_t)&v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"NULL parser node", 16);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C53B8654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  ims::AccessNetwork::~AccessNetwork(&a10);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  *(void *)(v25 - 56) = &a25;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 56));
  _Unwind_Resume(a1);
}

void bambi::XmlParserItem::parseSimpleTextChild(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v4[0] = &unk_1F20C8040;
  v4[1] = a4;
  bambi::XmlParser::parseNode((uint64_t)v4, a3, a1);
}

void bambi::XmlParserItem::parseSimpleUintChild(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v4[0] = &unk_1F20C80C8;
  v4[1] = a4;
  bambi::XmlParser::parseNode((uint64_t)v4, a3, a1);
}

void bambi::XmlParserItem::parseSimpleUriChild(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v4[0] = &unk_1F20C8150;
  v4[1] = a4;
  bambi::XmlParser::parseNode((uint64_t)v4, a3, a1);
}

void bambi::XmlParserTextItem::setText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 8))
  {
    memset(&__p, 0, sizeof(__p));
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __p = *(std::string *)a3;
    }
    ims::chomp(&__p, "\r\n\t ", 3);
    std::string::operator=(*(std::string **)(a1 + 8), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C53B88AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t bambi::XmlParserUintItem::setText(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(result + 8))
  {
    unint64_t v3 = result;
    if (*(char *)(a3 + 23) >= 0) {
      int v4 = (const char *)a3;
    }
    else {
      int v4 = *(const char **)a3;
    }
    uint64_t result = strtoul(v4, 0, 10);
    **(_DWORD **)(v3 + 8) = result;
  }
  return result;
}

uint64_t bambi::XmlParserUriItem::setText(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return SipUri::fromString(result, a3);
  }
  return result;
}

void std::vector<bambi::XmlParserNamespace>::push_back[abi:ne180100](void **a1, long long *a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>>(v4, v14);
    }
    else {
      int v15 = 0;
    }
    std::string v16 = &v15[48 * v11];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    std::string v19 = (char *)*a1;
    uint64_t v20 = (char *)a1[1];
    if (v20 == *a1)
    {
      std::string::size_type v10 = v16 + 48;
      *a1 = v16;
      a1[1] = v16 + 48;
      a1[2] = &v15[48 * v14];
    }
    else
    {
      int v21 = &v15[48 * v11];
      do
      {
        long long v22 = *((_OWORD *)v20 - 3);
        *((void *)v21 - 4) = *((void *)v20 - 4);
        *((_OWORD *)v21 - 3) = v22;
        *((void *)v20 - 5) = 0;
        *((void *)v20 - 4) = 0;
        *((void *)v20 - 6) = 0;
        long long v23 = *(_OWORD *)(v20 - 24);
        *((void *)v21 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v21 - 24) = v23;
        v21 -= 48;
        *((void *)v20 - 2) = 0;
        *((void *)v20 - 1) = 0;
        *((void *)v20 - 3) = 0;
        v20 -= 48;
      }
      while (v20 != v19);
      uint64_t v20 = (char *)*a1;
      uint64_t v24 = (uint64_t)a1[1];
      std::string::size_type v10 = v16 + 48;
      *a1 = v21;
      a1[1] = v16 + 48;
      a1[2] = &v15[48 * v14];
      while ((char *)v24 != v20)
      {
        v24 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v24);
      }
    }
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    std::string::size_type v10 = (char *)(v7 + 48);
  }
  a1[1] = v10;
}

uint64_t bambi::XmlParser::parseXml(bambi::XmlParser *this, const char *a2, uint64_t a3, bambi::XmlParserItem *a4)
{
  if (!a3) {
    return 0;
  }
  Memory = xmlReadMemory((const char *)this, (int)a2, "", 0, 1);
  if (!Memory)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v19 = 0;
    std::string::basic_string[abi:ne180100](__p, this, (size_t)a2);
    std::string::basic_string[abi:ne180100]<0>(v16, "bambi.xml");
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    uint64_t v12 = ims::error((uint64_t)v16, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Unable to parse xml:", 20);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v16, "bambi.xml");
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    unint64_t v13 = (unsigned char *)ims::error((uint64_t)v16, (uint64_t)v14);
    (*(void (**)(unsigned char *, void **))(*(void *)v13 + 32))(v13, __p);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v13[17] = 0;
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  long long v8 = (xmlDoc *)Memory;
  xmlNodePtr RootElement = xmlDocGetRootElement(Memory);
  if (RootElement)
  {
    xmlNodePtr v10 = RootElement;
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)RootElement->name);
    (*(void (**)(uint64_t, void **))(*(void *)a3 + 16))(a3, __p);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v10;
    bambi::XmlParser::parseNode(a3, (uint64_t *)__p, 0);
  }
  xmlFreeDoc(v8);
  return 1;
}

void sub_1C53B8D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t bambi::XmlParser::parseXml(bambi::XmlParser *a1, uint64_t a2, uint64_t a3, bambi::XmlParserItem *a4)
{
  if (*((char *)a1 + 23) < 0)
  {
    int v5 = (const char *)*((void *)a1 + 1);
    if (v5)
    {
      a1 = *(bambi::XmlParser **)a1;
      return bambi::XmlParser::parseXml(a1, v5, a2, a4);
    }
  }
  else
  {
    int v5 = (const char *)*((unsigned __int8 *)a1 + 23);
    if (*((unsigned char *)a1 + 23)) {
      return bambi::XmlParser::parseXml(a1, v5, a2, a4);
    }
  }
  return 1;
}

void bambi::XmlParserItem::~XmlParserItem(bambi::XmlParserItem *this)
{
}

void bambi::XmlParserTextItem::~XmlParserTextItem(bambi::XmlParserTextItem *this)
{
}

void bambi::XmlParserUintItem::~XmlParserUintItem(bambi::XmlParserUintItem *this)
{
}

void bambi::XmlParserUriItem::~XmlParserUriItem(bambi::XmlParserUriItem *this)
{
}

uint64_t bambi::XmlParserNamespace::XmlParserNamespace(uint64_t a1, const std::string *a2, const std::string *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  int v5 = (std::string *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  std::string::operator=((std::string *)a1, a2);
  std::string::operator=(v5, a3);
  return a1;
}

void sub_1C53B8E6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::value_type *__x)
{
  uint64_t i = (unsigned int *)__position.__i_;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  long long v8 = value;
  if (end >= value)
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    unint64_t v15 = end - this->__begin_ + 1;
    if (v15 >> 62) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = __position.__i_ - begin;
    uint64_t v17 = (char *)v8 - (char *)begin;
    if (v17 >> 1 > v15) {
      unint64_t v15 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)p_end_cap;
    if (v18) {
      uint64_t v19 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)p_end_cap, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    __v.__first_ = v19;
    __v.__begin_ = &v19[v16];
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v19[v18];
    std::__split_buffer<unsigned int>::push_back(&__v, __x);
    uint64_t i = std::vector<unsigned int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
    }
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<unsigned int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    std::__wrap_iter<const unsigned int *>::iterator_type v10 = __position.__i_ + 1;
    unint64_t v11 = end - 1;
    uint64_t v12 = (unsigned int *)end;
    while (v11 < end)
    {
      unsigned int v13 = *v11++;
      *v12++ = v13;
    }
    this->__end_ = v12;
    if (end != v10) {
      memmove((void *)&end[-(end - v10)], __position.__i_, (char *)end - (char *)v10);
    }
    *uint64_t i = *__x;
  }
  return (std::vector<unsigned int>::iterator)i;
}

void sub_1C53B9004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C53B909C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::__split_buffer<unsigned int>::push_back(std::__split_buffer<unsigned int> *this, std::__split_buffer<unsigned int>::value_type *__x)
{
  std::__split_buffer<unsigned int>::pointer end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    std::__split_buffer<unsigned int>::pointer begin = this->__begin_;
    uint64_t v6 = (char *)begin - (char *)this->__first_;
    if (begin <= this->__first_)
    {
      if (end == this->__first_) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = ((char *)end - (char *)this->__first_) >> 1;
      }
      uint64_t v17 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)this->__end_cap_.__value_, v16);
      uint64_t v19 = (unsigned int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
      std::__split_buffer<unsigned int>::pointer v20 = this->__begin_;
      std::__split_buffer<unsigned int>::pointer end = v19;
      uint64_t v21 = (char *)this->__end_ - (char *)v20;
      if (v21)
      {
        std::__split_buffer<unsigned int>::pointer end = (unsigned int *)((char *)v19 + (v21 & 0xFFFFFFFFFFFFFFFCLL));
        uint64_t v22 = 4 * (v21 >> 2);
        long long v23 = (unsigned int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
        do
        {
          int v24 = *v20++;
          *v23++ = v24;
          v22 -= 4;
        }
        while (v22);
      }
      std::__split_buffer<unsigned int>::pointer first = this->__first_;
      this->__first_ = v17;
      this->__begin_ = v19;
      this->__end_ = end;
      this->__end_cap_.__value_ = &v17[v18];
      if (first)
      {
        operator delete(first);
        std::__split_buffer<unsigned int>::pointer end = this->__end_;
      }
    }
    else
    {
      uint64_t v7 = v6 >> 2;
      BOOL v8 = v6 >> 2 < -1;
      uint64_t v9 = (v6 >> 2) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      unsigned int v13 = &begin[-v12];
      int64_t v14 = (char *)end - (char *)begin;
      if (end != begin)
      {
        memmove(&begin[-v12], begin, (char *)end - (char *)begin);
        std::__split_buffer<unsigned int>::pointer end = this->__begin_;
      }
      unint64_t v15 = &end[v11];
      std::__split_buffer<unsigned int>::pointer end = (unsigned int *)((char *)v13 + v14);
      this->__begin_ = v15;
    }
  }
  const unsigned int *end = *__x;
  this->__end_ = end + 1;
}

void SipMaxForwardsHeader::~SipMaxForwardsHeader(void **this)
{
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipMaxForwardsHeader::clone(SipMaxForwardsHeader *this)
{
}

void sub_1C53B92B8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C401DA35BB1);
  _Unwind_Resume(a1);
}

void *SDPMediaDirection::key@<X0>(SDPMediaDirection *this@<X0>, void *a2@<X8>)
{
  return ims::toString<MediaDirection>((unsigned int *)this + 10, a2);
}

void SDPMediaDirection::~SDPMediaDirection(void **this)
{
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x1C878E320);
}

void SDPMediaDirection::value(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void ims::analytics::AnalyticsEvent::send(ims::analytics::AnalyticsEvent *this)
{
  xpc_object_t v15 = 0;
  (*(void (**)(xpc_object_t *__return_ptr))(*(void *)this + 16))(&v15);
  uint64_t v14 = 0;
  long long v12 = 0u;
  memset(v13, 0, sizeof(v13));
  *(_OWORD *)uint64_t v10 = 0u;
  long long v11 = 0u;
  memset(v9, 0, sizeof(v9));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"com.apple.Telephony.", 20);
  (*(void (**)(void **__return_ptr, ims::analytics::AnalyticsEvent *))(*(void *)this + 24))(__p, this);
  if ((v8 & 0x80u) == 0) {
    unint64_t v3 = __p;
  }
  else {
    unint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_11, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_11))
  {
    ims::analytics::AnalyticsSender::create(&qword_1EBBDC080);
    __cxa_atexit((void (*)(void *))std::shared_ptr<ims::analytics::AnalyticsSender>::~shared_ptr[abi:ne180100], &qword_1EBBDC080, &dword_1C51D1000);
    __cxa_guard_release(&_MergedGlobals_11);
  }
  uint64_t v5 = qword_1EBBDC080;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v9 + 8, __p);
  xpc_object_t object = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, void **, xpc_object_t *))(*(void *)v5 + 16))(v5, __p, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  *(void *)&v9[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v9 + *(void *)(*(void *)&v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v9[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C878E270](v13);
  xpc_release(v15);
}

void sub_1C53B9678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  __cxa_guard_abort(&_MergedGlobals_11);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  xpc_release(*(xpc_object_t *)(v16 - 48));
  _Unwind_Resume(a1);
}

void sub_1C53B96EC()
{
}

uint64_t std::shared_ptr<ims::analytics::AnalyticsSender>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void SipSessionExpiresHeader::~SipSessionExpiresHeader(SipSessionExpiresHeader *this)
{
  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipSessionExpiresHeader::clone(SipSessionExpiresHeader *this)
{
}

void sub_1C53B98A0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40C8D300F0);
  _Unwind_Resume(a1);
}

uint64_t NetworkInterface::NetworkInterface(uint64_t a1, const std::string *a2)
{
  *(void *)a1 = &unk_1F20C8408;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::string::operator=((std::string *)(a1 + 32), a2);
  *(_DWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_1C53B9938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void NetworkInterface::NetworkInterface(NetworkInterface *this, const NetworkInterface *a2)
{
  *(void *)this = &unk_1F20C8408;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  std::string::operator=((std::string *)((char *)this + 32), (const std::string *)((char *)a2 + 32));
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 2);
  while (v6 != v5)
  {
    (*(void (**)(long long *__return_ptr))(**(void **)v6 + 32))(&v7);
    std::vector<std::shared_ptr<IpAddress>>::push_back[abi:ne180100](v4, &v7);
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
    v6 += 16;
  }
}

void sub_1C53B9A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v4 + 55) < 0) {
    operator delete(*v5);
  }
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void NetworkInterface::~NetworkInterface(void **this)
{
  *this = &unk_1F20C8408;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  uint64_t v2 = this + 1;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  uint64_t vars8;

  NetworkInterface::~NetworkInterface(this);
  JUMPOUT(0x1C878E320);
}

BOOL NetworkInterface::matchAddress(uint64_t a1, void *a2, int a3, char a4)
{
  std::string::basic_string[abi:ne180100]<0>(v12, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"matchAddress (", 14);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 40))(*a2, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": addressTypeMask=", 18);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(void))(*(void *)*a2 + 136))();
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)", FlavorMask=", 13);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" for (addressTypeMask=", 22);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)", addressFlavorMask=", 20);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return ((*(unsigned int (**)(void))(*(void *)*a2 + 136))() & a3) != 0
      && ((a4 & 2) != 0 || ((*(uint64_t (**)(void))(*(void *)*a2 + 112))() & 1) == 0)
      && ((a4 & 4) != 0 || ((*(uint64_t (**)(void))(*(void *)*a2 + 160))() & 1) == 0)
      && ((a4 & 0x10) != 0 || ((*(uint64_t (**)(void))(*(void *)*a2 + 176))() & 1) == 0)
      && ((a4 & 0x20) != 0 || ((*(uint64_t (**)(void))(*(void *)*a2 + 184))() & 1) == 0)
      && ((a4 & 8) != 0 || ((*(uint64_t (**)(void))(*(void *)*a2 + 168))() & 1) == 0);
}

void sub_1C53B9E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL NetworkInterface::allAddresses(unint64_t *a1, unint64_t *a2, int a3, char a4)
{
  unint64_t v5 = a1[1];
  for (unint64_t i = a1[2]; v5 != i; v5 += 16)
  {
    uint64_t v9 = *(std::__shared_weak_count **)(v5 + 8);
    v12[0] = *(void *)v5;
    v12[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(a1) = NetworkInterface::matchAddress((uint64_t)a1, v12, a3, a4);
    int v10 = (int)a1;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (v10) {
      a1 = std::vector<std::shared_ptr<IpAddress> const,std::allocator<std::shared_ptr<IpAddress> const>>::push_back[abi:ne180100](a2, (long long *)v5);
    }
  }
  return *a2 != a2[1];
}

void sub_1C53B9F40(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *std::vector<std::shared_ptr<IpAddress> const,std::allocator<std::shared_ptr<IpAddress> const>>::push_back[abi:ne180100](unint64_t *result, long long *a2)
{
  unint64_t v3 = result;
  unint64_t v4 = result[2];
  unint64_t v5 = (void *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *result;
    uint64_t v9 = (uint64_t)((uint64_t)v5 - *result) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    long long v23 = result + 2;
    if (v12 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    char v13 = (char *)operator new(16 * v12);
    uint64_t v14 = &v13[16 * v9];
    long long v15 = *a2;
    *(_OWORD *)uint64_t v14 = *a2;
    if (*((void *)&v15 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
      unint64_t v8 = *v3;
      unint64_t v5 = (void *)v3[1];
    }
    uint64_t v7 = v14 + 16;
    if (v5 == (void *)v8)
    {
      int64x2_t v18 = vdupq_n_s64(v8);
    }
    else
    {
      do
      {
        uint64_t v16 = *(v5 - 2);
        v5 -= 2;
        *((void *)v14 - 2) = v16;
        v14 -= 16;
        uint64_t v17 = v5[1];
        *((void *)v14 + 1) = v17;
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
      }
      while (v5 != (void *)v8);
      int64x2_t v18 = *(int64x2_t *)v3;
    }
    unint64_t *v3 = (unint64_t)v14;
    v3[1] = (unint64_t)v7;
    int64x2_t v21 = v18;
    unint64_t v19 = v3[2];
    void v3[2] = (unint64_t)&v13[16 * v12];
    unint64_t v22 = v19;
    uint64_t v20 = v18.i64[0];
    uint64_t result = (unint64_t *)std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&v20);
  }
  else
  {
    void *v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    v5[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = v5 + 2;
  }
  v3[1] = (unint64_t)v7;
  return result;
}

void NetworkInterface::firstAddress(NetworkInterface *this@<X0>, int a2@<W1>, char a3@<W2>, void *a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v21, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v21, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"firstAddress: remote(addressTypeMask=", 37);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)") for addressFlavorMask=", 24);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"...", 3);
  *(unsigned char *)(v8 + 17) = 0;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  unint64_t v10 = (void *)*((void *)this + 1);
  uint64_t v11 = (void *)*((void *)this + 2);
  if (v10 == v11)
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(v21, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::debug((uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"firstAddress: failed", 20);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    while (1)
    {
      unint64_t v12 = (std::__shared_weak_count *)v10[1];
      v18[0] = *v10;
      v18[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      LODWORD(v9) = NetworkInterface::matchAddress(v9, v18, a2, a3);
      int v13 = v9;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (v13) {
        break;
      }
      v10 += 2;
      if (v10 == v11) {
        goto LABEL_12;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v21, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v15 = ims::debug((uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"firstAddress: found local address ", 34);
    *(unsigned char *)(v15 + 17) = 0;
    uint64_t v16 = (unsigned char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v10 + 40))(*v10, v15);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v16[17] = 0;
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    uint64_t v17 = v10[1];
    *a4 = *v10;
    a4[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_1C53BA3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NetworkInterface::firstAddress(NetworkInterface *this@<X0>, int a2@<W1>, int **a3@<X2>, void *a4@<X8>)
{
  unint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 == v6)
  {
LABEL_6:
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    while (1)
    {
      int v9 = *v5;
      *a4 = 0;
      a4[1] = 0;
      NetworkInterface::firstAddress(this, a2, v9, a4);
      if (*a4) {
        break;
      }
      unint64_t v10 = (std::__shared_weak_count *)a4[1];
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      if (++v5 == v6) {
        goto LABEL_6;
      }
    }
  }
}

ImsOutStream *NetworkInterface::log(NetworkInterface *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Interface ", 10);
  *((unsigned char *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 32));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 14))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"mtu ", 4);
    *((unsigned char *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
  }
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  unint64_t v4 = (void *)*((void *)this + 1);
  for (unint64_t i = (void *)*((void *)this + 2); v4 != i; *((unsigned char *)a2 + 17) = 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  ", 2);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(void, ImsOutStream *))(*(void *)*v4 + 40))(*v4, a2);
    if ((*(unsigned int (**)(void))(*(void *)*v4 + 112))())
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" linklocal", 10);
      *((unsigned char *)a2 + 17) = 0;
    }
    if ((*(unsigned int (**)(void))(*(void *)*v4 + 168))())
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" deprecated", 11);
      *((unsigned char *)a2 + 17) = 0;
    }
    if ((*(unsigned int (**)(void))(*(void *)*v4 + 160))())
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" temporary", 10);
      *((unsigned char *)a2 + 17) = 0;
    }
    if ((*(unsigned int (**)(void))(*(void *)*v4 + 176))())
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" detached", 9);
      *((unsigned char *)a2 + 17) = 0;
    }
    if ((*(unsigned int (**)(void))(*(void *)*v4 + 184))())
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" not ready", 10);
      *((unsigned char *)a2 + 17) = 0;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": flavor mask = ", 16);
    *((unsigned char *)a2 + 17) = 0;
    v4 += 2;
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  return a2;
}

void sub_1C53BA814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *NetworkInterface::loggableName@<X0>(NetworkInterface *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 32));
}

void SipMultiStringHeader::SipMultiStringHeader(SipMultiStringHeader *this, const SipMultiStringHeader *a2)
{
  SipHeader::SipHeader(this, a2);
  void *v3 = &unk_1F20C8450;
  std::set<std::string>::set[abi:ne180100](v3 + 8, (uint64_t)a2 + 64);
}

void sub_1C53BA88C(_Unwind_Exception *a1)
{
  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

uint64_t SipMultiStringHeader::encodeValue(SipMultiStringHeader *this, ImsOutStream *a2)
{
  uint64_t v2 = (char *)*((void *)this + 8);
  unint64_t v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    do
    {
      if (v2 != *((char **)this + 8))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)",", 1);
        *((unsigned char *)a2 + 17) = 0;
      }
      (*(void (**)(ImsOutStream *, void *))(*(void *)a2 + 32))(a2, (void *)v2 + 4);
      uint64_t v6 = (char *)*((void *)v2 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (char *)*((void *)v2 + 2);
          BOOL v8 = *(void *)v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
  return 1;
}

uint64_t SipMultiStringHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  std::string::size_type v3 = 0;
  unint64_t v4 = (uint64_t **)(a1 + 64);
  memset(&__p, 0, sizeof(__p));
  while (1)
  {
    std::string::size_type v3 = ims::nextToken(a2, v3, &__p, 0x2Cu);
    if (v3 == -1) {
      break;
    }
    ims::chomp(&__p, "\r\n\t ", 3);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v4, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C53BAA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipMultiStringHeader::mergeHeader(SipMultiStringHeader *this, const SipHeader *lpsrc)
{
  unint64_t v4 = v3;
  if (v3) {
    SipMultiStringHeader::addValues<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)this, *((void ***)v3 + 8), (void **)v3 + 9);
  }
  return v4 != 0;
}

void SipMessageEncodingMap::SipMessageEncodingMap(SipMessageEncodingMap *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 1065353216;
  *((void *)this + 14) = 0;
  *((void *)this + 13) = (char *)this + 112;
  *((void *)this + 15) = 0;
  *((unsigned char *)this + 132) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((_WORD *)this + 64) = 256;
  *((unsigned char *)this + 130) = 0;
  operator new();
}

void sub_1C53BD724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  MEMORY[0x1C878E320](v23, 0x10B3C405772A826);
  std::string v27 = *(std::__shared_weak_count **)(v20 + 184);
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v22);
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(v21, *v25);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v20 + 64);
  long long v28 = *v24;
  if (*v24)
  {
    *(void *)(v20 + 48) = v28;
    operator delete(v28);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

void SipMessageEncodingMap::addHeaderPrototype(void *a1, uint64_t a2, uint64_t a3)
{
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string __p = *(std::string *)(a2 + 8);
  }
  ims::lowerCase((char *)&__p);
  ims::chomp(&__p, "\r\n\t ", 3);
  p_p = &__p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p)+ 5) = a2;
  uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  if (v6)
  {
    std::string::operator=((std::string *)(a2 + 32), (const std::string *)a3);
    p_p = (std::string *)a3;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, (long long **)&p_p)+ 5) = a2;
  }
  unint64_t v7 = a1[7];
  BOOL v8 = (void *)a1[6];
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = a1[5];
    uint64_t v11 = ((uint64_t)v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v7 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 7), v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = a2;
    int v9 = v16 + 8;
    unint64_t v19 = (char *)a1[5];
    int64x2_t v18 = (char *)a1[6];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      int64x2_t v18 = (char *)a1[5];
    }
    a1[5] = v16;
    a1[6] = v9;
    a1[7] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *BOOL v8 = a2;
    int v9 = v8 + 1;
  }
  a1[6] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C53BDFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipMessageEncodingMap::~SipMessageEncodingMap(std::__shared_weak_count **this)
{
  SipMessageEncodingMap::clearHeaderMap((SipMessageEncodingMap *)this);
  SipMessageEncodingMap::clearBodyMap((SipMessageEncodingMap *)this);
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy((uint64_t)(this + 13), this[14]);
  this[13] = (std::__shared_weak_count *)(this + 14);
  this[14] = 0;
  this[15] = 0;
  uint64_t v2 = this[23];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 17));
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy((uint64_t)(this + 13), this[14]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 8));
  std::string::size_type v3 = this[5];
  if (v3)
  {
    this[6] = v3;
    operator delete(v3);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this);
}

void SipMessageEncodingMap::clearHeaderMap(SipMessageEncodingMap *this)
{
  uint64_t v3 = *((void *)this + 5);
  uint64_t v2 = *((void *)this + 6);
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        uint64_t v3 = *((void *)this + 5);
        uint64_t v2 = *((void *)this + 6);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::clear((uint64_t)this);
  *((void *)this + 6) = *((void *)this + 5);
}

void SipMessageEncodingMap::clearBodyMap(SipMessageEncodingMap *this)
{
  for (unint64_t i = (void *)*((void *)this + 10); i; unint64_t i = (void *)*i)
  {
    uint64_t v3 = i[5];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::clear((uint64_t)this + 64);
}

uint64_t SipMessageEncodingMap::headerPrototypeWithName(void *a1, uint64_t a2)
{
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  ims::lowerCase((char *)&__p);
  ims::chomp(&__p, "\r\n\t ", 3);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(a1, (unsigned __int8 *)&__p);
  if (v3) {
    uint64_t v4 = *((void *)v3 + 5);
  }
  else {
    uint64_t v4 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1C53BE244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipMessageEncodingMap::addBodyPrototype(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 88);
  unint64_t v6 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 88, a2);
  int8x8_t v7 = *(int8x8_t *)(a1 + 72);
  if (v7)
  {
    unint64_t v8 = v6;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v6 >= *(void *)&v7) {
        unint64_t v11 = v6 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v11 = (*(void *)&v7 - 1) & v6;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)(a1 + 64) + 8 * v11);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 96, i + 16, (unsigned __int8 *)a2))
          {
            uint64_t v15 = *((void *)i + 5);
            if (v15) {
              (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
            }
            break;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= *(void *)&v7) {
              v14 %= *(void *)&v7;
            }
          }
          else
          {
            v14 &= *(void *)&v7 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  unint64_t v16 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v5, a2);
  unint64_t v17 = v16;
  unint64_t v18 = *(void *)(a1 + 72);
  if (!v18)
  {
    unint64_t v21 = 0;
    goto LABEL_37;
  }
  uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
  v19.i16[0] = vaddlv_u8(v19);
  unint64_t v20 = v19.u32[0];
  if (v19.u32[0] > 1uLL)
  {
    unint64_t v21 = v16;
    if (v16 >= v18) {
      unint64_t v21 = v16 % v18;
    }
  }
  else
  {
    unint64_t v21 = (v18 - 1) & v16;
  }
  uint64_t v22 = *(char ***)(*(void *)(a1 + 64) + 8 * v21);
  if (!v22 || (uint64_t v23 = *v22) == 0)
  {
LABEL_37:
    uint64_t v25 = (char *)operator new(0x30uLL);
    uint64_t v23 = v25;
    *(void *)uint64_t v25 = 0;
    *((void *)v25 + 1) = v17;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v25 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *((_OWORD *)v25 + 1) = *(_OWORD *)a2;
      *((void *)v25 + 4) = *(void *)(a2 + 16);
    }
    *((void *)v23 + 5) = 0;
    float v26 = (float)(unint64_t)(*(void *)(a1 + 88) + 1);
    float v27 = *(float *)(a1 + 96);
    if (v18 && (float)(v27 * (float)v18) >= v26)
    {
LABEL_86:
      uint64_t v44 = *(void *)(a1 + 64);
      uint64_t v45 = *(void **)(v44 + 8 * v21);
      if (v45)
      {
        *(void *)uint64_t v23 = *v45;
        uint64_t v47 = a3;
      }
      else
      {
        *(void *)uint64_t v23 = *(void *)(a1 + 80);
        *(void *)(a1 + 80) = v23;
        *(void *)(v44 + 8 * v21) = a1 + 80;
        uint64_t v47 = a3;
        if (!*(void *)v23)
        {
LABEL_95:
          ++*v5;
          goto LABEL_96;
        }
        unint64_t v46 = *(void *)(*(void *)v23 + 8);
        if ((v18 & (v18 - 1)) != 0)
        {
          if (v46 >= v18) {
            v46 %= v18;
          }
        }
        else
        {
          v46 &= v18 - 1;
        }
        uint64_t v45 = (void *)(*(void *)(a1 + 64) + 8 * v46);
      }
      *uint64_t v45 = v23;
      goto LABEL_95;
    }
    BOOL v28 = 1;
    if (v18 >= 3) {
      BOOL v28 = (v18 & (v18 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v18);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      int8x8_t prime = (int8x8_t)v30;
    }
    else {
      int8x8_t prime = (int8x8_t)v29;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v18 = *(void *)(a1 + 72);
    if (*(void *)&prime > v18) {
      goto LABEL_52;
    }
    if (*(void *)&prime < v18)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
      if (v18 < 3 || (uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v18), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (*(void *)&prime <= v38) {
        int8x8_t prime = (int8x8_t)v38;
      }
      if (*(void *)&prime >= v18)
      {
        unint64_t v18 = *(void *)(a1 + 72);
      }
      else
      {
        if (prime)
        {
LABEL_52:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v32 = operator new(8 * *(void *)&prime);
          char v33 = *(void **)(a1 + 64);
          *(void *)(a1 + 64) = v32;
          if (v33) {
            operator delete(v33);
          }
          uint64_t v34 = 0;
          *(int8x8_t *)(a1 + 72) = prime;
          do
            *(void *)(*(void *)(a1 + 64) + 8 * v34++) = 0;
          while (*(void *)&prime != v34);
          uint64_t v35 = *(void **)(a1 + 80);
          if (v35)
          {
            unint64_t v36 = v35[1];
            uint8x8_t v37 = (uint8x8_t)vcnt_s8(prime);
            v37.i16[0] = vaddlv_u8(v37);
            if (v37.u32[0] > 1uLL)
            {
              if (v36 >= *(void *)&prime) {
                v36 %= *(void *)&prime;
              }
            }
            else
            {
              v36 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 64) + 8 * v36) = a1 + 80;
            uint64_t v41 = (void *)*v35;
            if (*v35)
            {
              do
              {
                unint64_t v42 = v41[1];
                if (v37.u32[0] > 1uLL)
                {
                  if (v42 >= *(void *)&prime) {
                    v42 %= *(void *)&prime;
                  }
                }
                else
                {
                  v42 &= *(void *)&prime - 1;
                }
                if (v42 != v36)
                {
                  uint64_t v43 = *(void *)(a1 + 64);
                  if (!*(void *)(v43 + 8 * v42))
                  {
                    *(void *)(v43 + 8 * v42) = v35;
                    goto LABEL_77;
                  }
                  *uint64_t v35 = *v41;
                  *uint64_t v41 = **(void **)(*(void *)(a1 + 64) + 8 * v42);
                  **(void **)(*(void *)(a1 + 64) + 8 * v42) = v41;
                  uint64_t v41 = v35;
                }
                unint64_t v42 = v36;
LABEL_77:
                uint64_t v35 = v41;
                uint64_t v41 = (void *)*v41;
                unint64_t v36 = v42;
              }
              while (v41);
            }
          }
          unint64_t v18 = (unint64_t)prime;
          goto LABEL_81;
        }
        std::string v48 = *(void **)(a1 + 64);
        *(void *)(a1 + 64) = 0;
        if (v48) {
          operator delete(v48);
        }
        unint64_t v18 = 0;
        *(void *)(a1 + 72) = 0;
      }
    }
LABEL_81:
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v17 >= v18) {
        unint64_t v21 = v17 % v18;
      }
      else {
        unint64_t v21 = v17;
      }
    }
    else
    {
      unint64_t v21 = (v18 - 1) & v17;
    }
    goto LABEL_86;
  }
  while (1)
  {
    unint64_t v24 = *((void *)v23 + 1);
    if (v24 == v17) {
      break;
    }
    if (v20 > 1)
    {
      if (v24 >= v18) {
        v24 %= v18;
      }
    }
    else
    {
      v24 &= v18 - 1;
    }
    if (v24 != v21) {
      goto LABEL_37;
    }
LABEL_36:
    uint64_t v23 = *(char **)v23;
    if (!v23) {
      goto LABEL_37;
    }
  }
  if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 96, (unsigned __int8 *)v23 + 16, (unsigned __int8 *)a2) & 1) == 0)goto LABEL_36; {
  uint64_t v47 = a3;
  }
LABEL_96:
  *((void *)v23 + 5) = v47;
}

void sub_1C53BE79C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t SipMessageEncodingMap::createHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(&__str, 0, sizeof(__str));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __str = *(std::string *)a2;
  }
  ims::lowerCase((char *)&__str);
  ims::chomp(&__str, "\r\n\t ", 3);
  unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)a1, (unsigned __int8 *)&__str);
  if (!v6)
  {
    if (*(unsigned char *)(a1 + 130))
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v8 = ims::info((uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Decoding unknown header ", 24);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a3);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
    operator new();
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)v6 + 5) + 32))(*((void *)v6 + 5));
  uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  if (v9 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 72))(v7, a3) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::error((uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Unable to decode header: ", 25);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a3);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    uint64_t v7 = 0;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1C53BEBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipMessageEncodingMap::createBody(SipMessageEncodingMap *a1, const std::string *a2)
{
  uint64_t v11 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v6 = 0u;
  memset(v5, 0, sizeof(v5));
  SipStringParameterHeader::SipStringParameterHeader((uint64_t)v5, (const std::string *)"Content-Type", a2);
  *(void *)&v5[0] = &unk_1F20D2D10;
  BYTE8(v6) = 0;
  uint64_t Body = SipMessageEncodingMap::createBody(a1, (const SipContentTypeHeader *)v5);
  *(void *)&v5[0] = &unk_1F20C0A78;
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  *(void *)&v5[0] = &unk_1F20DEB80;
  *(void *)&long long v7 = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v7 + 8, (void *)v8);
  SipHeader::~SipHeader((void **)v5);
  return Body;
}

void sub_1C53BED50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t SipMessageEncodingMap::createBody(SipMessageEncodingMap *this, const SipContentTypeHeader *a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 8, (unsigned __int8 *)a2 + 104);
  if (!v3) {
    operator new();
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)v3 + 5) + 24))(*((void *)v3 + 5));
  if (((*(uint64_t (**)(uint64_t, const SipContentTypeHeader *))(*(void *)v4 + 16))(v4, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    return 0;
  }
  return v4;
}

void sub_1C53BEE44(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C403F48558ALL);
  _Unwind_Resume(a1);
}

void SipContentTypeHeader::~SipContentTypeHeader(void **this)
{
  *this = &unk_1F20C0A78;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20C0A78;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipMessageEncodingMap::initializeResponseFromTemplate(SipMessageEncodingMap *this, SipResponse *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    long long v6 = v5;
    uint64_t v7 = *((void *)this + 22);
    if (v7)
    {
      BOOL isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v7 + 3160));
      LODWORD(v7) = *(unsigned char *)(v7 + 176) != 0;
    }
    else
    {
      BOOL isWifi = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    BOOL isWifi = 0;
    LODWORD(v7) = 0;
  }
  SipMessageEncodingMap::initializeResponseFromTemplate(this, a2, isWifi, v7);
  return 1;
}

uint64_t SipMessageEncodingMap::initializeResponseFromTemplate(SipMessageEncodingMap *this, SipResponse *a2, int a3, int a4)
{
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  long long v8 = (std::__shared_weak_count *)*((void *)this + 23);
  if (!v8)
  {
    int v11 = 0;
    uint64_t v10 = 0;
    uint64_t v9 = 0;
LABEL_10:
    int v12 = 3;
    goto LABEL_11;
  }
  uint64_t v9 = std::__shared_weak_count::lock(v8);
  if (!v9)
  {
    int v11 = 0;
    uint64_t v10 = 0;
    goto LABEL_10;
  }
  uint64_t v10 = *((void *)this + 22);
  if (!v10)
  {
    int v11 = 0;
    goto LABEL_10;
  }
  int v11 = 1;
  if (*(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(v10 + 144)) + 456)) {
    int v12 = 1;
  }
  else {
    int v12 = 2;
  }
LABEL_11:
  char v13 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a2);
  if (v13) {
    unint64_t v14 = (long long *)(v13 + 64);
  }
  else {
    unint64_t v14 = &ims::kEmptyString;
  }
  SipHeaderTemplateMap::matchingHeaderTemplates((uint64_t)this + 104, v14, *((_DWORD *)a2 + 22), a3, a4, v12, 0, &v24);
  uint64_t v15 = v24;
  uint64_t v16 = v25;
  while (v15 != v16)
  {
    if (v11)
    {
      uint64_t v17 = SipStack::prefs((SipStack *)v10);
      ImsPrefs::substituteRuntimeVars(v17, v15, (uint64_t)&v22);
      if (*(char *)(v15 + 23) < 0) {
        operator delete(*(void **)v15);
      }
      long long v18 = v22;
      *(void *)(v15 + 16) = v23;
      *(_OWORD *)uint64_t v15 = v18;
    }
    uint64_t v19 = SipMessageEncodingMap::decodeHeader((uint64_t)this, (std::string *)v15);
    unint64_t v20 = (SipHeader *)v19;
    if (v19)
    {
      SipMessage::removeHeadersWithName(a2, (unsigned __int8 *)(v19 + 8));
      SipMessage::addHeader(a2, v20, 0);
    }
    v15 += 24;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(void *)&long long v22 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  return 1;
}

void sub_1C53BF134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  a9 = (void **)&a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t SipMessageEncodingMap::decodeHeader(uint64_t a1, std::string *this)
{
  std::string::size_type v4 = std::string::find(this, 58, 0);
  if (v4 == -1) {
    return 0;
  }
  char v5 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  BOOL v6 = v5 < 0;
  long long v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  if (v5 >= 0) {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  std::string::size_type v9 = v4 + 1;
  if (!v6) {
    long long v8 = this;
  }
  if (size <= v9) {
    std::string::size_type v10 = v4 + 1;
  }
  else {
    std::string::size_type v10 = size;
  }
  while (v9 < size)
  {
    int v11 = v8->__r_.__value_.__s.__data_[v9++];
    if (v11 != 32)
    {
      std::string::size_type v10 = v9 - 1;
      break;
    }
  }
  std::string::basic_string(&v15, this, 0, v4, (std::allocator<char> *)&v14);
  std::string::basic_string(&v14, this, v10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v16);
  uint64_t Header = SipMessageEncodingMap::createHeader(a1, (uint64_t)&v15, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return Header;
}

void sub_1C53BF260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipMessageEncodingMap::initializeRequestFromTemplate(SipMessageEncodingMap *this, SipRequest *a2, int a3, int a4)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  long long v8 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v8)
  {
    std::string::size_type v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = *((void *)this + 22);
      if (v10)
      {
        int v11 = 1;
        if (*(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(v10 + 144)) + 456)) {
          int v12 = 1;
        }
        else {
          int v12 = 2;
        }
        goto LABEL_11;
      }
      int v11 = 0;
    }
    else
    {
      int v11 = 0;
      uint64_t v10 = 0;
    }
  }
  else
  {
    int v11 = 0;
    uint64_t v10 = 0;
    std::string::size_type v9 = 0;
  }
  int v12 = 3;
LABEL_11:
  char v13 = (long long *)(*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
  SipHeaderTemplateMap::matchingHeaderTemplates((uint64_t)this + 104, v13, 0, a3, a4, v12, 0, &v23);
  uint64_t v14 = v23;
  uint64_t v15 = v24;
  while (v14 != v15)
  {
    if (v11)
    {
      uint64_t v16 = SipStack::prefs((SipStack *)v10);
      ImsPrefs::substituteRuntimeVars(v16, v14, (uint64_t)&v21);
      if (*(char *)(v14 + 23) < 0) {
        operator delete(*(void **)v14);
      }
      long long v17 = v21;
      *(void *)(v14 + 16) = v22;
      *(_OWORD *)uint64_t v14 = v17;
    }
    uint64_t v18 = SipMessageEncodingMap::decodeHeader((uint64_t)this, (std::string *)v14);
    uint64_t v19 = (SipHeader *)v18;
    if (v18)
    {
      SipMessage::removeHeadersWithName(a2, (unsigned __int8 *)(v18 + 8));
      SipMessage::addHeader(a2, v19, 0);
    }
    v14 += 24;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(void *)&long long v21 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  return 1;
}

void sub_1C53BF42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  a9 = (void **)&a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void SipMessageEncodingMap::createRequestFromTemplate()
{
}

void sub_1C53BF4D8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C40979C6A35);
  _Unwind_Resume(a1);
}

void *SipMessageEncodingMap::copyHeadersFromRequestToResponse(void *this, const SipRequest *a2, SipResponse *a3, int a4)
{
  uint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 2);
  if (v5 != v4)
  {
    unint64_t v9 = 0;
    uint64_t v10 = this + 17;
    int v11 = (void *)((char *)a3 + 32);
    unsigned int v12 = 1;
    do
    {
      if (v9 >= (v5 - v4) >> 3) {
        char v13 = 0;
      }
      else {
        char v13 = *(unsigned __int8 **)(v4 + 8 * v9);
      }
      this = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v10, v13 + 8);
      if (this)
      {
        if (a4
          || ((*(uint64_t (**)(unsigned __int8 *))(*(void *)v13 + 88))(v13) & 1) != 0
          || (this = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(v11, v13 + 8)) == 0|| !this[5])
        {
          uint64_t v14 = (SipHeader *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v13 + 32))(v13);
          this = SipMessage::addHeader(a3, v14, 0);
        }
      }
      unint64_t v9 = v12;
      uint64_t v4 = *((void *)a2 + 1);
      uint64_t v5 = *((void *)a2 + 2);
      ++v12;
    }
    while (v9 < (v5 - v4) >> 3);
  }
  return this;
}

uint64_t SipMessageEncodingMap::initializeFromPrefs(SipMessageEncodingMap *this, const ImsPrefs *a2)
{
  uint64_t v3 = (char *)this + 112;
  uint64_t v4 = (uint64_t **)((char *)this + 104);
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy((uint64_t)this + 104, *((void **)this + 14));
  *((void *)v3 - 1) = v3;
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  AdditionalHeadersKey = (void **)ImsPrefs::getAdditionalHeadersKey(v5);
  SipHeaderTemplateMap::initializeFromPref(v4, a2, AdditionalHeadersKey);
  AllowIPv6UnicastAddressKey = (void **)ImsPrefs::getAllowIPv6UnicastAddressKey(v7);
  uint64_t result = ImsPrefs::BOOLValue(a2, AllowIPv6UnicastAddressKey);
  v3[19] = result;
  return result;
}

BOOL SipMessageEncodingMap::useLazuliTypes(SipMessageEncodingMap *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v2 && (uint64_t v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    uint64_t v4 = *((void *)this + 22);
    if (v4) {
      uint64_t v5 = (unsigned __int8 *)(v4 + 2681);
    }
    else {
      uint64_t v5 = (unsigned __int8 *)this + 132;
    }
    int v6 = *v5;
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  else
  {
    int v6 = *((unsigned __int8 *)this + 132);
  }
  return v6 != 0;
}

void SipConferenceInfoBody::~SipConferenceInfoBody(void **this)
{
  *this = &unk_1F20C8570;
  SipConferenceInfo::~SipConferenceInfo((SipConferenceInfo *)(this + 4));
  *this = &unk_1F20CC498;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C8570;
  SipConferenceInfo::~SipConferenceInfo((SipConferenceInfo *)(this + 4));
  *this = &unk_1F20CC498;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipConferenceInfoBody::clone(SipConferenceInfoBody *this)
{
}

void sub_1C53BF840(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C409E0D0F29);
  _Unwind_Resume(a1);
}

uint64_t *SipConferenceInfoBody::contentType(SipConferenceInfoBody *this)
{
  return &SipConferenceInfoBody::kContentType;
}

uint64_t SipConferenceInfoBody::rootItem(SipConferenceInfoBody *this)
{
  return (uint64_t)this + 32;
}

void *SipXmlBody::generateXml@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void SipConferenceInfo::~SipConferenceInfo(SipConferenceInfo *this)
{
  *(void *)this = &unk_1F20D8820;
  *((void *)this + 59) = &unk_1F20D88A8;
  if (*((char *)this + 535) < 0) {
    operator delete(*((void **)this + 64));
  }
  if (*((char *)this + 511) < 0) {
    operator delete(*((void **)this + 61));
  }
  SipConferenceUsers::~SipConferenceUsers((SipConferenceInfo *)((char *)this + 432));
  SipUri::~SipUri((SipConferenceInfo *)((char *)this + 8));
}

{
  uint64_t vars8;

  SipConferenceInfo::~SipConferenceInfo(this);
  JUMPOUT(0x1C878E320);
}

void SipRegistrationInfoBody::~SipRegistrationInfoBody(void **this)
{
  *this = &unk_1F20C8610;
  SipRegistrationInfo::~SipRegistrationInfo((SipRegistrationInfo *)(this + 4));
  *this = &unk_1F20CC498;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C8610;
  SipRegistrationInfo::~SipRegistrationInfo((SipRegistrationInfo *)(this + 4));
  *this = &unk_1F20CC498;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipRegistrationInfoBody::clone(SipRegistrationInfoBody *this)
{
}

void sub_1C53BFA60(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40FA8986FCLL);
  _Unwind_Resume(a1);
}

void *SipRegistrationInfoBody::contentType(SipRegistrationInfoBody *this)
{
  return &SipRegistrationInfoBody::kContentType;
}

uint64_t SipRegistrationInfoBody::rootItem(SipRegistrationInfoBody *this)
{
  return (uint64_t)this + 32;
}

void Sip3gppImsInfoBody::~Sip3gppImsInfoBody(void **this)
{
  *this = &unk_1F20C84E8;
  Sip3gppImsInfo::~Sip3gppImsInfo((Sip3gppImsInfo *)(this + 4));
  *this = &unk_1F20CC498;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C84E8;
  Sip3gppImsInfo::~Sip3gppImsInfo((Sip3gppImsInfo *)(this + 4));
  *this = &unk_1F20CC498;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void Sip3gppImsInfoBody::clone(Sip3gppImsInfoBody *this)
{
}

void sub_1C53BFBE0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40855A9725);
  _Unwind_Resume(a1);
}

void *Sip3gppImsInfoBody::contentType(Sip3gppImsInfoBody *this)
{
  return &Sip3gppImsInfoBody::kContentType;
}

uint64_t Sip3gppImsInfoBody::rootItem(Sip3gppImsInfoBody *this)
{
  return (uint64_t)this + 32;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v6 = (void *)(a1 + 24);
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (unint64_t i = *v13; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v25 = operator new(0x28uLL);
  *uint64_t v25 = 0;
  v25[1] = v8;
  uint64_t v16 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(void *)(a3 + 16);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v12);
  if (v23)
  {
    *uint64_t v25 = *v23;
    void *v23 = v25;
  }
  else
  {
    *uint64_t v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*v25)
    {
      unint64_t v24 = *(void *)(*v25 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9) {
          v24 %= v9;
        }
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v25;
    }
  }
  ++*v6;
}

void sub_1C53BFE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v10, v11);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  memset(v26, 0, sizeof(v26));
  std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v9, a4, v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v13);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v7;
  return i;
}

void sub_1C53C01A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  *a4 = 0;
  a4[2] = 0;
  a4[1] = 0;
  unint64_t v8 = a4 + 1;
  unint64_t v9 = operator new(0x30uLL);
  *a4 = v9;
  *unint64_t v8 = v7;
  *((unsigned char *)a4 + 16) = 0;
  void *v9 = 0;
  v9[1] = a2;
  unint64_t v10 = (std::string *)(v9 + 2);
  uint8x8_t v11 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *((void *)v11 + 1));
  }
  else
  {
    long long v12 = *v11;
    _OWORD v9[4] = *((void *)v11 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
  }
  void v9[5] = 0;
  *((unsigned char *)a4 + 16) = 1;
}

void sub_1C53C0268(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t SipUdpTransport::SipUdpTransport(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = (uint64_t)v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    SipTransport::SipTransport((void *)a1, v6, a3);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    SipTransport::SipTransport((void *)a1, v6, a3);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1F20C86B0;
  *(void *)(a1 + 32) = &unk_1F20C86F8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return a1;
}

void SipUdpTransport::~SipUdpTransport(SipUdpTransport *this)
{
  *(void *)this = &unk_1F20C86B0;
  *((void *)this + 4) = &unk_1F20C86F8;
  std::string::basic_string[abi:ne180100]<0>(&v19, "sip.tport");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v19, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"closing UDP transport", 21);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v19);
  }
  uint64_t v3 = *((void *)this + 7);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 112);
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 120);
    if (v5)
    {
      int v6 = std::__shared_weak_count::lock(v5);
      if (!v6 || (uint64_t v7 = *v4, std::__shared_weak_count::__release_shared[abi:ne180100](v6), !v7))
      {
        unint64_t v8 = *(std::__shared_weak_count **)(v3 + 120);
        *uint64_t v4 = 0;
        *(void *)(v3 + 120) = 0;
        if (v8) {
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    else
    {
      *uint64_t v4 = 0;
      *(void *)(v3 + 120) = 0;
    }
    if (*((void *)this + 9))
    {
      SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::delegateForRemoteAddress(*((void **)this + 7), &v19);
      if (!v20) {
        goto LABEL_21;
      }
      unint64_t v9 = std::__shared_weak_count::lock(v20);
      if (!v9)
      {
        if (v20) {
          std::__shared_weak_count::__release_weak(v20);
        }
LABEL_21:
        BOOL v19 = 0;
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        IpAddress::asString();
      }
      unint64_t v10 = v19;
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      if (v20) {
        std::__shared_weak_count::__release_weak(v20);
      }
      if (!v10) {
        goto LABEL_21;
      }
    }
  }
  uint8x8_t v11 = (std::__shared_weak_count *)*((void *)this + 8);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)this + 10);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    unint64_t v13 = (std::__shared_weak_count *)*((void *)this + 10);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  unint64_t v15 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  *(void *)this = &unk_1F20C1C30;
  unint64_t v16 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
}

{
  uint64_t vars8;

  SipUdpTransport::~SipUdpTransport(this);
  JUMPOUT(0x1C878E320);
}

void sub_1C53C05FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  __clang_call_terminate(a1);
}

void non-virtual thunk to'SipUdpTransport::~SipUdpTransport(SipUdpTransport *this)
{
}

{
  uint64_t vars8;

  SipUdpTransport::~SipUdpTransport((SipUdpTransport *)((char *)this - 32));
  JUMPOUT(0x1C878E320);
}

void SipUdpTransport::initialize(SipTransport *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6 = (std::__shared_weak_count *)*((void *)a1 + 6);
  if (!v6 || (v11 = *((void *)a1 + 5), (long long v12 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v13 = v12;
  uint64_t v14 = operator new(0xA8uLL);
  unint64_t v15 = v14;
  v14[1] = 0;
  void v14[2] = 0;
  void *v14 = &unk_1F20C8788;
  unint64_t v16 = v14 + 3;
  float v17 = (void *)(v11 + 32);
  if (!v11) {
    float v17 = 0;
  }
  std::string __p = v17;
  uint64_t v35 = v13;
  SipUdpSocketMultiplexer::SipUdpSocketMultiplexer(v14 + 3, (uint64_t *)&__p);
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  char v18 = (std::__shared_weak_count *)*((void *)a1 + 8);
  *((void *)a1 + 7) = v16;
  *((void *)a1 + 8) = v15;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  SipTransport::transportLayer(a1, &__p);
  if (__p)
  {
    SipTransport::transportLayer(a1, &object);
    (*((void (**)(uint64_t *__return_ptr))object->isa + 25))(&v43);
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  SipTransport::transportLayer(a1, &__p);
  if (__p)
  {
    SipTransport::transportLayer(a1, &v43);
    (*(void (**)(dispatch_object_t *__return_ptr))(*(void *)v43 + 176))(&object);
    BOOL v19 = object != 0;
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
  }
  else
  {
    BOOL v19 = 0;
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (!v19)
  {
    size_t v22 = 0;
    *(void *)(a5 + 64) = 0;
    long long v24 = 0uLL;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
LABEL_33:
    long long v38 = v24;
    long long v39 = v24;
    long long v40 = v24;
    std::string __p = &unk_1F20B2680;
    uint64_t v35 = (std::__shared_weak_count *)&_bambiDomain;
    int v36 = 0x40000000;
    uint64_t v26 = (const std::string *)ImsResult::operator<<<char [28]>((uint64_t)&__p, "NetworkManager un-available");
    ImsResult::ImsResult((ImsResult *)a5, v26);
    ImsResult::~ImsResult((ImsResult *)&__p);
    uint64_t v23 = 0;
    goto LABEL_40;
  }
  SipTransport::transportLayer(a1, &v43);
  (*(void (**)(dispatch_object_t *__return_ptr))(*(void *)v43 + 176))(&object);
  dispatch_object_t v20 = object;
  uint64_t v21 = (std::__shared_weak_count *)*((void *)a1 + 8);
  v41[2] = *((void *)a1 + 7);
  unint64_t v42 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*((void (**)(void **__return_ptr))v20->isa + 14))(&__p);
  uint64_t v23 = __p;
  size_t v22 = v35;
  std::string __p = 0;
  uint64_t v35 = 0;
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  *(void *)(a5 + 64) = 0;
  long long v24 = 0uLL;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  if (!v23) {
    goto LABEL_33;
  }
  uint64_t v25 = sImsDispatchQueue;
  if (sImsDispatchQueue)
  {
    dispatch_object_t object = (dispatch_object_t)sImsDispatchQueue;
LABEL_35:
    dispatch_retain(v25);
    goto LABEL_36;
  }
  uint64_t v25 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
  sImsDispatchQueue = (uint64_t)v25;
  dispatch_object_t object = v25;
  if (v25) {
    goto LABEL_35;
  }
LABEL_36:
  v41[0] = &unk_1F20B3050;
  v41[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  (*(void (**)(void *, uint64_t, dispatch_object_t *, uint64_t, void, void *, void **, uint64_t))(*(void *)v23 + 16))(v23, a2, &object, a3, 0, v41, &__p, a4);
  if (v37 < 0) {
    operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)v41);
  if (object) {
    dispatch_release(object);
  }
LABEL_40:
  if ((*(unsigned int (**)(void, void))(**(void **)(a5 + 8) + 24))(*(void *)(a5 + 8), *(unsigned int *)(a5 + 16)))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sip.tport");
    std::string::basic_string[abi:ne180100]<0>(&object, "");
    uint64_t v27 = ims::error((uint64_t)&__p, (uint64_t)&object);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"Unable to initialize UDP transport: ", 36);
    *(unsigned char *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a5 + 16))(a5, v27);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v27 + 17) = 0;
    if (v33 < 0) {
      operator delete(object);
    }
    if (v37 < 0) {
      operator delete(__p);
    }
    BOOL v28 = (std::__shared_weak_count *)*((void *)a1 + 8);
    *((void *)a1 + 7) = 0;
    *((void *)a1 + 8) = 0;
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if (!v22) {
      return;
    }
LABEL_55:
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    return;
  }
  uint64_t v29 = *((void *)a1 + 7);
  if (v22)
  {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v30 = *(std::__shared_weak_count **)(v29 + 136);
  *(void *)(v29 + 128) = v23;
  *(void *)(v29 + 136) = v22;
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (v22)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    goto LABEL_55;
  }
}

void sub_1C53C0BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)&a27);
  if (object) {
    dispatch_release(object);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(a1);
}

void SipUdpTransport::initialize(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)a2 + 56);
  if (v4)
  {
    uint64_t v5 = *(void *)(*(void *)a2 + 64);
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    int v6 = *(std::__shared_weak_count **)(a1 + 64);
    *(void *)(a1 + 56) = v4;
    *(void *)(a1 + 64) = v5;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    v8[0] = &unk_1F20B2680;
    v8[1] = &_bambiDomain;
    int v9 = 1073741825;
    uint64_t v7 = (const std::string *)ImsResult::operator<<<char [33]>((uint64_t)v8, "old transport is not initialized");
    ImsResult::ImsResult((ImsResult *)a3, v7);
    ImsResult::~ImsResult((ImsResult *)v8);
  }
}

void sub_1C53C0DFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

double SipUdpTransport::setRemoteOutboundAddress@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 56))
  {
    (*(void (**)(long long *__return_ptr))(**(void **)a2 + 32))(&v10);
    long long v4 = v10;
    long long v10 = 0uLL;
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 80);
    *(_OWORD *)(a1 + 72) = v4;
    if (v5)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      if (*((void *)&v10 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
      }
    }
    int v6 = *(std::__shared_weak_count **)(a1 + 48);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        unint64_t v8 = v7;
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_weak(v6);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      else
      {
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::addDelegateForRemoteAddress();
  }
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 1073741827;
  return result;
}

void sub_1C53C0FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::addDelegateForRemoteAddress()
{
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  IpAddress::asString();
}

void sub_1C53C106C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipUdpTransport::send(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(v1 + 128);
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 136);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C53C1104(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipUdpTransport::processDataFromSocket(void *a1, void *a2, size_t a3, uint64_t a4)
{
  uint64_t v24 = 0;
  uint64_t v8 = a1[3];
  memset(v23, 0, sizeof(v23));
  uint64_t v25 = v8;
  std::string::pointer v22 = 0;
  unsigned __int8 v21 = 0;
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v20 = 0;
  std::string::basic_string[abi:ne180100](__dst, a2, a3);
  if (SipMessageDecoder::decode(v23, (const std::string::value_type *)__dst, &v22, &v21))
  {
    std::string::pointer v9 = v22;
    if (v22)
    {
      uint64_t v10 = qword_1EA3D56A8;
      if (byte_1EA3D56B7 >= 0) {
        uint64_t v10 = byte_1EA3D56B7;
      }
      if (v10)
      {
        uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
        SipRecorder::recordBlob(v9, (uint64_t)__dst, v11, 0);
        std::string::pointer v9 = v22;
      }
      v14[0] = 0;
      v14[1] = 0;
      SipTransport::processIncomingMessage((uint64_t)a1, (uint64_t)v9, (uint64_t)a2, a3, v21, a4, v14);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "sip.tport");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v12 = ims::error((uint64_t)v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"incomplete message received:", 28);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v17, "sip.tport");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      unint64_t v13 = (unsigned char *)ims::error((uint64_t)v17, (uint64_t)__p);
      (*(void (**)(unsigned char *, void **))(*(void *)v13 + 32))(v13, __dst);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v13[17] = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
    }
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__dst[0]);
  }
  SipMessageDecoder::~SipMessageDecoder((SipMessageDecoder *)v23);
}

void sub_1C53C13A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  SipMessageDecoder::~SipMessageDecoder((SipMessageDecoder *)&a32);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipUdpTransport::processDataFromSocket(uint64_t a1, void *a2, size_t a3, uint64_t a4)
{
}

void SipUdpTransport::setServiceClass(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    return;
  }
  uint64_t v6 = *(void *)(v2 + 128);
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 136);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (!v6) {
      return;
    }
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(v7 + 128);
    uint64_t v8 = *(std::__shared_weak_count **)(v7 + 136);
    if (v8)
    {
      char v9 = 0;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_9;
    }
  }
  else
  {
    if (!v6) {
      return;
    }
    uint64_t v8 = 0;
  }
  char v9 = 1;
LABEL_9:
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 112))(v6, a2);
  if ((v9 & 1) == 0)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C53C14F0(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipUdpTransport::localAddress(SipUdpTransport *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 128);
    long long v4 = *(std::__shared_weak_count **)(v2 + 136);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 64))(v3);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1C53C158C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

char *SipUdpTransport::name(SipUdpTransport *this)
{
  return &SipTransport::kTransportUDP;
}

void std::__shared_ptr_emplace<SipUdpSocketMultiplexer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C8788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipUdpSocketMultiplexer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C8788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipUdpSocketMultiplexer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::delegateForRemoteAddress@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (result[13]) {
    IpAddress::asString();
  }
  uint64_t v3 = result[15];
  *a2 = result[14];
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1C53C1704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C53C18B4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void SipHeaderTemplateMap::initializeFromPref(uint64_t **this, const ImsPrefs *a2, void **a3)
{
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  v100 = 0;
  v101 = 0;
  uint64_t v102 = 0;
  long long v4 = ImsPrefs::typedPrefWithKey<ImsDictPref>(a2, a3);
  if (!v4) {
    long long v4 = a3[11];
  }
  if (v4)
  {
    ImsDictPref::keysAndValues((uint64_t)v4, &v103, (char **)&v100);
    uint64_t v5 = v103;
    if (v104 != v103)
    {
      uint64_t v6 = 0;
      while (1)
      {
        uint64_t v98 = 0xFFFFFFFFLL;
        unint64_t v97 = 0xFFFFFFFFLL;
        memset(&v99, 0, sizeof(v99));
        uint64_t v7 = v5 + 24 * v6;
        memset(&__p, 0, 24);
        memset(&__str, 0, sizeof(__str));
        uint64_t v93 = v6;
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
        }
        else
        {
          long long v8 = *(_OWORD *)v7;
          __str.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v8;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = __str.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          uint64_t v10 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__str
              : (std::string *)__str.__r_.__value_.__r.__words[0];
          uint64_t v11 = (char *)memchr(v10, 91, size);
          if (v11)
          {
            std::string::size_type v12 = v11 - (char *)v10;
            if (v11 - (char *)v10 != -1)
            {
              if (size <= v12 + 1) {
                goto LABEL_25;
              }
              unint64_t v13 = memchr(v11 + 1, 93, size - (v12 + 1));
              unint64_t v14 = v13 - (unsigned char *)v10;
              if (!v13) {
                unint64_t v14 = -1;
              }
              if (v14 == -1 || v14 < v12)
              {
LABEL_25:
                std::string::basic_string[abi:ne180100]<0>(&v110, "prefs");
                std::string::basic_string[abi:ne180100]<0>(&v109, "");
                uint64_t v16 = ims::error((uint64_t)&v110, (uint64_t)&v109);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"missing end bracket: ", 21);
                *(unsigned char *)(v16 + 17) = 0;
                (*(void (**)(uint64_t, std::string *))(*(void *)v16 + 32))(v16, &__str);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v16 + 17) = 0;
                if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v109.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v110.__r_.__value_.__l.__data_);
                }
                goto LABEL_101;
              }
              std::string::basic_string(&v110, &__str, v12 + 1, v14 + ~v12, (std::allocator<char> *)&v109);
              if (SHIBYTE(__p.__end_) < 0) {
                operator delete(__p.__first_);
              }
              *(_OWORD *)&__p.__first_ = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
              __p.__end_ = (std::__split_buffer<std::string>::pointer)v110.__r_.__value_.__r.__words[2];
              std::string::basic_string(&v110, &__str, 0, v12, (std::allocator<char> *)&v109);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string __str = v110;
            }
          }
        }
        std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(__p.__end_);
        if (SHIBYTE(__p.__end_) < 0) {
          std::__split_buffer<std::string>::pointer end_high = __p.__begin_;
        }
        if (!end_high)
        {
          unsigned int v20 = 0;
          unsigned int v22 = -1;
          int v21 = -1;
LABEL_95:
          std::string::operator=(&v99, &__str);
          LODWORD(v98) = v21;
          int v44 = 1;
          unint64_t v97 = __PAIR64__(v20, v22);
          goto LABEL_102;
        }
        memset(&v110, 0, sizeof(v110));
        std::string::basic_string[abi:ne180100]<0>(&v109, ", ");
        ims::tokenize((std::string *)&__p, (uint64_t *)&v110, (char *)&v109);
        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v109.__r_.__value_.__l.__data_);
        }
        std::string::size_type v18 = v110.__r_.__value_.__l.__size_;
        std::string::size_type v19 = v110.__r_.__value_.__r.__words[0];
        if (v110.__r_.__value_.__r.__words[0] == v110.__r_.__value_.__l.__size_)
        {
          unsigned int v20 = 0;
          unsigned int v22 = -1;
          int v21 = -1;
LABEL_94:
          v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
          goto LABEL_95;
        }
        unsigned int v20 = 0;
        int v21 = -1;
        unsigned int v22 = -1;
        while (1)
        {
          ims::lowerCase((char *)v19);
          ims::chomp((std::string *)v19, "\r\n\t ", 3);
          LODWORD(v23) = *(char *)(v19 + 23);
          if ((v23 & 0x80000000) == 0)
          {
            uint64_t v24 = (unsigned __int8 *)v19;
            if (!*(unsigned char *)(v19 + 23)) {
              goto LABEL_86;
            }
            goto LABEL_46;
          }
          if (*(void *)(v19 + 8)) {
            break;
          }
LABEL_86:
          v19 += 24;
          if (v19 == v18) {
            goto LABEL_94;
          }
        }
        uint64_t v24 = *(unsigned __int8 **)v19;
LABEL_46:
        int v25 = *v24;
        if (v25 == 45)
        {
          std::string::basic_string(&v109, (const std::string *)v19, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v107);
          if (*(char *)(v19 + 23) < 0) {
            operator delete(*(void **)v19);
          }
          long long v26 = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
          unint64_t v27 = v109.__r_.__value_.__r.__words[2];
          *(void *)(v19 + 16) = *((void *)&v109.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v19 = v26;
          unint64_t v23 = HIBYTE(v27);
        }
        int v28 = (char)v23;
        unint64_t v23 = v23;
        if ((v23 & 0x80u) != 0) {
          unint64_t v23 = *(void *)(v19 + 8);
        }
        switch(v23)
        {
          case 3uLL:
            uint64_t v29 = *(unsigned __int16 **)v19;
            if (v28 >= 0) {
              uint64_t v29 = (unsigned __int16 *)v19;
            }
            int v30 = *v29;
            int v31 = *((unsigned __int8 *)v29 + 2);
            if (v30 != 12601 || v31 != 49) {
              goto LABEL_84;
            }
            unsigned int v33 = v22 & 0xFFFFFFF3;
            if (v25 == 45) {
              unsigned int v22 = v33 | 8;
            }
            else {
              unsigned int v22 = v33 | 4;
            }
            goto LABEL_86;
          case 4uLL:
            long long v38 = *(_DWORD **)v19;
            if (v28 >= 0) {
              long long v38 = (_DWORD *)v19;
            }
            if (*v38 != 1768319351) {
              goto LABEL_84;
            }
            if (v25 == 45) {
              unsigned int v22 = v22 & 0xFFFFFFFC | 2;
            }
            else {
              unsigned int v22 = v22 & 0xFFFFFFFC | 1;
            }
            goto LABEL_86;
          case 7uLL:
            uint64_t v34 = *(int **)v19;
            if (v28 >= 0) {
              uint64_t v34 = (int *)v19;
            }
            int v35 = *v34;
            int v36 = *(int *)((char *)v34 + 3);
            if (v35 != 1835627120 || v36 != 2037539181) {
              goto LABEL_84;
            }
            if (v25 == 45) {
              int v21 = -2;
            }
            else {
              int v21 = -3;
            }
            goto LABEL_86;
          case 9uLL:
            std::string::size_type v39 = *(void *)v19;
            if (v28 >= 0) {
              std::string::size_type v39 = v19;
            }
            uint64_t v40 = *(void *)v39;
            int v41 = *(unsigned __int8 *)(v39 + 8);
            if (v40 != 0x7261646E6F636573 || v41 != 121) {
              goto LABEL_84;
            }
            if (v25 == 45) {
              int v21 = -3;
            }
            else {
              int v21 = -2;
            }
            goto LABEL_86;
          default:
LABEL_84:
            int v43 = ims::Services::serviceWithName((unsigned char *)v19);
            if (v43)
            {
              v20 |= v43;
              goto LABEL_86;
            }
            std::string::basic_string[abi:ne180100]<0>(&v109, "prefs");
            std::string::basic_string[abi:ne180100]<0>(v107, "");
            uint64_t v45 = ims::error((uint64_t)&v109, (uint64_t)v107);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"unrecognized flag '", 19);
            *(unsigned char *)(v45 + 17) = 0;
            (*(void (**)(uint64_t, std::string::size_type))(*(void *)v45 + 32))(v45, v19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"' in ", 5);
            *(unsigned char *)(v45 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 32))(v45, v7);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v45 + 17) = 0;
            if (v108 < 0) {
              operator delete(v107[0]);
            }
            if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v109.__r_.__value_.__l.__data_);
            }
            v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
LABEL_101:
            int v44 = 0;
LABEL_102:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__end_) < 0)
            {
              operator delete(__p.__first_);
              if (!v44) {
                goto LABEL_170;
              }
LABEL_108:
              memset(&__str, 0, sizeof(__str));
              std::string::basic_string[abi:ne180100]<0>(&__p, ", ");
              ims::tokenize(&v99, (uint64_t *)&__str, (char *)&__p);
              if (SHIBYTE(__p.__end_) < 0) {
                operator delete(__p.__first_);
              }
              std::string::size_type v46 = __str.__r_.__value_.__l.__size_;
              std::string::size_type v92 = __str.__r_.__value_.__l.__size_;
              for (uint64_t i = __str.__r_.__value_.__r.__words[0]; ; i += 24)
              {
                if (i == v46)
                {
                  __p.__first_ = &__str;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  goto LABEL_170;
                }
                ims::normalize(i, 1, &v96);
                if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v96.__r_.__value_.__l.__data_);
                }
                v110.__r_.__value_.__r.__words[0] = 0;
                std::string v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)this, &v110, (void **)i);
                std::__split_buffer<std::string>::pointer v49 = (std::__split_buffer<std::string>::pointer)*v48;
                if (!*v48)
                {
                  __p.__end_ = 0;
                  uint64_t v50 = (std::string *)operator new(0x50uLL);
                  __p.__first_ = v50;
                  __p.__begin_ = (std::__split_buffer<std::string>::pointer)(this + 1);
                  LOBYTE(__p.__end_) = 0;
                  long long v51 = (std::string *)((char *)v50 + 32);
                  if (*(char *)(i + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(v51, *(const std::string::value_type **)i, *(void *)(i + 8));
                    std::__split_buffer<std::string>::pointer first = __p.__first_;
                  }
                  else
                  {
                    long long v52 = *(_OWORD *)i;
                    v50[2].__r_.__value_.__r.__words[0] = *(void *)(i + 16);
                    *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v52;
                    std::__split_buffer<std::string>::pointer first = v50;
                  }
                  v50[2].__r_.__value_.__l.__size_ = 0;
                  v50[2].__r_.__value_.__r.__words[2] = 0;
                  v50[3].__r_.__value_.__r.__words[0] = 0;
                  LOBYTE(__p.__end_) = 1;
                  std::__tree<unsigned int>::__insert_node_at(this, (uint64_t)v110.__r_.__value_.__l.__data_, v48, (uint64_t *)first);
                  std::__split_buffer<std::string>::pointer v49 = __p.__first_;
                  __p.__first_ = 0;
                  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p, 0);
                }
                memset(&v110, 0, sizeof(v110));
                uint64_t v54 = (const void *)*((void *)v100 + v93);
                if (v54)
                {
                  if (v55)
                  {
                    (*(void (**)(std::string *__return_ptr))(*(void *)v55 + 48))(&v109);
                    uint64_t v56 = (_OWORD *)v110.__r_.__value_.__l.__size_;
                    if (v110.__r_.__value_.__l.__size_ >= v110.__r_.__value_.__r.__words[2])
                    {
                      unint64_t v59 = 0xAAAAAAAAAAAAAAABLL
                          * ((uint64_t)(v110.__r_.__value_.__l.__size_ - v110.__r_.__value_.__r.__words[0]) >> 3);
                      unint64_t v60 = v59 + 1;
                      if (v59 + 1 > 0xAAAAAAAAAAAAAAALL) {
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      }
                      if (0x5555555555555556
                         * ((uint64_t)(v110.__r_.__value_.__r.__words[2] - v110.__r_.__value_.__r.__words[0]) >> 3) > v60)
                        unint64_t v60 = 0x5555555555555556
                            * ((uint64_t)(v110.__r_.__value_.__r.__words[2] - v110.__r_.__value_.__r.__words[0]) >> 3);
                      if (0xAAAAAAAAAAAAAAABLL
                         * ((uint64_t)(v110.__r_.__value_.__r.__words[2] - v110.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                        unint64_t v61 = 0xAAAAAAAAAAAAAAALL;
                      else {
                        unint64_t v61 = v60;
                      }
                      __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v110.__r_.__value_.__r.__words[2];
                      if (v61) {
                        uint64_t v62 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v110.__r_.__value_.__r.__words[2], v61);
                      }
                      else {
                        uint64_t v62 = 0;
                      }
                      std::string v63 = v62 + v59;
                      __p.__first_ = v62;
                      __p.__begin_ = v63;
                      __p.__end_cap_.__value_ = &v62[v61];
                      long long v64 = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
                      v63->__r_.__value_.__r.__words[2] = v109.__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v64;
                      memset(&v109, 0, sizeof(v109));
                      __p.__end_ = v63 + 1;
                      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v110, &__p);
                      std::string::size_type v65 = v110.__r_.__value_.__l.__size_;
                      std::__split_buffer<std::string>::~__split_buffer(&__p);
                      v110.__r_.__value_.__l.__size_ = v65;
                      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v109.__r_.__value_.__l.__data_);
                      }
                    }
                    else
                    {
                      long long v57 = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
                      *(void *)(v110.__r_.__value_.__l.__size_ + 16) = *((void *)&v109.__r_.__value_.__l + 2);
                      *uint64_t v56 = v57;
                      v110.__r_.__value_.__l.__size_ = (std::string::size_type)v56 + 24;
                    }
                  }
                  else
                  {
                    if (v58) {
                      ImsArrayPref::stringValues((uint64_t)v58, (std::vector<std::string> *)&v110);
                    }
                  }
                }
                std::string::size_type v66 = v110.__r_.__value_.__l.__size_;
                uint64_t v67 = v110.__r_.__value_.__r.__words[0];
                if (v110.__r_.__value_.__r.__words[0] != v110.__r_.__value_.__l.__size_) {
                  break;
                }
LABEL_168:
                __p.__first_ = &v110;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                std::string::size_type v46 = v92;
              }
              p_size_t size = &v49[2].__r_.__value_.__l.__size_;
              while (2)
              {
                if (*(char *)(v67 + 23) < 0)
                {
                  if (!*(void *)(v67 + 8)) {
                    goto LABEL_167;
                  }
                }
                else if (!*(unsigned char *)(v67 + 23))
                {
                  goto LABEL_167;
                }
                ImsPrefs::substituteRuntimeVars((uint64_t)a2, v67, (uint64_t)&__p);
                if (*(char *)(v67 + 23) < 0) {
                  operator delete(*(void **)v67);
                }
                long long v69 = *(_OWORD *)&__p.__first_;
                *(void *)(v67 + 16) = __p.__end_;
                *(_OWORD *)uint64_t v67 = v69;
                int v70 = v98;
                uint64_t v71 = (std::string *)v97;
                __p.__first_ = (std::__split_buffer<std::string>::pointer)0xFFFFFFFFLL;
                LODWORD(__p.__begin_) = -1;
                memset(&__p.__end_, 0, 24);
                std::string::operator=((std::string *)&__p.__end_, (const std::string *)v67);
                LODWORD(__p.__begin_) = v70;
                __p.__first_ = v71;
                unint64_t v72 = v49[2].__r_.__value_.__r.__words[2];
                std::string::pointer data = v49[3].__r_.__value_.__l.__data_;
                if (v72 >= (unint64_t)data)
                {
                  unint64_t v77 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v72 - *p_size) >> 3);
                  unint64_t v78 = v77 + 1;
                  if (v77 + 1 > 0x666666666666666) {
                    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v79 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&data[-*p_size] >> 3);
                  if (2 * v79 > v78) {
                    unint64_t v78 = 2 * v79;
                  }
                  if (v79 >= 0x333333333333333) {
                    unint64_t v80 = 0x666666666666666;
                  }
                  else {
                    unint64_t v80 = v78;
                  }
                  if (v80) {
                    int v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipHeaderTemplateMap::HeaderTemplate>>((uint64_t)&v49[3], v80);
                  }
                  else {
                    int v81 = 0;
                  }
                  int v82 = &v81[40 * v77];
                  uint64_t v83 = &v81[40 * v80];
                  std::__split_buffer<std::string>::pointer v84 = __p.__first_;
                  *((_DWORD *)v82 + 2) = __p.__begin_;
                  *(void *)int v82 = v84;
                  long long v85 = *(_OWORD *)&__p.__end_;
                  *((void *)v82 + 4) = __p.__end_cap_.__value_;
                  *((_OWORD *)v82 + 1) = v85;
                  memset(&__p.__end_, 0, 24);
                  std::string::size_type v76 = (std::string::size_type)(v82 + 40);
                  std::string::size_type v86 = v49[2].__r_.__value_.__l.__size_;
                  std::string::size_type v87 = v49[2].__r_.__value_.__r.__words[2];
                  if (v87 == v86)
                  {
                    v49[2].__r_.__value_.__l.__size_ = (std::string::size_type)v82;
                    v49[2].__r_.__value_.__r.__words[2] = v76;
                    v49[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
                  }
                  else
                  {
                    do
                    {
                      uint64_t v88 = *(void *)(v87 - 40);
                      v87 -= 40;
                      int v89 = *(_DWORD *)(v87 + 8);
                      *((void *)v82 - 5) = v88;
                      v82 -= 40;
                      *((_DWORD *)v82 + 2) = v89;
                      long long v90 = *(_OWORD *)(v87 + 16);
                      *((void *)v82 + 4) = *(void *)(v87 + 32);
                      *((_OWORD *)v82 + 1) = v90;
                      *(void *)(v87 + 24) = 0;
                      *(void *)(v87 + 32) = 0;
                      *(void *)(v87 + 16) = 0;
                    }
                    while (v87 != v86);
                    std::string::size_type v87 = v49[2].__r_.__value_.__l.__size_;
                    std::string::size_type v91 = v49[2].__r_.__value_.__r.__words[2];
                    v49[2].__r_.__value_.__l.__size_ = (std::string::size_type)v82;
                    v49[2].__r_.__value_.__r.__words[2] = v76;
                    v49[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
                    while (v91 != v87)
                    {
                      if (*(char *)(v91 - 1) < 0) {
                        operator delete(*(void **)(v91 - 24));
                      }
                      v91 -= 40;
                    }
                  }
                  if (v87) {
                    operator delete((void *)v87);
                  }
                }
                else
                {
                  std::__split_buffer<std::string>::pointer v74 = __p.__first_;
                  *(_DWORD *)(v72 + 8) = __p.__begin_;
                  *(void *)unint64_t v72 = v74;
                  long long v75 = *(_OWORD *)&__p.__end_;
                  *(void *)(v72 + 32) = __p.__end_cap_.__value_;
                  *(_OWORD *)(v72 + 16) = v75;
                  memset(&__p.__end_, 0, 24);
                  std::string::size_type v76 = v72 + 40;
                }
                v49[2].__r_.__value_.__r.__words[2] = v76;
                if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
                  operator delete(__p.__end_);
                }
LABEL_167:
                v67 += 24;
                if (v67 == v66) {
                  goto LABEL_168;
                }
                continue;
              }
            }
            if (v44) {
              goto LABEL_108;
            }
LABEL_170:
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v99.__r_.__value_.__l.__data_);
            }
            uint64_t v6 = v93 + 1;
            uint64_t v5 = v103;
            if (v93 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((v104 - v103) >> 3)) {
              goto LABEL_173;
            }
            break;
        }
      }
    }
  }
LABEL_173:
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1C53C2558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (*(char *)(v50 - 121) < 0) {
    operator delete(*(void **)(v50 - 144));
  }
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  a20 = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

void SipHeaderTemplateMap::matchingHeaderTemplates(uint64_t a1, long long *a2, int a3, int a4, int a5, int a6, int a7, uint64_t *a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  int v41 = a3;
  memset(&v40, 0, sizeof(v40));
  if (a3)
  {
    __p[0] = 0;
    __p[1] = 0;
    std::string::size_type v39 = 0;
    ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()();
  }
  v40.__end_ = (std::vector<std::string>::pointer)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v40, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "*");
  std::vector<std::string>::pointer end = v40.__end_;
  if (v40.__end_ >= v40.__end_cap_.__value_)
  {
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v40.__end_ - (char *)v40.__begin_) >> 3);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v40.__end_cap_.__value_ - (char *)v40.__begin_) >> 3) > v17) {
      unint64_t v17 = 0x5555555555555556 * (((char *)v40.__end_cap_.__value_ - (char *)v40.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v40.__end_cap_.__value_ - (char *)v40.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v17;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v40.__end_cap_;
    if (v18) {
      std::string::size_type v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v40.__end_cap_, v18);
    }
    else {
      std::string::size_type v19 = 0;
    }
    int v35 = v19 + v16;
    __v.__first_ = v19;
    __v.__begin_ = v35;
    __v.__end_cap_.__value_ = &v19[v18];
    long long v36 = *(_OWORD *)__p;
    v35->__r_.__value_.__r.__words[2] = v39;
    *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
    __p[1] = 0;
    std::string::size_type v39 = 0;
    __p[0] = 0;
    __v.__end_ = v35 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v40, &__v);
    char v37 = v40.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v40.__end_ = v37;
    if (SHIBYTE(v39) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v15 = *(_OWORD *)__p;
    v40.__end_->__r_.__value_.__r.__words[2] = v39;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
    v40.__end_ = end + 1;
  }
  std::vector<std::string>::pointer begin = v40.__begin_;
  std::vector<std::string>::pointer v20 = v40.__end_;
  if (v40.__begin_ != v40.__end_)
  {
    unsigned int v22 = (void **)(a1 + 8);
    if (a4) {
      int v23 = 1;
    }
    else {
      int v23 = 2;
    }
    if (a5) {
      int v24 = 4;
    }
    else {
      int v24 = 8;
    }
    int v25 = v24 | v23;
    do
    {
      long long v26 = *v22;
      if (*v22)
      {
        unint64_t v27 = v22;
        do
        {
          char v28 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v26 + 4, (void **)&begin->__r_.__value_.__l.__data_);
          if (v28 >= 0) {
            uint64_t v29 = v26;
          }
          else {
            uint64_t v29 = v26 + 1;
          }
          if (v28 >= 0) {
            unint64_t v27 = (void **)v26;
          }
          long long v26 = (void *)*v29;
        }
        while (*v29);
        if (v27 != v22
          && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(begin, v27 + 4) & 0x80) == 0)
        {
          int v30 = v27[7];
          int v31 = v27[8];
          while (v30 != v31)
          {
            if ((v25 & ~*v30) == 0 && (v30[1] & ~a7) == 0 && (a6 == 3 || (v30[2] & a6) == a6))
            {
              long long v32 = (long long *)(v30 + 4);
              unint64_t v33 = a8[1];
              if (v33 >= a8[2])
              {
                uint64_t v34 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a8, v32);
              }
              else
              {
                std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a8, v32);
                uint64_t v34 = v33 + 24;
              }
              a8[1] = v34;
            }
            v30 += 10;
          }
        }
      }
      ++begin;
    }
    while (begin != v20);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1C53C2F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6, __int16 a7, char a8, char a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char *__pa, uint64_t a19, std::__split_buffer<std::string> *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (SHIBYTE(a20) < 0) {
    operator delete(__pa);
  }
  __pa = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void SipHeaderTemplateMap::matchingHeaderTemplate(uint64_t a1, long long *a2, int a3, int a4, int a5, int a6, int a7)
{
  memset(v8, 0, sizeof(v8));
  SipHeaderTemplateMap::matchingHeaderTemplates(a1, a2, a3, a4, a5, a6, a7, v8);
  std::string::basic_string[abi:ne180100]<0>(&__p, ";");
  ims::join<std::__wrap_iter<std::string const*>>();
}

void sub_1C53C308C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__split_buffer<std::string> __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void SipSubscriptionStateHeader::~SipSubscriptionStateHeader(void **this)
{
  *this = &unk_1F20C0A78;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20C0A78;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipSubscriptionStateHeader::clone(SipSubscriptionStateHeader *this)
{
}

void sub_1C53C328C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4070BFB248);
  _Unwind_Resume(a1);
}

void IMSSecurityPolicyManager::~IMSSecurityPolicyManager(IMSSecurityPolicyManager *this)
{
  IMSSecurityPolicyManager::deinitialize(this);
  std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::destroy((uint64_t)this + 48, *((void **)this + 7));
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  std::__list_imp<unsigned long long>::clear(this);
}

void IMSSecurityPolicyManager::deinitialize(IMSSecurityPolicyManager *this)
{
  if (*((void *)this + 9))
  {
    *((void *)this + 4) = *((void *)this + 3);
    uint64_t v2 = (void *)((char *)this + 56);
    std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::destroy((uint64_t)this + 48, *((void **)this + 7));
    *((void *)this + 6) = v2;
    *((void *)this + 8) = 0;
    *uint64_t v2 = 0;
    std::__list_imp<unsigned long long>::clear(this);
    PolicyDeleteAll(*((void *)this + 9));
    PolicyApply(*((void *)this + 9));
    CFRelease(*((CFTypeRef *)this + 9));
    *((void *)this + 9) = 0;
  }
}

void IMSSecurityPolicyManager::initialize(IMSSecurityPolicyManager *this)
{
  *((void *)this + 9) = PolicyCreateSession(0, @"com.apple.ipTelephony.security", _callback, this);
  unint64_t v2 = *((void *)this + 2);
  if (v2 < 0x41)
  {
    if (v2 != 64)
    {
      uint64_t v5 = operator new(0x18uLL);
      uint64_t v6 = v5;
      void *v5 = 0;
      v5[1] = 0;
      *((_DWORD *)v5 + 4) = 0;
      unint64_t v7 = v2 - 63;
      if (v2 == 63)
      {
        uint64_t v8 = 1;
      }
      else
      {
        uint64_t v8 = 64 - v2;
        unint64_t v13 = v5;
        do
        {
          uint64_t v5 = operator new(0x18uLL);
          void *v5 = v13;
          v5[1] = 0;
          v13[1] = v5;
          unint64_t v13 = v5;
          *((_DWORD *)v5 + 4) = 0;
        }
        while (!__CFADD__(v7++, 1));
      }
      v5[1] = this;
      uint64_t v15 = *(void *)this;
      *uint64_t v6 = *(void *)this;
      *(void *)(v15 + 8) = v6;
      *(void *)this = v5;
      *((void *)this + 2) = v8 + v2;
    }
  }
  else
  {
    if (v2 >= 0x80)
    {
      long long v4 = (IMSSecurityPolicyManager *)*((void *)this + 1);
      for (unint64_t i = 65; i > 1; --i)
        long long v4 = (IMSSecurityPolicyManager *)*((void *)v4 + 1);
    }
    else
    {
      unint64_t v3 = v2 - 64;
      long long v4 = this;
      do
      {
        long long v4 = *(IMSSecurityPolicyManager **)v4;
        --v3;
      }
      while (v3);
    }
    if (v4 != this)
    {
      uint64_t v10 = *(void *)this;
      uint64_t v11 = *(IMSSecurityPolicyManager **)v4;
      *((void *)v11 + 1) = *(void *)(*(void *)this + 8);
      **(void **)(v10 + 8) = v11;
      do
      {
        std::string::size_type v12 = (IMSSecurityPolicyManager *)*((void *)v4 + 1);
        --*((void *)this + 2);
        operator delete(v4);
        long long v4 = v12;
      }
      while (v12 != this);
    }
  }
  uint64_t v16 = *((void *)this + 1);
  if ((IMSSecurityPolicyManager *)v16 != this)
  {
    int v17 = 1000;
    do
    {
      *(_DWORD *)(v16 + 16) = v17;
      uint64_t v16 = *(void *)(v16 + 8);
      v17 += 100;
    }
    while ((IMSSecurityPolicyManager *)v16 != this);
  }
  uint64_t v18 = *((void *)this + 9);
  if (!v18)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "policy");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v19 = ims::error((uint64_t)v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Unable to create secure policy session", 38);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    uint64_t v18 = *((void *)this + 9);
  }
  if (!PolicySetSessionPriority(v18, @"High"))
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "policy");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v20 = ims::error((uint64_t)v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Unable to set session priority", 30);
    *(unsigned char *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v20 + 17) = 0;
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    IMSSecurityPolicyManager::deinitialize(this);
  }
}

void sub_1C53C3680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSSecurityPolicyManager::addDropPolicy(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  v39[0] = &unk_1F20B3050;
  v39[1] = 0;
  v38[0] = &unk_1F20B35C8;
  v38[1] = 0;
  v37[0] = &unk_1F20B35C8;
  v37[1] = 0;
  a5[2] = 0;
  a5[3] = 0;
  a5[7] = 0;
  a5[8] = 0;
  a5[5] = 0;
  a5[6] = 0;
  *a5 = &unk_1F20B2680;
  a5[1] = &_bambiDomain;
  a5[4] = 0;
  long long v52 = (uint64_t (**)(void **, uint64_t))&unk_1F20B3050;
  uint64_t v53 = 0;
  uint64_t v50 = (uint64_t (**)(void **, uint64_t))&unk_1F20B35C8;
  uint64_t v51 = 0;
  v49[0] = &unk_1F20B35C8;
  v49[1] = 0;
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v49, @"ConditionType", @"BoundInterface");
  ims::CFString::CFString(&__p, a2, 0x8000100u);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v49, @"InterfaceName", value);
  ims::CFType::~CFType((ims::CFType *)&__p);
  ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v52, (const ims::CFType *)v49);
  (*(void (**)(void *, void, void))(v49[0] + 48))(v49, 0, 0);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v49, @"ConditionType", @"UID");
  uid_t v8 = getuid();
  ims::CFNumber::CFNumber((ims::CFNumber *)&__p, v8);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v49, @"UID", value);
  ims::CFType::~CFType((ims::CFType *)&__p);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v49, @"IsNegative", (const void *)*MEMORY[0x1E4F1CFD0]);
  ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v52, (const ims::CFType *)v49);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v50, @"Result", @"Drop");
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
  std::string::basic_string[abi:ne180100]<0>(v47, "");
  uint64_t v9 = ims::debug((uint64_t)&__p, (uint64_t)v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"adding DROP ALL policy at ", 26);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  if (v43 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
  std::string::basic_string[abi:ne180100]<0>(v47, "");
  uint64_t v10 = ims::debug((uint64_t)&__p, (uint64_t)v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"conditions: ", 12);
  *(unsigned char *)(v10 + 17) = 0;
  uint64_t v11 = (unsigned char *)v52[2]((void **)&v52, v10);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v11[17] = 0;
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  if (v43 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
  std::string::basic_string[abi:ne180100]<0>(v47, "");
  uint64_t v12 = ims::debug((uint64_t)&__p, (uint64_t)v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"results: ", 9);
  *(unsigned char *)(v12 + 17) = 0;
  unint64_t v13 = (unsigned char *)v50[2]((void **)&v50, v12);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v13[17] = 0;
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  if (v43 < 0) {
    operator delete(__p);
  }
  int v14 = PolicyAdd(*(void *)(a1 + 72), *(unsigned int *)a4, v53, v51, 0);
  int v15 = v14;
  if (v14)
  {
    unint64_t v16 = a4[3];
    int v17 = (char *)a4[2];
    if ((unint64_t)v17 >= v16)
    {
      uint64_t v20 = (char *)a4[1];
      uint64_t v21 = (v17 - v20) >> 2;
      if ((unint64_t)(v21 + 1) >> 62) {
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v22 = v16 - (void)v20;
      unint64_t v23 = (uint64_t)(v16 - (void)v20) >> 1;
      if (v23 <= v21 + 1) {
        unint64_t v23 = v21 + 1;
      }
      if (v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v23;
      }
      if (v24)
      {
        int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)(a4 + 3), v24);
        uint64_t v20 = (char *)a4[1];
        int v17 = (char *)a4[2];
      }
      else
      {
        int v25 = 0;
      }
      long long v26 = &v25[4 * v21];
      unint64_t v27 = &v25[4 * v24];
      *(_DWORD *)long long v26 = v15;
      uint64_t v18 = v26 + 4;
      while (v17 != v20)
      {
        int v28 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v26 - 1) = v28;
        v26 -= 4;
      }
      a4[1] = v26;
      a4[2] = v18;
      a4[3] = v27;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *(_DWORD *)int v17 = v14;
      uint64_t v18 = v17 + 4;
    }
    a4[2] = v18;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    v32[0] = &unk_1F20B2680;
    v32[1] = &_bambiDomain;
    int v33 = 0;
  }
  else
  {
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    std::__split_buffer<std::string> __p = &unk_1F20B2680;
    value = &_bambiDomain;
    int v42 = 0x40000000;
    uint64_t v19 = (const std::string *)ImsResult::operator<<<char [26]>((uint64_t)&__p, "Unable to add drop policy");
    ImsResult::ImsResult((ImsResult *)v32, v19);
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  ims::CFType::~CFType((ims::CFType *)v49);
  ims::CFType::~CFType((ims::CFType *)&v50);
  ims::CFType::~CFType((ims::CFType *)&v52);
  ImsResult::operator=((uint64_t)a5, (uint64_t)v32);
  char v29 = (*(uint64_t (**)(void, void))(*(void *)a5[1] + 24))(a5[1], *((unsigned int *)a5 + 4));
  ImsResult::~ImsResult((ImsResult *)v32);
  if ((v29 & 1) == 0 && *a3 != a3[1])
  {
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v37, @"ConditionType", @"LocalAddressSubnet");
    IpAddress::asString(&__p);
  }
  ims::CFType::~CFType((ims::CFType *)v37);
  ims::CFType::~CFType((ims::CFType *)v38);
  ims::CFType::~CFType((ims::CFType *)v39);
}

void sub_1C53C4394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, ImsResult *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  ims::CFType::~CFType((ims::CFType *)(v38 - 136));
  ims::CFType::~CFType((ims::CFType *)(v38 - 120));
  ims::CFType::~CFType((ims::CFType *)(v38 - 104));
  ImsResult::~ImsResult(a12);
  ims::CFType::~CFType((ims::CFType *)&a27);
  ims::CFType::~CFType((ims::CFType *)&a29);
  ims::CFType::~CFType((ims::CFType *)&a31);
  _Unwind_Resume(a1);
}

void IMSSecurityPolicyManager::removePolicyForInterface(void *a1, std::string *a2)
{
  long long v4 = (void ***)(a1 + 6);
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 6), (void **)&a2->__r_.__value_.__l.__data_);
  if (a1 + 7 != v5)
  {
    uint64_t v6 = v5;
    std::string::basic_string[abi:ne180100]<0>(v22, "policy");
    std::string::basic_string[abi:ne180100]<0>(v20, "");
    uint64_t v7 = ims::debug((uint64_t)v22, (uint64_t)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"removing DROP policy for ", 25);
    *(unsigned char *)(v7 + 17) = 0;
    LoggableString::LoggableString(&__p, a2);
    (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 40))(v7, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    uid_t v8 = (unsigned int *)v6[8];
    uint64_t v9 = (unsigned int *)v6[9];
    while (v8 != v9)
    {
      unsigned int v10 = *v8++;
      PolicyDelete(a1[9], v10);
    }
    uint64_t v11 = operator new(0x18uLL);
    v11[4] = *((_DWORD *)v6 + 14);
    uint64_t v12 = (void *)a1[1];
    *(void *)uint64_t v11 = a1;
    *((void *)v11 + 1) = v12;
    void *v12 = v11;
    uint64_t v13 = a1[2] + 1;
    a1[1] = v11;
    a1[2] = v13;
    int v14 = (void **)v6[1];
    if (v14)
    {
      do
      {
        int v15 = v14;
        int v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      unint64_t v16 = v6;
      do
      {
        int v15 = (void **)v16[2];
        BOOL v17 = *v15 == v16;
        unint64_t v16 = v15;
      }
      while (!v17);
    }
    if (*v4 == v6) {
      *long long v4 = v15;
    }
    uint64_t v18 = (uint64_t *)a1[7];
    --a1[8];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v18, (uint64_t *)v6);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,IMSSecurityPolicyManager::DropPolicy>,0>((uint64_t)(v6 + 4));
    operator delete(v6);
  }
}

void sub_1C53C46FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void IMSSecurityPolicyManager::addSkipPolicy(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = 0;
  a3[2] = 0;
  a3[3] = 0;
  a3[7] = 0;
  a3[8] = 0;
  a3[5] = 0;
  a3[6] = 0;
  *a3 = &unk_1F20B2680;
  a3[1] = &_bambiDomain;
  a3[4] = 0;
  std::string v63 = (uint64_t (**)(void **, uint64_t))&unk_1F20B3050;
  uint64_t v64 = 0;
  unint64_t v61 = (uint64_t (**)(void **, uint64_t))&unk_1F20B35C8;
  uint64_t v62 = 0;
  uint64_t v50 = (uint64_t)(a1 + 5);
  uint64_t v51 = (void **)(a1 + 3);
  char v6 = 1;
  uint64_t v7 = 100;
  v60[0] = &unk_1F20B35C8;
  v60[1] = 0;
  do
  {
    char v8 = v6;
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    if (v9)
    {
      ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v60, @"ConditionType", @"BoundInterface");
      ims::CFString::CFString(&__p, (char *)a2, 0x8000100u);
      ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v60, @"InterfaceName", value);
      ims::CFType::~CFType((ims::CFType *)&__p);
    }
    else
    {
      ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v60, @"ConditionType", @"AllInterfaces");
    }
    ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v63, (const ims::CFType *)v60);
    (*(void (**)(void *, void, void))(v60[0] + 48))(v60, 0, 0);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v60, @"ConditionType", @"Application");
    std::string::basic_string[abi:ne180100]<0>(&__p, "67A03811-DB0A-594E-C2AE-8B0517EDF26F");
    ims::CFUUID::CFUUID(v65, (char *)&__p);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v60, @"ApplicationUUID", v65[1]);
    ims::CFType::~CFType((ims::CFType *)v65);
    if (v56 < 0) {
      operator delete(__p);
    }
    ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v63, (const ims::CFType *)v60);
    (*(void (**)(void *, void, void))(v60[0] + 48))(v60, 0, 0);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v60, @"ConditionType", @"RealApplication");
    ims::CFUUID::CFUUID(&__p, (char *)&kUUIDWhitelist[3 * v5]);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v60, @"RealApplicationUUID", value);
    ims::CFType::~CFType((ims::CFType *)&__p);
    ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v63, (const ims::CFType *)v60);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v61, @"Result", @"Skip");
    ims::CFNumber::CFNumber((ims::CFNumber *)&__p, 7400);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v61, @"SkipOrder", value);
    ims::CFType::~CFType((ims::CFType *)&__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
    std::string::basic_string[abi:ne180100]<0>(v65, "");
    uint64_t v10 = ims::debug((uint64_t)&__p, (uint64_t)v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"adding SKIP policy at ", 22);
    *(unsigned char *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v66 < 0) {
      operator delete(v65[0]);
    }
    if (v56 < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
    std::string::basic_string[abi:ne180100]<0>(v65, "");
    uint64_t v11 = ims::debug((uint64_t)&__p, (uint64_t)v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"conditions: ", 12);
    *(unsigned char *)(v11 + 17) = 0;
    uint64_t v12 = (unsigned char *)v63[2]((void **)&v63, v11);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v12[17] = 0;
    if (v66 < 0) {
      operator delete(v65[0]);
    }
    if (v56 < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
    std::string::basic_string[abi:ne180100]<0>(v65, "");
    uint64_t v13 = ims::debug((uint64_t)&__p, (uint64_t)v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"results: ", 9);
    *(unsigned char *)(v13 + 17) = 0;
    int v14 = (unsigned char *)v61[2]((void **)&v61, v13);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v14[17] = 0;
    if (v66 < 0) {
      operator delete(v65[0]);
    }
    if (v56 < 0) {
      operator delete(__p);
    }
    int v15 = PolicyAdd(a1[9], v7, v64, v62, 0);
    int v16 = v15;
    if (v15)
    {
      uint64_t v18 = (char *)a1[4];
      unint64_t v17 = a1[5];
      if ((unint64_t)v18 >= v17)
      {
        char v21 = (char *)*v51;
        uint64_t v22 = (v18 - (unsigned char *)*v51) >> 2;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62) {
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v17 - (void)v21;
        if (v24 >> 1 > v23) {
          unint64_t v23 = v24 >> 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          long long v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>(v50, v25);
          char v21 = (char *)a1[3];
          uint64_t v18 = (char *)a1[4];
        }
        else
        {
          long long v26 = 0;
        }
        unint64_t v27 = &v26[4 * v22];
        *(_DWORD *)unint64_t v27 = v16;
        uint64_t v19 = v27 + 4;
        while (v18 != v21)
        {
          int v28 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *((_DWORD *)v27 - 1) = v28;
          v27 -= 4;
        }
        a1[3] = v27;
        a1[4] = v19;
        a1[5] = &v26[4 * v25];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v18 = v15;
        uint64_t v19 = v18 + 4;
      }
      a1[4] = v19;
    }
    else
    {
      long long v57 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      std::string __p = &unk_1F20B2680;
      value = &_bambiDomain;
      int v55 = 0x40000000;
      uint64_t v20 = ImsResult::operator<<<char [26]>((uint64_t)&__p, "unable to add SKIP policy");
      ImsResult::operator=((uint64_t)a3, v20);
      ImsResult::~ImsResult((ImsResult *)&__p);
    }
    (*(void (**)(void *, void, void))(v60[0] + 48))(v60, 0, 0);
    ((void (*)(uint64_t (***)(void **, uint64_t), void, void))v61[6])(&v61, 0, 0);
    ((void (*)(uint64_t (***)(void **, uint64_t), void, void))v63[6])(&v63, 0, 0);
    char v6 = 0;
    uint64_t v7 = (v7 + 10);
    uint64_t v5 = 1;
  }
  while ((v8 & 1) != 0);
  int v70 = (uint64_t (**)(void **, uint64_t))&unk_1F20B3050;
  uint64_t v71 = 0;
  uint64_t v68 = (uint64_t (**)(void **, uint64_t))&unk_1F20B35C8;
  uint64_t v69 = 0;
  v67[0] = &unk_1F20B35C8;
  v67[1] = 0;
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v67, @"ConditionType", @"RemoteAddressSubnet");
  ims::CFNumber::CFNumber((ims::CFNumber *)&__p, 53);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v67, @"Port", value);
  ims::CFType::~CFType((ims::CFType *)&__p);
  ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v70, (const ims::CFType *)v67);
  (*(void (**)(void *, void, void))(v67[0] + 48))(v67, 0, 0);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v67, @"ConditionType", @"AllInterfaces");
  ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v70, (const ims::CFType *)v67);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v68, @"Result", @"Skip");
  ims::CFNumber::CFNumber((ims::CFNumber *)&__p, 7400);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v68, @"SkipOrder", value);
  ims::CFType::~CFType((ims::CFType *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
  std::string::basic_string[abi:ne180100]<0>(v65, "");
  uint64_t v29 = ims::debug((uint64_t)&__p, (uint64_t)v65);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"adding SKIP policy at ", 22);
  *(unsigned char *)(v29 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v29 + 17) = 0;
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  if (v56 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
  std::string::basic_string[abi:ne180100]<0>(v65, "");
  uint64_t v30 = ims::debug((uint64_t)&__p, (uint64_t)v65);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"conditions: ", 12);
  *(unsigned char *)(v30 + 17) = 0;
  int v31 = (unsigned char *)v70[2]((void **)&v70, v30);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v31[17] = 0;
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  if (v56 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
  std::string::basic_string[abi:ne180100]<0>(v65, "");
  uint64_t v32 = ims::debug((uint64_t)&__p, (uint64_t)v65);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"results: ", 9);
  *(unsigned char *)(v32 + 17) = 0;
  int v33 = (unsigned char *)v68[2]((void **)&v68, v32);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v33[17] = 0;
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  if (v56 < 0) {
    operator delete(__p);
  }
  int v34 = PolicyAdd(a1[9], 120, v71, v69, 0);
  int v35 = v34;
  if (v34)
  {
    char v37 = (char *)a1[4];
    unint64_t v36 = a1[5];
    if ((unint64_t)v37 >= v36)
    {
      std::vector<std::string> v40 = (char *)*v51;
      uint64_t v41 = (v37 - (unsigned char *)*v51) >> 2;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62) {
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v43 = v36 - (void)v40;
      if (v43 >> 1 > v42) {
        unint64_t v42 = v43 >> 1;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        long long v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>(v50, v44);
        std::vector<std::string> v40 = (char *)a1[3];
        char v37 = (char *)a1[4];
      }
      else
      {
        long long v45 = 0;
      }
      long long v46 = &v45[4 * v41];
      uint64_t v47 = &v45[4 * v44];
      *(_DWORD *)long long v46 = v35;
      uint64_t v38 = v46 + 4;
      while (v37 != v40)
      {
        int v48 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *((_DWORD *)v46 - 1) = v48;
        v46 -= 4;
      }
      a1[3] = v46;
      a1[4] = v38;
      a1[5] = v47;
      if (v40) {
        operator delete(v40);
      }
    }
    else
    {
      *(_DWORD *)char v37 = v34;
      uint64_t v38 = v37 + 4;
    }
    a1[4] = v38;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
    std::string::basic_string[abi:ne180100]<0>(v65, "");
    uint64_t v39 = ims::error((uint64_t)&__p, (uint64_t)v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"unable to add policy for DNS resolution", 39);
    *(unsigned char *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v39 + 17) = 0;
    if (v66 < 0) {
      operator delete(v65[0]);
    }
    if (v56 < 0) {
      operator delete(__p);
    }
  }
  ims::CFType::~CFType((ims::CFType *)v67);
  ims::CFType::~CFType((ims::CFType *)&v68);
  ims::CFType::~CFType((ims::CFType *)&v70);
  if (!v35)
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    std::string __p = &unk_1F20B2680;
    value = &_bambiDomain;
    int v55 = 0x40000000;
    uint64_t v49 = ImsResult::operator<<<char [65]>((uint64_t)&__p, "Unable to add SKIP rule for DNS - Proxy resolution will not work");
    ImsResult::operator=((uint64_t)a3, v49);
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  ims::CFType::~CFType((ims::CFType *)v60);
  ims::CFType::~CFType((ims::CFType *)&v61);
  ims::CFType::~CFType((ims::CFType *)&v63);
}

void sub_1C53C5434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ImsResult *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)(v37 - 136));
  ims::CFType::~CFType((ims::CFType *)(v37 - 120));
  ims::CFType::~CFType((ims::CFType *)(v37 - 104));
  ims::CFType::~CFType((ims::CFType *)&a26);
  ims::CFType::~CFType((ims::CFType *)&a28);
  ims::CFType::~CFType((ims::CFType *)&a30);
  ImsResult::~ImsResult(a13);
  _Unwind_Resume(a1);
}

char *IMSSecurityPolicyManager::createDropPolicy(void *a1, uint64_t a2)
{
  if (a1[9])
  {
    uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
    if ((v3 & 0x80u) != 0) {
      uint64_t v3 = *(void *)(a2 + 8);
    }
    if (v3)
    {
      uint64_t v5 = (uint64_t **)(a1 + 6);
      char v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 6), (void **)a2);
      uint64_t v7 = a1 + 7;
      if (a1 + 7 != v6)
      {
        char v8 = v6;
        uint64_t v9 = (unsigned int *)v6[8];
        uint64_t v10 = (unsigned int *)v6[9];
        if (v9 != v10)
        {
          do
          {
            unsigned int v11 = *v9++;
            PolicyDelete(a1[9], v11);
          }
          while (v9 != v10);
          uint64_t v9 = (unsigned int *)v8[8];
        }
        _OWORD v8[9] = v9;
        std::string::basic_string[abi:ne180100]<0>(v28, "policy");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v12 = ims::debug((uint64_t)v28, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"updating policy for ", 20);
        *(unsigned char *)(v12 + 17) = 0;
        LoggableString::LoggableString(&v25, (const std::string *)a2);
        (*(void (**)(uint64_t, std::string *))(*(void *)v12 + 40))(v12, &v25);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_19;
      }
      if (a1[2])
      {
        int v15 = *(_DWORD *)(a1[1] + 16);
        v28[0] = (void *)a2;
        *((_DWORD *)std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (void **)a2, (long long **)v28)+ 14) = v15;
        int v16 = (uint64_t *)a1[1];
        uint64_t v17 = *v16;
        *(void *)(v17 + 8) = v16[1];
        *(void *)v16[1] = v17;
        --a1[2];
        operator delete(v16);
        std::string::basic_string[abi:ne180100]<0>(v28, "policy");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v12 = ims::debug((uint64_t)v28, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"adding new policy for ", 22);
        *(unsigned char *)(v12 + 17) = 0;
        LoggableString::LoggableString(&v25, (const std::string *)a2);
        (*(void (**)(uint64_t, std::string *))(*(void *)v12 + 40))(v12, &v25);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_19:
        *(unsigned char *)(v12 + 17) = 0;
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        if (v29 < 0) {
          operator delete(v28[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v28, "policy");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v18 = ims::debug((uint64_t)v28, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"policy interfaces: ", 19);
        *(unsigned char *)(v18 + 17) = 0;
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        if (v29 < 0) {
          operator delete(v28[0]);
        }
        uint64_t v19 = *v5;
        if (*v5 != v7)
        {
          do
          {
            std::string::basic_string[abi:ne180100]<0>(v28, "policy");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v20 = ims::debug((uint64_t)v28, (uint64_t)__p);
            LoggableString::LoggableString(&v25, (const std::string *)(v19 + 4));
            (*(void (**)(uint64_t, std::string *))(*(void *)v20 + 40))(v20, &v25);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"[", 1);
            *(unsigned char *)(v20 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v20 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"] ", 2);
            *(unsigned char *)(v20 + 17) = 0;
            if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v25.__r_.__value_.__l.__data_);
            }
            if (v27 < 0) {
              operator delete(__p[0]);
            }
            if (v29 < 0) {
              operator delete(v28[0]);
            }
            char v21 = (uint64_t *)v19[1];
            if (v21)
            {
              do
              {
                uint64_t v22 = v21;
                char v21 = (uint64_t *)*v21;
              }
              while (v21);
            }
            else
            {
              do
              {
                uint64_t v22 = (uint64_t *)v19[2];
                BOOL v23 = *v22 == (void)v19;
                uint64_t v19 = v22;
              }
              while (!v23);
            }
            uint64_t v19 = v22;
          }
          while (v22 != v7);
        }
        std::string::basic_string[abi:ne180100]<0>(v28, "policy");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v24 = (unsigned char *)ims::debug((uint64_t)v28, (uint64_t)__p);
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v24[17] = 0;
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        if (v29 < 0) {
          operator delete(v28[0]);
        }
        v28[0] = (void *)a2;
        return std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (void **)a2, (long long **)v28)+ 56;
      }
      std::string::basic_string[abi:ne180100]<0>(v28, "policy");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v13 = ims::debug((uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"All drop policy slots filled", 28);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "policy");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v13 = ims::debug((uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"No network interface name", 25);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "policy");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v13 = ims::debug((uint64_t)v28, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Unable to add policy: session does not exist", 44);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v13 + 17) = 0;
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  return 0;
}

void sub_1C53C5C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSSecurityPolicyManager::addPolicyForInterface(IMSSecurityPolicyManager *this@<X0>, NetworkInterface *a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2)
  {
    memset((char *)&v13[1] + 8, 0, 48);
    *(void *)&v13[0] = &unk_1F20B2680;
    *((void *)&v13[0] + 1) = &_bambiDomain;
    LODWORD(v13[1]) = 1073741825;
    uint64_t v9 = (const std::string *)ImsResult::operator<<<char [27]>((uint64_t)v13, "no network interface given");
    ImsResult::ImsResult((ImsResult *)a3, v9);
LABEL_7:
    ImsResult::~ImsResult((ImsResult *)v13);
    return;
  }
  char v6 = (char *)a2 + 32;
  DropPolicy = IMSSecurityPolicyManager::createDropPolicy(this, (uint64_t)a2 + 32);
  if (!DropPolicy)
  {
    memset((char *)&v13[1] + 8, 0, 48);
    *(void *)&v13[0] = &unk_1F20B2680;
    *((void *)&v13[0] + 1) = &_bambiDomain;
    LODWORD(v13[1]) = 0x40000000;
    uint64_t v10 = ImsResult::operator<<<char [34]>((uint64_t)v13, "Unable to create drop policy for ");
    unsigned int v11 = (const std::string *)ImsResult::operator<<<std::string>(v10, (uint64_t)v6);
    ImsResult::ImsResult((ImsResult *)a3, v11);
    goto LABEL_7;
  }
  char v8 = DropPolicy;
  memset(v12, 0, sizeof(v12));
  NetworkInterface::allAddresses((unint64_t *)a2, v12, 3, 9);
  memset(v13, 0, 72);
  IMSSecurityPolicyManager::addDropPolicy((uint64_t)this, v6, v12, v8, v13);
  if ((*(unsigned int (**)(void, void))(**((void **)&v13[0] + 1) + 24))(*((void *)&v13[0] + 1), LODWORD(v13[1])))
  {
    ImsResult::ImsResult(a3, (uint64_t)v13);
  }
  else
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
  }
  ImsResult::~ImsResult((ImsResult *)v13);
  *(void *)&v13[0] = v12;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v13);
}

void sub_1C53C5EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void IMSSecurityPolicyManager::addPolicyForInterface(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  DropPolicy = IMSSecurityPolicyManager::createDropPolicy(a1, (uint64_t)a2);
  if (DropPolicy)
  {
    memset(v10, 0, sizeof(v10));
    memset(v9, 0, sizeof(v9));
    IMSSecurityPolicyManager::addDropPolicy((uint64_t)a1, a2, v10, DropPolicy, v9);
    if ((*(unsigned int (**)(void, void))(**(void **)&v9[8] + 24))(*(void *)&v9[8], *(unsigned int *)&v9[16]))
    {
      ImsResult::ImsResult(a3, (uint64_t)v9);
    }
    else
    {
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(void *)a3 = &unk_1F20B2680;
      *(void *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
    }
    ImsResult::~ImsResult((ImsResult *)v9);
    *(void *)uint64_t v9 = v10;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v9);
  }
  else
  {
    memset(&v9[24], 0, 48);
    *(void *)uint64_t v9 = &unk_1F20B2680;
    *(void *)&v9[8] = &_bambiDomain;
    *(_DWORD *)&v9[16] = 0x40000000;
    uint64_t v7 = ImsResult::operator<<<char [34]>((uint64_t)v9, "Unable to create drop policy for ");
    char v8 = (const std::string *)ImsResult::operator<<<std::string>(v7, (uint64_t)a2);
    ImsResult::ImsResult((ImsResult *)a3, v8);
    ImsResult::~ImsResult((ImsResult *)v9);
  }
}

void sub_1C53C607C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 - 56);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,IMSSecurityPolicyManager::DropPolicy>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,IMSSecurityPolicyManager::DropPolicy>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

char *std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, long long **a3)
{
  char v6 = a1 + 1;
  uint64_t v5 = (char *)a1[1];
  uint64_t v7 = (char **)(a1 + 1);
  char v8 = (char **)(a1 + 1);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v7 = (char **)(a1 + 1);
  while (1)
  {
    while (1)
    {
      char v8 = (char **)v5;
      uint64_t v10 = v5 + 32;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v8;
      uint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0) {
      break;
    }
    uint64_t v7 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  unsigned int v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    uint64_t v12 = *a3;
    uint64_t v19 = 0;
    uint64_t v13 = (char *)operator new(0x58uLL);
    v18[0] = v13;
    v18[1] = v6;
    int v14 = (std::string *)(v13 + 32);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v15 = *v12;
      *((void *)v13 + 6) = *((void *)v12 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    LOBYTE(v19) = 1;
    *(void *)uint64_t v13 = 0;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = v8;
    uint64_t *v7 = v13;
    int v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      uint64_t v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    unsigned int v11 = (char *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1C53C62C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,IMSSecurityPolicyManager::DropPolicy>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void __cxx_global_array_dtor_1()
{
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(kUUIDWhitelist[i + 5]) < 0) {
      operator delete((void *)kUUIDWhitelist[i + 3]);
    }
  }
}

uint64_t _GLOBAL__sub_I_IMSSecurityPolicyManager_cpp()
{
  uint64_t v0 = std::string::basic_string[abi:ne180100]<0>(kUUIDWhitelist, "719A92AD-BF6B-3069-B2A6-2FC4E2161BAF");
  std::string::basic_string[abi:ne180100]<0>(v0 + 3, "5145A6F0-97F2-3FBC-898F-F447240B1B58");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1, 0, &dword_1C51D1000);
}

void sub_1C53C63E0(_Unwind_Exception *exception_object)
{
  if (byte_1EBBDB95F < 0) {
    operator delete((void *)kUUIDWhitelist[0]);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LazuliSession::LazuliSession(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v8, "lazuli.session");
  uint64_t v4 = *a2;
  if (*(char *)(*a2 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 4160), *(void *)(v4 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v4 + 4160);
  }
  ImsLogContainer::ImsLogContainer(a1, &v8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)a1 = &unk_1F20C8860;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 136));
  *(void *)(a1 + 280) = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 288) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  SipUri::SipUri((SipUri *)(a1 + 312));
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(void *)(a1 + 848) = 90;
  *(_DWORD *)(a1 + 856) = 16777472;
  *(unsigned char *)(a1 + 860) = 0;
  *(void *)(a1 + 952) = 0;
  *(void *)(a1 + 968) = 0;
  *(void *)(a1 + 960) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_WORD *)(a1 + 944) = 0;
  return a1;
}

void sub_1C53C655C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LazuliSession::~LazuliSession(void **this)
{
  *this = &unk_1F20C8860;
  if (*((char *)this + 975) < 0) {
    operator delete(this[119]);
  }
  LazuliSessionOptions::~LazuliSessionOptions(this + 93);
  if (*((char *)this + 743) < 0) {
    operator delete(this[90]);
  }
  SipUri::~SipUri((SipUri *)(this + 39));
  unint64_t v2 = (std::__shared_weak_count *)this[38];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[36];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipTimerContainer::~SipTimerContainer((SipTimerContainer *)(this + 17));
  uint64_t v4 = (std::__shared_weak_count *)this[16];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[14];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  LazuliSession::~LazuliSession(this);
  JUMPOUT(0x1C878E320);
}

void LazuliSession::attachSipSession(std::string *this, uint64_t *a2)
{
  if (*a2)
  {
    if (this[12].__r_.__value_.__l.__size_) {
      LazuliSession::detachSipSession((LazuliSession *)this);
    }
    uint64_t v4 = (*(uint64_t (**)(std::string *))(this->__r_.__value_.__r.__words[0] + 64))(this);
    (*(void (**)(std::string *, uint64_t))(this->__r_.__value_.__r.__words[0] + 16))(this, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"attaching SipSession ", 21);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(void **__return_ptr))(*(void *)*a2 + 320))(__p);
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 40))(v4, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    uint64_t size = *a2;
    std::string::size_type v5 = a2[1];
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (std::__shared_weak_count *)this[12].__r_.__value_.__r.__words[2];
    this[12].__r_.__value_.__l.__size_ = size;
    this[12].__r_.__value_.__r.__words[2] = v5;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      uint64_t size = this[12].__r_.__value_.__l.__size_;
    }
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v19, &this[4].__r_.__value_.__l.__size_);
    SipSession::setLazuli(size, v19, (uint64_t)v20);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    uint64_t v8 = *(void *)(*a2 + 248);
    uint64_t v9 = *(std::__shared_weak_count **)(*a2 + 256);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *(void *)(v8 + 640);
    uint64_t v11 = v8 + 232;
    if (v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = v11;
    }
    SipUri::operator=((SipUri *)&this[13], v12);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    uint64_t v13 = *(const std::string **)(*a2 + 248);
    int v14 = *(std::__shared_weak_count **)(*a2 + 256);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::operator=(this + 30, v13 + 27);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    long long v15 = *(const std::string **)(*a2 + 248);
    int v16 = *(std::__shared_weak_count **)(*a2 + 256);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::operator=(this + 32, v15 + 69);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    uint64_t v17 = *(void *)(*a2 + 248);
    uint64_t v18 = *(std::__shared_weak_count **)(*a2 + 256);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::operator=(this + 33, (const std::string *)(v17 + 1712));
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
}

void sub_1C53C698C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void LazuliSession::detachSipSession(LazuliSession *this)
{
  if (*((void *)this + 37))
  {
    uint64_t v2 = (*(uint64_t (**)(LazuliSession *))(*(void *)this + 64))(this);
    (*(void (**)(LazuliSession *, uint64_t))(*(void *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"detaching SipSession ", 21);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(void **__return_ptr))(**((void **)this + 37) + 320))(__p);
    (*(void (**)(uint64_t, void **))(*(void *)v2 + 40))(v2, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    SipSession::setLazuli(*((void *)this + 37), 0, 0);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
    *((void *)this + 37) = 0;
    *((void *)this + 38) = 0;
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
}

void sub_1C53C6B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::setLazuli(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1144) = a2;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 1152);
  *(void *)(a1 + 1152) = a3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    a2 = *(void *)(a1 + 1144);
  }
  *(unsigned char *)(a1 + 1352) = a2 != 0;
}

void LazuliSession::initializeMobileTerminated(std::string *this, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v10[0] = *a2;
  v10[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LazuliSession::attachSipSession(this, v10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  IMSClientManager::instance(v4);
  IPTelephonyManager::getInstance(&v8);
  uint64_t v5 = *(void *)(v8 + 200);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v6, &this[4].__r_.__value_.__l.__size_);
  IMSCallManager::trackMTLazuliSession(v5, (void **)&this[32].__r_.__value_.__l.__data_, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C53C6C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void LazuliSession::initializeMobileOriginated(LazuliSession *this@<X0>, const LazuliSessionOptions *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v6)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    uint64_t v41 = v8;
    if (v8)
    {
      uint64_t v40 = *((void *)this + 35);
      if (v40)
      {
        std::string::operator=((std::string *)this + 31, (const std::string *)a2);
        std::string::operator=((std::string *)this + 32, (const std::string *)a2 + 1);
        std::string::operator=((std::string *)this + 33, (const std::string *)a2 + 2);
        std::string::operator=((std::string *)this + 34, (const std::string *)a2 + 3);
        long long v9 = *((_OWORD *)a2 + 6);
        *(void *)((char *)this + 853) = *(void *)((char *)a2 + 109);
        *(_OWORD *)((char *)this + 840) = v9;
        std::string::operator=((std::string *)this + 36, (const std::string *)a2 + 5);
        std::string::operator=((std::string *)this + 37, (const std::string *)a2 + 6);
        std::string::operator=((std::string *)this + 38, (const std::string *)a2 + 7);
        memset(&v39, 0, sizeof(v39));
        uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 36);
        if (v10)
        {
          uint64_t v10 = std::__shared_weak_count::lock(v10);
          uint64_t v11 = v10;
          if (v10) {
            uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 35);
          }
        }
        else
        {
          uint64_t v11 = 0;
        }
        uint64_t v12 = (ImsPrefs *)SipStack::prefs((SipStack *)v10);
        OriginUsernameKey = (void **)ImsPrefs::getOriginUsernameKey(v12);
        ImsPrefs::stringValue(v12, OriginUsernameKey);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v39.__r_.__value_.__l.__size_;
        }
        if (!size)
        {
          uint64_t v38 = 0;
          long long v36 = 0u;
          memset(v37, 0, sizeof(v37));
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v25 = 0u;
          long long v15 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)this + 36));
          int v16 = (const SipUri *)SipUserAgent::publicUri(*(SipUserAgent **)(*((void *)this + 35) + 144));
          SipUri::SipUri((SipUri *)&v25, v16);
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          std::string::basic_string[abi:ne180100]<0>(__str, "");
          std::string::operator=((std::string *)((char *)v37 + 8), (const std::string *)__str);
          if ((__str[23] & 0x80000000) != 0) {
            operator delete(*(void **)__str);
          }
          SipUri::asString((uint64_t)&v25, __str);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v39.__r_.__value_.__l.__data_);
          }
          std::string v39 = *(std::string *)__str;
          SipUri::~SipUri((SipUri *)&v25);
        }
        std::string::basic_string[abi:ne180100]<0>(__str, " ");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        ims::substituteVar(&v39, (uint64_t)__str, (uint64_t)__p, &v25);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v25;
        v39.__r_.__value_.__r.__words[2] = v26;
        BYTE7(v26) = 0;
        LOBYTE(v25) = 0;
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        uint64_t v22 = 0;
        long long v21 = 0u;
        memset(__str, 0, sizeof(__str));
        uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 36);
        if (v17)
        {
          uint64_t v17 = std::__shared_weak_count::lock(v17);
          uint64_t v18 = v17;
          if (v17) {
            uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 35);
          }
        }
        else
        {
          uint64_t v18 = 0;
        }
        SipStack::mediaAddress((SipStack *)v17, (uint64_t)__str);
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        __p[0] = 0;
        __p[1] = 0;
        SipHost::address((SipHost *)__str, __p);
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v19, (void *)this + 13);
        std::allocate_shared[abi:ne180100]<SDPSession,std::allocator<SDPSession>,std::shared_ptr<LazuliSession>,std::string &,std::shared_ptr<IpAddress> &,ims::TextMediaSessionMode,std::shared_ptr<SipStack> &,void>((uint64_t)&v25, &v19, (long long *)&v39, (uint64_t)__p, &v40);
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0x40000000;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C53C7254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  SipUri::~SipUri((SipUri *)&a29);
  if (*(char *)(v30 - 105) < 0) {
    operator delete(*(void **)(v30 - 128));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void LazuliSession::startSession(std::string *this)
{
  uint64_t v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  std::string::size_type size = (uint64_t *)this[12].__r_.__value_.__l.__size_;
  if (this[35].__r_.__value_.__s.__data_[19]) {
    uint64_t v3 = "InitialInviteLazuli";
  }
  else {
    uint64_t v3 = "EmptyInvite";
  }
  SipSession::sendLazuliInvite(size, (uint64_t)v3, (ImsResult *)&v11);
  char v4 = (*(uint64_t (**)(void, void))(**((void **)&v11 + 1) + 24))(*((void *)&v11 + 1), v12);
  std::string::size_type v5 = this->__r_.__value_.__r.__words[0];
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(std::string *))(v5 + 56))(this);
    (*(void (**)(std::string *, uint64_t))(this->__r_.__value_.__r.__words[0] + 16))(this, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Lazuli invite failure: ", 23);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(long long *, uint64_t))(v11 + 16))(&v11, v6);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    v9[0] = 0;
    v9[1] = 0;
    uint64_t v10 = 0;
    SipUri::SipUri((SipUri *)v8);
    LazuliSession::handleInviteFailure(this, 0, (uint64_t)v9, (const SipUri *)v8, 0);
    SipUri::~SipUri((SipUri *)v8);
    if (SHIBYTE(v10) < 0) {
      operator delete(v9[0]);
    }
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(std::string *))(v5 + 64))(this);
    (*(void (**)(std::string *, uint64_t))(this->__r_.__value_.__r.__words[0] + 16))(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"starting Lazuli session", 23);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
  }
  ImsResult::~ImsResult((ImsResult *)&v11);
}

void sub_1C53C75F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SipUri::~SipUri((SipUri *)&a9);
  if (*(char *)(v9 - 113) < 0) {
    operator delete(*(void **)(v9 - 136));
  }
  ImsResult::~ImsResult((ImsResult *)(v9 - 112));
  _Unwind_Resume(a1);
}

void LazuliSession::handleInviteFailure(std::string *a1, unsigned int a2, uint64_t a3, const SipUri *a4, unsigned int a5)
{
  uint64_t v10 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 56))(a1);
  (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Handling invite failure statusCode ", 35);
  *(unsigned char *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" statusText ", 12);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" remoteUri ", 11);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(const SipUri *, uint64_t))(*(void *)a4 + 40))(a4, v10);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (a2 == 503)
  {
    if (a5)
    {
      uint64_t v11 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 64))(a1);
      (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Invite response is 503 with Retry-After: ", 41);
      *(unsigned char *)(v11 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v11 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" for conv ", 10);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, a1 + 32);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v11 + 17) = 0;
      std::string::pointer data = (std::__shared_weak_count *)a1[12].__r_.__value_.__l.__data_;
      if (data)
      {
        long long v13 = std::__shared_weak_count::lock(data);
        if (v13)
        {
          long long v14 = v13;
          std::string::size_type v15 = a1[11].__r_.__value_.__r.__words[2];
          if (v15)
          {
            *(_OWORD *)uint64_t v95 = 0uLL;
            uint64_t v16 = *(void *)(v15 + 144);
            uint64_t v17 = *(SipDialogManager **)(v16 + 176);
            uint64_t v18 = *(std::__shared_weak_count **)(v16 + 184);
            if (v18) {
              atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipDialogManager::initializeSession(v17, a4, a1 + 31, (uint64_t)v95);
            if (v18) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v18);
            }
            if (*(void *)v95)
            {
              uint64_t v19 = *(std::__shared_weak_count **)&v95[8];
              long long v100 = *(_OWORD *)v95;
              if (*(void *)&v95[8]) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v95[8] + 8), 1uLL, memory_order_relaxed);
              }
              LazuliSession::attachSipSession(a1, (uint64_t *)&v100);
              if (v19) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v19);
              }
              std::string::size_type size = a1[4].__r_.__value_.__l.__size_;
              uint64_t v20 = (std::__shared_weak_count *)a1[4].__r_.__value_.__r.__words[2];
              if (v20) {
                atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              dispatch_time_t v22 = dispatch_time(0, 1000000000 * a5);
              BOOL v23 = sImsDispatchQueue;
              if (!sImsDispatchQueue)
              {
                BOOL v23 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
                sImsDispatchQueue = (uint64_t)v23;
              }
              block[0] = MEMORY[0x1E4F143A8];
              block[1] = 1174405120;
              block[2] = ___ZN13LazuliSession19handleInviteFailureEjRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERK6SipUrij_block_invoke;
              block[3] = &__block_descriptor_tmp_38;
              block[4] = a1;
              block[5] = size;
              std::string v99 = v20;
              if (v20) {
                atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              dispatch_after(v22, v23, block);
              if (v99) {
                std::__shared_weak_count::__release_weak(v99);
              }
              if (v20) {
                std::__shared_weak_count::__release_weak(v20);
              }
              if (*(void *)&v95[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v95[8]);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
              return;
            }
            if (*(void *)&v95[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v95[8]);
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
      }
    }
  }
  xpc_object_t v97 = 0;
  xpc_object_t v24 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v25 = v24;
  uint64_t v26 = MEMORY[0x1E4F14590];
  if (v24)
  {
    xpc_object_t v97 = v24;
  }
  else
  {
    xpc_object_t v25 = xpc_null_create();
    xpc_object_t v97 = v25;
    if (!v25)
    {
      xpc_object_t v27 = xpc_null_create();
      xpc_object_t v25 = 0;
      goto LABEL_38;
    }
  }
  if (MEMORY[0x1C878F160](v25) == v26)
  {
    xpc_retain(v25);
    goto LABEL_39;
  }
  xpc_object_t v27 = xpc_null_create();
LABEL_38:
  xpc_object_t v97 = v27;
LABEL_39:
  xpc_release(v25);
  long long v96 = 0u;
  memset(v95, 0, sizeof(v95));
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)&a1[1].__r_.__value_.__l.__size_, &v93);
  if (v93)
  {
    if (a1[40].__r_.__value_.__s.__data_[15] < 0)
    {
      if (a1[40].__r_.__value_.__r.__words[0])
      {
LABEL_42:
        uint64_t v28 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 56))(a1);
        (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"Failed to create session for Group-Leave trx ", 45);
        long long v29 = &a1[39].__r_.__value_.__s.__data_[16];
        *(unsigned char *)(v28 + 17) = 0;
        (*(void (**)(uint64_t, std::string::size_type *))(*(void *)v28 + 32))(v28, &a1[39].__r_.__value_.__r.__words[2]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)" conv ", 6);
        *(unsigned char *)(v28 + 17) = 0;
        uint64_t v30 = (const char *)&a1[32];
        (*(void (**)(uint64_t, std::string *))(*(void *)v28 + 32))(v28, a1 + 32);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v28 + 17) = 0;
        v66[0] = 0;
        xpc_object_t v31 = xpc_dictionary_create(0, 0, 0);
        xpc_object_t v32 = v31;
        if (v31)
        {
          v66[0] = v31;
        }
        else
        {
          xpc_object_t v32 = xpc_null_create();
          v66[0] = v32;
          if (!v32)
          {
            xpc_object_t v33 = xpc_null_create();
            xpc_object_t v32 = 0;
            goto LABEL_89;
          }
        }
        if (MEMORY[0x1C878F160](v32) == v26)
        {
          xpc_retain(v32);
LABEL_90:
          xpc_release(v32);
          xpc_object_t v91 = xpc_BOOL_create(0);
          if (!v91) {
            xpc_object_t v91 = xpc_null_create();
          }
          std::string __p = v66;
          unint64_t v60 = (std::__shared_weak_count *)"kIsSuccess";
          xpc::dict::object_proxy::operator=((uint64_t)&__p, &v91, &v92);
          xpc_release(v92);
          xpc_object_t v92 = 0;
          xpc_release(v91);
          xpc_object_t v91 = 0;
          if (a1[40].__r_.__value_.__s.__data_[15] < 0) {
            long long v29 = *(const char **)v29;
          }
          xpc_object_t v89 = xpc_string_create(v29);
          if (!v89) {
            xpc_object_t v89 = xpc_null_create();
          }
          std::string __p = v66;
          unint64_t v60 = (std::__shared_weak_count *)"kTransactionId";
          xpc::dict::object_proxy::operator=((uint64_t)&__p, &v89, &v90);
          xpc_release(v90);
          xpc_object_t v90 = 0;
          xpc_release(v89);
          xpc_object_t v89 = 0;
          if (SHIBYTE(a1[32].__r_.__value_.__r.__words[2]) < 0) {
            uint64_t v30 = *(const char **)v30;
          }
          xpc_object_t v87 = xpc_string_create(v30);
          if (!v87) {
            xpc_object_t v87 = xpc_null_create();
          }
          std::string __p = v66;
          unint64_t v60 = (std::__shared_weak_count *)"kConversationId";
          xpc::dict::object_proxy::operator=((uint64_t)&__p, &v87, &v88);
          xpc_release(v88);
          xpc_object_t v88 = 0;
          xpc_release(v87);
          xpc_object_t v87 = 0;
          unint64_t v44 = (const char *)&a1[33];
          if (SHIBYTE(a1[33].__r_.__value_.__r.__words[2]) < 0) {
            unint64_t v44 = *(const char **)v44;
          }
          xpc_object_t v85 = xpc_string_create(v44);
          if (!v85) {
            xpc_object_t v85 = xpc_null_create();
          }
          std::string __p = v66;
          unint64_t v60 = (std::__shared_weak_count *)"kContributionId";
          xpc::dict::object_proxy::operator=((uint64_t)&__p, &v85, &v86);
          xpc_release(v86);
          xpc_object_t v86 = 0;
          xpc_release(v85);
          long long v45 = v93;
          xpc_object_t v84 = v66[0];
          xpc_object_t v85 = 0;
          if (v66[0]) {
            xpc_retain(v66[0]);
          }
          else {
            xpc_object_t v84 = xpc_null_create();
          }
          LazuliDelegate::handleLeaveGroupChat(v45, &v84);
          xpc_release(v84);
          xpc_object_t v84 = 0;
          xpc_release(v66[0]);
          goto LABEL_134;
        }
        xpc_object_t v33 = xpc_null_create();
LABEL_89:
        v66[0] = v33;
        goto LABEL_90;
      }
    }
    else if (a1[40].__r_.__value_.__s.__data_[15])
    {
      goto LABEL_42;
    }
    if (SHIBYTE(a1[36].__r_.__value_.__r.__words[2]) < 0)
    {
      if (!a1[36].__r_.__value_.__l.__size_) {
        goto LABEL_54;
      }
    }
    else if (!*((unsigned char *)&a1[36].__r_.__value_.__s + 23))
    {
LABEL_54:
      uint64_t v34 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 56))(a1);
      (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"Failed to establish lazuli session due to INVITE error for message send trx ", 76);
      *(unsigned char *)(v34 + 17) = 0;
      long long v35 = (const char *)&a1[37];
      (*(void (**)(uint64_t, std::string *))(*(void *)v34 + 32))(v34, a1 + 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)" conv ", 6);
      *(unsigned char *)(v34 + 17) = 0;
      long long v36 = (const char *)&a1[32];
      (*(void (**)(uint64_t, std::string *))(*(void *)v34 + 32))(v34, a1 + 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)" remoteUri ", 11);
      *(unsigned char *)(v34 + 17) = 0;
      SipUri::asString((uint64_t)a4, &__p);
      (*(void (**)(uint64_t, void **))(*(void *)v34 + 32))(v34, &__p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v34 + 17) = 0;
      if (v61 < 0) {
        operator delete(__p);
      }
      xpc_object_t v73 = xpc_BOOL_create(0);
      if (!v73) {
        xpc_object_t v73 = xpc_null_create();
      }
      std::string __p = &v97;
      unint64_t v60 = (std::__shared_weak_count *)"kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&__p, &v73, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v73);
      xpc_object_t v73 = 0;
      if (SHIBYTE(a1[37].__r_.__value_.__r.__words[2]) < 0) {
        long long v35 = *(const char **)v35;
      }
      xpc_object_t v71 = xpc_string_create(v35);
      if (!v71) {
        xpc_object_t v71 = xpc_null_create();
      }
      std::string __p = &v97;
      unint64_t v60 = (std::__shared_weak_count *)"kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&__p, &v71, &v72);
      xpc_release(v72);
      xpc_object_t v72 = 0;
      xpc_release(v71);
      xpc_object_t v71 = 0;
      if (SHIBYTE(a1[32].__r_.__value_.__r.__words[2]) < 0) {
        long long v36 = *(const char **)v36;
      }
      xpc_object_t v69 = xpc_string_create(v36);
      if (!v69) {
        xpc_object_t v69 = xpc_null_create();
      }
      std::string __p = &v97;
      unint64_t v60 = (std::__shared_weak_count *)"kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&__p, &v69, &v70);
      xpc_release(v70);
      xpc_object_t v70 = 0;
      xpc_release(v69);
      xpc_object_t v69 = 0;
      SipUri::asString((uint64_t)a4, &__p);
      if (v61 >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      xpc_object_t v67 = xpc_string_create(p_p);
      if (!v67) {
        xpc_object_t v67 = xpc_null_create();
      }
      v66[0] = &v97;
      v66[1] = "kRemoteUri";
      xpc::dict::object_proxy::operator=((uint64_t)v66, &v67, &v68);
      xpc_release(v68);
      xpc_object_t v68 = 0;
      xpc_release(v67);
      xpc_object_t v67 = 0;
      if (v61 < 0) {
        operator delete(__p);
      }
      if (*(char *)(a3 + 23) < 0)
      {
        if (!*(void *)(a3 + 8)) {
          goto LABEL_81;
        }
        uint64_t v38 = *(const char **)a3;
      }
      else
      {
        uint64_t v38 = (const char *)a3;
        if (!*(unsigned char *)(a3 + 23))
        {
LABEL_81:
          if (a2)
          {
            xpc_object_t v62 = xpc_int64_create(a2);
            if (!v62) {
              xpc_object_t v62 = xpc_null_create();
            }
            std::string __p = &v97;
            unint64_t v60 = (std::__shared_weak_count *)"kErrorCode";
            xpc::dict::object_proxy::operator=((uint64_t)&__p, &v62, &v63);
            xpc_release(v63);
            xpc_object_t v63 = 0;
            xpc_release(v62);
            xpc_object_t v62 = 0;
            SipResultDomain::makeResult(a2, a3, (ImsResult *)&__p);
            if (BYTE8(v96))
            {
              ImsResult::operator=((uint64_t)v95, (uint64_t)&__p);
            }
            else
            {
              ImsResult::ImsResult((uint64_t)v95, (uint64_t)&__p);
              BYTE8(v96) = 1;
            }
            ImsResult::~ImsResult((ImsResult *)&__p);
          }
          goto LABEL_134;
        }
      }
      xpc_object_t v64 = xpc_string_create(v38);
      if (!v64) {
        xpc_object_t v64 = xpc_null_create();
      }
      std::string __p = &v97;
      unint64_t v60 = (std::__shared_weak_count *)"kReason";
      xpc::dict::object_proxy::operator=((uint64_t)&__p, &v64, &v65);
      xpc_release(v65);
      xpc_object_t v65 = 0;
      xpc_release(v64);
      xpc_object_t v64 = 0;
      goto LABEL_81;
    }
    if (a1[39].__r_.__value_.__s.__data_[9]) {
      goto LABEL_54;
    }
    uint64_t v39 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 56))(a1);
    (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"Failed group creation trx ", 26);
    *(unsigned char *)(v39 + 17) = 0;
    uint64_t v40 = (const char *)&a1[37];
    (*(void (**)(uint64_t, std::string *))(*(void *)v39 + 32))(v39, a1 + 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)" conv ", 6);
    *(unsigned char *)(v39 + 17) = 0;
    uint64_t v41 = (const char *)&a1[32];
    (*(void (**)(uint64_t, std::string *))(*(void *)v39 + 32))(v39, a1 + 32);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v39 + 17) = 0;
    v66[0] = 0;
    xpc_object_t v42 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v43 = v42;
    if (v42)
    {
      v66[0] = v42;
    }
    else
    {
      xpc_object_t v43 = xpc_null_create();
      v66[0] = v43;
      if (!v43)
      {
        xpc_object_t v46 = xpc_null_create();
        xpc_object_t v43 = 0;
        goto LABEL_115;
      }
    }
    if (MEMORY[0x1C878F160](v43) == v26)
    {
      xpc_retain(v43);
LABEL_116:
      xpc_release(v43);
      xpc_object_t v82 = xpc_BOOL_create(0);
      if (!v82) {
        xpc_object_t v82 = xpc_null_create();
      }
      std::string __p = v66;
      unint64_t v60 = (std::__shared_weak_count *)"kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&__p, &v82, &v83);
      xpc_release(v83);
      xpc_object_t v83 = 0;
      xpc_release(v82);
      xpc_object_t v82 = 0;
      if (SHIBYTE(a1[37].__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v40 = *(const char **)v40;
      }
      xpc_object_t v80 = xpc_string_create(v40);
      if (!v80) {
        xpc_object_t v80 = xpc_null_create();
      }
      std::string __p = v66;
      unint64_t v60 = (std::__shared_weak_count *)"kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&__p, &v80, &v81);
      xpc_release(v81);
      xpc_object_t v81 = 0;
      xpc_release(v80);
      xpc_object_t v80 = 0;
      if (SHIBYTE(a1[32].__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v41 = *(const char **)v41;
      }
      xpc_object_t v78 = xpc_string_create(v41);
      if (!v78) {
        xpc_object_t v78 = xpc_null_create();
      }
      std::string __p = v66;
      unint64_t v60 = (std::__shared_weak_count *)"kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&__p, &v78, &v79);
      xpc_release(v79);
      xpc_object_t v79 = 0;
      xpc_release(v78);
      xpc_object_t v78 = 0;
      uint64_t v47 = (const char *)&a1[33];
      if (SHIBYTE(a1[33].__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v47 = *(const char **)v47;
      }
      xpc_object_t v76 = xpc_string_create(v47);
      if (!v76) {
        xpc_object_t v76 = xpc_null_create();
      }
      std::string __p = v66;
      unint64_t v60 = (std::__shared_weak_count *)"kContributionId";
      xpc::dict::object_proxy::operator=((uint64_t)&__p, &v76, &v77);
      xpc_release(v77);
      xpc_object_t v77 = 0;
      xpc_release(v76);
      int v48 = v93;
      xpc_object_t v75 = v66[0];
      xpc_object_t v76 = 0;
      if (v66[0]) {
        xpc_retain(v66[0]);
      }
      else {
        xpc_object_t v75 = xpc_null_create();
      }
      LazuliDelegate::handleGroupChatCreated(v48, &v75);
      xpc_release(v75);
      xpc_object_t v75 = 0;
      xpc_release(v66[0]);
      goto LABEL_134;
    }
    xpc_object_t v46 = xpc_null_create();
LABEL_115:
    v66[0] = v46;
    goto LABEL_116;
  }
LABEL_134:
  if (v94) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v94);
  }
  uint64_t v49 = std::__shared_weak_count::lock((std::__shared_weak_count *)a1[12].__r_.__value_.__l.__data_);
  uint64_t v50 = *(void *)(a1[11].__r_.__value_.__r.__words[2] + 144);
  uint64_t v52 = *(void *)(v50 + 208);
  uint64_t v51 = *(std::__shared_weak_count **)(v50 + 216);
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "InternalError");
  v57[0] = 0;
  char v58 = 0;
  if (BYTE8(v96))
  {
    ImsResult::ImsResult((ImsResult *)v57, (const std::string *)v95);
    char v58 = 1;
  }
  uint64_t v53 = a1 + 32;
  SipLazuliManager::terminateMessageSession(v52, v53, &__p, v57);
  if (v58) {
    ImsResult::~ImsResult((ImsResult *)v57);
  }
  if (v61 < 0) {
    operator delete(__p);
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  IMSClientManager::instance(v54);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  uint64_t v55 = *((void *)__p + 25);
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "InternalError");
  xpc_object_t v56 = v97;
  if (v97) {
    xpc_retain(v97);
  }
  else {
    xpc_object_t v56 = xpc_null_create();
  }
  IMSCallManager::terminateLazuli(v55, v53, &__p, &v56);
  xpc_release(v56);
  xpc_object_t v56 = 0;
  if (v61 < 0) {
    operator delete(__p);
  }
  if (BYTE8(v96)) {
    ImsResult::~ImsResult((ImsResult *)v95);
  }
  xpc_release(v97);
}

void sub_1C53C870C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,xpc_object_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,xpc_object_t object,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,xpc_object_t a55)
{
  xpc_release(object);
  xpc_release(a36);
  long long v57 = *(std::__shared_weak_count **)(v55 - 232);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  if (*(unsigned char *)(v55 - 152)) {
    ImsResult::~ImsResult((ImsResult *)(v55 - 224));
  }
  xpc_release(*(xpc_object_t *)(v55 - 144));
  _Unwind_Resume(a1);
}

void ___ZN13LazuliSession19handleInviteFailureEjRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERK6SipUrij_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (LazuliSession *)a1[4];
    char v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      std::string::size_type v5 = v4;
      if (a1[5]) {
        LazuliSession::startSession(v3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C53C89F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c39_ZTSKNSt3__18weak_ptrI13LazuliSessionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSKNSt3__18weak_ptrI13LazuliSessionEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void SipResultDomain::makeResult(int a1@<W0>, uint64_t a2@<X1>, ImsResult *a3@<X8>)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  v5[0] = &unk_1F20B2680;
  v5[1] = &SipResultDomain::_domain;
  int v6 = a1;
  char v4 = (const std::string *)ImsResult::operator<<<std::string>((uint64_t)v5, a2);
  ImsResult::ImsResult(a3, v4);
  ImsResult::~ImsResult((ImsResult *)v5);
}

void sub_1C53C8AB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void LazuliSession::endSession(LazuliSession *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(LazuliSession *))(*(void *)a1 + 64))(a1);
  (*(void (**)(LazuliSession *, uint64_t))(*(void *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"End Session ", 12);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  std::string::size_type v5 = (std::__shared_weak_count *)*((void *)a1 + 37);
  if (v5)
  {
    SipSession::hangUp(v5, a2, (uint64_t)v6);
    ImsResult::~ImsResult((ImsResult *)v6);
    LazuliSession::detachSipSession(a1);
  }
}

void LazuliSession::leaveGroup(SipSession **a1, std::string *__str)
{
  if (a1[37])
  {
    std::string::operator=((std::string *)(a1 + 119), __str);
    uint64_t v4 = (*((uint64_t (**)(SipSession **))*a1 + 8))(a1);
    (*((void (**)(SipSession **, uint64_t))*a1 + 2))(a1, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"LeaveGroup trx ", 15);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, SipSession **))(*(void *)v4 + 32))(v4, a1 + 119);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" conv ", 6);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, SipSession **))(*(void *)v4 + 32))(v4, a1 + 96);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v12 = 0u;
    *(_OWORD *)uint64_t v11 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v9, "UserTriggered");
    std::string::basic_string[abi:ne180100]<0>(__p, "Call completed");
    BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)v11, (long long *)v9, 200, (long long *)__p, (long long *)&SipReason::kProtocolSip);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    SipSession::hangUp(a1[37], (uint64_t)v6);
    ImsResult::~ImsResult((ImsResult *)v6);
    if (*((void *)&v18 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
    }
    if (*((void *)&v17 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(*((void **)&v15 + 1));
    }
    if (SBYTE7(v14) < 0) {
      operator delete((void *)v13);
    }
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[1]);
    }
  }
  else
  {
    uint64_t v5 = (*((uint64_t (**)(SipSession **))*a1 + 7))(a1);
    (*((void (**)(SipSession **, uint64_t))*a1 + 2))(a1, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"SipSession not active for LeaveGroup trx ", 41);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 32))(v5, __str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" conv ", 6);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, SipSession **))(*(void *)v5 + 32))(v5, a1 + 96);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
  }
}

void sub_1C53C8F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
}

void LazuliSession::forceDetachSipSession(LazuliSession *this)
{
  uint64_t v2 = (*(uint64_t (**)(LazuliSession *))(*(void *)this + 64))(this);
  (*(void (**)(LazuliSession *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Forcefully detaching sip session. Reason: Terminate all lazuli sessions", 71);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (*((void *)this + 37))
  {
    LazuliSession::detachSipSession(this);
  }
}

void LazuliSession::handleSdpOfferInFork(void *a1@<X0>, uint64_t a2@<X1>, xpc_object_t *a3@<X3>, uint64_t a4@<X8>)
{
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  v34[0] = &unk_1F20B2680;
  v34[1] = &_bambiDomain;
  v34[2] = 0;
  char v8 = (SDPSession *)a1[15];
  if (v8)
  {
    int hasStream = SDPSession::hasStream(v8);
    if (*((unsigned char *)a1 + 944) || (hasStream & 1) != 0)
    {
      if (hasStream)
      {
        uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
        (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"TODO: Handle re-invite", 22);
        *(unsigned char *)(v10 + 17) = 0;
        uint64_t v11 = (unsigned char *)(v10 + 17);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        int v12 = 0x40000000;
        long long v13 = &_bambiDomain;
LABEL_8:
        unsigned char *v11 = 0;
        *(_OWORD *)(a4 + 24) = 0u;
        *(_OWORD *)(a4 + 40) = 0u;
        *(_OWORD *)(a4 + 56) = 0u;
        *(void *)a4 = &unk_1F20B2680;
        *(void *)(a4 + 8) = v13;
        *(_DWORD *)(a4 + 16) = v12;
        goto LABEL_51;
      }
LABEL_7:
      uint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 48))(a1);
      (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Received a new offer/answer, but we don't have any media streams to handle it!", 78);
      *(unsigned char *)(v14 + 17) = 0;
      uint64_t v11 = (unsigned char *)(v14 + 17);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      int v12 = 491;
      long long v13 = &SipResultDomain::_domain;
      goto LABEL_8;
    }
  }
  else if (*((unsigned char *)a1 + 944))
  {
    goto LABEL_7;
  }
  uint64_t v15 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"handleSdpOffer: initializing MT lazuli session", 46);
  *(unsigned char *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v15 + 17) = 0;
  long long v16 = *(std::__shared_weak_count **)(a2 + 8);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v17 = *a3;
  if (v17) {
    xpc_retain(v17);
  }
  else {
    xpc_object_t v17 = xpc_null_create();
  }
  uint64_t v59 = 0;
  unint64_t v60 = 0;
  long long v18 = (std::__shared_weak_count *)a1[36];
  if (v18)
  {
    uint64_t v19 = std::__shared_weak_count::lock(v18);
    unint64_t v60 = v19;
    if (v19)
    {
      uint64_t v59 = a1[35];
      if (v59)
      {
        memset(&v58, 0, sizeof(v58));
        uint64_t v20 = (std::__shared_weak_count *)a1[36];
        if (v20)
        {
          uint64_t v20 = std::__shared_weak_count::lock(v20);
          long long v21 = v20;
          if (v20) {
            uint64_t v20 = (std::__shared_weak_count *)a1[35];
          }
        }
        else
        {
          long long v21 = 0;
        }
        dispatch_time_t v22 = (ImsPrefs *)SipStack::prefs((SipStack *)v20);
        OriginUsernameKey = (void **)ImsPrefs::getOriginUsernameKey(v22);
        ImsPrefs::stringValue(v22, OriginUsernameKey);
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v58.__r_.__value_.__l.__size_;
        }
        if (!size)
        {
          uint64_t v57 = 0;
          long long v55 = 0u;
          memset(v56, 0, sizeof(v56));
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          *(_OWORD *)int v48 = 0u;
          long long v45 = 0u;
          *(_OWORD *)xpc_object_t v46 = 0u;
          *(_OWORD *)xpc_object_t object = 0u;
          xpc_object_t v25 = std::__shared_weak_count::lock((std::__shared_weak_count *)a1[36]);
          uint64_t v26 = (const SipUri *)SipUserAgent::publicUri(*(SipUserAgent **)(a1[35] + 144));
          SipUri::SipUri((SipUri *)object, v26);
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          std::string::basic_string[abi:ne180100]<0>(__str, "");
          std::string::operator=((std::string *)((char *)v56 + 8), (const std::string *)__str);
          if ((__str[23] & 0x80000000) != 0) {
            operator delete(*(void **)__str);
          }
          SipUri::asString((uint64_t)object, __str);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v58.__r_.__value_.__l.__data_);
          }
          std::string v58 = *(std::string *)__str;
          SipUri::~SipUri((SipUri *)object);
        }
        std::string::basic_string[abi:ne180100]<0>(__str, " ");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        ims::substituteVar(&v58, (uint64_t)__str, (uint64_t)&__p, object);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)object;
        v58.__r_.__value_.__r.__words[2] = v45;
        BYTE7(v45) = 0;
        LOBYTE(object[0]) = 0;
        if (v43 < 0) {
          operator delete(__p);
        }
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        uint64_t v41 = 0;
        long long v40 = 0u;
        memset(__str, 0, sizeof(__str));
        xpc_object_t v27 = (std::__shared_weak_count *)a1[36];
        if (v27)
        {
          xpc_object_t v27 = std::__shared_weak_count::lock(v27);
          uint64_t v28 = v27;
          if (v27) {
            xpc_object_t v27 = (std::__shared_weak_count *)a1[35];
          }
        }
        else
        {
          uint64_t v28 = 0;
        }
        SipStack::mediaAddress((SipStack *)v27, (uint64_t)__str);
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        v38[0] = 0;
        v38[1] = 0;
        SipHost::ipAddress((SipHost *)__str, v38);
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__p, a1 + 13);
        std::allocate_shared[abi:ne180100]<SDPSession,std::allocator<SDPSession>,std::shared_ptr<LazuliSession>,std::string &,std::shared_ptr<IpAddress> &,ims::TextMediaSessionMode,std::shared_ptr<SipStack> &,void>((uint64_t)object, &__p, (long long *)&v58, (uint64_t)v38, &v59);
      }
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  v29[0] = &unk_1F20B2680;
  v29[1] = &_bambiDomain;
  int v30 = 0x40000000;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  ImsResult::operator=((uint64_t)v34, (uint64_t)v29);
  ImsResult::~ImsResult((ImsResult *)v29);
  xpc_release(v17);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  ImsResult::ImsResult(a4, (uint64_t)v34);
LABEL_51:
  ImsResult::~ImsResult((ImsResult *)v34);
}

void sub_1C53C9C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  SipHost::~SipHost((SipHost *)&a33);
  if (*(char *)(v52 - 105) < 0) {
    operator delete(*(void **)(v52 - 128));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  xpc_release(v50);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  ImsResult::~ImsResult((ImsResult *)&a18);
  _Unwind_Resume(a1);
}

void LazuliSession::handleSdpAnswerInFork(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, xpc_object_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"handle sdp answer", 17);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (((*(uint64_t (**)(void))(*(void *)*a3 + 24))() & 1) == 0)
  {
    uint64_t v17 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v17);
    long long v18 = *(void **)(v17 + 8);
    uint64_t v19 = "received invalid SDP answer:";
    uint64_t v20 = 28;
LABEL_17:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    long long v21 = (unsigned char *)(*(uint64_t (**)(void *))(*a1 + 56))(a1);
    (*(void (**)(void *, unsigned char *))(*a1 + 16))(a1, v21);
    (*(void (**)(void, unsigned char *))(*(void *)*a3 + 16))(*a3, v21);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v21[17] = 0;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(void *)a5 = &unk_1F20B2680;
    *(void *)(a5 + 8) = &SipResultDomain::_domain;
    *(_DWORD *)(a5 + 16) = 488;
    return;
  }
  uint64_t v11 = a1[15];
  int v12 = (std::__shared_weak_count *)a2[1];
  uint64_t v33 = *a2;
  uint64_t v34 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v13 = (std::__shared_weak_count *)a3[1];
  uint64_t v31 = *a3;
  long long v32 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = SDPSession::handleLazuliOfferAnswer(v11, &v33, &v31, *(void *)(*a2 + 144));
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (!v14)
  {
    uint64_t v17 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v17);
    long long v18 = *(void **)(v17 + 8);
    uint64_t v19 = "received rejection answer: ";
    uint64_t v20 = 27;
    goto LABEL_17;
  }
  uint64_t v15 = (std::__shared_weak_count *)a3[1];
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v16 = *a4;
  xpc_object_t object = v16;
  if (v16)
  {
    xpc_retain(v16);
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t object = v16;
  }
  xpc_object_t v38 = 0;
  uint64_t v22 = a1[37];
  BOOL v23 = *(SipDialog **)(v22 + 248);
  xpc_object_t v24 = *(std::__shared_weak_count **)(v22 + 256);
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    SipDialog::lazuliGroupParams(v23, &v38);
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  else
  {
    SipDialog::lazuliGroupParams(v23, &v38);
  }
  uint64_t v25 = MEMORY[0x1C878F160](v38);
  uint64_t v26 = MEMORY[0x1E4F14590];
  if (v25 == MEMORY[0x1E4F14590] && MEMORY[0x1C878F160](v16) == v26)
  {
    v36[0] = &v38;
    v36[1] = "kTransactionId";
    v35[0] = &object;
    v35[1] = "kTransactionId";
    xpc::dict::object_proxy::operator=((uint64_t)v35, (uint64_t)v36, &v37);
    xpc_release(v37);
    xpc_object_t v37 = 0;
  }
  uint64_t v27 = a1[37];
  uint64_t v29 = *(void *)(v27 + 248);
  uint64_t v28 = *(std::__shared_weak_count **)(v27 + 256);
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v36[0] = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    v36[0] = xpc_null_create();
  }
  SipDialog::setGroupParams(v29, v36);
  xpc_release(v36[0]);
  v36[0] = 0;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  *(void *)(a5 + 56) = 0;
  *(void *)(a5 + 64) = 0;
  *(void *)a5 = &unk_1F20B2680;
  *(void *)(a5 + 8) = &_bambiDomain;
  *(_DWORD *)(a5 + 16) = 0;
  *(void *)(a5 + 40) = 0;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  xpc_release(v38);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1C53CA2F8(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v3 - 56));
  xpc_release(v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

uint64_t LazuliSession::processEvent(LazuliSession *this, BambiCallEvent *a2)
{
  uint64_t v4 = (*(uint64_t (**)(LazuliSession *))(*(void *)this + 64))(this);
  (*(void (**)(LazuliSession *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"SessionEvent ", 13);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(std::string *__return_ptr, BambiCallEvent *))(*(void *)a2 + 24))(&v103, a2);
  (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 40))(v4, &v103);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  *((void *)a2 + 4) = this;
  if (*((char *)this + 975) < 0)
  {
    if (!*((void *)this + 120)) {
      goto LABEL_45;
    }
  }
  else if (!*((unsigned char *)this + 975))
  {
    goto LABEL_45;
  }
  int v5 = *((_DWORD *)a2 + 2);
  if (v5 == 14)
  {
    uint64_t v11 = (*(uint64_t (**)(LazuliSession *))(*(void *)this + 64))(this);
    (*(void (**)(LazuliSession *, uint64_t))(*(void *)this + 16))(this, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Leave Group BYE sent", 20);
    *(unsigned char *)(v11 + 17) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    return result;
  }
  if (v5 == 15)
  {
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = 0uLL;
    IMSClientManager::lazuliDelegateForStack((void **)this + 4, &v103);
    if (!v103.__r_.__value_.__r.__words[0])
    {
LABEL_37:
      std::string::size_type size = (IMSClientManager *)v103.__r_.__value_.__l.__size_;
      if (v103.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103.__r_.__value_.__l.__size_);
      }
      if (*((char *)this + 975) < 0)
      {
        **((unsigned char **)this + 119) = 0;
        *((void *)this + 120) = 0;
      }
      else
      {
        *((unsigned char *)this + 952) = 0;
        *((unsigned char *)this + 975) = 0;
      }
      IMSClientManager::instance(size);
      IPTelephonyManager::getInstance((uint64_t *)&v103);
      uint64_t v17 = *(void *)(v103.__r_.__value_.__r.__words[0] + 200);
      if (v103.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103.__r_.__value_.__l.__size_);
      }
      IMSCallManager::handleLeaveGroupChat(v17, (void **)this + 99);
      goto LABEL_45;
    }
    uint64_t v6 = (*(uint64_t (**)(LazuliSession *))(*(void *)this + 64))(this);
    (*(void (**)(LazuliSession *, uint64_t))(*(void *)this + 16))(this, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Leave Group trx ", 16);
    long long v7 = (char *)this + 952;
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v6 + 32))(v6, (char *)this + 952);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" conv ", 6);
    *(unsigned char *)(v6 + 17) = 0;
    char v8 = (char *)this + 768;
    (*(void (**)(uint64_t, char *))(*(void *)v6 + 32))(v6, (char *)this + 768);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    xpc_object_t v102 = 0;
    xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v10 = v9;
    if (v9)
    {
      xpc_object_t v102 = v9;
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      xpc_object_t v102 = v10;
      if (!v10)
      {
        xpc_object_t v13 = xpc_null_create();
        xpc_object_t v10 = 0;
        goto LABEL_18;
      }
    }
    if (MEMORY[0x1C878F160](v10) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v10);
LABEL_19:
      xpc_release(v10);
      xpc_object_t v100 = xpc_BOOL_create(1);
      if (!v100) {
        xpc_object_t v100 = xpc_null_create();
      }
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
      v92.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v92, &v100, &v101);
      xpc_release(v101);
      xpc_object_t v101 = 0;
      xpc_release(v100);
      xpc_object_t v100 = 0;
      if (*((char *)this + 975) < 0) {
        long long v7 = *(const char **)v7;
      }
      xpc_object_t v98 = xpc_string_create(v7);
      if (!v98) {
        xpc_object_t v98 = xpc_null_create();
      }
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
      v92.__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v92, &v98, &v99);
      xpc_release(v99);
      xpc_object_t v99 = 0;
      xpc_release(v98);
      xpc_object_t v98 = 0;
      if (*((char *)this + 791) < 0) {
        char v8 = *(const char **)v8;
      }
      xpc_object_t v96 = xpc_string_create(v8);
      if (!v96) {
        xpc_object_t v96 = xpc_null_create();
      }
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
      v92.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v92, &v96, &v97);
      xpc_release(v97);
      xpc_object_t v97 = 0;
      xpc_release(v96);
      xpc_object_t v96 = 0;
      int v14 = (char *)this + 792;
      if (*((char *)this + 815) < 0) {
        int v14 = *(const char **)v14;
      }
      xpc_object_t v94 = xpc_string_create(v14);
      if (!v94) {
        xpc_object_t v94 = xpc_null_create();
      }
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
      v92.__r_.__value_.__l.__size_ = (std::string::size_type)"kContributionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v92, &v94, &v95);
      xpc_release(v95);
      xpc_object_t v95 = 0;
      xpc_release(v94);
      xpc_object_t v94 = 0;
      uint64_t v15 = (LazuliDelegate *)v103.__r_.__value_.__r.__words[0];
      xpc_object_t object = v102;
      if (v102) {
        xpc_retain(v102);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      LazuliDelegate::handleLeaveGroupChat(v15, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v102);
      goto LABEL_37;
    }
    xpc_object_t v13 = xpc_null_create();
LABEL_18:
    xpc_object_t v102 = v13;
    goto LABEL_19;
  }
LABEL_45:
  int v18 = *((_DWORD *)a2 + 2);
  if ((v18 - 14) >= 2)
  {
    if (v18 == 9)
    {
      uint64_t v33 = (*(uint64_t (**)(LazuliSession *))(*(void *)this + 64))(this);
      (*(void (**)(LazuliSession *, uint64_t))(*(void *)this + 16))(this, v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"confirmed session with ", 23);
      *(unsigned char *)(v33 + 17) = 0;
      (*(void (**)(char *, uint64_t))(*((void *)this + 39) + 40))((char *)this + 312, v33);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v33 + 17) = 0;
      *((unsigned char *)this + 945) = 1;
      goto LABEL_184;
    }
    if (v18 != 30) {
      goto LABEL_184;
    }
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = 0uLL;
    IMSClientManager::lazuliDelegateForStack((void **)this + 4, &v103);
    if (!v103.__r_.__value_.__r.__words[0]) {
      goto LABEL_87;
    }
    xpc_object_t v102 = 0;
    xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v20 = v19;
    if (v19)
    {
      xpc_object_t v102 = v19;
    }
    else
    {
      xpc_object_t v20 = xpc_null_create();
      xpc_object_t v102 = v20;
      if (!v20)
      {
        xpc_object_t v34 = xpc_null_create();
        xpc_object_t v20 = 0;
        goto LABEL_72;
      }
    }
    if (MEMORY[0x1C878F160](v20) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v20);
LABEL_73:
      xpc_release(v20);
      long long v35 = (char *)this + 768;
      if (*((char *)this + 791) < 0) {
        long long v35 = *(const char **)v35;
      }
      xpc_object_t v85 = xpc_string_create(v35);
      if (!v85) {
        xpc_object_t v85 = xpc_null_create();
      }
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
      v92.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v92, &v85, &v86);
      xpc_release(v86);
      xpc_object_t v86 = 0;
      xpc_release(v85);
      xpc_object_t v85 = 0;
      long long v36 = (char *)this + 792;
      if (*((char *)this + 815) < 0) {
        long long v36 = *(const char **)v36;
      }
      xpc_object_t v83 = xpc_string_create(v36);
      if (!v83) {
        xpc_object_t v83 = xpc_null_create();
      }
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
      v92.__r_.__value_.__l.__size_ = (std::string::size_type)"kContributionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v92, &v83, &v84);
      xpc_release(v84);
      xpc_object_t v84 = 0;
      xpc_release(v83);
      xpc_object_t v83 = 0;
      xpc_object_t v81 = xpc_string_create("SessionAcknowledged");
      if (!v81) {
        xpc_object_t v81 = xpc_null_create();
      }
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
      v92.__r_.__value_.__l.__size_ = (std::string::size_type)"kEventName";
      xpc::dict::object_proxy::operator=((uint64_t)&v92, &v81, &v82);
      xpc_release(v82);
      xpc_object_t v82 = 0;
      xpc_release(v81);
      xpc_object_t v37 = (LazuliDelegate *)v103.__r_.__value_.__r.__words[0];
      xpc_object_t v80 = v102;
      xpc_object_t v81 = 0;
      if (v102) {
        xpc_retain(v102);
      }
      else {
        xpc_object_t v80 = xpc_null_create();
      }
      LazuliDelegate::handleSessionEvent(v37, &v80);
      xpc_release(v80);
      xpc_object_t v80 = 0;
      xpc_release(v102);
LABEL_87:
      xpc_object_t v38 = (IMSClientManager *)v103.__r_.__value_.__l.__size_;
      if (v103.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103.__r_.__value_.__l.__size_);
      }
      IMSClientManager::instance(v38);
      IPTelephonyManager::getInstance((uint64_t *)&v92);
      uint64_t v39 = *(void *)(v92.__r_.__value_.__r.__words[0] + 168);
      uint64_t v78 = 0;
      xpc_object_t v79 = 0;
      long long v40 = (std::__shared_weak_count *)*((void *)this + 36);
      if (v40)
      {
        xpc_object_t v79 = std::__shared_weak_count::lock(v40);
        if (v79) {
          uint64_t v78 = *((void *)this + 35);
        }
      }
      uint64_t v41 = (std::__shared_weak_count *)*((void *)this + 16);
      uint64_t v76 = *((void *)this + 15);
      xpc_object_t v77 = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v42 = *((void *)this + 37);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = *(void *)(v42 + 248);
      char v43 = *(std::__shared_weak_count **)(v42 + 256);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v74 = v44;
      xpc_object_t v75 = v43;
      if (v43) {
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v45 = *((void *)this + 15);
      if (*(char *)(v45 + 1983) < 0) {
        std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)(v45 + 1960), *(void *)(v45 + 1968));
      }
      else {
        std::string v103 = *(std::string *)(v45 + 1960);
      }
      BambiClient::createMessageSession(v39, (uint64_t)&v78, (uint64_t)this + 768, &v76, &v74, &v103);
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v103.__r_.__value_.__l.__data_);
      }
      if (v75) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v75);
      }
      if (v77) {
        std::__shared_weak_count::__release_weak(v77);
      }
      if (v79) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v79);
      }
      xpc_object_t v46 = (std::__shared_weak_count *)v92.__r_.__value_.__l.__size_;
      if (!v92.__r_.__value_.__l.__size_) {
        goto LABEL_184;
      }
      goto LABEL_183;
    }
    xpc_object_t v34 = xpc_null_create();
LABEL_72:
    xpc_object_t v102 = v34;
    goto LABEL_73;
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v22 && (uint64_t v22 = std::__shared_weak_count::lock(v22)) != 0)
  {
    BOOL v23 = v22;
    uint64_t v24 = *((void *)this + 35);
    BOOL v25 = v21 != 0;
    if (v24 && v21)
    {
      if (v21[147])
      {
        uint64_t v26 = *(void *)(v24 + 144);
        uint64_t v27 = *(void *)(v26 + 248);
        uint64_t v28 = *(std::__shared_weak_count **)(v26 + 256);
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v27 + 168))(v27, 18, 0, 0);
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        SipTransportLayer::removeConnections(*(SipTransportLayer **)(v24 + 160), 0, 1, 1);
        uint64_t v29 = (std::__shared_weak_count *)*((void *)this + 36);
        if (v29 && (int v30 = std::__shared_weak_count::lock(v29)) != 0)
        {
          uint64_t v31 = *((void *)this + 35);
          if (v31) {
            uint64_t v32 = *(void *)(v31 + 136);
          }
          else {
            uint64_t v32 = 0;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        else
        {
          uint64_t v32 = 0;
        }
        if (*(char *)(v24 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)(v24 + 4160), *(void *)(v24 + 4168));
        }
        else {
          std::string v103 = *(std::string *)(v24 + 4160);
        }
        uint64_t v22 = *(std::__shared_weak_count **)(v32 + 248);
        if (v22) {
          uint64_t v22 = (std::__shared_weak_count *)((uint64_t (*)(std::__shared_weak_count *, std::string *))v22->__vftable[2].__on_zero_shared)(v22, &v103);
        }
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
      }
      BOOL v25 = 1;
    }
  }
  else
  {
    BOOL v23 = 0;
    BOOL v25 = v21 != 0;
  }
  if (!*((unsigned char *)this + 945) && v25)
  {
    LODWORD(v103.__r_.__value_.__l.__data_) = 0;
    uint64_t v47 = *((void *)v21 + 6);
    if (v47) {
      SipMessage::headerValueAsUint32(v47, "Retry-After", &v103);
    }
    unsigned int v48 = *((_DWORD *)v21 + 44);
    uint64_t v49 = qword_1EBBDAF88;
    if (qword_1EBBDAF88)
    {
      long long v50 = &qword_1EBBDAF88;
      do
      {
        unsigned int v51 = *(_DWORD *)(v49 + 32);
        BOOL v52 = v51 >= v48;
        if (v51 >= v48) {
          long long v53 = (uint64_t *)v49;
        }
        else {
          long long v53 = (uint64_t *)(v49 + 8);
        }
        if (v52) {
          long long v50 = (uint64_t *)v49;
        }
        uint64_t v49 = *v53;
      }
      while (*v53);
      long long v54 = &ims::kEmptyString;
      if (v50 != &qword_1EBBDAF88)
      {
        unsigned int v55 = *((_DWORD *)v50 + 8);
        xpc_object_t v56 = (long long *)(v50 + 5);
        if (v55 <= v48) {
          long long v54 = v56;
        }
      }
    }
    else
    {
      long long v54 = &ims::kEmptyString;
    }
    LazuliSession::handleInviteFailure((std::string *)this, v48, (uint64_t)v54, (const SipUri *)(v21 + 184), v103.__r_.__value_.__l.__data_);
    goto LABEL_181;
  }
  IMSClientManager::instance((IMSClientManager *)v22);
  IPTelephonyManager::getInstance((uint64_t *)&v103);
  uint64_t v57 = *(void *)(v103.__r_.__value_.__r.__words[0] + 200);
  if (v103.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103.__r_.__value_.__l.__size_);
  }
  xpc_object_t v102 = 0;
  xpc_object_t v58 = xpc_null_create();
  xpc_object_t v102 = v58;
  if (v25)
  {
    if (v21[87] < 0) {
      std::string::__init_copy_ctor_external(&v103, *((const std::string::value_type **)v21 + 8), *((void *)v21 + 9));
    }
    else {
      std::string v103 = *(std::string *)(v21 + 64);
    }
    std::string::size_type v59 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v59 = v103.__r_.__value_.__l.__size_;
    }
    if (v59 != 4) {
      goto LABEL_153;
    }
    unint64_t v60 = (std::string *)v103.__r_.__value_.__r.__words[0];
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v60 = &v103;
    }
    if (LODWORD(v60->__r_.__value_.__l.__data_) == 1701736263 && *((_DWORD *)v21 + 28) == 410)
    {
      if (v21[111] < 0) {
        std::string::__init_copy_ctor_external(&v92, *((const std::string::value_type **)v21 + 11), *((void *)v21 + 12));
      }
      else {
        std::string v92 = *(std::string *)(v21 + 88);
      }
      std::string::size_type v69 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
      if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v69 = v92.__r_.__value_.__l.__size_;
      }
      if (v69 == 3)
      {
        xpc_object_t v70 = (std::string *)v92.__r_.__value_.__r.__words[0];
        if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          xpc_object_t v70 = &v92;
        }
        int data_low = LOWORD(v70->__r_.__value_.__l.__data_);
        int v72 = v70->__r_.__value_.__s.__data_[2];
        BOOL v61 = data_low == 18771 && v72 == 80;
      }
      else
      {
        BOOL v61 = 0;
      }
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v92.__r_.__value_.__l.__data_);
      }
      if ((*((unsigned char *)&v103.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_155:
        if (v61)
        {
          xpc_object_t v62 = xpc_dictionary_create(0, 0, 0);
          if (v62 || (xpc_object_t v62 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C878F160](v62) == MEMORY[0x1E4F14590])
            {
              xpc_retain(v62);
              xpc_object_t v63 = v62;
            }
            else
            {
              xpc_object_t v63 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v63 = xpc_null_create();
            xpc_object_t v62 = 0;
          }
          xpc_release(v62);
          xpc_object_t v64 = xpc_null_create();
          xpc_object_t v65 = v102;
          xpc_object_t v102 = v63;
          xpc_release(v65);
          xpc_release(v64);
          xpc_object_t v90 = xpc_BOOL_create(1);
          if (!v90) {
            xpc_object_t v90 = xpc_null_create();
          }
          v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
          v103.__r_.__value_.__l.__size_ = (std::string::size_type)"kUserEvictedFromGroup";
          xpc::dict::object_proxy::operator=((uint64_t)&v103, &v90, &v91);
          xpc_release(v91);
          xpc_object_t v91 = 0;
          xpc_release(v90);
          xpc_object_t v90 = 0;
          memset(&v103, 0, sizeof(v103));
          if (v21[175] < 0) {
            std::string::__init_copy_ctor_external(&v103, *((const std::string::value_type **)v21 + 19), *((void *)v21 + 20));
          }
          else {
            std::string v103 = *(std::string *)(v21 + 152);
          }
          if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v103.__r_.__value_.__l.__size_)
            {
LABEL_175:
              operator delete(v103.__r_.__value_.__l.__data_);
              goto LABEL_176;
            }
            char v66 = (std::string *)v103.__r_.__value_.__r.__words[0];
LABEL_172:
            xpc_object_t v88 = xpc_string_create((const char *)v66);
            if (!v88) {
              xpc_object_t v88 = xpc_null_create();
            }
            v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
            v92.__r_.__value_.__l.__size_ = (std::string::size_type)"kReferredBy";
            xpc::dict::object_proxy::operator=((uint64_t)&v92, &v88, &v89);
            xpc_release(v89);
            xpc_object_t v89 = 0;
            xpc_release(v88);
            xpc_object_t v88 = 0;
            if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_176;
            }
            goto LABEL_175;
          }
          if (*((unsigned char *)&v103.__r_.__value_.__s + 23))
          {
            char v66 = &v103;
            goto LABEL_172;
          }
        }
LABEL_176:
        xpc_object_t v58 = v102;
        goto LABEL_177;
      }
    }
    else
    {
LABEL_153:
      BOOL v61 = 0;
      if ((*((unsigned char *)&v103.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_155;
      }
    }
    operator delete(v103.__r_.__value_.__l.__data_);
    goto LABEL_155;
  }
LABEL_177:
  unsigned int v67 = *((_DWORD *)a2 + 2);
  uint64_t v68 = eventNames;
  xpc_object_t v87 = v58;
  if (v58) {
    xpc_retain(v58);
  }
  else {
    xpc_object_t v87 = xpc_null_create();
  }
  IMSCallManager::terminateLazuli(v57, (uint64_t)this + 768, v68 + 24 * v67, &v87);
  xpc_release(v87);
  xpc_object_t v87 = 0;
  xpc_release(v102);
LABEL_181:
  if (!v23) {
    goto LABEL_184;
  }
  xpc_object_t v46 = v23;
LABEL_183:
  std::__shared_weak_count::__release_shared[abi:ne180100](v46);
LABEL_184:
  uint64_t result = *((void *)this + 117);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BambiCallEvent *))(*(void *)result + 16))(result, a2);
  }
  return result;
}

void sub_1C53CB294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, xpc_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,xpc_object_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,xpc_object_t a31)
{
  if (*(char *)(v32 - 73) < 0) {
    operator delete(*(void **)(v32 - 96));
  }
  xpc_release(*(xpc_object_t *)(v32 - 104));
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(a1);
}

uint64_t LazuliSession::logSession(LazuliSession *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"[LazuliSession] uri=", 20);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(char *, ImsOutStream *))(*((void *)this + 39) + 40))((char *)this + 312, a2);
  if ((*((char *)this + 791) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 791)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*((void *)this + 97))
  {
LABEL_3:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" convid=", 8);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 768);
  }
LABEL_4:
  if (*((char *)this + 911) < 0)
  {
    if (!*((void *)this + 112)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (*((unsigned char *)this + 911))
  {
LABEL_6:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" trx=", 5);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 888);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v4)
  {
    int v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 35);
      if (v7)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" stack=", 7);
        *((unsigned char *)a2 + 17) = 0;
        if (*(char *)(v7 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 4160), *(void *)(v7 + 4168));
        }
        else {
          std::string __p = *(std::string *)(v7 + 4160);
        }
        (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 32))(a2, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  uint64_t result = (*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void sub_1C53CB710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<SDPSession,std::allocator<SDPSession>,std::shared_ptr<LazuliSession>,std::string &,std::shared_ptr<IpAddress> &,ims::TextMediaSessionMode,std::shared_ptr<SipStack> &,void>(uint64_t a1, void *a2, long long *a3, uint64_t a4, uint64_t *a5)
{
  xpc_object_t v9 = operator new(0x7D8uLL);
  v9[1] = 0;
  v9[2] = 0;
  void *v9 = &unk_1F20C6540;
  uint64_t v11 = a2[1];
  v15[0] = *a2;
  v15[1] = v11;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v12 = *a5;
  uint64_t v13 = a5[1];
  v14[0] = v12;
  v14[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  SDPSession::SDPSession((uint64_t)(v9 + 3), v15, a3, a4, v10, v14);
}

void sub_1C53CB818(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t SoftbankRegistrationPolicy::SoftbankRegistrationPolicy(uint64_t a1, std::__shared_weak_count **a2)
{
  *(void *)(a1 + 104) = &unk_1F20B2FA8;
  uint64_t v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  DefaultRegistrationPolicy::DefaultRegistrationPolicy((uint64_t *)a1, (uint64_t *)&off_1F20C8BF8, v5);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  *(void *)a1 = &unk_1F20C8940;
  *(void *)(a1 + 104) = &unk_1F20C8BA0;
  *(void *)(a1 + 184) = &unk_1F20C8BE8;
  *(_DWORD *)(a1 + 2384) = 0;
  *(_WORD *)(a1 + 2388) = 0;
  return a1;
}

void sub_1C53CB934(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void SoftbankRegistrationPolicy::emergencyRegistrationTimeout(SoftbankRegistrationPolicy *this)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  int v14 = &unk_1F20B2680;
  uint64_t v15 = &_bambiDomain;
  int v16 = 1073741830;
  uint64_t v2 = *((void *)this + 55);
  if (v2) {
    BOOL v3 = v2 == *((void *)this + 56);
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    ImsResult::operator=(v2 + 480 * *((void *)this + 58) + 408, (uint64_t)&v14);
  }
  ImsResult::~ImsResult((ImsResult *)&v14);
  ++*((_DWORD *)this + 596);
  uint64_t v4 = (*(uint64_t (**)(SoftbankRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SoftbankRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"emergency registration timed out for current proxy ", 51);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" of ", 4);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  SipRegistrationPolicy::clearAllThrottling((ims **)this);
  int v5 = (ImsOutStream *)(*(uint64_t (**)(SoftbankRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SoftbankRegistrationPolicy *, ImsOutStream *))(*(void *)this + 16))(this, v5);
  SipRegistrationPolicy::printProxyErrors((uint64_t)this, v5, 2);
  if ((*(unsigned int (**)(SoftbankRegistrationPolicy *, void, uint64_t))(*(void *)this + 416))(this, 0, 200))
  {
    if ((*(unsigned int (**)(SoftbankRegistrationPolicy *))(*(void *)this + 328))(this)) {
      (*(void (**)(SoftbankRegistrationPolicy *))(*(void *)this + 504))(this);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 48);
    if (v6)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        char v8 = v7;
        uint64_t v9 = *((void *)this + 47);
        if (v9) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 40))(v9, 200);
        }
LABEL_17:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
  else
  {
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 48);
    if (v10)
    {
      uint64_t v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        char v8 = v11;
        uint64_t v12 = *((void *)this + 47);
        if (v12)
        {
          long long v17 = 0u;
          long long v18 = 0u;
          long long v19 = 0u;
          int v14 = &unk_1F20B2680;
          uint64_t v15 = &_bambiDomain;
          int v16 = 1073741842;
          uint64_t v13 = ImsResult::operator<<<char [31]>((uint64_t)&v14, "Emergency registration timeout");
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 88))(v12, v13);
          ImsResult::~ImsResult((ImsResult *)&v14);
        }
        goto LABEL_17;
      }
    }
  }
}

void sub_1C53CBCDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SoftbankRegistrationPolicy::isRegistrationRetryAllowed(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IMSClientManager *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 528))(a1);
  if (v4)
  {
    if (!*(unsigned char *)(a1 + 228) && *(_DWORD *)(a1 + 2384) >= *(_DWORD *)(a1 + 1848))
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v5);
      uint64_t v6 = *(void **)(v5 + 8);
      uint64_t v7 = "retry not allowed: already exhausted proxy attempts for reregistration";
      uint64_t v8 = 70;
      goto LABEL_25;
    }
    if (*(unsigned char *)(a1 + 2389))
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v5);
      uint64_t v6 = *(void **)(v5 + 8);
      uint64_t v7 = "retry not allowed: received error response on reregister";
      uint64_t v8 = 56;
LABEL_25:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      uint64_t v11 = 0;
      *(unsigned char *)(v5 + 17) = 0;
      return v11;
    }
    IMSClientManager::instance(v4);
    IPTelephonyManager::getInstance((uint64_t *)&__p);
    uint64_t v12 = *((void *)__p + 21);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 384);
    if (v13)
    {
      int v14 = std::__shared_weak_count::lock(v13);
      if (v14)
      {
        uint64_t v15 = *(void *)(a1 + 376);
        if (v15)
        {
          if (v12)
          {
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            (*(void (**)(void **__return_ptr))(*(void *)v15 + 136))(&__p);
            (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v12 + 192))(&v32, v12, &__p);
            if (v31 < 0) {
              operator delete(__p);
            }
            if (v32)
            {
              int v16 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 64);
              if (*(unsigned char *)(v32 + 2680))
              {
                uint64_t v17 = v16(a1);
                (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v17);
                long long v18 = (unsigned char *)ImsOutStream::operator<<(v17, "retry not allowed: roaming");
                (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                v18[17] = 0;
                if (v33) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
                }
                uint64_t v11 = 0;
                goto LABEL_37;
              }
              uint64_t v25 = v16(a1);
              (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v25);
              uint64_t v26 = ImsOutStream::operator<<(v25, "not roaming: no decision to try to shortcuit the retry");
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              uint64_t v24 = (unsigned char *)(v26 + 17);
            }
            else
            {
              uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
              (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v23);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"SipStack is null: no decision to try to shortcuit the retry", 59);
              *(unsigned char *)(v23 + 17) = 0;
              uint64_t v24 = (unsigned char *)(v23 + 17);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            *uint64_t v24 = 0;
            if (v33) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v33);
            }
LABEL_28:
            if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 448) - *(void *)(a1 + 440)) >> 5) == SipRegistrationPolicy::countOfProxiesWithErrors((SipRegistrationPolicy *)a1)
              && !(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 2240) + 16))(*(void *)(a1 + 2240), a2))
            {
              if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 448) - *(void *)(a1 + 440)) >> 5) != SipRegistrationPolicy::countOfProxiesWithErrors((SipRegistrationPolicy *)a1)
                || *(_DWORD *)(a1 + 2384) >= *(_DWORD *)(a1 + 1848)
                || *(unsigned char *)(a1 + 2388))
              {
                uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
                (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v22);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"retry not allowed: by default", 29);
                *(unsigned char *)(v22 + 17) = 0;
                long long v21 = (unsigned char *)(v22 + 17);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                uint64_t v11 = 0;
LABEL_36:
                *long long v21 = 0;
                if (!v14) {
                  return v11;
                }
LABEL_37:
                std::__shared_weak_count::__release_shared[abi:ne180100](v14);
                return v11;
              }
              uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
              (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v27);
              uint64_t v28 = ImsOutStream::operator<<(v27, "retry allowed: proxy list exhausted, but retries are allowed");
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              long long v21 = (unsigned char *)(v28 + 17);
            }
            else
            {
              uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
              (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v20);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"retry allowed: proxy list has not been exhausted", 48);
              *(unsigned char *)(v20 + 17) = 0;
              long long v21 = (unsigned char *)(v20 + 17);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            uint64_t v11 = 1;
            goto LABEL_36;
          }
        }
      }
    }
    else
    {
      int v14 = 0;
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"delegate or bambi is null: no decision to try to shortcuit the retry", 68);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    goto LABEL_28;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 528))(a1)) {
    return 1;
  }
  uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a1 + 2240) + 16);
  return v9();
}

void sub_1C53CC570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

uint64_t SoftbankRegistrationPolicy::handleProxyChange(uint64_t this)
{
  *(_DWORD *)(this + 2384) = 0;
  *(unsigned char *)(this + 2388) = 0;
  return this;
}

void SoftbankRegistrationPolicy::clearFailureFlags(SoftbankRegistrationPolicy *this)
{
  *((_DWORD *)this + 596) = 0;
  *((_WORD *)this + 1194) = 0;
}

BOOL SoftbankRegistrationPolicy::useNextProxy(SoftbankRegistrationPolicy *this)
{
  if (!(*(unsigned int (**)(SoftbankRegistrationPolicy *))(*(void *)this + 528))(this))
  {
    uint64_t v2 = (char *)this + 228;
    return *v2 != 0;
  }
  if (*((_DWORD *)this + 596) < *((_DWORD *)this + 462))
  {
    uint64_t v2 = (char *)this + 2388;
    return *v2 != 0;
  }
  return 1;
}

uint64_t SoftbankRegistrationPolicy::handleRegistrationError(SoftbankRegistrationPolicy *this, const SipResponse *a2)
{
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  SipResultDomain::makeResult(a2, (uint64_t)&v13);
  if (!(*(unsigned int (**)(SoftbankRegistrationPolicy *))(*(void *)this + 528))(this)) {
    goto LABEL_8;
  }
  uint64_t v4 = *((void *)this + 280);
  if (!v4) {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "REGISTER");
  BOOL v5 = SipResponseCodeMap::containsResponseCodeForMethod(v4 + 64, __p, v14, 0);
  BOOL v6 = v5;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if (v6) {
      goto LABEL_5;
    }
LABEL_8:
    time_t v7 = SipRegistrationPolicy::handleRegistrationError((ims **)this, a2);
    goto LABEL_9;
  }
  if (!v5) {
    goto LABEL_8;
  }
LABEL_5:
  *((unsigned char *)this + 2388) = 1;
  if (!*((unsigned char *)this + 228))
  {
    uint64_t v10 = (*(uint64_t (**)(SoftbankRegistrationPolicy *))(*(void *)this + 48))(this);
    (*(void (**)(SoftbankRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Received fatal error on emergency registration retry, attempting to place emergency call immediately", 100);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    *((unsigned char *)this + 2389) = 1;
    uint64_t v8 = -1;
    goto LABEL_10;
  }
  time_t v7 = SipRegistrationPolicy::handleGeneralError(this, (const ImsResult *)&v13);
LABEL_9:
  uint64_t v8 = v7;
LABEL_10:
  ImsResult::~ImsResult((ImsResult *)&v13);
  return v8;
}

void sub_1C53CC844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult((ImsResult *)&a16);
  _Unwind_Resume(a1);
}

time_t SoftbankRegistrationPolicy::authChallengeReceived(int8x8_t *this)
{
  if ((*(unsigned int (**)(int8x8_t *))(*(void *)this + 528))(this))
  {
    uint64_t v2 = (*(uint64_t (**)(int8x8_t *))(*(void *)this + 64))(this);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Got auth challenge request, restarting emergency registration timeout", 69);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(&this[30], (unsigned __int8 *)&SipRegistrationPolicy::kEmergencyRegistrationTimer))
    {
      SipTimerContainer::cancelTimer(this + 29, (std::string *)&SipRegistrationPolicy::kEmergencyRegistrationTimer);
    }
    SipRegistrationPolicy::startEmergencyRegistrationTimer(this);
  }
  return SipRegistrationPolicy::authChallengeReceived((SipRegistrationPolicy *)this);
}

uint64_t SoftbankRegistrationPolicy::generalErrorRetryInterval(SoftbankRegistrationPolicy *this)
{
  if ((*(uint64_t (**)(SoftbankRegistrationPolicy *))(*(void *)this + 528))(this)) {
    return 0;
  }
  return DefaultRegistrationPolicy::generalErrorRetryInterval(this);
}

time_t SoftbankRegistrationPolicy::handleGeneralErrorFromOneProxy(SoftbankRegistrationPolicy *this, const ImsResult *a2)
{
  if ((*(unsigned int (**)(SoftbankRegistrationPolicy *))(*(void *)this + 528))(this)) {
    BOOL v4 = *((void *)a2 + 1) == (void)&SipResultDomain::_domain;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
  }
  if (!*((unsigned char *)this + 228)) {
    return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
  }
  uint64_t v5 = *((void *)this + 280);
  if (!v5) {
    return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
  }
  uint64_t v6 = v5 + 64;
  std::string::basic_string[abi:ne180100]<0>(__p, "REGISTER");
  BOOL v7 = SipResponseCodeMap::containsResponseCodeForMethod(v6, __p, *((_DWORD *)a2 + 4), 0);
  BOOL v8 = v7;
  if ((v13 & 0x80000000) == 0)
  {
    if (v7) {
      goto LABEL_10;
    }
    return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
  }
  operator delete(__p[0]);
  if (!v8) {
    return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
  }
LABEL_10:
  uint64_t v9 = (ImsOutStream *)(*(uint64_t (**)(SoftbankRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SoftbankRegistrationPolicy *, ImsOutStream *))(*(void *)this + 16))(this, v9);
  SipRegistrationPolicy::printProxyErrors((uint64_t)this, v9, 2);
  if (!(*(unsigned int (**)(SoftbankRegistrationPolicy *, void, uint64_t))(*(void *)this + 416))(this, 0, 200))return -1; {
  int v10 = (*(uint64_t (**)(SoftbankRegistrationPolicy *))(*(void *)this + 328))(this);
  }
  return SipRegistrationPolicy::scheduleRetry(this, a2, 0, v10);
}

void sub_1C53CCC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SoftbankRegistrationPolicy::~SoftbankRegistrationPolicy(SoftbankRegistrationPolicy *this)
{
}

{
  uint64_t vars8;

  DefaultRegistrationPolicy::~DefaultRegistrationPolicy(this, (uint64_t *)&off_1F20C8BF8);
  JUMPOUT(0x1C878E320);
}

const char *SoftbankRegistrationPolicy::name(SoftbankRegistrationPolicy *this)
{
  return "Softbank";
}

void non-virtual thunk to'SoftbankRegistrationPolicy::~SoftbankRegistrationPolicy(SoftbankRegistrationPolicy *this)
{
}

{
  uint64_t vars8;

  DefaultRegistrationPolicy::~DefaultRegistrationPolicy((SoftbankRegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1F20C8BF8);
  JUMPOUT(0x1C878E320);
}

uint64_t BambiUssdSession::BambiUssdSession(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_1F20C9238;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  return a1;
}

void BambiUssdSession::~BambiUssdSession(BambiUssdSession *this)
{
  *(void *)this = &unk_1F20C9238;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

{
  uint64_t vars8;

  BambiUssdSession::~BambiUssdSession(this);
  JUMPOUT(0x1C878E320);
}

void BambiUssdSession::attachIncomingSession(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 48) = 1;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v7 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    uint64_t v5 = *(void *)(a1 + 24);
  }
  *(void *)(v5 + 624) = a1;
  *(void *)(a1 + 40) = a3;
}

uint64_t BambiUssdSession::initialize(uint64_t a1, const std::string *a2, const std::string *a3, uint64_t a4)
{
  *(void *)(a1 + 40) = a4;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5) {
    return 0;
  }
  BOOL v8 = std::__shared_weak_count::lock(v5);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(a1 + 8);
  if (!v10) {
    goto LABEL_14;
  }
  uint64_t v11 = *(void *)(v10 + 144);
  char v12 = *(const SipUri **)(v11 + 176);
  char v13 = *(std::__shared_weak_count **)(v11 + 184);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipDialogManager::initializeUssdSession(v12, a2, (uint64_t *)&v19);
  long long v14 = v19;
  long long v19 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v14;
  if (v15)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    if (*((void *)&v19 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
    }
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v16 = *(void *)(a1 + 24);
  if (v16)
  {
    *(void *)(v16 + 624) = a1;
    std::string::operator=((std::string *)(v16 + 632), a3);
    uint64_t v17 = 1;
  }
  else
  {
LABEL_14:
    uint64_t v17 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  return v17;
}

void sub_1C53CCF40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t (***BambiUssdSession::handleUssdData(uint64_t a1, uint64_t a2, uint64_t a3))(void, uint64_t, uint64_t, uint64_t)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "ussd");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"BambiUssdSession::handleUssdData: ", 34);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  uint64_t result = *(uint64_t (****)(void, uint64_t, uint64_t, uint64_t))(a1 + 40);
  if (result) {
    return (uint64_t (***)(void, uint64_t, uint64_t, uint64_t))(**result)(result, a1, a2, a3);
  }
  return result;
}

void sub_1C53CD0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiUssdSession::handleUssdError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 8))(result, a1, a2, a3);
  }
  return result;
}

void BambiUssdSession::handleSessionInvalidated(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, a1);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[1];
      if (v6) {
        BambiClient::invalidateUssdSession(*(BambiClient **)(v6 + 136), (unint64_t)a1);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C53CD1B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void XcapDocumentBase::setAttribute(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  XcapNs::stripXcapNs(a2, &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size != 6)
  {
    BOOL v10 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  int data = (int)p_p->__r_.__value_.__l.__data_;
  int v8 = WORD2(p_p->__r_.__value_.__r.__words[0]);
  BOOL v10 = data == 1769235297 && v8 == 25974;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_15:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_16:
  if (v10)
  {
    uint64_t v11 = *((unsigned __int8 *)a3 + 23);
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = a3[1];
    }
    if (v11 == 5)
    {
      if (v12 >= 0) {
        char v13 = (int *)a3;
      }
      else {
        char v13 = (int *)*a3;
      }
      int v14 = *v13;
      int v15 = *((unsigned __int8 *)v13 + 4);
      if (v14 == 1936482662 && v15 == 101) {
        *(unsigned char *)(a1 + 80) = 0;
      }
    }
  }
}

void XcapDocumentBase::constructTree(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  bambi::XmlTreeItem::makeNode(a1);
}

void sub_1C53CD4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, char a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  std::ostringstream::~ostringstream((uint64_t)&a18);
  uint64_t v20 = *(std::__shared_weak_count **)(v18 + 8);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'XcapDocumentBase::constructTree(void *a1@<X8>)
{
}

void XcapDocumentBase::getItemForPath(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t XcapDocumentBase::setItemForPath()
{
  return 0;
}

void SipImpuRank::SipImpuRank(SipImpuRank *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  SipImpuRank::resetNormalRanksToDefault(this);
  SipImpuRank::resetEmergencyRanksToDefault(this);
}

void sub_1C53CD56C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void SipImpuRank::resetNormalRanksToDefault(SipImpuRank *this)
{
  int v2 = 0;
  uint64_t v3 = *(_DWORD **)this;
  *((void *)this + 1) = *(void *)this;
  uint64_t v4 = (void *)((char *)this + 16);
  do
  {
    if ((unint64_t)v3 >= *v4)
    {
      uint64_t v6 = *(_DWORD **)this;
      uint64_t v7 = ((uint64_t)v3 - *(void *)this) >> 2;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 62) {
        std::vector<ImpuType>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = *v4 - (void)v6;
      if (v9 >> 1 > v8) {
        unint64_t v8 = v9 >> 1;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      if (v10)
      {
        uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)v4, v10);
        uint64_t v6 = *(_DWORD **)this;
        uint64_t v3 = (_DWORD *)*((void *)this + 1);
      }
      else
      {
        uint64_t v11 = 0;
      }
      int v12 = &v11[4 * v7];
      *(_DWORD *)int v12 = v2;
      uint64_t v5 = v12 + 4;
      while (v3 != v6)
      {
        int v13 = *--v3;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      *(void *)this = v12;
      *((void *)this + 1) = v5;
      *((void *)this + 2) = &v11[4 * v10];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      _DWORD *v3 = v2;
      uint64_t v5 = v3 + 1;
    }
    *((void *)this + 1) = v5;
    ++v2;
    uint64_t v3 = v5;
  }
  while (v2 != 12);
}

void SipImpuRank::resetEmergencyRanksToDefault(SipImpuRank *this)
{
  unint64_t v4 = *((void *)this + 5);
  int v2 = (char *)this + 40;
  unint64_t v3 = v4;
  uint64_t v5 = (_DWORD *)*((void *)v2 - 2);
  *((void *)v2 - 1) = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = v3 - (void)v5;
    uint64_t v8 = v7 >> 1;
    if ((unint64_t)(v7 >> 1) <= 1) {
      uint64_t v8 = 1;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    unint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)v2, v9);
    uint64_t v11 = (char *)*((void *)this + 3);
    int v12 = (char *)*((void *)this + 4);
    int v14 = &v10[v13];
    *unint64_t v10 = 10;
    uint64_t v6 = v10 + 1;
    while (v12 != v11)
    {
      int v15 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *--unint64_t v10 = v15;
    }
    *((void *)this + 3) = v10;
    *((void *)this + 4) = v6;
    *((void *)this + 5) = v14;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    _DWORD *v5 = 10;
    uint64_t v6 = v5 + 1;
  }
  *((void *)this + 4) = v6;
}

BOOL SipImpuRank::_setRanksFromString(uint64_t a1, int **a2, uint64_t a3)
{
  unint64_t v3 = *a2;
  a2[1] = *a2;
  uint64_t v4 = *(unsigned __int8 *)(a3 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a3 + 8);
  }
  if (v4)
  {
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    ims::tokenize((std::string *)a3, &v58, 0x2Cu);
    uint64_t v6 = v58;
    uint64_t v7 = v59;
    if (v58 != v59)
    {
      while (2)
      {
        uint64_t v8 = *(unsigned __int8 *)(v6 + 23);
        int v9 = (char)v8;
        if ((v8 & 0x80u) != 0) {
          uint64_t v8 = *(void *)(v6 + 8);
        }
        switch(v8)
        {
          case 5:
            if (v9 >= 0) {
              unint64_t v10 = (void *)v6;
            }
            else {
              unint64_t v10 = *(void **)v6;
            }
            int v11 = *(_DWORD *)v10;
            int v12 = *((unsigned __int8 *)v10 + 4);
            if (v11 != 1936877926 || v12 != 116) {
              goto LABEL_84;
            }
            int v14 = 10;
            goto LABEL_92;
          case 6:
            if (v9 >= 0) {
              uint64_t v19 = v6;
            }
            else {
              uint64_t v19 = *(void *)v6;
            }
            if (bswap32(*(_DWORD *)v19) != 1936024431 || bswap32(*(unsigned __int16 *)(v19 + 4)) >> 16 != 28260) {
              goto LABEL_84;
            }
            int v14 = 9;
            goto LABEL_92;
          case 7:
            if (v9 >= 0) {
              uint64_t v24 = (int *)v6;
            }
            else {
              uint64_t v24 = *(int **)v6;
            }
            int v25 = *v24;
            int v26 = *(int *)((char *)v24 + 3);
            if (v25 != 980182388 || v26 != 1313099066) {
              goto LABEL_84;
            }
            int v14 = 3;
            goto LABEL_92;
          case 9:
            if (v9 >= 0) {
              uint64_t v28 = v6;
            }
            else {
              uint64_t v28 = *(void *)v6;
            }
            if (*(void *)v28 == 0x7067334049534D49 && *(unsigned char *)(v28 + 8) == 112)
            {
              int v14 = 2;
              goto LABEL_92;
            }
            if (*(void *)v28 == 0x6568746F3A6C6574 && *(unsigned char *)(v28 + 8) == 114)
            {
              int v14 = 4;
              goto LABEL_92;
            }
            if (*(void *)v28 == 0x6568746F404E444DLL && *(unsigned char *)(v28 + 8) == 114)
            {
              int v14 = 5;
              goto LABEL_92;
            }
            uint64_t v32 = *(void *)v28;
            int v33 = *(unsigned __int8 *)(v28 + 8);
            if (v32 == 0x6568746F3A706973 && v33 == 114)
            {
              int v14 = 8;
              goto LABEL_92;
            }
            goto LABEL_84;
          case 10:
            if (v9 >= 0) {
              uint64_t v35 = v6;
            }
            else {
              uint64_t v35 = *(void *)v6;
            }
            if (*(void *)v35 == 0x616D6F64404E444DLL && *(_WORD *)(v35 + 8) == 28265)
            {
              int v14 = 0;
            }
            else
            {
              uint64_t v37 = *(void *)v35;
              int v38 = *(unsigned __int16 *)(v35 + 8);
              if (v37 != 0x68746F4049534D49 || v38 != 29285)
              {
LABEL_84:
                std::string::basic_string[abi:ne180100]<0>(v56, "ims.util");
                std::string::basic_string[abi:ne180100]<0>(__p, "");
                uint64_t v40 = ims::error((uint64_t)v56, (uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"skipping unrecognized IMPU type: ", 33);
                *(unsigned char *)(v40 + 17) = 0;
                (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 32))(v40, v6);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v40 + 17) = 0;
                if (v55 < 0) {
                  operator delete(__p[0]);
                }
                if (v57 < 0) {
                  operator delete(v56[0]);
                }
                goto LABEL_109;
              }
              int v14 = 6;
            }
LABEL_92:
            uint64_t v42 = a2[1];
            unint64_t v41 = (unint64_t)a2[2];
            if ((unint64_t)v42 >= v41)
            {
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = *a2;
              uint64_t v45 = v42 - *a2;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62) {
                std::vector<ImpuType>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v47 = v41 - (void)v44;
              if (v47 >> 1 > v46) {
                unint64_t v46 = v47 >> 1;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48)
              {
                uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)(a2 + 2), v48);
                std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = *a2;
                uint64_t v42 = a2[1];
              }
              else
              {
                uint64_t v49 = 0;
              }
              long long v50 = (int *)&v49[4 * v45];
              *long long v50 = v14;
              char v43 = v50 + 1;
              while (v42 != v44)
              {
                int v51 = *--v42;
                *--long long v50 = v51;
              }
              *a2 = v50;
              a2[1] = v43;
              a2[2] = (int *)&v49[4 * v48];
              if (v44) {
                operator delete(v44);
              }
            }
            else
            {
              *uint64_t v42 = v14;
              char v43 = v42 + 1;
            }
            a2[1] = v43;
LABEL_109:
            v6 += 24;
            if (v6 == v7) {
              break;
            }
            continue;
          case 11:
            if (v9 >= 0) {
              int v15 = (uint64_t *)v6;
            }
            else {
              int v15 = *(uint64_t **)v6;
            }
            uint64_t v16 = *v15;
            uint64_t v17 = *(uint64_t *)((char *)v15 + 3);
            if (v16 != 0x6D6F644049534D49 || v17 != 0x6E69616D6F644049) {
              goto LABEL_84;
            }
            int v14 = 1;
            goto LABEL_92;
          case 16:
            if (v9 >= 0) {
              uint64_t v20 = (uint64_t *)v6;
            }
            else {
              uint64_t v20 = *(uint64_t **)v6;
            }
            uint64_t v22 = *v20;
            uint64_t v21 = v20[1];
            if (v22 != 0x6568746F3A706973 || v21 != 0x6E69616D6F644072) {
              goto LABEL_84;
            }
            int v14 = 7;
            goto LABEL_92;
          default:
            goto LABEL_84;
        }
        break;
      }
    }
    v56[0] = &v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v56);
    BOOL v52 = *a2;
    unint64_t v3 = a2[1];
  }
  else
  {
    BOOL v52 = v3;
  }
  return v52 != v3;
}

void sub_1C53CDC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::string __p = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t mdnMatch(std::string *a1, std::string *a2)
{
  unint64_t v3 = a1;
  ims::chomp(a1, "+", 1);
  ims::chomp(a2, "+", 1);
  uint64_t v4 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
  if ((v4 & 0x80u) == 0) {
    std::string::size_type size = HIBYTE(v3->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v3->__r_.__value_.__l.__size_;
  }
  std::string::size_type v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    std::string::size_type v6 = a2->__r_.__value_.__l.__size_;
  }
  if (size != v6) {
    return 0;
  }
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(v3->__r_.__value_.__l.__data_, v8, v3->__r_.__value_.__l.__size_) == 0;
  }
  if (!*((unsigned char *)&v3->__r_.__value_.__s + 23)) {
    return 1;
  }
  uint64_t v9 = v4 - 1;
  do
  {
    int v11 = v3->__r_.__value_.__s.__data_[0];
    unint64_t v3 = (std::string *)((char *)v3 + 1);
    int v10 = v11;
    int v13 = v8->__r_.__value_.__s.__data_[0];
    uint64_t v8 = (std::string *)((char *)v8 + 1);
    int v12 = v13;
    BOOL v15 = v9-- != 0;
    uint64_t result = v10 == v12;
  }
  while (v10 == v12 && v15);
  return result;
}

void SipImpuRank::preferredImpu(void *a1@<X1>, uint64_t *a2@<X2>, unsigned __int8 *a3@<X3>, unsigned __int8 *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v7 = *a2;
  if (*a2 != a2[1])
  {
    unint64_t v11 = 0;
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    unsigned int v12 = 11;
    *(void *)(a6 + 16) = 0;
    while (1)
    {
      uint64_t v86 = 0;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      *(_OWORD *)__n = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      *(_OWORD *)__s1 = 0u;
      long long v63 = 0u;
      *(_OWORD *)std::string __p = 0u;
      SipUri::SipUri((SipUri *)__p);
      if ((SipUri::fromString((uint64_t)__p, (std::string *)(v7 + 24 * v11)) & 1) == 0)
      {
        SipUri::~SipUri((SipUri *)__p);
        unsigned int v13 = 11;
        goto LABEL_35;
      }
      xpc_object_t v89 = 0;
      int64_t v90 = 0;
      uint64_t v91 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v89, "3gppnetwork.org");
      if (SipUri::isTelUri((SipUri *)__p))
      {
        if (SBYTE7(v73) < 0)
        {
          std::string::__init_copy_ctor_external(&v88, (const std::string::value_type *)v72, *((std::string::size_type *)&v72 + 1));
        }
        else
        {
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v72;
          v88.__r_.__value_.__r.__words[2] = v73;
        }
        if (*(char *)(a5 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
        }
        else {
          std::string v87 = *(std::string *)a5;
        }
        int v14 = mdnMatch(&v88, &v87);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
        if (v14) {
          unsigned int v13 = 3;
        }
        else {
          unsigned int v13 = 4;
        }
        goto LABEL_23;
      }
      if (!SipUri::isSipUri((SipUri *)__p))
      {
        unsigned int v13 = 11;
        goto LABEL_23;
      }
      if (SBYTE7(v70) < 0)
      {
        std::string::__init_copy_ctor_external(&v88, (const std::string::value_type *)__n[0], __n[1]);
      }
      else
      {
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = *(_OWORD *)__n;
        v88.__r_.__value_.__r.__words[2] = v70;
      }
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string v87 = *(std::string *)a5;
      }
      int v23 = mdnMatch(&v88, &v87);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v88.__r_.__value_.__l.__data_);
        if (v23)
        {
LABEL_59:
          uint64_t v24 = BYTE7(v63);
          if ((SBYTE7(v63) & 0x80u) == 0) {
            int v25 = (void *)BYTE7(v63);
          }
          else {
            int v25 = __s1[1];
          }
          int v26 = (void *)a3[23];
          int v27 = (char)v26;
          if ((char)v26 < 0) {
            int v26 = (void *)*((void *)a3 + 1);
          }
          if (v25 != v26) {
            goto LABEL_91;
          }
          if (v27 >= 0) {
            uint64_t v28 = a3;
          }
          else {
            uint64_t v28 = *(unsigned __int8 **)a3;
          }
          if ((BYTE7(v63) & 0x80) != 0)
          {
            if (memcmp(__s1[0], v28, (size_t)__s1[1])) {
              goto LABEL_91;
            }
          }
          else if (BYTE7(v63))
          {
            uint64_t v29 = __s1;
            while (*(unsigned __int8 *)v29 == *v28)
            {
              uint64_t v29 = (void **)((char *)v29 + 1);
              ++v28;
              if (!--v24) {
                goto LABEL_92;
              }
            }
LABEL_91:
            unsigned int v13 = 5;
            goto LABEL_23;
          }
LABEL_92:
          unsigned int v13 = 0;
          goto LABEL_23;
        }
      }
      else if (v23)
      {
        goto LABEL_59;
      }
      uint64_t v30 = BYTE7(v70);
      if ((SBYTE7(v70) & 0x80u) == 0) {
        size_t v31 = BYTE7(v70);
      }
      else {
        size_t v31 = __n[1];
      }
      uint64_t v32 = a4[23];
      int v33 = (char)v32;
      if ((v32 & 0x80u) != 0) {
        uint64_t v32 = *((void *)a4 + 1);
      }
      if (v31 == v32)
      {
        if (v33 >= 0) {
          xpc_object_t v34 = a4;
        }
        else {
          xpc_object_t v34 = *(unsigned __int8 **)a4;
        }
        if ((BYTE7(v70) & 0x80) != 0)
        {
          if (!memcmp((const void *)__n[0], v34, __n[1]))
          {
LABEL_109:
            uint64_t v42 = (char *)__s1[1];
            if ((SBYTE7(v63) & 0x80u) == 0) {
              char v43 = (char *)BYTE7(v63);
            }
            else {
              char v43 = (char *)__s1[1];
            }
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = (char *)a3[23];
            int v45 = (char)v44;
            if ((char)v44 < 0) {
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = (char *)*((void *)a3 + 1);
            }
            if (v43 != v44) {
              goto LABEL_124;
            }
            if (v45 >= 0) {
              unint64_t v46 = a3;
            }
            else {
              unint64_t v46 = *(unsigned __int8 **)a3;
            }
            if ((BYTE7(v63) & 0x80) != 0)
            {
              __s = (void **)__s1[0];
              if (!memcmp(__s1[0], v46, (size_t)__s1[1]))
              {
LABEL_148:
                unsigned int v13 = 1;
                goto LABEL_23;
              }
            }
            else
            {
              if (!BYTE7(v63)) {
                goto LABEL_148;
              }
              uint64_t v47 = __s1;
              uint64_t v48 = BYTE7(v63);
              while (*(unsigned __int8 *)v47 == *v46)
              {
                uint64_t v47 = (void **)((char *)v47 + 1);
                ++v46;
                unsigned int v13 = 1;
                if (!--v48) {
                  goto LABEL_23;
                }
              }
LABEL_124:
              uint64_t v49 = __s1;
              if (SBYTE7(v63) < 0) {
                uint64_t v49 = (void **)__s1[0];
              }
              __s = v49;
              uint64_t v42 = v43;
            }
            if (v91 >= 0) {
              long long v50 = (void **)&v89;
            }
            else {
              long long v50 = v89;
            }
            if (v91 >= 0) {
              int64_t v51 = HIBYTE(v91);
            }
            else {
              int64_t v51 = v90;
            }
            if (v51)
            {
              xpc_object_t v56 = a4;
              if ((uint64_t)v42 >= v51)
              {
                BOOL v52 = __s;
                uint64_t v58 = &v42[(void)__s];
                int v53 = *(char *)v50;
                do
                {
                  if (&v42[-v51] == (char *)-1) {
                    break;
                  }
                  long long v54 = (char *)memchr(v52, v53, (size_t)&v42[-v51 + 1]);
                  if (!v54) {
                    break;
                  }
                  char v55 = v54;
                  if (!memcmp(v54, v50, v51))
                  {
                    if (v55 != v58 && v55 - (char *)__s != -1)
                    {
                      unsigned int v13 = 2;
                      goto LABEL_136;
                    }
                    break;
                  }
                  BOOL v52 = (void **)(v55 + 1);
                  uint64_t v42 = (char *)(v58 - (v55 + 1));
                }
                while ((uint64_t)v42 >= v51);
              }
              unsigned int v13 = 6;
LABEL_136:
              a4 = v56;
            }
            else
            {
              unsigned int v13 = 2;
            }
            goto LABEL_23;
          }
        }
        else
        {
          if (!BYTE7(v70)) {
            goto LABEL_109;
          }
          uint64_t v35 = __n;
          while (*(unsigned __int8 *)v35 == *v34)
          {
            uint64_t v35 = (size_t *)((char *)v35 + 1);
            ++v34;
            if (!--v30) {
              goto LABEL_109;
            }
          }
        }
      }
      uint64_t v36 = BYTE7(v63);
      if ((SBYTE7(v63) & 0x80u) == 0) {
        uint64_t v37 = (void *)BYTE7(v63);
      }
      else {
        uint64_t v37 = __s1[1];
      }
      int v38 = (void *)a3[23];
      int v39 = (char)v38;
      if ((char)v38 < 0) {
        int v38 = (void *)*((void *)a3 + 1);
      }
      if (v37 != v38) {
        goto LABEL_138;
      }
      if (v39 >= 0) {
        uint64_t v40 = a3;
      }
      else {
        uint64_t v40 = *(unsigned __int8 **)a3;
      }
      if ((BYTE7(v63) & 0x80) != 0)
      {
        if (memcmp(__s1[0], v40, (size_t)__s1[1])) {
          goto LABEL_138;
        }
      }
      else if (BYTE7(v63))
      {
        unint64_t v41 = __s1;
        while (*(unsigned __int8 *)v41 == *v40)
        {
          unint64_t v41 = (void **)((char *)v41 + 1);
          ++v40;
          if (!--v36) {
            goto LABEL_139;
          }
        }
LABEL_138:
        unsigned int v13 = 8;
        goto LABEL_23;
      }
LABEL_139:
      unsigned int v13 = 7;
LABEL_23:
      if (SHIBYTE(v91) < 0) {
        operator delete(v89);
      }
      SipUri::~SipUri((SipUri *)__p);
      if (v13 != 11)
      {
        uint64_t v15 = a1[1] - *a1;
        if (v15)
        {
          uint64_t v16 = 0;
          unsigned int v17 = 0;
          unint64_t v18 = v15 >> 2;
          do
          {
            int v19 = *(_DWORD *)(*a1 + 4 * v16);
            if (v19 == v13) {
              goto LABEL_36;
            }
            if (v11 == 1)
            {
              if (v19 == 9) {
                goto LABEL_36;
              }
            }
            else if (!v11 && v19 == 10)
            {
              goto LABEL_36;
            }
            uint64_t v16 = ++v17;
          }
          while (v18 > v17);
        }
      }
LABEL_35:
      unsigned int v17 = 11;
LABEL_36:
      std::string::basic_string[abi:ne180100]<0>(__p, "ims.util");
      std::string::basic_string[abi:ne180100]<0>(&v89, "");
      uint64_t v20 = ims::debug((uint64_t)__p, (uint64_t)&v89);
      (*(void (**)(uint64_t, unint64_t))(*(void *)v20 + 32))(v20, *a2 + 24 * v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" (", 2);
      *(unsigned char *)(v20 + 17) = 0;
      uint64_t v21 = "undefined";
      if (v13 <= 0xA) {
        uint64_t v21 = off_1E65101C8[v13];
      }
      LoggableString::LoggableString((LoggableString *)&v88, v21);
      (*(void (**)(uint64_t, std::string *))(*(void *)v20 + 40))(v20, &v88);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)") has rank ", 11);
      *(unsigned char *)(v20 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v20 + 17) = 0;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v91) < 0) {
        operator delete(v89);
      }
      if (SHIBYTE(__s1[0]) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v22 = *(unsigned __int8 *)(a6 + 23);
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *(void *)(a6 + 8);
      }
      if (!v22 || v17 < v12)
      {
        std::string::operator=((std::string *)a6, (const std::string *)(*a2 + 24 * v11));
        unsigned int v12 = v17;
      }
      ++v11;
      uint64_t v7 = *a2;
      if (v11 >= 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3)) {
        return;
      }
    }
  }
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
}

void sub_1C53CE530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v23 - 121) < 0) {
    operator delete(*(void **)(v23 - 144));
  }
  if (*(char *)(v23 - 89) < 0) {
    operator delete(*(void **)(v23 - 112));
  }
  SipUri::~SipUri((SipUri *)&__p);
  if (*(char *)(v22 + 23) < 0) {
    operator delete(*(void **)v22);
  }
  _Unwind_Resume(a1);
}

void SipImpuRank::logRanks(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v6 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v8 = 0;
    while (!v8)
    {
      if (a4) {
        goto LABEL_7;
      }
LABEL_10:
      uint64_t v12 = *(int *)(v6 + 4 * v8);
      unsigned int v13 = "undefined";
      if (v12 <= 0xA) {
        unsigned int v13 = off_1E65101C8[v12];
      }
      LoggableString::LoggableString((LoggableString *)__p, v13);
      (*(void (**)(uint64_t, void **))(*(void *)a2 + 40))(a2, __p);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      ++v8;
      uint64_t v6 = *a3;
      if (v8 >= (a3[1] - *a3) >> 2) {
        goto LABEL_15;
      }
    }
    if (a4)
    {
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(a2 + 17) = 0;
LABEL_7:
      std::ostream::operator<<();
      *(unsigned char *)(a2 + 17) = 0;
      uint64_t v9 = *(void **)(a2 + 8);
      int v10 = ": ";
      uint64_t v11 = 2;
    }
    else
    {
      uint64_t v9 = *(void **)(a2 + 8);
      int v10 = ",";
      uint64_t v11 = 1;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    *(unsigned char *)(a2 + 17) = 0;
    uint64_t v6 = *a3;
    goto LABEL_10;
  }
LABEL_15:
  if (a4)
  {
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(a2 + 17) = 0;
  }
}

void sub_1C53CE7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<IpAddress>>::__init_with_size[abi:ne180100]<std::shared_ptr<IpAddress>*,std::shared_ptr<IpAddress>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<IpAddress>>,std::shared_ptr<IpAddress>*,std::shared_ptr<IpAddress>*,std::shared_ptr<IpAddress>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C53CE82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end = this->__end_;
  uint64_t v7 = (char *)__from_s + (char *)end - (char *)__to;
  std::vector<std::string>::pointer v8 = end;
  if (v7 < (char *)__from_e)
  {
    unint64_t v9 = (unint64_t)v7;
    std::vector<std::string>::pointer v8 = this->__end_;
    do
    {
      long long v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::vector<std::string>::pointer begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__p, (long long *)this->__end_, (uint64_t)__v->__end_);
  unint64_t v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  std::vector<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 + 16) = *(void *)(v6 - 8);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v6 - 1) = 0;
      *(unsigned char *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v7[0] = a1;
  v7[1] = &v8;
  void v7[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      v4 += 24;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      a2 = (long long *)((char *)a2 + 24);
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  v7[3] = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void XcapCallerIDManager::fetchOIP()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)v0);
}

void sub_1C53CEB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x1C878E320](v7, 0x10B2C409DA9FE99);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)va);
  _Unwind_Resume(a1);
}

void ___ZN19XcapCallerIDManager8fetchOIPEU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, uint64_t a2, bambi::XmlParser *a3)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  XcapDocumentOIP::XcapDocumentOIP((XcapDocumentOIP *)v10);
  if (((*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16)) & 1) == 0)bambi::XmlParser::parseXml(a3, (uint64_t)v10, v6, v7); {
  uint64_t v8 = *(void *)(a1 + 32);
  }
  ImsResult::ImsResult((ImsResult *)v9, (const std::string *)a2);
  (*(void (**)(uint64_t, unsigned char *, _OWORD *))(v8 + 16))(v8, v9, v10);
  ImsResult::~ImsResult((ImsResult *)v9);
  bambi::XmlTreeItem::~XmlTreeItem((void **)v10 + 1);
}

void sub_1C53CEC84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  ImsResult::~ImsResult((ImsResult *)va);
  bambi::XmlTreeItem::~XmlTreeItem((void **)va1);
  _Unwind_Resume(a1);
}

void XcapCallerIDManager::setOIP()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)v0);
}

void sub_1C53CEE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  MEMORY[0x1C878E320](v27, 0x10B2C409DA9FE99);
  if (a26 < 0) {
    operator delete(__p);
  }
  bambi::XmlTreeItem::~XmlTreeItem(v26);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)(v28 - 96));
  _Unwind_Resume(a1);
}

void ___ZN19XcapCallerIDManager6setOIPEbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const std::string *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, unsigned char *, void))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1C53CEF24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void XcapCallerIDManager::fetchOIR()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)v0);
}

void sub_1C53CF040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x1C878E320](v7, 0x10B2C409DA9FE99);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)va);
  _Unwind_Resume(a1);
}

void ___ZN19XcapCallerIDManager8fetchOIREU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, uint64_t a2, bambi::XmlParser *a3)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  XcapDocumentOIR::XcapDocumentOIR((XcapDocumentOIR *)v10);
  if (((*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16)) & 1) == 0)bambi::XmlParser::parseXml(a3, (uint64_t)v10, v6, v7); {
  uint64_t v8 = *(void *)(a1 + 32);
  }
  ImsResult::ImsResult((ImsResult *)v9, (const std::string *)a2);
  (*(void (**)(uint64_t, unsigned char *, _OWORD *))(v8 + 16))(v8, v9, v10);
  ImsResult::~ImsResult((ImsResult *)v9);
  bambi::XmlTreeItem::~XmlTreeItem((void **)v10 + 1);
}

void sub_1C53CF144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  ImsResult::~ImsResult((ImsResult *)va);
  bambi::XmlTreeItem::~XmlTreeItem((void **)va1);
  _Unwind_Resume(a1);
}

void XcapCallerIDManager::setOIR()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)v0);
}

void sub_1C53CF324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  MEMORY[0x1C878E320](v27, 0x10B2C409DA9FE99);
  if (a26 < 0) {
    operator delete(__p);
  }
  bambi::XmlTreeItem::~XmlTreeItem(v26);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)(v28 - 96));
  _Unwind_Resume(a1);
}

void ___ZN19XcapCallerIDManager6setOIREbbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const std::string *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, unsigned char *, void))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1C53CF3EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void XcapCallerIDManager::~XcapCallerIDManager(void **this)
{
  *this = &unk_1F20BBE38;
  XcapConfig::~XcapConfig(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_1F20BBE38;
  XcapConfig::~XcapConfig(this + 1);
  JUMPOUT(0x1C878E320);
}

void SipSecurityAssociationPair::~SipSecurityAssociationPair(SipSecurityAssociationPair *this)
{
  *(void *)this = &unk_1F20C9318;
  if (*((_DWORD *)this + 2) && !*((unsigned char *)this + 81)) {
    (*(void (**)(void))(**((void **)this + 6) + 40))(*((void *)this + 6));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *((void *)this + 1) = 0;
  if (*((char *)this + 79) < 0)
  {
    **((unsigned char **)this + 7) = 0;
    *((void *)this + 8) = 0;
    if (*((char *)this + 79) < 0) {
      operator delete(*((void **)this + 7));
    }
  }
  else
  {
    *((unsigned char *)this + 56) = 0;
    *((unsigned char *)this + 79) = 0;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

{
  uint64_t vars8;

  SipSecurityAssociationPair::~SipSecurityAssociationPair(this);
  JUMPOUT(0x1C878E320);
}

void SipSecurityAssociationPair::setLocalAddress(uint64_t a1, uint64_t a2)
{
  (*(void (**)(long long *__return_ptr))(**(void **)a2 + 32))(&v5);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (*((void *)&v5 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
    }
  }
}

void SipSecurityAssociationPair::setRemoteAddress(uint64_t a1, uint64_t a2)
{
  (*(void (**)(long long *__return_ptr))(**(void **)a2 + 32))(&v5);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (*((void *)&v5 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
    }
  }
}

double SipSecurityAssociationPair::createTemporary@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  if (*(unsigned char *)(a1 + 81))
  {
    if (*(unsigned char *)(a1 + 80)) {
      int v9 = 64236;
    }
    else {
      int v9 = 52911;
    }
    *(_DWORD *)(a1 + 8) = v9;
    if (*(char *)(a1 + 79) < 0)
    {
      *(void *)(a1 + 64) = 4;
      uint64_t v10 = *(char **)(a1 + 56);
    }
    else
    {
      uint64_t v10 = (char *)(a1 + 56);
      *(unsigned char *)(a1 + 79) = 4;
    }
    strcpy(v10, "fake");
    double result = 0.0;
    *(_OWORD *)(a7 + 24) = 0u;
    *(_OWORD *)(a7 + 40) = 0u;
    *(_OWORD *)(a7 + 56) = 0u;
    *(void *)a7 = &unk_1F20B2680;
    *(void *)(a7 + 8) = &_bambiDomain;
    *(_DWORD *)(a7 + 16) = 0;
  }
  else
  {
    *(void *)(a7 + 64) = 0;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 48)
                                                                                                  + 24))(*(void *)(a1 + 48), a2, a3, a4, a1 + 8, a1 + 56, a5, a6);
    if (((*(uint64_t (**)(void, void))(**(void **)(a7 + 8) + 24))(*(void *)(a7 + 8), *(unsigned int *)(a7 + 16)) & 1) == 0)
    {
      SipSecurityAssociationPair::setLocalAddress(a1, a2);
      SipSecurityAssociationPair::setRemoteAddress(a1, a3);
    }
  }
  return result;
}

void sub_1C53CF814(_Unwind_Exception *a1)
{
  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

void SipSecurityAssociationPair::update(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 81))
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v11 = &unk_1F20B2680;
    uint64_t v12 = &_bambiDomain;
    int v13 = 1073741826;
    long long v5 = (const std::string *)ImsResult::operator<<<char [32]>((uint64_t)&v11, "update called on a fake SA pair");
    ImsResult::ImsResult((ImsResult *)a4, v5);
LABEL_3:
    ImsResult::~ImsResult((ImsResult *)&v11);
    return;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v11 = &unk_1F20B2680;
    uint64_t v12 = &_bambiDomain;
    int v13 = 1073741826;
    int v9 = (const std::string *)ImsResult::operator<<<char [42]>((uint64_t)&v11, "update called on an uninitialized SA pair");
    ImsResult::ImsResult((ImsResult *)a4, v9);
    goto LABEL_3;
  }
  if (!*(_DWORD *)(a1 + 12))
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v11 = &unk_1F20B2680;
    uint64_t v12 = &_bambiDomain;
    int v13 = 1073741826;
    uint64_t v10 = (const std::string *)ImsResult::operator<<<char [43]>((uint64_t)&v11, "update called without setting outbound SPI");
    ImsResult::ImsResult((ImsResult *)a4, v10);
    goto LABEL_3;
  }
  *(void *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  (*(void (**)(void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48));
  if (((*(uint64_t (**)(void, void))(**(void **)(a4 + 8) + 24))(*(void *)(a4 + 8), *(unsigned int *)(a4 + 16)) & 1) == 0)
  {
    SipSecurityAssociationPair::setLocalAddress(a1, a2);
    SipSecurityAssociationPair::setRemoteAddress(a1, a3);
  }
}

void sub_1C53CFA3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipSecurityAssociationPair::loggableName(LoggableString *a1@<X8>)
{
}

uint64_t SipPrackHandler::SipPrackHandler(uint64_t a1, void *a2, uint64_t *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.prack");
  ImsLogContainer::ImsLogContainer(a1, &__p, (const std::string *)(*a2 + 32));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)a1 = &unk_1F20C9360;
  *(void *)(a1 + 104) = &unk_1F20C93D0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 128));
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(void *)(a1 + 344) = a1 + 344;
  *(void *)(a1 + 352) = a1 + 344;
  *(void *)(a1 + 360) = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 280);
    *(void *)(a1 + 272) = v6;
    *(void *)(a1 + 280) = v7;
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(void *)(a1 + 272) = v6;
    *(void *)(a1 + 280) = 0;
  }
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 296);
  *(void *)(a1 + 288) = v9;
  *(void *)(a1 + 296) = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  *(void *)(a1 + 232) = a1 + 104;
  uint64_t v12 = *a2;
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)(a1 + 8));
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(v12 + 32));
  *(unsigned char *)(a1 + 368) = 0;
  return a1;
}

void sub_1C53CFBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  unsigned int v17 = *(std::__shared_weak_count **)(v15 + 120);
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  ImsLogContainer::~ImsLogContainer((void **)v15);
  _Unwind_Resume(a1);
}

void SipPrackHandler::~SipPrackHandler(SipPrackHandler *this)
{
  *(void *)this = &unk_1F20C9360;
  *((void *)this + 13) = &unk_1F20C93D0;
  uint64_t v2 = (char *)this + 304;
  for (uint64_t i = (void *)*((void *)this + 40); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = (void *)i[3];
    if (v4)
    {
      if (*v4) {
        (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
      }
      MEMORY[0x1C878E320](v4, 0x1020C403A5D3213);
    }
  }
  for (std::string::size_type j = (void *)*((void *)this + 44); j != (void *)((char *)this + 344); std::string::size_type j = (void *)j[1])
  {
    uint64_t v6 = j[2];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  std::__list_imp<unsigned long long>::clear((void *)this + 43);
  std::__list_imp<unsigned long long>::clear((void *)this + 43);
  std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::~__hash_table((uint64_t)v2);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  SipTimerContainer::~SipTimerContainer((SipPrackHandler *)((char *)this + 128));
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  SipPrackHandler::~SipPrackHandler(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipPrackHandler::~SipPrackHandler(SipPrackHandler *this)
{
}

{
  uint64_t vars8;

  SipPrackHandler::~SipPrackHandler((SipPrackHandler *)((char *)this - 104));
  JUMPOUT(0x1C878E320);
}

void SipPrackHandler::loggableName(SipPrackHandler *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C53D008C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)(v21 - 64));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipPrackHandler::loggableName(SipPrackHandler *this)
{
}

void SipPrackHandler::handlePrack(int8x8_t *a1, uint64_t a2, uint64_t a3, SipDialogFork **a4, uint64_t *a5)
{
  uint64_t v9 = (unsigned int *)SipMessage::header<SipRAckHeader>(a2);
  if (!v9)
  {
    uint64_t v24 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 56))(a1);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"PRACK request missing RAck header", 33);
    *(unsigned char *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v24 + 17) = 0;
    int v25 = *(void **)a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "Missing RAck header");
    SipServerTransaction::sendResponse(v25, 400, &__p);
    uint64_t v23 = (ImsResult *)&v57;
LABEL_16:
    ImsResult::~ImsResult(v23);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  uint64_t v10 = v9;
  uint64_t v11 = a1 + 38;
  uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned int,SipSentResponse *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,SipSentResponse *>>>::find<unsigned int>(&a1[38], v9[15]);
  if (!v12 || (int v13 = (void *)v12[3]) == 0)
  {
    uint64_t v21 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"no provisional response found with RSeq ", 40);
    *(unsigned char *)(v21 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    uint64_t v22 = *(void **)a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid RSeq");
    SipServerTransaction::sendResponse(v22, 400, &__p);
    uint64_t v23 = (ImsResult *)&v56;
    goto LABEL_16;
  }
  long long v14 = (std::__shared_weak_count *)a1[35];
  if (v14)
  {
    uint64_t v15 = std::__shared_weak_count::lock(v14);
    long long v16 = v15;
    if (v15)
    {
      int8x8_t v17 = a1[34];
      if (v17)
      {
        long long v52 = 0u;
        long long v51 = 0u;
        uint64_t v18 = *(void *)(*(void *)&v17 + 248);
        if (v18)
        {
          uint64_t v18 = *(void *)(v18 + 216);
          if (v18) {
            uint64_t v18 = *(void *)(v18 + 136);
          }
        }
        uint64_t v50 = 0;
        long long v48 = 0uLL;
        long long v49 = 0uLL;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        LODWORD(v51) = 1065353216;
        *(void *)&long long v52 = v18 + 288;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DD488;
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        int v53 = 0;
        DWORD2(v52) = 200;
        uint64_t v19 = *a5;
        if (*a5)
        {
          uint64_t v20 = a5[1];
          uint64_t v45 = v19;
          uint64_t v46 = v20;
          if (v20) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
          }
          SipMessage::setSdp();
        }
        long long v16 = v15;
        (*(void (**)(void *__return_ptr))(**(void **)a3 + 168))(v43);
        ImsResult::~ImsResult((ImsResult *)v43);
        uint64_t v28 = ims::logger(v27);
        uint64_t v29 = ImsLogger::facilityWithName(v28, (unsigned __int8 *)&a1[1], 0);
        uint64_t v30 = v28 + 96;
        if (v29) {
          uint64_t v30 = v29;
        }
        if (*(int *)(v30 + 80) >= 7)
        {
          memset(v44, 0, 24);
          (*(void (**)(unsigned int *, std::string *))(*(void *)v10 + 40))(v10, v44);
          uint64_t v31 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
          (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"Received PRACK for response ", 28);
          *(unsigned char *)(v31 + 17) = 0;
          LoggableString::LoggableString(&v42, v44);
          (*(void (**)(uint64_t, std::string *))(*(void *)v31 + 40))(v31, &v42);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v31 + 17) = 0;
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v42.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v44[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v44[0].__r_.__value_.__l.__data_);
          }
        }
        SipPrackHandler::timerIdForRseq((SipPrackHandler *)v44);
        SipTimerContainer::cancelTimer(a1 + 16, v44);
        if (SHIBYTE(v44[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44[0].__r_.__value_.__l.__data_);
        }
        if (*v13) {
          (*(void (**)(void))(*(void *)*v13 + 8))(*v13);
        }
        MEMORY[0x1C878E320](v13, 0x1020C403A5D3213);
        uint64_t v32 = std::__hash_table<std::__hash_value_type<unsigned int,SipSentResponse *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,SipSentResponse *>>>::find<unsigned int>(&a1[38], v10[15]);
        if (!v32) {
          goto LABEL_61;
        }
        int8x8_t v33 = a1[39];
        uint64_t v34 = *v32;
        unint64_t v35 = v32[1];
        uint8x8_t v36 = (uint8x8_t)vcnt_s8(v33);
        v36.i16[0] = vaddlv_u8(v36);
        if (v36.u32[0] > 1uLL)
        {
          if (v35 >= *(void *)&v33) {
            v35 %= *(void *)&v33;
          }
        }
        else
        {
          v35 &= *(void *)&v33 - 1;
        }
        uint64_t v37 = *(uint64_t **)(*(void *)v11 + 8 * v35);
        do
        {
          int v38 = (int8x8_t *)v37;
          uint64_t v37 = (uint64_t *)*v37;
        }
        while (v37 != v32);
        if (v38 == &a1[40]) {
          goto LABEL_50;
        }
        int8x8_t v39 = v38[1];
        if (v36.u32[0] > 1uLL)
        {
          if (*(void *)&v39 >= *(void *)&v33) {
            *(void *)&v39 %= *(void *)&v33;
          }
        }
        else
        {
          *(void *)&v39 &= *(void *)&v33 - 1;
        }
        if (*(void *)&v39 != v35)
        {
LABEL_50:
          if (v34)
          {
            unint64_t v40 = *(void *)(v34 + 8);
            if (v36.u32[0] > 1uLL)
            {
              unint64_t v41 = *(void *)(v34 + 8);
              if (v40 >= *(void *)&v33) {
                unint64_t v41 = v40 % *(void *)&v33;
              }
            }
            else
            {
              unint64_t v41 = v40 & (*(void *)&v33 - 1);
            }
            if (v41 == v35) {
              goto LABEL_54;
            }
          }
          *(void *)(*(void *)v11 + 8 * v35) = 0;
          uint64_t v34 = *v32;
        }
        if (!v34)
        {
LABEL_60:
          *int v38 = (int8x8_t)v34;
          *uint64_t v32 = 0;
          --*(void *)&a1[41];
          operator delete(v32);
LABEL_61:
          if ((SipPrackHandler::hasOutstandingSdp((SipPrackHandler *)a1) & 1) == 0) {
            SipDialogFork::outstandingResponseSdpPracked(*a4);
          }
          SipPrackHandler::sendNextQueuedResponse((SipPrackHandler *)a1);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DD488;
          if (SHIBYTE(v55) < 0) {
            operator delete(v53);
          }
          SipMessage::~SipMessage((SipMessage *)&__p);
          goto LABEL_66;
        }
        unint64_t v40 = *(void *)(v34 + 8);
LABEL_54:
        if (v36.u32[0] > 1uLL)
        {
          if (v40 >= *(void *)&v33) {
            v40 %= *(void *)&v33;
          }
        }
        else
        {
          v40 &= *(void *)&v33 - 1;
        }
        if (v40 != v35)
        {
          *(void *)(*(void *)v11 + 8 * v40) = v38;
          uint64_t v34 = *v32;
        }
        goto LABEL_60;
      }
    }
  }
  else
  {
    long long v16 = 0;
  }
  uint64_t v26 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 56))(a1);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"Unknown session. Can't handle Prack", 35);
  *(unsigned char *)(v26 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v26 + 17) = 0;
  if (v16) {
LABEL_66:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
}

void sub_1C53D0990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  SipResponse::~SipResponse(&a50);
  std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  _Unwind_Resume(a1);
}

uint64_t SipPrackHandler::timerIdForRseq(SipPrackHandler *this)
{
  uint64_t v8 = 0;
  long long v6 = 0u;
  memset(v7, 0, sizeof(v7));
  *(_OWORD *)std::string __p = 0u;
  long long v5 = 0u;
  memset(v3, 0, sizeof(v3));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rseq ", 5);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v3 + 8, this);
  *(void *)&v3[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v3 + *(void *)(*(void *)&v3[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v3[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v7);
}

void sub_1C53D0BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SipPrackHandler::hasOutstandingSdp(SipPrackHandler *this)
{
  for (uint64_t i = (uint64_t **)*((void *)this + 40); i; uint64_t i = (uint64_t **)*i)
  {
    long long v3 = SipMessage::body<SipSdpBody>(*i[3]);
    if (v3)
    {
      uint64_t v5 = *((void *)v3 + 1);
      uint64_t v4 = (std::__shared_weak_count *)*((void *)v3 + 2);
      if (v4)
      {
        uint64_t v6 = 1;
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        if (v5) {
          return v6;
        }
      }
      else if (v5)
      {
        return 1;
      }
    }
  }
  uint64_t v7 = (char *)this + 344;
  for (uint64_t j = *((void *)this + 44); (char *)j != v7; uint64_t j = *(void *)(j + 8))
  {
    uint64_t v9 = SipMessage::body<SipSdpBody>(*(void *)(j + 16));
    if (v9)
    {
      uint64_t v11 = *((void *)v9 + 1);
      uint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 2);
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        if (v11) {
          return 1;
        }
      }
      else if (v11)
      {
        return 1;
      }
    }
  }
  return 0;
}

SipPrackHandler *SipPrackHandler::sendNextQueuedResponse(SipPrackHandler *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1)
  {
    uint64_t v2 = this;
    long long v3 = (uint64_t *)*((void *)this + 44);
    uint64_t v4 = (const SipResponse *)v3[2];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = v3[1];
    *(void *)v3[1] = v5;
    *((void *)v2 + 45) = v1 - 1;
    operator delete(v3);
    uint64_t v6 = (*(uint64_t (**)(SipPrackHandler *))(*(void *)v2 + 64))(v2);
    (*(void (**)(SipPrackHandler *, uint64_t))(*(void *)v2 + 16))(v2, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"sending queued ", 15);
    *(unsigned char *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" response", 9);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    SipPrackHandler::sendResponse(v2, v4);
    uint64_t v7 = *(uint64_t (**)(const SipResponse *))(*(void *)v4 + 8);
    return (SipPrackHandler *)v7(v4);
  }
  return this;
}

uint64_t SipPrackHandler::sendResponse(SipPrackHandler *this, const SipResponse *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v4 = SipPrackHandler::responseRequiresPrack(this, *(const SipRequest **)(*((void *)this + 36) + 296), a2);
  uint64_t v5 = (*(uint64_t (**)(const SipResponse *))(*(void *)a2 + 32))(a2);
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "100rel");
    SipMessage::addRequiredOption((SipMessage *)v5, &__p);
    if (v21 < 0) {
      operator delete(__p);
    }
    int v6 = *(_DWORD *)(*((void *)this + 36) + 576);
    *((_DWORD *)SipMessage::header<SipRSeqHeader>((SipMessage *)v5, 1) + 15) = v6;
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      uint64_t v9 = *((void *)this + 34);
      if (v9)
      {
        uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 37);
        v17[0] = *((void *)this + 36);
        v17[1] = (uint64_t)v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipSession::sendQueuedResponseInTransaction(v9, v5, v17, (uint64_t)&__p);
        int v11 = ((uint64_t (*)(std::__shared_weak_count *, void))v19->__get_deleter)(v19, v20);
        ImsResult::~ImsResult((ImsResult *)&__p);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        if (v11)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
            uint64_t v5 = 0;
          }
        }
        else
        {
          if (v4)
          {
            ++*(_DWORD *)(*((void *)this + 36) + 576);
            int v13 = (std::__shared_weak_count *)*((void *)this + 35);
            if (v13)
            {
              if (std::__shared_weak_count::lock(v13))
              {
                long long v14 = (std::__shared_weak_count *)*((void *)this + 34);
                if (v14)
                {
                  SipSessionInterface::stack(v14, &__p);
                  uint64_t v15 = SipUserAgent::config(*((SipUserAgent **)__p + 18));
                  SipTimers::timerValue((SipTimers *)(v15 + 512), (const SipTimer *)&SipTimers::kTimerT1, 0);
                  if (v19) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
                  }
                }
              }
            }
            operator new();
          }
          if (v5) {
            (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
          }
          if ((*((_DWORD *)a2 + 22) - 200) >= 0xFFFFFF9C) {
            SipPrackHandler::sendNextQueuedResponse(this);
          }
          uint64_t v5 = 1;
        }
LABEL_32:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return v5;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v12 = (*(uint64_t (**)(SipPrackHandler *))(*(void *)this + 56))(this);
  (*(void (**)(SipPrackHandler *, uint64_t))(*(void *)this + 16))(this, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Unknown session. Can't send Response from PrackHandler", 54);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v5 = 0;
  if (v8) {
    goto LABEL_32;
  }
  return v5;
}

void sub_1C53D1724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

uint64_t SipPrackHandler::responseRequiresPrack(SipPrackHandler *this, const SipRequest *a2, const SipResponse *a3)
{
  int v6 = *((_DWORD *)a3 + 22);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 35);
  if (!v7)
  {
    uint64_t v8 = 0;
LABEL_8:
    BOOL v13 = 0;
    goto LABEL_11;
  }
  uint64_t v8 = std::__shared_weak_count::lock(v7);
  if (!v8) {
    goto LABEL_8;
  }
  uint64_t v9 = *((void *)this + 34);
  if (!v9) {
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v9 + 248);
  if (v10 && (uint64_t v11 = *(void *)(v10 + 216)) != 0) {
    uint64_t v12 = *(SipUserAgent **)(v11 + 136);
  }
  else {
    uint64_t v12 = 0;
  }
  BOOL v13 = *(unsigned char *)(SipUserAgent::config(v12) + 40) != 0;
LABEL_11:
  if ((*((_DWORD *)a3 + 22) - 101) > 0x62)
  {
    uint64_t v14 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "100rel");
    if (SipMessage::requiresOption((uint64_t)a2, __p))
    {
      uint64_t v14 = 1;
    }
    else
    {
      BOOL v15 = (v6 - 180) < 0xA && v13;
      if (*((void *)a3 + 9)) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v15;
      }
    }
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v14;
}

void sub_1C53D1940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipPrackHandler::queueResponse(SipPrackHandler *this, const SipResponse *a2)
{
  if (*((unsigned char *)this + 368)) {
    return 0;
  }
  if (!*((void *)this + 41))
  {
    uint64_t v6 = (*(uint64_t (**)(SipPrackHandler *))(*(void *)this + 64))(this);
    (*(void (**)(SipPrackHandler *, uint64_t))(*(void *)this + 16))(this, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"no outstanding responses. Sending ", 34);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(std::string *__return_ptr, const SipResponse *))(*(void *)a2 + 48))(&v18, a2);
    LoggableString::LoggableString(&__p, &v18);
    (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 40))(v6, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" immediately.", 13);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_7;
  }
  unsigned int v5 = *((_DWORD *)a2 + 22);
  if (v5 < 0x12C)
  {
    if (v5 - 200 <= 0x63 && (SipPrackHandler::hasOutstandingSdp(this) & 1) == 0)
    {
      uint64_t v6 = (*(uint64_t (**)(SipPrackHandler *))(*(void *)this + 64))(this);
      (*(void (**)(SipPrackHandler *, uint64_t))(*(void *)this + 16))(this, v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"no outstanding SDP. Sending ", 28);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(std::string *__return_ptr, const SipResponse *))(*(void *)a2 + 48))(&v18, a2);
      LoggableString::LoggableString(&__p, &v18);
      (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 40))(v6, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" immediately.", 13);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_7;
    }
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 35);
    if (v8)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 34);
        if (v10)
        {
          SipSessionInterface::stack(v10, &__p);
          int v11 = *(unsigned __int8 *)(SipUserAgent::config(*(SipUserAgent **)(__p.__r_.__value_.__r.__words[0] + 144))
                                   + 41);
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
          if (!v11
            && (*((_DWORD *)a2 + 22) - 100) <= 0x63
            && (SipPrackHandler::responseRequiresPrack(this, *(const SipRequest **)(*((void *)this + 36) + 296), a2) & 1) == 0)
          {
            uint64_t v12 = (*(uint64_t (**)(SipPrackHandler *))(*(void *)this + 64))(this);
            (*(void (**)(SipPrackHandler *, uint64_t))(*(void *)this + 16))(this, v12);
            (*(void (**)(std::string *__return_ptr, const SipResponse *))(*(void *)a2 + 48))(&v18, a2);
            LoggableString::LoggableString(&__p, &v18);
            (*(void (**)(uint64_t, std::string *))(*(void *)v12 + 40))(v12, &__p);
            BOOL v13 = (unsigned char *)ImsOutStream::operator<<(v12, "is not reliable. Sending immediately.");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v13[17] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v18.__r_.__value_.__l.__data_);
            }
            uint64_t v2 = SipPrackHandler::sendResponse(this, a2);
            goto LABEL_30;
          }
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v14 = (*(uint64_t (**)(SipPrackHandler *))(*(void *)this + 64))(this);
    (*(void (**)(SipPrackHandler *, uint64_t))(*(void *)this + 16))(this, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"queuing ", 8);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" response: ", 11);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" outstanding reliable responses", 31);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    uint64_t v15 = (*(uint64_t (**)(const SipResponse *))(*(void *)a2 + 32))(a2);
    long long v16 = operator new(0x18uLL);
    v16[1] = (char *)this + 344;
    v16[2] = v15;
    uint64_t v17 = *((void *)this + 43);
    void *v16 = v17;
    *(void *)(v17 + 8) = v16;
    *((void *)this + 43) = v16;
    ++*((void *)this + 45);
    uint64_t v2 = 1;
    if (!v9) {
      return v2;
    }
LABEL_30:
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    return v2;
  }
  uint64_t v6 = (*(uint64_t (**)(SipPrackHandler *))(*(void *)this + 64))(this);
  (*(void (**)(SipPrackHandler *, uint64_t))(*(void *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Sending error response ", 23);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(std::string *__return_ptr, const SipResponse *))(*(void *)a2 + 48))(&v18, a2);
  LoggableString::LoggableString(&__p, &v18);
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 40))(v6, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" immediately.", 13);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_7:
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return SipPrackHandler::sendResponse(this, a2);
}

void sub_1C53D20A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void SipPrackHandler::handleTimer(uint64_t a1, std::string *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (std::string::compare(this, 0, 5uLL, "rseq ")) {
    goto LABEL_2;
  }
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v10 = this;
    if (HIBYTE(this->__r_.__value_.__r.__words[2]) >= 6u) {
      goto LABEL_18;
    }
LABEL_2:
    unsigned int v4 = 0;
    goto LABEL_3;
  }
  if (this->__r_.__value_.__l.__size_ < 6) {
    goto LABEL_2;
  }
  uint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_18:
  unsigned int v4 = strtoul(&v10->__r_.__value_.__s.__data_[5], 0, 10);
LABEL_3:
  uint64_t v6 = *(void *)(a1 + 112);
  unsigned int v5 = *(std::__shared_weak_count **)(a1 + 120);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned int,SipSentResponse *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,SipSentResponse *>>>::find<unsigned int>((void *)(a1 + 304), v4);
  if (v7)
  {
    uint64_t v8 = v7[3];
    if (v8)
    {
      (*(void (**)(void *__return_ptr))(**(void **)(a1 + 288) + 168))(v11);
      ImsResult::~ImsResult((ImsResult *)v11);
      *(_DWORD *)(v8 + 8) *= 2;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v13 = 0;
      uint64_t v9 = operator new(0x20uLL);
      void *v9 = &unk_1F20C94D8;
      v9[1] = a1;
      v9[2] = v6;
      v9[3] = v5;
      BOOL v13 = v9;
      SipTimerContainer::startTimer((int8x8_t *)(a1 + 128), (uint64_t)this);
      std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v12);
    }
  }
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1C53D22EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v10)
  {
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(a1);
}

void SipPrackHandler::logPrefix(SipPrackHandler *this, ImsOutStream *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 80))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C53D23D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,SipSentResponse *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,SipSentResponse *>>>::find<unsigned int>(void *a1, unsigned int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  unsigned int v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (double result = *v5; result; double result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C9458;
  unint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C9458;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20C9458;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C9458;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      unint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C53D26EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C94D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C94D8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20C94D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C94D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      unint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C53D2994(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void ims::toString<BambiCallParticipant::ParticipantState>(int *a1@<X0>, std::string *a2@<X8>)
{
  if (*a1 < 12)
  {
    uint64_t v2 = (char *)&stateNames + 24 * *a1;
    if (v2[23] < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((void *)v2 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
      a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "Unknown");
  }
}

uint64_t BambiCallParticipant::BambiCallParticipant(uint64_t a1, void *a2, void *a3)
{
  *(void *)a1 = &unk_1F20C9828;
  *(void *)(a1 + 8) = &unk_1F20E7B98;
  *(void *)(a1 + 16) = &unk_1F20B2FA8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call.participant");
  ImsLogContainer::ImsLogContainer(a1 + 24, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)a1 = &unk_1F20C9558;
  *(void *)(a1 + 8) = &unk_1F20C95D8;
  *(void *)(a1 + 16) = &unk_1F20C9710;
  *(void *)(a1 + 24) = &unk_1F20C9740;
  *(void *)(a1 + 144) = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 152) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "Participant");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)(a1 + 160), &v9, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = *a3;
  uint64_t v7 = a3[1];
  *(void *)(a1 + 224) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_1C53D2C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  unsigned int v20 = *(std::__shared_weak_count **)(v17 + 152);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  char v21 = *(std::__shared_weak_count **)(v17 + 136);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  ImsLogContainer::~ImsLogContainer(v18);
  _Unwind_Resume(a1);
}

void BambiCallParticipant::initialize(BambiCallParticipant *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unint64_t v4 = v3;
      uint64_t v5 = (void *)*((void *)this + 18);
      if (v5)
      {
        *((void *)this + 26) = v5[51];
        v5[51] = (char *)this + 8;
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v11, (void *)this + 16);
        uint64_t v7 = v11;
        uint64_t v6 = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v5[185] = v7;
        uint64_t v8 = (std::__shared_weak_count *)v5[186];
        v5[186] = v6;
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        uint64_t v9 = v5;
        uint64_t v10 = v4;
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        SipTypedTerminationLock<SipLockable>::set((uint64_t)this + 160, (uint64_t *)&v9);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C53D2D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void BambiCallParticipant::~BambiCallParticipant(BambiCallParticipant *this)
{
  *(void *)this = &unk_1F20C9558;
  *((void *)this + 1) = &unk_1F20C95D8;
  *((void *)this + 2) = &unk_1F20C9710;
  uint64_t v2 = (char *)this + 24;
  *((void *)this + 3) = &unk_1F20C9740;
  uint64_t v3 = ImsLogContainer::debugStream((BambiCallParticipant *)((char *)this + 24));
  (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"~BambiCallParticipant", 21);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (*((void *)this + 29)) {
    *((void *)this + 29) = 0;
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 18);
      if (v6)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v6 + 1488);
        *(_OWORD *)(v6 + 1480) = 0u;
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        *(void *)(v6 + 408) = *((void *)this + 26);
        uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 19);
        *((void *)this + 18) = 0;
        *((void *)this + 19) = 0;
        if (v8) {
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v12 = 0;
  BOOL v13 = 0;
  SipTypedTerminationLock<SipLockable>::set((uint64_t)this + 160, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)this + 160);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  *((void *)this + 3) = &unk_1F20C9CA0;
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
}

{
  uint64_t vars8;

  BambiCallParticipant::~BambiCallParticipant(this);
  JUMPOUT(0x1C878E320);
}

void sub_1C53D2FAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __clang_call_terminate(a1);
}

void non-virtual thunk to'BambiCallParticipant::~BambiCallParticipant(BambiCallParticipant *this)
{
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiCallParticipant *)((char *)this - 16));
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiCallParticipant *)((char *)this - 24));
}

{
  uint64_t vars8;

  BambiCallParticipant::~BambiCallParticipant((BambiCallParticipant *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiCallParticipant::~BambiCallParticipant((BambiCallParticipant *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiCallParticipant::~BambiCallParticipant((BambiCallParticipant *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

void BambiCallParticipant::setState(uint64_t a1, uint64_t a2, int a3)
{
  int v19 = a2;
  uint64_t v3 = *(unsigned int *)(a1 + 240);
  if (v3 != a2)
  {
    int v18 = *(_DWORD *)(a1 + 240);
    uint64_t v8 = a1 + 24;
    uint64_t v7 = *(void *)(a1 + 24);
    *(_DWORD *)(a1 + 240) = a2;
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(v7 + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"state change from ", 18);
    *(unsigned char *)(v9 + 17) = 0;
    ims::toString<BambiCallParticipant::ParticipantState>(&v18, &v17);
    (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 32))(v9, &v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" to ", 4);
    *(unsigned char *)(v9 + 17) = 0;
    ims::toString<BambiCallParticipant::ParticipantState>(&v19, &__p);
    (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 32))(v9, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 224);
    if (v10)
    {
      uint64_t v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        uint64_t v12 = v11;
        if (a3)
        {
          uint64_t v13 = *(void *)(a1 + 216);
          if (v13)
          {
            std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v14, (void *)(a1 + 128));
            (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v13 + 16))(v13, &v14, v3, a2);
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
  }
}

void sub_1C53D32F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

void BambiCallParticipant::prepare(BambiCallParticipant *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  memset(&v14[2], 0, 56);
  v14[0] = &unk_1F20B2680;
  v14[1] = &_bambiDomain;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 19);
  if (!v5)
  {
    uint64_t v7 = 0;
    goto LABEL_7;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v5);
  if (!v7 || (uint64_t v8 = (BambiCall *)*((void *)this + 18)) == 0)
  {
LABEL_7:
    uint64_t v11 = *((void *)this + 3);
    uint64_t v10 = (char *)this + 24;
    uint64_t v12 = (*(uint64_t (**)(char *))(v11 + 56))(v10);
    (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))(v10, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Can not start un-initialized participant ", 41);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741825;
    if (!v7) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (*((_DWORD *)this + 60) == 6)
  {
    int v9 = 1073741826;
  }
  else
  {
    if ((*((_DWORD *)v8 + 112) & 0xFFFFFFFE) == 2 || a2 == 0)
    {
      BambiCallParticipant::setState((uint64_t)this, 2, 1);
    }
    else
    {
      BambiCallParticipant::setState((uint64_t)this, 1, 1);
      BambiCall::performLocalHold(v8);
    }
    int v9 = 0;
  }
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = v9;
LABEL_17:
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_18:
  ImsResult::~ImsResult((ImsResult *)v14);
}

void sub_1C53D3578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void BambiCallParticipant::refer(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v26 = &unk_1F20B2680;
  uint64_t v27 = &_bambiDomain;
  uint64_t v30 = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 152);
  if (v6)
  {
    int v9 = std::__shared_weak_count::lock(v6);
    uint64_t v10 = v9;
    if (v9)
    {
      uint64_t v11 = *a2;
      if (*a2)
      {
        uint64_t v12 = *(void *)(a1 + 144);
        if (v12)
        {
          int v13 = *(_DWORD *)(a1 + 240);
          if (v13 == 2)
          {
            if (a3)
            {
              uint64_t v14 = (std::__shared_weak_count *)a2[1];
              v24[0] = v11;
              v24[1] = v14;
              if (v14) {
                atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v21, (void *)(a1 + 128));
              uint64_t v15 = v22;
              v23[0] = v21;
              v23[1] = (uint64_t)v22;
              uint64_t v21 = 0;
              uint64_t v22 = 0;
              BambiCall::refer(v12, (uint64_t)v24, v23, (uint64_t)v25);
              ImsResult::operator=((uint64_t)&v26, (uint64_t)v25);
              ImsResult::~ImsResult((ImsResult *)v25);
              if (v15) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v15);
              }
              if (v22) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              }
              if (!v14) {
                goto LABEL_29;
              }
              long long v16 = v14;
            }
            else
            {
              v20[0] = *(void *)(a1 + 144);
              v20[1] = v9;
              atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
              std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v21, (void *)(a1 + 128));
              int v18 = v22;
              v19[0] = v21;
              v19[1] = (uint64_t)v22;
              uint64_t v21 = 0;
              uint64_t v22 = 0;
              BambiCall::refer(v11, (uint64_t)v20, v19, (uint64_t)v25);
              ImsResult::operator=((uint64_t)&v26, (uint64_t)v25);
              ImsResult::~ImsResult((ImsResult *)v25);
              if (v18) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v18);
              }
              if (v22) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              }
              long long v16 = v10;
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
LABEL_29:
            if (((*(uint64_t (**)(uint64_t *, void))(*v27 + 24))(v27, v28) & 1) == 0) {
              BambiCallParticipant::setState(a1, 3, 1);
            }
            ImsResult::ImsResult(a4, (uint64_t)&v26);
            goto LABEL_17;
          }
          *(_OWORD *)(a4 + 24) = 0u;
          *(_OWORD *)(a4 + 40) = 0u;
          *(_OWORD *)(a4 + 56) = 0u;
          *(void *)a4 = &unk_1F20B2680;
          *(void *)(a4 + 8) = &_bambiDomain;
          if (v13 <= 2) {
            int v17 = 1073741826;
          }
          else {
            int v17 = 0;
          }
          *(_DWORD *)(a4 + 16) = v17;
LABEL_17:
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          goto LABEL_18;
        }
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(void *)a4 = &unk_1F20B2680;
  *(void *)(a4 + 8) = &_bambiDomain;
  *(_DWORD *)(a4 + 16) = 1073741825;
  if (v10) {
    goto LABEL_17;
  }
LABEL_18:
  ImsResult::~ImsResult((ImsResult *)&v26);
}

void sub_1C53D3848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  ImsResult::~ImsResult((ImsResult *)&a19);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  ImsResult::~ImsResult((ImsResult *)&a28);
  _Unwind_Resume(a1);
}

void BambiCallParticipant::handleEvent(BambiCallParticipant *this, BambiCallEvent *lpsrc)
{
  int v3 = *((_DWORD *)lpsrc + 2);
  if ((v3 - 14) < 2)
  {
    if (*((int *)this + 60) <= 5)
    {
      (*(void (**)(BambiCallParticipant *, void *))(*(void *)this + 72))(this, v4);
      uint64_t v5 = 10;
LABEL_19:
      BambiCallParticipant::setState((uint64_t)this, v5, 1);
      goto LABEL_20;
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 28);
    if (!v6 || (uint64_t v7 = std::__shared_weak_count::lock(v6)) == 0)
    {
      uint64_t v5 = 7;
      goto LABEL_19;
    }
    uint64_t v8 = v7;
    int v9 = (const void *)*((void *)this + 27);
    if (!v9)
    {
      uint64_t v10 = 0;
      goto LABEL_40;
    }
    if (!v10) {
      goto LABEL_40;
    }
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v25, (void *)this + 16);
    uint64_t v11 = v25;
    if (v25)
    {
      uint64_t v12 = (uint64_t *)v10[52];
      if ((uint64_t *)v10[53] == v12) {
        std::vector<unsigned short>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v14 = *v12;
      int v13 = (std::__shared_weak_count *)v12[1];
      if (v13)
      {
        BOOL v15 = 1;
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        if (v11 == v14) {
          goto LABEL_34;
        }
      }
      else if (v25 == v14)
      {
        BOOL v15 = 1;
        goto LABEL_34;
      }
    }
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v23, (void *)this + 16);
    uint64_t v18 = v23;
    if (v23)
    {
      uint64_t v19 = v10[52];
      if ((unint64_t)(v10[53] - v19) <= 0x10) {
        std::vector<unsigned short>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v21 = *(void *)(v19 + 16);
      unsigned int v20 = *(std::__shared_weak_count **)(v19 + 24);
      if (v20)
      {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v15 = v18 == v21;
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      else
      {
        BOOL v15 = v23 == v21;
      }
    }
    else
    {
      BOOL v15 = 0;
    }
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
LABEL_34:
    if (v26)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      if (v15)
      {
LABEL_36:
        uint64_t v22 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
        (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Warning: the following setState(kStateLeaving) may delete this BambiCallParticipant. Save its _oldCallDelegate first.", 117);
        *(unsigned char *)(v22 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v22 + 17) = 0;
        uint64_t v10 = (void *)*((void *)this + 26);
LABEL_39:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_40:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        BambiCallParticipant::setState((uint64_t)this, 7, 1);
        if (v10)
        {
          int v17 = *(void (**)(void))(*v10 + 16);
LABEL_22:
          v17();
          return;
        }
LABEL_20:
        uint64_t v16 = *((void *)this + 26);
        if (!v16) {
          return;
        }
        int v17 = *(void (**)(void))(*(void *)v16 + 16);
        goto LABEL_22;
      }
    }
    else if (v15)
    {
      goto LABEL_36;
    }
    uint64_t v10 = 0;
    goto LABEL_39;
  }
  if (v3 == 13 && *((_DWORD *)this + 60) == 1)
  {
    BambiCallParticipant::setState((uint64_t)this, 2, 1);
  }
}

void sub_1C53D3CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'BambiCallParticipant::handleEvent(BambiCallParticipant *this, BambiCallEvent *a2)
{
}

void BambiCallParticipant::handleCallInvalidated(void *a1, void *a2)
{
  unint64_t v4 = a1 + 3;
  uint64_t v5 = (*(uint64_t (**)(void *))(a1[3] + 64))(a1 + 3);
  (*(void (**)(void *, uint64_t))(*v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Got invalidated callback for participant call ", 46);
  *(unsigned char *)(v5 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v11, (const std::string *)(*a2 + 472));
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 56))(v5, v11);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  uint64_t v6 = a1[26];
  if (v6)
  {
    uint64_t v7 = (std::__shared_weak_count *)a2[1];
    uint64_t v9 = *a2;
    uint64_t v10 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 192))(v6, &v9);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    a1[26] = 0;
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[19];
  a1[18] = 0;
  a1[19] = 0;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1C53D3E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'BambiCallParticipant::handleCallInvalidated(uint64_t a1, void *a2)
{
}

void BambiCallParticipant::handleReferSubscriptionSuccess(BambiCallParticipant *this)
{
  if (*((_DWORD *)this + 60) == 3) {
    BambiCallParticipant::setState((uint64_t)this, 4, 1);
  }
}

void BambiCallParticipant::handleReferFailed(BambiCallParticipant *this)
{
}

void BambiCallParticipant::handleReferNotification(BambiCallParticipant *this, const SipMessage *lpsrc)
{
  if (v3 && (*((_DWORD *)this + 60) - 3) <= 1)
  {
    unsigned int v4 = v3[22];
    if (v4 - 200 >= 0x64)
    {
      if (v4 < 0x12C) {
        return;
      }
      uint64_t v5 = 10;
    }
    else
    {
      uint64_t v5 = 6;
    }
    BambiCallParticipant::setState((uint64_t)this, v5, 1);
  }
}

void BambiCallParticipant::handleReferSubscriptionTerminated(BambiCallParticipant *this)
{
  if (*((_DWORD *)this + 60) == 3)
  {
    uint64_t v2 = (char *)this + 24;
    uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 56))((char *)this + 24);
    (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"REFER subscription terminated before transfer could complete", 60);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    BambiCallParticipant::setState((uint64_t)this, 10, 1);
  }
}

void *BambiCallParticipant::logPrefix(BambiCallParticipant *this, ImsOutStream *a2)
{
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 18);
      if (v7) {
        (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v7 + 72))(v7, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Participant: ", 13);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void sub_1C53D4158(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *non-virtual thunk to'BambiCallParticipant::logPrefix(BambiCallParticipant *this, ImsOutStream *a2)
{
  return BambiCallParticipant::logPrefix((BambiCallParticipant *)((char *)this - 24), a2);
}

void __cxx_global_array_dtor_2()
{
  uint64_t v0 = 0x108u;
  do
  {
    if (stateNames[v0 - 1] < 0) {
      operator delete(*(void **)&stateNames[v0 - 24]);
    }
    v0 -= 24;
  }
  while (v0);
}

uint64_t _GLOBAL__sub_I_BambiCallParticipant_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(stateNames, "Unknown");
  std::string::basic_string[abi:ne180100]<0>(&stateNames[24], "WaitingForHold");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDADD0, "WaitingToJoin");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDADE8, "SentJoinRequest");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDAE00, "JoinRequestAck");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDAE18, "InitialInviteeJoinPending");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDAE30, "Joined");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDAE48, "Leaving");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDAE60, "Left");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDAE78, "LeftSilently");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDAE90, "Error");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_2, 0, &dword_1C51D1000);
}

void sub_1C53D4314(_Unwind_Exception *exception_object)
{
  while (1)
  {
    if (*(char *)(v2 - 1) < 0) {
      operator delete(*(void **)(v2 - 24));
    }
    v2 -= 24;
    if (v2 == v1) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t ImsTcpSocket::ImsTcpSocket(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v7 = ImsSocket::ImsSocket(a1, a4);
  *(void *)uint64_t v7 = &unk_1F20C9870;
  *(void *)(v7 + 88) = 0;
  *(void *)(v7 + 96) = 0;
  *(void *)(v7 + 80) = &unk_1F20C99B8;
  *(void *)(v7 + 112) = v7 + 112;
  *(void *)(v7 + 120) = v7 + 112;
  *(void *)(v7 + 128) = 0;
  *(_WORD *)(v7 + 104) = 0;
  *(unsigned char *)(v7 + 136) = 0;
  *(void *)(v7 + 152) = 0;
  *(void *)(v7 + 160) = 0;
  *(void *)(v7 + 144) = 0;
  *(unsigned char *)(v7 + 168) = 0;
  *(_DWORD *)(v7 + 140) = a3;
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 152);
    *(void *)(a1 + 144) = v8;
    *(void *)(a1 + 152) = v9;
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    *(void *)(a1 + 144) = v8;
    *(void *)(a1 + 152) = 0;
  }
  return a1;
}

void ImsTcpSocket::~ImsTcpSocket(ImsTcpSocket *this)
{
  *(void *)this = &unk_1F20C9870;
  *((void *)this + 10) = &unk_1F20C99B8;
  ImsTcpSocket::close(this);
  std::string::basic_string[abi:ne180100]<0>(v7, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"destroying ImsTcpSocket 0x", 26);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  std::__list_imp<std::vector<unsigned char>>::clear((uint64_t *)this + 14);
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  ImsSocket::~ImsSocket(this);
}

{
  uint64_t vars8;

  ImsTcpSocket::~ImsTcpSocket(this);
  JUMPOUT(0x1C878E320);
}

void ImsTcpSocket::close(ImsTcpSocket *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 5);
  if (v1 && *v1 != -1)
  {
    uint64_t v3 = *((void *)this + 20);
    if (v3)
    {
      dispatch_source_cancel(v3);
      *((void *)this + 20) = 0;
    }
    unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 19);
    *((void *)this + 18) = 0;
    *((void *)this + 19) = 0;
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    ImsSocket::close(this);
  }
}

void non-virtual thunk to'ImsTcpSocket::~ImsTcpSocket(ImsTcpSocket *this)
{
}

{
  uint64_t vars8;

  ImsTcpSocket::~ImsTcpSocket((ImsTcpSocket *)((char *)this - 80));
  JUMPOUT(0x1C878E320);
}

uint64_t ImsTcpSocket::readFromSocket(int a1, std::string *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__s, "net");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::spam((uint64_t)__s, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"ImsTcpSocket : readFromSocket called", 36);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (SHIBYTE(__p.fds_bits[5]) < 0) {
    operator delete(*(void **)__p.fds_bits);
  }
  if (v24 < 0) {
    operator delete(*(void **)__s);
  }
  bzero(__s, 0xBB8uLL);
  if (a1 == -1)
  {
LABEL_24:
    std::string::basic_string[abi:ne180100]<0>(&__p, "net");
    std::string::basic_string[abi:ne180100]<0>(&v21, "");
    uint64_t v10 = ims::spam((uint64_t)&__p, (uint64_t)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"ImsTcpSocket : readFromSocket : exit", 36);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (SHIBYTE(v21.fds_bits[5]) < 0) {
      operator delete(*(void **)v21.fds_bits);
    }
    if (SHIBYTE(__p.fds_bits[5]) < 0) {
      operator delete(*(void **)__p.fds_bits);
    }
    return 0;
  }
  else
  {
    int v5 = 1 << a1;
    unint64_t v6 = (unint64_t)a1 >> 5;
    while (1)
    {
      memset(&__p, 0, sizeof(__p));
      memset(&v21, 0, sizeof(v21));
      if (__darwin_check_fd_set_overflow(a1, &__p, 0)) {
        __p.fds_bits[v6] |= v5;
      }
      if (__darwin_check_fd_set_overflow(a1, &v21, 0)) {
        v21.fds_bits[v6] |= v5;
      }
      v20.tv_sec = 0;
      *(void *)&v20.tv_usec = 0;
      if (select(a1 + 1, &__p, 0, &v21, &v20) < 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "net");
        std::string::basic_string[abi:ne180100]<0>(v16, "");
        uint64_t v12 = ims::error((uint64_t)v18, (uint64_t)v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"select error: ", 14);
        *(unsigned char *)(v12 + 17) = 0;
        __error();
        std::ostream::operator<<();
        *(unsigned char *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v12 + 17) = 0;
        if (v17 < 0) {
          operator delete(v16[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        return *__error();
      }
      if (__darwin_check_fd_set_overflow(a1, &v21, 0) && (v21.fds_bits[v6] & v5) != 0) {
        break;
      }
      if (!__darwin_check_fd_set_overflow(a1, &__p, 0) || (__p.fds_bits[v6] & v5) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "net");
        std::string::basic_string[abi:ne180100]<0>(v16, "");
        uint64_t v9 = ims::spam((uint64_t)v18, (uint64_t)v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"ImsTcpSocket: No more data to read on socket ", 45);
        *(unsigned char *)(v9 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v9 + 17) = 0;
        if (v17 < 0) {
          operator delete(v16[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        goto LABEL_24;
      }
      std::string::size_type v7 = read(a1, __s, 0xBB8uLL);
      unint64_t v8 = v7;
      if (!v7)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "net");
        std::string::basic_string[abi:ne180100]<0>(v16, "");
        uint64_t v13 = ims::debug((uint64_t)v18, (uint64_t)v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"ImsTcpSocket: Remote end closed connection", 42);
        *(unsigned char *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v13 + 17) = 0;
        goto LABEL_41;
      }
      if ((v7 & 0x8000000000000000) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "net");
        std::string::basic_string[abi:ne180100]<0>(v16, "");
        uint64_t v14 = ims::error((uint64_t)v18, (uint64_t)v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"ImsTcpSocket: Error reading from socket: ", 41);
        *(unsigned char *)(v14 + 17) = 0;
        __error();
        std::ostream::operator<<();
        *(unsigned char *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v14 + 17) = 0;
        if (v17 < 0) {
          operator delete(v16[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        return *__error();
      }
      std::string::append(a2, __s, v7);
      if (v8 < 0xBB8) {
        goto LABEL_24;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v18, "net");
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    uint64_t v15 = ims::error((uint64_t)v18, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Error on socket ", 16);
    *(unsigned char *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
LABEL_41:
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_1C53D4CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ImsTcpSocket::_handleDataAvailable(int **this)
{
  uint64_t v1 = (ImsTcpSocket *)this;
  memset(&v25, 0, sizeof(v25));
  int v2 = ImsTcpSocket::readFromSocket(*this[5], &v25);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 19);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4) {
      int v5 = (ImsTcpSocket *)*((void *)v1 + 18);
    }
    else {
      int v5 = 0;
    }
  }
  else
  {
    int v5 = 0;
    uint64_t v4 = 0;
  }
  std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v25.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_27;
  }
  if (*((unsigned char *)v1 + 72))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "net");
    std::string::basic_string[abi:ne180100]<0>(v23, "");
    uint64_t v10 = ims::warn((uint64_t)__p, (uint64_t)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"ImsTcpSocket: kDebugDropIncoming set.  Dropping incoming packet.", 64);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    if (v5)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "net");
      std::string::basic_string[abi:ne180100]<0>(v23, "");
      uint64_t v7 = ims::spam((uint64_t)__p, (uint64_t)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"ImsTcpSocket: process data, len = ", 34);
      *(unsigned char *)(v7 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      if (v24 < 0) {
        operator delete(v23[0]);
      }
      if (SBYTE7(v22[0]) < 0) {
        operator delete(__p[0]);
      }
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v8 = &v25;
      }
      else {
        unint64_t v8 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v9 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v9 = v25.__r_.__value_.__l.__size_;
      }
      (*(void (**)(ImsTcpSocket *, std::string *, std::string::size_type, uint64_t))(*(void *)v5 + 48))(v5, v8, v9, (uint64_t)v1 + 88);
      goto LABEL_27;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "net");
    std::string::basic_string[abi:ne180100]<0>(v23, "");
    uint64_t v10 = ims::debug((uint64_t)__p, (uint64_t)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"ImsTcpSocket: No delegate to handle incoming packet from ", 57);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(void, uint64_t))(**((void **)v1 + 11) + 40))(*((void *)v1 + 11), v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)". Discarding packet", 19);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v10 + 17) = 0;
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if ((SBYTE7(v22[0]) & 0x80000000) == 0)
  {
LABEL_27:
    if (!v2) {
      goto LABEL_49;
    }
    goto LABEL_28;
  }
  operator delete(__p[0]);
  if (!v2) {
    goto LABEL_49;
  }
LABEL_28:
  if (v2 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "net");
    std::string::basic_string[abi:ne180100]<0>(v23, "");
    uint64_t v11 = ims::debug((uint64_t)__p, (uint64_t)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"ImsTcpSocket: remote end closed connection", 42);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (SBYTE7(v22[0]) < 0) {
      operator delete(__p[0]);
    }
    *((unsigned char *)v1 + 136) = 1;
    if (v5)
    {
      uint64_t v12 = (void (**)(ImsTcpSocket *))(*(void *)v5 + 16);
      uint64_t v1 = v5;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "net");
      std::string::basic_string[abi:ne180100]<0>(v23, "");
      uint64_t v17 = ims::error((uint64_t)__p, (uint64_t)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"ImsTcpSocket: closing myself", 28);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
      if (v24 < 0) {
        operator delete(v23[0]);
      }
      if (SBYTE7(v22[0]) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v12 = (void (**)(ImsTcpSocket *))(*(void *)v1 + 8);
    }
    (*v12)(v1);
LABEL_49:
    if (!v4) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  *(_OWORD *)fd_set __p = 0u;
  memset(v22, 0, 56);
  int v13 = *__error();
  memset((char *)v22 + 8, 0, 48);
  __p[0] = &unk_1F20B2680;
  __p[1] = &_posixDomain;
  LODWORD(v22[0]) = v13;
  std::string::basic_string[abi:ne180100]<0>(v23, "net");
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  uint64_t v14 = ims::error((uint64_t)v23, (uint64_t)v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"ImsTcpSocket: error ", 20);
  *(unsigned char *)(v14 + 17) = 0;
  (*((void (**)(void **, uint64_t))__p[0] + 2))(__p, v14);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if ((v24 & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_39;
    }
LABEL_55:
    std::string::basic_string[abi:ne180100]<0>(v23, "net");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v18 = ims::error((uint64_t)v23, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"ImsTcpSocket: no delegate to handle error so closing myself", 59);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    uint64_t v16 = (void (**)(ImsTcpSocket *))(*(void *)v1 + 8);
    goto LABEL_60;
  }
  operator delete(v23[0]);
  if (!v5) {
    goto LABEL_55;
  }
LABEL_39:
  uint64_t v15 = *(void *)v5;
  if (LODWORD(v22[0]) == 54)
  {
    uint64_t v16 = (void (**)(ImsTcpSocket *))(v15 + 24);
    uint64_t v1 = v5;
LABEL_60:
    (*v16)(v1);
    goto LABEL_62;
  }
  (*(void (**)(ImsTcpSocket *, void **))(v15 + 40))(v5, __p);
LABEL_62:
  ImsResult::~ImsResult((ImsResult *)__p);
  if (v4) {
LABEL_50:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
LABEL_51:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1C53D5500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v22 - 73) < 0) {
    operator delete(*(void **)(v22 - 96));
  }
  ImsResult::~ImsResult((ImsResult *)&__p);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (*(char *)(v22 - 49) < 0) {
    operator delete(*(void **)(v22 - 72));
  }
  _Unwind_Resume(a1);
}

void ImsTcpSocket::setMaxSegmentSize(ImsTcpSocket *this, int a2)
{
  int v10 = a2;
  if (a2 <= 0)
  {
    long long v7 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    v5[0] = &unk_1F20B2680;
    v5[1] = &_bambiDomain;
    int v6 = 1073741825;
    uint64_t v3 = ImsResult::operator<<<int>((uint64_t)v5);
    uint64_t v4 = (const std::string *)ImsResult::operator<<<char [20]>(v3, " is not a valid MSS");
    ImsResult::ImsResult(this, v4);
    ImsResult::~ImsResult((ImsResult *)v5);
  }
  else
  {
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(void *)this = &unk_1F20B2680;
    *((void *)this + BambiCallParticipant::setState((uint64_t)this, 10, 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 0;
  }
}

void sub_1C53D56C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ImsTcpSocket::_sendQueuedData(ImsTcpSocket *this)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 56))(&v16);
  int v2 = (*(uint64_t (**)(uint64_t, void))(*(void *)v17 + 24))(v17, v18);
  ImsResult::~ImsResult((ImsResult *)&v16);
  if (v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "net");
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    uint64_t v3 = ims::debug((uint64_t)&v16, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"still waiting on ", 17);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(void **__return_ptr, ImsTcpSocket *))(*(void *)this + 112))(__p, this);
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 32))(v3, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" handshake", 10);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_18;
  }
  if (!*((void *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "net");
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    uint64_t v11 = ims::debug((uint64_t)&v16, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Nothing to send", 15);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
LABEL_18:
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (v19 < 0) {
      operator delete(v16);
    }
    return;
  }
  for (uint64_t i = (void *)*((void *)this + 15); i != (void *)((char *)this + 112); uint64_t i = (void *)i[1])
  {
    uint64_t v6 = i[2];
    uint64_t v5 = i[3];
    std::string::basic_string[abi:ne180100]<0>(&v16, "net");
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    uint64_t v7 = ims::debug((uint64_t)&v16, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Sending ", 8);
    uint64_t v8 = v5 - v6;
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" queued bytes to ", 17);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(void, uint64_t))(**((void **)this + 11) + 40))(*((void *)this + 11), v7);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (v19 < 0) {
      operator delete(v16);
    }
    (*(void (**)(void **__return_ptr, ImsTcpSocket *, uint64_t, uint64_t))(*(void *)this + 48))(&v16, this, v6, v8);
    int v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)v17 + 24))(v17, v18);
    ImsResult::~ImsResult((ImsResult *)&v16);
    if (v9)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "net");
      std::string::basic_string[abi:ne180100]<0>(v14, "");
      uint64_t v10 = ims::error((uint64_t)&v16, (uint64_t)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Could not send ", 15);
      *(unsigned char *)(v10 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" bytes to ", 10);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(void, uint64_t))(**((void **)this + 11) + 40))(*((void *)this + 11), v10);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      if (v19 < 0) {
        operator delete(v16);
      }
    }
  }
  std::__list_imp<std::vector<unsigned char>>::clear((uint64_t *)this + 14);
}

void sub_1C53D5BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsTcpSocket::initializeSocket(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, dispatch_queue_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t a8, char a9, int a10)
{
  uint64_t v17 = (const sockaddr *)(*(uint64_t (**)(void))(*(void *)*a2 + 72))();
  int sa_family = v17->sa_family;
  *(_DWORD *)(a1 + 64) = sa_family;
  char v19 = (int *)socket(sa_family, 1, 0);
  if ((v19 & 0x80000000) != 0)
  {
    *(void *)(a7 + 64) = 0;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    int v26 = *__error();
    *(_OWORD *)(a7 + 24) = 0u;
    *(_OWORD *)(a7 + 40) = 0u;
    *(_OWORD *)(a7 + 56) = 0u;
    *(void *)a7 = &unk_1F20B2680;
    *(void *)(a7 + 8) = &_posixDomain;
    *(_DWORD *)(a7 + 16) = v26;
    std::string::basic_string[abi:ne180100]<0>(&v33, "net");
    std::string::basic_string[abi:ne180100]<0>(v38, "");
    uint64_t v27 = ims::error((uint64_t)&v33, (uint64_t)v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"ImsTcpSocket: failed to create socket : ", 40);
    *(unsigned char *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a7 + 16))(a7, v27);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v27 + 17) = 0;
    if (v39 < 0) {
      operator delete(v38[0]);
    }
    if (SBYTE7(v34) < 0) {
      operator delete((void *)v33);
    }
  }
  else
  {
    char v20 = v19;
    uint64_t v21 = *(unsigned __int8 *)(a4 + 23);
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = *(void *)(a4 + 8);
    }
    if (v21)
    {
      uint64_t v37 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      char v22 = (*(uint64_t (**)(void))(*(void *)*a2 + 136))();
      ImsSocket::bindSocketToInterface(v20, v22, a4, (uint64_t)&v33);
      if ((*(unsigned int (**)(void, void))(**((void **)&v33 + 1) + 24))(*((void *)&v33 + 1), v34))
      {
        std::string::basic_string[abi:ne180100]<0>(v38, "net");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v23 = ims::error((uint64_t)v38, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"ImsTcpSocket: Unable to bind socket to interface: ", 50);
        *(unsigned char *)(v23 + 17) = 0;
        (*(void (**)(long long *, uint64_t))(v33 + 16))(&v33, v23);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v23 + 17) = 0;
        if (v32 < 0) {
          operator delete(__p[0]);
        }
        if (v39 < 0) {
          operator delete(v38[0]);
        }
      }
      ImsResult::~ImsResult((ImsResult *)&v33);
    }
    if (a9)
    {
      ImsSocket::setReusePortOptionForSocket((ImsSocket *)v20, (uint64_t)v30);
      ImsResult::~ImsResult((ImsResult *)v30);
    }
    LODWORD(__p[0]) = 0;
    setsockopt((int)v20, 0xFFFF, 4352, __p, 4u);
    if (bind((int)v20, v17, v17->sa_len))
    {
      *(void *)(a7 + 64) = 0;
      *(_OWORD *)(a7 + 32) = 0u;
      *(_OWORD *)(a7 + 48) = 0u;
      *(_OWORD *)a7 = 0u;
      *(_OWORD *)(a7 + 16) = 0u;
      int v24 = *__error();
      *(_OWORD *)(a7 + 24) = 0u;
      *(_OWORD *)(a7 + 40) = 0u;
      *(_OWORD *)(a7 + 56) = 0u;
      *(void *)a7 = &unk_1F20B2680;
      *(void *)(a7 + 8) = &_posixDomain;
      *(_DWORD *)(a7 + 16) = v24;
      std::string::basic_string[abi:ne180100]<0>(&v33, "net");
      std::string::basic_string[abi:ne180100]<0>(v38, "");
      uint64_t v25 = ims::error((uint64_t)&v33, (uint64_t)v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"ImsTcpSocket: couldn't bind TCP socket to ", 42);
      *(unsigned char *)(v25 + 17) = 0;
      (*(void (**)(void, uint64_t))(*(void *)*a2 + 40))(*a2, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a7 + 16))(a7, v25);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v25 + 17) = 0;
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (SBYTE7(v34) < 0) {
        operator delete((void *)v33);
      }
      close((int)v20);
    }
    else
    {
      ImsSocket::setNoTimeWaitForSocket((ImsSocket *)v20, (uint64_t)v29);
      ImsResult::~ImsResult((ImsResult *)v29);
      v28[0] = &unk_1F20B3050;
      v28[1] = 0;
      ImsTcpSocket::initializeSocket(a1, (ImsSocket *)v20, a3, a5, a6, a7, a10);
      ims::CFType::~CFType((ims::CFType *)v28);
    }
  }
}

void sub_1C53D61B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 81) < 0) {
    operator delete(*(void **)(v35 - 104));
  }
  ImsResult::~ImsResult((ImsResult *)(v35 - 176));
  _Unwind_Resume(a1);
}

void ImsTcpSocket::initializeSocket(uint64_t a1@<X0>, ImsSocket *a2@<X1>, void *a3@<X2>, dispatch_queue_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, int a7)
{
  if ((*(uint64_t (**)(void))(*(void *)*a3 + 88))())
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 56))())
    {
      ImsSocket::setNoSigpipeOptionForSocket(a2, (uint64_t)v43);
      ImsResult::~ImsResult((ImsResult *)v43);
      (*(void (**)(long long *__return_ptr))(*(void *)*a3 + 32))(&v44);
      long long v13 = v44;
      long long v44 = 0uLL;
      uint64_t v14 = *(std::__shared_weak_count **)(a1 + 96);
      *(_OWORD *)(a1 + 88) = v13;
      if (v14)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        if (*((void *)&v44 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v44 + 1));
        }
      }
      char v15 = (const sockaddr *)(*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      fcntl((int)a2, 4, 4);
      if (ImsSocket::_createSocketWithDispatch(a1, (int)a2, a4, a5, 0))
      {
        if (connect((int)a2, v15, v15->sa_len) && *__error() != 36)
        {
          *(void *)(a6 + 64) = 0;
          *(_OWORD *)(a6 + 32) = 0u;
          *(_OWORD *)(a6 + 48) = 0u;
          *(_OWORD *)a6 = 0u;
          *(_OWORD *)(a6 + 16) = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          *(void *)&long long v44 = &unk_1F20B2680;
          *((void *)&v44 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = &_bambiDomain;
          int v45 = 1073741840;
          uint64_t v31 = (const std::string *)ImsResult::operator<<<char [21]>((uint64_t)&v44, "Socket connect error");
          int v32 = *__error();
          long long v40 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          __p[0] = &unk_1F20B2680;
          __p[1] = &_posixDomain;
          int v38 = v32;
          ims::result::resultWithCause(v31, (const ImsResult *)__p, a6);
        }
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v16 = *(std::__shared_weak_count **)(a1 + 16);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v18 = dispatch_source_create(MEMORY[0x1E4F144B0], (int)a2, 0, *a4);
        *(void *)(a1 + 160) = v18;
        handler[0] = MEMORY[0x1E4F143A8];
        handler[1] = 1174405120;
        handler[2] = ___ZN12ImsTcpSocket16initializeSocketEiRKNSt3__110shared_ptrI9IpAddressEERKN3ims8DispatchERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbNS6_14CFMutableArrayESH_i_block_invoke;
        handler[3] = &__block_descriptor_tmp_40;
        handler[4] = a1;
        handler[5] = v17;
        long long v36 = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        dispatch_source_set_event_handler(v18, handler);
        char v19 = *(NSObject **)(a1 + 160);
        v34[0] = MEMORY[0x1E4F143A8];
        v34[1] = 0x40000000;
        v34[2] = ___ZN12ImsTcpSocket16initializeSocketEiRKNSt3__110shared_ptrI9IpAddressEERKN3ims8DispatchERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbNS6_14CFMutableArrayESH_i_block_invoke_41;
        void v34[3] = &__block_descriptor_tmp_43_0;
        v34[4] = v19;
        dispatch_source_set_cancel_handler(v19, v34);
        ImsSocket::attachDispatchSource((ImsSocket *)a1, *a4, (uint64_t)v33);
        ImsResult::~ImsResult((ImsResult *)v33);
        dispatch_resume(*(dispatch_object_t *)(a1 + 160));
        if (*(void *)(a1 + 24))
        {
          std::string::basic_string[abi:ne180100]<0>(&v44, "net");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v20 = ims::debug((uint64_t)&v44, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Initialized TCP connection ", 27);
          *(unsigned char *)(v20 + 17) = 0;
          (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" -> ", 4);
          *(unsigned char *)(v20 + 17) = 0;
          (*(void (**)(void, uint64_t))(**(void **)(a1 + 88) + 40))(*(void *)(a1 + 88), v20);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v20 + 17) = 0;
          if (v39 < 0) {
            operator delete(__p[0]);
          }
          if (v46 < 0) {
            operator delete((void *)v44);
          }
        }
        if (a7 && (*(unsigned char *)(a1 + 168) || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)))
        {
          std::string::basic_string[abi:ne180100]<0>(&v44, "net");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v21 = ims::debug((uint64_t)&v44, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Initializing TCP-KeepAlive on ", 30);
          *(unsigned char *)(v21 + 17) = 0;
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 104))(v50, a1);
          (*(void (**)(uint64_t, void **))(*(void *)v21 + 32))(v21, v50);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v21 + 17) = 0;
          if (v51 < 0) {
            operator delete(v50[0]);
          }
          if (v39 < 0) {
            operator delete(__p[0]);
          }
          if (v46 < 0) {
            operator delete((void *)v44);
          }
          std::string::basic_string[abi:ne180100]<0>(&v44, "net");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v22 = ims::debug((uint64_t)&v44, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"TCP Keepalive not supported", 27);
          *(unsigned char *)(v22 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v22 + 17) = 0;
          if (v39 < 0) {
            operator delete(__p[0]);
          }
          if (v46 < 0) {
            operator delete((void *)v44);
          }
        }
        *(_OWORD *)(a6 + 24) = 0u;
        *(_OWORD *)(a6 + 40) = 0u;
        *(_OWORD *)(a6 + 56) = 0u;
        *(void *)a6 = &unk_1F20B2680;
        *(void *)(a6 + 8) = &_bambiDomain;
        *(_DWORD *)(a6 + 16) = 0;
        if (v36) {
          std::__shared_weak_count::__release_weak(v36);
        }
        if (v16) {
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v44, "net");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v29 = ims::error((uint64_t)&v44, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"ImsTcpSocket: Unable to create CFSocket for TCP connection", 58);
        *(unsigned char *)(v29 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v29 + 17) = 0;
        if (v39 < 0) {
          operator delete(__p[0]);
        }
        if (v46 < 0) {
          operator delete((void *)v44);
        }
        close((int)a2);
        long long v47 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        *(void *)&long long v44 = &unk_1F20B2680;
        *((void *)&v44 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = &_bambiDomain;
        int v45 = 0x40000000;
        uint64_t v30 = (const std::string *)ImsResult::operator<<<char [26]>((uint64_t)&v44, "Unable to create CFSocket");
        ImsResult::ImsResult((ImsResult *)a6, v30);
        ImsResult::~ImsResult((ImsResult *)&v44);
      }
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "net");
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    *(void *)&long long v44 = &unk_1F20B2680;
    *((void *)&v44 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = &_bambiDomain;
    int v45 = 1073741825;
    uint64_t v26 = ImsResult::operator<<<char [38]>((uint64_t)&v44, "no port specified for remote address ");
    uint64_t v27 = ImsResult::operator<<<std::shared_ptr<IpAddress>>(v26, a3);
    uint64_t v28 = (const std::string *)ims::result::log((uint64_t)__p, v27);
    ImsResult::ImsResult((ImsResult *)a6, v28);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "net");
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    *(void *)&long long v44 = &unk_1F20B2680;
    *((void *)&v44 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = &_bambiDomain;
    int v45 = 1073741825;
    uint64_t v23 = ImsResult::operator<<<char [24]>((uint64_t)&v44, "invalid remote address ");
    uint64_t v24 = ImsResult::operator<<<std::shared_ptr<IpAddress>>(v23, a3);
    uint64_t v25 = (const std::string *)ims::result::log((uint64_t)__p, v24);
    ImsResult::ImsResult((ImsResult *)a6, v25);
  }
  ImsResult::~ImsResult((ImsResult *)&v44);
  if (v39 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C53D6C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  ImsResult::~ImsResult(v36);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ImsTcpSocket::initializeSocket(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, dispatch_queue_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t a8, char a9, int a10)
{
}

void ___ZN12ImsTcpSocket16initializeSocketEiRKNSt3__110shared_ptrI9IpAddressEERKN3ims8DispatchERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbNS6_14CFMutableArrayESH_i_block_invoke(void *a1)
{
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        *(void *)uint64_t v23 = 0;
        getsockopt(**(_DWORD **)(v3 + 40), 0xFFFF, 4103, &v23[1], v23);
        long long v20 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        v19[0] = &unk_1F20B2680;
        v19[1] = &_posixDomain;
        uint64_t v19[2] = v23[1];
        if ((*(unsigned int (**)(void))(_posixDomain + 24))())
        {
          std::string::basic_string[abi:ne180100]<0>(v15, "net");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v6 = ims::error((uint64_t)v15, (uint64_t)__p);
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v3 + 112))(v17, v3);
          (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, v17);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"ImsTcpSocket: could not connect to ", 35);
          *(unsigned char *)(v6 + 17) = 0;
          (*(void (**)(void, uint64_t))(**(void **)(v3 + 88) + 40))(*(void *)(v3 + 88), v6);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)": ", 2);
          *(unsigned char *)(v6 + 17) = 0;
          (*(void (**)(void *, uint64_t))(v19[0] + 16))(v19, v6);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v6 + 17) = 0;
          if (v18 < 0) {
            operator delete(v17[0]);
          }
          if (v14 < 0) {
            operator delete(__p[0]);
          }
          if (v16 < 0) {
            operator delete(v15[0]);
          }
          *(unsigned char *)(v3 + 104) = 0;
          std::__list_imp<std::vector<unsigned char>>::clear((uint64_t *)(v3 + 112));
          uint64_t v7 = *(std::__shared_weak_count **)(v3 + 152);
          if (v7)
          {
            uint64_t v8 = std::__shared_weak_count::lock(v7);
            if (v8)
            {
              int v9 = v8;
              uint64_t v10 = *(void *)(v3 + 144);
              if (v10) {
                (*(void (**)(uint64_t, void *))(*(void *)v10 + 32))(v10, v19);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v9);
            }
          }
        }
        else
        {
          *(unsigned char *)(v3 + 104) = 1;
          if (*(int *)(v3 + 140) >= 1)
          {
            std::string::basic_string[abi:ne180100]<0>(v15, "net");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v11 = ims::debug((uint64_t)v15, (uint64_t)__p);
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v3 + 104))(v17, v3);
            (*(void (**)(uint64_t, void **))(*(void *)v11 + 32))(v11, v17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)": setting MSS for outgoing TCP socket to ", 41);
            *(unsigned char *)(v11 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v11 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v11 + 17) = 0;
            if (v18 < 0) {
              operator delete(v17[0]);
            }
            if (v14 < 0) {
              operator delete(__p[0]);
            }
            if (v16 < 0) {
              operator delete(v15[0]);
            }
            ImsSocket::socketDescriptor((ImsSocket *)v3);
            ImsTcpSocket::setMaxSegmentSize((ImsTcpSocket *)v15, *(_DWORD *)(v3 + 140));
            ImsResult::~ImsResult((ImsResult *)v15);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "net");
          std::string::basic_string[abi:ne180100]<0>(v17, "");
          uint64_t v12 = ims::debug((uint64_t)__p, (uint64_t)v17);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Socket just connected, sending queued up data", 45);
          *(unsigned char *)(v12 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v12 + 17) = 0;
          if (v18 < 0) {
            operator delete(v17[0]);
          }
          if (v14 < 0) {
            operator delete(__p[0]);
          }
          ImsTcpSocket::_sendQueuedData((ImsTcpSocket *)v3);
          if (*(unsigned char *)(v3 + 105))
          {
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v3 + 88))(__p, v3);
            ImsResult::~ImsResult((ImsResult *)__p);
          }
          dispatch_source_cancel(*(dispatch_source_t *)(v3 + 160));
          *(void *)(v3 + 160) = 0;
        }
        ImsResult::~ImsResult((ImsResult *)v19);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C53D72F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  ImsResult::~ImsResult((ImsResult *)(v29 - 112));
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

void ___ZN12ImsTcpSocket16initializeSocketEiRKNSt3__110shared_ptrI9IpAddressEERKN3ims8DispatchERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbNS6_14CFMutableArrayESH_i_block_invoke_41(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v5, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"ImsTcpSocket: finished with connect source.", 43);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
}

void sub_1C53D7494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'ImsTcpSocket::initializeSocket(uint64_t a1@<X0>, ImsSocket *a2@<X1>, void *a3@<X2>, dispatch_queue_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, int a7)
{
}

void ImsTcpSocket::name(ImsTcpSocket *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C53D76C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void ImsTcpSocket::socketReadCallback(ImsTcpSocket *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 16), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 16), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void ImsTcpSocket::_initializeIncoming(uint64_t a1@<X0>, ImsSocket *a2@<X1>, uint64_t a3@<X2>, dispatch_object_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(void **__return_ptr))(**(void **)a3 + 32))(v20);
  long long v11 = *(_OWORD *)v20;
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = v11;
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    if (v20[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v20[1]);
    }
  }
  ImsSocket::setNoTimeWaitForSocket(a2, (uint64_t)v29);
  ImsResult::~ImsResult((ImsResult *)v29);
  ImsSocket::setNoSigpipeOptionForSocket(a2, (uint64_t)v28);
  ImsResult::~ImsResult((ImsResult *)v28);
  if (ImsSocket::_createSocketWithDispatch(a1, (int)a2, a4, a5, 1))
  {
    if (*(int *)(a1 + 140) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v20, "net");
      std::string::basic_string[abi:ne180100]<0>(v26, "");
      uint64_t v13 = ims::debug((uint64_t)v20, (uint64_t)v26);
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 104))(__p, a1);
      (*(void (**)(uint64_t, void **))(*(void *)v13 + 32))(v13, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)": setting MSS for incoming TCP socket to ", 41);
      *(unsigned char *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v22 < 0) {
        operator delete(v20[0]);
      }
      ImsTcpSocket::setMaxSegmentSize((ImsTcpSocket *)v17, *(_DWORD *)(a1 + 140));
      ImsResult::~ImsResult((ImsResult *)v17);
    }
    *(unsigned char *)(a1 + 104) = 1;
    if (*(void *)(a1 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(v20, "net");
      std::string::basic_string[abi:ne180100]<0>(v26, "");
      uint64_t v14 = ims::debug((uint64_t)v20, (uint64_t)v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Initialized TCP connection ", 27);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" <- ", 4);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 88) + 40))(*(void *)(a1 + 88), v14);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v22 < 0) {
        operator delete(v20[0]);
      }
    }
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 56) = 0u;
    *(void *)a6 = &unk_1F20B2680;
    *(void *)(a6 + 8) = &_bambiDomain;
    *(_DWORD *)(a6 + 16) = 0;
  }
  else
  {
    close((int)a2);
    std::string::basic_string[abi:ne180100]<0>(v26, "net");
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    v20[0] = &unk_1F20B2680;
    v20[1] = &_bambiDomain;
    int v21 = 0x40000000;
    uint64_t v15 = ImsResult::operator<<<char [45]>((uint64_t)v20, "Unable to create CFSocket for TCP connection");
    char v16 = (const std::string *)ims::result::log((uint64_t)v26, v15);
    ImsResult::ImsResult((ImsResult *)a6, v16);
    ImsResult::~ImsResult((ImsResult *)v20);
    if (v27 < 0) {
      operator delete(v26[0]);
    }
  }
}

void sub_1C53D7BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsTcpSocket::send(ImsTcpSocket *this@<X0>, const unsigned __int8 *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (_DWORD *)*((void *)this + 5);
  if (!v5 || *v5 == -1)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    fd_set __p = &unk_1F20B2680;
    __dst = &_bambiDomain;
    LODWORD(v17) = 1073741827;
    uint64_t v10 = (const std::string *)ImsResult::operator<<<char [29]>((uint64_t)&__p, "send: socket not initialized");
    ImsResult::ImsResult((ImsResult *)a4, v10);
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  else if ((*(uint64_t (**)(ImsTcpSocket *))(*(void *)this + 80))(this))
  {
    int v9 = *(void (**)(ImsTcpSocket *, const unsigned __int8 *, char *))(*(void *)this + 48);
    v9(this, a2, a3);
  }
  else
  {
    fd_set __p = 0;
    __dst = 0;
    uint64_t v17 = 0;
    if (a3)
    {
      std::vector<unsigned char>::__vallocate[abi:ne180100](&__p, (size_t)a3);
      long long v11 = __dst;
      memmove(__dst, a2, (size_t)a3);
      uint64_t v12 = (uint64_t)&a3[(void)v11];
      __dst = &a3[(void)v11];
      a3 = (char *)__p;
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = operator new(0x28uLL);
    void v13[4] = 0;
    *(_OWORD *)uint64_t v13 = 0u;
    *((_OWORD *)v13 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = 0u;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v13 + 2, a3, v12, v12 - (void)a3);
    uint64_t v14 = *((void *)this + 14);
    *uint64_t v13 = v14;
    v13[1] = (char *)this + 112;
    *(void *)(v14 + 8) = v13;
    *((void *)this + 14) = v13;
    ++*((void *)this + 16);
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
    if (__p)
    {
      __dst = __p;
      operator delete(__p);
    }
  }
}

void sub_1C53D7E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsTcpSocket::_writeToSocket(ImsTcpSocket *this@<X0>, const unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  v31[4] = a3;
  ssize_t v6 = send(**((_DWORD **)this + 5), a2, a3, 0);
  _OWORD v31[3] = v6;
  if (v6 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "net");
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    __p[0] = &unk_1F20B2680;
    __p[1] = &_bambiDomain;
    int v21 = 1073741840;
    uint64_t v7 = (const std::string *)ImsResult::operator<<<char [33]>((uint64_t)__p, "ImsTcpSocket: Socket write error");
    int v8 = *__error();
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    v15[0] = &unk_1F20B2680;
    v15[1] = &_posixDomain;
    int v16 = v8;
    ims::result::resultWithCause(v7, (const ImsResult *)v15, (uint64_t)v26);
  }
  if (v6 == a3)
  {
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "net");
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    v26[0] = &unk_1F20B2680;
    v26[1] = &_bambiDomain;
    int v27 = 0x40000000;
    uint64_t v9 = ImsResult::operator<<<char [25]>((uint64_t)v26, "ImsTcpSocket: only sent ");
    uint64_t v10 = ImsResult::operator<<<long>(v9);
    uint64_t v11 = ImsResult::operator<<<char [5]>(v10, " of ");
    uint64_t v12 = ImsResult::operator<<<unsigned long>(v11);
    uint64_t v13 = ImsResult::operator<<<char [7]>(v12, " bytes");
    uint64_t v14 = (const std::string *)ims::result::log((uint64_t)__p, v13);
    ImsResult::ImsResult((ImsResult *)a4, v14);
    ImsResult::~ImsResult((ImsResult *)v26);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C53D80D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  ImsResult::~ImsResult((ImsResult *)&a27);
  ImsResult::~ImsResult((ImsResult *)&a9);
  ImsResult::~ImsResult((ImsResult *)&a18);
  if (*(char *)(v27 - 49) < 0) {
    operator delete(*(void **)(v27 - 72));
  }
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<long>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    operator new();
  }
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  return a1;
}

void sub_1C53D81AC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [5]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C53D8254(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsTcpSocket::send(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    uint64_t v3 = v2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 64))(a1, a2, v3);
}

double ImsTcpSocket::shutdown@<D0>(ImsTcpSocket *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 5);
  if (!v3 || *v3 == -1)
  {
    double result = 0.0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    int v6 = 1073741827;
    goto LABEL_11;
  }
  if ((*(uint64_t (**)(ImsTcpSocket *))(*(void *)this + 80))(this))
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::debug((uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"shutting down socket", 20);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if (shutdown(**((_DWORD **)this + 5), 1))
    {
      int v6 = *__error();
      double result = 0.0;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(void *)a2 = &unk_1F20B2680;
      *(void *)(a2 + 8) = &_posixDomain;
LABEL_11:
      *(_DWORD *)(a2 + 16) = v6;
      return result;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Socket not  yet connected. Queue up shutdown", 44);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    *((unsigned char *)this + 105) = 1;
  }
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

void sub_1C53D853C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsTcpSocket::reset(ImsTcpSocket *this)
{
  uint64_t v1 = (int *)*((void *)this + 5);
  if (v1)
  {
    int v3 = *v1;
    if (*v1 != -1)
    {
      uint64_t v6 = 1;
      setsockopt(v3, 0xFFFF, 128, &v6, 8u);
      uint64_t v4 = *((void *)this + 20);
      if (v4)
      {
        dispatch_source_cancel(v4);
        *((void *)this + 20) = 0;
      }
      uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 19);
      *((void *)this + 18) = 0;
      *((void *)this + 19) = 0;
      if (v5) {
        std::__shared_weak_count::__release_weak(v5);
      }
      ImsSocket::close(this);
    }
  }
}

uint64_t ImsTcpSocket::sendOverSocket(ImsTcpSocket *this, const unsigned __int8 *a2)
{
  return (*(uint64_t (**)(ImsTcpSocket *, const unsigned __int8 *))(*(void *)this + 64))(this, a2);
}

uint64_t non-virtual thunk to'ImsTcpSocket::sendOverSocket(ImsTcpSocket *this, const unsigned __int8 *a2)
{
  return (*(uint64_t (**)(void))(*((void *)this - 10) + 64))();
}

uint64_t ImsTcpSocket::sendOverSocket(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t non-virtual thunk to'ImsTcpSocket::sendOverSocket(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 80) + 72))();
}

uint64_t ImsTcpSocket::isSocketConnected(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 80))();
}

uint64_t non-virtual thunk to'ImsTcpSocket::isSocketConnected(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 10) + 80))();
}

uint64_t ImsTcpSocket::didRemoteEndClose(ImsTcpSocket *this)
{
  return *((unsigned __int8 *)this + 136);
}

uint64_t non-virtual thunk to'ImsTcpSocket::didRemoteEndClose(ImsTcpSocket *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t ImsTcpSocket::shutdownSocket(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 88))();
}

uint64_t non-virtual thunk to'ImsTcpSocket::shutdownSocket(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 10) + 88))();
}

uint64_t ImsTcpSocket::closeSocket(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 8))();
}

uint64_t non-virtual thunk to'ImsTcpSocket::closeSocket(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 10) + 8))();
}

uint64_t ImsTcpSocket::resetSocket(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 96))();
}

uint64_t non-virtual thunk to'ImsTcpSocket::resetSocket(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 10) + 96))();
}

uint64_t ImsTcpSocket::socketName(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 104))();
}

uint64_t non-virtual thunk to'ImsTcpSocket::socketName(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 10) + 104))();
}

uint64_t ImsTcpSocket::socketProtocol(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 112))();
}

uint64_t non-virtual thunk to'ImsTcpSocket::socketProtocol(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 10) + 112))();
}

uint64_t ImsTcpSocket::remoteEndAddress@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 96);
  *a2 = *(void *)(this + 88);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t non-virtual thunk to'ImsTcpSocket::remoteEndAddress@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void ImsTcpSocket::initializeIncomingSocket(uint64_t a1@<X0>, ImsSocket *a2@<X1>, uint64_t a3@<X2>, dispatch_object_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13 = *(const void **)(a6 + 8);
  v14[0] = &unk_1F20E38B0;
  v14[1] = v13;
  if (v13) {
    CFRetain(v13);
  }
  v14[0] = &unk_1F20B3050;
  ImsTcpSocket::_initializeIncoming(a1, a2, a3, a4, a5, a7);
  ims::CFType::~CFType((ims::CFType *)v14);
}

void sub_1C53D8944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void non-virtual thunk to'ImsTcpSocket::initializeIncomingSocket(uint64_t a1@<X0>, ImsSocket *a2@<X1>, uint64_t a3@<X2>, dispatch_object_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
}

double non-virtual thunk to'ImsTcpSocket::isPortReuseAllowed@<D0>(ImsTcpSocket *this@<X0>, uint64_t a2@<X8>)
{
  return ImsSocket::allowPortReuse((ImsTcpSocket *)((char *)this - 80), a2);
}

BOOL ImsTcpSocket::socketInterfaceInitialized(ImsTcpSocket *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 5);
  return v1 && *v1 != -1;
}

BOOL non-virtual thunk to'ImsTcpSocket::socketInterfaceInitialized(ImsTcpSocket *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this - 5);
  return v1 && *v1 != -1;
}

uint64_t ImsTcpSocket::socketLocalAddress@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t non-virtual thunk to'ImsTcpSocket::socketLocalAddress@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this - 48);
  *a2 = *(void *)(this - 56);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void ImsTcpSocket::setSocketLocalAddress(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void non-virtual thunk to'ImsTcpSocket::setSocketLocalAddress(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 - 48);
  *(void *)(a1 - 56) = v3;
  *(void *)(a1 - 48) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t non-virtual thunk to'ImsTcpSocket::socketInterfaceDescriptor(ImsTcpSocket *this)
{
  return ImsSocket::socketDescriptor((ImsTcpSocket *)((char *)this - 80));
}

uint64_t ImsTcpSocket::socketDebugMask(ImsTcpSocket *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t non-virtual thunk to'ImsTcpSocket::socketDebugMask(ImsTcpSocket *this)
{
  return *((unsigned int *)this - 2);
}

uint64_t ImsTcpSocket::setSocketDebugMask(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

uint64_t non-virtual thunk to'ImsTcpSocket::setSocketDebugMask(uint64_t this, int a2)
{
  *(_DWORD *)(this - 8) = a2;
  return this;
}

void ImsTcpSocket::setSocketDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 152);
  *(void *)(a1 + 144) = v3;
  *(void *)(a1 + 152) = v2;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void non-virtual thunk to'ImsTcpSocket::setSocketDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = v2;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void non-virtual thunk to'ImsTcpSocket::setDscpClass(uint64_t a1, int a2)
{
}

void ImsTcpSocket::_handshakeDone(uint64_t a1@<X8>)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
}

uint64_t ImsTcpSocket::isConnected(ImsTcpSocket *this)
{
  return *((unsigned __int8 *)this + 104);
}

void *ImsTcpSocket::protocol@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "TCP");
}

uint64_t ImsTcpSocket::isTls(ImsTcpSocket *this)
{
  return 0;
}

void ImsTcpSocket::resetSocketDelegate(ImsTcpSocket *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t ImsTcpSocket::setForcedTcpKeepAlive(uint64_t this, char a2)
{
  *(unsigned char *)(this + 168) = a2;
  return this;
}

void non-virtual thunk to'ImsTcpSocket::resetSocketDelegate(ImsTcpSocket *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t non-virtual thunk to'ImsTcpSocket::setForcedTcpKeepAlive(uint64_t this, char a2)
{
  *(unsigned char *)(this + 88) = a2;
  return this;
}

void std::__list_imp<std::vector<unsigned char>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v6 = (uint64_t *)v3[1];
        uint64_t v5 = (void *)v3[2];
        if (v5)
        {
          v3[3] = (uint64_t)v5;
          operator delete(v5);
        }
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6 != a1);
    }
  }
}

uint64_t *std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x1C878E320](v2, 0x20C40960023A9);
  }
  return a1;
}

uint64_t *dispatch::async<ImsTcpSocket::socketReadCallback(void)::$_0>(dispatch_queue_s *,std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v7 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[1]) {
        (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_1C53D8CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ImsLogContainer::ImsLogContainer(uint64_t a1, const std::string *a2)
{
  *(void *)a1 = &unk_1F20C9CA0;
  uint64_t v4 = (void *)(a1 + 32);
  uint64_t v5 = (std::string *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "default");
  std::string::basic_string[abi:ne180100]<0>(v4, "");
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  std::string::operator=(v5, a2);
  return a1;
}

void sub_1C53D8D6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogContainer::ImsLogContainer(uint64_t a1, const std::string *a2, const std::string *a3)
{
  *(void *)a1 = &unk_1F20C9CA0;
  uint64_t v6 = (std::string *)(a1 + 32);
  uint64_t v7 = (std::string *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "default");
  std::string::basic_string[abi:ne180100]<0>(v6, "");
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  std::string::operator=(v7, a2);
  std::string::operator=(v6, a3);
  return a1;
}

void sub_1C53D8E48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

ImsResult *ImsLogContainer::logResult(ImsLogContainer *this, ImsResult *a2)
{
  if ((*(unsigned int (**)(void, void))(**((void **)a2 + 1) + 24))(*((void *)a2 + 1), *((unsigned int *)a2 + 4)))
  {
    uint64_t v4 = (unsigned char *)(*(uint64_t (**)(ImsLogContainer *))(*(void *)this + 56))(this);
    (*(void (**)(ImsLogContainer *, unsigned char *))(*(void *)this + 16))(this, v4);
    (*(void (**)(ImsResult *, unsigned char *))(*(void *)a2 + 16))(a2, v4);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v4[17] = 0;
  }
  return a2;
}

uint64_t ImsLogContainer::logResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(unsigned int (**)(void, void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16)))
  {
    uint64_t v6 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v6);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)a2 + 16))(a2, v6);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v6[17] = 0;
  }
  return ImsResult::ImsResult(a3, a2);
}

uint64_t ImsLogContainer::infoStream(ImsLogContainer *this)
{
  if (*((char *)this + 55) < 0)
  {
    if (*((void *)this + 5))
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 7);
      if (!v2)
      {
        uint64_t v2 = ims::info((uint64_t)this + 8, (uint64_t)this + 32);
        *((void *)this + 7) = v2;
      }
      return v2;
    }
  }
  else if (*((unsigned char *)this + 55))
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::info((uint64_t)this + 8, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C53D916C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogContainer::noticeStream(ImsLogContainer *this)
{
  if (*((char *)this + 55) < 0)
  {
    if (*((void *)this + 5))
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 8);
      if (!v2)
      {
        uint64_t v2 = ims::notice((uint64_t)this + 8, (uint64_t)this + 32);
        *((void *)this + 8) = v2;
      }
      return v2;
    }
  }
  else if (*((unsigned char *)this + 55))
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::notice((uint64_t)this + 8, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C53D9220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogContainer::warnStream(ImsLogContainer *this)
{
  if (*((char *)this + 55) < 0)
  {
    if (*((void *)this + 5))
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 9);
      if (!v2)
      {
        uint64_t v2 = ims::warn((uint64_t)this + 8, (uint64_t)this + 32);
        *((void *)this + 9) = v2;
      }
      return v2;
    }
  }
  else if (*((unsigned char *)this + 55))
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::warn((uint64_t)this + 8, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C53D92D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogContainer::errorStream(ImsLogContainer *this)
{
  if (*((char *)this + 55) < 0)
  {
    if (*((void *)this + 5))
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 10);
      if (!v2)
      {
        uint64_t v2 = ims::error((uint64_t)this + 8, (uint64_t)this + 32);
        *((void *)this + 10) = v2;
      }
      return v2;
    }
  }
  else if (*((unsigned char *)this + 55))
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::error((uint64_t)this + 8, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C53D9388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogContainer::spamStream(ImsLogContainer *this)
{
  if (*((char *)this + 55) < 0)
  {
    if (*((void *)this + 5))
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 12);
      if (!v2)
      {
        uint64_t v2 = ims::spam((uint64_t)this + 8, (uint64_t)this + 32);
        *((void *)this + 12) = v2;
      }
      return v2;
    }
  }
  else if (*((unsigned char *)this + 55))
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::spam((uint64_t)this + 8, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C53D943C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogContainer::facility(ImsLogContainer *this)
{
  uint64_t v2 = ims::logger(this);
  return ImsLogger::facilityWithName(v2, (unsigned __int8 *)this + 8, 1);
}

uint64_t ImsLogContainerWrapper::infoStream(ImsLogContainerWrapper *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, v2);
  return v2;
}

uint64_t ImsLogContainerWrapper::noticeStream(ImsLogContainerWrapper *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 40))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, v2);
  return v2;
}

uint64_t ImsLogContainerWrapper::warnStream(ImsLogContainerWrapper *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, v2);
  return v2;
}

uint64_t ImsLogContainerWrapper::errorStream(ImsLogContainerWrapper *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 56))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, v2);
  return v2;
}

uint64_t ImsLogContainerWrapper::debugStream(ImsLogContainerWrapper *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 64))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, v2);
  return v2;
}

uint64_t ImsLogContainerWrapper::spamStream(ImsLogContainerWrapper *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 72))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, v2);
  return v2;
}

uint64_t ImsLogContainerWrapper::facility(ImsLogContainerWrapper *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

void ImsLogWriter::write(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  v5[1] = v5;
  void v5[2] = 0x4002000000;
  _OWORD v5[3] = __Block_byref_object_copy__3;
  v5[4] = __Block_byref_object_dispose__3;
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else {
    std::string __p = *(std::string *)(a2 + 48);
  }
  uint64_t v3 = sImsDispatchQueue;
  if (!sImsDispatchQueue)
  {
    uint64_t v3 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v3;
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZN12ImsLogWriter5writeERKN3ctu10LogMessageE_block_invoke;
  v4[3] = &unk_1E65102E8;
  _OWORD v4[4] = v5;
  v4[5] = a1;
  dispatch_async(v3, v4);
  _Block_object_dispose(v5, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

__n128 __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

uint64_t ___ZN12ImsLogWriter5writeERKN3ctu10LogMessageE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = v2[1];
  uint64_t v4 = (unsigned char *)(*(uint64_t (**)(void *))(v3 + 64))(++v2);
  (*(void (**)(void *, unsigned char *))(*v2 + 16))(v2, v4);
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v4 + 32))(v4, *(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t result = (*(uint64_t (**)(unsigned char *, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v4[17] = 0;
  return result;
}

void ImsDebugLogWriter::write(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  v5[1] = v5;
  void v5[2] = 0x4002000000;
  _OWORD v5[3] = __Block_byref_object_copy__3;
  v5[4] = __Block_byref_object_dispose__3;
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else {
    std::string __p = *(std::string *)(a2 + 48);
  }
  uint64_t v3 = sImsDispatchQueue;
  if (!sImsDispatchQueue)
  {
    uint64_t v3 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v3;
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZN17ImsDebugLogWriter5writeERKN3ctu10LogMessageE_block_invoke;
  v4[3] = &unk_1E6510310;
  _OWORD v4[4] = v5;
  v4[5] = a1;
  dispatch_async(v3, v4);
  _Block_object_dispose(v5, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void ___ZN17ImsDebugLogWriter5writeERKN3ctu10LogMessageE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40) + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = (unsigned char *)ims::debug(v2, (uint64_t)__p);
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v3 + 32))(v3, *(void *)(*(void *)(a1 + 32) + 8) + 40);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v3[17] = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C53D9BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsLogWriter::~ImsLogWriter(ImsLogWriter *this)
{
}

void non-virtual thunk to'ImsLogWriter::~ImsLogWriter(ImsLogWriter *this)
{
}

void ImsDebugLogWriter::~ImsDebugLogWriter(void **this)
{
  *this = &unk_1F20C9C20;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C9C20;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t SipPreconditions::ForkStatus::ForkStatus(uint64_t a1, uint64_t a2, std::string *__str)
{
  *(void *)a1 = &unk_1F20C9D00;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 64) = 1;
  *(void *)(a1 + 16) = a2;
  std::string::operator=((std::string *)(a1 + 40), __str);
  return a1;
}

void sub_1C53D9E64(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipPreconditions::ForkStatus::setSatisfied(uint64_t a1, int a2, int a3, int a4)
{
  if (*(_DWORD *)(a1 + 28) != 5 || !*(unsigned char *)(a1 + 36)) {
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + 37))
  {
    if (*(_DWORD *)(a1 + 32) == 3)
    {
LABEL_5:
      BOOL v5 = 1;
      goto LABEL_6;
    }
    BOOL v5 = *(_DWORD *)(a1 + 64) != 3;
  }
  else
  {
    BOOL v5 = 0;
  }
LABEL_6:
  if (a4) {
    *(unsigned char *)(a1 + 37) = 1;
  }
  if (a2) {
    *(_DWORD *)(a1 + 64) = a2;
  }
  *(_DWORD *)(a1 + 32) = a3;
  if (v5)
  {
    uint64_t v6 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v6);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    uint64_t v8 = "remote preconditions have already been satisfied";
    uint64_t v9 = 48;
LABEL_21:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    v6[17] = 0;
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v6[17] = 0;
    return !v5;
  }
  if (*(char *)(a1 + 63) < 0) {
    uint64_t v10 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 63);
  }
  uint64_t v6 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v6);
  uint64_t v7 = (void *)*((void *)v6 + 1);
  if (!v10)
  {
    uint64_t v8 = "remote preconditions have been satisfied";
    uint64_t v9 = 40;
    goto LABEL_21;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"remote preconditions have been satisfied in fork ", 49);
  v6[17] = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v12, (const std::string *)(a1 + 40));
  (*(void (**)(unsigned char *, void **))(*(void *)v6 + 56))(v6, v12);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v6[17] = 0;
  if (v15 < 0) {
    operator delete(__p);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return !v5;
}

void sub_1C53DA0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void SipPreconditions::ForkStatus::setPreconditionsEnabled(SipPreconditions::ForkStatus *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(SipPreconditions::ForkStatus *))(*(void *)this + 64))(this);
  (*(void (**)(SipPreconditions::ForkStatus *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Preconditions ", 14);
  *(unsigned char *)(v4 + 17) = 0;
  if (a2) {
    BOOL v5 = "enabled";
  }
  else {
    BOOL v5 = "disabled";
  }
  if (a2) {
    uint64_t v6 = 7;
  }
  else {
    uint64_t v6 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)v5, v6);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" in fork ", 9);
  *(unsigned char *)(v4 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v7, (const std::string *)((char *)this + 40));
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 56))(v4, v7);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  *((unsigned char *)this + 36) = a2;
}

void sub_1C53DA288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void SipPreconditions::ForkStatus::setNeedToSendUpdate(SipPreconditions::ForkStatus *this, int a2)
{
  if (*((unsigned __int8 *)this + 38) != a2)
  {
    *((unsigned char *)this + 38) = a2;
    if (*((char *)this + 63) < 0) {
      uint64_t v4 = *((void *)this + 6);
    }
    else {
      uint64_t v4 = *((unsigned __int8 *)this + 63);
    }
    uint64_t v5 = (*(uint64_t (**)(SipPreconditions::ForkStatus *))(*(void *)this + 64))(this);
    (*(void (**)(SipPreconditions::ForkStatus *, uint64_t))(*(void *)this + 16))(this, v5);
    if (a2) {
      uint64_t v6 = "set";
    }
    else {
      uint64_t v6 = "cleared";
    }
    if (a2) {
      uint64_t v7 = 3;
    }
    else {
      uint64_t v7 = 7;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)v6, v7);
    *(unsigned char *)(v5 + 17) = 0;
    char v8 = *(void **)(v5 + 8);
    if (v4)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" needToSendUpdate flag in fork ", 31);
      *(unsigned char *)(v5 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v9, (const std::string *)((char *)this + 40));
      (*(void (**)(uint64_t, void **))(*(void *)v5 + 56))(v5, v9);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      if (v12 < 0) {
        operator delete(__p);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" needToSendUpdate flag in unknown fork", 38);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
    }
  }
}

void sub_1C53DA484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void SipPreconditions::~SipPreconditions(SipPreconditions *this)
{
  *(void *)this = &unk_1F20C9D60;
  uint64_t v2 = (void *)((char *)this + 64);
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  *((void *)this + 7) = v2;
  *((void *)this + 9) = 0;
  *uint64_t v2 = 0;
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20C9D60;
  uint64_t v2 = (void *)((char *)this + 64);
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  *((void *)this + 7) = v2;
  *((void *)this + 9) = 0;
  *uint64_t v2 = 0;
  JUMPOUT(0x1C878E320);
}

void *SipPreconditions::logPrefix(SipPreconditions *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Preconditions: ", 15);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void SipPreconditions::forkStatusWithTag(long long *a1@<X0>, std::string *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  char v8 = (uint64_t **)a1 + 7;
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1 + 56, (void **)&a2->__r_.__value_.__l.__data_);
  if (a1 + 4 == (long long *)v9)
  {
    *a4 = 0;
    a4[1] = 0;
    if (a3)
    {
      char v15 = a1;
      std::allocate_shared[abi:ne180100]<SipPreconditions::ForkStatus,std::allocator<SipPreconditions::ForkStatus>,SipPreconditions*,std::string const&,void>((uint64_t *)&v15, a2, a4);
      char v15 = (long long *)a2;
      uint64_t v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v15);
      uint64_t v13 = *a4;
      uint64_t v12 = a4[1];
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = (std::__shared_weak_count *)v11[8];
      v11[7] = v13;
      v11[8] = v12;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
  }
  else
  {
    *a4 = (uint64_t)v9[7];
    char v10 = (atomic_ullong *)v9[8];
    a4[1] = (uint64_t)v10;
    if (v10) {
      atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
    }
  }
}

void sub_1C53DA688(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void SipPreconditions::initializeMobileOriginated(unsigned int *a1, _OWORD *a2)
{
  *((unsigned char *)a1 + 93) = 1;
  long long v3 = *(_OWORD *)((char *)a2 + 9);
  *(_OWORD *)(a1 + 6) = *a2;
  *(_OWORD *)((char *)a1 + 33) = v3;
  *((unsigned char *)a1 + 92) = 0;
  a1[22] = 5;
  int v4 = a1[6];
  if ((v4 - 3) < 2)
  {
    int v4 = 3;
LABEL_4:
    a1[21] = v4;
    goto LABEL_6;
  }
  if (v4 == 2) {
    goto LABEL_4;
  }
  a1[22] = 1;
  a1[20] = 1;
LABEL_6:
  uint64_t v5 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 64))(a1);
  (*(void (**)(unsigned int *, uint64_t))(*(void *)a1 + 16))(a1, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Local desired precondition strength is ", 39);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C53DA820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipPreconditions::initializeMobileTerminated(_DWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)((char *)a2 + 9);
  *(_OWORD *)(a1 + 6) = *a2;
  *(_OWORD *)((char *)a1 + 33) = v5;
  *((unsigned char *)a1 + 92) = 0;
  a1[22] = 5;
  int v6 = a1[6];
  if ((v6 - 3) < 2)
  {
    int v6 = 3;
LABEL_4:
    a1[21] = v6;
    goto LABEL_6;
  }
  if (v6 == 2) {
    goto LABEL_4;
  }
  uint64_t v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 64))(a1);
  (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 16))(a1, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Preconditions NOT supported by network", 38);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  a1[22] = 1;
  a1[20] = 1;
LABEL_6:
  char v8 = (SipUriHeader *)SipMessage::header<SipFromHeader>(a3);
  if (v8) {
    uint64_t v9 = SipUriHeader::tag(v8);
  }
  else {
    uint64_t v9 = &ims::kEmptyString;
  }
  int v45 = 0;
  char v46 = 0;
  SipPreconditions::forkStatusWithTag((long long *)a1, (std::string *)v9, 1, (uint64_t *)&v45);
  char v10 = SipMessage::body<SipSdpBody>(a3);
  if (v10)
  {
    uint64_t v12 = (SDPModel *)*((void *)v10 + 1);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 2);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  SipPreconditions::ForkStatus::setPreconditionsEnabled(v45, 0);
  if (!v12)
  {
    int v15 = 0;
    *((_DWORD *)v45 + 16) = a1[7];
    goto LABEL_39;
  }
  if (SDPModel::containsPreconditions((uint64_t)v12, 1, 3))
  {
    *((_DWORD *)v45 + 16) = 3;
    uint64_t v13 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 64))(a1);
    (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 16))(a1, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Remote side requests mandatory preconditions", 44);
    *(unsigned char *)(v13 + 17) = 0;
    uint64_t v14 = (unsigned char *)(v13 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    if (!SDPModel::containsPreconditions((uint64_t)v12, 1, 2)) {
      goto LABEL_20;
    }
    *((_DWORD *)v45 + 16) = 2;
    uint64_t v16 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 64))(a1);
    (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 16))(a1, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Remote side requests optional preconditions", 43);
    *(unsigned char *)(v16 + 17) = 0;
    uint64_t v14 = (unsigned char *)(v16 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  unsigned char *v14 = 0;
LABEL_20:
  if (SDPModel::containsPreconditions((uint64_t)v12, 2, 3))
  {
    uint64_t v17 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 64))(a1);
    (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 16))(a1, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Remote side desires our use of mandatory preconditions", 54);
    *(unsigned char *)(v17 + 17) = 0;
    long long v18 = (unsigned char *)(v17 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    int v15 = 3;
LABEL_24:
    *long long v18 = 0;
    goto LABEL_26;
  }
  if (SDPModel::containsPreconditions((uint64_t)v12, 2, 2))
  {
    uint64_t v19 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 64))(a1);
    (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 16))(a1, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Remote side desires our use of optional preconditions", 53);
    *(unsigned char *)(v19 + 17) = 0;
    long long v18 = (unsigned char *)(v19 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    int v15 = 2;
    goto LABEL_24;
  }
  int v15 = 0;
LABEL_26:
  std::string __p = 0;
  char v43 = 0;
  uint64_t v44 = 0;
  SDPPreconditionTable::SDPPreconditionTable((SDPPreconditionTable *)&__p, 1);
  SDPModel::transactionPreconditionTable(v12, (SDPPreconditionTable *)&__p);
  long long v20 = __p;
  if (__p == v43)
  {
    int v21 = 0;
  }
  else
  {
    int v21 = 0;
    char v22 = __p;
    do
    {
      if (v22[2] != 1 || *(unsigned char *)v22 == 0) {
        int v24 = 0;
      }
      else {
        int v24 = v22[3];
      }
      v21 |= v24;
      v22 += 5;
    }
    while (v22 != v43);
  }
  long long v25 = v45;
  *((_DWORD *)v45 + 8) = v21;
  *((unsigned char *)v25 + 37) = 1;
  if (v20)
  {
    char v43 = v20;
    operator delete(v20);
  }
LABEL_39:
  std::string::basic_string[abi:ne180100]<0>(&__p, "precondition");
  BOOL v26 = SipMessage::supportsOption(a3, &__p);
  BOOL v27 = v26;
  if ((SHIBYTE(v44) & 0x80000000) == 0)
  {
    if (v26) {
      goto LABEL_41;
    }
LABEL_48:
    uint64_t v31 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 32))(a1);
    (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 16))(a1, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"incoming INVITE doesn't support preconditions.", 46);
    *(unsigned char *)(v31 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v31 + 17) = 0;
    uint64_t v30 = 1;
    *((_DWORD *)v45 + 7) = 1;
    if (!v11) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  operator delete(__p);
  if (!v27) {
    goto LABEL_48;
  }
LABEL_41:
  long long v28 = v45;
  *((_DWORD *)v45 + 7) = 5;
  if (v15 != 3)
  {
    if (a1[21] != 3 && *((_DWORD *)v28 + 16) != 3)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "precondition");
      BOOL v34 = SipMessage::requiresOption(a3, &__p);
      if (SHIBYTE(v44) < 0) {
        operator delete(__p);
      }
      if (!v34)
      {
        uint64_t v41 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 64))(a1);
        (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 16))(a1, v41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"neither side requires preconditions, so let's skip them", 55);
        *(unsigned char *)(v41 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v41 + 17) = 0;
        goto LABEL_68;
      }
      long long v28 = v45;
    }
LABEL_61:
    SipPreconditions::ForkStatus::setPreconditionsEnabled(v28, 1);
    int v35 = a1[22];
    if (v35 != 1)
    {
      int v35 = a1[21];
      if ((v15 & 2) != 0 && v35 <= v15)
      {
        int v35 = a1[20];
        if (v35 >= v15) {
          int v35 = v15;
        }
      }
    }
    *((_DWORD *)v45 + 17) = v35;
    uint64_t v36 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 64))(a1);
    (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 16))(a1, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"Local preconditions are ", 24);
    *(unsigned char *)(v36 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v36 + 32))(v36, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v36 + 17) = 0;
    if (SHIBYTE(v44) < 0) {
      operator delete(__p);
    }
LABEL_68:
    uint64_t v30 = 1;
    if (!v11) {
      goto LABEL_50;
    }
LABEL_49:
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    goto LABEL_50;
  }
  if (a1[20] == 3) {
    goto LABEL_61;
  }
  uint64_t v29 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 48))(a1);
  (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 16))(a1, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"Remote side requests mandatory preconditions, but we only support ", 66);
  *(unsigned char *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v29 + 32))(v29, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v29 + 17) = 0;
  if (SHIBYTE(v44) < 0) {
    operator delete(__p);
  }
  uint64_t v30 = 0;
  if (v11) {
    goto LABEL_49;
  }
LABEL_50:
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v30)
  {
    int v32 = (SipUriHeader *)SipMessage::header<SipFromHeader>(a3);
    if (v32) {
      long long v33 = SipUriHeader::tag(v32);
    }
    else {
      long long v33 = &ims::kEmptyString;
    }
    if (SipPreconditions::preconditionsEnabled((uint64_t)a1, (void **)v33))
    {
      *((unsigned char *)a1 + 92) = 0;
    }
    else
    {
      *((unsigned char *)a1 + 92) = 1;
      uint64_t v37 = *((void *)a1 + 2);
      int v38 = (SipUriHeader *)SipMessage::header<SipFromHeader>(a3);
      if (v38) {
        char v39 = SipUriHeader::tag(v38);
      }
      else {
        char v39 = &ims::kEmptyString;
      }
      (*(void (**)(uint64_t, long long *))(*(void *)v37 + 24))(v37, v39);
    }
  }
  return v30;
}

void sub_1C53DB2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipPreconditions::preconditionsEnabled(uint64_t a1, void **a2)
{
  if (*(_DWORD *)(a1 + 88) == 1) {
    return 0;
  }
  long long v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 56, a2);
  if ((void **)(a1 + 64) == v3) {
    return 0;
  }
  long long v5 = v3[7];
  int v4 = (std::__shared_weak_count *)v3[8];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5 && v5[7] == 5)
  {
    BOOL v6 = *((unsigned __int8 *)v5 + 36) != 0;
    if (!v4) {
      return v6;
    }
    goto LABEL_11;
  }
  BOOL v6 = 0;
  if (v4) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

void SipPreconditions::initializeNewFork(uint64_t a1, std::string *a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  SipPreconditions::forkStatusWithTag((long long *)a1, a2, 1, &v6);
  *(_DWORD *)(v6 + 68) = *(_DWORD *)(a1 + 84);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Local preconditions are ", 24);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 32))(v3, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C53DB514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void SipPreconditions::updateFromIncomingMessage(uint64_t a1, std::string *a2, uint64_t a3)
{
  char v56 = 0;
  char v57 = 0;
  SipPreconditions::forkStatusWithTag((long long *)a1, a2, 1, (uint64_t *)&v56);
  uint64_t v6 = SipMessage::body<SipSdpBody>(a3);
  if (!v6)
  {
    uint64_t v7 = 0;
LABEL_9:
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"ignoring message with no incoming SDP", 37);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    goto LABEL_112;
  }
  char v8 = (SDPModel *)*((void *)v6 + 1);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 2);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v8) {
    goto LABEL_9;
  }
  if (v56)
  {
    BOOL v9 = *((_DWORD *)v56 + 7) == 5 && *((unsigned char *)v56 + 36) != 0;
    SipPreconditions::ForkStatus::setPreconditionsEnabled(v56, 0);
    long long v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    SDPPreconditionTable::SDPPreconditionTable((SDPPreconditionTable *)&v49, 1);
    if ((SDPModel::transactionPreconditionTable(v8, (SDPPreconditionTable *)&v49) & 1) == 0)
    {
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"no precondition table in incoming message", 41);
      *(unsigned char *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v18 + 17) = 0;
      *((unsigned char *)v56 + 37) = 1;
LABEL_109:
      uint64_t v12 = v49;
      if (!v49) {
        goto LABEL_112;
      }
      uint64_t v50 = (char *)v49;
      goto LABEL_111;
    }
    uint64_t v13 = (char *)v49;
    if (v49 == v50)
    {
LABEL_23:
      *((unsigned char *)v56 + 24) = 0;
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"remote side didn't ask for confirmation when our preconditions are satisfied", 76);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if (!*(unsigned char *)(a1 + 34))
      {
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"but we're going to tell them anyway", 35);
        *(unsigned char *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v17 + 17) = 0;
      }
    }
    else
    {
      int v14 = *((unsigned __int8 *)v56 + 24);
      while (!v13[1] || *((_DWORD *)v13 + 2) != 2)
      {
        v13 += 20;
        if (v13 == v50) {
          goto LABEL_23;
        }
      }
      *((unsigned char *)v56 + 24) = 1;
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"remote side asked for confirmation when our preconditions are satisfied", 71);
      *(unsigned char *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v19 + 17) = 0;
      if (!v14)
      {
        BOOL v34 = (char *)v49;
        if (v49 == v50) {
          goto LABEL_118;
        }
        int v35 = 0;
        do
        {
          if (*((_DWORD *)v34 + 2) != 2 || *v34 == 0) {
            int v37 = 0;
          }
          else {
            int v37 = *((_DWORD *)v34 + 3);
          }
          v35 |= v37;
          v34 += 20;
        }
        while (v34 != v50);
        if (!v35)
        {
LABEL_118:
          uint64_t v38 = *(void *)(a1 + 16);
          if (v38)
          {
            if ((*(unsigned int (**)(uint64_t, std::string *))(*(void *)v38 + 32))(v38, a2)) {
              SipPreconditions::ForkStatus::setNeedToSendUpdate(v56, 1);
            }
          }
        }
      }
    }
    long long v20 = (char *)v49;
    if (v49 == v50)
    {
      int v23 = 0;
      int v22 = 0;
      int v24 = 0;
    }
    else
    {
      int v21 = (char *)v49;
      while (*((_DWORD *)v21 + 2) != 1)
      {
        v21 += 20;
        if (v21 == v50)
        {
          int v22 = 0;
          goto LABEL_34;
        }
      }
      int v22 = *((_DWORD *)v21 + 4);
LABEL_34:
      int v24 = 0;
      long long v25 = (char *)v49;
      do
      {
        if (*((_DWORD *)v25 + 2) != 1 || *v25 == 0) {
          int v27 = 0;
        }
        else {
          int v27 = *((_DWORD *)v25 + 3);
        }
        v24 |= v27;
        v25 += 20;
      }
      while (v25 != v50);
      do
      {
        if (*((_DWORD *)v20 + 2) == 2)
        {
          int v23 = *((_DWORD *)v20 + 4);
          goto LABEL_47;
        }
        v20 += 20;
      }
      while (v20 != v50);
      int v23 = 0;
LABEL_47:
      if (v22 == 3)
      {
        uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"remote side has mandatory preconditions", 39);
        *(unsigned char *)(v28 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v28 + 17) = 0;
        int v22 = 3;
      }
    }
    if (*((_DWORD *)v56 + 17) == 3)
    {
      uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"we previously offered mandatory local preconditions", 51);
      *(unsigned char *)(v29 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v29 + 17) = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(v52, "precondition");
    BOOL v30 = SipMessage::supportsOption(a3, v52);
    BOOL v31 = v30;
    if (v53 < 0)
    {
      operator delete(v52[0]);
      if (v31)
      {
LABEL_80:
        long long v40 = v56;
        *((_DWORD *)v56 + 7) = 5;
        if (v23 == 3 || *((_DWORD *)v40 + 17) == 3 || v22 == 3) {
          goto LABEL_81;
        }
        std::string::basic_string[abi:ne180100]<0>(v52, "precondition");
        BOOL v42 = SipMessage::requiresOption(a3, v52);
        if (v53 < 0) {
          operator delete(v52[0]);
        }
        if (v42)
        {
LABEL_81:
          if ((v22 & 0xFFFFFFFE) == 2)
          {
            if (v9)
            {
              uint64_t v41 = v56;
            }
            else
            {
              uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
              (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v44);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"Preconditions now enabled for fork ", 35);
              *(unsigned char *)(v44 + 17) = 0;
              ObfuscatedString::ObfuscatedString((uint64_t)v52, (const std::string *)((char *)v56 + 40));
              (*(void (**)(uint64_t, void **))(*(void *)v44 + 56))(v44, v52);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v44 + 17) = 0;
              if (v55 < 0) {
                operator delete(__p);
              }
              if (v53 < 0) {
                operator delete(v52[0]);
              }
              uint64_t v41 = v56;
              *((unsigned char *)v56 + 39) = 0;
            }
            SipPreconditions::ForkStatus::setPreconditionsEnabled(v41, 1);
          }
          int v45 = v56;
          *((_DWORD *)v56 + 16) = v22;
          int v46 = *(_DWORD *)(a1 + 88);
          if (v46 != 1)
          {
            int v46 = *(_DWORD *)(a1 + 84);
            if ((v23 & 0xFFFFFFFE) == 2 && v46 <= v23)
            {
              int v46 = *(_DWORD *)(a1 + 80);
              if (v46 >= v23) {
                int v46 = v23;
              }
            }
          }
          *((_DWORD *)v45 + 17) = v46;
          for (uint64_t i = *((void *)v8 + 52); ; i += 200)
          {
            if (i == *((void *)v8 + 53)) {
              goto LABEL_108;
            }
            if (*(_DWORD *)(i + 12) == 2) {
              break;
            }
          }
          int v48 = SDPPreconditionTable::rowsAreSatisfied((void *)(i + 160), 1);
          int v45 = v56;
          if (!v48)
          {
LABEL_108:
            *((unsigned char *)v45 + 37) = 1;
            *((_DWORD *)v45 + 8) = v24;
            goto LABEL_109;
          }
          if (SipPreconditions::ForkStatus::setSatisfied((uint64_t)v56, v22, v24, 1)) {
            goto LABEL_65;
          }
          goto LABEL_109;
        }
        uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"neither side requires preconditions, so let's skip them", 55);
        *(unsigned char *)(v43 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v43 + 17) = 0;
        goto LABEL_65;
      }
    }
    else if (v30)
    {
      goto LABEL_80;
    }
    if (*(unsigned char *)(a1 + 47))
    {
      for (uint64_t j = (int *)v49; j != (int *)v50; j += 5)
      {
        if (j[4] >= 1)
        {
          uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v39);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"Supported header is not present, but we will ignore this carrier non-compliance issue.", 86);
          *(unsigned char *)(v39 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v39 + 17) = 0;
          goto LABEL_80;
        }
      }
    }
    uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"remote fork ", 12);
    *(unsigned char *)(v33 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v52, a2);
    (*(void (**)(uint64_t, void **))(*(void *)v33 + 56))(v33, v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)" doesn't support preconditions.", 31);
    *(unsigned char *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v33 + 17) = 0;
    if (v55 < 0) {
      operator delete(__p);
    }
    if (v53 < 0) {
      operator delete(v52[0]);
    }
    *((_DWORD *)v56 + 7) = 1;
LABEL_65:
    SipPreconditions::checkPreconditionStatus(a1, (uint64_t)a2);
    goto LABEL_109;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"no fork for tag ", 16);
  *(unsigned char *)(v11 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v52, a2);
  (*(void (**)(uint64_t, void **))(*(void *)v11 + 56))(v11, v52);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v55 < 0) {
    operator delete(__p);
  }
  if (v53 < 0)
  {
    uint64_t v12 = v52[0];
LABEL_111:
    operator delete(v12);
  }
LABEL_112:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
}

void sub_1C53DC2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Unwind_Resume(exception_object);
}

void SipPreconditions::checkPreconditionStatus(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 92))
  {
    if (SipPreconditions::localPreconditionsSatisfied(a1, (void **)a2))
    {
      long long v48 = 0uLL;
      v49[0] = 0;
      uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
      if ((v4 & 0x80u) != 0) {
        uint64_t v4 = *(void *)(a2 + 8);
      }
      if (v4)
      {
        uint64_t v46 = 0;
        long long v47 = 0;
        SipPreconditions::forkStatusWithTag((long long *)a1, (std::string *)a2, 0, &v46);
        uint64_t v5 = v46;
        if (v46)
        {
          uint64_t v6 = v47;
          uint64_t v7 = (void *)*((void *)&v48 + 1);
          if (*((void *)&v48 + 1) >= v49[0])
          {
            unint64_t v27 = v48;
            uint64_t v28 = (uint64_t)(*((void *)&v48 + 1) - v48) >> 4;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 60) {
              std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v30 = v49[0] - v48;
            if ((uint64_t)(v49[0] - v48) >> 3 > v29) {
              unint64_t v29 = v30 >> 3;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v29;
            }
            uint64_t v44 = v49;
            if (v31 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v32 = (char *)operator new(16 * v31);
            uint64_t v33 = (uint64_t *)&v32[16 * v28];
            *uint64_t v33 = v5;
            v33[1] = (uint64_t)v6;
            if (v6)
            {
              atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v7 = (void *)*((void *)&v48 + 1);
            }
            char v8 = v33 + 2;
            if (v7 == (void *)v27)
            {
              int64x2_t v35 = vdupq_n_s64(v27);
            }
            else
            {
              do
              {
                long long v34 = *((_OWORD *)v7 - 1);
                v7 -= 2;
                *((_OWORD *)v33 - BambiCallParticipant::setState((uint64_t)this, 10, 1) = v34;
                v33 -= 2;
                void *v7 = 0;
                v7[1] = 0;
              }
              while (v7 != (void *)v27);
              int64x2_t v35 = (int64x2_t)v48;
            }
            *(void *)&long long v48 = v33;
            *((void *)&v48 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = v8;
            int64x2_t v42 = v35;
            uint64_t v36 = (void *)v49[0];
            v49[0] = &v32[16 * v31];
            std::string __p = v36;
            uint64_t v41 = (void *)v35.i64[0];
            std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&v41);
          }
          else
          {
            **((void **)&v48 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = v46;
            v7[1] = v6;
            if (v6) {
              atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            char v8 = v7 + 2;
          }
          *((void *)&v48 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = v8;
        }
        if (v47) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        }
        uint64_t v11 = (void *)*((void *)&v48 + 1);
      }
      else
      {
        uint64_t v10 = *(void **)(a1 + 56);
        if (v10 == (void *)(a1 + 64))
        {
          uint64_t v11 = 0;
        }
        else
        {
          uint64_t v11 = 0;
          do
          {
            long long v12 = *(_OWORD *)(v10 + 7);
            if ((unint64_t)v11 >= v49[0])
            {
              unint64_t v13 = v48;
              uint64_t v14 = (uint64_t)((uint64_t)v11 - v48) >> 4;
              unint64_t v15 = v14 + 1;
              if ((unint64_t)(v14 + 1) >> 60) {
                std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
              }
              long long v40 = *(_OWORD *)(v10 + 7);
              uint64_t v16 = v49[0] - v48;
              if ((uint64_t)(v49[0] - v48) >> 3 > v15) {
                unint64_t v15 = v16 >> 3;
              }
              if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v17 = v15;
              }
              uint64_t v44 = v49;
              if (v17 >> 60) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v18 = (char *)operator new(16 * v17);
              uint64_t v19 = &v18[16 * v14];
              *(_OWORD *)uint64_t v19 = v40;
              if (*((void *)&v40 + 1))
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v40 + 1) + 8), 1uLL, memory_order_relaxed);
                uint64_t v11 = (void *)*((void *)&v48 + 1);
              }
              if (v11 == (void *)v13)
              {
                int64x2_t v22 = vdupq_n_s64(v13);
                long long v20 = &v18[16 * v14];
              }
              else
              {
                long long v20 = &v18[16 * v14];
                do
                {
                  long long v21 = *((_OWORD *)v11 - 1);
                  v11 -= 2;
                  *((_OWORD *)v20 - BambiCallParticipant::setState((uint64_t)this, 10, 1) = v21;
                  v20 -= 16;
                  void *v11 = 0;
                  v11[1] = 0;
                }
                while (v11 != (void *)v13);
                int64x2_t v22 = (int64x2_t)v48;
              }
              uint64_t v11 = v19 + 16;
              *(void *)&long long v48 = v20;
              *((void *)&v48 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = v19 + 16;
              int64x2_t v42 = v22;
              int v23 = (void *)v49[0];
              v49[0] = &v18[16 * v17];
              std::string __p = v23;
              uint64_t v41 = (void *)v22.i64[0];
              std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&v41);
            }
            else
            {
              *(_OWORD *)uint64_t v11 = v12;
              if (*((void *)&v12 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              v11 += 2;
            }
            *((void *)&v48 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = v11;
            int v24 = (void *)v10[1];
            if (v24)
            {
              do
              {
                long long v25 = v24;
                int v24 = (void *)*v24;
              }
              while (v24);
            }
            else
            {
              do
              {
                long long v25 = (void *)v10[2];
                BOOL v26 = *v25 == (void)v10;
                uint64_t v10 = v25;
              }
              while (!v26);
            }
            uint64_t v10 = v25;
          }
          while (v25 != (void *)(a1 + 64));
        }
      }
      for (uint64_t i = (void *)v48; i != v11; i += 2)
      {
        uint64_t v38 = *i;
        if (!*(unsigned char *)(*i + 39))
        {
          if (*(_DWORD *)(v38 + 28) == 5
            && *(unsigned char *)(v38 + 36)
            && (!*(unsigned char *)(v38 + 37) || *(_DWORD *)(v38 + 32) != 3 && *(_DWORD *)(v38 + 64) == 3))
          {
            uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v39);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"still waiting for remote preconditions in fork ", 47);
            *(unsigned char *)(v39 + 17) = 0;
            ObfuscatedString::ObfuscatedString((uint64_t)&v41, (const std::string *)a2);
            (*(void (**)(uint64_t, void **))(*(void *)v39 + 56))(v39, &v41);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v39 + 17) = 0;
            if (v45 < 0) {
              operator delete(__p);
            }
            if (v42.i8[15] < 0) {
              operator delete(v41);
            }
          }
          else
          {
            *(unsigned char *)(v38 + 39) = 1;
            (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), v38 + 40);
          }
        }
      }
      uint64_t v41 = &v48;
      std::vector<std::shared_ptr<BambiCallAction>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
    }
    else
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"still waiting for local preconditions", 37);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
    }
  }
}

void sub_1C53DC8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, std::__shared_weak_count *a18, char a19)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  a17 = (void **)&a19;
  std::vector<std::shared_ptr<BambiCallAction>>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

BOOL SipPreconditions::wantsPreconditionsRequiredHeader(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 56, a2);
  if ((void **)(a1 + 64) == v5)
  {
    uint64_t v7 = 0;
LABEL_11:
    uint64_t v10 = (int *)(a1 + 84);
LABEL_12:
    int v9 = *v10;
    goto LABEL_13;
  }
  uint64_t v6 = v5[7];
  uint64_t v7 = (std::__shared_weak_count *)v5[8];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6) {
    goto LABEL_11;
  }
  int v8 = v6[7];
  if (v8 == 5)
  {
    if (*((unsigned char *)v6 + 36))
    {
      int v9 = v6[17];
      if (v6[16] != 3 || !*(unsigned char *)(a1 + 48)) {
        goto LABEL_13;
      }
LABEL_32:
      BOOL v14 = 1;
      goto LABEL_54;
    }
    uint64_t v10 = v6 + 17;
    goto LABEL_12;
  }
  if (v8 == 4) {
    goto LABEL_32;
  }
  int v9 = v6[17];
LABEL_13:
  if (!*(unsigned char *)(a1 + 35) || (uint64_t v11 = SipMessage::body<SipSdpBody>(a3)) == 0)
  {
    BOOL v14 = 0;
    goto LABEL_54;
  }
  uint64_t v12 = *((void *)v11 + 1);
  unint64_t v13 = (std::__shared_weak_count *)*((void *)v11 + 2);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v14 = 0;
  if (!v12 || v9 != 3) {
    goto LABEL_52;
  }
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_49;
  }
  unint64_t v15 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
  uint64_t v16 = v15[23];
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = v15[23];
  }
  else {
    uint64_t v17 = *((void *)v15 + 1);
  }
  if (v17 == 6)
  {
    if ((v16 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v15, "UPDATE", *((void *)v15 + 1))) {
        goto LABEL_50;
      }
    }
    else
    {
      if (!v15[23]) {
        goto LABEL_50;
      }
      uint64_t v18 = "UPDATE";
      BOOL v14 = 1;
      while (*v15 == *(unsigned __int8 *)v18)
      {
        ++v15;
        ++v18;
        if (!--v16) {
          goto LABEL_52;
        }
      }
    }
  }
  uint64_t v19 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
  uint64_t v20 = v19[23];
  uint64_t v21 = (v20 & 0x80u) == 0 ? v19[23] : *((void *)v19 + 1);
  if (v21 != 5)
  {
LABEL_49:
    BOOL v14 = 0;
    goto LABEL_52;
  }
  if ((v20 & 0x80) != 0)
  {
    BOOL v14 = memcmp(*(const void **)v19, "PRACK", *((void *)v19 + 1)) == 0;
    goto LABEL_52;
  }
  if (!v19[23])
  {
LABEL_50:
    BOOL v14 = 1;
    goto LABEL_52;
  }
  uint64_t v22 = v20 - 1;
  int v23 = "PRACK";
  do
  {
    int v25 = *v19++;
    int v24 = v25;
    int v27 = *(unsigned __int8 *)v23++;
    int v26 = v27;
    BOOL v29 = v22-- != 0;
    BOOL v14 = v24 == v26;
  }
  while (v24 == v26 && v29);
LABEL_52:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
LABEL_54:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v14;
}

void sub_1C53DCB6C(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipPreconditions::addPreconditionsToOutgoingRequest(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (v8)
  {
    SipPreconditions::forkStatusWithTag((long long *)a1, (std::string *)a2, 1, (uint64_t *)__p);
    uint64_t v10 = (SipPreconditions::ForkStatus *)__p[0];
    int v9 = (atomic_ullong *)__p[1];
    if (__p[0] && (*((_DWORD *)__p[0] + 7) != 5 || !*((unsigned char *)__p[0] + 36)))
    {
      a3 = 1;
      goto LABEL_21;
    }
  }
  else
  {
    int v9 = 0;
    uint64_t v10 = 0;
  }
  if (!a3)
  {
LABEL_21:
    if (!v9) {
      return a3;
    }
    goto LABEL_36;
  }
  if (!*(unsigned char *)(a1 + 32))
  {
    if (!a4)
    {
      if (SipPreconditions::wantsPreconditionsRequiredHeader(a1, (void **)a2, a3))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "precondition");
        SipMessage::addRequiredOption((SipMessage *)a3, __p);
        goto LABEL_30;
      }
      if (*(_DWORD *)(a1 + 88) == 1) {
        goto LABEL_32;
      }
    }
    goto LABEL_29;
  }
  uint64_t v11 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
  uint64_t v12 = v11[23];
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = v11[23];
  }
  else {
    uint64_t v13 = *((void *)v11 + 1);
  }
  if (v13 != 6) {
    goto LABEL_32;
  }
  if ((v12 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v11, "INVITE", *((void *)v11 + 1))) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
  if (!v11[23])
  {
LABEL_29:
    std::string::basic_string[abi:ne180100]<0>(__p, "precondition");
    SipMessage::addSupportedOption((SipMessage *)a3, __p);
LABEL_30:
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_32;
  }
  BOOL v14 = "INVITE";
  while (*v11 == *(unsigned __int8 *)v14)
  {
    ++v11;
    ++v14;
    if (!--v12) {
      goto LABEL_29;
    }
  }
LABEL_32:
  v16[0] = v10;
  v16[1] = (SipPreconditions::ForkStatus *)v9;
  if (v9) {
    atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
  }
  a3 = SipPreconditions::addPreconditionsToOutgoingMessage(a1, v16, a3);
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
LABEL_36:
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
  }
  return a3;
}

void sub_1C53DCDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipPreconditions::addPreconditionsToOutgoingMessage(uint64_t a1, SipPreconditions::ForkStatus **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  if (*a2 && (*((_DWORD *)v6 + 7) != 5 || !*((unsigned char *)v6 + 36))
    || *(_DWORD *)(a1 + 80) == 1
    || *(_DWORD *)(a1 + 88) == 1)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"need to add preconditions, but preconditions are disabled", 57);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    return 1;
  }
  uint64_t v10 = SipMessage::body<SipSdpBody>(a3);
  if (v10)
  {
    uint64_t v12 = *((void *)v10 + 1);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 2);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v12)
    {
      uint64_t v13 = *(SDPMedia **)(v12 + 416);
      BOOL v14 = *(SDPMedia **)(v12 + 424);
      while (v13 != v14)
      {
        SDPMedia::removePreconditions(v13);
        uint64_t v13 = (SDPMedia *)((char *)v13 + 200);
      }
      unint64_t v15 = *a2;
      if (*a2)
      {
        if (*((_DWORD *)v15 + 7) == 5
          && *((unsigned char *)v15 + 36)
          && !(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), (uint64_t)v15 + 40))
        {
          int v16 = 0;
        }
        else
        {
          int v16 = 3;
        }
        if (*a2)
        {
          uint64_t v17 = (int *)((char *)*a2 + 68);
LABEL_27:
          SDPModel::setPrecondition(v12, 1, *v17, 3, v16, 0);
          int v19 = *(_DWORD *)(a1 + 28);
          uint64_t v20 = *a2;
          if (*a2)
          {
            int v21 = *((_DWORD *)v20 + 8);
            if (*(unsigned char *)(a1 + 33)) {
              int v19 = *((_DWORD *)v20 + 16);
            }
          }
          else
          {
            int v21 = 0;
          }
          SDPModel::setPrecondition(v12, 2, v19, 3, v21, *(unsigned char *)(a1 + 93) == 0);
          uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"added preconditions to outgoing ", 32);
          *(unsigned char *)(v22 + 17) = 0;
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a3 + 48))(&v23, a3);
          LoggableString::LoggableString(&__p, &v23);
          (*(void (**)(uint64_t, std::string *))(*(void *)v22 + 40))(v22, &__p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v22 + 17) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v23.__r_.__value_.__l.__data_);
          }
          goto LABEL_35;
        }
      }
      else
      {
        int v16 = 0;
      }
      uint64_t v17 = (int *)(a1 + 84);
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (*(_DWORD *)(a1 + 84) != 3)
  {
LABEL_35:
    if (*a2) {
      SipPreconditions::ForkStatus::setNeedToSendUpdate(*a2, 0);
    }
    uint64_t v8 = 1;
    goto LABEL_38;
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"need to add preconditions, but there's no SDP", 45);
  *(unsigned char *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  uint64_t v8 = 0;
  *(unsigned char *)(v18 + 17) = 0;
LABEL_38:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v8;
}

void sub_1C53DD274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipPreconditions::addPreconditionsToOutgoingResponse(uint64_t a1, uint64_t a2, uint64_t a3, SipMessage *a4)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (!v5)
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"addPreconditionsToOutgoingResponse called with empty remote tag", 63);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v14 = 0;
    *(unsigned char *)(v13 + 17) = 0;
    return v14;
  }
  uint64_t v26 = 0;
  int v27 = 0;
  SipPreconditions::forkStatusWithTag((long long *)a1, (std::string *)a2, 0, &v26);
  if (v26)
  {
    if (*(_DWORD *)(v26 + 28) == 5 && *(unsigned char *)(v26 + 36))
    {
      if (!*(unsigned char *)(a1 + 32))
      {
        if (*(_DWORD *)(v26 + 68) != 3)
        {
          uint64_t v17 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
          uint64_t v18 = v17[23];
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = v17[23];
          }
          else {
            uint64_t v19 = *((void *)v17 + 1);
          }
          if (v19 != 6) {
            goto LABEL_40;
          }
          if ((v18 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v17, "INVITE", *((void *)v17 + 1))) {
              goto LABEL_40;
            }
          }
          else if (v17[23])
          {
            uint64_t v20 = "INVITE";
            while (*v17 == *(unsigned __int8 *)v20)
            {
              ++v17;
              ++v20;
              if (!--v18) {
                goto LABEL_39;
              }
            }
            goto LABEL_40;
          }
LABEL_39:
          if (!SipPreconditions::wantsPreconditionsRequiredHeader(a1, (void **)a2, a3)) {
            goto LABEL_40;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "precondition");
        SipMessage::addRequiredOption(a4, __p);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_40;
      }
      int v9 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
      uint64_t v10 = v9[23];
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = v9[23];
      }
      else {
        uint64_t v11 = *((void *)v9 + 1);
      }
      if (v11 == 6)
      {
        if ((v10 & 0x80) == 0)
        {
          if (v9[23])
          {
            uint64_t v12 = "INVITE";
            while (*v9 == *(unsigned __int8 *)v12)
            {
              ++v9;
              ++v12;
              if (!--v10) {
                goto LABEL_35;
              }
            }
            goto LABEL_43;
          }
LABEL_35:
          if (SipPreconditions::wantsPreconditionsRequiredHeader(a1, (void **)a2, a3))
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "precondition");
            SipMessage::addRequiredOption(a4, __p);
            goto LABEL_41;
          }
LABEL_40:
          std::string::basic_string[abi:ne180100]<0>(__p, "precondition");
          SipMessage::addSupportedOption(a4, __p);
LABEL_41:
          if (v25 < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_43;
        }
        if (!memcmp(*(const void **)v9, "INVITE", *((void *)v9 + 1))) {
          goto LABEL_35;
        }
      }
LABEL_43:
      int v21 = v27;
      v23[0] = (SipPreconditions::ForkStatus *)v26;
      v23[1] = (SipPreconditions::ForkStatus *)v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = SipPreconditions::addPreconditionsToOutgoingMessage(a1, v23, (uint64_t)a4);
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      goto LABEL_47;
    }
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"addPreconditionsToOutgoingResponse called when preconditions are disabled", 73);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"addPreconditionsToOutgoingResponse called with invalid remote tag ", 66);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 32))(v16, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v14 = 0;
    *(unsigned char *)(v16 + 17) = 0;
  }
LABEL_47:
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  return v14;
}

void sub_1C53DD7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipPreconditions::localPreconditionsSatisfied(uint64_t a1, void **a2)
{
  if (!*(void *)(a1 + 16)) {
    return 1;
  }
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 56, a2);
  if ((void **)(a1 + 64) == v4) {
    return 1;
  }
  uint64_t v5 = v4[7];
  uint64_t v6 = (std::__shared_weak_count *)v4[8];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5 && v5[17] == 3 && v5[7] == 5 && *((unsigned char *)v5 + 36)) {
    uint64_t v7 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2);
  }
  else {
    uint64_t v7 = 1;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v7;
}

void sub_1C53DD904(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipPreconditions::handleLocalQoSEstablished(void *a1, void **a2)
{
  uint64_t v3 = a1[2];
  if (v3 && ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3) & 1) == 0)
  {
    if (SipPreconditions::localPreconditionsSatisfied((uint64_t)a1, a2))
    {
      uint64_t v5 = (void *)a1[7];
      if (v5 != a1 + 8)
      {
        do
        {
          uint64_t v6 = (SipPreconditions::ForkStatus *)v5[7];
          uint64_t v7 = (std::__shared_weak_count *)v5[8];
          if (v7) {
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (*((unsigned char *)v6 + 24)) {
            SipPreconditions::ForkStatus::setNeedToSendUpdate(v6, 1);
          }
          if (v7) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v7);
          }
          uint64_t v8 = (void *)v5[1];
          if (v8)
          {
            do
            {
              int v9 = v8;
              uint64_t v8 = (void *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              int v9 = (void *)v5[2];
              BOOL v10 = *v9 == (void)v5;
              uint64_t v5 = v9;
            }
            while (!v10);
          }
          uint64_t v5 = v9;
        }
        while (v9 != a1 + 8);
      }
      uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
      (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"local preconditions have been satisfied", 39);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(void, void **))(*(void *)a1[2] + 16))(a1[2], a2);
    }
    else
    {
      if (SipPreconditions::localPreconditionsSatisfied((uint64_t)a1, a2)) {
        return;
      }
      uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
      (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"local preconditions have been satisfied", 39);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(void, void **))(*(void *)a1[2] + 16))(a1[2], a2);
      uint64_t v13 = (void *)a1[7];
      if (v13 != a1 + 8)
      {
        do
        {
          uint64_t v14 = (SipPreconditions::ForkStatus *)v13[7];
          uint64_t v15 = (std::__shared_weak_count *)v13[8];
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          SipPreconditions::ForkStatus::setNeedToSendUpdate(v14, 1);
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          uint64_t v16 = (void *)v13[1];
          if (v16)
          {
            do
            {
              uint64_t v17 = v16;
              uint64_t v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              uint64_t v17 = (void *)v13[2];
              BOOL v10 = *v17 == (void)v13;
              uint64_t v13 = v17;
            }
            while (!v10);
          }
          uint64_t v13 = v17;
        }
        while (v17 != a1 + 8);
      }
    }
    SipPreconditions::checkPreconditionStatus((uint64_t)a1, (uint64_t)a2);
  }
}

void sub_1C53DDC68(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipPreconditions::needToSendUpdateInFork(uint64_t a1, void **a2)
{
  if (!SipPreconditions::preconditionsEnabled(a1, a2))
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"needToSendUpdateInFork: preconditions aren't enabled", 52);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    BOOL v7 = 0;
    *(unsigned char *)(v8 + 17) = 0;
    return v7;
  }
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 56, a2);
  if ((void **)(a1 + 64) == v4)
  {
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  uint64_t v5 = v4[7];
  uint64_t v6 = (std::__shared_weak_count *)v4[8];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5)
  {
LABEL_14:
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"needToSendUpdateInFork: no remote status", 40);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    BOOL v7 = 0;
    *(unsigned char *)(v9 + 17) = 0;
    if (!v6) {
      return v7;
    }
    goto LABEL_17;
  }
  if (*((_DWORD *)v5 + 7) == 5 && *((unsigned char *)v5 + 36) && *((unsigned char *)v5 + 38))
  {
    if (*((unsigned char *)v5 + 24))
    {
      BOOL v7 = 1;
      if (!v6) {
        return v7;
      }
    }
    else
    {
      BOOL v7 = *(unsigned __int8 *)(v5[2] + 34) == 0;
      if (!v6) {
        return v7;
      }
    }
    goto LABEL_17;
  }
  BOOL v7 = 0;
  if (v6) {
LABEL_17:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v7;
}

void sub_1C53DDEB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipPreconditions::setNeedToSendUpdateInFork(long long *a1, std::string *a2, int a3)
{
  SipPreconditions::forkStatusWithTag(a1, a2, 1, (uint64_t *)&v4);
  SipPreconditions::ForkStatus::setNeedToSendUpdate(v4, a3);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C53DDF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipPreconditions::printInfo(SipPreconditions *this, ImsOutStream *a2)
{
  uint64_t v3 = (void *)*((void *)this + 7);
  uint64_t v4 = (char *)this + 64;
  if (v3 != (void *)((char *)this + 64))
  {
    do
    {
      uint64_t v19 = 0;
      memset(v18, 0, sizeof(v18));
      if (*((char *)v3 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v18, (const std::string::value_type *)v3[4], v3[5]);
      }
      else
      {
        *(_OWORD *)uint64_t v18 = *((_OWORD *)v3 + 2);
        *(void *)&v18[16] = v3[6];
      }
      uint64_t v6 = v3[7];
      uint64_t v5 = (std::__shared_weak_count *)v3[8];
      *(void *)&v18[24] = v6;
      uint64_t v19 = v5;
      if (v5)
      {
        char v7 = 1;
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v6 = *(void *)&v18[24];
        uint64_t v8 = v19;
        if (v19)
        {
          char v7 = 0;
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v6) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v8 = 0;
        char v7 = 1;
        if (!v6) {
          goto LABEL_25;
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Fork ", 5);
      *((unsigned char *)a2 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v14, (const std::string *)(v6 + 40));
      (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 56))(a2, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
      *((unsigned char *)a2 + 17) = 0;
      if (v17 < 0) {
        operator delete(__p);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      if (*(_DWORD *)(v6 + 28) == 5 && *(unsigned char *)(v6 + 36))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"local ", 6);
        *((unsigned char *)a2 + 17) = 0;
        (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 32))(a2, v14);
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        if (!*(_DWORD *)(v6 + 32)) {
          goto LABEL_25;
        }
        uint64_t v9 = (void *)*((void *)a2 + 1);
        if (*(unsigned char *)(v6 + 37))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"remote ", 7);
          *((unsigned char *)a2 + 17) = 0;
          (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 32))(a2, v14);
          if (v15 < 0) {
            operator delete(v14[0]);
          }
          goto LABEL_25;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(no remote sdp)", 15);
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"none", 4);
      }
      *((unsigned char *)a2 + 17) = 0;
LABEL_25:
      if ((v7 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if ((v18[23] & 0x80000000) != 0) {
        operator delete(*(void **)v18);
      }
      BOOL v10 = (char *)v3[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          BOOL v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (char *)v3[2];
          BOOL v12 = *(void *)v11 == (void)v3;
          uint64_t v3 = v11;
        }
        while (!v12);
      }
      uint64_t v3 = v11;
    }
    while (v11 != v4);
  }
  uint64_t result = (*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void sub_1C53DE264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((v18 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::pair<std::string const,std::shared_ptr<MessageSession>>::~pair((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL SipPreconditions::remotePreconditionsSatisfiedInFork(void **a1, void **a2)
{
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 7), a2);
  if (a1 + 8 == v4)
  {
    uint64_t v6 = 0;
LABEL_11:
    uint64_t v8 = (*((uint64_t (**)(void **))*a1 + 7))(a1);
    (*((void (**)(void **, uint64_t))*a1 + 2))(a1, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"unknown remote tag ", 19);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    BOOL v7 = 0;
    *(unsigned char *)(v8 + 17) = 0;
    goto LABEL_12;
  }
  uint64_t v5 = v4[7];
  uint64_t v6 = (std::__shared_weak_count *)v4[8];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5) {
    goto LABEL_11;
  }
  if (v5[7] != 5 || !*((unsigned char *)v5 + 36)) {
    goto LABEL_9;
  }
  if (*((unsigned char *)v5 + 37))
  {
    if (v5[8] == 3)
    {
LABEL_9:
      BOOL v7 = 1;
      goto LABEL_12;
    }
    BOOL v7 = v5[16] != 3;
  }
  else
  {
    BOOL v7 = 0;
  }
LABEL_12:
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v7;
}

void sub_1C53DE44C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipPreconditions::preconditionsSatisfiedInFork(void **a1, void **a2)
{
  if (!SipPreconditions::preconditionsEnabled((uint64_t)a1, a2)) {
    return 1;
  }
  uint64_t result = SipPreconditions::localPreconditionsSatisfied((uint64_t)a1, a2);
  if (result)
  {
    return SipPreconditions::remotePreconditionsSatisfiedInFork(a1, a2);
  }
  return result;
}

uint64_t SipPreconditions::preconditionsSatisfiedInAnyFork(SipPreconditions *this)
{
  uint64_t v1 = (SipPreconditions *)*((void *)this + 7);
  if (v1 == (SipPreconditions *)((char *)this + 64)) {
    return 0;
  }
  while (1)
  {
    uint64_t v2 = *((void *)v1 + 7);
    if (v2)
    {
      if (*(_DWORD *)(v2 + 28) != 5
        || !*(unsigned char *)(v2 + 36)
        || *(unsigned char *)(v2 + 37) && (*(_DWORD *)(v2 + 32) == 3 || *(_DWORD *)(v2 + 64) != 3))
      {
        break;
      }
    }
    uint64_t v3 = (SipPreconditions *)*((void *)v1 + 1);
    if (v3)
    {
      do
      {
        uint64_t v4 = v3;
        uint64_t v3 = *(SipPreconditions **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        uint64_t v4 = (SipPreconditions *)*((void *)v1 + 2);
        BOOL v5 = *(void *)v4 == (void)v1;
        uint64_t v1 = v4;
      }
      while (!v5);
    }
    uint64_t v1 = v4;
    if (v4 == (SipPreconditions *)((char *)this + 64)) {
      return 0;
    }
  }
  return SipPreconditions::localPreconditionsSatisfied((uint64_t)this, (void **)v1 + 4);
}

BOOL SipPreconditions::preconditionsActiveInFork(void **a1, void **a2)
{
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 7), a2);
  if (a1 + 8 == v4)
  {
    uint64_t v6 = 0;
  }
  else
  {
    BOOL v5 = v4[7];
    uint64_t v6 = (std::__shared_weak_count *)v4[8];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v5)
    {
      if (v5[7] == 5)
      {
        BOOL v7 = *((unsigned __int8 *)v5 + 36) != 0;
        if (!v6) {
          return v7;
        }
      }
      else
      {
        BOOL v7 = 0;
        if (!v6) {
          return v7;
        }
      }
      goto LABEL_10;
    }
  }
  uint64_t v8 = (*((uint64_t (**)(void **))*a1 + 7))(a1);
  (*((void (**)(void **, uint64_t))*a1 + 2))(a1, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"unknown remote tag ", 19);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  BOOL v7 = 0;
  *(unsigned char *)(v8 + 17) = 0;
  if (v6) {
LABEL_10:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v7;
}

void sub_1C53DE6D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipPreconditions::preconditionsActiveInAnyFork(SipPreconditions *this)
{
  uint64_t v1 = (SipPreconditions *)*((void *)this + 7);
  if (v1 == (SipPreconditions *)((char *)this + 64)) {
    return 0;
  }
  while (1)
  {
    uint64_t v2 = *((void *)v1 + 7);
    if (*(_DWORD *)(v2 + 28) == 5)
    {
      if (*(unsigned char *)(v2 + 36)) {
        break;
      }
    }
    uint64_t v3 = (SipPreconditions *)*((void *)v1 + 1);
    if (v3)
    {
      do
      {
        uint64_t v4 = v3;
        uint64_t v3 = *(SipPreconditions **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        uint64_t v4 = (SipPreconditions *)*((void *)v1 + 2);
        BOOL v5 = *(void *)v4 == (void)v1;
        uint64_t v1 = v4;
      }
      while (!v5);
    }
    uint64_t v1 = v4;
    if (v4 == (SipPreconditions *)((char *)this + 64)) {
      return 0;
    }
  }
  return 1;
}

void SipPreconditions::setRemotePreconditionsSatisfiedInFork(long long *a1, std::string *a2, int a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  SipPreconditions::forkStatusWithTag(a1, a2, 0, &v7);
  if (v7)
  {
    if (SipPreconditions::ForkStatus::setSatisfied(v7, 0, 3, a3))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      SipPreconditions::checkPreconditionStatus((uint64_t)a1, (uint64_t)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C53DE7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipPreconditions::supportLevelFromString(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v30, "Required");
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v2 = (const char *)a1;
  }
  else {
    uint64_t v2 = *(const char **)a1;
  }
  int v3 = v31;
  uint64_t v4 = v30[0];
  if (v31 >= 0) {
    BOOL v5 = v30;
  }
  else {
    BOOL v5 = (void **)v30[0];
  }
  int v6 = strcasecmp(v2, (const char *)v5);
  int v7 = v6;
  if ((v3 & 0x80000000) == 0)
  {
    if (v6) {
      goto LABEL_9;
    }
    return 4;
  }
  operator delete(v4);
  if (!v7) {
    return 4;
  }
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(v30, "SupportedOptional");
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v8 = (const char *)a1;
  }
  else {
    uint64_t v8 = *(const char **)a1;
  }
  int v9 = v31;
  BOOL v10 = v30[0];
  if (v31 >= 0) {
    uint64_t v11 = v30;
  }
  else {
    uint64_t v11 = (void **)v30[0];
  }
  int v12 = strcasecmp(v8, (const char *)v11);
  int v13 = v12;
  if ((v9 & 0x80000000) == 0)
  {
    if (v12) {
      goto LABEL_17;
    }
    return 2;
  }
  operator delete(v10);
  if (!v13) {
    return 2;
  }
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(v30, "SupportedMandatory");
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v14 = (const char *)a1;
  }
  else {
    uint64_t v14 = *(const char **)a1;
  }
  char v15 = v31;
  if (v31 >= 0) {
    uint64_t v16 = v30;
  }
  else {
    uint64_t v16 = (void **)v30[0];
  }
  if (strcasecmp(v14, (const char *)v16))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "SupportedButMandatory");
    if (*(char *)(a1 + 23) >= 0) {
      char v17 = (const char *)a1;
    }
    else {
      char v17 = *(const char **)a1;
    }
    char v18 = v29;
    if (v29 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      uint64_t v19 = (void **)__p[0];
    }
    if (!strcasecmp(v17, (const char *)v19))
    {
      BOOL v24 = 1;
      if (v18 < 0) {
LABEL_40:
      }
        operator delete(__p[0]);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v26, "Supported");
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v20 = (const char *)a1;
      }
      else {
        uint64_t v20 = *(const char **)a1;
      }
      int v21 = v27;
      uint64_t v22 = (void *)v26[0];
      if (v27 >= 0) {
        std::string v23 = (const char *)v26;
      }
      else {
        std::string v23 = (const char *)v26[0];
      }
      BOOL v24 = strcasecmp(v20, v23) == 0;
      if (v21 < 0) {
        operator delete(v22);
      }
      if (v29 < 0) {
        goto LABEL_40;
      }
    }
    if ((v31 & 0x80) == 0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  BOOL v24 = 1;
  if (v15 < 0) {
LABEL_42:
  }
    operator delete(v30[0]);
LABEL_43:
  if (v24) {
    return 3;
  }
  else {
    return 1;
  }
}

void sub_1C53DEA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipPreconditions::strengthFromString(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *((unsigned __int8 *)a1 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a1 + 1);
  }
  if (v2 == 4)
  {
    if (v3 >= 0) {
      int v7 = a1;
    }
    else {
      int v7 = *(unsigned int **)a1;
    }
    unsigned int v8 = bswap32(*v7);
    BOOL v9 = v8 >= 0x6E6F6E65;
    int v10 = v8 > 0x6E6F6E65;
    int v11 = !v9;
    if (v10 == v11) {
      return 1;
    }
    else {
      return a2;
    }
  }
  else
  {
    if (v2 == 8)
    {
      if (v3 >= 0) {
        int v12 = a1;
      }
      else {
        int v12 = *(unsigned int **)a1;
      }
      BOOL v5 = *(void *)v12 == 0x6C616E6F6974706FLL;
      unsigned int v6 = 2;
    }
    else
    {
      if (v2 != 9) {
        return a2;
      }
      if (v3 >= 0) {
        uint64_t v4 = a1;
      }
      else {
        uint64_t v4 = *(unsigned int **)a1;
      }
      BOOL v5 = (*(void *)v4 ^ 0x726F7461646E616DLL | *((unsigned __int8 *)v4 + 8) ^ 0x79) == 0;
      unsigned int v6 = 3;
    }
    if (v5) {
      return v6;
    }
    else {
      return a2;
    }
  }
}

void SipPreconditions::ForkStatus::~ForkStatus(void **this)
{
  *this = &unk_1F20C9D00;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C9D00;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  JUMPOUT(0x1C878E320);
}

void *std::allocate_shared[abi:ne180100]<SipPreconditions::ForkStatus,std::allocator<SipPreconditions::ForkStatus>,SipPreconditions*,std::string const&,void>@<X0>(uint64_t *a1@<X1>, std::string *a2@<X2>, void *a3@<X8>)
{
  unsigned int v6 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<SipPreconditions::ForkStatus>::__shared_ptr_emplace[abi:ne180100]<SipPreconditions*,std::string const&,std::allocator<SipPreconditions::ForkStatus>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1C53DEC1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SipPreconditions::ForkStatus>::__shared_ptr_emplace[abi:ne180100]<SipPreconditions*,std::string const&,std::allocator<SipPreconditions::ForkStatus>,0>(void *a1, uint64_t *a2, std::string *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20C9E10;
  SipPreconditions::ForkStatus::ForkStatus((uint64_t)(a1 + 3), *a2, a3);
  return a1;
}

void sub_1C53DEC7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipPreconditions::ForkStatus>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C9E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipPreconditions::ForkStatus>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C9E10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipPreconditions::ForkStatus>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  unsigned int v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    unsigned int v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unsigned int v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  int v7 = (std::string *)(v6 + 4);
  unsigned int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C53DEE68(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t BambiUnlistedEmergencyCall::BambiUnlistedEmergencyCall(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F20B2FA8;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = *a2;
  uint64_t v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v8 = *a3;
  long long v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiCall::BambiCall(a1, (uint64_t *)off_1F20C9FA0, &v10, &v8, a4);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  *(void *)a1 = &unk_1F20C9E80;
  *(void *)(a1 + 80) = &unk_1F20C9F20;
  *(void *)(a1 + 1824) = &unk_1F20C9F80;
  *(unsigned char *)(a1 + 1832) = 0;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(void *)(a1 + 1872) = 0x40A7700000000000;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1972) = 0u;
  return a1;
}

void sub_1C53DF024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void BambiUnlistedEmergencyCall::~BambiUnlistedEmergencyCall(BambiUnlistedEmergencyCall *this)
{
  *(void *)this = &unk_1F20C9E80;
  *((void *)this + 10) = &unk_1F20C9F20;
  *((void *)this + 228) = &unk_1F20C9F80;
  BambiUnlistedEmergencyCall::clearLocation(this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 250);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 1983) < 0) {
    operator delete(*((void **)this + 245));
  }
  if (*((char *)this + 1959) < 0) {
    operator delete(*((void **)this + 242));
  }
  if (*((char *)this + 1935) < 0) {
    operator delete(*((void **)this + 239));
  }
  if (*((char *)this + 1911) < 0) {
    operator delete(*((void **)this + 236));
  }
  BambiCall::~BambiCall(this, (uint64_t *)off_1F20C9FA0);
}

{
  uint64_t vars8;

  BambiUnlistedEmergencyCall::~BambiUnlistedEmergencyCall(this);
  JUMPOUT(0x1C878E320);
}

void BambiUnlistedEmergencyCall::clearLocation(BambiUnlistedEmergencyCall *this)
{
  uint64_t v2 = (void *)((char *)this + 1992);
  uint64_t v3 = *((void *)this + 249);
  if (v3) {
    *(void *)(v3 + 104) = 0;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 250);
  *uint64_t v2 = 0;
  v2[1] = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *((_OWORD *)this + 116) = 0u;
  *((_OWORD *)this + 115) = 0u;
  *((_OWORD *)this + 117) = xmmword_1C56D18C0;
  uint64_t v5 = (void **)((char *)this + 1888);
  if (*((char *)this + 1911) < 0) {
    operator delete(*v5);
  }
  unsigned int v6 = (void **)((char *)this + 1912);
  std::__shared_weak_count *v5 = 0;
  *((void *)this + 237) = 0;
  *((void *)this + 238) = 0;
  if (*((char *)this + 1935) < 0) {
    operator delete(*v6);
  }
  int v7 = (void **)((char *)this + 1936);
  *unsigned int v6 = 0;
  *((void *)this + 240) = 0;
  *((void *)this + 24BambiCallParticipant::setState((uint64_t)this, 10, 1) = 0;
  if (*((char *)this + 1959) < 0) {
    operator delete(*v7);
  }
  uint64_t v8 = (void **)((char *)this + 1960);
  std::string *v7 = 0;
  *((void *)this + 243) = 0;
  *((void *)this + 244) = 0;
  if (*((char *)this + 1983) < 0) {
    operator delete(*v8);
  }
  *uint64_t v8 = 0;
  *((void *)this + 246) = 0;
  *((void *)this + 247) = 0;
}

void non-virtual thunk to'BambiUnlistedEmergencyCall::~BambiUnlistedEmergencyCall(BambiUnlistedEmergencyCall *this)
{
}

{
  BambiUnlistedEmergencyCall::~BambiUnlistedEmergencyCall((BambiUnlistedEmergencyCall *)((char *)this - 1824));
}

{
  uint64_t vars8;

  BambiUnlistedEmergencyCall::~BambiUnlistedEmergencyCall((BambiUnlistedEmergencyCall *)((char *)this - 80));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiUnlistedEmergencyCall::~BambiUnlistedEmergencyCall((BambiUnlistedEmergencyCall *)((char *)this - 1824));
  JUMPOUT(0x1C878E320);
}

void BambiUnlistedEmergencyCall::handleLocationUpdate(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 80;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleLocationUpdate(", 21);
  *(unsigned char *)(v5 + 17) = 0;
  if (*((double *)a2 + 5) > 0.0) {
    unsigned int v6 = "true";
  }
  else {
    unsigned int v6 = "false";
  }
  std::string::basic_string[abi:ne180100]<0>(v55, v6);
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, v55);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  int v7 = *(_DWORD *)(a1 + 1984);
  if (*((double *)a2 + 5) <= 0.0)
  {
    if (v7 == 4)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"We don't have a location to send in UPDATE", 42);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
      return;
    }
    if (v7 != 1) {
      return;
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(v4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(v4, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Initial location not available ", 31);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    memset(v18, 0, sizeof(v18));
    uint64_t v19 = 0x40A7700000000000;
    *(_OWORD *)uint64_t v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)uint64_t v22 = 0u;
    *(_OWORD *)std::string v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)std::string __p = 0u;
    uint64_t v26 = 0;
    BambiCall::setEmergencyLocationInfo(a1, (const std::string *)v18);
    if (SHIBYTE(v26) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(v23[1]);
    }
    if (SHIBYTE(v23[0]) < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[1]);
    }
    *(_DWORD *)(a1 + 1984) = 3;
    goto LABEL_29;
  }
  switch(v7)
  {
    case 4:
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(v4, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Update location available ", 26);
      *(unsigned char *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)", ", 2);
      *(unsigned char *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      ims::LocationInfo::LocationInfo((ims::LocationInfo *)v27, (const ims::LocationInfo *)a2);
      BambiCall::sendEmergencyLocationUpdate(a1, (const ims::LocationInfo *)v27, (ImsResult *)v36);
      ImsResult::~ImsResult((ImsResult *)v36);
      if (v35 < 0) {
        operator delete(v34);
      }
      if (v33 < 0) {
        operator delete(v32);
      }
      if (v31 < 0) {
        operator delete(v30);
      }
      if (v29 < 0)
      {
        uint64_t v14 = v28;
LABEL_48:
        operator delete(v14);
      }
      break;
    case 2:
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(v4, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Updated initial location available ", 35);
      *(unsigned char *)(v15 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v15 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)", ", 2);
      *(unsigned char *)(v15 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v15 + 17) = 0;
      long long v16 = *a2;
      long long v17 = a2[1];
      *(_OWORD *)(a1 + 1872) = a2[2];
      *(_OWORD *)(a1 + 1856) = v17;
      *(_OWORD *)(a1 + 1840) = v16;
      std::string::operator=((std::string *)(a1 + 1888), (const std::string *)a2 + 2);
      std::string::operator=((std::string *)(a1 + 1912), (const std::string *)a2 + 3);
      std::string::operator=((std::string *)(a1 + 1936), (const std::string *)a2 + 4);
      std::string::operator=((std::string *)(a1 + 1960), (const std::string *)a2 + 5);
      ims::LocationInfo::LocationInfo((ims::LocationInfo *)v37, (const ims::LocationInfo *)(a1 + 1840));
      BambiCall::setEmergencyLocationInfo(a1, v37);
      if (v45 < 0) {
        operator delete(v44);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      if (v41 < 0) {
        operator delete(v40);
      }
      if (v39 < 0)
      {
        uint64_t v14 = v38;
        goto LABEL_48;
      }
      break;
    case 1:
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(v4, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Initial location available ", 27);
      *(unsigned char *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v8 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)", ", 2);
      *(unsigned char *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      *(_DWORD *)(a1 + 1984) = 2;
      long long v9 = *a2;
      long long v10 = a2[1];
      *(_OWORD *)(a1 + 1872) = a2[2];
      *(_OWORD *)(a1 + 1856) = v10;
      *(_OWORD *)(a1 + 1840) = v9;
      std::string::operator=((std::string *)(a1 + 1888), (const std::string *)a2 + 2);
      std::string::operator=((std::string *)(a1 + 1912), (const std::string *)a2 + 3);
      std::string::operator=((std::string *)(a1 + 1936), (const std::string *)a2 + 4);
      std::string::operator=((std::string *)(a1 + 1960), (const std::string *)a2 + 5);
      ims::LocationInfo::LocationInfo((ims::LocationInfo *)v46, (const ims::LocationInfo *)(a1 + 1840));
      BambiCall::setEmergencyLocationInfo(a1, v46);
      if (v54 < 0) {
        operator delete(v53);
      }
      if (v52 < 0) {
        operator delete(v51);
      }
      if (v50 < 0) {
        operator delete(v49);
      }
      if (v48 < 0) {
        operator delete(v47);
      }
LABEL_29:
      if (*(unsigned char *)(a1 + 1832)) {
        (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
      }
      return;
    default:
      return;
  }
}

void sub_1C53DFAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
}

void non-virtual thunk to'BambiUnlistedEmergencyCall::handleLocationUpdate(uint64_t a1, long long *a2)
{
}

void BambiUnlistedEmergencyCall::prepareCall(BambiUnlistedEmergencyCall *this)
{
  *((unsigned char *)this + 1832) = 0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (!v2 || (uint64_t v3 = std::__shared_weak_count::lock(v2)) == 0)
  {
    *((unsigned char *)this + 1832) = 1;
    return;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)this + 45);
  if (v5)
  {
    int v6 = *((_DWORD *)this + 496);
    if ((v6 & 0xFFFFFFFE) == 2)
    {
      int v7 = (ImsPrefs *)SipStack::prefs(*((SipStack **)this + 45));
      SendEmergencyLocationUpdatesKey = (void **)ImsPrefs::getSendEmergencyLocationUpdatesKey(v7);
      if (ImsPrefs::BOOLValue(v7, SendEmergencyLocationUpdatesKey))
      {
        if (*((void *)this + 249)) {
          *((_DWORD *)this + 496) = 4;
        }
      }
      BambiCall::prepareCall(this);
      goto LABEL_12;
    }
    if (!v6)
    {
      BambiUnlistedEmergencyCall::clearLocation(this);
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v17 = v5;
      char v18 = v4;
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      BambiEmergencyCallHandler::createLocation((uint64_t)&v17, (uint64_t)this + 1824, &v19);
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      uint64_t v9 = v19;
      if (v19)
      {
        *((_DWORD *)this + 496) = 1;
        long long v10 = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((void *)this + 249) = v9;
        uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 250);
        *((void *)this + 250) = v10;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        *((_OWORD *)this + 116) = 0u;
        *((_OWORD *)this + 115) = 0u;
        *((_OWORD *)this + 117) = xmmword_1C56D18C0;
        uint64_t v12 = (void **)((char *)this + 1888);
        if (*((char *)this + 1911) < 0) {
          operator delete(*v12);
        }
        uint64_t v13 = (void **)((char *)this + 1912);
        unsigned int *v12 = 0;
        *((void *)this + 237) = 0;
        *((void *)this + 238) = 0;
        if (*((char *)this + 1935) < 0) {
          operator delete(*v13);
        }
        uint64_t v14 = (void **)((char *)this + 1936);
        *uint64_t v13 = 0;
        *((void *)this + 240) = 0;
        *((void *)this + 24BambiCallParticipant::setState((uint64_t)this, 10, 1) = 0;
        if (*((char *)this + 1959) < 0) {
          operator delete(*v14);
        }
        uint64_t v15 = (void **)((char *)this + 1960);
        void *v14 = 0;
        *((void *)this + 243) = 0;
        *((void *)this + 244) = 0;
        if (*((char *)this + 1983) < 0) {
          operator delete(*v15);
        }
        std::__shared_weak_count *v15 = 0;
        *((void *)this + 246) = 0;
        *((void *)this + 247) = 0;
        *((unsigned char *)this + 1832) = 1;
      }
      else
      {
        uint64_t v16 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
        (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Location lookup not required", 28);
        *(unsigned char *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v16 + 17) = 0;
        *((_DWORD *)this + 496) = 3;
        BambiCall::prepareCall(this);
      }
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      goto LABEL_12;
    }
  }
  *((unsigned char *)this + 1832) = 1;
LABEL_12:
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_1C53DFDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t BambiUnlistedEmergencyCall::isUnlistedEmergency(BambiUnlistedEmergencyCall *this)
{
  return 1;
}

void SDPMediaLazuliSettings::~SDPMediaLazuliSettings(SDPMediaLazuliSettings *this)
{
  *(void *)this = &unk_1F20CA130;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (void **)((char *)this + 304);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 280);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  SDPMediaSettings::~SDPMediaSettings(this);
}

{
  uint64_t vars8;

  SDPMediaLazuliSettings::~SDPMediaLazuliSettings(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SDPMediaLazuliSettings::SDPMediaLazuliSettings(uint64_t a1, long long **a2, long long **a3, __int16 a4, __int16 a5, const LazuliRouteSet *a6, const LazuliRouteSet *a7)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xFF00FF00000000;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 36) = 0x100000001;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(void *)a1 = &unk_1F20CA130;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 280), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 304), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  std::allocate_shared[abi:ne180100]<LazuliRouteSet,std::allocator<LazuliRouteSet>,LazuliRouteSet&,void>((void *)(a1 + 328), a7);
  std::allocate_shared[abi:ne180100]<LazuliRouteSet,std::allocator<LazuliRouteSet>,LazuliRouteSet&,void>((void *)(a1 + 344), a6);
  *(_WORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = a5;
  return a1;
}

void sub_1C53DFFE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 42);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  SDPMediaSettings::~SDPMediaSettings(v2);
  _Unwind_Resume(a1);
}

void SDPMediaLazuliSettings::SDPMediaLazuliSettings(SDPMediaLazuliSettings *this, long long **a2)
{
  SDPMediaSettings::SDPMediaSettings(this, (const SDPMediaSettings *)a2);
  *(void *)uint64_t v4 = &unk_1F20CA130;
  *(void *)(v4 + 288) = 0;
  *(void *)(v4 + 296) = 0;
  *(void *)(v4 + 280) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v4 + 280), a2[35], a2[36], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[36] - (char *)a2[35]) >> 3));
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 304), a2[38], a2[39], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[39] - (char *)a2[38]) >> 3));
  uint64_t v5 = a2[42];
  *((void *)this + 4BambiCallParticipant::setState((uint64_t)this, 10, 1) = a2[41];
  *((void *)this + 42) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
  }
  int v6 = a2[44];
  *((void *)this + 43) = a2[43];
  *((void *)this + 44) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
  }
}

void sub_1C53E0104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  SDPMediaSettings::~SDPMediaSettings(v2);
  _Unwind_Resume(a1);
}

BOOL SDPMediaLazuliSettings::valid(SDPMediaLazuliSettings *this)
{
  return *((_WORD *)this + 12)
      && *((_WORD *)this + 13)
      && *((void *)this + 35) != *((void *)this + 36)
      && *((void *)this + 38) != *((void *)this + 39)
      && *(void *)(*((void *)this + 43) + 8) != *(void *)(*((void *)this + 43) + 16)
      && *(void *)(*((void *)this + 41) + 8) != *(void *)(*((void *)this + 41) + 16);
}

uint64_t SDPMediaLazuliSettings::operator!=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(long long **)(a1 + 280);
  uint64_t v5 = *(long long **)(a1 + 288);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v4) >> 3);
  if (v6 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 3))
  {
    memset(&v28, 0, sizeof(v28));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, v4, v5, v6);
    memset(&v27, 0, sizeof(v27));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v27, *(long long **)(a2 + 280), *(long long **)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 3));
    unint64_t v7 = 126
       - 2
       * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28.__r_.__value_.__l.__size_ - v28.__r_.__value_.__r.__words[0]) >> 3));
    if (v28.__r_.__value_.__l.__size_ == v28.__r_.__value_.__r.__words[0]) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v7;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v28.__r_.__value_.__l.__data_, (char *)v28.__r_.__value_.__l.__size_, (uint64_t)&v29, v8, 1);
    unint64_t v9 = 126
       - 2
       * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27.__r_.__value_.__l.__size_ - v27.__r_.__value_.__r.__words[0]) >> 3));
    if (v27.__r_.__value_.__l.__size_ == v27.__r_.__value_.__r.__words[0]) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v9;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v27.__r_.__value_.__l.__data_, (char *)v27.__r_.__value_.__l.__size_, (uint64_t)&v29, v10, 1);
    std::string::size_type size = v28.__r_.__value_.__l.__size_;
    uint64_t v11 = (unsigned __int8 *)v28.__r_.__value_.__r.__words[0];
    uint64_t v13 = (unsigned __int8 *)v27.__r_.__value_.__r.__words[0];
    if (v28.__r_.__value_.__l.__size_ - v28.__r_.__value_.__r.__words[0] == v27.__r_.__value_.__l.__size_
                                                                           - v27.__r_.__value_.__r.__words[0])
    {
      if (v28.__r_.__value_.__r.__words[0] == v28.__r_.__value_.__l.__size_)
      {
        int v14 = 1;
      }
      else
      {
        do
        {
          int v14 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v30, v11, v13);
          if (!v14) {
            break;
          }
          v11 += 24;
          v13 += 24;
        }
        while (v11 != (unsigned __int8 *)size);
      }
    }
    else
    {
      int v14 = 0;
    }
    uint64_t v30 = &v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  }
  else
  {
    int v14 = 0;
  }
  uint64_t v15 = *(long long **)(a1 + 304);
  uint64_t v16 = *(long long **)(a1 + 312);
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v15) >> 3);
  if (v17 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 3))
  {
    memset(&v28, 0, sizeof(v28));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, v15, v16, v17);
    memset(&v27, 0, sizeof(v27));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v27, *(long long **)(a2 + 304), *(long long **)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 3));
    unint64_t v18 = 126
        - 2
        * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28.__r_.__value_.__l.__size_ - v28.__r_.__value_.__r.__words[0]) >> 3));
    if (v28.__r_.__value_.__l.__size_ == v28.__r_.__value_.__r.__words[0]) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v18;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v28.__r_.__value_.__l.__data_, (char *)v28.__r_.__value_.__l.__size_, (uint64_t)&v29, v19, 1);
    unint64_t v20 = 126
        - 2
        * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27.__r_.__value_.__l.__size_ - v27.__r_.__value_.__r.__words[0]) >> 3));
    if (v27.__r_.__value_.__l.__size_ == v27.__r_.__value_.__r.__words[0]) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v20;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v27.__r_.__value_.__l.__data_, (char *)v27.__r_.__value_.__l.__size_, (uint64_t)&v29, v21, 1);
    std::string::size_type v23 = v28.__r_.__value_.__l.__size_;
    uint64_t v22 = (unsigned __int8 *)v28.__r_.__value_.__r.__words[0];
    long long v24 = (unsigned __int8 *)v27.__r_.__value_.__r.__words[0];
    if (v28.__r_.__value_.__l.__size_ - v28.__r_.__value_.__r.__words[0] == v27.__r_.__value_.__l.__size_
                                                                           - v27.__r_.__value_.__r.__words[0])
    {
      if (v28.__r_.__value_.__r.__words[0] == v28.__r_.__value_.__l.__size_)
      {
        int v25 = 1;
      }
      else
      {
        do
        {
          int v25 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v30, v22, v24);
          if (!v25) {
            break;
          }
          v22 += 24;
          v24 += 24;
        }
        while (v22 != (unsigned __int8 *)v23);
      }
    }
    else
    {
      int v25 = 0;
    }
    uint64_t v30 = &v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  }
  else
  {
    int v25 = 0;
  }
  if (*(unsigned __int16 *)(a1 + 24) != *(unsigned __int16 *)(a2 + 24)) {
    return 1;
  }
  uint64_t result = 1;
  if ((v14 & v25) == 1 && *(unsigned __int16 *)(a1 + 26) == *(unsigned __int16 *)(a2 + 26))
  {
    if (LazuliRouteSet::operator==(*(void **)(a1 + 344), *(void **)(a2 + 344))) {
      return LazuliRouteSet::operator==(*(void **)(a1 + 328), *(void **)(a2 + 328)) ^ 1;
    }
    return 1;
  }
  return result;
}

void sub_1C53E04B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<LazuliRouteSet,std::allocator<LazuliRouteSet>,LazuliRouteSet&,void>(void *a1, const LazuliRouteSet *a2)
{
  uint64_t v4 = operator new(0x50uLL);
  v4[1] = 0;
  void v4[2] = 0;
  *uint64_t v4 = &unk_1F20CA180;
  LazuliRouteSet::LazuliRouteSet((LazuliRouteSet *)(v4 + 3), a2);
  *a1 = v5;
  a1[1] = v4;
}

void sub_1C53E0550(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliRouteSet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CA180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliRouteSet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CA180;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliRouteSet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

BOOL operator==(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 31);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v8 = *(unsigned __int8 **)(a2 + 8);
  unint64_t v6 = (unsigned __int8 *)(a2 + 8);
  unint64_t v7 = v8;
  if (v5 < 0) {
    unint64_t v6 = v7;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, v6, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v9 = v2 - 1;
  do
  {
    int v11 = *a1++;
    int v10 = v11;
    int v13 = *v6++;
    int v12 = v13;
    BOOL v15 = v9-- != 0;
    BOOL v16 = v10 == v12;
    BOOL v17 = v10 == v12;
  }
  while (v16 && v15);
  return v17;
}

void SipTimers::SipTimers(SipTimers *this)
{
  *(void *)this = &unk_1F20CA1D0;
  *((void *)this + 2) = 0;
  *((void *)this + BambiCallParticipant::setState((uint64_t)this, 10, 1) = (char *)this + 16;
  *((void *)this + 3) = 0;
  SipTimers::resetDefaults((char **)this);
}

void sub_1C53E0708(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t *SipTimers::resetDefaults(char **this)
{
  uint64_t v1 = this + 2;
  uint64_t v2 = (uint64_t **)(this + 1);
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
  *(v1 - BambiCallParticipant::setState((uint64_t)this, 10, 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
  uint64_t v4 = &xmmword_1EBBDB6C0;
  *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v2, (void **)&xmmword_1EBBDB6C0, (uint64_t)&std::piecewise_construct, &v4)+ 14) = 2000;
  uint64_t v4 = (long long *)&unk_1EBBDB6E0;
  *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v2, (void **)&unk_1EBBDB6E0, (uint64_t)&std::piecewise_construct, &v4)+ 14) = 16000;
  uint64_t v4 = (long long *)&unk_1EBBDB700;
  *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v2, (void **)&unk_1EBBDB700, (uint64_t)&std::piecewise_construct, &v4)+ 14) = 17000;
  uint64_t v4 = &xmmword_1EBBDB5C0;
  uint64_t result = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v2, (void **)&xmmword_1EBBDB5C0, (uint64_t)&std::piecewise_construct, &v4);
  *((_DWORD *)result + 14) = 128000;
  return result;
}

BOOL SipTimers::isValid(SipTimers *this)
{
  unsigned int v2 = SipTimers::timerValue(this, (const SipTimer *)&SipTimers::kTimerT1, 0);
  unsigned int v3 = SipTimers::timerValue(this, (const SipTimer *)&SipTimers::kTimerT2, 0);
  BOOL result = 0;
  if (v2 < v3)
  {
    unsigned int v5 = SipTimers::timerValue(this, (const SipTimer *)&SipTimers::kTimerT2, 0);
    return v5 < SipTimers::timerValue(this, (const SipTimer *)&SipTimers::kTimerT4, 0);
  }
  return result;
}

uint64_t SipTimers::timerValue(SipTimers *this, const SipTimer *a2, int a3)
{
  int v5 = 1;
  while (1)
  {
    while (1)
    {
      int v6 = a3;
      if (!ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerA)) {
        break;
      }
      a3 = 0;
      v5 *= v6;
      a2 = (const SipTimer *)&SipTimers::kTimerT1;
    }
    if (!ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerE)) {
      break;
    }
    a3 = 0;
    a2 = (const SipTimer *)&SipTimers::kTimerT1;
    if (v6) {
      goto LABEL_9;
    }
  }
  if (!ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerG)
    && !ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimer200Retransmit))
  {
    if (*((char *)a2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v21, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
    }
    else
    {
      long long v10 = *(_OWORD *)((char *)a2 + 8);
      v21.__r_.__value_.__r.__words[2] = *((void *)a2 + 3);
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v10;
    }
    int v11 = (char *)this + 16;
    int v12 = (void *)*((void *)this + 2);
    if (!v12) {
      goto LABEL_25;
    }
    int v13 = (char *)this + 16;
    do
    {
      char v14 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, (void **)&v21.__r_.__value_.__l.__data_);
      if (v14 >= 0) {
        BOOL v15 = v12;
      }
      else {
        BOOL v15 = v12 + 1;
      }
      if (v14 >= 0) {
        int v13 = (char *)v12;
      }
      int v12 = (void *)*v15;
    }
    while (*v15);
    if (v13 == v11
      || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v21, (void **)v13 + 4) & 0x80) != 0)
    {
LABEL_25:
      int v13 = (char *)this + 16;
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (v11 != v13)
    {
      unsigned int v8 = *((_DWORD *)v13 + 14);
      return v8 * v5;
    }
    if (ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerB)
      || ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerD)
      || ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerF)
      || ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerH))
    {
      goto LABEL_34;
    }
    if (ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerI)) {
      goto LABEL_38;
    }
    if (!ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerJ))
    {
      if (ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerK))
      {
LABEL_38:
        BOOL v16 = (const SipTimer *)&SipTimers::kTimerT4;
        goto LABEL_39;
      }
      if (!ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerAckReceiveTimeout)
        && !ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerAckRetransmitTimeout))
      {
        if (!ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerRegAwaitAuth))
        {
          if ((ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerInviteResponseTimeout) & 1) == 0)
          {
            if ((ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerEmergencyInviteResponseTimeout) & 1) != 0
              || ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerEPSInviteResponseTimeout))
            {
              BOOL v16 = (const SipTimer *)&SipTimers::kTimerInviteResponseTimeout;
              goto LABEL_39;
            }
            std::string::basic_string[abi:ne180100]<0>(&v21, "sip.timer");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v17 = ims::error((uint64_t)&v21, (uint64_t)__p);
            unint64_t v18 = (unsigned char *)ImsOutStream::operator<<(v17, "unknown SIP timer ");
            (*(void (**)(const SipTimer *, unsigned char *))(*(void *)a2 + 16))(a2, v18);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v18[17] = 0;
            if (v20 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v21.__r_.__value_.__l.__data_);
            }
          }
          unsigned int v8 = 0;
          return v8 * v5;
        }
        BOOL v16 = (const SipTimer *)&SipTimers::kTimerF;
LABEL_39:
        unsigned int v8 = SipTimers::timerValue(this, v16, 0);
        return v8 * v5;
      }
    }
LABEL_34:
    unsigned int v8 = SipTimers::timerValue(this, (const SipTimer *)&SipTimers::kTimerT1, 0) << 6;
    return v8 * v5;
  }
LABEL_9:
  unsigned int v7 = SipTimers::timerValue(this, (const SipTimer *)&SipTimers::kTimerT1, 0) * v6;
  unsigned int v8 = SipTimers::timerValue(this, (const SipTimer *)&SipTimers::kTimerT2, 0);
  if (v8 >= v7) {
    unsigned int v8 = v7;
  }
  return v8 * v5;
}

void sub_1C53E0C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipTimers::setTimersFromPrefs(SipTimers *this, const ImsPrefs *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "Signaling/SipTimers");
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a2 + 208, __p);
  if ((void **)((char *)a2 + 216) == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (uint64_t)v4[7];
  }
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
      goto LABEL_12;
    }
  }
  else if (v5)
  {
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sip.timer");
  std::string::basic_string[abi:ne180100]<0>(v17, "");
  uint64_t v6 = ims::error((uint64_t)__p, (uint64_t)v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"couldn't find prefs section Signaling/SipTimers", 47);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(__p[0]);
  }
LABEL_12:
  unsigned int v7 = *(void **)(v5 + 40);
  unsigned int v8 = *(void **)(v5 + 48);
  if (v7 != v8)
  {
    uint64_t v9 = (uint64_t **)((char *)this + 8);
    do
    {
      long long v10 = (std::string *)(*v7 + 8);
      int v11 = ImsPrefsSection::prefWithName(v5, (uint64_t)v10);
      if (v11)
      {
        int v12 = (*(uint64_t (**)(void *))(*(void *)v11 + 56))(v11);
        if (v12 < 1)
        {
          if (v12)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "sip.timer");
            std::string::basic_string[abi:ne180100]<0>(v17, "");
            uint64_t v14 = ims::error((uint64_t)__p, (uint64_t)v17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"ignoring invalid value '", 24);
            *(unsigned char *)(v14 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v14 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"' for timer ", 12);
            *(unsigned char *)(v14 + 17) = 0;
            LoggableString::LoggableString(&v16, v10);
            (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 40))(v14, &v16);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v14 + 17) = 0;
            if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v16.__r_.__value_.__l.__data_);
            }
            if (v18 < 0) {
              operator delete(v17[0]);
            }
            if (v20 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "sip.timer");
            std::string::basic_string[abi:ne180100]<0>(v17, "");
            uint64_t v15 = ims::debug((uint64_t)__p, (uint64_t)v17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"resetting timer ", 16);
            *(unsigned char *)(v15 + 17) = 0;
            LoggableString::LoggableString(&v16, v10);
            (*(void (**)(uint64_t, std::string *))(*(void *)v15 + 40))(v15, &v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" to default", 11);
            *(unsigned char *)(v15 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v15 + 17) = 0;
            if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v16.__r_.__value_.__l.__data_);
            }
            if (v18 < 0) {
              operator delete(v17[0]);
            }
            if (v20 < 0) {
              operator delete(__p[0]);
            }
            std::__tree<std::string>::__erase_unique<std::string>(v9, (void **)&v10->__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "sip.timer");
          std::string::basic_string[abi:ne180100]<0>(v17, "");
          uint64_t v13 = ims::debug((uint64_t)__p, (uint64_t)v17);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"setting timer ", 14);
          *(unsigned char *)(v13 + 17) = 0;
          LoggableString::LoggableString(&v16, v10);
          (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 40))(v13, &v16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" to ", 4);
          *(unsigned char *)(v13 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v13 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v13 + 17) = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
          if (v18 < 0) {
            operator delete(v17[0]);
          }
          if (v20 < 0) {
            operator delete(__p[0]);
          }
          __p[0] = v10;
          *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)&v10->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)__p)+ 14) = v12;
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
}

void sub_1C53E1194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipTimers::log(SipTimers *this, ImsOutStream *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v3, "=");
  std::string::basic_string[abi:ne180100]<0>(&v2, ", ");
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4);
}

void sub_1C53E144C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void SipTimers::~SipTimers(char **this)
{
  *this = (char *)&unk_1F20CA1D0;
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
}

{
  uint64_t vars8;

  *this = (char *)&unk_1F20CA1D0;
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
  JUMPOUT(0x1C878E320);
}

void SipTimers::loggableName(LoggableString *a1@<X8>)
{
}

uint64_t SipTimer::SipTimer(uint64_t a1, const std::string *a2)
{
  *(void *)a1 = &unk_1F20C09A8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  return a1;
}

void sub_1C53E15E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,unsigned int>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,unsigned int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,unsigned int>,std::__tree_node<std::__value_type<std::string,unsigned int>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1C53E163C(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,unsigned int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,unsigned int>,std::__tree_node<std::__value_type<std::string,unsigned int>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      BOOL result = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      unsigned int v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          unsigned int v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v9 = 0;
  long long v10 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  BOOL result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::pair<std::string const,unsigned int> const&>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::pair<std::string const,unsigned int> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  unsigned int v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *uint64_t v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  unsigned int v8 = (std::string *)(v7 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v7 + 6) = *(void *)(a2 + 16);
  }
  *((_DWORD *)v7 + 14) = *(_DWORD *)(a2 + 24);
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C53E1808(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,unsigned int>,std::__tree_node<std::__value_type<std::string,unsigned int>,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  uint64_t v5 = (uint64_t **)result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *BOOL result = (uint64_t)(result + 1);
    *(void *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(void *)(v6 + 8)) {
      unsigned int v8 = *(void **)(v6 + 8);
    }
    else {
      unsigned int v8 = (void *)v6;
    }
    char v18 = result;
    uint64_t v19 = v8;
    char v20 = v8;
    if (v8)
    {
      uint64_t v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_DWORD *)v8 + 14) = *((_DWORD *)v9 + 14);
          long long v10 = v20;
          uint64_t v17 = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v17, v20 + 4);
          std::__tree<unsigned int>::__insert_node_at(v5, v17, leaf_high, v10);
          unsigned int v8 = v19;
          char v20 = v19;
          if (v19) {
            uint64_t v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          }
          int v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              int v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v13 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v13);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    BOOL result = (uint64_t *)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      char v18 = 0;
      uint64_t v19 = 0;
      char v20 = 0;
      std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::pair<std::string const,unsigned int> const&>((uint64_t)v5, (uint64_t)(a2 + 4), &v18);
      uint64_t v17 = 0;
      uint64_t v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v17, v18 + 4);
      BOOL result = std::__tree<unsigned int>::__insert_node_at(v5, v17, v14, v18);
      uint64_t v15 = (void *)a2[1];
      if (v15)
      {
        do
        {
          std::string v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          std::string v16 = (void *)a2[2];
          BOOL v13 = *v16 == (void)a2;
          a2 = v16;
        }
        while (!v13);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1C53E19D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  BOOL result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *uint64_t v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  unsigned int v8 = (std::string *)(v7 + 32);
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  *((_DWORD *)v7 + 14) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C53E1B24(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_SipTimer_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "T1");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerT1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerT1, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "T2");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerT2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerT2, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "T4");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerT4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerT4, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "A");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerA, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerA, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "B");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerB, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerB, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "C");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerC, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerC, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "D");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerD, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerD, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "E");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerE, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerE, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "F");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerF, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerF, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "G");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerG, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerG, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "H");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerH, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerH, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "I");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerI, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerI, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "J");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerJ, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerJ, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "K");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerK, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerK, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "200RetransmitTimer");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimer200Retransmit, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimer200Retransmit, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "AckReceiveTimeout");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerAckReceiveTimeout, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerAckReceiveTimeout, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "AckRetransmitTimer");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerAckRetransmitTimeout, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerAckRetransmitTimeout, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "RegAwaitAuthTimeout");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerRegAwaitAuth, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerRegAwaitAuth, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "InviteResponseTimeout");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerInviteResponseTimeout, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerInviteResponseTimeout, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EPSInviteResponseTimeout");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerEPSInviteResponseTimeout, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerEPSInviteResponseTimeout, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EmergencyInviteResponseTimeout");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerEmergencyInviteResponseTimeout, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerEmergencyInviteResponseTimeout, &dword_1C51D1000);
}

void sub_1C53E2248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipAckReceiveHandler::SipAckReceiveHandler(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F20B2FA8;
  uint64_t v8 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.session");
  ImsLogContainer::ImsLogContainer(v8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)a1 = &unk_1F20CA218;
  *(void *)(a1 + 8) = &unk_1F20CA258;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 160));
  long long v10 = *(std::__shared_weak_count **)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  int v11 = *(std::__shared_weak_count **)(a1 + 136);
  *(void *)(a1 + 128) = v10;
  *(void *)(a1 + 136) = v9;
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v13 = *a3;
  uint64_t v12 = a3[1];
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 152);
  *(void *)(a1 + 144) = v13;
  *(void *)(a1 + 152) = v12;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  *(void *)(a1 + 312) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
  *(void *)(a1 + 264) = a1;
  SipSessionInterface::stack(*(std::__shared_weak_count **)a2, &__p);
  *(void *)(a1 + 296) = SipUserAgent::config(*(SipUserAgent **)(__p.__r_.__value_.__r.__words[0] + 144)) + 512;
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  *(_DWORD *)(a1 + 304) = 1;
  return a1;
}

void sub_1C53E2444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  SipTimerContainer::~SipTimerContainer(v17);
  uint64_t v19 = (std::__shared_weak_count *)v15[19];
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  char v20 = (std::__shared_weak_count *)v15[17];
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  std::string v21 = (std::__shared_weak_count *)v15[15];
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  ImsLogContainer::~ImsLogContainer(v16);
  _Unwind_Resume(a1);
}

void SipAckReceiveHandler::~SipAckReceiveHandler(SipAckReceiveHandler *this)
{
  *(void *)this = &unk_1F20CA218;
  *((void *)this + BambiCallParticipant::setState((uint64_t)this, 10, 1) = &unk_1F20CA258;
  uint64_t v2 = *((void *)this + 39);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  SipTimerContainer::cancelAllTimers((SipAckReceiveHandler *)((char *)this + 160));
  SipTimerContainer::~SipTimerContainer((SipAckReceiveHandler *)((char *)this + 160));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *((void *)this + BambiCallParticipant::setState((uint64_t)this, 10, 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  SipAckReceiveHandler::~SipAckReceiveHandler(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipAckReceiveHandler::~SipAckReceiveHandler(SipAckReceiveHandler *this)
{
}

{
  uint64_t vars8;

  SipAckReceiveHandler::~SipAckReceiveHandler((SipAckReceiveHandler *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipAckReceiveHandler::loggableName(SipAckReceiveHandler *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C53E2800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a16);
  _Unwind_Resume(a1);
}

void SipAckReceiveHandler::logPrefix(SipAckReceiveHandler *this, ImsOutStream *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 24))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C53E28F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipAckReceiveHandler::logPrefix(SipAckReceiveHandler *this, ImsOutStream *a2)
{
}

uint64_t SipAckReceiveHandler::initialize(int8x8_t *this)
{
  v17[4] = *MEMORY[0x1E4F143B8];
  if (this[18])
  {
    uint64_t v2 = (std::__shared_weak_count *)this[17];
    if (v2)
    {
      uint64_t v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        int8x8_t v4 = this[16];
        if (v4)
        {
          int8x8_t v6 = this[14];
          uint64_t v5 = (std::__shared_weak_count *)this[15];
          if (v5)
          {
            atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            this[38].i32[0] = 1;
            if (!*(unsigned char *)(*(void *)&v4 + 264))
            {
LABEL_14:
              atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_15;
            }
            atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            this[38].i32[0] = 1;
            if (!*(unsigned char *)(*(void *)&v4 + 264)) {
              goto LABEL_15;
            }
          }
          uint64_t v13 = operator new(0x20uLL);
          *uint64_t v13 = &unk_1F20CA310;
          v13[1] = this;
          v13[2] = v6;
          uint64_t v13[3] = v5;
          v17[3] = v13;
          SipTimerContainer::startSipTimer(this + 20, (uint64_t)&SipTimers::kTimer200Retransmit, (uint64_t)v17, this[38].i32[0]);
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v17);
          if (v5) {
            goto LABEL_14;
          }
LABEL_15:
          uint64_t v14 = operator new(0x20uLL);
          void *v14 = &unk_1F20CA310;
          v14[1] = this;
          void v14[2] = v6;
          v14[3] = v5;
          v16[3] = v14;
          SipTimerContainer::startSipTimer(this + 20, (uint64_t)&SipTimers::kTimerAckReceiveTimeout, (uint64_t)v16, 0);
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v16);
          if (v5)
          {
            std::__shared_weak_count::__release_weak(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          uint64_t v9 = 1;
LABEL_18:
          std::__shared_weak_count::__release_shared[abi:ne180100](v3);
          return v9;
        }
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
    int8x8_t v11 = this[1];
    long long v10 = this + 1;
    uint64_t v12 = (*(uint64_t (**)(int8x8_t *))(*(void *)&v11 + 56))(v10);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v10 + 16))(v10, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"no session specified", 20);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v9 = 0;
    *(unsigned char *)(v12 + 17) = 0;
    if (!v3) {
      return v9;
    }
    goto LABEL_18;
  }
  uint64_t v7 = this + 1;
  uint64_t v8 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[1] + 56))(this + 1);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)v7 + 16))(v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"no transaction specified", 24);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  uint64_t v9 = 0;
  *(unsigned char *)(v8 + 17) = 0;
  return v9;
}

void sub_1C53E2C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  _Unwind_Resume(a1);
}

void SipAckReceiveHandler::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!operator==(a2, (uint64_t)&SipTimers::kTimer200Retransmit))
  {
    if (!operator==(a2, (uint64_t)&SipTimers::kTimerAckReceiveTimeout)) {
      return;
    }
    int8x8_t v6 = *(std::__shared_weak_count **)(a1 + 136);
    if (v6)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = *(std::__shared_weak_count **)(a1 + 128);
        if (v8)
        {
          if ((((uint64_t (*)(void))v8->__vftable[6].__get_deleter)(*(void *)(a1 + 128)) & 1) == 0)
          {
            uint64_t v10 = *(void *)(a1 + 8);
            uint64_t v9 = a1 + 8;
            uint64_t v11 = (*(uint64_t (**)(uint64_t))(v10 + 32))(v9);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v11);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"no ACK received by timeout.  Terminating session.", 49);
            *(unsigned char *)(v11 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v11 + 17) = 0;
            std::string::basic_string[abi:ne180100]<0>(__p, "NoAckReceived");
            SipSessionInterface::terminationReason(v8, (uint64_t)__p, (BambiCallTerminationReason *)v25);
            ((void (*)(void *__return_ptr, std::__shared_weak_count *, unsigned char *, void))v8->__vftable[3].~__shared_weak_count)(v22, v8, v25, 0);
            if (v33) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v33);
            }
            if (v32) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v32);
            }
            if (v31 < 0) {
              operator delete(v30);
            }
            if (v29 < 0) {
              operator delete(v28);
            }
            if (v27 < 0) {
              operator delete(v26);
            }
            ImsResult::~ImsResult((ImsResult *)v22);
            if (v21 < 0) {
              operator delete(__p[0]);
            }
          }
LABEL_30:
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
          return;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v17 = a1 + 8;
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(v18 + 56))(v17);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"No session to handle AckReceiveTimeout", 38);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    if (!v7) {
      return;
    }
    goto LABEL_30;
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 144) + 568);
  if (v4 && *(_DWORD *)(v4 + 88) == *(_DWORD *)(*(void *)(a1 + 312) + 88))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 64))(a1 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"resending previous 200 response", 31);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 144) + 128))(v24);
    ImsResult::~ImsResult((ImsResult *)v24);
  }
  else
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 64))(a1 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"trying to send 200 response", 27);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 312) + 32))(*(void *)(a1 + 312));
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 144) + 168))(v23);
    ImsResult::~ImsResult((ImsResult *)v23);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  *(_DWORD *)(a1 + 304) *= 2;
  uint64_t v15 = *(void *)(a1 + 112);
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 120);
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v35 = 0;
  std::string v16 = operator new(0x20uLL);
  void *v16 = &unk_1F20CA390;
  v16[1] = a1;
  v16[2] = v15;
  v16[3] = v14;
  char v35 = v16;
  SipTimerContainer::startSipTimer((int8x8_t *)(a1 + 160), (uint64_t)&SipTimers::kTimer200Retransmit, (uint64_t)v34, *(_DWORD *)(a1 + 304));
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v34);
  if (v14)
  {
    std::__shared_weak_count::__release_weak(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_1C53E3258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  BambiCallTerminationReason::~BambiCallTerminationReason((BambiCallTerminationReason *)(v15 - 224));
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

uint64_t SipAckReceiveHandler::handleAck(SipAckReceiveHandler *this, const SipRequest *a2)
{
  uint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = (*(uint64_t (**)(char *, const SipRequest *))(*((void *)this + 1) + 64))((char *)this + 8, a2);
  (*(void (**)(void *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"received ACK, terminating transaction", 37);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  uint64_t result = v2[17];
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v5();
  }
  return result;
}

void *std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20CA310;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20CA310;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20CA310;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20CA310;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    int8x8_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C53E3640(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20CA390;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20CA390;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20CA390;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20CA390;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    int8x8_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C53E38E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

uint64_t SipSocketMultiplexer<ImsListenSocketInterfaceDelegate>::SipSocketMultiplexer(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)a1 = &unk_1F20CA658;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 8 + *(void *)(v4 - 4SipAckReceiveHandler::~SipAckReceiveHandler((SipAckReceiveHandler *)((char *)this - 8)) = a2[2];
  *(unsigned char *)(a1 + 20) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[3];
  *(void *)(a1 + *(void *)(v5 - 24)) = a2[4];
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 120);
    *(void *)(a1 + 112) = v6;
    *(void *)(a1 + 120) = v7;
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(void *)(a1 + 112) = v6;
    *(void *)(a1 + 120) = 0;
  }
  return a1;
}

void *SipListenSocketMultiplexer::SipListenSocketMultiplexer(void *a1, uint64_t *a2)
{
  a1[1] = &unk_1F20B2FA8;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  SipSocketMultiplexer<ImsListenSocketInterfaceDelegate>::SipSocketMultiplexer((uint64_t)a1, (uint64_t *)&off_1F20CA4B0, &v5);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  *a1 = &unk_1F20CA418;
  a1[1] = &unk_1F20CA470;
  a1[16] = 0;
  a1[17] = 0;
  return a1;
}

void sub_1C53E3BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void SipListenSocketMultiplexer::~SipListenSocketMultiplexer(SipListenSocketMultiplexer *this)
{
  *(void *)this = &unk_1F20CA418;
  uint64_t v2 = (SipListenSocketMultiplexer *)((char *)this + 8);
  *((void *)this + BambiCallParticipant::setState((uint64_t)this, 10, 1) = &unk_1F20CA470;
  uint64_t v3 = *((void *)this + 16);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 64))(v3);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 17);
    *((void *)this + 16) = 0;
    *((void *)this + 17) = 0;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)this = off_1F20CA500;
  *((void *)this + BambiCallParticipant::setState((uint64_t)this, 10, 1) = off_1F20CA548;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(*((void **)this + 12));
  SipLockable::~SipLockable(v2, (uint64_t *)off_1F20CA4B8);
}

{
  uint64_t vars8;

  SipListenSocketMultiplexer::~SipListenSocketMultiplexer(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipListenSocketMultiplexer::~SipListenSocketMultiplexer(SipListenSocketMultiplexer *this)
{
}

{
  uint64_t vars8;

  SipListenSocketMultiplexer::~SipListenSocketMultiplexer((SipListenSocketMultiplexer *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipListenSocketMultiplexer::loggableName(LoggableString *a1@<X8>)
{
}

void non-virtual thunk to'SipListenSocketMultiplexer::loggableName(LoggableString *a1@<X8>)
{
}

void SipListenSocketMultiplexer::handleIncomingConnection(void *a1, void *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 104))(&__p);
  SipSocketMultiplexer<ImsListenSocketInterfaceDelegate>::delegateForRemoteAddress(a1, &v15);
  if (v16)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v16);
    if (v4) {
      uint64_t v5 = v15;
    }
    else {
      uint64_t v5 = 0;
    }
    if (v16) {
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v5)
  {
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    uint64_t v18 = *a2;
    uint64_t v19 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *))(*(void *)v5 + 16))(v5, &v18);
    uint64_t v7 = v19;
    if (v19) {
LABEL_14:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "transport");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v8 = ims::error((uint64_t)&v15, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"SipListenSocketMultiplexer: no delegate to handle incoming connection from ", 75);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 104))(&v10);
    uint64_t v9 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v8);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v9[17] = 0;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v14 < 0) {
      operator delete(__p);
    }
    if (v17 < 0) {
      operator delete(v15);
    }
    uint64_t v7 = (std::__shared_weak_count *)a2[1];
    *a2 = 0;
    a2[1] = 0;
    if (v7) {
      goto LABEL_14;
    }
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C53E3FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void *SipSocketMultiplexer<ImsListenSocketInterfaceDelegate>::delegateForRemoteAddress@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (result[13]) {
    IpAddress::asString();
  }
  uint64_t v3 = result[15];
  *a2 = result[14];
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1C53E4110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t SipMD5DigestAlgorithm::computeDigest(uint64_t a1, const void *a2, CC_LONG a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  memset(&c, 0, sizeof(c));
  *(void *)md = 0;
  uint64_t v19 = 0;
  CC_MD5_Init(&c);
  CC_MD5_Update(&c, a2, a3);
  CC_MD5_Final(md, &c);
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v11, 0, sizeof(v11));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  LOBYTE(v9) = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, (char *)&v9);
  uint64_t v7 = 0;
  *(_DWORD *)((char *)v11 + *(void *)(*(void *)&v11[0] - 24) + 8) = *(_DWORD *)((unsigned char *)v11
                                                                                    + *(void *)(*(void *)&v11[0]
                                                                                                - 24)
                                                                                    + 8) & 0xFFFFFFB5 | 8;
  do
  {
    *(void *)((char *)&v11[1] + *(void *)(*(void *)&v11[0] - 24) + 8) = 2;
    std::ostream::operator<<();
    ++v7;
  }
  while (v7 != 16);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v11 + 8, &v9);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v9;
  *(void *)(a4 + 16) = v10;
  *(void *)&v11[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v11 + *(void *)(*(void *)&v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v11[0] + BambiCallParticipant::setState((uint64_t)this, 10, 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C878E270](v15);
  return 1;
}

void sub_1C53E4420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t SipMD5DigestAlgorithm::computeHmac(int a1, const void *a2, size_t a3, const void *a4, size_t a5, unint64_t *a6)
{
  uint64_t v11 = (void *)*a6;
  unint64_t v13 = a6[1] - (void)v11;
  if (v13 > 0xF)
  {
    if (v13 != 16) {
      a6[1] = (unint64_t)v11 + 16;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a6, 16 - v13);
    uint64_t v11 = (void *)*a6;
  }
  CCHmac(1u, a2, a3, a4, a5, v11);
  return 1;
}

uint64_t SipSHA1DigestAlgorithm::computeDigest(uint64_t a1, const void *a2, CC_LONG a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  memset(&c, 0, sizeof(c));
  *(void *)md = 0;
  uint64_t v19 = 0;
  int v20 = 0;
  CC_SHA1_Init(&c);
  CC_SHA1_Update(&c, a2, a3);
  CC_SHA1_Final(md, &c);
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v11, 0, sizeof(v11));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  LOBYTE(v9) = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, (char *)&v9);
  uint64_t v7 = 0;
  *(_DWORD *)((char *)v11 + *(void *)(*(void *)&v11[0] - 24) + 8) = *(_DWORD *)((unsigned char *)v11
                                                                                    + *(void *)(*(void *)&v11[0]
                                                                                                - 24)
                                                                                    + 8) & 0xFFFFFFB5 | 8;
  do
  {
    *(void *)((char *)&v11[1] + *(void *)(*(void *)&v11[0] - 24) + 8) = 2;
    std::ostream::operator<<();
    ++v7;
  }
  while (v7 != 20);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v11 + 8, &v9);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v9;
  *(void *)(a4 + 16) = v10;
  *(void *)&v11[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v11 + *(void *)(*(void *)&v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v11[0] + BambiCallParticipant::setState((uint64_t)this, 10, 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C878E270](v15);
  return 1;
}

void sub_1C53E4758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t SipSHA1DigestAlgorithm::computeHmac(int a1, const void *a2, size_t a3, const void *a4, size_t a5, unint64_t *a6)
{
  uint64_t v11 = (void *)*a6;
  unint64_t v13 = a6[1] - (void)v11;
  if (v13 > 0x13)
  {
    if (v13 != 20) {
      a6[1] = (unint64_t)v11 + 20;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a6, 20 - v13);
    uint64_t v11 = (void *)*a6;
  }
  CCHmac(0, a2, a3, a4, a5, v11);
  return 1;
}

uint64_t SipSHA256DigestAlgorithm::computeDigest(uint64_t a1, const void *a2, CC_LONG a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  memset(&c, 0, sizeof(c));
  memset(md, 0, sizeof(md));
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, a2, a3);
  CC_SHA256_Final((unsigned __int8 *)md, &c);
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v11, 0, sizeof(v11));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  LOBYTE(v9) = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, (char *)&v9);
  uint64_t v7 = 0;
  *(_DWORD *)((char *)v11 + *(void *)(*(void *)&v11[0] - 24) + 8) = *(_DWORD *)((unsigned char *)v11
                                                                                    + *(void *)(*(void *)&v11[0]
                                                                                                - 24)
                                                                                    + 8) & 0xFFFFFFB5 | 8;
  do
  {
    *(void *)((char *)&v11[1] + *(void *)(*(void *)&v11[0] - 24) + 8) = 2;
    std::ostream::operator<<();
    ++v7;
  }
  while (v7 != 32);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v11 + 8, &v9);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v9;
  *(void *)(a4 + 16) = v10;
  *(void *)&v11[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v11 + *(void *)(*(void *)&v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v11[0] + BambiCallParticipant::setState((uint64_t)this, 10, 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C878E270](v15);
  return 1;
}

void sub_1C53E4A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t SipSHA256DigestAlgorithm::computeHmac(int a1, const void *a2, size_t a3, const void *a4, size_t a5, unint64_t *a6)
{
  uint64_t v11 = (void *)*a6;
  unint64_t v13 = a6[1] - (void)v11;
  if (v13 > 0x1F)
  {
    if (v13 != 32) {
      a6[1] = (unint64_t)v11 + 32;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a6, 32 - v13);
    uint64_t v11 = (void *)*a6;
  }
  CCHmac(2u, a2, a3, a4, a5, v11);
  return 1;
}

void SipDigestAlgorithmManager::SipDigestAlgorithmManager(SipDigestAlgorithmManager *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + BambiCallParticipant::setState((uint64_t)this, 10, 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  operator new();
}

void sub_1C53E4BE4(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void SipDigestAlgorithmManager::~SipDigestAlgorithmManager(SipDigestAlgorithmManager *this)
{
  for (uint64_t i = (void *)*((void *)this + 2); i; uint64_t i = (void *)*i)
  {
    uint64_t v3 = i[5];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this);
}

void SipMD5DigestAlgorithm::~SipMD5DigestAlgorithm(SipMD5DigestAlgorithm *this)
{
}

void *SipMD5DigestAlgorithm::name(SipMD5DigestAlgorithm *this)
{
  return &SipDigestAlgorithm::kAlgorithmMD5;
}

void SipSHA1DigestAlgorithm::~SipSHA1DigestAlgorithm(SipSHA1DigestAlgorithm *this)
{
}

const char *SipSHA1DigestAlgorithm::name(SipSHA1DigestAlgorithm *this)
{
  return "SHA1";
}

void SipSHA256DigestAlgorithm::~SipSHA256DigestAlgorithm(SipSHA256DigestAlgorithm *this)
{
}

const char *SipSHA256DigestAlgorithm::name(SipSHA256DigestAlgorithm *this)
{
  return "SHA256";
}

char *std::__hash_table<std::__hash_value_type<std::string,SipDigestAlgorithm *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipDigestAlgorithm *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipDigestAlgorithm *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipDigestAlgorithm *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = a1 + 3;
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = a1[1];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    long long v14 = *(void ***)(*a1 + 8 * v13);
    if (v14)
    {
      uint64_t v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v9)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 4), (unsigned __int8 *)v15 + 16, a2))return v15; {
          }
            }
          else
          {
            if (v12 > 1)
            {
              if (v16 >= v10) {
                v16 %= v10;
              }
            }
            else
            {
              v16 &= v10 - 1;
            }
            if (v16 != v13) {
              break;
            }
          }
          uint64_t v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  char v17 = *a4;
  uint64_t v15 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = v9;
  uint64_t v18 = (std::string *)(v15 + 16);
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v19 = *v17;
    *((void *)v15 + 4) = *((void *)v17 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  *((void *)v15 + 5) = 0;
  float v20 = (float)(unint64_t)(a1[3] + 1);
  float v21 = *((float *)a1 + 8);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = a1[1];
    if (*(void *)&prime > v10) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v26 = operator new(8 * *(void *)&prime);
          char v27 = (void *)*a1;
          *a1 = (uint64_t)v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          char v29 = (void *)a1[2];
          if (v29)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v30) = a1 + 2;
            char v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*a1 + 8 * v36))
                  {
                    *(void *)(*a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *char v29 = *v35;
                  *char v35 = **(void **)(*a1 + 8 * v36);
                  **(void **)(*a1 + 8 * v36) = v35;
                  char v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                char v29 = v35;
                char v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        char v41 = (void *)*a1;
        *a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  uint64_t v37 = *a1;
  uint64_t v38 = *(void **)(*a1 + 8 * v13);
  if (v38)
  {
    *(void *)uint64_t v15 = *v38;
LABEL_75:
    *uint64_t v38 = v15;
    goto LABEL_76;
  }
  *(void *)uint64_t v15 = a1[2];
  a1[2] = (uint64_t)v15;
  *(void *)(v37 + 8 * v13) = a1 + 2;
  if (*(void *)v15)
  {
    unint64_t v39 = *(void *)(*(void *)v15 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10) {
        v39 %= v10;
      }
    }
    else
    {
      v39 &= v10 - 1;
    }
    uint64_t v38 = (void *)(*a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  ++*v7;
  return v15;
}

void sub_1C53E511C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SipDigestAlgorithm *>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t SipHost::SipHost(uint64_t a1, std::string *a2)
{
  *(void *)a1 = &unk_1F20CA780;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  SipHost::fromString(a1, a2);
  *(_WORD *)(a1 + 32) = 0;
  return a1;
}

void sub_1C53E5204(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipHost::fromString(uint64_t a1, std::string *a2)
{
  SipHost::clear((SipHost *)a1);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  IpAddress::createAddress(a2, (uint64_t)&v14);
  uint64_t v4 = v14;
  if (v14)
  {
    uint64_t v5 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v5;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    *(_WORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  else
  {
    std::string::size_type v7 = std::string::find(a2, 58, 0);
    if (v7 == -1)
    {
      std::string::operator=((std::string *)(a1 + 8), a2);
    }
    else
    {
      std::string::size_type v8 = v7;
      std::string::basic_string(&__p, a2, 0, v7, (std::allocator<char> *)&v16);
      unint64_t v9 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*v9);
      }
      *(_OWORD *)unint64_t v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(a1 + 24) = *((void *)&__p.__r_.__value_.__l + 2);
      std::string::basic_string(&__p, a2, v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v16);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_WORD *)(a1 + 32) = strtol((const char *)p_p, 0, 10);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    uint8x8_t v11 = *(std::__shared_weak_count **)(a1 + 48);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  return 1;
}

void sub_1C53E53A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipHost::SipHost(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F20CA780;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v4 + 32))(&v8);
    long long v5 = v8;
  }
  else
  {
    long long v5 = 0uLL;
  }
  long long v8 = 0uLL;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (*((void *)&v8 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  return a1;
}

{
  void *v3;
  long long v4;
  std::__shared_weak_count *v5;
  long long v7;

  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F20CA780;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v3 = (void *)(a1 + 40);
  *(void *)(a1 + 48) = 0;
  (*(void (**)(long long *__return_ptr))(**(void **)a2 + 32))(&v7);
  uint64_t v4 = v7;
  std::string::size_type v7 = 0uLL;
  long long v5 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  *(_WORD *)(a1 + 32) = (*(uint64_t (**)(void))(*(void *)*v3 + 56))(*v3);
  return a1;
}

void sub_1C53E549C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C53E55AC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void SipHost::~SipHost(SipHost *this)
{
  *(void *)this = &unk_1F20CA780;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t SipHost::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v4 + 32))(&v8);
    long long v5 = v8;
  }
  else
  {
    long long v5 = 0uLL;
  }
  long long v8 = 0uLL;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (*((void *)&v8 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  return a1;
}

void SipHost::clear(SipHost *this)
{
  if (*((char *)this + 31) < 0)
  {
    **((unsigned char **)this + BambiCallParticipant::setState((uint64_t)this, 10, 1) = 0;
    *((void *)this + 2) = 0;
  }
  else
  {
    *((unsigned char *)this + 8) = 0;
    *((unsigned char *)this + 3BambiCallParticipant::setState((uint64_t)this, 10, 1) = 0;
  }
  *((_WORD *)this + 16) = 0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 6);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void SipHost::address(SipHost *this@<X0>, void *a2@<X8>)
{
  SipHost::resolve(this, 0, (uint64_t)v5);
  ImsResult::~ImsResult((ImsResult *)v5);
  uint64_t v4 = *((void *)this + 6);
  *a2 = *((void *)this + 5);
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void SipHost::resolve(SipHost *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5))
    {
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(void *)a3 = &unk_1F20B2680;
      *(void *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
      return;
    }
    if ((a2 & 1) == 0)
    {
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      *(void *)&long long v20 = &unk_1F20B2680;
      *((void *)&v20 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = &_bambiDomain;
      int v21 = 0x40000000;
      unint64_t v10 = (const std::string *)ImsResult::operator<<<char [19]>((uint64_t)&v20, "address is invalid");
      ImsResult::ImsResult((ImsResult *)a3, v10);
      ImsResult::~ImsResult((ImsResult *)&v20);
      return;
    }
  }
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(void *)(a3 + 32) = 0;
  std::string::size_type v7 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
  {
    if (!*((void *)this + 2)) {
      goto LABEL_21;
    }
    long long v19 = 0;
    std::string::size_type v7 = *(const char **)v7;
  }
  else
  {
    if (!*((unsigned char *)this + 31)) {
      goto LABEL_21;
    }
    long long v19 = 0;
  }
  int v8 = getaddrinfo(v7, 0, 0, &v19);
  if (v8)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    *(void *)&long long v20 = &unk_1F20B2680;
    *((void *)&v20 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = &_bambiDomain;
    int v21 = 0x40000000;
    uint64_t v18 = gai_strerror(v8);
    uint64_t v9 = ImsResult::operator<<<char const*>((uint64_t)&v20, &v18);
    ImsResult::operator=(a3, v9);
    ImsResult::~ImsResult((ImsResult *)&v20);
LABEL_12:
    if (v19) {
      freeaddrinfo(v19);
    }
    goto LABEL_21;
  }
  uint8x8_t v11 = v19;
  if (v19)
  {
    while (1)
    {
      long long v20 = 0uLL;
      IpAddress::createAddress((IpAddress *)v11->ai_addr, (uint64_t)&v20);
      unint64_t v13 = (std::__shared_weak_count *)*((void *)&v20 + 1);
      uint64_t v12 = v20;
      if ((void)v20) {
        break;
      }
      if (*((void *)&v20 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
      }
      uint8x8_t v11 = v11->ai_next;
      if (!v11) {
        goto LABEL_12;
      }
    }
    if (*((void *)&v20 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    char v17 = (std::__shared_weak_count *)*((void *)this + 6);
    *((void *)this + 5) = v12;
    *((void *)this + 6) = v13;
    if (v17)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      uint64_t v12 = *((void *)this + 5);
    }
    (*(void (**)(uint64_t, void))(*(void *)v12 + 64))(v12, *((unsigned __int16 *)this + 16));
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    goto LABEL_12;
  }
LABEL_21:
  if (!*((void *)this + 5))
  {
    uint64_t v14 = operator new(0x48uLL);
    v14[1] = 0;
    void v14[2] = 0;
    void *v14 = &unk_1F20CA7B0;
    void v14[5] = 0;
    void v14[4] = 0;
    v14[3] = &unk_1F20E3E18;
    *(void *)((char *)v14 + 52) = 528;
    *(void *)&long long v20 = v14 + 3;
    *((void *)&v20 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = v14;
    std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v20, v14 + 4, (uint64_t)(v14 + 3));
    long long v15 = v20;
    long long v20 = 0uLL;
    char v16 = (std::__shared_weak_count *)*((void *)this + 6);
    *(_OWORD *)((char *)this + 40) = v15;
    if (v16)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      if (*((void *)&v20 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
      }
    }
  }
}

void sub_1C53E5A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  ImsResult::~ImsResult(v11);
  _Unwind_Resume(a1);
}

uint64_t SipHost::setAddress(uint64_t a1, void *a2)
{
  (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 32))(&v7);
  long long v4 = v7;
  long long v7 = 0uLL;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a2 + 56))(*a2);
  *(_WORD *)(a1 + 32) = result;
  return result;
}

void SipHost::asString()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C53E5C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)va);
  _Unwind_Resume(a1);
}

void SipHost::ipAddress(SipHost *this@<X0>, void *a2@<X8>)
{
  SipHost::resolve(this, 0, (uint64_t)v5);
  ImsResult::~ImsResult((ImsResult *)v5);
  uint64_t v4 = *((void *)this + 6);
  *a2 = *((void *)this + 5);
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

ImsOutStream *SipHost::toStream(SipHost *this, ImsOutStream *a2, int a3)
{
  if (*((char *)this + 31) < 0)
  {
    if (*((void *)this + 2)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 31))
  {
LABEL_3:
    LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 8));
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*((_WORD *)this + 16) && a3)
    {
      uint64_t v6 = (void *)*((void *)a2 + 1);
      __p.__r_.__value_.__s.__data_[0] = 58;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&__p, 1);
      *((unsigned char *)a2 + 17) = 0;
      std::ostream::operator<<();
      *((unsigned char *)a2 + 17) = 0;
    }
    return a2;
  }
  uint64_t v7 = *((void *)this + 5);
  if (v7)
  {
    if (a3) {
      uint64_t v8 = 3;
    }
    else {
      uint64_t v8 = 2;
    }
    (*(void (**)(uint64_t, ImsOutStream *, uint64_t))(*(void *)v7 + 120))(v7, a2, v8);
  }
  return a2;
}

void sub_1C53E5DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipHost::equals(SipHost *this, const SipHost *a2, int a3)
{
  uint64_t v6 = *((unsigned __int8 *)this + 31);
  if (*((char *)this + 31) < 0)
  {
    if (*((void *)this + 2)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t result = *((void *)this + 5);
    if (!result) {
      return result;
    }
    if (!*((void *)a2 + 5)) {
      return 0;
    }
    unint64_t v13 = *(uint64_t (**)(void))(*(void *)result + 104);
    return v13();
  }
  if (!*((unsigned char *)this + 31)) {
    goto LABEL_18;
  }
LABEL_3:
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = *((unsigned __int8 *)this + 31);
  }
  else {
    uint64_t v7 = *((void *)this + 2);
  }
  uint64_t v8 = *((unsigned __int8 *)a2 + 31);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)a2 + 2);
  }
  if (v7 != v8) {
    return 0;
  }
  unint64_t v10 = (const void **)((char *)this + 8);
  if (v9 >= 0) {
    uint8x8_t v11 = (unsigned __int8 *)a2 + 8;
  }
  else {
    uint8x8_t v11 = (unsigned __int8 *)*((void *)a2 + 1);
  }
  if ((v6 & 0x80) != 0)
  {
    LODWORD(v6) = memcmp(*v10, v11, *((void *)this + 2)) != 0;
  }
  else if (*((unsigned char *)this + 31))
  {
    while (*(unsigned __int8 *)v10 == *v11)
    {
      unint64_t v10 = (const void **)((char *)v10 + 1);
      ++v11;
      if (!--v6) {
        goto LABEL_25;
      }
    }
    return 0;
  }
LABEL_25:
  uint64_t result = v6 ^ 1;
  if ((v6 & 1) == 0)
  {
    if (a3) {
      return *((unsigned __int16 *)this + 16) == *((unsigned __int16 *)a2 + 16);
    }
  }
  return result;
}

uint64_t SipHost::equalsWithDefaultPort(SipHost *this, const SipHost *a2, unsigned __int16 a3)
{
  uint64_t v6 = *((unsigned __int8 *)this + 31);
  if (*((char *)this + 31) < 0)
  {
    if (*((void *)this + 2))
    {
LABEL_3:
      if ((v6 & 0x80u) == 0) {
        uint64_t v7 = *((unsigned __int8 *)this + 31);
      }
      else {
        uint64_t v7 = *((void *)this + 2);
      }
      uint64_t v8 = *((unsigned __int8 *)a2 + 31);
      int v9 = (char)v8;
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = *((void *)a2 + 2);
      }
      if (v7 == v8)
      {
        unint64_t v10 = (const void **)((char *)this + 8);
        if (v9 >= 0) {
          uint8x8_t v11 = (unsigned __int8 *)a2 + 8;
        }
        else {
          uint8x8_t v11 = (unsigned __int8 *)*((void *)a2 + 1);
        }
        if ((v6 & 0x80) == 0)
        {
          if (*((unsigned char *)this + 31))
          {
            while (*(unsigned __int8 *)v10 == *v11)
            {
              unint64_t v10 = (const void **)((char *)v10 + 1);
              ++v11;
              if (!--v6) {
                goto LABEL_26;
              }
            }
            return 0;
          }
          goto LABEL_26;
        }
        if (!memcmp(*v10, v11, *((void *)this + 2)))
        {
LABEL_26:
          int v13 = *((unsigned __int16 *)this + 16);
          int v14 = *((unsigned __int16 *)a2 + 16);
          if (v13 == v14) {
            return 1;
          }
          if (*((_WORD *)this + 16)) {
            BOOL v15 = 0;
          }
          else {
            BOOL v15 = v14 == a3;
          }
          unsigned int v16 = v15;
          if (v13 == a3 && v14 == 0) {
            return 1;
          }
          else {
            return v16;
          }
        }
      }
      return 0;
    }
  }
  else if (*((unsigned char *)this + 31))
  {
    goto LABEL_3;
  }
  uint64_t result = *((void *)this + 5);
  if (!result) {
    return result;
  }
  if (!*((void *)a2 + 5)) {
    return 0;
  }
  return IpAddress::equalsWithDefaultPort(result, (uint64_t)a2 + 40, a3);
}

ImsOutStream *SipHost::toStream(SipHost *this, ImsOutStream *a2)
{
  return SipHost::toStream(this, a2, 1);
}

void std::__shared_ptr_emplace<Ip4Address>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CA7B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Ip4Address>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CA7B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<Ip4Address>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void SipMultiPartBody::SipMultiPartBody(SipMultiPartBody *this)
{
  *(void *)this = &unk_1F20CA800;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  ImsRandomNumberGenerator<unsigned char>::ImsRandomNumberGenerator((void *)this + 7);
}

void sub_1C53E61A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*(void **)(v1 + 32));
  }
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void SipMultiPartBody::addPart(SipMultiPartBody *this, SipBodyPart *a2)
{
  unint64_t v6 = *((void *)this + 3);
  uint64_t v4 = (char *)this + 24;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    int v9 = (void **)(v4 - 16);
    uint64_t v10 = *((void *)v4 - 2);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<SipBodyPart *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      BOOL v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)v4, v14);
    }
    else {
      BOOL v15 = 0;
    }
    unsigned int v16 = &v15[8 * v11];
    char v17 = &v15[8 * v14];
    *(void *)unsigned int v16 = a2;
    uint64_t v8 = v16 + 8;
    long long v19 = (char *)*((void *)this + 1);
    uint64_t v18 = (char *)*((void *)this + 2);
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - BambiCallParticipant::setState((uint64_t)this, 10, 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*v9;
    }
    *((void *)this + BambiCallParticipant::setState((uint64_t)this, 10, 1) = v16;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  *((void *)this + 2) = v8;
}

void SipMultiPartBody::~SipMultiPartBody(SipMultiPartBody *this)
{
  *(void *)this = &unk_1F20CA800;
  uint64_t v2 = (SipBodyPart **)*((void *)this + 1);
  uint64_t v3 = (SipBodyPart **)*((void *)this + 2);
  while (v2 != v3)
  {
    if (*v2)
    {
      SipBodyPart::~SipBodyPart(*v2);
      MEMORY[0x1C878E320]();
    }
    ++v2;
  }
  ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator((void *)this + 7);
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
}

{
  uint64_t vars8;

  SipMultiPartBody::~SipMultiPartBody(this);
  JUMPOUT(0x1C878E320);
}

BOOL SipMultiPartBody::initWithContentTypeHeader(SipMultiPartBody *this, const SipContentTypeHeader *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "boundary");
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a2 + 72, __p);
  if ((void **)((char *)a2 + 80) == v4) {
    unint64_t v5 = (const std::string *)&ims::kEmptyString;
  }
  else {
    unint64_t v5 = (const std::string *)(v4 + 7);
  }
  std::string::operator=((std::string *)((char *)this + 32), v5);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  ims::removeQuotes((uint64_t)this + 32);
  if (*((char *)this + 55) < 0) {
    uint64_t v6 = *((void *)this + 5);
  }
  else {
    uint64_t v6 = *((unsigned __int8 *)this + 55);
  }
  return v6 != 0;
}

void sub_1C53E642C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipMultiPartBody::fillContentTypeHeader(SipMultiPartBody *this, SipContentTypeHeader *a2)
{
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 55)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (!*((void *)this + 5)) {
LABEL_3:
  }
    SipMultiPartBody::generateBoundary(this);
LABEL_4:
  uint64_t v4 = (const std::string *)(*(uint64_t (**)(SipMultiPartBody *))(*(void *)this + 40))(this);
  std::string::operator=((std::string *)((char *)a2 + 104), v4);
  std::string::basic_string[abi:ne180100]<0>(__p, "boundary");
  uint64_t v8 = __p;
  unint64_t v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 9, __p, (uint64_t)&std::piecewise_construct, (long long **)&v8);
  std::string::operator=((std::string *)(v5 + 7), (const std::string *)((char *)this + 32));
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C53E6524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipMultiPartBody::generateBoundary(SipMultiPartBody *this)
{
  memset(&v14, 0, sizeof(v14));
  ImsRandomStringGenerator::randomString((SipMultiPartBody *)((char *)this + 56), 20, &v14);
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v8, 0, sizeof(v8));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"MIME_boundary_", 14);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &v14;
  }
  else {
    uint64_t v3 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, size);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8 + 8, &v6);
  unint64_t v5 = (void **)((char *)this + 32);
  if (*((char *)this + 55) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)unint64_t v5 = v6;
  *((void *)this + 6) = v7;
  *(void *)&v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(*(void *)&v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v8[0] + BambiCallParticipant::setState((uint64_t)this, 10, 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C878E270](v12);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1C53E6718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  if (*(char *)(v5 - 41) < 0) {
    operator delete(*(void **)(v5 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t SipMultiPartBody::contentLength(SipMultiPartBody *this)
{
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 55)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (!*((void *)this + 5)) {
LABEL_3:
  }
    SipMultiPartBody::generateBoundary(this);
LABEL_4:
  uint64_t v2 = (SipBodyPart **)*((void *)this + 1);
  uint64_t v3 = (SipBodyPart **)*((void *)this + 2);
  if (v2 == v3)
  {
    uint64_t v7 = 8;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      if (*((char *)this + 55) < 0) {
        uint64_t v5 = *((void *)this + 5);
      }
      else {
        uint64_t v5 = *((unsigned __int8 *)this + 55);
      }
      long long v6 = *v2++;
      v4 += v5 + SipBodyPart::contentLength(v6) + 6;
    }
    while (v2 != v3);
    uint64_t v7 = v4 + 8;
  }
  if (*((char *)this + 55) < 0) {
    uint64_t v8 = *((void *)this + 5);
  }
  else {
    uint64_t v8 = *((unsigned __int8 *)this + 55);
  }
  return v8 + v7;
}

void *SipMultiPartBody::encode(SipMultiPartBody *this, ImsOutStream *a2)
{
  if (*((char *)this + 55) < 0) {
    uint64_t v4 = *((void *)this + 5);
  }
  else {
    uint64_t v4 = *((unsigned __int8 *)this + 55);
  }
  uint64_t v5 = (char *)this + 32;
  if (!v4) {
    SipMultiPartBody::generateBoundary(this);
  }
  long long v6 = (SipBodyPart **)*((void *)this + 1);
  uint64_t v7 = (SipBodyPart **)*((void *)this + 2);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n--", 4);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
    *((unsigned char *)a2 + 17) = 0;
    SipBodyPart::encode(v8, a2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n--", 4);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, v5);
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"--\r\n", 4);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

uint64_t SipMultiPartBody::decode(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  memset(&v12, 0, sizeof(v12));
  if (a3)
  {
    uint64_t v6 = a3;
    uint64_t v8 = a2 + 4;
    while (1)
    {
      std::string::value_type v9 = std::istream::get();
      std::string::push_back(&v12, v9);
      if (*(_DWORD *)((char *)v8 + *(void *)(*a2 - 24))) {
        break;
      }
      if (!--v6) {
        goto LABEL_5;
      }
    }
    uint64_t v10 = 0;
  }
  else
  {
LABEL_5:
    uint64_t v10 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(void *)a1 + 88))(a1, &v12, a4);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1C53E6A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipMultiPartBody::decode(uint64_t a1, const void **a2)
{
  if (*(char *)(a1 + 55) < 0)
  {
    if (*(void *)(a1 + 40)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 55))
  {
LABEL_3:
    uint64_t v20 = 0;
    std::string::size_type v21 = 0;
    uint64_t v22 = 0;
    std::operator+<char>();
    std::string __p = 0;
    std::string::size_type v18 = 0;
    uint64_t v19 = 0;
    std::operator+<char>();
    if (*((char *)a2 + 23) < 0) {
      uint64_t v3 = *a2;
    }
    else {
      uint64_t v3 = a2;
    }
    std::string __str = (std::string *)a2;
    if (!memcmp(v3, &v20, 0))
    {
      uint64_t v8 = a2;
      if (SHIBYTE(v22) < 0) {
        std::string::size_type v7 = v21;
      }
      else {
        std::string::size_type v7 = HIBYTE(v22);
      }
    }
    else
    {
      std::string::size_type v6 = HIBYTE(v19);
      if (v19 < 0) {
        std::string::size_type v6 = v18;
      }
      std::string::size_type v7 = v6;
      uint64_t v8 = a2;
    }
    int v9 = std::string::compare((const std::string *)v8, v7, 2uLL, "--");
    BOOL v5 = v9 == 0;
    if (v9)
    {
      if (!std::string::compare((const std::string *)v8, v7, 2uLL, "\r\n"))
      {
        unint64_t v10 = *((unsigned __int8 *)v8 + 23);
        if ((v10 & 0x80u) != 0) {
          unint64_t v10 = (unint64_t)v8[1];
        }
        if (v10 >= v7 + 2 && v7 != -3)
        {
          memset(&v16, 0, sizeof(v16));
          std::string::basic_string(&v16, __str, v7 + 2, 0, (std::allocator<char> *)v14);
          operator new();
        }
        std::string::basic_string[abi:ne180100]<0>(&v16, "sip.decode");
        std::string::basic_string[abi:ne180100]<0>(v14, "");
        uint64_t v11 = ims::error((uint64_t)&v16, (uint64_t)v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"SipMultiPartBody: missing boundary", 34);
        *(unsigned char *)(v11 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v16, "sip.decode");
        std::string::basic_string[abi:ne180100]<0>(v14, "");
        uint64_t v11 = ims::error((uint64_t)&v16, (uint64_t)v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"SipMultiPartBody: boundary must be followed by CRLF", 51);
        *(unsigned char *)(v11 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      *(unsigned char *)(v11 + 17) = 0;
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      BOOL v5 = 0;
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v20);
    }
    return v5;
  }
  std::string::basic_string[abi:ne180100]<0>(&v20, "sip.decode");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::error((uint64_t)&v20, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"SipMultiPartBody: no boundary specified in Content-Type header", 62);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v20);
  }
  return 0;
}

void sub_1C53E7180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (*(char *)(v36 - 89) < 0) {
    operator delete(*(void **)(v36 - 112));
  }
  _Unwind_Resume(exception_object);
}

void SipMultiPartBody::encodeContentOnlyToString()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C53E732C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)va);
  _Unwind_Resume(a1);
}

void SipMultiPartBody::addPart()
{
}

void sub_1C53E744C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x20C40DC1BFBCFLL);
  _Unwind_Resume(a1);
}

uint64_t SipMultiPartBody::partWithContentType(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  for (uint64_t i = *(uint64_t **)(a1 + 16); v2 != i; ++v2)
  {
    uint64_t v5 = *v2;
    uint64_t v6 = *(void *)(*v2 + 24);
    if (v6)
    {
      std::string::size_type v7 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
      uint64_t v8 = v7[23];
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = v7[23];
      }
      else {
        uint64_t v9 = *((void *)v7 + 1);
      }
      uint64_t v10 = a2[23];
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *((void *)a2 + 1);
      }
      if (v9 == v10)
      {
        if (v11 >= 0) {
          std::string v12 = a2;
        }
        else {
          std::string v12 = *(unsigned __int8 **)a2;
        }
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v7, v12, *((void *)v7 + 1))) {
            return v5;
          }
        }
        else
        {
          if (!v7[23]) {
            return v5;
          }
          while (*v7 == *v12)
          {
            ++v7;
            ++v12;
            if (!--v8) {
              return v5;
            }
          }
        }
      }
    }
  }
  return 0;
}

void SipMultiPartBody::clone(SipMultiPartBody *this)
{
}

void sub_1C53E7640(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*(void **)(v1 + 32));
  }
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x1C878E320](v1, 0x10B3C401BA7B717);
  _Unwind_Resume(a1);
}

const char *SipMultiPartBody::contentType(SipMultiPartBody *this)
{
  return "multipart/mixed";
}

void std::vector<SipBodyPart *>::__throw_length_error[abi:ne180100]()
{
}

void SipAcceptLanguageHeader::~SipAcceptLanguageHeader(char **this)
{
  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipAcceptLanguageHeader::clone(SipAcceptLanguageHeader *this)
{
}

void sub_1C53E7804(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

void XcapSession::XcapSession(uint64_t a1, uint64_t a2, XcapConfig *a3, long long *a4)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F20CA928;
  *(void *)(a1 + 8) = &unk_1F20CA9A8;
  XcapConfig::XcapConfig((XcapConfig *)(a1 + 40), a3);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 400), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v7 = *a4;
    *(void *)(a1 + 416) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 400) = v7;
  }
  *(void *)(a1 + 424) = a2;
  *(void *)(a1 + 464) = MEMORY[0x1E4F14428];
  std::string::basic_string[abi:ne180100]<0>(v11, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v11, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Creating XcapSession: ", 22);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  *(void *)(a1 + 32) = ++XcapSession::_generateSessionId(void)const::kSessionId;
  operator new();
}

void sub_1C53E7A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  XcapConfig::~XcapConfig(v21);
  long long v23 = *(std::__shared_weak_count **)(v20 + 24);
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  _Unwind_Resume(a1);
}

void XcapSession::~XcapSession(XcapSession *this)
{
  *(void *)this = &unk_1F20CA928;
  *((void *)this + BambiCallParticipant::setState((uint64_t)this, 10, 1) = &unk_1F20CA9A8;
  std::string::basic_string[abi:ne180100]<0>(v9, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v9, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Deleting XcapSession: ", 22);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  _Block_release(*((const void **)this + 54));
  uint64_t v3 = *((void *)this + 55);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 56);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 57);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (*((char *)this + 423) < 0) {
    operator delete(*((void **)this + 50));
  }
  XcapConfig::~XcapConfig((void **)this + 5);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

{
  uint64_t vars8;

  XcapSession::~XcapSession(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'XcapSession::~XcapSession(XcapSession *this)
{
}

{
  uint64_t vars8;

  XcapSession::~XcapSession((XcapSession *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

uint64_t XcapSession::fetchDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, long long *, uint64_t))(*(void *)a1 + 104))(a1, 0, a2, &ims::kEmptyString, a3);
}

uint64_t XcapSession::setDocument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104))(a1, 1, a2, a3, a4);
}

void XcapSession::_sendRequest(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *aBlock)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 432) = _Block_copy(aBlock);
  uint64_t v9 = *(void *)(a1 + 440);
  int v10 = *(unsigned __int8 *)(a1 + 172);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v9 + 80))(&v28, v9);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 440) + 88))(*(void *)(a1 + 440));
  char v12 = (*(uint64_t (**)(uint64_t, BOOL, void **, uint64_t))(*(void *)v9 + 72))(v9, v10 != 0, &v28, v11);
  char v13 = v12;
  if ((v31 & 0x80000000) == 0)
  {
    if (v12) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v28 = &unk_1F20B2680;
    char v29 = &_bambiDomain;
    int v30 = 0x40000000;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    XcapSession::operationFailure((XcapSession *)a1, (const ImsResult *)&v28);
    ImsResult::~ImsResult((ImsResult *)&v28);
    return;
  }
  operator delete(v28);
  if ((v13 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  if (a2)
  {
    uint64_t v14 = *(unsigned __int8 *)(a4 + 23);
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(a4 + 8);
    }
    if (!v14)
    {
      std::string::basic_string[abi:ne180100]<0>(&v28, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v15 = ims::error((uint64_t)&v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v15 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"PUT request doesn't have a body. Failing request", 48);
      *(unsigned char *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v15 + 17) = 0;
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (v31 < 0) {
        operator delete(v28);
      }
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v28 = &unk_1F20B2680;
      char v29 = &_bambiDomain;
      int v30 = 0x40000000;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      XcapSession::operationFailure((XcapSession *)a1, (const ImsResult *)&v28);
      ImsResult::~ImsResult((ImsResult *)&v28);
    }
    uint64_t v16 = *(void *)(a1 + 440);
    XcapUrlHelper::createUrl((uint64_t *)(a3 + 16), (uint64_t *)(a3 + 40), &v28);
    char v17 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v16 + 128))(v16, &v28, a4);
    char v18 = v17;
    if (v31 < 0)
    {
      operator delete(v28);
      if (v18) {
        goto LABEL_25;
      }
    }
    else if (v17)
    {
      goto LABEL_25;
    }
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v28 = &unk_1F20B2680;
    char v29 = &_bambiDomain;
    int v30 = 0x40000000;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    XcapSession::operationFailure((XcapSession *)a1, (const ImsResult *)&v28);
LABEL_24:
    ImsResult::~ImsResult((ImsResult *)&v28);
    goto LABEL_25;
  }
  uint64_t v19 = *(void *)(a1 + 440);
  XcapUrlHelper::createUrl((uint64_t *)(a3 + 16), (uint64_t *)(a3 + 40), &v28);
  char v20 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v19 + 120))(v19, &v28);
  char v21 = v20;
  if (v31 < 0)
  {
    operator delete(v28);
    if (v21) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  if ((v20 & 1) == 0)
  {
LABEL_21:
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v28 = &unk_1F20B2680;
    char v29 = &_bambiDomain;
    int v30 = 0x40000000;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    XcapSession::operationFailure((XcapSession *)a1, (const ImsResult *)&v28);
    goto LABEL_24;
  }
LABEL_25:
  uint64_t v23 = *(void *)(a1 + 16);
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v22)
  {
    if (!*(_DWORD *)(a1 + 320)) {
      return;
    }
    long long v24 = *(int8x8_t **)(a1 + 456);
LABEL_30:
    unint64_t v39 = 0;
    int v25 = operator new(0x20uLL);
    *int v25 = &unk_1F20CAA70;
    v25[1] = a1;
    void v25[2] = v23;
    v25[3] = v22;
    unint64_t v39 = v25;
    SipTimerContainer::startTimer(v24, (uint64_t)&XcapSession::kRequestTimeoutTimerId);
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v38);
    if (!v22) {
      return;
    }
    goto LABEL_31;
  }
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (*(_DWORD *)(a1 + 320))
  {
    long long v24 = *(int8x8_t **)(a1 + 456);
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_30;
  }
LABEL_31:
  std::__shared_weak_count::__release_weak(v22);
  std::__shared_weak_count::__release_weak(v22);
}

void sub_1C53E82E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t XcapSession::operationFailure(XcapSession *this, const ImsResult *a2)
{
  return (*(uint64_t (**)(void, XcapSession *))(**((void **)this + 53) + 56))(*((void *)this + 53), this);
}

void sub_1C53E8408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XcapSession::deleteDocument()
{
  std::string::basic_string[abi:ne180100]<0>(v3, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v0 = ims::warn((uint64_t)v3, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v0 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v0 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v0 + 8), (uint64_t)"Not implemented", 15);
  *(unsigned char *)(v0 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v0 + 64))(v0, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v0 + 17) = 0;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_1C53E8504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XcapSession::setDigestCredentials(XcapSession *this, const SipAuthResponse *lpsrc)
{
  {
    uint64_t v4 = *((void *)this + 56);
LABEL_5:
    uint64_t v5 = *(void (**)(void))(*(void *)v4 + 104);
    v5();
    return;
  }
  {
    uint64_t v4 = *((void *)this + 55);
    goto LABEL_5;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  uint64_t v6 = ims::error((uint64_t)__p, (uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Non Digest/AKA authentication response is currently unsupported. Terminating session", 84);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  __p[0] = &unk_1F20B2680;
  __p[1] = &_bambiDomain;
  int v8 = 0x40000000;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  XcapSession::operationFailure(this, (const ImsResult *)__p);
  ImsResult::~ImsResult((ImsResult *)__p);
}

void sub_1C53E873C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void XcapSession::setGbaNafCredentials(uint64_t a1, uint64_t *a2)
{
  if (*a2 == a2[1])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v20, "");
    uint64_t v4 = ims::error((uint64_t)__p, (uint64_t)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Failed to fetch Ks_Ext_Naf", 26);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = *(void *)(a1 + 432);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    __p[0] = &unk_1F20B2680;
    __p[1] = &_bambiDomain;
    int v12 = 0x40000000;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    v20[1] = 0;
    uint64_t v21 = 0;
    v20[0] = 0;
    (*(void (**)(uint64_t, void **, void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 16))(v10, __p, v20, v5, v6, v7, v8, v9);
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
    ImsResult::~ImsResult((ImsResult *)__p);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 424) + 56))(*(void *)(a1 + 424), a1);
  }
  else
  {
    uint64_t v3 = *(void **)(a1 + 440);
    XcapNafServerInfo::setGbaNafCredentials(v3, a2);
  }
}

void sub_1C53E8934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 17) < 0) {
    operator delete(*(void **)(v14 - 40));
  }
  ImsResult::~ImsResult((ImsResult *)&__p);
  _Unwind_Resume(a1);
}

void XcapSession::handleTimer(void *a1, uint64_t a2)
{
  memset(&v12, 0, sizeof(v12));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v12 = *(std::string *)a2;
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (!v3 || (uint64_t v4 = a1[2], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v5;
  p_shared_weak_owners = &v5->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  uint64_t v8 = a1[58];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN11XcapSession11handleTimerERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_39;
  _OWORD v9[4] = a1;
  void v9[5] = v4;
  uint64_t v10 = v6;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v12;
  }
  dispatch_async(v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  std::__shared_weak_count::__release_weak(v6);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_1C53E8AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v24);
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN11XcapSession11handleTimerERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
  {
    uint64_t v4 = 0;
LABEL_20:
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v21, "");
    uint64_t v10 = ims::warn((uint64_t)__p, (uint64_t)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Timer [", 7);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 32))(v10, &XcapSession::kRequestTimeoutTimerId);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"] fired but XcapSession object already deleted: no-op.", 54);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_21;
  }
  uint64_t v3 = *(XcapSession **)(a1 + 32);
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4 || !*(void *)(a1 + 40)) {
    goto LABEL_20;
  }
  uint64_t v5 = *(unsigned __int8 *)(a1 + 79);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 79);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 64);
  }
  uint64_t v7 = qword_1EBBDBA70;
  if (byte_1EBBDBA7F >= 0) {
    uint64_t v7 = byte_1EBBDBA7F;
  }
  if (v6 == v7)
  {
    if (byte_1EBBDBA7F >= 0) {
      uint64_t v8 = &XcapSession::kRequestTimeoutTimerId;
    }
    else {
      uint64_t v8 = (uint64_t *)XcapSession::kRequestTimeoutTimerId;
    }
    if ((v5 & 0x80) == 0)
    {
      if (*(unsigned char *)(a1 + 79))
      {
        uint64_t v9 = (unsigned __int8 *)(a1 + 56);
        while (*v9 == *(unsigned __int8 *)v8)
        {
          ++v9;
          uint64_t v8 = (uint64_t *)((char *)v8 + 1);
          if (!--v5) {
            goto LABEL_30;
          }
        }
        goto LABEL_29;
      }
LABEL_30:
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(v21, "");
      uint64_t v11 = ims::warn((uint64_t)__p, (uint64_t)v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v11 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Timer fired as XCAP transaction didn't complete in ", 51);
      *(unsigned char *)(v11 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v11 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" seconds", 8);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v11 + 17) = 0;
      if (v22 < 0) {
        operator delete(v21[0]);
      }
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      __p[0] = &unk_1F20B2680;
      __p[1] = &_bambiDomain;
      int v13 = 0x40000000;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      XcapSession::operationFailure(v3, (const ImsResult *)__p);
      ImsResult::~ImsResult((ImsResult *)__p);
LABEL_26:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      return;
    }
    if (!memcmp(*(const void **)(a1 + 56), v8, *(void *)(a1 + 64))) {
      goto LABEL_30;
    }
  }
LABEL_29:
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  uint64_t v10 = ims::warn((uint64_t)__p, (uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Timer fired but invalid timer Id. Expected [", 44);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 32))(v10, &XcapSession::kRequestTimeoutTimerId);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"], Actual [", 11);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a1 + 56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_21:
  *(unsigned char *)(v10 + 17) = 0;
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v4) {
    goto LABEL_26;
  }
}

void sub_1C53E8F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11XcapSessionEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C53E9044(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11XcapSessionEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  char v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void XcapSession::loggableName(LoggableString *a1@<X8>)
{
}

void non-virtual thunk to'XcapSession::loggableName(LoggableString *a1@<X8>)
{
}

uint64_t XcapSession::fetchNafHost(XcapSession *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 55) + 80))();
}

uint64_t XcapSession::fetchBsfHost(XcapSession *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 56) + 80))();
}

uint64_t XcapSession::fetchNafPort(XcapSession *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 55) + 88))();
}

uint64_t XcapSession::fetchBsfPort(XcapSession *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 56) + 88))();
}

uint64_t XcapSession::operationSuccess(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 432);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v5[0] = &unk_1F20B2680;
  v5[1] = &_bambiDomain;
  int v6 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  (*(void (**)(void))(v2 + 16))();
  ImsResult::~ImsResult((ImsResult *)v5);
  SipTimerContainer::cancelAllTimers(*(SipTimerContainer **)(a1 + 456));
  if (*(unsigned char *)(a1 + 328))
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 440) + 96))(*(void *)(a1 + 440)))
    {
      uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 440) + 112))(*(void *)(a1 + 440));
      if (v3) {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 424) + 40))(*(void *)(a1 + 424), v3);
      }
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 424) + 56))(*(void *)(a1 + 424), a1);
}

void sub_1C53E92B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void XcapSession::handleNafChallenge(XcapSession *this)
{
  long long v22 = 0u;
  memset(v23, 0, sizeof(v23));
  uint64_t v2 = *((void *)this + 56);
  int v3 = *((unsigned __int8 *)this + 204);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v2 + 80))(__p, v2);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 56) + 88))(*((void *)this + 56));
  char v5 = (*(uint64_t (**)(uint64_t, BOOL, void **, uint64_t))(*(void *)v2 + 72))(v2, v3 != 0, __p, v4);
  char v6 = v5;
  if ((v13 & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_3;
    }
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v20, "");
    uint64_t v10 = ims::error((uint64_t)__p, (uint64_t)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Failed to initialize BSF Transport", 34);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if ((v6 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v7 = *((void *)this + 56);
  XcapUrlHelper::createUrl((uint64_t *)v23, (uint64_t *)&v23[1] + 1, __p);
  char v8 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 120))(v7, __p);
  char v9 = v8;
  if ((v13 & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if ((v9 & 1) == 0)
  {
LABEL_13:
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    __p[0] = &unk_1F20B2680;
    __p[1] = &_bambiDomain;
    int v12 = 0x40000000;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    XcapSession::operationFailure(this, (const ImsResult *)__p);
    ImsResult::~ImsResult((ImsResult *)__p);
  }
LABEL_14:
  XcapUri::~XcapUri((XcapUri *)&v22);
}

void sub_1C53E9574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
}

void XcapSession::onBootstrappingProcedureSuccess(XcapBsfServerInfo **this)
{
  if (*((_DWORD *)this + 66))
  {
    char v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    std::vector<unsigned char>::__append((unint64_t *)&v36, 0x20uLL);
    Cuint64_t k = XcapBsfServerInfo::fetchCk(this[56]);
    Iuint64_t k = XcapBsfServerInfo::fetchIk(this[56]);
    if (!Ck || !Ik)
    {
      std::string::basic_string[abi:ne180100]<0>(&v69, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(&v68, "");
      uint64_t v13 = ims::error((uint64_t)&v69, (uint64_t)&v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"GBA_ME failure. Invalid Ck/Ik", 29);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v71) < 0) {
        operator delete(v69);
      }
      int v14 = 0;
LABEL_53:
      if (v36)
      {
        uint64_t v37 = (uint64_t *)v36;
        operator delete(v36);
      }
      if (v14)
      {
        std::string::basic_string[abi:ne180100]<0>(&v36, (char *)kXcapLoggingFacility);
        std::string::basic_string[abi:ne180100]<0>(&v69, "");
        uint64_t v16 = ims::debug((uint64_t)&v36, (uint64_t)&v69);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)": ", 2);
        *(unsigned char *)(v16 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"GBA_ME: Ks_Naf = ", 17);
        *(unsigned char *)(v16 + 17) = 0;
        logBytes((uint64_t *)&v45, &v68);
        (*(void (**)(uint64_t, std::string *))(*(void *)v16 + 32))(v16, &v68);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v16 + 17) = 0;
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v68.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71) < 0) {
          operator delete(v69);
        }
        if (SHIBYTE(v38) < 0) {
          operator delete(v36);
        }
        (*((void (**)(XcapBsfServerInfo **, void **))*this + 10))(this, &v45);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v36, (char *)kXcapLoggingFacility);
        std::string::basic_string[abi:ne180100]<0>(&v69, "");
        uint64_t v17 = ims::error((uint64_t)&v36, (uint64_t)&v69);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)": ", 2);
        *(unsigned char *)(v17 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"GBA_ME failure. Failed to compute KsNaf", 39);
        *(unsigned char *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v17 + 17) = 0;
        if (SHIBYTE(v71) < 0) {
          operator delete(v69);
        }
        if (SHIBYTE(v38) < 0) {
          operator delete(v36);
        }
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        uint64_t v36 = &unk_1F20B2680;
        uint64_t v37 = &_bambiDomain;
        LODWORD(v38) = 0x40000000;
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        XcapSession::operationFailure((XcapSession *)this, (const ImsResult *)&v36);
        ImsResult::~ImsResult((ImsResult *)&v36);
      }
      int v12 = v45;
      if (v45)
      {
        uint64_t v46 = v45;
        goto LABEL_70;
      }
      return;
    }
    *(_OWORD *)uint64_t v36 = *Ck;
    *((_OWORD *)v36 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = *Ik;
    std::string::basic_string[abi:ne180100]<0>(&v69, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&v68, "");
    uint64_t v4 = ims::debug((uint64_t)&v69, (uint64_t)&v68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"GBA_ME: Key = ", 14);
    *(unsigned char *)(v4 + 17) = 0;
    logBytes((uint64_t *)&v36, &v67);
    (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 32))(v4, &v67);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v71) < 0) {
      operator delete(v69);
    }
    std::string::size_type v69 = 0;
    size_t v70 = 0;
    uint64_t v71 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v69, "gba-me");
    if (v71 >= 0) {
      char v5 = (char *)&v69;
    }
    else {
      char v5 = (char *)v69;
    }
    if (v71 >= 0) {
      size_t v6 = HIBYTE(v71);
    }
    else {
      size_t v6 = v70;
    }
    memset(&v68, 0, sizeof(v68));
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((char *)&v68, v5, &v5[v6], v6);
    unsigned __int16 v66 = LOWORD(v68.__r_.__value_.__r.__words[1]) - LOWORD(v68.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v67, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&v63, "");
    uint64_t v7 = ims::debug((uint64_t)&v67, (uint64_t)&v63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"GBA_ME: P0 = ", 13);
    *(unsigned char *)(v7 + 17) = 0;
    logBytes((uint64_t *)&v68, &v60);
    (*(void (**)(uint64_t, unsigned char **))(*(void *)v7 + 32))(v7, &v60);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (SHIBYTE(v62) < 0) {
      operator delete(v60);
    }
    if (SHIBYTE(v65) < 0) {
      operator delete(v63);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    memset(&v67, 0, sizeof(v67));
    XcapBsfServerInfo::fetchRand(this[56], &v67);
    unsigned __int16 v59 = LOWORD(v67.__r_.__value_.__r.__words[1]) - LOWORD(v67.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v63, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&v60, "");
    uint64_t v8 = ims::debug((uint64_t)&v63, (uint64_t)&v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"GBA_ME: P1 = ", 13);
    *(unsigned char *)(v8 + 17) = 0;
    logBytes((uint64_t *)&v67, &__p);
    (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (SHIBYTE(v58) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v62) < 0) {
      operator delete(v60);
    }
    if (SHIBYTE(v65) < 0) {
      operator delete(v63);
    }
    if (*((char *)this + 95) < 0)
    {
      char v9 = (char *)this[9];
      size_t v10 = (size_t)this[10];
    }
    else
    {
      char v9 = (char *)(this + 9);
      size_t v10 = *((unsigned __int8 *)this + 95);
    }
    long long v63 = 0;
    long long v64 = 0;
    uint64_t v65 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((char *)&v63, v9, &v9[v10], v10);
    uint64_t v15 = v63;
    if ((unint64_t)(v64 - v63) >> 16)
    {
      int v14 = 0;
      if (!v63)
      {
LABEL_47:
        if (v67.__r_.__value_.__r.__words[0])
        {
          v67.__r_.__value_.__l.__size_ = v67.__r_.__value_.__r.__words[0];
          operator delete(v67.__r_.__value_.__l.__data_);
        }
        if (v68.__r_.__value_.__r.__words[0])
        {
          v68.__r_.__value_.__l.__size_ = v68.__r_.__value_.__r.__words[0];
          operator delete(v68.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71) < 0) {
          operator delete(v69);
        }
        goto LABEL_53;
      }
LABEL_46:
      long long v64 = v15;
      operator delete(v15);
      goto LABEL_47;
    }
    unsigned __int16 v55 = (_WORD)v64 - (_WORD)v63;
    std::string::basic_string[abi:ne180100]<0>(&v60, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v18 = ims::debug((uint64_t)&v60, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"GBA_ME: P2 = ", 13);
    *(unsigned char *)(v18 + 17) = 0;
    logBytes((uint64_t *)&v63, v53);
    (*(void (**)(uint64_t, void **))(*(void *)v18 + 32))(v18, v53);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v54 < 0) {
      operator delete(v53[0]);
    }
    if (SHIBYTE(v58) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v62) < 0) {
      operator delete(v60);
    }
    uint64_t v60 = 0;
    BOOL v61 = 0;
    uint64_t v62 = 0;
    XcapNafServerInfo::nafId(this[55], (uint64_t)&v60);
    uint64_t v19 = v60;
    if ((unint64_t)(v61 - v60) >> 16)
    {
      int v14 = 0;
      if (!v60) {
        goto LABEL_81;
      }
    }
    else
    {
      unsigned __int16 v52 = (_WORD)v61 - (_WORD)v60;
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(v53, "");
      uint64_t v20 = ims::debug((uint64_t)&__p, (uint64_t)v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"GBA_ME: P3 = ", 13);
      *(unsigned char *)(v20 + 17) = 0;
      logBytes((uint64_t *)&v60, v50);
      (*(void (**)(uint64_t, void **))(*(void *)v20 + 32))(v20, v50);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v20 + 17) = 0;
      if (v51 < 0) {
        operator delete(v50[0]);
      }
      if (v54 < 0) {
        operator delete(v53[0]);
      }
      if (SHIBYTE(v58) < 0) {
        operator delete(__p);
      }
      std::string __p = 0;
      char v57 = 0;
      uint64_t v58 = 0;
      std::vector<unsigned char>::__append((unint64_t *)&__p, v66 + (unint64_t)v59 + v55 + (unint64_t)v52 + 9);
      *(unsigned char *)std::string __p = 1;
      if (v68.__r_.__value_.__l.__size_ != v68.__r_.__value_.__r.__words[0]) {
        memmove((char *)__p + 1, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]);
      }
      uint64_t v21 = v66;
      long long v22 = (char *)__p + v66 + 1;
      for (uint64_t i = 1; i != -1; --i)
        *v22++ = *((unsigned char *)&v66 + i);
      uint64_t v24 = v21 + 3;
      if (v67.__r_.__value_.__l.__size_ != v67.__r_.__value_.__r.__words[0]) {
        memmove((char *)__p + v24, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0]);
      }
      uint64_t v25 = v24 + v59;
      uint64_t v26 = (char *)__p + v25;
      for (uint64_t j = 1; j != -1; --j)
        *v26++ = *((unsigned char *)&v59 + j);
      unsigned int v28 = v25 + 2;
      if (v64 != v63) {
        memmove((char *)__p + v28, v63, v64 - v63);
      }
      uint64_t v29 = v28 + v55;
      int v30 = (char *)__p + v29;
      for (uint64_t k = 1; k != -1; --k)
        *v30++ = *((unsigned char *)&v55 + k);
      unsigned int v32 = v29 + 2;
      if (v61 != v60) {
        memmove((char *)__p + v32, v60, v61 - v60);
      }
      uint64_t v33 = (char *)__p + v32 + v52;
      for (uint64_t m = 1; m != -1; --m)
        *v33++ = *((unsigned char *)&v52 + m);
      std::string::basic_string[abi:ne180100]<0>(v53, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(v50, "");
      uint64_t v35 = ims::debug((uint64_t)v53, (uint64_t)v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v35 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"GBA_ME: S = ", 12);
      *(unsigned char *)(v35 + 17) = 0;
      logBytes((uint64_t *)&__p, v48);
      (*(void (**)(uint64_t, void **))(*(void *)v35 + 32))(v35, v48);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v35 + 17) = 0;
      if (v49 < 0) {
        operator delete(v48[0]);
      }
      if (v51 < 0) {
        operator delete(v50[0]);
      }
      if (v54 < 0) {
        operator delete(v53[0]);
      }
      v53[0] = &unk_1F20CA730;
      int v14 = SipSHA256DigestAlgorithm::computeHmac((int)v53, v36, (char *)v37 - (unsigned char *)v36, __p, v57 - (unsigned char *)__p, (unint64_t *)&v45);
      if (__p)
      {
        char v57 = __p;
        operator delete(__p);
      }
      uint64_t v19 = v60;
      if (!v60)
      {
LABEL_81:
        uint64_t v15 = v63;
        if (!v63) {
          goto LABEL_47;
        }
        goto LABEL_46;
      }
    }
    BOOL v61 = v19;
    operator delete(v19);
    goto LABEL_81;
  }
  uint64_t v11 = this[53];
  XcapNafServerInfo::nafId(this[55], (uint64_t)&v36);
  XcapBsfServerInfo::fetchRand(this[56], &v69);
  XcapBsfServerInfo::fetchBTid(this[56], &v68);
  XcapBsfServerInfo::fetchKeyLifetime(this[56], &v67);
  (*(void (**)(XcapBsfServerInfo *, void **, void **, std::string *, std::string *))(*(void *)v11 + 32))(v11, &v36, &v69, &v68, &v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (v69)
  {
    size_t v70 = (size_t)v69;
    operator delete(v69);
  }
  int v12 = v36;
  if (v36)
  {
    uint64_t v37 = (uint64_t *)v36;
LABEL_70:
    operator delete(v12);
  }
}

void sub_1C53EA324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (__p) {
    operator delete(__p);
  }
  unsigned __int16 v52 = *(void **)(v50 - 160);
  if (v52)
  {
    *(void *)(v50 - 152) = v52;
    operator delete(v52);
  }
  char v53 = *(void **)(v50 - 136);
  if (v53)
  {
    *(void *)(v50 - 128) = v53;
    operator delete(v53);
  }
  char v54 = *(void **)(v50 - 104);
  if (v54)
  {
    *(void *)(v50 - 96) = v54;
    operator delete(v54);
  }
  unsigned __int16 v55 = *(void **)(v50 - 80);
  if (v55)
  {
    *(void *)(v50 - 72) = v55;
    operator delete(v55);
  }
  if (*(char *)(v50 - 33) < 0) {
    operator delete(*(void **)(v50 - 56));
  }
  if (a10) {
    operator delete(a10);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void XcapConfig::XcapConfig(XcapConfig *this, const XcapConfig *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *((void *)this + BambiCallParticipant::setState((uint64_t)this, 10, 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 8), *((long long **)a2 + 1), *((long long **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v4 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *((_OWORD *)this + 2) = v4;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 56);
    *((void *)this + 9) = *((void *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v5;
  }
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 5);
    *((void *)this + 12) = *((void *)a2 + 12);
    *((_OWORD *)this + 5) = v6;
  }
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 104);
    *((void *)this + 15) = *((void *)a2 + 15);
    *(_OWORD *)((char *)this + 104) = v7;
  }
  int v8 = *((_DWORD *)a2 + 32);
  *((unsigned char *)this + 132) = *((unsigned char *)a2 + 132);
  *((_DWORD *)this + 32) = v8;
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), *((const std::string::value_type **)a2 + 17), *((void *)a2 + 18));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 136);
    *((void *)this + 19) = *((void *)a2 + 19);
    *(_OWORD *)((char *)this + 136) = v9;
  }
  int v10 = *((_DWORD *)a2 + 40);
  *((unsigned char *)this + 164) = *((unsigned char *)a2 + 164);
  *((_DWORD *)this + 40) = v10;
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 7, *((const std::string::value_type **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v11 = *(_OWORD *)((char *)a2 + 168);
    *((void *)this + 23) = *((void *)a2 + 23);
    *(_OWORD *)((char *)this + 168) = v11;
  }
  *((unsigned char *)this + 192) = *((unsigned char *)a2 + 192);
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), *((const std::string::value_type **)a2 + 25), *((void *)a2 + 26));
  }
  else
  {
    long long v12 = *(_OWORD *)((char *)a2 + 200);
    *((void *)this + 27) = *((void *)a2 + 27);
    *(_OWORD *)((char *)this + 200) = v12;
  }
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  if (*((char *)a2 + 255) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 232), *((const std::string::value_type **)a2 + 29), *((void *)a2 + 30));
  }
  else
  {
    long long v13 = *(_OWORD *)((char *)a2 + 232);
    *((void *)this + 3BambiCallParticipant::setState((uint64_t)this, 10, 1) = *((void *)a2 + 31);
    *(_OWORD *)((char *)this + 232) = v13;
  }
  if (*((char *)a2 + 279) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 256), *((const std::string::value_type **)a2 + 32), *((void *)a2 + 33));
  }
  else
  {
    long long v14 = *((_OWORD *)a2 + 16);
    *((void *)this + 34) = *((void *)a2 + 34);
    *((_OWORD *)this + 16) = v14;
  }
  uint64_t v15 = *((void *)a2 + 35);
  *((unsigned char *)this + 288) = *((unsigned char *)a2 + 288);
  *((void *)this + 35) = v15;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 37) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 296), *((long long **)a2 + 37), *((long long **)a2 + 38), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 38) - *((void *)a2 + 37)) >> 3));
  *((unsigned char *)this + 320) = *((unsigned char *)a2 + 320);
  uint64_t v16 = (std::string *)((char *)this + 328);
  if (*((char *)a2 + 351) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)a2 + 41), *((void *)a2 + 42));
  }
  else
  {
    long long v17 = *(_OWORD *)((char *)a2 + 328);
    *((void *)this + 43) = *((void *)a2 + 43);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  int v18 = *((_DWORD *)a2 + 88);
  *((_WORD *)this + 178) = *((_WORD *)a2 + 178);
  *((_DWORD *)this + 88) = v18;
}

void sub_1C53EA970(_Unwind_Exception *a1, void **a2, void **a3, void **a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v4[279] < 0) {
    operator delete(*v6);
  }
  if (v4[255] < 0) {
    operator delete(*v5);
  }
  if (v4[223] < 0) {
    operator delete(*v10);
  }
  if (v4[191] < 0) {
    operator delete(*v9);
  }
  if (v4[159] < 0) {
    operator delete(*v8);
  }
  if (v4[127] < 0) {
    operator delete(*v7);
  }
  if (v4[103] < 0) {
    operator delete(*a2);
  }
  if (v4[79] < 0) {
    operator delete(*a3);
  }
  if (v4[55] < 0) {
    operator delete(*a4);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20CAA70;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20CAA70;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20CAA70;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20CAA70;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      long long v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C53EACC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_XcapSession_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&XcapSession::kRequestTimeoutTimerId, "XcapTimerId_RequestTimeout");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &XcapSession::kRequestTimeoutTimerId, &dword_1C51D1000);
}

void IBIMediaSessionConfig_s::~IBIMediaSessionConfig_s(IBIMediaSessionConfig_s *this)
{
  uint64_t v2 = (void *)*((void *)this + 57);
  if (v2)
  {
    *((void *)this + 58) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 53);
  if (v3)
  {
    *((void *)this + 54) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 49);
  if (v4)
  {
    *((void *)this + 50) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
  long long v6 = (void *)*((void *)this + 2);
  if (v6)
  {
    *((void *)this + 3) = v6;
    operator delete(v6);
  }
}

uint64_t IBISession::IBISession(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, ImsPrefs *a5, void *a6, char a7, long long *a8, dispatch_object_t *a9)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 112) = &unk_1F20B2FA8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F20C1128;
  long long v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v32 = *a2;
  uint64_t v33 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v14 = (std::__shared_weak_count *)a4[1];
  uint64_t v30 = *a4;
  char v31 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MediaSessionDriver::MediaSessionDriver(a1 + 24, (uint64_t *)&off_1F20CAD48, &v32, a3, &v30, a5, a8, a9);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v33) {
    std::__shared_weak_count::__release_weak(v33);
  }
  *(void *)a1 = &unk_1F20CAAF8;
  *(void *)(a1 + 24) = &unk_1F20CABE0;
  *(void *)(a1 + 112) = &unk_1F20CAD08;
  *(unsigned char *)(a1 + 488) = a7;
  *(void *)(a1 + 496) = a1 + 496;
  *(void *)(a1 + 504) = a1 + 496;
  *(void *)(a1 + 512) = 0;
  IBIMediaSessionConfig_s::IBIMediaSessionConfig_s((IBIMediaSessionConfig_s *)(a1 + 536));
  *(_OWORD *)(a1 + 1032) = 0u;
  *(void *)(a1 + 1048) = *a6;
  uint64_t v15 = a6[1];
  *(void *)(a1 + 1056) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v16 = ims::debug((uint64_t)v34, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"IBISession", 10);
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v35) < 0) {
    operator delete(*(void **)v34);
  }
  IBIMediaSessionConfig_s::IBIMediaSessionConfig_s((IBIMediaSessionConfig_s *)v34);
  long long v17 = (void *)(a1 + 552);
  *(void *)(a1 + 536) = *(void *)v34;
  *(void *)(a1 + 543) = *(void *)&v34[7];
  int v18 = *(void **)(a1 + 552);
  if (v18)
  {
    *(void *)(a1 + 560) = v18;
    operator delete(v18);
    void *v17 = 0;
    *(void *)(a1 + 560) = 0;
    *(void *)(a1 + 568) = 0;
  }
  *(_OWORD *)long long v17 = v35;
  uint64_t v19 = (void *)(a1 + 584);
  *(void *)(a1 + 568) = v36;
  uint64_t v36 = 0;
  long long v35 = 0uLL;
  *(unsigned char *)(a1 + 576) = v37;
  uint64_t v20 = *(void **)(a1 + 584);
  if (v20)
  {
    *(void *)(a1 + 592) = v20;
    operator delete(v20);
    *uint64_t v19 = 0;
    *(void *)(a1 + 592) = 0;
    *(void *)(a1 + 600) = 0;
  }
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v38;
  *(void *)(a1 + 600) = v39;
  v38[1] = 0;
  uint64_t v39 = 0;
  v38[0] = 0;
  memcpy((void *)(a1 + 608), v40, 0x139uLL);
  uint64_t v21 = *(void **)(a1 + 928);
  if (v21)
  {
    *(void *)(a1 + 936) = v21;
    operator delete(v21);
    *(void *)(a1 + 928) = 0;
    *(void *)(a1 + 936) = 0;
    *(void *)(a1 + 944) = 0;
  }
  *(_OWORD *)(a1 + 928) = v41;
  *(void *)(a1 + 944) = v42;
  uint64_t v42 = 0;
  long long v41 = 0uLL;
  *(unsigned char *)(a1 + 952) = v43;
  long long v22 = *(void **)(a1 + 960);
  if (v22)
  {
    *(void *)(a1 + 968) = v22;
    operator delete(v22);
    *(void *)(a1 + 960) = 0;
    *(void *)(a1 + 968) = 0;
    *(void *)(a1 + 976) = 0;
  }
  *(_OWORD *)(a1 + 960) = v44;
  *(void *)(a1 + 976) = v45;
  uint64_t v45 = 0;
  long long v44 = 0uLL;
  *(unsigned char *)(a1 + 984) = v46;
  uint64_t v23 = *(void **)(a1 + 992);
  if (v23)
  {
    *(void *)(a1 + 1000) = v23;
    operator delete(v23);
    *(void *)(a1 + 992) = 0;
    *(void *)(a1 + 1000) = 0;
    *(void *)(a1 + 1008) = 0;
    uint64_t v23 = (void *)v44;
  }
  *(_OWORD *)(a1 + 992) = v47;
  uint64_t v24 = v49;
  *(void *)(a1 + 1008) = v48;
  uint64_t v48 = 0;
  long long v47 = 0uLL;
  *(void *)(a1 + 1016) = v24;
  *(unsigned char *)(a1 + 1024) = v50;
  if (v23)
  {
    *((void *)&v44 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = v23;
    operator delete(v23);
  }
  if ((void)v41)
  {
    *((void *)&v41 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = v41;
    operator delete((void *)v41);
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  uint64_t v25 = (ImsPrefs *)v35;
  if ((void)v35)
  {
    *((void *)&v35 + BambiCallParticipant::setState((uint64_t)this, 10, 1) = v35;
    operator delete((void *)v35);
  }
  *(unsigned char *)(a1 + 489) = 0;
  *(void *)(a1 + 520) = 0;
  RestrictSessionEVSBandwidthKey = (void **)ImsPrefs::getRestrictSessionEVSBandwidthKey(v25);
  *(unsigned char *)(a1 + 528) = ImsPrefs::BOOLValue(a5, RestrictSessionEVSBandwidthKey);
  return a1;
}

void sub_1C53EB288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  char v29 = (std::__shared_weak_count *)v24[132];
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  uint64_t v30 = (std::__shared_weak_count *)v24[130];
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  IBIMediaSessionConfig_s::~IBIMediaSessionConfig_s(v27);
  std::__list_imp<unsigned long long>::clear(v26);
  MediaSessionDriver::~MediaSessionDriver(v25, (uint64_t *)&off_1F20CAD48);
  char v31 = (std::__shared_weak_count *)v24[2];
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  _Unwind_Resume(a1);
}

void IBISession::~IBISession(IBISession *this)
{
  *(void *)this = &unk_1F20CAAF8;
  uint64_t v2 = (IBISession *)((char *)this + 24);
  *((void *)this + 3) = &unk_1F20CABE0;
  *((void *)this + 14) = &unk_1F20CAD08;
  std::string::basic_string[abi:ne180100]<0>(v14, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"~IBISession", 11);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  std::__list_imp<unsigned long long>::clear((void *)this + 62);
  long long v4 = (std::__shared_weak_count *)*((void *)this + 132);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 130);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = (void *)*((void *)this + 124);
  if (v6)
  {
    *((void *)this + 125) = v6;
    operator delete(v6);
  }
  long long v7 = (void *)*((void *)this + 120);
  if (v7)
  {
    *((void *)this + 12BambiCallParticipant::setState((uint64_t)this, 10, 1) = v7;
    operator delete(v7);
  }
  int v8 = (void *)*((void *)this + 116);
  if (v8)
  {
    *((void *)this + 117) = v8;
    operator delete(v8);
  }
  long long v9 = (void *)*((void *)this + 73);
  if (v9)
  {
    *((void *)this + 74) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 69);
  if (v10)
  {
    *((void *)this + 70) = v10;
    operator delete(v10);
  }
  std::__list_imp<unsigned long long>::clear((void *)this + 62);
  MediaSessionDriver::~MediaSessionDriver(v2, (uint64_t *)&off_1F20CAD48);
  long long v11 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

{
  uint64_t vars8;

  IBISession::~IBISession(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'IBISession::~IBISession(IBISession *this)
{
}

{
  IBISession::~IBISession((IBISession *)((char *)this - 112));
}

{
  uint64_t vars8;

  IBISession::~IBISession((IBISession *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  IBISession::~IBISession((IBISession *)((char *)this - 112));
  JUMPOUT(0x1C878E320);
}

void IBISession::initialize(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v93, "");
  uint64_t v12 = ims::debug((uint64_t)&__p, (uint64_t)v93);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v13 = v12;
  long long v14 = *(void **)(v12 + 8);
  size_t v15 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v15);
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"initialize", 10);
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  if (v84 < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 524) = a3;
  if (!*(void *)(a1 + 1032))
  {
    RTPSharedPointerBase::getShared<IBISession>(&__p, a1);
    long long v17 = __p;
    uint64_t v16 = v82;
    int v18 = operator new(0x28uLL);
    uint64_t v19 = v18;
    v18[1] = 0;
    void v18[2] = 0;
    *int v18 = &unk_1F20CB050;
    uint64_t v20 = v18 + 3;
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v18[3] = v17;
      v18[4] = v16;
      atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_weak(v16);
    }
    else
    {
      v18[3] = v17;
      v18[4] = 0;
    }
    *(void *)(a1 + 1032) = v20;
    uint64_t v21 = *(std::__shared_weak_count **)(a1 + 1040);
    *(void *)(a1 + 1040) = v19;
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  long long v22 = (std::__shared_weak_count *)a7[1];
  if (v22)
  {
    uint64_t v23 = std::__shared_weak_count::lock(v22);
    if (v23)
    {
      uint64_t v24 = *a7;
      if (*a7)
      {
        if (!*(unsigned char *)(v24 + 584))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v93, "");
          uint64_t v30 = ims::error((uint64_t)&__p, (uint64_t)v93);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"SDPSession doesn't contain audio settings", 41);
          *(unsigned char *)(v30 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v30 + 17) = 0;
          if (v94 < 0) {
            operator delete(v93[0]);
          }
          if (v84 < 0) {
            operator delete(__p);
          }
          char v31 = *(std::__shared_weak_count **)(a1 + 40);
          if (!v31) {
            goto LABEL_125;
          }
          uint64_t v32 = std::__shared_weak_count::lock(v31);
          if (!v32) {
            goto LABEL_125;
          }
          uint64_t v33 = v32;
          uint64_t v34 = *(void (****)(void, void **, uint64_t))(a1 + 32);
          if (v34)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v91);
            (**v34)(v34, &v91, 9);
            if (v92) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v92);
            }
          }
          long long v35 = v33;
          goto LABEL_124;
        }
        *(_DWORD *)(a1 + 256) = a6;
        uint64_t v89 = 0;
        int64_t v90 = 0;
        RTPTransportManager::getTransport(*(RTPTransportManager **)(a1 + 48), *(unsigned __int16 *)(v24 + 176), &v89);
        uint64_t v25 = v89;
        if (!v89)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v93, "");
          uint64_t v36 = ims::error((uint64_t)&__p, (uint64_t)v93);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"Missing RTP transport", 21);
          *(unsigned char *)(v36 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v36 + 17) = 0;
          if (v94 < 0) {
            operator delete(v93[0]);
          }
          if (v84 < 0) {
            operator delete(__p);
          }
          char v37 = *(std::__shared_weak_count **)(a1 + 40);
          if (!v37 || (uint64_t v38 = std::__shared_weak_count::lock(v37)) == 0)
          {
LABEL_123:
            long long v35 = v90;
            if (!v90)
            {
LABEL_125:
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
              return;
            }
LABEL_124:
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
            goto LABEL_125;
          }
          uint64_t v39 = v38;
          uint64_t v40 = *(void (****)(void, void **, uint64_t))(a1 + 32);
          if (v40)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v87);
            (**v40)(v40, &v87, 9);
            if (v88) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v88);
            }
          }
          long long v41 = v39;
LABEL_122:
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
          goto LABEL_123;
        }
        long long v85 = 0;
        uint64_t v86 = 0;
        std::string __p = 0;
        long long v82 = 0;
        uint64_t v26 = *(std::__shared_weak_count **)(a1 + 40);
        if (v26)
        {
          long long v82 = std::__shared_weak_count::lock(v26);
          if (v82) {
            std::string __p = *(void **)(a1 + 32);
          }
        }
        std::dynamic_pointer_cast[abi:ne180100]<MediaSessionStateMachine,MediaSessionDelegate>(&__p, (void **)&v85);
        if (v82) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v82);
        }
        if (!v85)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v93, "");
          uint64_t v42 = ims::error((uint64_t)&__p, (uint64_t)v93);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"Delegate is not a MediaSessionStateMachine", 42);
          *(unsigned char *)(v42 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v42 + 17) = 0;
          if (v94 < 0) {
            operator delete(v93[0]);
          }
          if (v84 < 0) {
            operator delete(__p);
          }
          goto LABEL_121;
        }
        if (a3)
        {
          char v27 = *(std::__shared_weak_count **)(v24 + 128);
          if (v27)
          {
            char v27 = std::__shared_weak_count::lock(v27);
            unsigned int v28 = v27;
            if (v27) {
              char v27 = *(std::__shared_weak_count **)(v24 + 120);
            }
          }
          else
          {
            unsigned int v28 = 0;
          }
          char v43 = (ImsPrefs *)SipStack::prefs((SipStack *)v27);
          UseRTPDetectionAutoStartKey = (void **)ImsPrefs::getUseRTPDetectionAutoStartKey(v43);
          if (ImsPrefs::BOOLValue(v43, UseRTPDetectionAutoStartKey))
          {
            int v45 = v85[316];
            if (v28) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v28);
            }
            if (v45) {
              goto LABEL_72;
            }
            std::string __p = 0;
            long long v82 = 0;
            RTPTransportManager::getTransport(*(RTPTransportManager **)(a1 + 48), (unsigned __int16)(*(_WORD *)(v24 + 176) + 1), (uint64_t *)&__p);
            (*(void (**)(uint64_t, void))(*(void *)v25 + 88))(v25, 0);
            if (__p) {
              (*(void (**)(void *, void))(*(void *)__p + 88))(__p, 0);
            }
            char v46 = v82;
            if (!v82) {
              goto LABEL_72;
            }
          }
          else
          {
            if (!v28) {
              goto LABEL_72;
            }
            char v46 = v28;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v46);
        }
LABEL_72:
        uint64_t v79 = v24;
        long long v80 = v23;
        atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 200))(&__p, a1, &v79);
        int v47 = ((uint64_t (*)(std::__shared_weak_count *, void))v82->__get_deleter)(v82, v83);
        ImsResult::~ImsResult((ImsResult *)&__p);
        if (v80) {
          std::__shared_weak_count::__release_weak(v80);
        }
        if (v47)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v93, "");
          uint64_t v48 = ims::error((uint64_t)&__p, (uint64_t)v93);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"Failed to generated session config", 34);
          *(unsigned char *)(v48 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v48 + 17) = 0;
          if (v94 < 0) {
            operator delete(v93[0]);
          }
          if (v84 < 0) {
            operator delete(__p);
          }
          uint64_t v49 = *(std::__shared_weak_count **)(a1 + 40);
          if (v49)
          {
            char v50 = std::__shared_weak_count::lock(v49);
            if (v50)
            {
              uint64_t v51 = v50;
              unsigned __int16 v52 = *(void (****)(void, void **, uint64_t))(a1 + 32);
              if (!v52) {
                goto LABEL_104;
              }
              RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v77);
              (**v52)(v52, &v77, 9);
              char v53 = v78;
              if (!v78) {
                goto LABEL_104;
              }
              goto LABEL_103;
            }
          }
        }
        else
        {
          *(unsigned char *)(a1 + 550) = (*(uint64_t (**)(void, void, void))(*(void *)*a2 + 200))(*a2, *(void *)(a1 + 552), *(void *)(a1 + 560) - *(void *)(a1 + 552));
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v93, "");
          uint64_t v54 = ims::debug((uint64_t)&__p, (uint64_t)v93);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)"Generated session config", 24);
          *(unsigned char *)(v54 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v54 + 17) = 0;
          if (v94 < 0) {
            operator delete(v93[0]);
          }
          if (v84 < 0) {
            operator delete(__p);
          }
          uint64_t v55 = *(void *)(a1 + 1048);
          RTPSharedPointerBase::getShared<IBISession>(&v75, a1);
          char v56 = v75;
          char v57 = v76;
          if (v76) {
            atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v58 = *(std::__shared_weak_count **)(v55 + 128);
          *(void *)(v55 + 120) = v56;
          *(void *)(v55 + 128) = v57;
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          if (v57) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v57);
          }
          IBISessionHelper::sendCreateMediaRequest(*(IBISessionHelper **)(a1 + 1032), (uint64_t)&__p);
          int v59 = ((uint64_t (*)(std::__shared_weak_count *, void))v82->__get_deleter)(v82, v83);
          ImsResult::~ImsResult((ImsResult *)&__p);
          if (v59)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
            std::string::basic_string[abi:ne180100]<0>(v93, "");
            uint64_t v60 = ims::error((uint64_t)&__p, (uint64_t)v93);
            BOOL v61 = (unsigned char *)ImsOutStream::operator<<(v60, "Failed to send CreateMedia request");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v61[17] = 0;
            if (v94 < 0) {
              operator delete(v93[0]);
            }
            if (v84 < 0) {
              operator delete(__p);
            }
            uint64_t v62 = *(std::__shared_weak_count **)(a1 + 40);
            if (v62)
            {
              long long v63 = std::__shared_weak_count::lock(v62);
              if (v63)
              {
                uint64_t v51 = v63;
                long long v64 = *(void (****)(void, void **, uint64_t))(a1 + 32);
                if (!v64) {
                  goto LABEL_104;
                }
                RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v73);
                (**v64)(v64, &v73, 9);
                char v53 = v74;
                if (!v74) {
                  goto LABEL_104;
                }
LABEL_103:
                std::__shared_weak_count::__release_shared[abi:ne180100](v53);
LABEL_104:
                std::__shared_weak_count::__release_shared[abi:ne180100](v51);
              }
            }
          }
          else
          {
            RTPSharedPointerBase::getShared<IBISession>(&__p, a1);
            if (__p) {
              uint64_t v65 = (char *)__p + 24;
            }
            else {
              uint64_t v65 = 0;
            }
            uint64_t v71 = v65;
            long long v72 = v82;
            v70[0] = MEMORY[0x1E4F143A8];
            v70[1] = 0x40000000;
            v70[2] = ___ZN10IBISession10initializeERKNSt3__110shared_ptrI9IpAddressEEbRKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEESD_14MediaDirectionNS0_8weak_ptrI10SDPSessionEE_block_invoke;
            v70[3] = &__block_descriptor_tmp_13;
            v70[4] = a1;
            MediaSessionDriver::startTimerForRequest(a1 + 24, 74565, (uint64_t *)&v71, v70);
            if (v72) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v72);
            }
            ++IBISession::_count;
            std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
            std::string::basic_string[abi:ne180100]<0>(v93, "");
            uint64_t v66 = ims::debug((uint64_t)&__p, (uint64_t)v93);
            std::string v67 = (unsigned char *)ImsOutStream::operator<<(v66, "Number of sessions = ");
            std::ostream::operator<<();
            v67[17] = 0;
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v67 + 64))(v67, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v67[17] = 0;
            if (v94 < 0) {
              operator delete(v93[0]);
            }
            if (v84 < 0) {
              operator delete(__p);
            }
            if (!IBISession::_activeAudio && !*(unsigned char *)(a1 + 524))
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
              std::string::basic_string[abi:ne180100]<0>(v93, "");
              uint64_t v68 = ims::debug((uint64_t)&__p, (uint64_t)v93);
              std::string::size_type v69 = (unsigned char *)ImsOutStream::operator<<(v68, "Setup audio device for MT call");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v69 + 64))(v69, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v69[17] = 0;
              if (v94 < 0) {
                operator delete(v93[0]);
              }
              if (v84 < 0) {
                operator delete(__p);
              }
              IBIRTPStackController::sendAudioCallEvent(*(void **)(a1 + 1048));
            }
          }
        }
LABEL_121:
        long long v41 = v86;
        if (!v86) {
          goto LABEL_123;
        }
        goto LABEL_122;
      }
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v93, "");
  uint64_t v29 = ims::error((uint64_t)&__p, (uint64_t)v93);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"sdpSession is null", 18);
  *(unsigned char *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v29 + 17) = 0;
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  if (v84 < 0) {
    operator delete(__p);
  }
  if (v23) {
    goto LABEL_125;
  }
}

void sub_1C53EC340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  long long v41 = *(std::__shared_weak_count **)(v39 - 160);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v39 - 128);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  _Unwind_Resume(a1);
}

void *std::dynamic_pointer_cast[abi:ne180100]<MediaSessionStateMachine,MediaSessionDelegate>@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
  {
    uint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t ___ZN10IBISession10initializeERKNSt3__110shared_ptrI9IpAddressEEbRKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEESD_14MediaDirectionNS0_8weak_ptrI10SDPSessionEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 168))(*(void *)(a1 + 32), 74565);
}

void non-virtual thunk to'IBISession::initialize(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7)
{
}

void IBISession::generateSessionConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (!v5)
  {
    long long v7 = 0;
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(&v196, "");
    uint64_t v17 = ims::error((uint64_t)&__p, (uint64_t)&v196);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"SDPSession expired in IBISession::generateSessionConfiguration", 62);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v196.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741825;
LABEL_23:
    if (!v7) {
      return;
    }
    goto LABEL_24;
  }
  long long v7 = std::__shared_weak_count::lock(v5);
  if (!v7) {
    goto LABEL_18;
  }
  uint64_t v8 = *a2;
  if (!*a2) {
    goto LABEL_18;
  }
  uint64_t v9 = v8 + 152;
  if (*(unsigned char *)(v8 + 584)) {
    uint64_t v10 = v8 + 152;
  }
  else {
    uint64_t v10 = 0;
  }
  if (*(unsigned char *)(v8 + 584))
  {
    uint64_t v188 = v10;
    int v11 = *(unsigned __int8 *)(v8 + 1024);
    uint64_t v12 = *(void *)(v8 + 160);
    uint64_t v13 = *(std::__shared_weak_count **)(v8 + 168);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v14 = *(_WORD *)(v8 + 182) != 255 && v12 == 0;
    if (v14)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(&v196, "");
      uint64_t v20 = ims::error((uint64_t)&__p, (uint64_t)&v196);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Remote connection information not found", 39);
      *(unsigned char *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      size_t v15 = *(std::__shared_weak_count **)(v8 + 128);
      if (v15 && (uint64_t v16 = std::__shared_weak_count::lock(v15)) != 0)
      {
        *(_DWORD *)(a1 + 536) = *(_DWORD *)(*(void *)(v8 + 120) + 4100);
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      else
      {
        *(_DWORD *)(a1 + 536) = MEMORY[0x1004];
      }
      uint64_t v21 = *(std::__shared_weak_count **)(v8 + 128);
      if (v21)
      {
        uint64_t v21 = std::__shared_weak_count::lock(v21);
        long long v22 = v21;
        if (v21) {
          uint64_t v21 = *(std::__shared_weak_count **)(v8 + 120);
        }
      }
      else
      {
        long long v22 = 0;
      }
      uint64_t v23 = (ImsPrefs *)SipStack::prefs((SipStack *)v21);
      EnableIncomingDTMFKey = (void **)ImsPrefs::getEnableIncomingDTMFKey(v23);
      *(unsigned char *)(a1 + 1024) = ImsPrefs::BOOLValue(v23, EnableIncomingDTMFKey);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      __int16 v25 = *(_WORD *)(v8 + 178);
      *(_WORD *)(a1 + 608) = v25;
      *(_WORD *)(a1 + 884) = v25 + 1;
      if (*(_WORD *)(v8 + 180) == 255)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(&v196, "");
        uint64_t v26 = ims::error((uint64_t)&__p, (uint64_t)&v196);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"No compatible media pair available", 34);
        *(unsigned char *)(v26 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v26 + 17) = 0;
        if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v196.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v27 = *(void *)(*(void *)(a1 + 56) + 296);
        if (v27) {
          AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v27 + 120), 25);
        }
LABEL_52:
        *(_OWORD *)(a3 + 24) = 0u;
        *(_OWORD *)(a3 + 40) = 0u;
        *(_OWORD *)(a3 + 56) = 0u;
        *(void *)a3 = &unk_1F20B2680;
        *(void *)(a3 + 8) = &_bambiDomain;
        *(_DWORD *)(a3 + 16) = 1073741825;
LABEL_53:
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        goto LABEL_23;
      }
      unsigned int v28 = (_OWORD *)(v8 + 432);
      v186 = v13;
      if (*(char *)(v8 + 455) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 432), *(void *)(v8 + 440));
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v28;
        __p.__r_.__value_.__r.__words[2] = *(void *)(v8 + 448);
      }
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size == 3)
      {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        int data_low = LOWORD(p_p->__r_.__value_.__l.__data_);
        int v32 = p_p->__r_.__value_.__s.__data_[2];
        BOOL v34 = data_low == 19777 && v32 == 82;
      }
      else
      {
        BOOL v34 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v34)
      {
        if (v11)
        {
          uint64_t v187 = 0;
          __int16 v180 = 0;
          if (*(_WORD *)(v8 + 622) == 255) {
            uint64_t v35 = 0;
          }
          else {
            uint64_t v35 = v8 + 592;
          }
          uint64_t v184 = v35;
          uint64_t v185 = v8 + 152;
          uint64_t v182 = v8 + 152;
          if (*(_WORD *)(v8 + 898) == 255) {
            uint64_t v9 = 0;
          }
          else {
            uint64_t v9 = v8 + 592;
          }
          int v11 = 1;
        }
        else
        {
          uint64_t v184 = 0;
          uint64_t v185 = v8 + 152;
          uint64_t v187 = 0;
          __int16 v180 = 0;
          int v11 = 1;
          uint64_t v182 = v8 + 152;
          uint64_t v9 = 0;
        }
        goto LABEL_112;
      }
      if (*(char *)(v8 + 455) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 432), *(void *)(v8 + 440));
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v28;
        __p.__r_.__value_.__r.__words[2] = *(void *)(v8 + 448);
      }
      std::string::size_type v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v36 = __p.__r_.__value_.__l.__size_;
      }
      if (v36 == 6)
      {
        char v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v37 = &__p;
        }
        int data = (int)v37->__r_.__value_.__l.__data_;
        int v39 = WORD2(v37->__r_.__value_.__r.__words[0]);
        BOOL v41 = data == 760368449 && v39 == 16983;
      }
      else
      {
        BOOL v41 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v41)
      {
        if (v11)
        {
          uint64_t v187 = 0;
          int v11 = 0;
          if (*(_WORD *)(v8 + 622) == 255) {
            uint64_t v42 = 0;
          }
          else {
            uint64_t v42 = v8 + 592;
          }
          uint64_t v185 = v42;
          if (*(_WORD *)(v8 + 898) == 255) {
            uint64_t v43 = 0;
          }
          else {
            uint64_t v43 = v8 + 592;
          }
          uint64_t v182 = v43;
        }
        else
        {
          uint64_t v185 = 0;
          uint64_t v187 = 0;
          uint64_t v182 = 0;
        }
        __int16 v180 = 1;
        uint64_t v184 = v8 + 152;
LABEL_112:
        uint64_t v44 = v188;
        if (v12) {
          *(unsigned char *)(a1 + 576) = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v12 + 200))(v12, *(void *)(a1 + 584), *(void *)(a1 + 592) - *(void *)(a1 + 584));
        }
        *(_DWORD *)(a1 + 540) = *(_DWORD *)(a1 + 256);
        int v45 = *(std::__shared_weak_count **)(v8 + 128);
        if (v45)
        {
          int v45 = std::__shared_weak_count::lock(v45);
          char v46 = v45;
          uint64_t v47 = v185;
          if (v45) {
            int v45 = *(std::__shared_weak_count **)(v8 + 120);
          }
        }
        else
        {
          char v46 = 0;
          uint64_t v47 = v185;
        }
        uint64_t v48 = (ImsPrefs *)SipStack::prefs((SipStack *)v45);
        PacketizationTimeKey = (void **)ImsPrefs::getPacketizationTimeKey(v48);
        *(_WORD *)(a1 + 544) = ImsPrefs::intValue(v48, PacketizationTimeKey);
        if (v46) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v46);
        }
        char v50 = *(std::__shared_weak_count **)(v8 + 128);
        if (v50)
        {
          char v50 = std::__shared_weak_count::lock(v50);
          uint64_t v51 = v50;
          if (v50) {
            char v50 = *(std::__shared_weak_count **)(v8 + 120);
          }
        }
        else
        {
          uint64_t v51 = 0;
        }
        unsigned __int16 v52 = (ImsPrefs *)SipStack::prefs((SipStack *)v50);
        MaxPacketizationTimeKey = (void **)ImsPrefs::getMaxPacketizationTimeKey(v52);
        *(_WORD *)(a1 + 546) = ImsPrefs::intValue(v52, MaxPacketizationTimeKey);
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
        memset(&v196, 0, sizeof(v196));
        if (*(char *)(v8 + 247) < 0) {
          std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)(v8 + 224), *(void *)(v8 + 232));
        }
        else {
          std::string v196 = *(std::string *)(v8 + 224);
        }
        LOBYTE(v54) = *((unsigned char *)&v196.__r_.__value_.__s + 23);
        int v55 = SHIBYTE(v196.__r_.__value_.__r.__words[2]);
        if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          LOBYTE(v54) = v196.__r_.__value_.__s.__data_[8];
        }
        *(unsigned char *)(a1 + 624) = v54;
        uint64_t v54 = v54;
        if ((_BYTE)v54)
        {
          BOOL v56 = v55 < 0;
          char v57 = &v196;
          if (v56) {
            char v57 = (std::string *)v196.__r_.__value_.__r.__words[0];
          }
          uint64_t v58 = (std::string::value_type *)(a1 + 625);
          do
          {
            std::string::value_type v59 = v57->__r_.__value_.__s.__data_[0];
            char v57 = (std::string *)((char *)v57 + 1);
            *v58++ = v59;
            --v54;
          }
          while (v54);
        }
        int v60 = *(_DWORD *)(a1 + 256);
        uint64_t v61 = *(unsigned __int8 *)(a1 + 471);
        if (v60 == 2)
        {
          uint64_t v62 = *(void *)(a1 + 456);
          if ((v61 & 0x80u) == 0) {
            uint64_t v63 = *(unsigned __int8 *)(a1 + 471);
          }
          else {
            uint64_t v63 = *(void *)(a1 + 456);
          }
          if (v63 == 3)
          {
            long long v64 = (v61 & 0x80u) == 0 ? (unsigned __int16 *)(a1 + 448) : *(unsigned __int16 **)(a1 + 448);
            int v65 = *v64;
            int v66 = *((unsigned __int8 *)v64 + 2);
            if (v65 == 21586 && v66 == 80)
            {
              *(_DWORD *)(a1 + 612) = *(unsigned __int16 *)(a1 + 444);
              *(_DWORD *)(a1 + 616) = -1;
              *(void *)(a1 + 896) = 0;
              uint64_t v68 = 436;
              goto LABEL_168;
            }
          }
        }
        else
        {
          uint64_t v62 = *(void *)(a1 + 456);
        }
        int v69 = (char)v61;
        if ((v61 & 0x80u) != 0) {
          uint64_t v61 = v62;
        }
        if (v61 != 4) {
          goto LABEL_157;
        }
        size_t v70 = (_DWORD *)(a1 + 448);
        if (v69 < 0) {
          size_t v70 = *(_DWORD **)(a1 + 448);
        }
        if (*v70 == 1346589778)
        {
          *(_DWORD *)(a1 + 612) = -1;
          unsigned int v74 = *(unsigned __int16 *)(a1 + 446);
          *(_DWORD *)(a1 + 616) = v74;
          unsigned int v75 = *(unsigned __int16 *)(a1 + 444);
          if (v74 < v75) {
            *(_DWORD *)(a1 + 616) = v75;
          }
          double v76 = (double)*(unint64_t *)(a1 + 1016);
          *(_DWORD *)(a1 + 900) = (unint64_t)(v76 * 37.5);
          unint64_t v72 = (unint64_t)(v76 * 12.5);
        }
        else
        {
LABEL_157:
          unsigned int v71 = *(unsigned __int16 *)(a1 + 444);
          *(_DWORD *)(a1 + 612) = v71;
          if (*(unsigned __int16 *)(a1 + 446) > v71) {
            unsigned int v71 = *(unsigned __int16 *)(a1 + 446);
          }
          *(_DWORD *)(a1 + 616) = v71;
          if (v60 == 1 && (LODWORD(v72) = *(_DWORD *)(a1 + 432), !v72))
          {
            *(_DWORD *)(a1 + 900) = 0;
          }
          else
          {
            double v73 = (double)*(unint64_t *)(a1 + 1016);
            *(_DWORD *)(a1 + 900) = (unint64_t)(v73 * 37.5);
            unint64_t v72 = (unint64_t)(v73 * 12.5);
          }
        }
        *(_DWORD *)(a1 + 896) = v72;
        BOOL v14 = v60 == 1;
        uint64_t v68 = 436;
        if (v14) {
          uint64_t v68 = 432;
        }
LABEL_168:
        *(_DWORD *)(a1 + 888) = *(_DWORD *)(a1 + v68);
        __int16 v77 = *(_WORD *)(v188 + 24);
        *(_WORD *)(a1 + 610) = v77;
        *(_WORD *)(a1 + 882) = v77 + 1;
        if (v47)
        {
          uint64_t v78 = *(void *)(a1 + 928);
          *(_DWORD *)uint64_t v78 = 3;
          *(unsigned char *)(v78 + 40) = *(unsigned char *)(v47 + 28);
          *(unsigned char *)(v78 + 4BambiCallParticipant::setState((uint64_t)this, 10, 1) = *(unsigned char *)(v47 + 30);
          *(_DWORD *)(v78 + 44) = *(unsigned __int16 *)(v47 + 308);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3020;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)(v47 + 328);
          long long v193 = *(_OWORD *)(v47 + 344);
          char v79 = v11;
          if (v11)
          {
            uint64_t v80 = *(void *)(*(void *)(a1 + 56) + 296);
            if (v80)
            {
              __int16 v81 = WORD1(__p.__r_.__value_.__r.__words[1]);
              uint64_t v82 = *(void *)(v80 + 120);
              *(_WORD *)(v82 + 488) = v180;
              *(_WORD *)(v82 + 490) = v81;
            }
          }
          *(_DWORD *)(v78 + 20) = __p.__r_.__value_.__s.__data_[8] == 0;
          *(_WORD *)(v78 + 28) = HIWORD(__p.__r_.__value_.__r.__words[1]);
          std::string::basic_string[abi:ne180100]<0>(v194, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v190, "");
          uint64_t v83 = ims::debug((uint64_t)v194, (uint64_t)v190);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v83 + 8), (uint64_t)"codec[codecsIndex] max_redundancy_duration : ", 45);
          *(unsigned char *)(v83 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v83 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v83 + 64))(v83, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v83 + 17) = 0;
          if (v191 < 0) {
            operator delete(v190[0]);
          }
          if (v195 < 0) {
            operator delete(v194[0]);
          }
          *(_WORD *)(*(void *)(a1 + 928) + 26) = 2 * WORD2(__p.__r_.__value_.__r.__words[1]);
          std::string::basic_string[abi:ne180100]<0>(v194, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v190, "");
          uint64_t v84 = ims::debug((uint64_t)v194, (uint64_t)v190);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v84 + 8), (uint64_t)"codec[codecsIndex] mode_set = ", 30);
          *(unsigned char *)(v84 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v84 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v84 + 64))(v84, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v84 + 17) = 0;
          if (v191 < 0) {
            operator delete(v190[0]);
          }
          if (v195 < 0) {
            operator delete(v194[0]);
          }
          *(unsigned char *)(*(void *)(a1 + 928) + 36) = __p.__r_.__value_.__s.__data_[10];
          std::string::basic_string[abi:ne180100]<0>(v194, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v190, "");
          uint64_t v85 = ims::debug((uint64_t)v194, (uint64_t)v190);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v85 + 8), (uint64_t)"codec[codecsIndex] start_mode_ul = ", 35);
          *(unsigned char *)(v85 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v85 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v85 + 64))(v85, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v85 + 17) = 0;
          if (v191 < 0) {
            operator delete(v190[0]);
          }
          if (v195 < 0) {
            operator delete(v194[0]);
          }
          uint64_t v86 = *(void *)(a1 + 928);
          *(_DWORD *)(v86 + 8) = WORD2(__p.__r_.__value_.__r.__words[2]);
          *(_DWORD *)(v86 + 4) = LOWORD(__p.__r_.__value_.__r.__words[2]);
          *(unsigned char *)(v86 + 24) = __p.__r_.__value_.__s.__data_[18];
          std::string v87 = *(std::__shared_weak_count **)(v8 + 128);
          if (v87)
          {
            std::string v87 = std::__shared_weak_count::lock(v87);
            std::string v88 = v87;
            if (v87) {
              std::string v87 = *(std::__shared_weak_count **)(v8 + 120);
            }
          }
          else
          {
            std::string v88 = 0;
          }
          int64_t v90 = (ImsPrefs *)SipStack::prefs((SipStack *)v87);
          EnableDTXKey = (void **)ImsPrefs::getEnableDTXKey(v90);
          int v92 = ImsPrefs::BOOLValue(v90, EnableDTXKey);
          uint64_t v93 = *(void *)(a1 + 928);
          *(_DWORD *)(v93 + 32) = v92;
          if (v88)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v88);
            uint64_t v93 = *(void *)(a1 + 928);
          }
          int v94 = *(unsigned __int8 *)(v93 + 40);
          int v95 = *(unsigned __int8 *)(v93 + 41);
          if (v94 == 255)
          {
            *(unsigned char *)(v93 + 40) = v95;
            LOBYTE(v94) = v95;
          }
          if (v95 == 255) {
            *(unsigned char *)(v93 + 4BambiCallParticipant::setState((uint64_t)this, 10, 1) = v94;
          }
          unsigned int v189 = 1;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v194, "");
          char v79 = v11;
          uint64_t v89 = ims::debug((uint64_t)&__p, (uint64_t)v194);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v89 + 8), (uint64_t)"NB codec not present in SDP Media format", 40);
          *(unsigned char *)(v89 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v89 + 64))(v89, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v89 + 17) = 0;
          if (v195 < 0) {
            operator delete(v194[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          unsigned int v189 = 0;
        }
        if (v184)
        {
          uint64_t v96 = *(void *)(a1 + 928);
          uint64_t v97 = v96 + 48 * v189;
          *(_DWORD *)uint64_t v97 = 4;
          *(unsigned char *)(v97 + 40) = *(unsigned char *)(v184 + 28);
          *(unsigned char *)(v97 + 4BambiCallParticipant::setState((uint64_t)this, 10, 1) = *(unsigned char *)(v184 + 30);
          *(_DWORD *)(v97 + 44) = *(unsigned __int16 *)(v184 + 308);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3020;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)(v184 + 328);
          long long v193 = *(_OWORD *)(v184 + 344);
          if ((v79 & 1) == 0)
          {
            uint64_t v98 = *(void *)(*(void *)(a1 + 56) + 296);
            if (v98)
            {
              __int16 v99 = WORD1(__p.__r_.__value_.__r.__words[1]);
              uint64_t v100 = *(void *)(v98 + 120);
              *(_WORD *)(v100 + 488) = v180;
              *(_WORD *)(v100 + 490) = v99;
            }
          }
          uint64_t v101 = v96 + 48 * v189;
          *(_DWORD *)(v101 + 20) = __p.__r_.__value_.__s.__data_[8] == 0;
          *(_WORD *)(v101 + 28) = HIWORD(__p.__r_.__value_.__r.__words[1]);
          std::string::basic_string[abi:ne180100]<0>(v194, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v190, "");
          uint64_t v102 = ims::debug((uint64_t)v194, (uint64_t)v190);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v102 + 8), (uint64_t)"codec[codecsIndex] max_redundancy_duration : ", 45);
          *(unsigned char *)(v102 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v102 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v102 + 64))(v102, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v102 + 17) = 0;
          if (v191 < 0) {
            operator delete(v190[0]);
          }
          if (v195 < 0) {
            operator delete(v194[0]);
          }
          *(_WORD *)(*(void *)(a1 + 928) + 48 * v189 + 26) = 2 * WORD2(__p.__r_.__value_.__r.__words[1]);
          std::string::basic_string[abi:ne180100]<0>(v194, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v190, "");
          uint64_t v103 = ims::debug((uint64_t)v194, (uint64_t)v190);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v103 + 8), (uint64_t)"codec[codecsIndex] mode_set = ", 30);
          *(unsigned char *)(v103 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v103 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v103 + 64))(v103, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v103 + 17) = 0;
          if (v191 < 0) {
            operator delete(v190[0]);
          }
          if (v195 < 0) {
            operator delete(v194[0]);
          }
          *(unsigned char *)(*(void *)(a1 + 928) + 48 * v189 + 36) = __p.__r_.__value_.__s.__data_[10];
          std::string::basic_string[abi:ne180100]<0>(v194, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v190, "");
          uint64_t v104 = ims::debug((uint64_t)v194, (uint64_t)v190);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v104 + 8), (uint64_t)"codec[codecsIndex] start_mode_ul = ", 35);
          *(unsigned char *)(v104 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v104 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v104 + 64))(v104, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v104 + 17) = 0;
          if (v191 < 0) {
            operator delete(v190[0]);
          }
          if (v195 < 0) {
            operator delete(v194[0]);
          }
          uint64_t v105 = *(void *)(a1 + 928) + 48 * v189;
          *(_DWORD *)(v105 + 8) = WORD2(__p.__r_.__value_.__r.__words[2]);
          *(_DWORD *)(v105 + 4) = LOWORD(__p.__r_.__value_.__r.__words[2]);
          *(unsigned char *)(v105 + 24) = __p.__r_.__value_.__s.__data_[18];
          v106 = *(std::__shared_weak_count **)(v8 + 128);
          if (v106)
          {
            v106 = std::__shared_weak_count::lock(v106);
            v107 = v106;
            if (v106) {
              v106 = *(std::__shared_weak_count **)(v8 + 120);
            }
          }
          else
          {
            v107 = 0;
          }
          std::string v110 = (ImsPrefs *)SipStack::prefs((SipStack *)v106);
          uint64_t v111 = (void **)ImsPrefs::getEnableDTXKey(v110);
          int v112 = ImsPrefs::BOOLValue(v110, v111);
          uint64_t v113 = *(void *)(a1 + 928);
          *(_DWORD *)(v113 + 48 * v189 + 32) = v112;
          if (v107)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v107);
            uint64_t v113 = *(void *)(a1 + 928);
          }
          uint64_t v109 = v182;
          uint64_t v114 = v113 + 48 * v189;
          int v117 = *(unsigned __int8 *)(v114 + 40);
          v116 = (unsigned char *)(v114 + 40);
          char v115 = v117;
          int v118 = v116[1];
          if (v117 == 255)
          {
            unsigned char *v116 = v118;
            char v115 = v118;
          }
          uint64_t v44 = v188;
          if (v118 == 255) {
            v116[1] = v115;
          }
          ++v189;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v194, "");
          uint64_t v108 = ims::debug((uint64_t)&__p, (uint64_t)v194);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v108 + 8), (uint64_t)"WB codec not present in SDP Media format", 40);
          *(unsigned char *)(v108 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v108 + 64))(v108, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v108 + 17) = 0;
          if (v195 < 0) {
            operator delete(v194[0]);
          }
          uint64_t v109 = v182;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (v109)
        {
          uint64_t v119 = *(void *)(a1 + 928) + 48 * v189;
          *(_DWORD *)uint64_t v119 = 5;
          *(unsigned char *)(v119 + 40) = *(unsigned char *)(v109 + 304);
          *(unsigned char *)(v119 + 4BambiCallParticipant::setState((uint64_t)this, 10, 1) = *(unsigned char *)(v109 + 306);
          *(_DWORD *)(v119 + 44) = *(unsigned __int16 *)(v109 + 310);
          ++v189;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v194, "");
          uint64_t v120 = ims::debug((uint64_t)&__p, (uint64_t)v194);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v120 + 8), (uint64_t)"DTMF codec for NB not present in SDP Media format", 49);
          *(unsigned char *)(v120 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v120 + 64))(v120, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v120 + 17) = 0;
          if (v195 < 0) {
            operator delete(v194[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (v9)
        {
          uint64_t v121 = *(void *)(a1 + 928) + 48 * v189;
          *(_DWORD *)uint64_t v121 = 5;
          *(unsigned char *)(v121 + 40) = *(unsigned char *)(v9 + 304);
          *(unsigned char *)(v121 + 4BambiCallParticipant::setState((uint64_t)this, 10, 1) = *(unsigned char *)(v9 + 306);
          *(_DWORD *)(v121 + 44) = *(unsigned __int16 *)(v9 + 310);
          ++v189;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v194, "");
          uint64_t v122 = ims::debug((uint64_t)&__p, (uint64_t)v194);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v122 + 8), (uint64_t)"DTMF codec for WB not present in SDP Media format", 49);
          *(unsigned char *)(v122 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v122 + 64))(v122, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v122 + 17) = 0;
          if (v195 < 0) {
            operator delete(v194[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (!v187)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v194, "");
          uint64_t v136 = v185;
          uint64_t v142 = ims::debug((uint64_t)&__p, (uint64_t)v194);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v142 + 8), (uint64_t)"EVS codec not present in SDP media format", 41);
          *(unsigned char *)(v142 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v142 + 64))(v142, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v142 + 17) = 0;
          if (v195 < 0) {
            operator delete(v194[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          char v143 = 0;
          goto LABEL_281;
        }
        unint64_t v123 = *(void *)(v187 + 360);
        __int16 v124 = *(_WORD *)(v187 + 368);
        __int16 v125 = *(_WORD *)(v187 + 370);
        __int16 v126 = *(_WORD *)(v187 + 374);
        int v127 = *(unsigned __int8 *)(v187 + 376);
        char v177 = *(unsigned char *)(v187 + 379);
        char v176 = *(unsigned char *)(v187 + 380);
        int v175 = *(_DWORD *)(v187 + 388);
        uint64_t v128 = *(int *)(v187 + 392);
        uint64_t v129 = *(int *)(v187 + 396);
        int v130 = *(unsigned __int8 *)(v187 + 400);
        int v181 = *(unsigned __int16 *)(v187 + 416);
        int v178 = *(unsigned __int16 *)(v187 + 420);
        __int16 v179 = *(_WORD *)(v187 + 418);
        uint64_t v131 = *(void *)(*(void *)(a1 + 56) + 296);
        if (v131)
        {
          uint64_t v132 = *(void *)(v131 + 120);
          if ((int)v128 < 3) {
            __int16 v133 = 4;
          }
          else {
            __int16 v133 = 5;
          }
          *(_WORD *)(v132 + 488) = v133;
          *(_WORD *)(v132 + 490) = v125;
        }
        uint64_t v134 = *(void *)(a1 + 960);
        int v183 = v130;
        if (v127)
        {
          *(unsigned char *)uint64_t v134 = 2;
          *(_DWORD *)(v134 + 44) = 1;
          *(_WORD *)(v134 + 52) = v126;
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v194, "");
          uint64_t v135 = ims::debug((uint64_t)&__p, (uint64_t)v194);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v135 + 8), (uint64_t)"codec[codecsIndex] max_redundancy_duration : ", 45);
          *(unsigned char *)(v135 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v135 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v135 + 64))(v135, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v135 + 17) = 0;
          if (v195 < 0) {
            operator delete(v194[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          *(_WORD *)(*(void *)(a1 + 960) + 50) = 2 * v124;
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v194, "");
          uint64_t v136 = v185;
          uint64_t v137 = ims::debug((uint64_t)&__p, (uint64_t)v194);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v137 + 8), (uint64_t)"codec[codecsIndex] mode_set = ", 30);
          *(unsigned char *)(v137 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v137 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v137 + 64))(v137, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v137 + 17) = 0;
          if (v195 < 0) {
            operator delete(v194[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          *(unsigned char *)(*(void *)(a1 + 960) + 60) = v125;
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v194, "");
          uint64_t v138 = ims::debug((uint64_t)&__p, (uint64_t)v194);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v138 + 8), (uint64_t)"codec[codecsIndex] start_mode_ul = ", 35);
          *(unsigned char *)(v138 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v138 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v138 + 64))(v138, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v138 + 17) = 0;
          if (v195 < 0) {
            operator delete(v194[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v139 = *(void *)(a1 + 960);
          *(_DWORD *)(v139 + 28) = v181;
          *(_DWORD *)(v139 + 32) = v178;
          *(unsigned char *)(v139 + 48) = v179;
          unsigned int v140 = *(std::__shared_weak_count **)(v8 + 128);
          if (v140)
          {
            unsigned int v140 = std::__shared_weak_count::lock(v140);
            uint64_t v141 = v140;
            if (v140) {
              unsigned int v140 = *(std::__shared_weak_count **)(v8 + 120);
            }
          }
          else
          {
            uint64_t v141 = 0;
          }
          v145 = (ImsPrefs *)SipStack::prefs((SipStack *)v140);
          int v146 = (void **)ImsPrefs::getEnableDTXKey(v145);
          int v147 = ImsPrefs::BOOLValue(v145, v146);
          uint64_t v148 = *(void *)(a1 + 960);
          *(_DWORD *)(v148 + 56) = v147;
          int v149 = 1;
          if (!v141) {
            goto LABEL_276;
          }
        }
        else
        {
          *(unsigned char *)uint64_t v134 = 3;
          *(_WORD *)(v134 + 50) = 1023;
          *(_WORD *)(v134 + 4) = v123 >> 9;
          if (*(unsigned char *)(a1 + 528))
          {
            uint64_t v136 = v185;
            if (v128 > 5) {
              __int16 v144 = 15;
            }
            else {
              __int16 v144 = word_1C56D1EC4[v128];
            }
            if (v129 > 5) {
              __int16 v167 = 15;
            }
            else {
              __int16 v167 = word_1C56D1EC4[v129];
            }
            __int16 v166 = v167 & v144;
          }
          else
          {
            uint64_t v136 = v185;
            if (v128 > 5) {
              __int16 v166 = 15;
            }
            else {
              __int16 v166 = word_1C56D1EC4[v128];
            }
          }
          *(_WORD *)(v134 + 10) = v166;
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v194, "");
          uint64_t v168 = ims::debug((uint64_t)&__p, (uint64_t)v194);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v168 + 8), (uint64_t)"bw= ", 4);
          *(unsigned char *)(v168 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v168 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v168 + 8), (uint64_t)", ", 2);
          *(unsigned char *)(v168 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v168 + 8), (uint64_t)"tx= ", 4);
          *(unsigned char *)(v168 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v168 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v168 + 8), (uint64_t)", ", 2);
          *(unsigned char *)(v168 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v168 + 8), (uint64_t)"rx= ", 4);
          *(unsigned char *)(v168 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v168 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v168 + 64))(v168, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v168 + 17) = 0;
          if (v195 < 0) {
            operator delete(v194[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v169 = *(void *)(a1 + 960);
          *(unsigned char *)(v169 + 16) = v176;
          char v170 = v177;
          if (!v175) {
            char v170 = -1;
          }
          *(unsigned char *)(v169 + 19) = v170;
          uint64_t v171 = *(std::__shared_weak_count **)(v8 + 128);
          if (v171)
          {
            uint64_t v171 = std::__shared_weak_count::lock(v171);
            uint64_t v141 = v171;
            if (v171) {
              uint64_t v171 = *(std::__shared_weak_count **)(v8 + 120);
            }
          }
          else
          {
            uint64_t v141 = 0;
          }
          int v172 = (ImsPrefs *)SipStack::prefs((SipStack *)v171);
          uint64_t v173 = (void **)ImsPrefs::getEnableDTXKey(v172);
          int v174 = ImsPrefs::BOOLValue(v172, v173);
          int v149 = 0;
          uint64_t v148 = *(void *)(a1 + 960);
          *(_DWORD *)(v148 + 20) = v174;
          if (!v141) {
            goto LABEL_276;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v141);
        uint64_t v148 = *(void *)(a1 + 960);
LABEL_276:
        *(_DWORD *)(v148 + 64) = v149;
        *(_DWORD *)(v148 + 68) = v183;
        *(unsigned char *)(v148 + 72) = *(unsigned char *)(v187 + 28);
        *(unsigned char *)(v148 + 73) = *(unsigned char *)(v187 + 30);
        *(_DWORD *)(v148 + 76) = *(unsigned __int16 *)(v187 + 308);
        uint64_t v150 = *(void *)(a1 + 928) + 48 * v189;
        int v153 = *(unsigned __int8 *)(v150 + 40);
        uint64_t v152 = (unsigned char *)(v150 + 40);
        char v151 = v153;
        int v154 = v152[1];
        if (v153 == 255)
        {
          *uint64_t v152 = v154;
          char v151 = v154;
        }
        uint64_t v44 = v188;
        if (v154 == 255) {
          v152[1] = v151;
        }
        char v143 = 1;
LABEL_281:
        int v155 = *(unsigned __int16 *)(v44 + 306);
        if (v155 != 255) {
          *(unsigned char *)(a1 + 549) = v155;
        }
        *(unsigned char *)(a1 + 548) = *(unsigned char *)(v8 + 182);
        *(unsigned char *)(a1 + 620) = 1;
        *(unsigned char *)(a1 + 920) = v189;
        *(unsigned char *)(a1 + 952) = v143;
        if (v187)
        {
          *(void *)(a1 + 1016) = *(void *)(v44 + 408);
          uint64_t v13 = v186;
        }
        else
        {
          uint64_t v156 = v136 | v184;
          uint64_t v13 = v186;
          if (v156) {
            uint64_t v157 = *(void *)(v44 + 352);
          }
          else {
            uint64_t v157 = *(void *)(v44 + 48);
          }
          *(void *)(a1 + 1016) = v157;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(v194, "");
        uint64_t v158 = ims::debug((uint64_t)&__p, (uint64_t)v194);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v158 + 8), (uint64_t)"Saving AS Bandwidth from SDP Media format : ", 44);
        *(unsigned char *)(v158 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v158 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v158 + 64))(v158, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v158 + 17) = 0;
        if (v195 < 0) {
          operator delete(v194[0]);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *(_OWORD *)(a3 + 24) = 0u;
        *(_OWORD *)(a3 + 40) = 0u;
        *(_OWORD *)(a3 + 56) = 0u;
        *(void *)a3 = &unk_1F20B2680;
        *(void *)(a3 + 8) = &_bambiDomain;
        *(_DWORD *)(a3 + 16) = 0;
        if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v196.__r_.__value_.__l.__data_);
        }
        goto LABEL_53;
      }
      if (*(char *)(v8 + 455) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 432), *(void *)(v8 + 440));
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v28;
        __p.__r_.__value_.__r.__words[2] = *(void *)(v8 + 448);
      }
      std::string::size_type v159 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v159 = __p.__r_.__value_.__l.__size_;
      }
      if (v159 == 3)
      {
        v160 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v160 = &__p;
        }
        int v161 = LOWORD(v160->__r_.__value_.__l.__data_);
        int v162 = v160->__r_.__value_.__s.__data_[2];
        BOOL v164 = v161 == 22085 && v162 == 83;
      }
      else
      {
        BOOL v164 = 0;
      }
      uint64_t v13 = v186;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v164)
      {
        uint64_t v184 = 0;
        uint64_t v185 = 0;
        uint64_t v182 = 0;
        __int16 v180 = 0;
        int v11 = 1;
        uint64_t v187 = v8 + 152;
        goto LABEL_112;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(&v196, "");
      uint64_t v165 = ims::error((uint64_t)&__p, (uint64_t)&v196);
      uint64_t v20 = ImsOutStream::operator<<(v165, "Unsupported encoding name given");
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(unsigned char *)(v20 + 17) = 0;
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v196.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_52;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&v196, "");
  uint64_t v18 = ims::error((uint64_t)&__p, (uint64_t)&v196);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Insufficient information to generate session configuration", 58);
  *(unsigned char *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v18 + 17) = 0;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 296);
  if (v19) {
    AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v19 + 120), 25);
  }
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 1073741825;
LABEL_24:
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1C53EE35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(exception_object);
}

void IBISession::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  long long v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = *a2;
  int v11 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 200))(a1, &v10);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  if (((*(uint64_t (**)(void, void))(**(void **)(a3 + 8) + 24))(*(void *)(a3 + 8), *(unsigned int *)(a3 + 16)) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::debug((uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Generated configuration successfully", 36);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
}

void sub_1C53EE720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult(v20);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IBISession::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t IBISession::configure(IBISession *this)
{
  return 1;
}

uint64_t non-virtual thunk to'IBISession::configure(IBISession *this)
{
  return 1;
}

void IBISession::internalConfigure(IBISession *this, char a2)
{
  std::string::basic_string[abi:ne180100]<0>(v12, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v10, "");
  uint64_t v4 = ims::debug((uint64_t)v12, (uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Sending Configuration request", 29);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  *((unsigned char *)this + 520) = a2;
  IBISessionHelper::sendConfigureRequest(*((IBISessionHelper **)this + 129), (uint64_t)v9);
  ImsResult::~ImsResult((ImsResult *)v9);
  RTPSharedPointerBase::getShared<IBISession>(v12, (uint64_t)this);
  if (v12[0]) {
    uint64_t v5 = (char *)v12[0] + 24;
  }
  else {
    uint64_t v5 = 0;
  }
  char v7 = v5;
  uint64_t v8 = (std::__shared_weak_count *)v12[1];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  uint64_t v6[2] = ___ZN10IBISession17internalConfigureEb_block_invoke;
  _OWORD v6[3] = &__block_descriptor_tmp_48_0;
  v6[4] = this;
  MediaSessionDriver::startTimerForRequest((uint64_t)this + 24, 74566, (uint64_t *)&v7, v6);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C53EE984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10IBISession17internalConfigureEb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 168))(*(void *)(a1 + 32), 74566);
}

void IBISession::configureMediaLinkMonitor(IBISession *this)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v1 = ims::debug((uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v1 + 8), (uint64_t)"configureLinkMonitor is a No-Op for IBI session", 47);
  *(unsigned char *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v1 + 17) = 0;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1C53EEAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IBISession::configureMediaLinkMonitor(IBISession *this)
{
}

void IBISession::configureRemoteRTCP(IBISession *this, int a2)
{
  if (a2)
  {
    if (*((unsigned char *)this + 480))
    {
      int v3 = 1;
      goto LABEL_9;
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"RTCP reports are not allowed.", 29);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
  int v3 = 0;
LABEL_9:
  if (*((unsigned __int8 *)this + 527) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::debug((uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"RTCP reports are already", 24);
    *(unsigned char *)(v5 + 17) = 0;
    if (v3) {
      long long v6 = "Enabled";
    }
    else {
      long long v6 = "Disabled";
    }
    if (v3) {
      uint64_t v7 = 7;
    }
    else {
      uint64_t v7 = 8;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)v6, v7);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
  else
  {
    *((unsigned char *)this + 527) = v3;
    std::string::basic_string[abi:ne180100]<0>(v13, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"RTCP reports: ", 14);
    *(unsigned char *)(v8 + 17) = 0;
    if (v3) {
      char v9 = "Enabled";
    }
    else {
      char v9 = "Disabled";
    }
    if (v3) {
      uint64_t v10 = 7;
    }
    else {
      uint64_t v10 = 8;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)v9, v10);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    if (*((unsigned char *)this + 522)) {
      (*(void (**)(IBISession *, void))(*(void *)this + 72))(this, 0);
    }
  }
}

void sub_1C53EEDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IBISession::configureRemoteRTCP(IBISession *this, int a2)
{
}

uint64_t IBISession::terminate(IBISessionHelper **this)
{
  std::string::basic_string[abi:ne180100]<0>(v11, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  uint64_t v2 = ims::debug((uint64_t)v11, (uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Sending TerminateMedia request", 30);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  IBISessionHelper::sendTerminateRequest(this[129], (uint64_t)v8);
  ImsResult::~ImsResult((ImsResult *)v8);
  std::__list_imp<unsigned long long>::clear(this + 62);
  RTPSharedPointerBase::getShared<IBISession>(v11, (uint64_t)this);
  if (v11[0]) {
    int v3 = (char *)v11[0] + 24;
  }
  else {
    int v3 = 0;
  }
  long long v6 = v3;
  uint64_t v7 = (std::__shared_weak_count *)v11[1];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  void v5[2] = ___ZN10IBISession9terminateEb_block_invoke;
  _OWORD v5[3] = &__block_descriptor_tmp_56_0;
  v5[4] = this;
  MediaSessionDriver::startTimerForRequest((uint64_t)(this + 3), 74569, (uint64_t *)&v6, v5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return 1;
}

void sub_1C53EEFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10IBISession9terminateEb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 168))(*(void *)(a1 + 32), 74569);
}

uint64_t non-virtual thunk to'IBISession::terminate(IBISessionHelper **this)
{
  return 1;
}

uint64_t IBISession::start(IBISessionHelper **this)
{
  std::string::basic_string[abi:ne180100]<0>(v11, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  uint64_t v2 = ims::debug((uint64_t)v11, (uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Sending StartMedia request", 26);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  IBISessionHelper::sendStartRequest(this[129], (uint64_t)v8);
  ImsResult::~ImsResult((ImsResult *)v8);
  RTPSharedPointerBase::getShared<IBISession>(v11, (uint64_t)this);
  if (v11[0]) {
    int v3 = (char *)v11[0] + 24;
  }
  else {
    int v3 = 0;
  }
  long long v6 = v3;
  uint64_t v7 = (std::__shared_weak_count *)v11[1];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  void v5[2] = ___ZN10IBISession5startEb_block_invoke;
  _OWORD v5[3] = &__block_descriptor_tmp_58;
  v5[4] = this;
  MediaSessionDriver::startTimerForRequest((uint64_t)(this + 3), 74567, (uint64_t *)&v6, v5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *((_WORD *)this + 26(*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = 257;
  return 1;
}

void sub_1C53EF1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10IBISession5startEb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 168))(*(void *)(a1 + 32), 74567);
}

uint64_t non-virtual thunk to'IBISession::start(IBISessionHelper **this)
{
  return 1;
}

uint64_t IBISession::stop(IBISessionHelper **this)
{
  std::string::basic_string[abi:ne180100]<0>(v11, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  uint64_t v2 = ims::debug((uint64_t)v11, (uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Sending StopMedia request", 25);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  IBISessionHelper::sendStopRequest(this[129], (uint64_t)v8);
  ImsResult::~ImsResult((ImsResult *)v8);
  std::__list_imp<unsigned long long>::clear(this + 62);
  RTPSharedPointerBase::getShared<IBISession>(v11, (uint64_t)this);
  if (v11[0]) {
    int v3 = (char *)v11[0] + 24;
  }
  else {
    int v3 = 0;
  }
  long long v6 = v3;
  uint64_t v7 = (std::__shared_weak_count *)v11[1];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  void v5[2] = ___ZN10IBISession4stopEb_block_invoke;
  _OWORD v5[3] = &__block_descriptor_tmp_60;
  v5[4] = this;
  MediaSessionDriver::startTimerForRequest((uint64_t)(this + 3), 74568, (uint64_t *)&v6, v5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (!*((unsigned char *)this + 521)) {
    *((unsigned char *)this + 522) = 0;
  }
  *((unsigned char *)this + 52IBISession::start(this - 3) = 0;
  return 1;
}

void sub_1C53EF3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10IBISession4stopEb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 168))(*(void *)(a1 + 32), 74568);
}

uint64_t non-virtual thunk to'IBISession::stop(IBISessionHelper **this)
{
  return 1;
}

uint64_t IBISession::setDirection(uint64_t a1, unsigned int *a2)
{
  if (*(unsigned char *)(a1 + 522))
  {
    if (*(_DWORD *)(a1 + 256) == *a2)
    {
      std::string::basic_string[abi:ne180100]<0>(v47, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(v45, "");
      uint64_t v4 = ims::debug((uint64_t)v47, (uint64_t)v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"No change to current direction (", 32);
      *(unsigned char *)(v4 + 17) = 0;
      ims::toString<MediaDirection>(a2, __p);
      (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)")", 1);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v44 < 0) {
        operator delete(__p[0]);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
      if (v48 < 0) {
        operator delete(v47[0]);
      }
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
      if (v5)
      {
        long long v6 = std::__shared_weak_count::lock(v5);
        if (v6)
        {
          uint64_t v7 = v6;
          uint64_t v8 = *(void *)(a1 + 32);
          if (!v8) {
            goto LABEL_25;
          }
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v39);
          (*(void (**)(uint64_t, void **, void))(*(void *)v8 + 24))(v8, &v39, 0);
          char v9 = v40;
          if (!v40) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
      }
      return 1;
    }
    std::string::basic_string[abi:ne180100]<0>(v47, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v45, "");
    uint64_t v14 = ims::debug((uint64_t)v47, (uint64_t)v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Updating direction from ", 24);
    size_t v15 = (unsigned int *)(a1 + 256);
    *(unsigned char *)(v14 + 17) = 0;
    ims::toString<MediaDirection>((unsigned int *)(a1 + 256), __p);
    (*(void (**)(uint64_t, void **))(*(void *)v14 + 32))(v14, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" to ", 4);
    *(unsigned char *)(v14 + 17) = 0;
    ims::toString<MediaDirection>(a2, v37);
    (*(void (**)(uint64_t, void **))(*(void *)v14 + 32))(v14, v37);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    if (v44 < 0) {
      operator delete(__p[0]);
    }
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    unsigned int v16 = *a2;
    unsigned int *v15 = *a2;
    unsigned int v17 = *a2;
    if (*a2 == 1)
    {
      char v19 = 0;
    }
    else
    {
      if (v17 == 3)
      {
        std::string::basic_string[abi:ne180100]<0>(v47, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(v45, "");
        uint64_t v18 = ims::warn((uint64_t)v47, (uint64_t)v45);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"We don't support send only, defaulting to inactive", 50);
        *(unsigned char *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v18 + 17) = 0;
        if (v46 < 0) {
          operator delete(v45[0]);
        }
        if (v48 < 0) {
          operator delete(v47[0]);
        }
        unsigned int v16 = 4;
        unsigned int *v15 = 4;
      }
      unsigned int v17 = 0;
      char v19 = 1;
    }
    *(unsigned char *)(a1 + 52(*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = v19;
    uint64_t v20 = *(unsigned __int8 *)(a1 + 471);
    if (v16 == 2)
    {
      uint64_t v21 = *(void *)(a1 + 456);
      if ((v20 & 0x80u) == 0) {
        uint64_t v22 = *(unsigned __int8 *)(a1 + 471);
      }
      else {
        uint64_t v22 = *(void *)(a1 + 456);
      }
      if (v22 == 3)
      {
        uint64_t v23 = (v20 & 0x80u) == 0 ? (unsigned __int16 *)(a1 + 448) : *(unsigned __int16 **)(a1 + 448);
        int v24 = *v23;
        int v25 = *((unsigned __int8 *)v23 + 2);
        BOOL v26 = v24 == 21586 && v25 == 80;
        if (v26)
        {
          LODWORD(v27) = 0;
          *(_DWORD *)(a1 + 612) = *(unsigned __int16 *)(a1 + 444);
          *(_DWORD *)(a1 + 616) = -1;
          goto LABEL_69;
        }
      }
    }
    else
    {
      uint64_t v21 = *(void *)(a1 + 456);
    }
    int v28 = (char)v20;
    if ((v20 & 0x80u) != 0) {
      uint64_t v20 = v21;
    }
    if (v20 == 4)
    {
      uint64_t v29 = (_DWORD *)(a1 + 448);
      if (v28 < 0) {
        uint64_t v29 = *(_DWORD **)(a1 + 448);
      }
      if (*v29 == 1346589778)
      {
        *(_DWORD *)(a1 + 612) = -1;
        unsigned int v32 = *(unsigned __int16 *)(a1 + 446);
        *(_DWORD *)(a1 + 616) = v32;
        unsigned int v33 = *(unsigned __int16 *)(a1 + 444);
        if (v32 < v33) {
          *(_DWORD *)(a1 + 616) = v33;
        }
        double v34 = (double)*(unint64_t *)(a1 + 1016);
        *(_DWORD *)(a1 + 900) = (unint64_t)(v34 * 37.5);
        unint64_t v27 = (unint64_t)(v34 * 12.5);
        goto LABEL_73;
      }
    }
    unsigned int v30 = *(unsigned __int16 *)(a1 + 444);
    *(_DWORD *)(a1 + 612) = v30;
    if (*(unsigned __int16 *)(a1 + 446) > v30) {
      unsigned int v30 = *(unsigned __int16 *)(a1 + 446);
    }
    *(_DWORD *)(a1 + 616) = v30;
    if (!v17 || (LODWORD(v27) = *(_DWORD *)(a1 + 432), v27))
    {
      double v31 = (double)*(unint64_t *)(a1 + 1016);
      *(_DWORD *)(a1 + 900) = (unint64_t)(v31 * 37.5);
      unint64_t v27 = (unint64_t)(v31 * 12.5);
LABEL_73:
      *(_DWORD *)(a1 + 896) = v27;
      BOOL v26 = v17 == 0;
      uint64_t v35 = 436;
      if (!v26) {
        uint64_t v35 = 432;
      }
      *(_DWORD *)(a1 + 888) = *(_DWORD *)(a1 + v35);
      *(_DWORD *)(a1 + 540) = v16;
      (*(void (**)(uint64_t, void))(*(void *)a1 + 72))(a1, 0);
      return 1;
    }
LABEL_69:
    *(_DWORD *)(a1 + 900) = 0;
    goto LABEL_73;
  }
  std::string::basic_string[abi:ne180100]<0>(v47, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v45, "");
  uint64_t v10 = ims::debug((uint64_t)v47, (uint64_t)v45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Setting initial direction to ", 29);
  *(unsigned char *)(v10 + 17) = 0;
  ims::toString<MediaDirection>(a2, __p);
  (*(void (**)(uint64_t, void **))(*(void *)v10 + 32))(v10, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  *(_DWORD *)(a1 + 256) = *a2;
  char v11 = *(std::__shared_weak_count **)(a1 + 40);
  if (v11)
  {
    char v12 = std::__shared_weak_count::lock(v11);
    if (v12)
    {
      uint64_t v7 = v12;
      uint64_t v13 = *(void *)(a1 + 32);
      if (!v13) {
        goto LABEL_25;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v41);
      (*(void (**)(uint64_t, void **, void))(*(void *)v13 + 32))(v13, &v41, 0);
      char v9 = v42;
      if (!v42) {
        goto LABEL_25;
      }
LABEL_24:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
LABEL_25:
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  return 1;
}

void sub_1C53EFB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'IBISession::setDirection(uint64_t a1, unsigned int *a2)
{
  return 1;
}

double IBISession::startSendingDTMF@<D0>(IBISession *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v13, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"startSendingDTMF: queuing up digit ", 35);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  uint64_t v7 = operator new(0x18uLL);
  v7[16] = a2;
  uint64_t v8 = *((void *)this + 62);
  *(void *)uint64_t v7 = v8;
  *((void *)v7 + (*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = (char *)this + 496;
  *(void *)(v8 + 8) = v7;
  *((void *)this + 62) = v7;
  ++*((void *)this + 64);
  if (!*((unsigned char *)this + 489))
  {
    IBISession::startDTMFDigit((IBISession *)v10, (uint64_t)this);
    ImsResult::~ImsResult((ImsResult *)v10);
  }
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void sub_1C53EFDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 33) < 0) {
    operator delete(*(void **)(v24 - 56));
  }
  _Unwind_Resume(exception_object);
}

void IBISession::startDTMFDigit(IBISession *this, uint64_t a2)
{
  if (*(void *)(a2 + 512))
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Sending DTMF digit : ", 21);
    *(unsigned char *)(v4 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    *((void *)this + 8) = 0;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + IBISession::stop(this - 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + (*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = 0u;
    IBISessionHelper::sendStartDTMFDigitRequest(*(IBISessionHelper **)(a2 + 1032), (uint64_t)this);
    uint64_t v5 = *(uint64_t **)(a2 + 504);
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = v5[1];
    *(void *)v5[1] = v6;
    --*(void *)(a2 + 512);
    operator delete(v5);
    if ((*(uint64_t (**)(void, void))(**((void **)this + 1) + 24))(*((void *)this + 1), *((unsigned int *)this + 4)))
    {
      std::string::basic_string[abi:ne180100]<0>(v15, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v7 = ims::error((uint64_t)v15, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Failed to send digit", 20);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      std::__list_imp<unsigned long long>::clear((void *)(a2 + 496));
    }
    else
    {
      RTPSharedPointerBase::getShared<IBISession>(v15, a2);
      if (v15[0]) {
        char v9 = (char *)v15[0] + 24;
      }
      else {
        char v9 = 0;
      }
      char v11 = v9;
      char v12 = (std::__shared_weak_count *)v15[1];
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 0x40000000;
      uint64_t v10[2] = ___ZN10IBISession14startDTMFDigitEv_block_invoke;
      void v10[3] = &__block_descriptor_tmp_70_0;
      v10[4] = a2;
      MediaSessionDriver::startTimerForRequest(a2 + 24, 74570, (uint64_t *)&v11, v10);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      *(unsigned char *)(a2 + 489) = 1;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"DTMF queue is empty, nothing to send", 36);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(void *)this = &unk_1F20B2680;
    *((void *)this + (*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 0;
  }
}

void sub_1C53F0174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  ImsResult::~ImsResult(v22);
  _Unwind_Resume(a1);
}

double non-virtual thunk to'IBISession::startSendingDTMF@<D0>(IBISession *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return IBISession::startSendingDTMF((IBISession *)((char *)this - 24), a2, a3);
}

uint64_t ___ZN10IBISession14startDTMFDigitEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 168))(*(void *)(a1 + 32), 74570);
}

double IBISession::stopSendingDTMF@<D0>(uint64_t a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"stopSendingDTMF is a No-Op", 26);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void sub_1C53F0348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10IBISession13stopDTMFDigitEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 168))(*(void *)(a1 + 32), 74571);
}

double IBISession::sendDTMFDigits@<D0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      unsigned int v7 = *v4++;
      (*(void (**)(void *__return_ptr, uint64_t, void))(*(void *)a1 + 128))(v9, a1, v7);
      ImsResult::~ImsResult((ImsResult *)v9);
    }
    while (v4 != v5);
  }
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

double non-virtual thunk to'IBISession::sendDTMFDigits@<D0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  return IBISession::sendDTMFDigits(a1 - 24, a2, a3);
}

void IBISession::handleMediaError(IBISession *this, int a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v29, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v29, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Media timeout for session(", 26);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)") : ", 4);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"RTP: ", 5);
  *(unsigned char *)(v6 + 17) = 0;
  if (a2) {
    unsigned int v7 = "true";
  }
  else {
    unsigned int v7 = "false";
  }
  if (a2) {
    uint64_t v8 = 4;
  }
  else {
    uint64_t v8 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)", RTCP: ", 8);
  *(unsigned char *)(v6 + 17) = 0;
  if (a3) {
    char v9 = "true";
  }
  else {
    char v9 = "false";
  }
  if (a3) {
    uint64_t v10 = 4;
  }
  else {
    uint64_t v10 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v9, v10);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::debug((uint64_t)v29, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Session direction is ", 21);
  *(unsigned char *)(v11 + 17) = 0;
  ims::toString<MediaDirection>((unsigned int *)this + 64, v25);
  (*(void (**)(uint64_t, void **))(*(void *)v11 + 32))(v11, v25);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  int v12 = *((_DWORD *)this + 64);
  if (v12 == 1 && a2)
  {
    uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 5);
    if (v13)
    {
      char v14 = std::__shared_weak_count::lock(v13);
      if (v14)
      {
        size_t v15 = v14;
        uint64_t v16 = *((void *)this + 4);
        if (!v16) {
          goto LABEL_37;
        }
        RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v23);
        (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v16 + 40))(v16, &v23, 5);
        unsigned int v17 = v24;
        if (!v24) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }
    }
  }
  else if (v12 != 1)
  {
    if (a3)
    {
      uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 5);
      if (v18)
      {
        char v19 = std::__shared_weak_count::lock(v18);
        if (v19)
        {
          size_t v15 = v19;
          uint64_t v20 = *((void *)this + 4);
          if (!v20) {
            goto LABEL_37;
          }
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v21);
          (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v20 + 40))(v20, &v21, 6);
          unsigned int v17 = v22;
          if (!v22) {
            goto LABEL_37;
          }
LABEL_36:
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_37:
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
      }
    }
  }
}

void sub_1C53F07D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

void IBISession::handleStartMediaResponse(int8x8_t *this, int a2, int a3)
{
  MediaSessionDriver::cancelTimerForRequest(this + 3, 74567);
  if (a2 || this[60].i32[1] != a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v12 = ims::error((uint64_t)v24, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Failed to start media session : ", 32);
    *(unsigned char *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    uint64_t v13 = *(void *)(*(void *)&this[7] + 296);
    if (v13) {
      AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v13 + 120), 7);
    }
    char v14 = (std::__shared_weak_count *)this[5];
    if (v14)
    {
      size_t v15 = std::__shared_weak_count::lock(v14);
      if (v15)
      {
        uint64_t v16 = v15;
        int8x8_t v17 = this[4];
        if (v17)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v18);
          (*(void (**)(int8x8_t, void **, uint64_t))(**(void **)&v17 + 24))(v17, &v18, 9);
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)v24, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Media session started successfully, session id : ", 49);
    *(unsigned char *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    unsigned int v7 = (std::__shared_weak_count *)this[5];
    if (v7)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        char v9 = v8;
        int8x8_t v10 = this[4];
        if (v10)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v20);
          (*(void (**)(int8x8_t, void **, void))(**(void **)&v10 + 24))(v10, &v20, 0);
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    if (this[32].i32[0] == 4 && this[65].i8[3])
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v11 = ims::debug((uint64_t)v24, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Direction is inactive, a held call getting handed over. De-activate media", 73);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v11 + 17) = 0;
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      this[65].i8[5] = 1;
      (*(void (**)(int8x8_t *, void))(*(void *)this + 40))(this, 0);
    }
  }
}

void sub_1C53F0C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void IBISession::handleStopMediaResponse(int8x8_t *this, int a2, int a3)
{
  MediaSessionDriver::cancelTimerForRequest(this + 3, 74568);
  if (!a2 && this[60].i32[1] == a3)
  {
    if (this[65].i8[5])
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)v35, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Held session handover complete. Media stopped, but not reporting it to state machine. Session ID : ", 99);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v34 < 0) {
        operator delete(__p[0]);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
      this[65].i8[5] = 0;
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(v35, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v19 = ims::debug((uint64_t)v35, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Media session stopped successfully, session id : ", 49);
    *(unsigned char *)(v19 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    uint64_t v20 = (std::__shared_weak_count *)this[5];
    if (this[65].i8[1])
    {
      if (!v20) {
        goto LABEL_22;
      }
      uint64_t v21 = std::__shared_weak_count::lock(v20);
      if (!v21) {
        goto LABEL_22;
      }
      uint64_t v11 = v21;
      int8x8_t v22 = this[4];
      if (!*(void *)&v22
        || (RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v31),
            (*(void (**)(int8x8_t, void **, void))(**(void **)&v22 + 24))(v22, &v31, 0),
            (uint64_t v13 = v32) == 0))
      {
LABEL_21:
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_22:
        this[65].i8[1] = 0;
        return;
      }
LABEL_20:
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      goto LABEL_21;
    }
    if (!v20) {
      return;
    }
    char v23 = std::__shared_weak_count::lock(v20);
    if (!v23) {
      return;
    }
    uint64_t v16 = v23;
    int8x8_t v24 = this[4];
    if (!*(void *)&v24
      || (RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v29),
          (*(void (**)(int8x8_t, void **, void))(**(void **)&v24 + 32))(v24, &v29, 0),
          (uint64_t v18 = v30) == 0))
    {
LABEL_31:
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      return;
    }
LABEL_30:
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    goto LABEL_31;
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::error((uint64_t)v35, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Failed to stop media session : ", 31);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  uint64_t v8 = *(void *)(*(void *)&this[7] + 296);
  if (this[65].i8[1])
  {
    if (v8) {
      AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v8 + 120), 9);
    }
    char v9 = (std::__shared_weak_count *)this[5];
    if (!v9) {
      goto LABEL_22;
    }
    int8x8_t v10 = std::__shared_weak_count::lock(v9);
    if (!v10) {
      goto LABEL_22;
    }
    uint64_t v11 = v10;
    int8x8_t v12 = this[4];
    if (!*(void *)&v12) {
      goto LABEL_21;
    }
    RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v27);
    (*(void (**)(int8x8_t, void **, uint64_t))(**(void **)&v12 + 24))(v12, &v27, 9);
    uint64_t v13 = v28;
    if (!v28) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v8) {
    AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v8 + 120), 8);
  }
  char v14 = (std::__shared_weak_count *)this[5];
  if (v14)
  {
    size_t v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      uint64_t v16 = v15;
      int8x8_t v17 = this[4];
      if (!*(void *)&v17) {
        goto LABEL_31;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v25);
      (*(void (**)(int8x8_t, void **, uint64_t))(**(void **)&v17 + 32))(v17, &v25, 9);
      uint64_t v18 = v26;
      if (!v26) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
  }
}

void sub_1C53F10DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void IBISession::handleTerminateMediaSessionResponse(IBISession *this, int a2, int a3)
{
  MediaSessionDriver::cancelTimerForRequest((int8x8_t *)this + 3, 74569);
  if (a2 || *((_DWORD *)this + 121) != a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v12 = ims::error((uint64_t)v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Failed to terminate media session : ", 36);
    *(unsigned char *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    uint64_t v13 = *(void *)(*((void *)this + 7) + 296);
    if (v13) {
      AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v13 + 120), 5);
    }
    char v14 = (std::__shared_weak_count *)*((void *)this + 5);
    if (v14)
    {
      size_t v15 = std::__shared_weak_count::lock(v14);
      if (v15)
      {
        char v9 = v15;
        uint64_t v16 = *((void *)this + 4);
        if (!v16) {
          goto LABEL_23;
        }
        RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v17);
        (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v16 + 8))(v16, &v17, 9);
        uint64_t v11 = v18;
        if (!v18) {
          goto LABEL_23;
        }
LABEL_22:
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_23:
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Media session terminated successfully, session id : ", 52);
    *(unsigned char *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 5);
    if (v7)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        char v9 = v8;
        uint64_t v10 = *((void *)this + 4);
        if (!v10) {
          goto LABEL_23;
        }
        RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v19);
        (*(void (**)(uint64_t, void **, void))(*(void *)v10 + 8))(v10, &v19, 0);
        uint64_t v11 = v20;
        if (!v20) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
    }
  }
  IBIRTPStackController::removeSession(*((uint64_t ***)this + 131), *((_DWORD *)this + 121));
  IBISession::cleanup(this, 0);
}

void sub_1C53F1440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void IBISession::cleanup(IBISession *this, int a2)
{
  if (*((unsigned char *)this + 526))
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v2 = ims::debug((uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Session already cleaned up.", 27);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    return;
  }
  *((unsigned char *)this + 526) = 1;
  std::string::basic_string[abi:ne180100]<0>(v10, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v5 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Cancelling all timers and clearing dtmf queue.", 46);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0)
  {
    operator delete(v10[0]);
    if (!a2) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (a2) {
LABEL_10:
  }
    (*(void (**)(IBISession *, void))(*(void *)this + 24))(this, 0);
LABEL_11:
  MediaSessionDriver::cancelAllTimers((IBISession *)((char *)this + 24));
  std::__list_imp<unsigned long long>::clear((void *)this + 62);
  if (!IBISession::_count) {
    goto LABEL_28;
  }
  --IBISession::_count;
  std::string::basic_string[abi:ne180100]<0>(v10, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Session cleaned up. Number of sessions = ", 41);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (!IBISession::_count)
  {
LABEL_28:
    if (IBISession::_activeAudio || !*((unsigned char *)this + 524))
    {
      std::string::basic_string[abi:ne180100]<0>(v10, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Send CallEnd event to Audio device", 34);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      if (v11 < 0) {
        operator delete(v10[0]);
      }
      IBIRTPStackController::sendAudioCallEvent(*((void **)this + 131));
    }
  }
}

void sub_1C53F1834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 33) < 0) {
    operator delete(*(void **)(v24 - 56));
  }
  _Unwind_Resume(exception_object);
}

void IBISession::handleStartDTMFCodeResponse(IBISession *this, int a2, int a3)
{
  MediaSessionDriver::cancelTimerForRequest((int8x8_t *)this + 3, 74570);
  if (a2 || *((_DWORD *)this + 121) != a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::error((uint64_t)&v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Failed to start DTMF digit send : ", 34);
    *(unsigned char *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v17);
    }
    uint64_t v12 = *(void *)(*((void *)this + 7) + 296);
    if (v12) {
      AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v12 + 120), 15);
    }
    std::__list_imp<unsigned long long>::clear((void *)this + 62);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Started sending DTMF digit, session id : ", 41);
    *(unsigned char *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v17);
    }
    RTPSharedPointerBase::getShared<IBISession>(&v17, (uint64_t)this);
    uint64_t v8 = v17;
    uint64_t v7 = v18;
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    dispatch_time_t v9 = dispatch_time(0, 1000000 * *((unsigned __int8 *)this + 473));
    uint64_t v10 = *((void *)this + 9);
    if (v10) {
      dispatch_retain(*((dispatch_object_t *)this + 9));
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN10IBISession27handleStartDTMFCodeResponseEjj_block_invoke;
    block[3] = &__block_descriptor_tmp_91;
    block[4] = this;
    block[5] = v8;
    char v14 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_after(v9, v10, block);
    if (v10) {
      dispatch_release(v10);
    }
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1C53F1B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 49) < 0) {
    operator delete(*(void **)(v22 - 72));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10IBISession27handleStartDTMFCodeResponseEjj_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(&v19, "");
        uint64_t v6 = ims::debug((uint64_t)__p, (uint64_t)&v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"stopDTMFDigit", 13);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v21 < 0) {
          operator delete(v19);
        }
        if (SHIBYTE(v15) < 0) {
          operator delete(__p[0]);
        }
        long long v9 = 0u;
        long long v10 = 0u;
        long long v11 = 0u;
        long long v12 = 0u;
        uint64_t v13 = 0;
        IBISessionHelper::sendStopDTMFDigitRequest(*(IBISessionHelper **)(v3 + 1032), (uint64_t)&v9);
        if ((*(uint64_t (**)(void, void))(**((void **)&v9 + 1) + 24))(*((void *)&v9 + 1), v10))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(&v19, "");
          uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)&v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Failed to send digit", 20);
          *(unsigned char *)(v7 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v7 + 17) = 0;
          if (v21 < 0) {
            operator delete(v19);
          }
          if (SHIBYTE(v15) < 0) {
            operator delete(__p[0]);
          }
          std::__list_imp<unsigned long long>::clear((void *)(v3 + 496));
        }
        else
        {
          RTPSharedPointerBase::getShared<IBISession>(v18, v3);
          if (v18[0]) {
            uint64_t v8 = (char *)v18[0] + 24;
          }
          else {
            uint64_t v8 = 0;
          }
          char v19 = v8;
          uint64_t v20 = (std::__shared_weak_count *)v18[1];
          __p[0] = (void *)MEMORY[0x1E4F143A8];
          __p[1] = (void *)0x40000000;
          size_t v15 = ___ZN10IBISession13stopDTMFDigitEv_block_invoke;
          char v16 = &__block_descriptor_tmp_74;
          uint64_t v17 = v3;
          MediaSessionDriver::startTimerForRequest(v3 + 24, 74571, (uint64_t *)&v19, __p);
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
        }
        ImsResult::~ImsResult((ImsResult *)&v9);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C53F1E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  unint64_t v27 = *(std::__shared_weak_count **)(v25 - 48);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  ImsResult::~ImsResult((ImsResult *)&a9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10IBISessionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10IBISessionEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void IBISession::handleStopDTMFCodeResponse(IBISession *this, int a2, int a3)
{
  MediaSessionDriver::cancelTimerForRequest((int8x8_t *)this + 3, 74571);
  if (a2 || *((_DWORD *)this + 121) != a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::error((uint64_t)&v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Failed to stop DTMF digit : ", 28);
    *(unsigned char *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v17);
    }
    uint64_t v12 = *(void *)(*((void *)this + 7) + 296);
    if (v12) {
      AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v12 + 120), 16);
    }
    std::__list_imp<unsigned long long>::clear((void *)this + 62);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Stopped sending DTMF digit, session id : ", 41);
    *(unsigned char *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v17);
    }
    RTPSharedPointerBase::getShared<IBISession>(&v17, (uint64_t)this);
    uint64_t v8 = v17;
    uint64_t v7 = v18;
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    dispatch_time_t v9 = dispatch_time(0, 1000000 * *((unsigned int *)this + 119));
    long long v10 = *((void *)this + 9);
    if (v10) {
      dispatch_retain(*((dispatch_object_t *)this + 9));
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN10IBISession26handleStopDTMFCodeResponseEjj_block_invoke;
    block[3] = &__block_descriptor_tmp_96_0;
    block[4] = this;
    block[5] = v8;
    char v14 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_after(v9, v10, block);
    if (v10) {
      dispatch_release(v10);
    }
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1C53F21B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 49) < 0) {
    operator delete(*(void **)(v22 - 72));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10IBISession26handleStopDTMFCodeResponseEjj_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        *(unsigned char *)(v3 + 489) = 0;
        IBISession::startDTMFDigit((IBISession *)v6, v3);
        ImsResult::~ImsResult((ImsResult *)v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C53F2260(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IBISession::handleCreateAudioMediaSessionResponse(int8x8_t *this, int a2, unsigned int a3)
{
  MediaSessionDriver::cancelTimerForRequest(this + 3, 74565);
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v31, "");
    uint64_t v13 = ims::debug((uint64_t)v33, (uint64_t)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Created media session successfully, session id : ", 49);
    *(unsigned char *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    this[60].i32[1] = a3;
    if (!IBISession::_activeAudio)
    {
      std::string::basic_string[abi:ne180100]<0>(v33, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(v31, "");
      uint64_t v14 = ims::debug((uint64_t)v33, (uint64_t)v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Send event to Audio device", 26);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      if (v34 < 0) {
        operator delete(v33[0]);
      }
      IBIRTPStackController::sendAudioCallEvent(*(void **)&this[131]);
    }
    uint64_t v15 = (uint64_t)this[131];
    RTPSharedPointerBase::getShared<IBISession>(&v29, (uint64_t)this);
    IBIRTPStackController::addSession(v15, a3, (uint64_t *)&v29);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (this[72].i8[0])
    {
      std::string::basic_string[abi:ne180100]<0>(v33, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(v31, "");
      uint64_t v16 = ims::debug((uint64_t)v33, (uint64_t)v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"We have both local and remote SDP, send MediaConfigured", 55);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      if (v34 < 0) {
        operator delete(v33[0]);
      }
      uint64_t v17 = (std::__shared_weak_count *)this[5];
      if (!v17) {
        return;
      }
      uint64_t v18 = std::__shared_weak_count::lock(v17);
      if (!v18) {
        return;
      }
      long long v10 = v18;
      int8x8_t v19 = this[4];
      if (!*(void *)&v19) {
        goto LABEL_40;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v27);
      (*(void (**)(int8x8_t, void **, void))(**(void **)&v19 + 16))(v19, &v27, 0);
      uint64_t v12 = v28;
      if (!v28) {
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v20 = (std::__shared_weak_count *)this[5];
      if (!v20) {
        return;
      }
      char v21 = std::__shared_weak_count::lock(v20);
      if (!v21) {
        return;
      }
      long long v10 = v21;
      uint64_t v22 = (void (***)(void, void **, void))this[4];
      if (!v22) {
        goto LABEL_40;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v25);
      (**v22)(v22, &v25, 0);
      uint64_t v12 = v26;
      if (!v26) {
        goto LABEL_40;
      }
    }
LABEL_39:
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_40:
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  uint64_t v6 = ims::error((uint64_t)v33, (uint64_t)v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Failed to create media session : ", 33);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  uint64_t v7 = *(void *)(*(void *)&this[7] + 296);
  if (v7) {
    AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v7 + 120), 4);
  }
  IBISession::cleanup((IBISession *)this, 0);
  uint64_t v8 = (std::__shared_weak_count *)this[5];
  if (v8)
  {
    dispatch_time_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      long long v10 = v9;
      uint64_t v11 = (void (***)(void, void **, uint64_t))this[4];
      if (!v11) {
        goto LABEL_40;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v23);
      (**v11)(v11, &v23, 8);
      uint64_t v12 = v24;
      if (!v24) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
  }
}

void sub_1C53F2740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void IBISession::handleConfigureAudioMediaSessionResponse(int8x8_t *this, int a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v43, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v43, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleConfigureAudioMediaSessionResponse [_mediaSessionId=", 58);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" sessionId=", 11);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" result=", 8);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  MediaSessionDriver::cancelTimerForRequest(this + 3, 74566);
  if (a2 || this[60].i32[1] != a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v43, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::error((uint64_t)v43, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Failed to configure media session : ", 36);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v42 < 0) {
      operator delete(__p[0]);
    }
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    uint64_t v15 = *(void *)(*(void *)&this[7] + 296);
    if (v15) {
      AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v15 + 120), 6);
    }
    uint64_t v16 = (std::__shared_weak_count *)this[5];
    if (!v16) {
      return;
    }
    uint64_t v17 = std::__shared_weak_count::lock(v16);
    if (!v17) {
      return;
    }
    uint64_t v11 = v17;
    int8x8_t v18 = this[4];
    if (!*(void *)&v18) {
      goto LABEL_32;
    }
    RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v33);
    (*(void (**)(int8x8_t, void **, uint64_t))(**(void **)&v18 + 16))(v18, &v33, 9);
    uint64_t v13 = v34;
    if (!v34) {
      goto LABEL_32;
    }
LABEL_31:
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_32:
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v43, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v43, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Session id : ", 13);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (!this[65].i8[0])
  {
    std::string::basic_string[abi:ne180100]<0>(v43, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v19 = ims::debug((uint64_t)v43, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" Configured Media", 17);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    if (v42 < 0) {
      operator delete(__p[0]);
    }
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    if (this[32].i32[0] == 4)
    {
      if (this[65].i8[3])
      {
        std::string::basic_string[abi:ne180100]<0>(v43, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v20 = ims::debug((uint64_t)v43, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" for Local hold, now de-activate media", 38);
        *(unsigned char *)(v20 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v20 + 17) = 0;
        if (v42 < 0) {
          operator delete(__p[0]);
        }
        if (v44 < 0) {
          operator delete(v43[0]);
        }
        (*(void (**)(int8x8_t *, void))(*(void *)this + 40))(this, 0);
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v21 = ims::debug((uint64_t)v43, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Inform delegate", 15);
      *(unsigned char *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v21 + 17) = 0;
      if (v42 < 0) {
        operator delete(__p[0]);
      }
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      uint64_t v22 = (std::__shared_weak_count *)this[5];
      if (!v22) {
        return;
      }
      char v23 = std::__shared_weak_count::lock(v22);
      if (!v23) {
        return;
      }
      uint64_t v11 = v23;
      int8x8_t v24 = this[4];
      if (!*(void *)&v24) {
        goto LABEL_32;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v37);
      (*(void (**)(int8x8_t, void **, void))(**(void **)&v24 + 16))(v24, &v37, 0);
      uint64_t v13 = v38;
      if (!v38) {
        goto LABEL_32;
      }
    }
    else
    {
      if (this[65].i8[1])
      {
        std::string::basic_string[abi:ne180100]<0>(v43, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v25 = ims::debug((uint64_t)v43, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)" for remote hold, ", 18);
        *(unsigned char *)(v25 + 17) = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v43, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v26 = ims::debug((uint64_t)v43, (uint64_t)__p);
        ImsOutStream::operator<<(v26, " for call resume, ");
      }
      if (v42 < 0) {
        operator delete(__p[0]);
      }
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      if (!this[65].i8[3])
      {
        std::string::basic_string[abi:ne180100]<0>(v43, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v31 = ims::debug((uint64_t)v43, (uint64_t)__p);
        char v32 = (unsigned char *)ImsOutStream::operator<<(v31, "now activate media");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v32[17] = 0;
        if (v42 < 0) {
          operator delete(__p[0]);
        }
        if (v44 < 0) {
          operator delete(v43[0]);
        }
        (*(void (**)(int8x8_t *, void))(*(void *)this + 32))(this, 0);
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v27 = ims::debug((uint64_t)v43, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"media is already active", 23);
      *(unsigned char *)(v27 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v27 + 17) = 0;
      if (v42 < 0) {
        operator delete(__p[0]);
      }
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      char v28 = (std::__shared_weak_count *)this[5];
      if (!v28) {
        return;
      }
      uint64_t v29 = std::__shared_weak_count::lock(v28);
      if (!v29) {
        return;
      }
      uint64_t v11 = v29;
      int8x8_t v30 = this[4];
      if (!*(void *)&v30) {
        goto LABEL_32;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v35);
      (*(void (**)(int8x8_t, void **, void))(**(void **)&v30 + 24))(v30, &v35, 0);
      uint64_t v13 = v36;
      if (!v36) {
        goto LABEL_32;
      }
    }
    goto LABEL_31;
  }
  this[65].i8[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v43, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v43, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" Configured media session successfully, inform delegate", 55);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  dispatch_time_t v9 = (std::__shared_weak_count *)this[5];
  if (v9)
  {
    long long v10 = std::__shared_weak_count::lock(v9);
    if (v10)
    {
      uint64_t v11 = v10;
      int8x8_t v12 = this[4];
      if (!*(void *)&v12) {
        goto LABEL_32;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v39);
      (*(void (**)(int8x8_t, void **, void))(**(void **)&v12 + 16))(v12, &v39, 0);
      uint64_t v13 = v40;
      if (!v40) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
  }
}

void sub_1C53F316C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void IBISession::handleRequestTimeout(uint64_t a1, int a2)
{
  std::string::basic_string[abi:ne180100]<0>(v28, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::error((uint64_t)v28, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Request (", 9);
  *(unsigned char *)(v4 + 17) = 0;
  int v5 = a2 - 74565;
  if ((a2 - 74565) > 6)
  {
    uint64_t v6 = "Error";
    uint64_t v7 = 5;
  }
  else
  {
    uint64_t v6 = off_1E6510410[v5];
    uint64_t v7 = qword_1C56D1ED0[v5];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)v6, v7);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)") timed out waiting for response from BB", 40);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  IBISession::cleanup((IBISession *)a1, 0);
  switch(a2)
  {
    case 74565:
      uint64_t v15 = *(void *)(a1 + 1048);
      uint64_t v16 = *(std::__shared_weak_count **)(v15 + 128);
      *(void *)(v15 + 120) = 0;
      *(void *)(v15 + 128) = 0;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      goto LABEL_9;
    case 74566:
    case 74567:
    case 74570:
    case 74571:
LABEL_9:
      std::string::basic_string[abi:ne180100]<0>(v28, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v8 = ims::error((uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Treat it as catastrophic error and end session.", 47);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 296);
      if (v9) {
        AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v9 + 120), 23);
      }
      long long v10 = *(std::__shared_weak_count **)(a1 + 40);
      if (!v10) {
        return;
      }
      uint64_t v11 = std::__shared_weak_count::lock(v10);
      if (!v11) {
        return;
      }
      int8x8_t v12 = v11;
      uint64_t v13 = *(void *)(a1 + 32);
      if (v13)
      {
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v24);
        (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v13 + 40))(v13, &v24, 9);
        uint64_t v14 = v25;
        if (v25) {
          goto LABEL_19;
        }
      }
      goto LABEL_20;
    case 74568:
      std::string::basic_string[abi:ne180100]<0>(v28, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v17 = ims::debug((uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Call terminate to clean out baseband session.", 45);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      (*(void (**)(uint64_t, void))(*(void *)a1 + 24))(a1, 0);
      return;
    case 74569:
      std::string::basic_string[abi:ne180100]<0>(v28, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v18 = ims::debug((uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Terminate session and ignore the timeout.", 41);
      *(unsigned char *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v18 + 17) = 0;
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      IBIRTPStackController::removeSession(*(uint64_t ***)(a1 + 1048), *(_DWORD *)(a1 + 484));
      IBISession::cleanup((IBISession *)a1, 0);
      uint64_t v19 = *(std::__shared_weak_count **)(a1 + 40);
      if (!v19) {
        return;
      }
      uint64_t v20 = std::__shared_weak_count::lock(v19);
      if (!v20) {
        return;
      }
      int8x8_t v12 = v20;
      uint64_t v21 = *(void *)(a1 + 32);
      if (!v21) {
        goto LABEL_20;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v22);
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v21 + 8))(v21, &v22, 9);
      uint64_t v14 = v23;
      if (!v23) {
        goto LABEL_20;
      }
LABEL_19:
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
LABEL_20:
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      return;
    default:
      return;
  }
}

void sub_1C53F36F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void *IBISession::toTimerIdString@<X0>(int a1@<W1>, void *a2@<X8>)
{
  switch(a1)
  {
    case 74565:
      uint64_t v3 = "SESSION_INITIALIZE";
      break;
    case 74566:
      uint64_t v3 = "SESSION_CONFIGURE";
      break;
    case 74567:
      uint64_t v3 = "SESSION_START";
      break;
    case 74568:
      uint64_t v3 = "SESSION_STOP";
      break;
    case 74569:
      uint64_t v3 = "SESSION_UNINITIALIZE";
      break;
    case 74570:
      uint64_t v3 = "SESSION_START_DTMF";
      break;
    case 74571:
      uint64_t v3 = "SESSION_STOP_DTMF";
      break;
    default:
      ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()();
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

uint64_t IBISession::active(IBISession *this)
{
  return *((unsigned __int8 *)this + 522);
}

uint64_t IBISession::mediaType(IBISession *this)
{
  return 2;
}

BOOL IBISession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return a2 == 2;
}

void IBISession::loggableName(LoggableString *a1@<X8>)
{
}

uint64_t IBISession::paused(IBISession *this)
{
  return *((unsigned __int8 *)this + 521);
}

uint64_t non-virtual thunk to'IBISession::active(IBISession *this)
{
  return *((unsigned __int8 *)this + 498);
}

uint64_t non-virtual thunk to'IBISession::paused(IBISession *this)
{
  return *((unsigned __int8 *)this + 497);
}

uint64_t non-virtual thunk to'IBISession::mediaType(IBISession *this)
{
  return 2;
}

BOOL non-virtual thunk to'IBISession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return a2 == 2;
}

void non-virtual thunk to'IBISession::loggableName(LoggableString *a1@<X8>)
{
}

{
  LoggableString::LoggableString(a1, "IBISession");
}

void IBIMediaSessionConfig_s::IBIMediaSessionConfig_s(IBIMediaSessionConfig_s *this)
{
  std::vector<unsigned char>::vector((void *)this + 2, 0x10uLL);
  std::vector<unsigned char>::vector((void *)this + 6, 0x10uLL);
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 5(*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = 0;
  uint64_t v2 = operator new(0xC0uLL);
  *((void *)this + 50) = v2 + 12;
  *((void *)this + 5(*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = v2 + 12;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[10] = 0u;
  v2[11] = 0u;
  *((void *)this + 49) = v2;
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 5IBISession::stop(this - 3) = 0;
  uint64_t v3 = operator new(0xA0uLL);
  *((void *)this + 54) = v3 + 10;
  *((void *)this + 55) = v3 + 10;
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  void v3[2] = 0u;
  v3[3] = 0u;
  _OWORD v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  *((void *)this + 5IBISession::stop(this - 3) = v3;
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  *((void *)this + 57) = 0;
  uint64_t v4 = operator new(0x20uLL);
  *((void *)this + 58) = v4 + 2;
  *((void *)this + 59) = v4 + 2;
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  *((void *)this + 57) = v4;
  *((unsigned char *)this + 488) = 0;
  *(void *)this = 0x100000000;
  *((unsigned char *)this + 40) = 0;
  *((_DWORD *)this + 2) = 0;
  *(_DWORD *)((char *)this + 1(*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = 0;
  *((void *)this + 9) = 0;
  *(void *)((char *)this + 77) = 0;
  *((unsigned char *)this + 384) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(void *)((char *)this + 374) = 0;
}

void sub_1C53F3A94(_Unwind_Exception *a1)
{
  int v5 = v4;
  v1[54] = v5;
  operator delete(v5);
  uint64_t v7 = (void *)v1[49];
  if (v7)
  {
    v1[50] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v3;
  if (*v3)
  {
    v1[7] = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v2;
  if (*v2)
  {
    v1[3] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

char *std::vector<IBIImsMEAudioEVSCodec>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IBIImsMEAudioEVSCodec>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<IBIImsMEAudioEVSCodec>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

void RTPSharedPointerBase::getShared<IBISession>(void **p_lpsrc, uint64_t a2)
{
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (void *)(a2 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v6;
      *p_lpsrCC_SHA256_CTX c = v3;
      p_lpsrc[1] = v4;
      p_lpsrCC_SHA256_CTX c = &lpsrc;
    }
  }
  *p_lpsrCC_SHA256_CTX c = 0;
  p_lpsrc[1] = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void std::__shared_ptr_emplace<IBISessionHelper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CB050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IBISessionHelper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CB050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<IBISessionHelper>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void SipPCalledPartyIdHeader::~SipPCalledPartyIdHeader(SipPCalledPartyIdHeader *this)
{
  *(void *)this = &unk_1F20D5808;
  SipUri::~SipUri((SipPCalledPartyIdHeader *)((char *)this + 104));
  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20D5808;
  SipUri::~SipUri((SipPCalledPartyIdHeader *)((char *)this + 104));
  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipPCalledPartyIdHeader::clone(SipPCalledPartyIdHeader *this)
{
}

void sub_1C53F3E6C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4072661F37);
  _Unwind_Resume(a1);
}

void SipAcceptContactValue::SipAcceptContactValue(SipAcceptContactValue *this, BambiServices *a2, const SipParameterMap *a3)
{
  *(void *)this = &unk_1F20B37B0;
  *((void *)this + 2) = 0;
  *((void *)this + (*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = (char *)this + 16;
  *((void *)this + IBISession::stop(this - 3) = 0;
  *((_WORD *)this + 16) = 256;
  BambiServices::addServiceParameters(a2, (uint64_t)this, a3);
  SipParameterMap::addParameters((std::string *)this, a3);
}

void sub_1C53F3F14(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = v2;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

void SipAcceptContactHeader::addValueWithServiceMaskAndParams(SipAcceptContactHeader *this, unsigned int a2, const SipParameterMap *a3)
{
}

void sub_1C53F3FA0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A0C40297E69CFLL);
  _Unwind_Resume(a1);
}

void SipVectorHeader<SipAcceptContactValue *>::addItem(void *a1, void *a2)
{
  unint64_t v6 = a1[10];
  uint64_t v4 = (uint64_t)(a1 + 10);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *(void *)(v4 - 16);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<SipAcceptContactValue *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v4, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = *a2;
    uint64_t v8 = v16 + 8;
    uint64_t v19 = (char *)a1[8];
    uint64_t v18 = (char *)a1[9];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - (*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*v9;
    }
    a1[8] = v16;
    a1[9] = v8;
    a1[10] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v7 = *a2;
    uint64_t v8 = v7 + 1;
  }
  a1[9] = v8;
}

void SipAcceptContactHeader::~SipAcceptContactHeader(SipAcceptContactHeader *this)
{
  SipPointerVectorHeader<SipAcceptContactValue>::~SipPointerVectorHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipAcceptContactHeader::clone(SipAcceptContactHeader *this)
{
}

void sub_1C53F4350(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40888A45CFLL);
  _Unwind_Resume(a1);
}

uint64_t SipVectorHeader<SipAcceptContactValue *>::encodeValue(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[8];
  if (a1[9] != v2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      if (v6)
      {
        uint64_t v7 = *(void **)(a2 + 8);
        char v9 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v9, 1);
        *(unsigned char *)(a2 + 17) = 0;
        uint64_t v2 = a1[8];
      }
      (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 112))(a1, v2 + v5, a2);
      ++v6;
      uint64_t v2 = a1[8];
      v5 += 8;
    }
    while (v6 < (a1[9] - v2) >> 3);
  }
  return 1;
}

BOOL SipVectorHeader<SipAcceptContactValue *>::setValueFromString(void *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v4 = (*(uint64_t (**)(void *, uint64_t, uint64_t, void **, uint64_t))(*a1 + 128))(a1, a2, v4, __p, 44);
    if (v4 == -1) {
      break;
    }
    uint64_t v6 = 0;
    if (((*(uint64_t (**)(void *, void **, uint64_t *))(*a1 + 120))(a1, __p, &v6) & 1) == 0) {
      break;
    }
    SipVectorHeader<SipAcceptContactValue *>::addItem(a1, &v6);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return v4 == -1;
}

void sub_1C53F456C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipVectorHeader<SipAcceptContactValue *>::allowsDuplicates()
{
  return 1;
}

uint64_t SipVectorHeader<SipAcceptContactValue *>::allowsMerging()
{
  return 1;
}

BOOL SipPointerVectorHeader<SipAcceptContactValue>::mergeHeader(int a1, void *lpsrc)
{
  if (v2 && v2[9] != v2[8]) {
    operator new();
  }
  return v2 != 0;
}

void sub_1C53F46C0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A0C40297E69CFLL);
  _Unwind_Resume(a1);
}

ImsOutStream *SipPointerVectorHeader<SipAcceptContactValue>::itemToStream(uint64_t a1, SipParameterMap **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a3 + 8), (uint64_t)"*", 1);
  *(unsigned char *)(a3 + 17) = 0;
  return SipParameterMap::toStream(v4, (ImsOutStream *)a3, 0, 0, 0, 0);
}

void SipPointerVectorHeader<SipAcceptContactValue>::itemFromString()
{
}

unint64_t SipVectorHeader<SipAcceptContactValue *>::nextToken(int a1, std::string *__str, std::string::size_type __pos, std::string *this, unsigned __int8 a5)
{
  return ims::nextTokenQ(__str, __pos, this, a5);
}

BOOL SipVectorHeader<SipAcceptContactValue *>::mergeHeader(void *a1, void *lpsrc)
{
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = (void *)v3[8];
    uint64_t v6 = (void *)v3[9];
    while (v5 != v6)
      SipVectorHeader<SipAcceptContactValue *>::addItem(a1, v5++);
  }
  return v4 != 0;
}

void SipVectorHeader<SipAcceptContactValue *>::~SipVectorHeader(SipHeader *this)
{
  *(void *)this = &unk_1F20CB2A8;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

void std::vector<SipAcceptContactValue *>::__throw_length_error[abi:ne180100]()
{
}

void SipPointerVectorHeader<SipAcceptContactValue>::~SipPointerVectorHeader(SipHeader *this)
{
  *(void *)this = &unk_1F20CB210;
  uint64_t v4 = (char *)this + 64;
  uint64_t v2 = (void *)*((void *)this + 8);
  uint64_t v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        *(void *)uint64_t v6 = &unk_1F20B37B0;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v6 + 8, *(void **)(v6 + 16));
        MEMORY[0x1C878E320](v6, 0x10A0C40297E69CFLL);
        uint64_t v2 = (void *)*((void *)this + 8);
        uint64_t v3 = (void *)*((void *)this + 9);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  *(void *)this = &unk_1F20CB2A8;
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

uint64_t ImsTlsSocket::ImsTlsSocket(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  unint64_t v5 = (std::__shared_weak_count *)a2[1];
  v7[0] = *a2;
  v7[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ImsTcpSocket::ImsTcpSocket(a1, v7, a3, a4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)a1 = &unk_1F20CB340;
  *(void *)(a1 + 80) = &unk_1F20CB4A0;
  *(void *)(a1 + 176) = &unk_1F20CB580;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  return a1;
}

void sub_1C53F4B64(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ImsTlsSocket::~ImsTlsSocket(ImsTlsSocket *this)
{
  *(void *)this = &unk_1F20CB340;
  *((void *)this + 10) = &unk_1F20CB4A0;
  *((void *)this + 22) = &unk_1F20CB580;
  ImsTlsSocket::close(this);
  uint64_t v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + 24) = v2;
    operator delete(v2);
  }
  ImsTcpSocket::~ImsTcpSocket(this);
}

{
  uint64_t vars8;

  ImsTlsSocket::~ImsTlsSocket(this);
  JUMPOUT(0x1C878E320);
}

void ImsTlsSocket::close(ImsTlsSocket *this)
{
  *((void *)this + 24) = *((void *)this + 23);
  uint64_t v2 = *((void *)this + 26);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 88))(v2);
    uint64_t v3 = *((void *)this + 26);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    *((void *)this + 26) = 0;
  }
  ImsTcpSocket::close(this);
}

void non-virtual thunk to'ImsTlsSocket::~ImsTlsSocket(ImsTlsSocket *this)
{
}

{
  ImsTlsSocket::~ImsTlsSocket((ImsTlsSocket *)((char *)this - 176));
}

{
  uint64_t vars8;

  ImsTlsSocket::~ImsTlsSocket((ImsTlsSocket *)((char *)this - 80));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  ImsTlsSocket::~ImsTlsSocket((ImsTlsSocket *)((char *)this - 176));
  JUMPOUT(0x1C878E320);
}

void ImsTlsSocket::_handleDataAvailable(ImsTlsSocket *this)
{
  memset(&v54, 0, sizeof(v54));
  int v2 = ImsTcpSocket::readFromSocket(**((_DWORD **)this + 5), &v54);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v3 && (uint64_t v4 = std::__shared_weak_count::lock(v3)) != 0)
  {
    char v46 = v4;
    uint64_t v47 = (uint64_t *)*((void *)this + 18);
  }
  else
  {
    char v46 = 0;
    uint64_t v47 = 0;
  }
  std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v54.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::basic_string[abi:ne180100]<0>(v50, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::spam((uint64_t)v50, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"ImsTlsSocket : _handleDataAvailable: read ", 42);
    *(unsigned char *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"bytes", 5);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v53 < 0) {
      operator delete(__p[0]);
    }
    int v45 = v2;
    if ((v51[7] & 0x80000000) != 0) {
      operator delete(v50[0]);
    }
    std::string::size_type v7 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v54;
    }
    else {
      uint64_t v8 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v7 = v54.__r_.__value_.__l.__size_;
    }
    if (v7)
    {
      char v9 = (std::string *)((char *)v8 + v7);
      uint64_t v10 = (unint64_t *)((char *)this + 184);
      uint64_t v11 = (std::string::value_type *)*((void *)this + 24);
      do
      {
        std::string::value_type v12 = v8->__r_.__value_.__s.__data_[0];
        unint64_t v13 = *((void *)this + 25);
        if ((unint64_t)v11 >= v13)
        {
          unint64_t v15 = *v10;
          uint64_t v16 = &v11[-*v10];
          unint64_t v17 = (unint64_t)(v16 + 1);
          if ((uint64_t)(v16 + 1) < 0) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v18 = v13 - v15;
          if (2 * v18 > v17) {
            unint64_t v17 = 2 * v18;
          }
          if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v19 = v17;
          }
          if (v19) {
            uint64_t v20 = (char *)operator new(v19);
          }
          else {
            uint64_t v20 = 0;
          }
          uint64_t v21 = &v16[(void)v20];
          uint64_t v22 = &v16[(void)v20];
          std::string::value_type *v22 = v12;
          unint64_t v14 = v22 + 1;
          if (v11 != (std::string::value_type *)v15)
          {
            char v23 = &v11[~v15];
            do
            {
              std::string::value_type v24 = *--v11;
              (v23--)[(void)v20] = v24;
            }
            while (v11 != (std::string::value_type *)v15);
            uint64_t v11 = (std::string::value_type *)*v10;
            uint64_t v21 = v20;
          }
          *((void *)this + 2IBISession::stop(this - 3) = v21;
          *((void *)this + 24) = v14;
          *((void *)this + 25) = &v20[v19];
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          std::string::value_type *v11 = v12;
          unint64_t v14 = v11 + 1;
        }
        *((void *)this + 24) = v14;
        uint64_t v8 = (std::string *)((char *)v8 + 1);
        uint64_t v11 = v14;
      }
      while (v8 != v9);
    }
    ImsTlsSocket::_handshakeDone(this, (uint64_t)v50);
    int v2 = v45;
    char v25 = (*(uint64_t (**)(void *, void))(*(void *)v50[1] + 24))(v50[1], *(unsigned int *)v51);
    ImsResult::~ImsResult((ImsResult *)v50);
    if (v25)
    {
      std::string::basic_string[abi:ne180100]<0>(v50, "net");
      uint64_t v26 = v46;
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v27 = ims::debug((uint64_t)v50, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"Waiting on SSL handshake", 24);
      *(unsigned char *)(v27 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v27 + 17) = 0;
      if (v53 < 0) {
        operator delete(__p[0]);
      }
      if ((v51[7] & 0x80000000) != 0) {
        operator delete(v50[0]);
      }
      goto LABEL_110;
    }
    while (*((void *)this + 23) != *((void *)this + 24))
    {
      v50[0] = 0;
      v50[1] = 0;
      *(void *)uint64_t v51 = 0;
      int v28 = (*(uint64_t (**)(void, void **))(**((void **)this + 26) + 128))(*((void *)this + 26), v50);
      if (v28 != -9805 && v28 != 0 && v28 != -9803)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "net");
        std::string::basic_string[abi:ne180100]<0>(v48, "");
        uint64_t v35 = ims::error((uint64_t)__p, (uint64_t)v48);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"ImsTlsSocket: Failed to read App data from transport. Error: ", 61);
        *(unsigned char *)(v35 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v35 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v35 + 17) = 0;
        if (v49 < 0) {
          operator delete(v48[0]);
        }
        if (v53 < 0) {
          operator delete(__p[0]);
        }
        char v36 = 0;
        goto LABEL_79;
      }
      uint64_t v31 = (void *)v51[7];
      if (v51[7] < 0) {
        uint64_t v31 = v50[1];
      }
      if (v31)
      {
        if (*((unsigned char *)this + 72))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "net");
          std::string::basic_string[abi:ne180100]<0>(v48, "");
          uint64_t v37 = ims::warn((uint64_t)__p, (uint64_t)v48);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"ImsTlsSocket: kDebugDropIncoming set.  Dropping incoming packet.", 64);
          *(unsigned char *)(v37 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v37 + 17) = 0;
LABEL_74:
          if (v49 < 0) {
            operator delete(v48[0]);
          }
          if (v53 < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_78;
        }
        if (!v47)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "net");
          std::string::basic_string[abi:ne180100]<0>(v48, "");
          uint64_t v38 = ims::debug((uint64_t)__p, (uint64_t)v48);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"ImsTlsSocket: No delegate to handle incoming packet from ", 57);
          *(unsigned char *)(v38 + 17) = 0;
          (*(void (**)(void, uint64_t))(**((void **)this + 11) + 40))(*((void *)this + 11), v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)". Discarding packet", 19);
          *(unsigned char *)(v38 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v38 + 17) = 0;
          goto LABEL_74;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "net");
        std::string::basic_string[abi:ne180100]<0>(v48, "");
        uint64_t v32 = ims::spam((uint64_t)__p, (uint64_t)v48);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"ImsTlsSocket : process data, len = ", 35);
        *(unsigned char *)(v32 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v32 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v32 + 17) = 0;
        if (v49 < 0) {
          operator delete(v48[0]);
        }
        if (v53 < 0) {
          operator delete(__p[0]);
        }
        if (v51[7] >= 0) {
          unsigned int v33 = v50;
        }
        else {
          unsigned int v33 = (void **)v50[0];
        }
        if (v51[7] >= 0) {
          char v34 = (void *)v51[7];
        }
        else {
          char v34 = v50[1];
        }
        (*(void (**)(uint64_t *, void **, void *, char *))(*v47 + 48))(v47, v33, v34, (char *)this + 88);
      }
LABEL_78:
      char v36 = 1;
LABEL_79:
      if ((v51[7] & 0x80000000) != 0)
      {
        operator delete(v50[0]);
        if ((v36 & 1) == 0) {
          break;
        }
      }
      else if ((v36 & 1) == 0)
      {
        break;
      }
    }
  }
  uint64_t v26 = v46;
  if (!v2) {
    goto LABEL_110;
  }
  if (v2 != -1)
  {
    *(_OWORD *)char v50 = 0u;
    memset(v51, 0, sizeof(v51));
    int v40 = *__error();
    memset(&v51[8], 0, 48);
    v50[0] = &unk_1F20B2680;
    v50[1] = &_posixDomain;
    *(_DWORD *)uint64_t v51 = v40;
    std::string::basic_string[abi:ne180100]<0>(__p, "net");
    std::string::basic_string[abi:ne180100]<0>(v48, "");
    uint64_t v41 = ims::error((uint64_t)__p, (uint64_t)v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"ImsTlsSocket: handle error ", 27);
    *(unsigned char *)(v41 + 17) = 0;
    (*((void (**)(void **, uint64_t))v50[0] + 2))(v50, v41);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v41 + 17) = 0;
    if (v49 < 0) {
      operator delete(v48[0]);
    }
    if (v53 < 0)
    {
      operator delete(__p[0]);
      if (v47)
      {
LABEL_95:
        uint64_t v42 = *v47;
        if (*(_DWORD *)v51 == 54) {
          (*(void (**)(uint64_t *))(v42 + 24))(v47);
        }
        else {
          (*(void (**)(uint64_t *, void **))(v42 + 40))(v47, v50);
        }
LABEL_109:
        ImsResult::~ImsResult((ImsResult *)v50);
        goto LABEL_110;
      }
    }
    else if (v47)
    {
      goto LABEL_95;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "net");
    std::string::basic_string[abi:ne180100]<0>(v48, "");
    uint64_t v44 = ims::debug((uint64_t)__p, (uint64_t)v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"ImsTlsSocket: no delegate to handle error, closing myself", 57);
    *(unsigned char *)(v44 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v44 + 17) = 0;
    if (v49 < 0) {
      operator delete(v48[0]);
    }
    if (v53 < 0) {
      operator delete(__p[0]);
    }
    ImsTlsSocket::close(this);
    goto LABEL_109;
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v39 = ims::error((uint64_t)v50, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"ImsTlsSocket: remote end closed connection", 42);
  *(unsigned char *)(v39 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v39 + 17) = 0;
  if (v53 < 0) {
    operator delete(__p[0]);
  }
  if ((v51[7] & 0x80000000) != 0) {
    operator delete(v50[0]);
  }
  *((unsigned char *)this + 136) = 1;
  if (v47)
  {
    (*(void (**)(uint64_t *))(*v47 + 16))(v47);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v50, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v43 = ims::debug((uint64_t)v50, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"ImsTlsSocket: no delegate to handle, closing myself", 51);
    *(unsigned char *)(v43 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v43 + 17) = 0;
    if (v53 < 0) {
      operator delete(__p[0]);
    }
    if ((v51[7] & 0x80000000) != 0) {
      operator delete(v50[0]);
    }
    ImsTlsSocket::close(this);
  }
LABEL_110:
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
}

void sub_1C53F58D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult((ImsResult *)&a18);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(a1);
}

void ImsTlsSocket::_handshakeDone(ImsTlsSocket *this@<X0>, uint64_t a2@<X8>)
{
  if ((*(uint64_t (**)(void))(**((void **)this + 26) + 104))(*((void *)this + 26)))
  {
LABEL_2:
    std::string::basic_string[abi:ne180100]<0>(v10, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"SSL/TLS handshake done", 22);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    int v5 = 0;
    goto LABEL_13;
  }
  if (!(*(unsigned int (**)(void))(**((void **)this + 26) + 112))(*((void *)this + 26)))
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Negotiated Cipher :", 19);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(void))(**((void **)this + 26) + 120))(*((void *)this + 26));
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    goto LABEL_2;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Continue SSL/TLS handshake", 26);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  int v5 = 0x40000000;
LABEL_13:
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
}

void sub_1C53F5CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsTlsSocket::initializeSocket(uint64_t a1, void *a2, void *a3)
{
  memset(&v6, 0, sizeof(v6));
  if (*a2) {
    IpAddress::asString(__p);
  }
  if (*a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v4, "<--");
    IpAddress::asString(&v3);
  }
  operator new();
}

void sub_1C53F60E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  ims::CFType::~CFType((ims::CFType *)&a13);
  if (*(char *)(v34 - 89) < 0) {
    operator delete(*(void **)(v34 - 112));
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ImsTlsSocket::initializeSocket(uint64_t a1, void *a2, void *a3)
{
}

void ImsTlsSocket::initializeSocket(uint64_t a1@<X0>, ImsSocket *a2@<X1>, void *a3@<X2>, dispatch_queue_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>, int a8)
{
  if (!*(void *)(a1 + 208))
  {
    memset(&v18, 0, sizeof(v18));
    if (*a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v17, "auto<--");
      IpAddress::asString(&v16);
    }
    operator new();
  }
  unint64_t v13 = *(const void **)(a6 + 8);
  v15[0] = &unk_1F20E38B0;
  v15[1] = v13;
  if (v13) {
    CFRetain(v13);
  }
  v15[0] = &unk_1F20B3050;
  ImsTcpSocket::initializeSocket(a1, a2, a3, a4, a5, a7, a8);
  ims::CFType::~CFType((ims::CFType *)v15);
}

void sub_1C53F6564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 81) < 0) {
    operator delete(*(void **)(v32 - 104));
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'ImsTlsSocket::initializeSocket(uint64_t a1@<X0>, ImsSocket *a2@<X1>, void *a3@<X2>, dispatch_queue_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>, int a8)
{
}

double ImsTlsSocket::_writeToSocket@<D0>(ImsTlsSocket *this@<X0>, const unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = a3;
  if ((*(unsigned int (**)(void, const unsigned __int8 *, uint64_t *))(**((void **)this + 26) + 144))(*((void *)this + 26), a2, &v19))
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "net");
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    v12[0] = &unk_1F20B2680;
    v12[1] = &_bambiDomain;
    int v13 = 0x40000000;
    uint64_t v6 = ImsResult::operator<<<char [30]>((uint64_t)v12, "ImsTlsSocket: Could not send ");
    uint64_t v7 = ImsResult::operator<<<unsigned long>(v6);
    uint64_t v8 = ImsResult::operator<<<char [11]>(v7, " bytes to ");
    uint64_t v9 = ImsResult::operator<<<std::shared_ptr<IpAddress>>(v8, (void *)this + 11);
    uint64_t v10 = (const std::string *)ims::result::log((uint64_t)v17, v9);
    ImsResult::ImsResult((ImsResult *)a4, v10);
    ImsResult::~ImsResult((ImsResult *)v12);
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void sub_1C53F6790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  if (*(char *)(v2 - 25) < 0) {
    operator delete(*(void **)(v2 - 48));
  }
  _Unwind_Resume(a1);
}

double ImsTlsSocket::shutdown@<D0>(uint64_t a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"ImsTlsSocket: Shutdown not supported on a tls socket", 52);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 1073741834;
  return result;
}

void sub_1C53F68C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsTlsSocket::reset(ImsTlsSocket *this)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v1 = ims::debug((uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v1 + 8), (uint64_t)"ImsTlsSocket: Reset not supported on a tls socket", 49);
  *(unsigned char *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v1 + 17) = 0;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1C53F69BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsTlsSocket::readDataFromStream(ImsTlsSocket *this, void *a2, unint64_t *a3)
{
  if (*((void *)this + 24) - *((void *)this + 23) >= *a3) {
    size_t v6 = *a3;
  }
  else {
    size_t v6 = *((void *)this + 24) - *((void *)this + 23);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v16, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"readDataFromStream : expected: ", 31);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", Available : ", 14);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v6)
  {
    memcpy(a2, *((const void **)this + 23), v6);
    uint64_t v9 = *((void *)this + 23);
    uint64_t v8 = *((void *)this + 24);
    size_t v10 = v8 - (v9 + v6);
    if (v8 != v9 + v6) {
      memmove(*((void **)this + 23), (const void *)(v9 + v6), v8 - (v9 + v6));
    }
    *((void *)this + 24) = v9 + v10;
  }
  if (*a3 == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::spam((uint64_t)v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"ImsTlsSocket : readDataFromStream errSecSuccess", 47);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    return 0;
  }
  else
  {
    *a3 = v6;
    std::string::basic_string[abi:ne180100]<0>(v16, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v13 = ims::spam((uint64_t)v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"ImsTlsSocket : readDataFromStream errSSLWouldBlock ", 51);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    return 4294957493;
  }
}

void sub_1C53F6CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'ImsTlsSocket::readDataFromStream(ImsTlsSocket *this, void *a2, unint64_t *a3)
{
  return ImsTlsSocket::readDataFromStream((ImsTlsSocket *)((char *)this - 176), a2, a3);
}

uint64_t ImsTlsSocket::writeDataToStream(ImsTlsSocket *this, const void *a2, unint64_t *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v13, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"writeDataToStream : expected: ", 30);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  ssize_t v7 = send(**((_DWORD **)this + 5), a2, *a3, 0);
  std::string::basic_string[abi:ne180100]<0>(v13, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"expected : ", 11);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" Sent data : ", 13);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v7 < 1) {
    return 4294957496;
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v9 = ims::debug((uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"writeDataToStream : success: ", 29);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  return 0;
}

void sub_1C53F6FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'ImsTlsSocket::writeDataToStream(ImsTlsSocket *this, const void *a2, unint64_t *a3)
{
  return ImsTlsSocket::writeDataToStream((ImsTlsSocket *)((char *)this - 176), a2, a3);
}

uint64_t ImsTlsSocket::isConnected(ImsTlsSocket *this)
{
  if (*((unsigned char *)this + 104)) {
    return (*(uint64_t (**)(void))(**((void **)this + 26) + 104))();
  }
  else {
    return 0;
  }
}

void non-virtual thunk to'ImsTlsSocket::onConnected(ImsTlsSocket *this)
{
}

void *ImsTlsSocket::protocol@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "TLS");
}

uint64_t ImsTlsSocket::isTls(ImsTlsSocket *this)
{
  return 1;
}

void *ImsSSLContextBase::ImsSSLContextBase(void *a1, uint64_t a2, long long *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "ImsSSL");
  ImsLogContainer::ImsLogContainer((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_1F20BBB58;
  a1[13] = a2;
  uint64_t v6 = (std::string *)(a1 + 14);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    a1[16] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_1C53F710C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  ImsLogContainer::~ImsLogContainer(v15);
  _Unwind_Resume(a1);
}

void SipConferenceInfoBody::SipConferenceInfoBody(SipConferenceInfoBody *this, const SipConferenceInfoBody *a2)
{
  char v3 = SipXmlBody::SipXmlBody(this, (uint64_t)a2);
  void *v3 = &unk_1F20C8570;
  SipConferenceInfo::SipConferenceInfo((uint64_t)(v3 + 4), (uint64_t)a2 + 32);
}

void sub_1C53F7188(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F20CC498;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_SipConferenceInfoBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&SipConferenceInfoBody::kContentType, "application/conference-info+xml");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &SipConferenceInfoBody::kContentType, &dword_1C51D1000);
}

void SipAllowEventsHeader::~SipAllowEventsHeader(char **this)
{
  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipAllowEventsHeader::clone(SipAllowEventsHeader *this)
{
}

void sub_1C53F734C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

void SipAcceptEncodingHeader::~SipAcceptEncodingHeader(char **this)
{
  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipAcceptEncodingHeader::clone(SipAcceptEncodingHeader *this)
{
}

void sub_1C53F7498(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

void *SDPConnection::networkTypeLookup(SDPConnection *this)
{
  {
    ctu::NeverDestroyed<std::array<std::string,2ul>>::NeverDestroyed<char const(&)[1],char const(&)[3]>(SDPConnection::networkTypeLookup(void)::lookup, (char *)&str_24, "IN");
  }
  return SDPConnection::networkTypeLookup(void)::lookup;
}

void sub_1C53F752C(_Unwind_Exception *a1)
{
}

void *SDPConnection::addressTypeLookup(SDPConnection *this)
{
  {
    ctu::NeverDestroyed<std::array<std::string,3ul>>::NeverDestroyed<char const(&)[1],char const(&)[4],char const(&)[4]>(SDPConnection::addressTypeLookup(void)::lookup, (char *)&str_24, "IP4", "IP6");
  }
  return SDPConnection::addressTypeLookup(void)::lookup;
}

void sub_1C53F75BC(_Unwind_Exception *a1)
{
}

void SDPConnection::toStream(SDPConnection *this, ImsOutStream *a2)
{
  std::string v4 = (void *)*((void *)a2 + 1);
  char v6 = 99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v6, 1);
  *((unsigned char *)a2 + 17) = 0;
  char v5 = (void *)*((void *)a2 + 1);
  char v7 = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v7, 1);
  *((unsigned char *)a2 + 17) = 0;
  SDPConnection::valueToStream(this, a2);
}

void SDPConnection::valueToStream(SDPConnection *this, ImsOutStream *a2)
{
  SDPConnection::networkTypeLookup(this);
  LoggableString::LoggableString(&v8, (const std::string *)&SDPConnection::networkTypeLookup(void)::lookup[3 * *((unsigned int *)this + 3)]);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v8);
  std::string v4 = (void *)*((void *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 32;
  char v5 = (SDPConnection *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  SDPConnection::addressTypeLookup(v5);
  LoggableString::LoggableString(&__p, (const std::string *)&SDPConnection::addressTypeLookup(void)::lookup[3 * *((unsigned int *)this + 4)]);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  char v6 = (void *)*((void *)a2 + 1);
  char v9 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_1C53F778C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPConnection::valid(const std::string *this)
{
  if (!this->__r_.__value_.__s.__data_[8]
    || !HIDWORD(this->__r_.__value_.__r.__words[1])
    || !LODWORD(this->__r_.__value_.__r.__words[2]))
  {
    return 0;
  }
  if (!this[2].__r_.__value_.__s.__data_[0])
  {
    std::string::size_type size = HIBYTE(this[1].__r_.__value_.__r.__words[2]);
    int v3 = (char)size;
    if ((size & 0x80u) != 0) {
      std::string::size_type size = this[1].__r_.__value_.__l.__size_;
    }
    if (size == 2)
    {
      std::string v4 = v3 >= 0 ? (SDPConnection *)&this[1] : (SDPConnection *)this[1].__r_.__value_.__r.__words[0];
      if (*(_WORD *)v4 == 14906) {
        return 0;
      }
    }
  }
  if (IpAddress::isAddress((std::string *)&this[1])) {
    return 1;
  }
  LODWORD(v7) = this->__r_.__value_.__r.__words[2];
  if (v7 != 2) {
    goto LABEL_27;
  }
  if ((SHIBYTE(this[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    unint64_t v7 = HIBYTE(this[1].__r_.__value_.__r.__words[2]);
    if (v7 > 7) {
      goto LABEL_19;
    }
LABEL_27:
    int v10 = 0;
    goto LABEL_28;
  }
  unint64_t v7 = this[1].__r_.__value_.__l.__size_;
  if (v7 <= 7) {
    goto LABEL_27;
  }
LABEL_19:
  std::string::basic_string(&__p, this + 1, v7 - 8, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
  std::string::size_type v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  LOBYTE(v7) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v8 = __p.__r_.__value_.__l.__size_;
  }
  if (v8 != 8)
  {
    int v10 = 1;
    goto LABEL_28;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  int v10 = 1;
  BOOL v5 = 1;
  if (p_p->__r_.__value_.__r.__words[0] != 0x64696C61766E692ELL)
  {
LABEL_28:
    if (this[2].__r_.__value_.__s.__data_[1]
      && ((SHIBYTE(this[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0 || this[1].__r_.__value_.__l.__size_ <= 0xFF))
    {
      BOOL v5 = std::string::find(this + 1, 46, 0) != -1;
      if (!v10) {
        return v5;
      }
      LOBYTE(v7) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
    }
    else
    {
      BOOL v5 = 0;
      if (!v10) {
        return v5;
      }
    }
  }
  if ((v7 & 0x80) != 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

SDPConnection *SDPConnection::setAddressTypeFromString(SDPConnection *result, unsigned __int8 *a2)
{
  int v3 = result;
  uint64_t v4 = 0;
  while (1)
  {
    double result = (SDPConnection *)SDPConnection::addressTypeLookup(result);
    BOOL v5 = &SDPConnection::addressTypeLookup(void)::lookup[3 * v4];
    uint64_t v6 = a2[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = a2[23];
    }
    else {
      uint64_t v7 = *((void *)a2 + 1);
    }
    uint64_t v8 = *((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      goto LABEL_18;
    }
    int v10 = v9 >= 0 ? (unsigned __int8 *)&SDPConnection::addressTypeLookup(void)::lookup[3 * v4] : (unsigned __int8 *)*v5;
    if ((v6 & 0x80) != 0) {
      break;
    }
    if (!a2[23]) {
      goto LABEL_20;
    }
    uint64_t v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v6) {
        goto LABEL_20;
      }
    }
LABEL_18:
    if (++v4 == 3) {
      return result;
    }
  }
  double result = (SDPConnection *)memcmp(*(const void **)a2, v10, *((void *)a2 + 1));
  if (result) {
    goto LABEL_18;
  }
LABEL_20:
  *((_DWORD *)v3 + 4) = v4;
  return result;
}

void SDPConnection::~SDPConnection(void **this)
{
  *this = &unk_1F20CB730;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20CB730;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  JUMPOUT(0x1C878E320);
}

void *ctu::NeverDestroyed<std::array<std::string,2ul>>::NeverDestroyed<char const(&)[1],char const(&)[3]>(void *a1, char *a2, char *a3)
{
  BOOL v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C53F7B3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *ctu::NeverDestroyed<std::array<std::string,3ul>>::NeverDestroyed<char const(&)[1],char const(&)[4],char const(&)[4]>(void *a1, char *a2, char *a3, char *a4)
{
  uint64_t v7 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v7 + 3, a3);
  std::string::basic_string[abi:ne180100]<0>(a1 + 6, a4);
  return a1;
}

void sub_1C53F7BB0(_Unwind_Exception *exception_object)
{
  while (1)
  {
    if (*(char *)(v2 - 1) < 0) {
      operator delete(*(void **)(v2 - 24));
    }
    v2 -= 24;
    if (v2 == v1) {
      _Unwind_Resume(exception_object);
    }
  }
}

void *ImsPrefs::getAcceptContactParamsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getAcceptContactParamsKey(void)::value, "AcceptContactParams", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getAcceptContactParamsKey(void)::value;
}

void sub_1C53F7C64(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAcceptedSmsContentTypesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[51],BOOL>((uint64_t)&ImsPrefs::getAcceptedSmsContentTypesKey(void)::value, "AcceptedSmsContentTypes", "Signaling", (unsigned __int8 *)&v2 + 1, "application/vnd.3gpp.sms,application/vnd.3gpp2.sms", (char *)&v2);
  }
  return &ImsPrefs::getAcceptedSmsContentTypesKey(void)::value;
}

void sub_1C53F7D08(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAccessBarringTypeKey(ImsPrefs *this)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  {
    char v4 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v6, "SSAC");
    std::string::basic_string[abi:ne180100]<0>(v7, "ACB");
    std::string::basic_string[abi:ne180100]<0>(v8, "Both");
    std::string::basic_string[abi:ne180100]<0>(v9, "None");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v3, &v6, 4uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getAccessBarringTypeKey(void)::value, "AccessBarringType", "Signaling", &v4, &v3);
    BOOL v5 = (void **)&v3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    for (uint64_t i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v9[i + 2]) < 0) {
        operator delete((void *)v9[i]);
      }
    }
  }
  return &ImsPrefs::getAccessBarringTypeKey(void)::value;
}

void sub_1C53F7E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, char a14)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  uint64_t v15 = 0;
  while (1)
  {
    if (*(&a14 + v15 + 95) < 0) {
      operator delete(*(void **)(&a14 + v15 + 72));
    }
    v15 -= 24;
    if (v15 == -96)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getAccessNetworkRefreshMethodKey(ImsPrefs *this)
{
  void v8[3] = *MEMORY[0x1E4F143B8];
  {
    char v4 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v6, (char *)&str_2_6);
    std::string::basic_string[abi:ne180100]<0>(v7, "INVITE");
    std::string::basic_string[abi:ne180100]<0>(v8, "UPDATE");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v3, &v6, 3uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getAccessNetworkRefreshMethodKey(void)::value, "AccessNetworkRefreshMethod", "Signaling", &v4, &v3);
    BOOL v5 = (void **)&v3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    for (uint64_t i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v8[i + 2]) < 0) {
        operator delete((void *)v8[i]);
      }
    }
  }
  return &ImsPrefs::getAccessNetworkRefreshMethodKey(void)::value;
}

void sub_1C53F8038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, char a15)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  uint64_t v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 71) < 0) {
      operator delete(*(void **)(&a15 + v16 + 48));
    }
    v16 -= 24;
    if (v16 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getAccessNetworkRefreshDelayMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getAccessNetworkRefreshDelayMillisecondsKey(void)::value, "AccessNetworkRefreshDelayMilliseconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAccessNetworkRefreshDelayMillisecondsKey(void)::value;
}

void sub_1C53F8144(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAccessNetworkRefreshInHeldCallsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAccessNetworkRefreshInHeldCallsKey(void)::value, "AccessNetworkRefreshInHeldCalls", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAccessNetworkRefreshInHeldCallsKey(void)::value;
}

void sub_1C53F81E8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAddAccessNetworkInfoToInsecureMessagesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddAccessNetworkInfoToInsecureMessagesKey(void)::value, "AddAccessNetworkInfoToInsecureMessages", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAddAccessNetworkInfoToInsecureMessagesKey(void)::value;
}

void sub_1C53F8284(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAddConferenceParticipantsToInviteKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddConferenceParticipantsToInviteKey(void)::value, "AddConferenceParticipantsToInvite", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAddConferenceParticipantsToInviteKey(void)::value;
}

void sub_1C53F8320(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAddContentDispositionInPIDFKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddContentDispositionInPIDFKey(void)::value, "AddContentDispositionInPIDF", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAddContentDispositionInPIDFKey(void)::value;
}

void sub_1C53F83C4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAdditionalContactParamsKey(ImsPrefs *this)
{
  {
    unsigned __int8 v4 = 0;
    v3[0] = 0;
    v3[1] = 0;
    char v2 = v3;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getAdditionalContactParamsKey(void)::value, "AdditionalContactParams", "Signaling", &v4, &v2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v2, v3[0]);
  }
  return &ImsPrefs::getAdditionalContactParamsKey(void)::value;
}

void sub_1C53F847C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *ImsPrefs::getAddQosOptionsToSocketsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddQosOptionsToSocketsKey(void)::value, "AddQosOptionsToSockets", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAddQosOptionsToSocketsKey(void)::value;
}

void sub_1C53F852C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAdditionalHeadersKey(ImsPrefs *this)
{
  {
    unsigned __int8 v4 = 0;
    v3[0] = 0;
    v3[1] = 0;
    char v2 = v3;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getAdditionalHeadersKey(void)::value, "AdditionalHeaders", "Signaling", &v4, &v2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v2, v3[0]);
  }
  return &ImsPrefs::getAdditionalHeadersKey(void)::value;
}

void sub_1C53F85E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *ImsPrefs::getAdditionalFeatureTagsKey(ImsPrefs *this)
{
  {
    unsigned __int8 v4 = 0;
    v3[0] = 0;
    v3[1] = 0;
    char v2 = v3;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getAdditionalFeatureTagsKey(void)::value, "AdditionalFeatureTags", "Signaling", &v4, &v2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v2, v3[0]);
  }
  return &ImsPrefs::getAdditionalFeatureTagsKey(void)::value;
}

void sub_1C53F86A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *ImsPrefs::getAddGeolocationSupportedHeaderKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddGeolocationSupportedHeaderKey(void)::value, "AddGeolocationSupportedHeader", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAddGeolocationSupportedHeaderKey(void)::value;
}

void sub_1C53F8750(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAddRoutableLocalAddressHeaderKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddRoutableLocalAddressHeaderKey(void)::value, "AddRoutableLocalAddressHeader", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAddRoutableLocalAddressHeaderKey(void)::value;
}

void sub_1C53F87EC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAddSipInstanceForWifiKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddSipInstanceForWifiKey(void)::value, "AddSipInstanceForWifi", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAddSipInstanceForWifiKey(void)::value;
}

void sub_1C53F8890(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowAnonymousEmergencyCallsKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowAnonymousEmergencyCallsKey(void)::value, "AllowAnonymousEmergencyCalls", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAllowAnonymousEmergencyCallsKey(void)::value;
}

void sub_1C53F8934(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowEmergencyRetryForIPSecKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    char v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowEmergencyRetryForIPSecKey(void)::value, "AllowEmergencyRetryForIPSec", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAllowEmergencyRetryForIPSecKey(void)::value;
}

void sub_1C53F89D8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowAnonymousEmergencyCallsWhileRoamingKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowAnonymousEmergencyCallsWhileRoamingKey(void)::value, "AllowAnonymousEmergencyCallsWhileRoaming", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAllowAnonymousEmergencyCallsWhileRoamingKey(void)::value;
}

void sub_1C53F8A7C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowDisabledModeKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowDisabledModeKey(void)::value, "AllowDisabledMode", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAllowDisabledModeKey(void)::value;
}

void sub_1C53F8B20(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowEarlyRegistrationRefreshKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowEarlyRegistrationRefreshKey(void)::value, "AllowEarlyRegistrationRefresh", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAllowEarlyRegistrationRefreshKey(void)::value;
}

void sub_1C53F8BC4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowInvalidTimestampInPCNIKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowInvalidTimestampInPCNIKey(void)::value, "AllowInvalidTimestampInPCNI", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAllowInvalidTimestampInPCNIKey(void)::value;
}

void sub_1C53F8C60(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowPCNIInAirplaneModeKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowPCNIInAirplaneModeKey(void)::value, "AllowPCNIInAirplaneMode", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAllowPCNIInAirplaneModeKey(void)::value;
}

void sub_1C53F8D04(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowLimitedAccessModeRegistrationKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowLimitedAccessModeRegistrationKey(void)::value, "AllowLimitedAccessModeRegistration", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAllowLimitedAccessModeRegistrationKey(void)::value;
}

void sub_1C53F8DA0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowMultipleAddressesPerProxyKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowMultipleAddressesPerProxyKey(void)::value, "AllowMultipleAddressesPerProxy", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAllowMultipleAddressesPerProxyKey(void)::value;
}

void sub_1C53F8E44(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowRemoteHoldForUnconfirmedCallsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowRemoteHoldForUnconfirmedCallsKey(void)::value, "AllowRemoteHoldForUnconfirmedCalls", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAllowRemoteHoldForUnconfirmedCallsKey(void)::value;
}

void sub_1C53F8EE0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowIncomingCallsDuringEmergencyCallKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowIncomingCallsDuringEmergencyCallKey(void)::value, "AllowIncomingCallsDuringEmergencyCall", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAllowIncomingCallsDuringEmergencyCallKey(void)::value;
}

void sub_1C53F8F7C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowOutgoingCallsDuringEmergencyCallKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowOutgoingCallsDuringEmergencyCallKey(void)::value, "AllowOutgoingCallsDuringEmergencyCall", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAllowOutgoingCallsDuringEmergencyCallKey(void)::value;
}

void sub_1C53F9018(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowPhoneContextInEmergencyUriKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowPhoneContextInEmergencyUriKey(void)::value, "AllowPhoneContextInEmergencyUri", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAllowPhoneContextInEmergencyUriKey(void)::value;
}

void sub_1C53F90BC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowTelUriInReferToKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowTelUriInReferToKey(void)::value, "AllowTelUriInReferTo", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAllowTelUriInReferToKey(void)::value;
}

void sub_1C53F9158(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowResponsesOverDifferentTransportKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowResponsesOverDifferentTransportKey(void)::value, "AllowResponsesOverDifferentTransport", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAllowResponsesOverDifferentTransportKey(void)::value;
}

void sub_1C53F91FC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowRegistrationCanceledStateKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowRegistrationCanceledStateKey(void)::value, "AllowRegistrationCanceledState", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAllowRegistrationCanceledStateKey(void)::value;
}

void sub_1C53F92A0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowSimultaneousCallsWhileUnregisteredKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[40],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowSimultaneousCallsWhileUnregisteredKey(void)::value, "AllowSimultaneousCallsWhileUnregistered", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAllowSimultaneousCallsWhileUnregisteredKey(void)::value;
}

void sub_1C53F9344(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAddEmergencyContactParamInInviteKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddEmergencyContactParamInInviteKey(void)::value, "AddEmergencyContactParamInInvite", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAddEmergencyContactParamInInviteKey(void)::value;
}

void sub_1C53F93E0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysAddPrivacyHeaderKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysAddPrivacyHeaderKey(void)::value, "AlwaysAddPrivacyHeader", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAlwaysAddPrivacyHeaderKey(void)::value;
}

void sub_1C53F947C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysAddSipInstanceKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysAddSipInstanceKey(void)::value, "AlwaysAddSipInstance", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAlwaysAddSipInstanceKey(void)::value;
}

void sub_1C53F9518(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAcceptMsgFromNonProxyKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAcceptMsgFromNonProxyKey(void)::value, "AcceptMsgFromNonProxy", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAcceptMsgFromNonProxyKey(void)::value;
}

void sub_1C53F95B4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysAddSipInstanceToSubscribeRequestKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysAddSipInstanceToSubscribeRequestKey(void)::value, "AlwaysAddSipInstanceToSubscribeRequest", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAlwaysAddSipInstanceToSubscribeRequestKey(void)::value;
}

void sub_1C53F9650(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRedialOverLteIfEpsFallbackCallFailedKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRedialOverLteIfEpsFallbackCallFailedKey(void)::value, "RedialOverLteIfEpsFallbackCallFailed", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getRedialOverLteIfEpsFallbackCallFailedKey(void)::value;
}

void sub_1C53F96EC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysAddTextServiceKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysAddTextServiceKey(void)::value, "AlwaysAddTextService", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAlwaysAddTextServiceKey(void)::value;
}

void sub_1C53F9790(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getCompressIPv6AddressesKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getCompressIPv6AddressesKey(void)::value, "CompressIPv6Addresses", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getCompressIPv6AddressesKey(void)::value;
}

void sub_1C53F9834(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysEmergencyRegisterKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysEmergencyRegisterKey(void)::value, "AlwaysEmergencyRegister", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAlwaysEmergencyRegisterKey(void)::value;
}

void sub_1C53F98D8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysPrack18xKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysPrack18xKey(void)::value, "AlwaysPrack18x", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAlwaysPrack18xKey(void)::value;
}

void sub_1C53F9974(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysResetProxyListKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysResetProxyListKey(void)::value, "AlwaysResetProxyList", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAlwaysResetProxyListKey(void)::value;
}

void sub_1C53F9A10(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysSendSessionProgressKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysSendSessionProgressKey(void)::value, "AlwaysSendSessionProgress", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAlwaysSendSessionProgressKey(void)::value;
}

void sub_1C53F9AAC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysSendTryingResponseKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysSendTryingResponseKey(void)::value, "AlwaysSendTryingResponse", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAlwaysSendTryingResponseKey(void)::value;
}

void sub_1C53F9B48(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysSetPhoneContextKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysSetPhoneContextKey(void)::value, "AlwaysSetPhoneContext", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAlwaysSetPhoneContextKey(void)::value;
}

void sub_1C53F9BE4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysAddGeolocationForEmergencyCallsKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    char v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysAddGeolocationForEmergencyCallsKey(void)::value, "AlwaysAddGeolocationForEmergencyCalls", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAlwaysAddGeolocationForEmergencyCallsKey(void)::value;
}

void sub_1C53F9C88(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowGeolocationForEmergencyCallsWhileInboundRoamingKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    char v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[53],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowGeolocationForEmergencyCallsWhileInboundRoamingKey(void)::value, "AllowGeolocationForEmergencyCallsWhileInboundRoaming", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAllowGeolocationForEmergencyCallsWhileInboundRoamingKey(void)::value;
}

void sub_1C53F9D2C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysAddGeolocationToInviteForNormalSetupEmergencyCallKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[56],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysAddGeolocationToInviteForNormalSetupEmergencyCallKey(void)::value, "AlwaysAddGeolocationToInviteForNormalSetupEmergencyCall", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAlwaysAddGeolocationToInviteForNormalSetupEmergencyCallKey(void)::value;
}

void sub_1C53F9DC8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysAddGeolocationToUpdateForNormalSetupEmergencyCallKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[56],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysAddGeolocationToUpdateForNormalSetupEmergencyCallKey(void)::value, "AlwaysAddGeolocationToUpdateForNormalSetupEmergencyCall", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAlwaysAddGeolocationToUpdateForNormalSetupEmergencyCallKey(void)::value;
}

void sub_1C53F9E64(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowIncomingUssdSessionsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowIncomingUssdSessionsKey(void)::value, "AllowIncomingUssdSessions", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAllowIncomingUssdSessionsKey(void)::value;
}

void sub_1C53F9F00(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysUnsubscribeFromRegEventsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysUnsubscribeFromRegEventsKey(void)::value, "AlwaysUnsubscribeFromRegEvents", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAlwaysUnsubscribeFromRegEventsKey(void)::value;
}

void sub_1C53F9FA4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAuthResponseTimeoutMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 15000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getAuthResponseTimeoutMillisecondsKey(void)::value, "AuthResponseTimeoutMilliseconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAuthResponseTimeoutMillisecondsKey(void)::value;
}

void sub_1C53FA048(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getCallEndReasonsKey(ImsPrefs *this)
{
  {
    unsigned __int8 v4 = 0;
    v3[0] = 0;
    v3[1] = 0;
    int v2 = v3;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getCallEndReasonsKey(void)::value, "CallEndReasons", "Signaling", &v4, &v2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v2, v3[0]);
  }
  return &ImsPrefs::getCallEndReasonsKey(void)::value;
}

void sub_1C53FA100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *ImsPrefs::getCallSetupPingTimerMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getCallSetupPingTimerMillisecondsKey(void)::value, "CallSetupPingTimerMilliseconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getCallSetupPingTimerMillisecondsKey(void)::value;
}

void sub_1C53FA1AC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getClearRegistrationCallIdOnDeinitializationKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getClearRegistrationCallIdOnDeinitializationKey(void)::value, "ClearRegistrationCallIdOnDeinitialization", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getClearRegistrationCallIdOnDeinitializationKey(void)::value;
}

void sub_1C53FA248(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getContactUserKey(ImsPrefs *this)
{
  {
    unsigned __int8 v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getContactUserKey(void)::value, "ContactUser", "Signaling", &v3, (char *)&str_2_6, &v2);
  }
  return &ImsPrefs::getContactUserKey(void)::value;
}

void sub_1C53FA2F4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getContinueEmergencyCallOnMediaTimeoutKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getContinueEmergencyCallOnMediaTimeoutKey(void)::value, "ContinueEmergencyCallOnMediaTimeout", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getContinueEmergencyCallOnMediaTimeoutKey(void)::value;
}

void sub_1C53FA390(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyMediaTimeoutDeferalTimerSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 300;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyMediaTimeoutDeferalTimerSecondsKey(void)::value, "EmergencyMediaTimeoutDeferalTimerSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEmergencyMediaTimeoutDeferalTimerSecondsKey(void)::value;
}

void sub_1C53FA434(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getConvertSessionProgressToRingingKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getConvertSessionProgressToRingingKey(void)::value, "ConvertSessionProgressToRinging", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getConvertSessionProgressToRingingKey(void)::value;
}

void sub_1C53FA4D8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getCountryOfOriginationFormatKey(ImsPrefs *this)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  {
    char v4 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v6, "NONE");
    std::string::basic_string[abi:ne180100]<0>(v7, "PIDF");
    std::string::basic_string[abi:ne180100]<0>(v8, "PANI");
    std::string::basic_string[abi:ne180100]<0>(v9, "BOTH");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v3, &v6, 4uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getCountryOfOriginationFormatKey(void)::value, "CountryOfOriginationFormat", "Signaling", &v4, &v3);
    BOOL v5 = (void **)&v3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    for (uint64_t i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v9[i + 2]) < 0) {
        operator delete((void *)v9[i]);
      }
    }
  }
  return &ImsPrefs::getCountryOfOriginationFormatKey(void)::value;
}

void sub_1C53FA644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, char a14)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  uint64_t v15 = 0;
  while (1)
  {
    if (*(&a14 + v15 + 95) < 0) {
      operator delete(*(void **)(&a14 + v15 + 72));
    }
    v15 -= 24;
    if (v15 == -96)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getCSFBOnAccessBarredKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getCSFBOnAccessBarredKey(void)::value, "CSFBOnAccessBarred", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getCSFBOnAccessBarredKey(void)::value;
}

void sub_1C53FA74C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getCheckContactHeaderOnRegisterResponseKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getCheckContactHeaderOnRegisterResponseKey(void)::value, "CheckContactHeaderOnRegisterResponse", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getCheckContactHeaderOnRegisterResponseKey(void)::value;
}

void sub_1C53FA7E8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getLocationForShortCodeCallsKey(ImsPrefs *this)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  {
    char v4 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v6, "NONE");
    std::string::basic_string[abi:ne180100]<0>(v7, "LATLONG");
    std::string::basic_string[abi:ne180100]<0>(v8, "CIVIC");
    std::string::basic_string[abi:ne180100]<0>(v9, "BOTH");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v3, &v6, 4uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getLocationForShortCodeCallsKey(void)::value, "LocationForShortCodeCalls", "Signaling", &v4, &v3);
    BOOL v5 = (void **)&v3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    for (uint64_t i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v9[i + 2]) < 0) {
        operator delete((void *)v9[i]);
      }
    }
  }
  return &ImsPrefs::getLocationForShortCodeCallsKey(void)::value;
}

void sub_1C53FA954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, char a14)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  uint64_t v15 = 0;
  while (1)
  {
    if (*(&a14 + v15 + 95) < 0) {
      operator delete(*(void **)(&a14 + v15 + 72));
    }
    v15 -= 24;
    if (v15 == -96)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getDefaultAuthAlgorithmKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDefaultAuthAlgorithmKey(void)::value, "DefaultAuthAlgorithm", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getDefaultAuthAlgorithmKey(void)::value;
}

void sub_1C53FAA64(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDefaultLocalSipPortKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5060;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getDefaultLocalSipPortKey(void)::value, "DefaultLocalSipPort", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getDefaultLocalSipPortKey(void)::value;
}

void sub_1C53FAB08(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDefaultRemoteSipPortKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5060;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getDefaultRemoteSipPortKey(void)::value, "DefaultRemoteSipPort", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getDefaultRemoteSipPortKey(void)::value;
}

void sub_1C53FABAC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDeferMediaActivationOnSessionConfirmedKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDeferMediaActivationOnSessionConfirmedKey(void)::value, "DeferMediaActivationOnSessionConfirmed", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getDeferMediaActivationOnSessionConfirmedKey(void)::value;
}

void sub_1C53FAC48(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDeferIncomingMessagesUntilWakeKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDeferIncomingMessagesUntilWakeKey(void)::value, "DeferIncomingMessagesUntilWake", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getDeferIncomingMessagesUntilWakeKey(void)::value;
}

void sub_1C53FACEC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDeferReRegOnConnectivityDisableKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDeferReRegOnConnectivityDisableKey(void)::value, "DeferReRegOnConnectivityDisable", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getDeferReRegOnConnectivityDisableKey(void)::value;
}

void sub_1C53FAD90(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDeferReRegOnSubDisableKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDeferReRegOnSubDisableKey(void)::value, "DeferReRegOnSubDisable", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getDeferReRegOnSubDisableKey(void)::value;
}

void sub_1C53FAE34(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableSignalingReductionKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableSignalingReductionKey(void)::value, "EnableSignalingReduction", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnableSignalingReductionKey(void)::value;
}

void sub_1C53FAED0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDeregistrationWaitTimeoutMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getDeregistrationWaitTimeoutMillisecondsKey(void)::value, "DeregistrationWaitTimeoutMilliseconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getDeregistrationWaitTimeoutMillisecondsKey(void)::value;
}

void sub_1C53FAF74(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDialogEventPackageSessionDescriptionKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDialogEventPackageSessionDescriptionKey(void)::value, "DialogEventPackageSessionDescription", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getDialogEventPackageSessionDescriptionKey(void)::value;
}

void sub_1C53FB010(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDisableAccessNetworkInfoForAckAndCancelKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[40],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDisableAccessNetworkInfoForAckAndCancelKey(void)::value, "DisableAccessNetworkInfoForAckAndCancel", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getDisableAccessNetworkInfoForAckAndCancelKey(void)::value;
}

void sub_1C53FB0AC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDisableRegistrationOnNotifyEventsKey(ImsPrefs *this)
{
  {
    unsigned __int8 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,char const(&)[1]>((uint64_t)&ImsPrefs::getDisableRegistrationOnNotifyEventsKey(void)::value, "DisableRegistrationOnNotifyEvents", "Signaling", &v2, (char *)&str_2_6);
  }
  return &ImsPrefs::getDisableRegistrationOnNotifyEventsKey(void)::value;
}

void sub_1C53FB14C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDontChangeProxiesDuringActiveCallsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDontChangeProxiesDuringActiveCallsKey(void)::value, "DontChangeProxiesDuringActiveCalls", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getDontChangeProxiesDuringActiveCallsKey(void)::value;
}

void sub_1C53FB1F0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDontThrottleOnRegistrationErrorCodesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDontThrottleOnRegistrationErrorCodesKey(void)::value, "DontThrottleOnRegistrationErrorCodes", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getDontThrottleOnRegistrationErrorCodesKey(void)::value;
}

void sub_1C53FB294(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDontSendPreconditionsIfCallWaitingDisabledKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[43],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDontSendPreconditionsIfCallWaitingDisabledKey(void)::value, "DontSendPreconditionsIfCallWaitingDisabled", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getDontSendPreconditionsIfCallWaitingDisabledKey(void)::value;
}

void sub_1C53FB330(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDropRegistrationOnCSFBKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDropRegistrationOnCSFBKey(void)::value, "DropRegistrationOnCSFB", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getDropRegistrationOnCSFBKey(void)::value;
}

void sub_1C53FB3D4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDropRegistrationOnSRVCCKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDropRegistrationOnSRVCCKey(void)::value, "DropRegistrationOnSRVCC", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getDropRegistrationOnSRVCCKey(void)::value;
}

void sub_1C53FB470(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDropRegistrationOnAirplaneModeToggleKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDropRegistrationOnAirplaneModeToggleKey(void)::value, "DropRegistrationOnAirplaneModeToggle", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getDropRegistrationOnAirplaneModeToggleKey(void)::value;
}

void sub_1C53FB50C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDropRegistrationOnErrorCodesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDropRegistrationOnErrorCodesKey(void)::value, "DropRegistrationOnErrorCodes", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getDropRegistrationOnErrorCodesKey(void)::value;
}

void sub_1C53FB5B0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDropRegistrationOnWaitTimeoutKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDropRegistrationOnWaitTimeoutKey(void)::value, "DropRegistrationOnWaitTimeout", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getDropRegistrationOnWaitTimeoutKey(void)::value;
}

void sub_1C53FB64C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDropRegistrationOn305ToAllProxiesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDropRegistrationOn305ToAllProxiesKey(void)::value, "DropRegistrationOn305ToAllProxies", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getDropRegistrationOn305ToAllProxiesKey(void)::value;
}

void sub_1C53FB6E8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEarlyMediaNeedsHeaderKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEarlyMediaNeedsHeaderKey(void)::value, "EarlyMediaNeedsHeader", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEarlyMediaNeedsHeaderKey(void)::value;
}

void sub_1C53FB78C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEchoRemotePreconditionStrengthKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEchoRemotePreconditionStrengthKey(void)::value, "EchoRemotePreconditionStrength", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEchoRemotePreconditionStrengthKey(void)::value;
}

void sub_1C53FB830(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(void)::value, "EmergencyAnonymousAutomaticRedial", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(void)::value;
}

void sub_1C53FB8CC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyCallBackModeExpirationSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyCallBackModeExpirationSecondsKey(void)::value, "EmergencyCallBackModeExpirationSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEmergencyCallBackModeExpirationSecondsKey(void)::value;
}

void sub_1C53FB96C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyCallSetupTimeoutSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    int v2 = 20;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyCallSetupTimeoutSecondsKey(void)::value, "EmergencyCallSetupTimeoutSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEmergencyCallSetupTimeoutSecondsKey(void)::value;
}

void sub_1C53FBA14(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencySessionSetupTimeoutSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencySessionSetupTimeoutSecondsKey(void)::value, "EmergencySessionSetupTimeoutSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEmergencySessionSetupTimeoutSecondsKey(void)::value;
}

void sub_1C53FBAB8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyErrorResponsesToTriggerCSFBKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getEmergencyErrorResponsesToTriggerCSFBKey(void)::value, "EmergencyErrorResponsesToTriggerCSFB", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getEmergencyErrorResponsesToTriggerCSFBKey(void)::value;
}

void sub_1C53FBB5C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyImpuRankKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getEmergencyImpuRankKey(void)::value, "EmergencyImpuRank", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getEmergencyImpuRankKey(void)::value;
}

void sub_1C53FBC00(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyLocationLookupRequiredKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEmergencyLocationLookupRequiredKey(void)::value, "EmergencyLocationLookupRequired", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEmergencyLocationLookupRequiredKey(void)::value;
}

void sub_1C53FBCA4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyLocationLookupTimeoutSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 8;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyLocationLookupTimeoutSecondsKey(void)::value, "EmergencyLocationLookupTimeoutSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEmergencyLocationLookupTimeoutSecondsKey(void)::value;
}

void sub_1C53FBD48(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyLocationUpdateTimeSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    int v2 = 30;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyLocationUpdateTimeSecondsKey(void)::value, "EmergencyLocationUpdateTimeSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEmergencyLocationUpdateTimeSecondsKey(void)::value;
}

void sub_1C53FBDF0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyLocationUpdateTimeMinSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyLocationUpdateTimeMinSecondsKey(void)::value, "EmergencyLocationUpdateTimeMinSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEmergencyLocationUpdateTimeMinSecondsKey(void)::value;
}

void sub_1C53FBE94(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyLocationUpdateTimeSMSFixedKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyLocationUpdateTimeSMSFixedKey(void)::value, "EmergencyLocationUpdateTimeSMSFixed", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEmergencyLocationUpdateTimeSMSFixedKey(void)::value;
}

void sub_1C53FBF38(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSupportsCurrentLocationDiscoveryKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSupportsCurrentLocationDiscoveryKey(void)::value, "SupportsCurrentLocationDiscovery", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSupportsCurrentLocationDiscoveryKey(void)::value;
}

void sub_1C53FBFD4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyPreferredIdentityKey(ImsPrefs *this)
{
  void v7[3] = *MEMORY[0x1E4F143B8];
  {
    char v4 = 1;
    std::string::basic_string[abi:ne180100]<0>(&v6, "IMSI");
    std::string::basic_string[abi:ne180100]<0>(v7, "IMEI");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v3, &v6, 2uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getEmergencyPreferredIdentityKey(void)::value, "EmergencyPreferredIdentity", "Signaling", &v4, &v3);
    BOOL v5 = (void **)&v3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v7[i + 2]) < 0) {
        operator delete((void *)v7[i]);
      }
    }
  }
  return &ImsPrefs::getEmergencyPreferredIdentityKey(void)::value;
}

void sub_1C53FC114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  uint64_t v26 = 0;
  while (1)
  {
    if (*(&a25 + v26) < 0) {
      operator delete(*(void **)((char *)&a20 + v26));
    }
    v26 -= 24;
    if (v26 == -48)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getEmergencyRegistrationRequestUriKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getEmergencyRegistrationRequestUriKey(void)::value, "EmergencyRegistrationRequestUri", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getEmergencyRegistrationRequestUriKey(void)::value;
}

void sub_1C53FC214(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyRegistrationTimeoutSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    int v2 = 10;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyRegistrationTimeoutSecondsKey(void)::value, "EmergencyRegistrationTimeoutSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEmergencyRegistrationTimeoutSecondsKey(void)::value;
}

void sub_1C53FC2BC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyRegistrationRetryResponsesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getEmergencyRegistrationRetryResponsesKey(void)::value, "EmergencyRegistrationRetryResponses", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getEmergencyRegistrationRetryResponsesKey(void)::value;
}

void sub_1C53FC360(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyRingbackTimerSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyRingbackTimerSecondsKey(void)::value, "EmergencyRingbackTimerSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEmergencyRingbackTimerSecondsKey(void)::value;
}

void sub_1C53FC400(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencySMSModeExpirationSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencySMSModeExpirationSecondsKey(void)::value, "EmergencySMSModeExpirationSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEmergencySMSModeExpirationSecondsKey(void)::value;
}

void sub_1C53FC4A4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAddLocationToEmergencySMSKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    char v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddLocationToEmergencySMSKey(void)::value, "AddLocationToEmergencySMS", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAddLocationToEmergencySMSKey(void)::value;
}

void sub_1C53FC548(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyURNsKey(ImsPrefs *this)
{
  {
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[14],char const(&)[10],BOOL>(ImsPrefs::getEmergencyURNsKey(void)::value, "EmergencyURNs", "Signaling", &v2);
  }
  return ImsPrefs::getEmergencyURNsKey(void)::value;
}

void sub_1C53FC5E4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableATCommandModeKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableATCommandModeKey(void)::value, "EnableATCommandMode", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnableATCommandModeKey(void)::value;
}

void sub_1C53FC680(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableCellularNetworkInfoKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableCellularNetworkInfoKey(void)::value, "EnableCellularNetworkInfo", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnableCellularNetworkInfoKey(void)::value;
}

void sub_1C53FC71C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableEmergencyRegistrationKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableEmergencyRegistrationKey(void)::value, "EnableEmergencyRegistration", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEnableEmergencyRegistrationKey(void)::value;
}

void sub_1C53FC7C0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableForkingKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[14],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableForkingKey(void)::value, "EnableForking", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEnableForkingKey(void)::value;
}

void sub_1C53FC864(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableLastAccessNetworkInfoKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableLastAccessNetworkInfoKey(void)::value, "EnableLastAccessNetworkInfo", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnableLastAccessNetworkInfoKey(void)::value;
}

void sub_1C53FC900(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableReasonHeaderInByeKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableReasonHeaderInByeKey(void)::value, "EnableReasonHeaderInBye", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEnableReasonHeaderInByeKey(void)::value;
}

void sub_1C53FC9A4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableRportKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[12],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableRportKey(void)::value, "EnableRport", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEnableRportKey(void)::value;
}

void sub_1C53FCA48(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableSenderNameKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableSenderNameKey(void)::value, "EnableSenderName", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEnableSenderNameKey(void)::value;
}

void sub_1C53FCAEC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableSessionIdKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableSessionIdKey(void)::value, "EnableSessionId", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEnableSessionIdKey(void)::value;
}

void sub_1C53FCB90(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableRegistrationSessionIdKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableRegistrationSessionIdKey(void)::value, "EnableRegistrationSessionId", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEnableRegistrationSessionIdKey(void)::value;
}

void sub_1C53FCC34(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEndCallOnAudioBearerRevokedKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEndCallOnAudioBearerRevokedKey(void)::value, "EndCallOnAudioBearerRevoked", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEndCallOnAudioBearerRevokedKey(void)::value;
}

void sub_1C53FCCD0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnforceMaximumEmergencyExpirationSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 300;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEnforceMaximumEmergencyExpirationSecondsKey(void)::value, "EnforceMaximumEmergencyExpirationSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEnforceMaximumEmergencyExpirationSecondsKey(void)::value;
}

void sub_1C53FCD74(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEPSFallbackTimerSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEPSFallbackTimerSecondsKey(void)::value, "EPSFallbackTimerSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getEPSFallbackTimerSecondsKey(void)::value;
}

void sub_1C53FCE14(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getFastEmergencyLocationEnabledKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    char v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getFastEmergencyLocationEnabledKey(void)::value, "FastEmergencyLocationEnabled", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getFastEmergencyLocationEnabledKey(void)::value;
}

void sub_1C53FCEB8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getFastEmergencyLocationTimeoutSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getFastEmergencyLocationTimeoutSecondsKey(void)::value, "FastEmergencyLocationTimeoutSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getFastEmergencyLocationTimeoutSecondsKey(void)::value;
}

void sub_1C53FCF5C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getFatalSmsErrorsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getFatalSmsErrorsKey(void)::value, "FatalSmsErrors", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getFatalSmsErrorsKey(void)::value;
}

void sub_1C53FD000(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getFatalTransportErrorsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,char const(&)[6],BOOL>((uint64_t)&ImsPrefs::getFatalTransportErrorsKey(void)::value, "FatalTransportErrors", "Signaling", (unsigned __int8 *)&v2 + 1, "49,65", (char *)&v2);
  }
  return &ImsPrefs::getFatalTransportErrorsKey(void)::value;
}

void sub_1C53FD0A4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getFeatureTagsEnabledKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getFeatureTagsEnabledKey(void)::value, "FeatureTagsEnabled", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getFeatureTagsEnabledKey(void)::value;
}

void sub_1C53FD148(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getForbiddenRegistrationErrorCodesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getForbiddenRegistrationErrorCodesKey(void)::value, "ForbiddenRegistrationErrorCodes", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getForbiddenRegistrationErrorCodesKey(void)::value;
}

void sub_1C53FD1EC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getForceResetExistingTransportsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getForceResetExistingTransportsKey(void)::value, "ForceResetExistingTransports", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getForceResetExistingTransportsKey(void)::value;
}

void sub_1C53FD288(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getForceTcpKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[9],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getForceTcpKey(void)::value, "ForceTcp", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getForceTcpKey(void)::value;
}

void sub_1C53FD324(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getForceTlsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[9],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getForceTlsKey(void)::value, "ForceTls", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getForceTlsKey(void)::value;
}

void sub_1C53FD3C0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getForcedFeatureTagsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getForcedFeatureTagsKey(void)::value, "ForcedFeatureTags", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getForcedFeatureTagsKey(void)::value;
}

void sub_1C53FD464(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getFuzzyContactMatchingKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getFuzzyContactMatchingKey(void)::value, "FuzzyContactMatching", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getFuzzyContactMatchingKey(void)::value;
}

void sub_1C53FD508(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getHonorSimAccessClassBeforeBarringKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getHonorSimAccessClassBeforeBarringKey(void)::value, "HonorSimAccessClassBeforeBarring", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getHonorSimAccessClassBeforeBarringKey(void)::value;
}

void sub_1C53FD5A4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIPSecSegmentOffsetKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getIPSecSegmentOffsetKey(void)::value, "IPSecSegmentOffset", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getIPSecSegmentOffsetKey(void)::value;
}

void sub_1C53FD644(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIPSecBringupUseNetworkPathKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIPSecBringupUseNetworkPathKey(void)::value, "IPSecBringupUseNetworkPath", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getIPSecBringupUseNetworkPathKey(void)::value;
}

void sub_1C53FD6E8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIPSecBringupTimeoutMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getIPSecBringupTimeoutMillisecondsKey(void)::value, "IPSecBringupTimeoutMilliseconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getIPSecBringupTimeoutMillisecondsKey(void)::value;
}

void sub_1C53FD78C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysUseDefaultTransportKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysUseDefaultTransportKey(void)::value, "AlwaysUseDefaultTransport", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAlwaysUseDefaultTransportKey(void)::value;
}

void sub_1C53FD828(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDropTrafficOnUnknownTransportsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDropTrafficOnUnknownTransportsKey(void)::value, "DropTrafficOnUnknownTransports", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getDropTrafficOnUnknownTransportsKey(void)::value;
}

void sub_1C53FD8CC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIgnoreDuplicateSDPKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreDuplicateSDPKey(void)::value, "IgnoreDuplicateSDP", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getIgnoreDuplicateSDPKey(void)::value;
}

void sub_1C53FD970(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIgnoreErrorsInTerminatedForksKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreErrorsInTerminatedForksKey(void)::value, "IgnoreErrorsInTerminatedForks", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getIgnoreErrorsInTerminatedForksKey(void)::value;
}

void sub_1C53FDA0C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIgnoreNonCompliantSupportedHeadersKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreNonCompliantSupportedHeadersKey(void)::value, "IgnoreNonCompliantSupportedHeaders", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getIgnoreNonCompliantSupportedHeadersKey(void)::value;
}

void sub_1C53FDAB0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIgnoreSessionRefreshErrorsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreSessionRefreshErrorsKey(void)::value, "IgnoreSessionRefreshErrors", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getIgnoreSessionRefreshErrorsKey(void)::value;
}

void sub_1C53FDB4C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIgnoreFromHeaderForSenderNameKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreFromHeaderForSenderNameKey(void)::value, "IgnoreFromHeaderForSenderName", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getIgnoreFromHeaderForSenderNameKey(void)::value;
}

void sub_1C53FDBF0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIgnoreOverridesForWPSCallsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreOverridesForWPSCallsKey(void)::value, "IgnoreOverridesForWPSCalls", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getIgnoreOverridesForWPSCallsKey(void)::value;
}

void sub_1C53FDC8C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIgnoreWPSCallsOverNRKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreWPSCallsOverNRKey(void)::value, "IgnoreWPSCallsOverNR", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getIgnoreWPSCallsOverNRKey(void)::value;
}

void sub_1C53FDD30(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIgnoreNetworkUnreachableErrorsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreNetworkUnreachableErrorsKey(void)::value, "IgnoreNetworkUnreachableErrors", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getIgnoreNetworkUnreachableErrorsKey(void)::value;
}

void sub_1C53FDDCC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIgnoreLimitedServiceInEmergencyModeKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    char v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreLimitedServiceInEmergencyModeKey(void)::value, "IgnoreLimitedServiceInEmergencyMode", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getIgnoreLimitedServiceInEmergencyModeKey(void)::value;
}

void sub_1C53FDE70(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIgnoreReregistrationErrorCodesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,char const(&)[4],BOOL>((uint64_t)&ImsPrefs::getIgnoreReregistrationErrorCodesKey(void)::value, "IgnoreReregistrationErrorCodes", "Signaling", (unsigned __int8 *)&v2 + 1, "408", (char *)&v2);
  }
  return &ImsPrefs::getIgnoreReregistrationErrorCodesKey(void)::value;
}

void sub_1C53FDF14(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIgnoreWifiHotspotKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreWifiHotspotKey(void)::value, "IgnoreWifiHotspot", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getIgnoreWifiHotspotKey(void)::value;
}

void sub_1C53FDFB8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIgnoreRegNotificationContactExpiresKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreRegNotificationContactExpiresKey(void)::value, "IgnoreRegNotificationContactExpires", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getIgnoreRegNotificationContactExpiresKey(void)::value;
}

void sub_1C53FE054(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getImpuRankKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[9],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getImpuRankKey(void)::value, "ImpuRank", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getImpuRankKey(void)::value;
}

void sub_1C53FE0F8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIncomingCallEndReasonsKey(ImsPrefs *this)
{
  {
    unsigned __int8 v4 = 0;
    v3[0] = 0;
    v3[1] = 0;
    __int16 v2 = v3;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getIncomingCallEndReasonsKey(void)::value, "IncomingCallEndReasons", "Signaling", &v4, &v2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v2, v3[0]);
  }
  return &ImsPrefs::getIncomingCallEndReasonsKey(void)::value;
}

void sub_1C53FE1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *ImsPrefs::getIncomingPhoneNumberPrefixMapKey(ImsPrefs *this)
{
  {
    unsigned __int8 v4 = 0;
    v3[0] = 0;
    v3[1] = 0;
    __int16 v2 = v3;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getIncomingPhoneNumberPrefixMapKey(void)::value, "IncomingPhoneNumberPrefixMap", "Signaling", &v4, &v2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v2, v3[0]);
  }
  return &ImsPrefs::getIncomingPhoneNumberPrefixMapKey(void)::value;
}

void sub_1C53FE274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *ImsPrefs::getIncompleteRegistrationThrottlingIntervalSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 30;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[48],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getIncompleteRegistrationThrottlingIntervalSecondsKey(void)::value, "IncompleteRegistrationThrottlingIntervalSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getIncompleteRegistrationThrottlingIntervalSecondsKey(void)::value;
}

void sub_1C53FE324(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getInitialRemotePreconditionStrengthKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getInitialRemotePreconditionStrengthKey(void)::value, "InitialRemotePreconditionStrength", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getInitialRemotePreconditionStrengthKey(void)::value;
}

void sub_1C53FE3C8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getInviteErrorResponsesToTriggerCSFBKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,char const(&)[20],BOOL>((uint64_t)&ImsPrefs::getInviteErrorResponsesToTriggerCSFBKey(void)::value, "InviteErrorResponsesToTriggerCSFB", "Signaling", (unsigned __int8 *)&v2 + 1, "3XX,403,500,503,504", (char *)&v2);
  }
  return &ImsPrefs::getInviteErrorResponsesToTriggerCSFBKey(void)::value;
}

void sub_1C53FE46C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIR92PreconditionSupportKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIR92PreconditionSupportKey(void)::value, "IR92PreconditionSupport", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getIR92PreconditionSupportKey(void)::value;
}

void sub_1C53FE508(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getKillCallOnHoldResumeErrorKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getKillCallOnHoldResumeErrorKey(void)::value, "KillCallOnHoldResumeError", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getKillCallOnHoldResumeErrorKey(void)::value;
}

void sub_1C53FE5AC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getKillForkOnUpdateErrorsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getKillForkOnUpdateErrorsKey(void)::value, "KillForkOnUpdateErrors", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getKillForkOnUpdateErrorsKey(void)::value;
}

void sub_1C53FE650(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getKillRegistrationOnHandoverTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getKillRegistrationOnHandoverTimeoutKey(void)::value, "KillRegistrationOnHandoverTimeout", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getKillRegistrationOnHandoverTimeoutKey(void)::value;
}

void sub_1C53FE6F4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getLegacyImpuRankKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getLegacyImpuRankKey(void)::value, "LegacyImpuRank", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getLegacyImpuRankKey(void)::value;
}

void sub_1C53FE798(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getLimitedConnectivityHysteresisTimeoutSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 1800;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[44],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getLimitedConnectivityHysteresisTimeoutSecondsKey(void)::value, "LimitedConnectivityHysteresisTimeoutSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getLimitedConnectivityHysteresisTimeoutSecondsKey(void)::value;
}

void sub_1C53FE83C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getLimitedConnectivityHysteresisFromRegistrationKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[46],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getLimitedConnectivityHysteresisFromRegistrationKey(void)::value, "LimitedConnectivityHysteresisFromRegistration", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getLimitedConnectivityHysteresisFromRegistrationKey(void)::value;
}

void sub_1C53FE8D8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getLocalQoSTimeoutMOSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getLocalQoSTimeoutMOSecondsKey(void)::value, "LocalQoSTimeoutMOSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getLocalQoSTimeoutMOSecondsKey(void)::value;
}

void sub_1C53FE978(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getLocalQoSTimeoutMTSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getLocalQoSTimeoutMTSecondsKey(void)::value, "LocalQoSTimeoutMTSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getLocalQoSTimeoutMTSecondsKey(void)::value;
}

void sub_1C53FEA18(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMaintainTransportForDurationOfSessionKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getMaintainTransportForDurationOfSessionKey(void)::value, "MaintainTransportForDurationOfSession", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getMaintainTransportForDurationOfSessionKey(void)::value;
}

void sub_1C53FEAB4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMaxAuthRetriesKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxAuthRetriesKey(void)::value, "MaxAuthRetries", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getMaxAuthRetriesKey(void)::value;
}

void sub_1C53FEB58(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMaxFatalRegistrationErrorsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxFatalRegistrationErrorsKey(void)::value, "MaxFatalRegistrationErrors", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getMaxFatalRegistrationErrorsKey(void)::value;
}

void sub_1C53FEBFC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMaxForbiddenErrorsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxForbiddenErrorsKey(void)::value, "MaxForbiddenErrors", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getMaxForbiddenErrorsKey(void)::value;
}

void sub_1C53FECA0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMaxReRegistrationAttemptsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxReRegistrationAttemptsKey(void)::value, "MaxReRegistrationAttempts", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getMaxReRegistrationAttemptsKey(void)::value;
}

void sub_1C53FED44(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAddLocationInInviteResponsesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getAddLocationInInviteResponsesKey(void)::value, "AddLocationInInviteResponses", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getAddLocationInInviteResponsesKey(void)::value;
}

void sub_1C53FEDE8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAddServicesToUssdSessionsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddServicesToUssdSessionsKey(void)::value, "AddServicesToUssdSessions", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAddServicesToUssdSessionsKey(void)::value;
}

void sub_1C53FEE8C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMaxRegistrationAttemptsPerProxyKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxRegistrationAttemptsPerProxyKey(void)::value, "MaxRegistrationAttemptsPerProxy", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getMaxRegistrationAttemptsPerProxyKey(void)::value;
}

void sub_1C53FEF30(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMaxTransportErrorsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxTransportErrorsKey(void)::value, "MaxTransportErrors", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getMaxTransportErrorsKey(void)::value;
}

void sub_1C53FEFD0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMaxUdpMessageSizeKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxUdpMessageSizeKey(void)::value, "MaxUdpMessageSize", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getMaxUdpMessageSizeKey(void)::value;
}

void sub_1C53FF070(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMinSessionExpiresSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 90;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMinSessionExpiresSecondsKey(void)::value, "MinSessionExpiresSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getMinSessionExpiresSecondsKey(void)::value;
}

void sub_1C53FF114(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMethodInPIDFKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[10],BOOL,char const(&)[9],BOOL>((uint64_t)&ImsPrefs::getMethodInPIDFKey(void)::value, "MethodInPIDF", "Signaling", (unsigned __int8 *)&v2 + 1, "DBH_HELO", (char *)&v2);
  }
  return &ImsPrefs::getMethodInPIDFKey(void)::value;
}

void sub_1C53FF1B8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getNetworkBasedCallWaitingKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getNetworkBasedCallWaitingKey(void)::value, "NetworkBasedCallWaiting", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getNetworkBasedCallWaitingKey(void)::value;
}

void sub_1C53FF254(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableVideoCallWaitingKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableVideoCallWaitingKey(void)::value, "EnableVideoCallWaiting", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnableVideoCallWaitingKey(void)::value;
}

void sub_1C53FF2F0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getNetworkTerminationRetryIntervalSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 60;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getNetworkTerminationRetryIntervalSecondsKey(void)::value, "NetworkTerminationRetryIntervalSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getNetworkTerminationRetryIntervalSecondsKey(void)::value;
}

void sub_1C53FF394(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getNonPrivateEmergencyPrefixesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getNonPrivateEmergencyPrefixesKey(void)::value, "NonPrivateEmergencyPrefixes", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getNonPrivateEmergencyPrefixesKey(void)::value;
}

void sub_1C53FF438(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getNoFallbackVoiceServiceKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getNoFallbackVoiceServiceKey(void)::value, "NoFallbackVoiceService", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getNoFallbackVoiceServiceKey(void)::value;
}

void sub_1C53FF4D4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getNonFatalReInviteResponsesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,char const(&)[4],BOOL>((uint64_t)&ImsPrefs::getNonFatalReInviteResponsesKey(void)::value, "NonFatalReInviteResponses", "Signaling", (unsigned __int8 *)&v2 + 1, "488", (char *)&v2);
  }
  return &ImsPrefs::getNonFatalReInviteResponsesKey(void)::value;
}

void sub_1C53FF578(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getNumberOfSilentRedialAttemptsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getNumberOfSilentRedialAttemptsKey(void)::value, "NumberOfSilentRedialAttempts", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getNumberOfSilentRedialAttemptsKey(void)::value;
}

void sub_1C53FF618(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getOnlyUpdatePreconditionsIfConfPresentKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getOnlyUpdatePreconditionsIfConfPresentKey(void)::value, "OnlyUpdatePreconditionsIfConfPresent", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getOnlyUpdatePreconditionsIfConfPresentKey(void)::value;
}

void sub_1C53FF6BC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getOutgoingDomainKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getOutgoingDomainKey(void)::value, "OutgoingDomain", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getOutgoingDomainKey(void)::value;
}

void sub_1C53FF760(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseOutgoingSipUriKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseOutgoingSipUriKey(void)::value, "UseOutgoingSipUri", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseOutgoingSipUriKey(void)::value;
}

void sub_1C53FF7FC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPdnBringupTimerSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 720;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getPdnBringupTimerSecondsKey(void)::value, "PdnBringupTimerSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getPdnBringupTimerSecondsKey(void)::value;
}

void sub_1C53FF8A0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPerCallQoSIndicationsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getPerCallQoSIndicationsKey(void)::value, "PerCallQoSIndications", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getPerCallQoSIndicationsKey(void)::value;
}

void sub_1C53FF944(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllow3DPIDFInMessagesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllow3DPIDFInMessagesKey(void)::value, "Allow3DPIDFInMessages", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAllow3DPIDFInMessagesKey(void)::value;
}

void sub_1C53FF9E0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPIDFGeoPrivShapeKey(ImsPrefs *this)
{
  void v7[3] = *MEMORY[0x1E4F143B8];
  {
    char v4 = 1;
    std::string::basic_string[abi:ne180100]<0>(&v6, "Circle");
    std::string::basic_string[abi:ne180100]<0>(v7, "Ellipsoid");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v3, &v6, 2uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[17],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getPIDFGeoPrivShapeKey(void)::value, "PIDFGeoPrivShape", "Signaling", &v4, &v3);
    BOOL v5 = (void **)&v3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v7[i + 2]) < 0) {
        operator delete((void *)v7[i]);
      }
    }
  }
  return &ImsPrefs::getPIDFGeoPrivShapeKey(void)::value;
}

void sub_1C53FFB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  uint64_t v26 = 0;
  while (1)
  {
    if (*(&a25 + v26) < 0) {
      operator delete(*(void **)((char *)&a20 + v26));
    }
    v26 -= 24;
    if (v26 == -48)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getPIDFConfidenceKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    int v2 = 95;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getPIDFConfidenceKey(void)::value, "PIDFConfidence", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getPIDFConfidenceKey(void)::value;
}

void sub_1C53FFC24(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPrackErrorDelayKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getPrackErrorDelayKey(void)::value, "PrackErrorDelayMilliseconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getPrackErrorDelayKey(void)::value;
}

void sub_1C53FFCC4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPreconditionAllowMTUpdateKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getPreconditionAllowMTUpdateKey(void)::value, "PreconditionAllowMTUpdate", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getPreconditionAllowMTUpdateKey(void)::value;
}

void sub_1C53FFD60(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPreconditionUpdateDelayTimerMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 2000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getPreconditionUpdateDelayTimerMillisecondsKey(void)::value, "PreconditionUpdateDelayTimerMilliseconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getPreconditionUpdateDelayTimerMillisecondsKey(void)::value;
}

void sub_1C53FFE04(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPreconditionsKey(ImsPrefs *this)
{
  void v8[3] = *MEMORY[0x1E4F143B8];
  {
    char v4 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v6, "None");
    std::string::basic_string[abi:ne180100]<0>(v7, "Supported");
    std::string::basic_string[abi:ne180100]<0>(v8, "Required");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v3, &v6, 3uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[14],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getPreconditionsKey(void)::value, "Preconditions", "Signaling", &v4, &v3);
    BOOL v5 = (void **)&v3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    for (uint64_t i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v8[i + 2]) < 0) {
        operator delete((void *)v8[i]);
      }
    }
  }
  return &ImsPrefs::getPreconditionsKey(void)::value;
}

void sub_1C53FFF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, char a15)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  uint64_t v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 71) < 0) {
      operator delete(*(void **)(&a15 + v16 + 48));
    }
    v16 -= 24;
    if (v16 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getPreferredAuthQopListKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getPreferredAuthQopListKey(void)::value, "PreferredAuthQopList", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getPreferredAuthQopListKey(void)::value;
}

void sub_1C540006C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPreferredSenderIdentityKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getPreferredSenderIdentityKey(void)::value, "PreferredSenderIdentity", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getPreferredSenderIdentityKey(void)::value;
}

void sub_1C5400110(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPreferredSenderNameKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getPreferredSenderNameKey(void)::value, "PreferredSenderName", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getPreferredSenderNameKey(void)::value;
}

void sub_1C54001B4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPrivacyHeaderValueKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,char const(&)[3],BOOL>((uint64_t)&ImsPrefs::getPrivacyHeaderValueKey(void)::value, "PrivacyHeaderValue", "Signaling", (unsigned __int8 *)&v2 + 1, "id", (char *)&v2);
  }
  return &ImsPrefs::getPrivacyHeaderValueKey(void)::value;
}

void sub_1C5400258(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPrivateEmergencyPrefixesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getPrivateEmergencyPrefixesKey(void)::value, "PrivateEmergencyPrefixes", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getPrivateEmergencyPrefixesKey(void)::value;
}

void sub_1C54002FC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getQueueUnreliableProvisionalResponsesKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getQueueUnreliableProvisionalResponsesKey(void)::value, "QueueUnreliableProvisionalResponses", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getQueueUnreliableProvisionalResponsesKey(void)::value;
}

void sub_1C54003A0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getReRegisterOnErrorCodesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,char const(&)[11],BOOL>((uint64_t)&ImsPrefs::getReRegisterOnErrorCodesKey(void)::value, "ReRegisterOnErrorCodes", "Signaling", (unsigned __int8 *)&v2 + 1, "INVITE:494", (char *)&v2);
  }
  return &ImsPrefs::getReRegisterOnErrorCodesKey(void)::value;
}

void sub_1C5400444(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getReRegisterOnInternalRequestTimeoutKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getReRegisterOnInternalRequestTimeoutKey(void)::value, "ReRegisterOnInternalRequestTimeout", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getReRegisterOnInternalRequestTimeoutKey(void)::value;
}

void sub_1C54004E0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getReRegisterOnCellularHandoverKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getReRegisterOnCellularHandoverKey(void)::value, "ReRegisterOnCellularHandover", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getReRegisterOnCellularHandoverKey(void)::value;
}

void sub_1C540057C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRequireRegistrationOnEPSFallbackKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRequireRegistrationOnEPSFallbackKey(void)::value, "RequireRegistrationOnEPSFallback", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getRequireRegistrationOnEPSFallbackKey(void)::value;
}

void sub_1C5400618(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getReRegistrationHysteresisTimerMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[42],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getReRegistrationHysteresisTimerMillisecondsKey(void)::value, "ReRegistrationHysteresisTimerMilliseconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getReRegistrationHysteresisTimerMillisecondsKey(void)::value;
}

void sub_1C54006B8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getReSubscribeOnReRegistrationKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getReSubscribeOnReRegistrationKey(void)::value, "ReSubscribeOnReRegistration", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getReSubscribeOnReRegistrationKey(void)::value;
}

void sub_1C5400754(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRefreshRegistrationDuringECBMKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRefreshRegistrationDuringECBMKey(void)::value, "RefreshRegistrationDuringECBM", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getRefreshRegistrationDuringECBMKey(void)::value;
}

void sub_1C54007F8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegSubscriptionEnabledKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRegSubscriptionEnabledKey(void)::value, "RegSubscriptionEnabled", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getRegSubscriptionEnabledKey(void)::value;
}

void sub_1C540089C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegSubscriptionExpirationSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 600000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRegSubscriptionExpirationSecondsKey(void)::value, "RegSubscriptionExpirationSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getRegSubscriptionExpirationSecondsKey(void)::value;
}

void sub_1C5400944(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegisterOnServiceUpdateKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRegisterOnServiceUpdateKey(void)::value, "RegisterOnServiceUpdate", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getRegisterOnServiceUpdateKey(void)::value;
}

void sub_1C54009E8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSkipReRegisterWhenNetworkTypeChangedOnNrBetweenTddAndFddKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[57],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSkipReRegisterWhenNetworkTypeChangedOnNrBetweenTddAndFddKey(void)::value, "SkipReRegisterWhenNetworkTypeChangedOnNrBetweenTddAndFdd", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSkipReRegisterWhenNetworkTypeChangedOnNrBetweenTddAndFddKey(void)::value;
}

void sub_1C5400A84(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegistrationExpirationSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 600000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationExpirationSecondsKey(void)::value, "RegistrationExpirationSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getRegistrationExpirationSecondsKey(void)::value;
}

void sub_1C5400B2C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegisterSmsWhenAccessBarringZeroKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRegisterSmsWhenAccessBarringZeroKey(void)::value, "RegisterSmsWhenAccessBarringZero", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getRegisterSmsWhenAccessBarringZeroKey(void)::value;
}

void sub_1C5400BC8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegisterSmsOnEmergencyPdnKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRegisterSmsOnEmergencyPdnKey(void)::value, "RegisterSmsOnEmergencyPdn", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getRegisterSmsOnEmergencyPdnKey(void)::value;
}

void sub_1C5400C64(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegistrationPolicyKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,char const(&)[8],BOOL>((uint64_t)&ImsPrefs::getRegistrationPolicyKey(void)::value, "RegistrationPolicy", "Signaling", (unsigned __int8 *)&v2 + 1, "default", (char *)&v2);
  }
  return &ImsPrefs::getRegistrationPolicyKey(void)::value;
}

void sub_1C5400D08(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegistrationRefreshCushionPercentKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationRefreshCushionPercentKey(void)::value, "RegistrationRefreshCushionPercent", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getRegistrationRefreshCushionPercentKey(void)::value;
}

void sub_1C5400DAC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegistrationCoalesceCushionPercentKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 50;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationCoalesceCushionPercentKey(void)::value, "RegistrationCoalesceCushionPercent", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getRegistrationCoalesceCushionPercentKey(void)::value;
}

void sub_1C5400E50(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegistrationRetryBaseTimeSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 120;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationRetryBaseTimeSecondsKey(void)::value, "RegistrationRetryBaseTimeSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getRegistrationRetryBaseTimeSecondsKey(void)::value;
}

void sub_1C5400EF4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegistrationRetryMaxTimeSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 7200;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationRetryMaxTimeSecondsKey(void)::value, "RegistrationRetryMaxTimeSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getRegistrationRetryMaxTimeSecondsKey(void)::value;
}

void sub_1C5400F98(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegistrationRetryIntervalsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,char const(&)[24],BOOL>((uint64_t)&ImsPrefs::getRegistrationRetryIntervalsKey(void)::value, "RegistrationRetryIntervals", "Signaling", (unsigned __int8 *)&v2 + 1, "30,30,60+15,120,480,900", (char *)&v2);
  }
  return &ImsPrefs::getRegistrationRetryIntervalsKey(void)::value;
}

void sub_1C540103C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getCountryCodesWhereNeedImsiInContactHeaderOfAnonymousEmergencyInviteKey(ImsPrefs *this)
{
  {
    unsigned __int8 v3 = 1;
    char v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[67],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getCountryCodesWhereNeedImsiInContactHeaderOfAnonymousEmergencyInviteKey(void)::value, "CountryCodesWhereNeedImsiInContactHeaderOfAnonymousEmergencyInvite", "Signaling", &v3, (char *)&str_2_6, &v2);
  }
  return &ImsPrefs::getCountryCodesWhereNeedImsiInContactHeaderOfAnonymousEmergencyInviteKey(void)::value;
}

void sub_1C54010E8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegistrationThrottlingCushionPercentKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationThrottlingCushionPercentKey(void)::value, "RegistrationThrottlingCushionPercent", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getRegistrationThrottlingCushionPercentKey(void)::value;
}

void sub_1C540118C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRemoveForkOnTransactionDoesNotExistKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRemoveForkOnTransactionDoesNotExistKey(void)::value, "RemoveForkOnTransactionDoesNotExist", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getRemoveForkOnTransactionDoesNotExistKey(void)::value;
}

void sub_1C5401228(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getReportSipErrorsDuringReRegistrationKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getReportSipErrorsDuringReRegistrationKey(void)::value, "ReportSipErrorsDuringReRegistration", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getReportSipErrorsDuringReRegistrationKey(void)::value;
}

void sub_1C54012C4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRequireExplicitPortsForEmergencyRoutesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRequireExplicitPortsForEmergencyRoutesKey(void)::value, "RequireExplicitPortsForEmergencyRoutes", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getRequireExplicitPortsForEmergencyRoutesKey(void)::value;
}

void sub_1C5401360(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRequireQoSBeforeRingingKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRequireQoSBeforeRingingKey(void)::value, "RequireQoSBeforeRinging", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getRequireQoSBeforeRingingKey(void)::value;
}

void sub_1C54013FC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRequirePreconditionsWhenSdpPresentKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRequirePreconditionsWhenSdpPresentKey(void)::value, "RequirePreconditionsWhenSdpPresent", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getRequirePreconditionsWhenSdpPresentKey(void)::value;
}

void sub_1C54014A0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRequirePreconditionsWhenMandatoryKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRequirePreconditionsWhenMandatoryKey(void)::value, "RequirePreconditionsWhenMandatory", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getRequirePreconditionsWhenMandatoryKey(void)::value;
}

void sub_1C5401544(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getVerstatFeatureCapabilityKey(ImsPrefs *this)
{
  void v8[3] = *MEMORY[0x1E4F143B8];
  {
    char v4 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v6, "Disabled");
    std::string::basic_string[abi:ne180100]<0>(v7, "Dynamic");
    std::string::basic_string[abi:ne180100]<0>(v8, "Enabled");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v3, &v6, 3uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getVerstatFeatureCapabilityKey(void)::value, "VerstatFeatureCapability", "Signaling", &v4, &v3);
    BOOL v5 = (void **)&v3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    for (uint64_t i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v8[i + 2]) < 0) {
        operator delete((void *)v8[i]);
      }
    }
  }
  return &ImsPrefs::getVerstatFeatureCapabilityKey(void)::value;
}

void sub_1C540169C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, char a15)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  uint64_t v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 71) < 0) {
      operator delete(*(void **)(&a15 + v16 + 48));
    }
    v16 -= 24;
    if (v16 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getEnableBrandedCallingKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableBrandedCallingKey(void)::value, "EnableBrandedCalling", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnableBrandedCallingKey(void)::value;
}

void sub_1C54017A4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSpamHeaderFeatureCapabilityKey(ImsPrefs *this)
{
  void v8[3] = *MEMORY[0x1E4F143B8];
  {
    char v4 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v6, "Disabled");
    std::string::basic_string[abi:ne180100]<0>(v7, "Dynamic");
    std::string::basic_string[abi:ne180100]<0>(v8, "Enabled");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v3, &v6, 3uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getSpamHeaderFeatureCapabilityKey(void)::value, "SpamHeaderFeatureCapability", "Signaling", &v4, &v3);
    BOOL v5 = (void **)&v3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    for (uint64_t i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v8[i + 2]) < 0) {
        operator delete((void *)v8[i]);
      }
    }
  }
  return &ImsPrefs::getSpamHeaderFeatureCapabilityKey(void)::value;
}

void sub_1C54018FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, char a15)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  uint64_t v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 71) < 0) {
      operator delete(*(void **)(&a15 + v16 + 48));
    }
    v16 -= 24;
    if (v16 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getResetCallIdOnAuthChallengeKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getResetCallIdOnAuthChallengeKey(void)::value, "ResetCallIdOnAuthChallenge", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getResetCallIdOnAuthChallengeKey(void)::value;
}

void sub_1C5401A0C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getResetCallIdOnInitialRegistrationKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getResetCallIdOnInitialRegistrationKey(void)::value, "ResetCallIdOnInitialRegistration", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getResetCallIdOnInitialRegistrationKey(void)::value;
}

void sub_1C5401AA8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getResetConnectionsWhenClosedByPeerKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getResetConnectionsWhenClosedByPeerKey(void)::value, "ResetConnectionsWhenClosedByPeer", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getResetConnectionsWhenClosedByPeerKey(void)::value;
}

void sub_1C5401B4C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getResetSocketWhenNetworkChangeKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getResetSocketWhenNetworkChangeKey(void)::value, "ResetSocketWhenNetworkChange", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getResetSocketWhenNetworkChangeKey(void)::value;
}

void sub_1C5401BF0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getResetDisabledModeOnEventsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,char const(&)[32],BOOL>((uint64_t)&ImsPrefs::getResetDisabledModeOnEventsKey(void)::value, "ResetDisabledModeOnEvents", "Signaling", (unsigned __int8 *)&v2 + 1, "SimInserted,AirplaneModeToggled", (char *)&v2);
  }
  return &ImsPrefs::getResetDisabledModeOnEventsKey(void)::value;
}

void sub_1C5401C94(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getResetThrottlingOnEventsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[32],BOOL>((uint64_t)&ImsPrefs::getResetThrottlingOnEventsKey(void)::value, "ResetThrottlingOnEvents", "Signaling", (unsigned __int8 *)&v2 + 1, "SimInserted,AirplaneModeToggled", (char *)&v2);
  }
  return &ImsPrefs::getResetThrottlingOnEventsKey(void)::value;
}

void sub_1C5401D38(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRetryAfterStatusCodesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getRetryAfterStatusCodesKey(void)::value, "RetryAfterStatusCodes", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getRetryAfterStatusCodesKey(void)::value;
}

void sub_1C5401DDC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIgnoreRetryAfterStatusCodesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getIgnoreRetryAfterStatusCodesKey(void)::value, "IgnoreRetryAfterStatusCodes", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getIgnoreRetryAfterStatusCodesKey(void)::value;
}

void sub_1C5401E80(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRestartRingbackTimerOn180Key(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRestartRingbackTimerOn180Key(void)::value, "RestartRingbackTimerOn180", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getRestartRingbackTimerOn180Key(void)::value;
}

void sub_1C5401F1C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRingbackTimerSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 45;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRingbackTimerSecondsKey(void)::value, "RingbackTimerSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getRingbackTimerSecondsKey(void)::value;
}

void sub_1C5401FC0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRingingTimerSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 40;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRingingTimerSecondsKey(void)::value, "RingingTimerSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getRingingTimerSecondsKey(void)::value;
}

void sub_1C5402064(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSecurityAgreementOptionsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getSecurityAgreementOptionsKey(void)::value, "SecurityAgreementOptions", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getSecurityAgreementOptionsKey(void)::value;
}

void sub_1C5402108(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSecurityAgreementAlgsKey(ImsPrefs *this)
{
  {
    unsigned __int8 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,char const(&)[26]>((uint64_t)&ImsPrefs::getSecurityAgreementAlgsKey(void)::value, "SecurityAgreementAlgs", "Signaling", &v2, "hmac-md5-96,hmac-sha-1-96");
  }
  return &ImsPrefs::getSecurityAgreementAlgsKey(void)::value;
}

void sub_1C54021A8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSecurityAgreementEalgsKey(ImsPrefs *this)
{
  {
    unsigned __int8 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,char const(&)[13]>((uint64_t)&ImsPrefs::getSecurityAgreementEalgsKey(void)::value, "SecurityAgreementEalgs", "Signaling", &v2, "aes-cbc,null");
  }
  return &ImsPrefs::getSecurityAgreementEalgsKey(void)::value;
}

void sub_1C5402248(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSendAcceptContactInInviteKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendAcceptContactInInviteKey(void)::value, "SendAcceptContactInInvite", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getSendAcceptContactInInviteKey(void)::value;
}

void sub_1C54022EC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSendAcceptContactInSmsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendAcceptContactInSmsKey(void)::value, "SendAcceptContactInSms", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getSendAcceptContactInSmsKey(void)::value;
}

void sub_1C5402390(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSendEmergencyLocationUpdatesKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    char v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendEmergencyLocationUpdatesKey(void)::value, "SendEmergencyLocationUpdates", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getSendEmergencyLocationUpdatesKey(void)::value;
}

void sub_1C5402434(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSendInitialInviteAsInactiveKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendInitialInviteAsInactiveKey(void)::value, "SendInitialInviteAsInactive", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSendInitialInviteAsInactiveKey(void)::value;
}

void sub_1C54024D0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSendResumeInviteAsSendRecvKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendResumeInviteAsSendRecvKey(void)::value, "SendResumeInviteAsSendRecv", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getSendResumeInviteAsSendRecvKey(void)::value;
}

void sub_1C5402574(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSendLocalTimeZoneInformationKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendLocalTimeZoneInformationKey(void)::value, "SendLocalTimeZoneInformation", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSendLocalTimeZoneInformationKey(void)::value;
}

void sub_1C5402610(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSendOfferWithInviteKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendOfferWithInviteKey(void)::value, "SendOfferWithInvite", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getSendOfferWithInviteKey(void)::value;
}

void sub_1C54026B4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSendPreconditionsInConfirmedSessionsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendPreconditionsInConfirmedSessionsKey(void)::value, "SendPreconditionsInConfirmedSessions", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSendPreconditionsInConfirmedSessionsKey(void)::value;
}

void sub_1C5402750(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSendPreferredIdentityKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendPreferredIdentityKey(void)::value, "SendPreferredIdentity", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getSendPreferredIdentityKey(void)::value;
}

void sub_1C54027F4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSendPreferredServiceInInviteKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendPreferredServiceInInviteKey(void)::value, "SendPreferredServiceInInvite", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSendPreferredServiceInInviteKey(void)::value;
}

void sub_1C5402890(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSendReInviteInInactiveSessionsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendReInviteInInactiveSessionsKey(void)::value, "SendReInviteInInactiveSessions", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSendReInviteInInactiveSessionsKey(void)::value;
}

void sub_1C540292C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getServiceClassKey(ImsPrefs *this)
{
  {
    unsigned __int8 v4 = 0;
    v3[0] = 0;
    v3[1] = 0;
    __int16 v2 = v3;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[13],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getServiceClassKey(void)::value, "ServiceClass", "Signaling", &v4, &v2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v2, v3[0]);
  }
  return &ImsPrefs::getServiceClassKey(void)::value;
}

void sub_1C54029E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *ImsPrefs::getSessionExpiresSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getSessionExpiresSecondsKey(void)::value, "SessionExpiresSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getSessionExpiresSecondsKey(void)::value;
}

void sub_1C5402A90(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSpamCallRiskLevelsKey(ImsPrefs *this)
{
  {
    unsigned __int8 v4 = 0;
    v3[0] = 0;
    v3[1] = 0;
    int v2 = v3;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getSpamCallRiskLevelsKey(void)::value, "SpamCallRiskLevels", "Signaling", &v4, &v2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v2, v3[0]);
  }
  return &ImsPrefs::getSpamCallRiskLevelsKey(void)::value;
}

void sub_1C5402B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *ImsPrefs::getSpamCallCategoryMappingKey(ImsPrefs *this)
{
  {
    unsigned __int8 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[1]>((uint64_t)&ImsPrefs::getSpamCallCategoryMappingKey(void)::value, "SpamCallCategoryMapping", "Signaling", &v2, (char *)&str_2_6);
  }
  return &ImsPrefs::getSpamCallCategoryMappingKey(void)::value;
}

void sub_1C5402BF4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowEmergencyRegistrationInLimitedAccessOnWiFiKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[48],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowEmergencyRegistrationInLimitedAccessOnWiFiKey(void)::value, "AllowEmergencyRegistrationInLimitedAccessOnWiFi", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getAllowEmergencyRegistrationInLimitedAccessOnWiFiKey(void)::value;
}

void sub_1C5402C98(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSetSessionTimerRefresherInInitialRequestKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSetSessionTimerRefresherInInitialRequestKey(void)::value, "SetSessionTimerRefresherInInitialRequest", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSetSessionTimerRefresherInInitialRequestKey(void)::value;
}

void sub_1C5402D34(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSetCountryWithCampedPANIKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSetCountryWithCampedPANIKey(void)::value, "SetCountryWithCampedPANI", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSetCountryWithCampedPANIKey(void)::value;
}

void sub_1C5402DD0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSRVCCCleanupTimeoutSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 10;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getSRVCCCleanupTimeoutSecondsKey(void)::value, "SRVCCCleanupTimeoutSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getSRVCCCleanupTimeoutSecondsKey(void)::value;
}

void sub_1C5402E74(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getStartLocalQosTimerOnSessionProgressKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getStartLocalQosTimerOnSessionProgressKey(void)::value, "StartLocalQosTimerOnSessionProgress", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getStartLocalQosTimerOnSessionProgressKey(void)::value;
}

void sub_1C5402F10(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getStrictCallFlowTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getStrictCallFlowTimeoutKey(void)::value, "StrictCallFlowTimeoutInMilliseconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getStrictCallFlowTimeoutKey(void)::value;
}

void sub_1C5402FB0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getStrictTS24930PreconditionHeadersKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getStrictTS24930PreconditionHeadersKey(void)::value, "StrictTS24930PreconditionHeaders", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getStrictTS24930PreconditionHeadersKey(void)::value;
}

void sub_1C540304C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSubscriptionRetryMaxSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 900;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getSubscriptionRetryMaxSecondsKey(void)::value, "SubscriptionRetryMaxSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getSubscriptionRetryMaxSecondsKey(void)::value;
}

void sub_1C54030F0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSubscriptionRetryMinSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getSubscriptionRetryMinSecondsKey(void)::value, "SubscriptionRetryMinSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getSubscriptionRetryMinSecondsKey(void)::value;
}

void sub_1C5403190(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSubscriptionTerminatedMeansRegistrationTerminatedKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[50],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSubscriptionTerminatedMeansRegistrationTerminatedKey(void)::value, "SubscriptionTerminatedMeansRegistrationTerminated", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSubscriptionTerminatedMeansRegistrationTerminatedKey(void)::value;
}

void sub_1C540322C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSupportPEarlyMediaHeaderKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSupportPEarlyMediaHeaderKey(void)::value, "SupportPEarlyMediaHeader", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getSupportPEarlyMediaHeaderKey(void)::value;
}

void sub_1C54032D0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSystemWakeWaitTimeoutMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 1000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getSystemWakeWaitTimeoutMillisecondsKey(void)::value, "SystemWakeWaitTimeoutMilliseconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getSystemWakeWaitTimeoutMillisecondsKey(void)::value;
}

void sub_1C5403374(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTLSKeepAliveIntervalSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 300;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTLSKeepAliveIntervalSecondsKey(void)::value, "TLSKeepAliveIntervalSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getTLSKeepAliveIntervalSecondsKey(void)::value;
}

void sub_1C5403418(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTLSIdlePingIntervalSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 1800;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTLSIdlePingIntervalSecondsKey(void)::value, "TLSIdlePingIntervalSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getTLSIdlePingIntervalSecondsKey(void)::value;
}

void sub_1C54034BC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPCSCFDomainNameKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getPCSCFDomainNameKey(void)::value, "PCSCFDomainName", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getPCSCFDomainNameKey(void)::value;
}

void sub_1C5403560(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTCPIdlePingIntervalSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTCPIdlePingIntervalSecondsKey(void)::value, "TCPIdlePingIntervalSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getTCPIdlePingIntervalSecondsKey(void)::value;
}

void sub_1C5403600(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getCRLFMinimumPingIntervalSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 120;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getCRLFMinimumPingIntervalSecondsKey(void)::value, "CRLFMinimumPingIntervalSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getCRLFMinimumPingIntervalSecondsKey(void)::value;
}

void sub_1C54036A4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getCRLFIdlePingThresholdCapSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 300;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getCRLFIdlePingThresholdCapSecondsKey(void)::value, "CRLFIdlePingThresholdCapSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getCRLFIdlePingThresholdCapSecondsKey(void)::value;
}

void sub_1C5403748(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseCrlfIntervalFromRegistrationKeepKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseCrlfIntervalFromRegistrationKeepKey(void)::value, "UseCrlfIntervalFromRegistrationKeep", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseCrlfIntervalFromRegistrationKeepKey(void)::value;
}

void sub_1C54037E4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTcpIdleTimeoutSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTcpIdleTimeoutSecondsKey(void)::value, "TcpIdleTimeoutSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getTcpIdleTimeoutSecondsKey(void)::value;
}

void sub_1C5403888(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTransferWaitForHoldTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTransferWaitForHoldTimeoutKey(void)::value, "TransferWaitForHoldTimeout", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getTransferWaitForHoldTimeoutKey(void)::value;
}

void sub_1C540392C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTransferWaitForJoinTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTransferWaitForJoinTimeoutKey(void)::value, "TransferWaitForJoinTimeout", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getTransferWaitForJoinTimeoutKey(void)::value;
}

void sub_1C54039D0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTransferHangupTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTransferHangupTimeoutKey(void)::value, "TransferHangupTimeout", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getTransferHangupTimeoutKey(void)::value;
}

void sub_1C5403A74(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTransferorShouldSendByeRequestKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getTransferorShouldSendByeRequestKey(void)::value, "TransferorShouldSendByeRequest", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getTransferorShouldSendByeRequestKey(void)::value;
}

void sub_1C5403B10(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getExplicitTransferEnabledKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getExplicitTransferEnabledKey(void)::value, "ExplicitTransferEnabled", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getExplicitTransferEnabledKey(void)::value;
}

void sub_1C5403BB4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getHoldTransferTargetSessionKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getHoldTransferTargetSessionKey(void)::value, "HoldTransferTargetSession", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getHoldTransferTargetSessionKey(void)::value;
}

void sub_1C5403C50(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTransportInitTimeoutSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 30;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTransportInitTimeoutSecondsKey(void)::value, "TransportInitTimeoutSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getTransportInitTimeoutSecondsKey(void)::value;
}

void sub_1C5403CF4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMOKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMOKey(void)::value, "TriggerCSFBOnLocalQoSTimeoutMO", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMOKey(void)::value;
}

void sub_1C5403D98(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMTKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMTKey(void)::value, "TriggerCSFBOnLocalQoSTimeoutMT", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMTKey(void)::value;
}

void sub_1C5403E3C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTriggerCSFBOnSDPErrorKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getTriggerCSFBOnSDPErrorKey(void)::value, "TriggerCSFBOnSDPError", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getTriggerCSFBOnSDPErrorKey(void)::value;
}

void sub_1C5403ED8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTriggerCSFBOnWaitForRingingTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getTriggerCSFBOnWaitForRingingTimeoutKey(void)::value, "TriggerCSFBOnWaitForRingingTimeout", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getTriggerCSFBOnWaitForRingingTimeoutKey(void)::value;
}

void sub_1C5403F7C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTimeoutRegistrationAllProxyErrorCodesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getTimeoutRegistrationAllProxyErrorCodesKey(void)::value, "TimeoutRegistrationAllProxyErrorCodes", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getTimeoutRegistrationAllProxyErrorCodesKey(void)::value;
}

void sub_1C5404020(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseAoRForSmsSenderIdentityKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseAoRForSmsSenderIdentityKey(void)::value, "UseAoRForSmsSenderIdentity", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseAoRForSmsSenderIdentityKey(void)::value;
}

void sub_1C54040BC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseCIDUrlInPIDFKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseCIDUrlInPIDFKey(void)::value, "UseCIDUrlInPIDF", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseCIDUrlInPIDFKey(void)::value;
}

void sub_1C5404158(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseTupleInPIDFKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseTupleInPIDFKey(void)::value, "UseTupleInPIDF", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseTupleInPIDFKey(void)::value;
}

void sub_1C54041F4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseCampedAccessNetworkInPANIKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseCampedAccessNetworkInPANIKey(void)::value, "UseCampedAccessNetworkInPANI", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseCampedAccessNetworkInPANIKey(void)::value;
}

void sub_1C5404290(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseCompactHeadersKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseCompactHeadersKey(void)::value, "UseCompactHeaders", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseCompactHeadersKey(void)::value;
}

void sub_1C540432C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseCorrectAckConstructionKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseCorrectAckConstructionKey(void)::value, "UseCorrectAckConstruction", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getUseCorrectAckConstructionKey(void)::value;
}

void sub_1C54043D0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseStrictBearerPreconditionsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseStrictBearerPreconditionsKey(void)::value, "UseStrictBearerPreconditions", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getUseStrictBearerPreconditionsKey(void)::value;
}

void sub_1C5404474(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRequireBearerPortMatchForPreconditionsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRequireBearerPortMatchForPreconditionsKey(void)::value, "RequireBearerPortMatchForPreconditions", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getRequireBearerPortMatchForPreconditionsKey(void)::value;
}

void sub_1C5404510(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseBase64ForMultipartSMSKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseBase64ForMultipartSMSKey(void)::value, "UseBase64ForMultipartSMS", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getUseBase64ForMultipartSMSKey(void)::value;
}

void sub_1C54045B4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseCustomSSOAuthKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseCustomSSOAuthKey(void)::value, "UseCustomSSOAuth", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseCustomSSOAuthKey(void)::value;
}

void sub_1C5404650(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseDialogEventPackageKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseDialogEventPackageKey(void)::value, "UseDialogEventPackage", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseDialogEventPackageKey(void)::value;
}

void sub_1C54046EC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseDummyImeiCheckDigitKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseDummyImeiCheckDigitKey(void)::value, "UseDummyImeiCheckDigit", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getUseDummyImeiCheckDigitKey(void)::value;
}

void sub_1C5404790(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseEphemeralSipSourcePortForTcpKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseEphemeralSipSourcePortForTcpKey(void)::value, "UseEphemeralSipSourcePortForTcp", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseEphemeralSipSourcePortForTcpKey(void)::value;
}

void sub_1C540482C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseFakeSAsForDeregistrationKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseFakeSAsForDeregistrationKey(void)::value, "UseFakeSAsForDeregistration", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseFakeSAsForDeregistrationKey(void)::value;
}

void sub_1C54048C8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseIPSecKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[9],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseIPSecKey(void)::value, "UseIPSec", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseIPSecKey(void)::value;
}

void sub_1C5404964(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseEphemeralRangeForIPSecKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseEphemeralRangeForIPSecKey(void)::value, "UseEphemeralRangeForIPSec", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getUseEphemeralRangeForIPSecKey(void)::value;
}

void sub_1C5404A08(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMaxIPSecTransportRetriesKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 10;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxIPSecTransportRetriesKey(void)::value, "MaxIPSecTransportRetries", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getMaxIPSecTransportRetriesKey(void)::value;
}

void sub_1C5404AAC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDefaultIPSecPortKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 42550;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[17],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getDefaultIPSecPortKey(void)::value, "DefaultIPSecPort", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getDefaultIPSecPortKey(void)::value;
}

void sub_1C5404B50(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseNextProxyForPcscfRestorationKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseNextProxyForPcscfRestorationKey(void)::value, "UseNextProxyForPcscfRestoration", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getUseNextProxyForPcscfRestorationKey(void)::value;
}

void sub_1C5404BF4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseNormalIdentityForEmergencyCallsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseNormalIdentityForEmergencyCallsKey(void)::value, "UseNormalIdentityForEmergencyCalls", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseNormalIdentityForEmergencyCallsKey(void)::value;
}

void sub_1C5404C90(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseNormalIdentityForEmergencyUSIMKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseNormalIdentityForEmergencyUSIMKey(void)::value, "UseNormalIdentityForEmergencyUSIM", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseNormalIdentityForEmergencyUSIMKey(void)::value;
}

void sub_1C5404D2C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUsePublicDomainForPhoneContextKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUsePublicDomainForPhoneContextKey(void)::value, "UsePublicDomainForPhoneContext", "Signaling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUsePublicDomainForPhoneContextKey(void)::value;
}

void sub_1C5404DC8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUserAgentHeaderValueKey(ImsPrefs *this)
{
  {
    unsigned __int8 v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,char const(&)[30],BOOL>((uint64_t)&ImsPrefs::getUserAgentHeaderValueKey(void)::value, "UserAgentHeaderValue", "Signaling", &v3, "${OS}/${OS_VERSION} ${DEVICE}", &v2);
  }
  return &ImsPrefs::getUserAgentHeaderValueKey(void)::value;
}

void sub_1C5404E74(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUssdResponseTimeoutMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 10000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getUssdResponseTimeoutMillisecondsKey(void)::value, "UssdResponseTimeoutMilliseconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getUssdResponseTimeoutMillisecondsKey(void)::value;
}

void sub_1C5404F18(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getValidateSipMessageRecipientKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getValidateSipMessageRecipientKey(void)::value, "ValidateSipMessageRecipient", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getValidateSipMessageRecipientKey(void)::value;
}

void sub_1C5404FBC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getVirtualInterfaceMtuKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 2000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getVirtualInterfaceMtuKey(void)::value, "VirtualInterfaceMtu", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getVirtualInterfaceMtuKey(void)::value;
}

void sub_1C5405060(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getWaitForAckBeforeEndingCallTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 4000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[46],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getWaitForAckBeforeEndingCallTimeoutKey(void)::value, "WaitForAckBeforeEndingCallTimeoutMilliseconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getWaitForAckBeforeEndingCallTimeoutKey(void)::value;
}

void sub_1C5405104(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getWaitForByeResponseTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 2000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getWaitForByeResponseTimeoutKey(void)::value, "WaitForByeResponseTimeoutMilliseconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getWaitForByeResponseTimeoutKey(void)::value;
}

void sub_1C54051A8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getWaitForCancelResponseTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 4000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getWaitForCancelResponseTimeoutKey(void)::value, "WaitForCancelResponseTimeoutMilliseconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getWaitForCancelResponseTimeoutKey(void)::value;
}

void sub_1C540524C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getWaitForRingingTimerMOSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 20;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getWaitForRingingTimerMOSecondsKey(void)::value, "WaitForRingingTimerMOSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getWaitForRingingTimerMOSecondsKey(void)::value;
}

void sub_1C54052F0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getWaitForRingingTimerMTSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 25;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getWaitForRingingTimerMTSecondsKey(void)::value, "WaitForRingingTimerMTSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getWaitForRingingTimerMTSecondsKey(void)::value;
}

void sub_1C5405394(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getWaitForRingingTimerWPSSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getWaitForRingingTimerWPSSecondsKey(void)::value, "WaitForRingingTimerWPSSeconds", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getWaitForRingingTimerWPSSecondsKey(void)::value;
}

void sub_1C5405434(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getWPSCSFBDelayTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 2000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getWPSCSFBDelayTimeoutKey(void)::value, "WPSCSFBDelayTimeout", "Signaling", &v3, &v2);
  }
  return &ImsPrefs::getWPSCSFBDelayTimeoutKey(void)::value;
}

void sub_1C54054D8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getResponseCodesBlockedForSilentRedialNRSANonEmKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[45],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getResponseCodesBlockedForSilentRedialNRSANonEmKey(void)::value, "ResponseCodesBlockedForSilentRedialNRSANonEm", "Signaling", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getResponseCodesBlockedForSilentRedialNRSANonEmKey(void)::value;
}

void sub_1C540557C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSipTimerAKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerAKey(void)::value, "A", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getSipTimerAKey(void)::value;
}

void sub_1C540561C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSipTimerBKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerBKey(void)::value, "B", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getSipTimerBKey(void)::value;
}

void sub_1C54056BC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSipTimerCKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerCKey(void)::value, "C", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getSipTimerCKey(void)::value;
}

void sub_1C540575C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSipTimerDKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 128000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerDKey(void)::value, "D", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getSipTimerDKey(void)::value;
}

void sub_1C5405804(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSipTimerEKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerEKey(void)::value, "E", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getSipTimerEKey(void)::value;
}

void sub_1C54058A4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSipTimerFKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerFKey(void)::value, "F", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getSipTimerFKey(void)::value;
}

void sub_1C5405944(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSipTimerGKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerGKey(void)::value, "G", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getSipTimerGKey(void)::value;
}

void sub_1C54059E4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSipTimerHKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerHKey(void)::value, "H", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getSipTimerHKey(void)::value;
}

void sub_1C5405A84(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSipTimerIKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerIKey(void)::value, "I", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getSipTimerIKey(void)::value;
}

void sub_1C5405B24(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSipTimerJKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerJKey(void)::value, "J", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getSipTimerJKey(void)::value;
}

void sub_1C5405BC4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSipTimerT1Key(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 2000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[3],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerT1Key(void)::value, "T1", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getSipTimerT1Key(void)::value;
}

void sub_1C5405C68(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSipTimerT2Key(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 16000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[3],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerT2Key(void)::value, "T2", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getSipTimerT2Key(void)::value;
}

void sub_1C5405D0C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSipTimerT4Key(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 17000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[3],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerT4Key(void)::value, "T4", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getSipTimerT4Key(void)::value;
}

void sub_1C5405DB0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSip200RetransmitTimerKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSip200RetransmitTimerKey(void)::value, "200RetransmitTimer", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getSip200RetransmitTimerKey(void)::value;
}

void sub_1C5405E50(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAckReceiveTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[18],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getAckReceiveTimeoutKey(void)::value, "AckReceiveTimeout", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getAckReceiveTimeoutKey(void)::value;
}

void sub_1C5405EF0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAckRetransmitTimerKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getAckRetransmitTimerKey(void)::value, "AckRetransmitTimer", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getAckRetransmitTimerKey(void)::value;
}

void sub_1C5405F90(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegAwaitAuthTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getRegAwaitAuthTimeoutKey(void)::value, "RegAwaitAuthTimeout", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getRegAwaitAuthTimeoutKey(void)::value;
}

void sub_1C5406030(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getInviteResponseTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 10000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getInviteResponseTimeoutKey(void)::value, "InviteResponseTimeout", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getInviteResponseTimeoutKey(void)::value;
}

void sub_1C54060D4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEPSInviteResponseTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getEPSInviteResponseTimeoutKey(void)::value, "EPSInviteResponseTimeout", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getEPSInviteResponseTimeoutKey(void)::value;
}

void sub_1C5406174(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEmergencyInviteResponseTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyInviteResponseTimeoutKey(void)::value, "EmergencyInviteResponseTimeout", "Signaling/SipTimers", &v3, &v2);
  }
  return &ImsPrefs::getEmergencyInviteResponseTimeoutKey(void)::value;
}

void sub_1C5406214(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAddServicesToContactInConferenceSubscribeKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddServicesToContactInConferenceSubscribeKey(void)::value, "AddServicesToContactInConferenceSubscribe", "ConferenceCalling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAddServicesToContactInConferenceSubscribeKey(void)::value;
}

void sub_1C54062B0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAddSupportedHeaderToAllResponsesKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddSupportedHeaderToAllResponsesKey(void)::value, "AddSupportedHeaderToAllResponses", "ConferenceCalling", &v3, &v2);
  }
  return &ImsPrefs::getAddSupportedHeaderToAllResponsesKey(void)::value;
}

void sub_1C5406354(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysSubscribeToConferenceEventsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysSubscribeToConferenceEventsKey(void)::value, "AlwaysSubscribeToConferenceEvents", "ConferenceCalling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAlwaysSubscribeToConferenceEventsKey(void)::value;
}

void sub_1C54063F0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDisableMergeOnInviteErrorResponsesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[35],char const(&)[18],BOOL,char const(&)[12],BOOL>((uint64_t)&ImsPrefs::getDisableMergeOnInviteErrorResponsesKey(void)::value, "DisableMergeOnInviteErrorResponses", "ConferenceCalling", (unsigned __int8 *)&v2 + 1, "400,404,500", (char *)&v2);
  }
  return &ImsPrefs::getDisableMergeOnInviteErrorResponsesKey(void)::value;
}

void sub_1C5406494(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getConferenceServerKey(ImsPrefs *this)
{
  {
    unsigned __int8 v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[17],char const(&)[18],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getConferenceServerKey(void)::value, "conferenceServer", "ConferenceCalling", &v3, (char *)&str_2_6, &v2);
  }
  return &ImsPrefs::getConferenceServerKey(void)::value;
}

void sub_1C5406540(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTreatAllNotificationsAsPartialKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getTreatAllNotificationsAsPartialKey(void)::value, "TreatAllNotificationsAsPartial", "ConferenceCalling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getTreatAllNotificationsAsPartialKey(void)::value;
}

void sub_1C54065DC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSendConferenceSubscribeInNewDialogKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendConferenceSubscribeInNewDialogKey(void)::value, "SendConferenceSubscribeInNewDialog", "ConferenceCalling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSendConferenceSubscribeInNewDialogKey(void)::value;
}

void sub_1C5406678(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSendConferenceSubscribeAfterRefersKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendConferenceSubscribeAfterRefersKey(void)::value, "SendConferenceSubscribeAfterRefers", "ConferenceCalling", &v3, &v2);
  }
  return &ImsPrefs::getSendConferenceSubscribeAfterRefersKey(void)::value;
}

void sub_1C540671C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSendReferToPeerKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendReferToPeerKey(void)::value, "SendReferToPeer", "ConferenceCalling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSendReferToPeerKey(void)::value;
}

void sub_1C54067B8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSerializeRefersKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getSerializeRefersKey(void)::value, "SerializeRefers", "ConferenceCalling", &v3, &v2);
  }
  return &ImsPrefs::getSerializeRefersKey(void)::value;
}

void sub_1C540685C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSerializeParticipantsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getSerializeParticipantsKey(void)::value, "SerializeParticipants", "ConferenceCalling", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSerializeParticipantsKey(void)::value;
}

void sub_1C54068F8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseDomainForConferenceServerKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseDomainForConferenceServerKey(void)::value, "UseDomainForConferenceServer", "ConferenceCalling", &v3, &v2);
  }
  return &ImsPrefs::getUseDomainForConferenceServerKey(void)::value;
}

void sub_1C540699C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAddBWSpecsAtSessionLevelKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddBWSpecsAtSessionLevelKey(void)::value, "AddBWSpecsAtSessionLevel", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAddBWSpecsAtSessionLevelKey(void)::value;
}

void sub_1C5406A38(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowHoldMusicKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowHoldMusicKey(void)::value, "AllowHoldMusic", "Media", &v3, &v2);
  }
  return &ImsPrefs::getAllowHoldMusicKey(void)::value;
}

void sub_1C5406ADC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowIPv6UnicastAddressKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowIPv6UnicastAddressKey(void)::value, "AllowIPv6UnicastAddress", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAllowIPv6UnicastAddressKey(void)::value;
}

void sub_1C5406B78(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIgnoreLocalhostRemoteRtpAddressKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreLocalhostRemoteRtpAddressKey(void)::value, "IgnoreLocalhostRemoteRtpAddress", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getIgnoreLocalhostRemoteRtpAddressKey(void)::value;
}

void sub_1C5406C14(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAlwaysPrintSDPFormatInfoKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysPrintSDPFormatInfoKey(void)::value, "AlwaysPrintSDPFormatInfo", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAlwaysPrintSDPFormatInfoKey(void)::value;
}

void sub_1C5406CB0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getBandwidthSpecifierRRValueKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 100;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getBandwidthSpecifierRRValueKey(void)::value, "BandwidthSpecifierRRValue", "Media", &v3, &v2);
  }
  return &ImsPrefs::getBandwidthSpecifierRRValueKey(void)::value;
}

void sub_1C5406D54(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getBandwidthSpecifierRSValueKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 300;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getBandwidthSpecifierRSValueKey(void)::value, "BandwidthSpecifierRSValue", "Media", &v3, &v2);
  }
  return &ImsPrefs::getBandwidthSpecifierRSValueKey(void)::value;
}

void sub_1C5406DF8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSuppressBSUntilPreconditionsMetKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSuppressBSUntilPreconditionsMetKey(void)::value, "SuppressBSUntilPreconditionsMet", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSuppressBSUntilPreconditionsMetKey(void)::value;
}

void sub_1C5406E94(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDTMFDigitDurationMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 100;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[30],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getDTMFDigitDurationMillisecondsKey(void)::value, "DTMFDigitDurationMilliseconds", "Media", &v3, &v2);
  }
  return &ImsPrefs::getDTMFDigitDurationMillisecondsKey(void)::value;
}

void sub_1C5406F38(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDTMFInterDigitIntervalMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 100;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[35],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getDTMFInterDigitIntervalMillisecondsKey(void)::value, "DTMFInterDigitIntervalMilliseconds", "Media", &v3, &v2);
  }
  return &ImsPrefs::getDTMFInterDigitIntervalMillisecondsKey(void)::value;
}

void sub_1C5406FDC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDTMFVolumeKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[11],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getDTMFVolumeKey(void)::value, "DTMFVolume", "Media", &v3, &v2);
  }
  return &ImsPrefs::getDTMFVolumeKey(void)::value;
}

void sub_1C540707C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableBandwidthSpecifiersKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableBandwidthSpecifiersKey(void)::value, "EnableBandwidthSpecifiers", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnableBandwidthSpecifiersKey(void)::value;
}

void sub_1C5407118(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableRemoteRTCPDeactivationKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableRemoteRTCPDeactivationKey(void)::value, "EnableRemoteRTCPDeactivation", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnableRemoteRTCPDeactivationKey(void)::value;
}

void sub_1C54071B4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableDTXKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[10],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableDTXKey(void)::value, "EnableDTX", "Media", &v3, &v2);
  }
  return &ImsPrefs::getEnableDTXKey(void)::value;
}

void sub_1C5407258(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableRingbackAudioForTextCallsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableRingbackAudioForTextCallsKey(void)::value, "EnableRingbackAudioForTextCalls", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnableRingbackAudioForTextCallsKey(void)::value;
}

void sub_1C54072F4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableRTCPExtendedReportsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableRTCPExtendedReportsKey(void)::value, "EnableRTCPExtendedReports", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnableRTCPExtendedReportsKey(void)::value;
}

void sub_1C5407390(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableSDPCandidateAttributeKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableSDPCandidateAttributeKey(void)::value, "EnableSDPCandidateAttribute", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnableSDPCandidateAttributeKey(void)::value;
}

void sub_1C540742C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getHideSessionLevelDirectionKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getHideSessionLevelDirectionKey(void)::value, "HideSessionLevelDirection", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getHideSessionLevelDirectionKey(void)::value;
}

void sub_1C54074C8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getHoldHeartbeatIntervalSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getHoldHeartbeatIntervalSecondsKey(void)::value, "HoldHeartbeatIntervalSeconds", "Media", &v3, &v2);
  }
  return &ImsPrefs::getHoldHeartbeatIntervalSecondsKey(void)::value;
}

void sub_1C540756C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getInactivityTimerRTCPSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 10;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getInactivityTimerRTCPSecondsKey(void)::value, "InactivityTimerRTCPSeconds", "Media", &v3, &v2);
  }
  return &ImsPrefs::getInactivityTimerRTCPSecondsKey(void)::value;
}

void sub_1C5407610(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getInactivityTimerRTPSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 10;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getInactivityTimerRTPSecondsKey(void)::value, "InactivityTimerRTPSeconds", "Media", &v3, &v2);
  }
  return &ImsPrefs::getInactivityTimerRTPSecondsKey(void)::value;
}

void sub_1C54076B4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIncludeEVSIOModesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getIncludeEVSIOModesKey(void)::value, "IncludeEVSIOModes", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getIncludeEVSIOModesKey(void)::value;
}

void sub_1C5407750(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIncludeSDPMaxRedKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getIncludeSDPMaxRedKey(void)::value, "IncludeSDPMaxRed", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getIncludeSDPMaxRedKey(void)::value;
}

void sub_1C54077EC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIncludeSDPModeChangeCapabilityKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getIncludeSDPModeChangeCapabilityKey(void)::value, "IncludeSDPModeChangeCapability", "Media", &v3, &v2);
  }
  return &ImsPrefs::getIncludeSDPModeChangeCapabilityKey(void)::value;
}

void sub_1C5407890(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIncludeSDPModeChangeNeighborKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getIncludeSDPModeChangeNeighborKey(void)::value, "IncludeSDPModeChangeNeighbor", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getIncludeSDPModeChangeNeighborKey(void)::value;
}

void sub_1C540792C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIncludeSDPModeChangePeriodKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getIncludeSDPModeChangePeriodKey(void)::value, "IncludeSDPModeChangePeriod", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getIncludeSDPModeChangePeriodKey(void)::value;
}

void sub_1C54079C8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getLocalRTCPReportIntervalSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getLocalRTCPReportIntervalSecondsKey(void)::value, "LocalRTCPReportIntervalSeconds", "Media", &v3, &v2);
  }
  return &ImsPrefs::getLocalRTCPReportIntervalSecondsKey(void)::value;
}

void sub_1C5407A6C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMaxPacketizationTimeKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 240;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getMaxPacketizationTimeKey(void)::value, "MaxPacketizationTime", "Media", &v3, &v2);
  }
  return &ImsPrefs::getMaxPacketizationTimeKey(void)::value;
}

void sub_1C5407B10(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMaxRedundancyKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[14],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getMaxRedundancyKey(void)::value, "MaxRedundancy", "Media", &v3, &v2);
  }
  return &ImsPrefs::getMaxRedundancyKey(void)::value;
}

void sub_1C5407BB0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getModeChangeCapabilityKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getModeChangeCapabilityKey(void)::value, "ModeChangeCapability", "Media", &v3, &v2);
  }
  return &ImsPrefs::getModeChangeCapabilityKey(void)::value;
}

void sub_1C5407C54(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getModeChangeNeighborKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getModeChangeNeighborKey(void)::value, "ModeChangeNeighbor", "Media", &v3, &v2);
  }
  return &ImsPrefs::getModeChangeNeighborKey(void)::value;
}

void sub_1C5407CF4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getModeChangePeriodKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[17],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getModeChangePeriodKey(void)::value, "ModeChangePeriod", "Media", &v3, &v2);
  }
  return &ImsPrefs::getModeChangePeriodKey(void)::value;
}

void sub_1C5407D98(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getModeSetAMRNBKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[6],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getModeSetAMRNBKey(void)::value, "ModeSetAMRNB", "Media", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getModeSetAMRNBKey(void)::value;
}

void sub_1C5407E3C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getModeSetAMRWBKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[6],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getModeSetAMRWBKey(void)::value, "ModeSetAMRWB", "Media", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getModeSetAMRWBKey(void)::value;
}

void sub_1C5407EE0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSDPTemplateKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[6],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getSDPTemplateKey(void)::value, "SDPTemplate", "Media", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getSDPTemplateKey(void)::value;
}

void sub_1C5407F84(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getBindMediaToTransportInterfaceKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getBindMediaToTransportInterfaceKey(void)::value, "BindMediaToTransportInterface", "Media", &v3, &v2);
  }
  return &ImsPrefs::getBindMediaToTransportInterfaceKey(void)::value;
}

void sub_1C5408028(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnforceEarlyMediaDirectionKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnforceEarlyMediaDirectionKey(void)::value, "EnforceEarlyMediaDirection", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnforceEarlyMediaDirectionKey(void)::value;
}

void sub_1C54080C4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnforceEarlyMediaInactiveDirectionKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnforceEarlyMediaInactiveDirectionKey(void)::value, "EnforceEarlyMediaInactiveDirection", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnforceEarlyMediaInactiveDirectionKey(void)::value;
}

void sub_1C5408160(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseRemoteMediaOrderKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[20],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseRemoteMediaOrderKey(void)::value, "UseRemoteMediaOrder", "Media", &v3, &v2);
  }
  return &ImsPrefs::getUseRemoteMediaOrderKey(void)::value;
}

void sub_1C5408204(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseRTPDetectionAutoStartKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseRTPDetectionAutoStartKey(void)::value, "UseRTPDetectionAutoStart", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseRTPDetectionAutoStartKey(void)::value;
}

void sub_1C54082A0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getLinkMonitorPreferenceKey(ImsPrefs *this)
{
  void v8[3] = *MEMORY[0x1E4F143B8];
  {
    char v4 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v6, (char *)&str_2_6);
    std::string::basic_string[abi:ne180100]<0>(v7, "RTP");
    std::string::basic_string[abi:ne180100]<0>(v8, "RTCP");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v3, &v6, 3uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[22],char const(&)[6],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getLinkMonitorPreferenceKey(void)::value, "LinkMonitorPreference", "Media", &v4, &v3);
    BOOL v5 = (void **)&v3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    for (uint64_t i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v8[i + 2]) < 0) {
        operator delete((void *)v8[i]);
      }
    }
  }
  return &ImsPrefs::getLinkMonitorPreferenceKey(void)::value;
}

void sub_1C54083F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, char a15)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  uint64_t v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 71) < 0) {
      operator delete(*(void **)(&a15 + v16 + 48));
    }
    v16 -= 24;
    if (v16 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getEnableIncomingDTMFKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableIncomingDTMFKey(void)::value, "EnableIncomingDTMF", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnableIncomingDTMFKey(void)::value;
}

void sub_1C5408500(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getOriginUsernameKey(ImsPrefs *this)
{
  {
    unsigned __int8 v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getOriginUsernameKey(void)::value, "OriginUsername", "Media", &v3, (char *)&str_2_6, &v2);
  }
  return &ImsPrefs::getOriginUsernameKey(void)::value;
}

void sub_1C54085AC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPacketAlignmentAMRNBKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,char const(&)[4],BOOL>((uint64_t)&ImsPrefs::getPacketAlignmentAMRNBKey(void)::value, "PacketAlignmentAMRNB", "Media", (unsigned __int8 *)&v2 + 1, "all", (char *)&v2);
  }
  return &ImsPrefs::getPacketAlignmentAMRNBKey(void)::value;
}

void sub_1C5408650(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPacketAlignmentAMRWBKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,char const(&)[4],BOOL>((uint64_t)&ImsPrefs::getPacketAlignmentAMRWBKey(void)::value, "PacketAlignmentAMRWB", "Media", (unsigned __int8 *)&v2 + 1, "all", (char *)&v2);
  }
  return &ImsPrefs::getPacketAlignmentAMRWBKey(void)::value;
}

void sub_1C54086F4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPacketizationTimeKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 20;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[18],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPacketizationTimeKey(void)::value, "PacketizationTime", "Media", &v3, &v2);
  }
  return &ImsPrefs::getPacketizationTimeKey(void)::value;
}

void sub_1C5408798(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPayloadTypeBWEfficientAMRNBKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 102;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeBWEfficientAMRNBKey(void)::value, "PayloadTypeBWEfficientAMRNB", "Media", &v3, &v2);
  }
  return &ImsPrefs::getPayloadTypeBWEfficientAMRNBKey(void)::value;
}

void sub_1C540883C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPayloadTypeBWEfficientAMRWBKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 104;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeBWEfficientAMRWBKey(void)::value, "PayloadTypeBWEfficientAMRWB", "Media", &v3, &v2);
  }
  return &ImsPrefs::getPayloadTypeBWEfficientAMRWBKey(void)::value;
}

void sub_1C54088E0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPayloadTypeDTMF16KKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 105;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeDTMF16KKey(void)::value, "PayloadTypeDTMF16K", "Media", &v3, &v2);
  }
  return &ImsPrefs::getPayloadTypeDTMF16KKey(void)::value;
}

void sub_1C5408984(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPayloadTypeDTMF8KKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 100;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[18],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeDTMF8KKey(void)::value, "PayloadTypeDTMF8K", "Media", &v3, &v2);
  }
  return &ImsPrefs::getPayloadTypeDTMF8KKey(void)::value;
}

void sub_1C5408A28(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPayloadTypeOctetAlignAMRNBKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 108;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeOctetAlignAMRNBKey(void)::value, "PayloadTypeOctetAlignAMRNB", "Media", &v3, &v2);
  }
  return &ImsPrefs::getPayloadTypeOctetAlignAMRNBKey(void)::value;
}

void sub_1C5408ACC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPayloadTypeOctetAlignAMRWBKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 110;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeOctetAlignAMRWBKey(void)::value, "PayloadTypeOctetAlignAMRWB", "Media", &v3, &v2);
  }
  return &ImsPrefs::getPayloadTypeOctetAlignAMRWBKey(void)::value;
}

void sub_1C5408B70(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPayloadTypeTTYKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 111;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeTTYKey(void)::value, "PayloadTypeTTY", "Media", &v3, &v2);
  }
  return &ImsPrefs::getPayloadTypeTTYKey(void)::value;
}

void sub_1C5408C14(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPayloadTypeTTYRedundancyKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 112;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeTTYRedundancyKey(void)::value, "PayloadTypeTTYRedundancy", "Media", &v3, &v2);
  }
  return &ImsPrefs::getPayloadTypeTTYRedundancyKey(void)::value;
}

void sub_1C5408CB8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPreferredAMRNBModeKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 7;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPreferredAMRNBModeKey(void)::value, "PreferredAMRNBMode", "Media", &v3, &v2);
  }
  return &ImsPrefs::getPreferredAMRNBModeKey(void)::value;
}

void sub_1C5408D5C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPreferredAMRWBModeKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPreferredAMRWBModeKey(void)::value, "PreferredAMRWBMode", "Media", &v3, &v2);
  }
  return &ImsPrefs::getPreferredAMRWBModeKey(void)::value;
}

void sub_1C5408E00(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRTCPXRBasebandSupportKey(ImsPrefs *this)
{
  {
    unsigned __int8 v4 = 0;
    v3[0] = 0;
    v3[1] = 0;
    int v2 = v3;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[22],char const(&)[6],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getRTCPXRBasebandSupportKey(void)::value, "RTCPXRBasebandSupport", "Media", &v4, &v2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v2, v3[0]);
  }
  return &ImsPrefs::getRTCPXRBasebandSupportKey(void)::value;
}

void sub_1C5408EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *ImsPrefs::getRTTBandwidthSpecifierASValueKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 4;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getRTTBandwidthSpecifierASValueKey(void)::value, "RTTBandwidthSpecifierASValue", "Media", &v3, &v2);
  }
  return &ImsPrefs::getRTTBandwidthSpecifierASValueKey(void)::value;
}

void sub_1C5408F68(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRTTBandwidthSpecifierRTCPPercentageKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 10;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getRTTBandwidthSpecifierRTCPPercentageKey(void)::value, "RTTBandwidthSpecifierRTCPPercentage", "Media", &v3, &v2);
  }
  return &ImsPrefs::getRTTBandwidthSpecifierRTCPPercentageKey(void)::value;
}

void sub_1C540900C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRTTUpgradeResponseTimeoutMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 10000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getRTTUpgradeResponseTimeoutMillisecondsKey(void)::value, "RTTUpgradeResponseTimeoutMilliseconds", "Media", &v3, &v2);
  }
  return &ImsPrefs::getRTTUpgradeResponseTimeoutMillisecondsKey(void)::value;
}

void sub_1C54090B0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getStopLocalRingbackToneOn181Key(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getStopLocalRingbackToneOn181Key(void)::value, "StopLocalRingbackToneOn181", "Media", &v3, &v2);
  }
  return &ImsPrefs::getStopLocalRingbackToneOn181Key(void)::value;
}

void sub_1C5409154(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRTCPIntervalSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getRTCPIntervalSecondsKey(void)::value, "RTCPIntervalSeconds", "Media", &v3, &v2);
  }
  return &ImsPrefs::getRTCPIntervalSecondsKey(void)::value;
}

void sub_1C54091F4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRTTNegotiationTimerSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 3;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getRTTNegotiationTimerSecondsKey(void)::value, "RTTNegotiationTimerSeconds", "Media", &v3, &v2);
  }
  return &ImsPrefs::getRTTNegotiationTimerSecondsKey(void)::value;
}

void sub_1C5409298(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSRTPCryptoSuiteKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[6],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getSRTPCryptoSuiteKey(void)::value, "SRTPCryptoSuite", "Media", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getSRTPCryptoSuiteKey(void)::value;
}

void sub_1C540933C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSRTPEndToAccessEdgeProtectionKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSRTPEndToAccessEdgeProtectionKey(void)::value, "SRTPEndToAccessEdgeProtection", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSRTPEndToAccessEdgeProtectionKey(void)::value;
}

void sub_1C54093D8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSRTPUnauthenticatedSRTPKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSRTPUnauthenticatedSRTPKey(void)::value, "SRTPUnauthenticatedSRTP", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSRTPUnauthenticatedSRTPKey(void)::value;
}

void sub_1C5409474(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSRTPUnencryptedSRTCPKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSRTPUnencryptedSRTCPKey(void)::value, "SRTPUnencryptedSRTCP", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSRTPUnencryptedSRTCPKey(void)::value;
}

void sub_1C5409510(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSRTPUnencryptedSRTPKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[20],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSRTPUnencryptedSRTPKey(void)::value, "SRTPUnencryptedSRTP", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSRTPUnencryptedSRTPKey(void)::value;
}

void sub_1C54095AC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSampleRateTTYKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 1000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[14],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getSampleRateTTYKey(void)::value, "SampleRateTTY", "Media", &v3, &v2);
  }
  return &ImsPrefs::getSampleRateTTYKey(void)::value;
}

void sub_1C5409650(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAudioCodecsKey(ImsPrefs *this)
{
  {
    unsigned __int8 v4 = 0;
    v3[0] = 0;
    v3[1] = 0;
    int v2 = v3;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[12],char const(&)[6],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getAudioCodecsKey(void)::value, "AudioCodecs", "Media", &v4, &v2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v2, v3[0]);
  }
  return &ImsPrefs::getAudioCodecsKey(void)::value;
}

void sub_1C5409708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *ImsPrefs::getAudioCodecListKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getAudioCodecListKey(void)::value, "AudioCodecList", "Media", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getAudioCodecListKey(void)::value;
}

void sub_1C54097B8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEVSHardBwLimitKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,char const(&)[6],BOOL>((uint64_t)&ImsPrefs::getEVSHardBwLimitKey(void)::value, "EVSHardBwLimit", "Media", (unsigned __int8 *)&v2 + 1, "nb-wb", (char *)&v2);
  }
  return &ImsPrefs::getEVSHardBwLimitKey(void)::value;
}

void sub_1C540985C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEVSHardBrLimitKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,char const(&)[9],BOOL>((uint64_t)&ImsPrefs::getEVSHardBrLimitKey(void)::value, "EVSHardBrLimit", "Media", (unsigned __int8 *)&v2 + 1, "5.9-24.4", (char *)&v2);
  }
  return &ImsPrefs::getEVSHardBrLimitKey(void)::value;
}

void sub_1C5409900(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRestrictSessionEVSBandwidthKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getRestrictSessionEVSBandwidthKey(void)::value, "RestrictSessionEVSBandwidth", "Media", &v3, &v2);
  }
  return &ImsPrefs::getRestrictSessionEVSBandwidthKey(void)::value;
}

void sub_1C54099A4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getOrderEVSCodecsByCodecIDKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getOrderEVSCodecsByCodecIDKey(void)::value, "OrderEVSCodecsByCodecID", "Media", &v3, &v2);
  }
  return &ImsPrefs::getOrderEVSCodecsByCodecIDKey(void)::value;
}

void sub_1C5409A48(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSupportAMRNBKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[13],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSupportAMRNBKey(void)::value, "SupportAMRNB", "Media", &v3, &v2);
  }
  return &ImsPrefs::getSupportAMRNBKey(void)::value;
}

void sub_1C5409AEC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSupportAMRWBKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[13],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSupportAMRWBKey(void)::value, "SupportAMRWB", "Media", &v3, &v2);
  }
  return &ImsPrefs::getSupportAMRWBKey(void)::value;
}

void sub_1C5409B90(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSupportPCMAKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[12],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSupportPCMAKey(void)::value, "SupportPCMA", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSupportPCMAKey(void)::value;
}

void sub_1C5409C2C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSupportPCMUKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[12],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSupportPCMUKey(void)::value, "SupportPCMU", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSupportPCMUKey(void)::value;
}

void sub_1C5409CC8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseEphemeralRTPPortsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseEphemeralRTPPortsKey(void)::value, "UseEphemeralRTPPorts", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseEphemeralRTPPortsKey(void)::value;
}

void sub_1C5409D64(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseRestrictiveDirectionWhenCreatingAnswerKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseRestrictiveDirectionWhenCreatingAnswerKey(void)::value, "UseRestrictiveDirectionWhenCreatingAnswer", "Media", &v3, &v2);
  }
  return &ImsPrefs::getUseRestrictiveDirectionWhenCreatingAnswerKey(void)::value;
}

void sub_1C5409E08(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseSDPTemplateForAllInvitesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseSDPTemplateForAllInvitesKey(void)::value, "UseSDPTemplateForAllInvites", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseSDPTemplateForAllInvitesKey(void)::value;
}

void sub_1C5409EA4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseSDPTemplateForUpdatesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseSDPTemplateForUpdatesKey(void)::value, "UseSDPTemplateForUpdates", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseSDPTemplateForUpdatesKey(void)::value;
}

void sub_1C5409F40(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSuppressOctetAlignAttributeForBECodecsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSuppressOctetAlignAttributeForBECodecsKey(void)::value, "SuppressOctetAlignAttributeForBECodecs", "Media", &v3, &v2);
  }
  return &ImsPrefs::getSuppressOctetAlignAttributeForBECodecsKey(void)::value;
}

void sub_1C5409FE4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSelectForkWithActiveEarlyMediaKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSelectForkWithActiveEarlyMediaKey(void)::value, "SelectForkWithActiveEarlyMedia", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSelectForkWithActiveEarlyMediaKey(void)::value;
}

void sub_1C540A080(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSelectLatestForkWithActiveEarlyMediaKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSelectLatestForkWithActiveEarlyMediaKey(void)::value, "SelectLatestForkWithActiveEarlyMedia", "Media", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSelectLatestForkWithActiveEarlyMediaKey(void)::value;
}

void sub_1C540A11C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableAPOnlyModeKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[16],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableAPOnlyModeKey(void)::value, "EnableAPOnlyMode", "Media/VoiceOnAP", &v3, &v2);
  }
  return &ImsPrefs::getEnableAPOnlyModeKey(void)::value;
}

void sub_1C540A1C0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableANBRKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[11],char const(&)[16],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableANBRKey(void)::value, "EnableANBR", "Media/VoiceOnAP", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnableANBRKey(void)::value;
}

void sub_1C540A25C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableRateAdaptationKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[16],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableRateAdaptationKey(void)::value, "EnableRateAdaptation", "Media/VoiceOnAP", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnableRateAdaptationKey(void)::value;
}

void sub_1C540A2F8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapAuidKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[5],char const(&)[5],BOOL,char const(&)[22],BOOL>((uint64_t)&ImsPrefs::getXcapAuidKey(void)::value, "Auid", "XCAP", (unsigned __int8 *)&v2 + 1, "simservs.ngn.etsi.org", (char *)&v2);
  }
  return &ImsPrefs::getXcapAuidKey(void)::value;
}

void sub_1C540A39C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapBsfHostKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[8],char const(&)[5],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getXcapBsfHostKey(void)::value, "BsfHost", "XCAP", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getXcapBsfHostKey(void)::value;
}

void sub_1C540A440(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapBsfPortKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[8],char const(&)[5],BOOL,int>((uint64_t)&ImsPrefs::getXcapBsfPortKey(void)::value, "BsfPort", "XCAP", &v3, &v2);
  }
  return &ImsPrefs::getXcapBsfPortKey(void)::value;
}

void sub_1C540A4E0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapBsfUseSecureTransportKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapBsfUseSecureTransportKey(void)::value, "BsfUseSecureTransport", "XCAP", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getXcapBsfUseSecureTransportKey(void)::value;
}

void sub_1C540A57C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapContentTypeKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[5],BOOL,char const(&)[34],BOOL>((uint64_t)&ImsPrefs::getXcapContentTypeKey(void)::value, "ContentType", "XCAP", (unsigned __int8 *)&v2 + 1, "application/vnd.etsi.simservs+xml", (char *)&v2);
  }
  return &ImsPrefs::getXcapContentTypeKey(void)::value;
}

void sub_1C540A620(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapDisableOnNetworkErrorKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapDisableOnNetworkErrorKey(void)::value, "DisableOnNetworkError", "XCAP", &v3, &v2);
  }
  return &ImsPrefs::getXcapDisableOnNetworkErrorKey(void)::value;
}

void sub_1C540A6C4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapFetchAllCDIVRulesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapFetchAllCDIVRulesKey(void)::value, "FetchAllCDIVRules", "XCAP", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getXcapFetchAllCDIVRulesKey(void)::value;
}

void sub_1C540A760(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapForbiddenHttpErrorCodesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[5],BOOL,char const(&)[32],BOOL>((uint64_t)&ImsPrefs::getXcapForbiddenHttpErrorCodesKey(void)::value, "ForbiddenHttpErrorCodes", "XCAP", (unsigned __int8 *)&v2 + 1, "400,403,404,500,501,502,503,504", (char *)&v2);
  }
  return &ImsPrefs::getXcapForbiddenHttpErrorCodesKey(void)::value;
}

void sub_1C540A804(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapImeiHeaderNameInBsfRequestKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[27],char const(&)[5],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getXcapImeiHeaderNameInBsfRequestKey(void)::value, "ImeiHeaderNameInBsfRequest", "XCAP", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getXcapImeiHeaderNameInBsfRequestKey(void)::value;
}

void sub_1C540A8A8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapImpuRankKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[9],char const(&)[5],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getXcapImpuRankKey(void)::value, "ImpuRank", "XCAP", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getXcapImpuRankKey(void)::value;
}

void sub_1C540A94C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapNafHostKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[8],char const(&)[5],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getXcapNafHostKey(void)::value, "NafHost", "XCAP", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getXcapNafHostKey(void)::value;
}

void sub_1C540A9F0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapNafPortKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[8],char const(&)[5],BOOL,int>((uint64_t)&ImsPrefs::getXcapNafPortKey(void)::value, "NafPort", "XCAP", &v3, &v2);
  }
  return &ImsPrefs::getXcapNafPortKey(void)::value;
}

void sub_1C540AA90(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapNafUseSecureTransportKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapNafUseSecureTransportKey(void)::value, "NafUseSecureTransport", "XCAP", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getXcapNafUseSecureTransportKey(void)::value;
}

void sub_1C540AB2C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapPreferredGbaModeKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[17],char const(&)[5],BOOL,char const(&)[7],BOOL>((uint64_t)&ImsPrefs::getXcapPreferredGbaModeKey(void)::value, "PreferredGbaMode", "XCAP", (unsigned __int8 *)&v2 + 1, "GBA_ME", (char *)&v2);
  }
  return &ImsPrefs::getXcapPreferredGbaModeKey(void)::value;
}

void sub_1C540ABD0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapRequestTimeoutValueKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 30;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[5],BOOL,int>((uint64_t)&ImsPrefs::getXcapRequestTimeoutValueKey(void)::value, "RequestTimeoutValue", "XCAP", &v3, &v2);
  }
  return &ImsPrefs::getXcapRequestTimeoutValueKey(void)::value;
}

void sub_1C540AC74(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapUnsolicitedRequestDelayKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 10;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[24],char const(&)[5],BOOL,int>((uint64_t)&ImsPrefs::getXcapUnsolicitedRequestDelayKey(void)::value, "UnsolicitedRequestDelay", "XCAP", &v3, &v2);
  }
  return &ImsPrefs::getXcapUnsolicitedRequestDelayKey(void)::value;
}

void sub_1C540AD18(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapReuseAuthCredentialsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapReuseAuthCredentialsKey(void)::value, "ReuseAuthCredentials", "XCAP", &v3, &v2);
  }
  return &ImsPrefs::getXcapReuseAuthCredentialsKey(void)::value;
}

void sub_1C540ADBC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapServeMultipleCDIVRulesPerRequestKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapServeMultipleCDIVRulesPerRequestKey(void)::value, "ServeMultipleCDIVRulesPerRequest", "XCAP", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getXcapServeMultipleCDIVRulesPerRequestKey(void)::value;
}

void sub_1C540AE58(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapCFErasureSupportKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapCFErasureSupportKey(void)::value, "SupportsCFErasure", "XCAP", &v3, &v2);
  }
  return &ImsPrefs::getXcapCFErasureSupportKey(void)::value;
}

void sub_1C540AEFC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapCFMediaTagSupportKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapCFMediaTagSupportKey(void)::value, "SupportCFMediaTag", "XCAP", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getXcapCFMediaTagSupportKey(void)::value;
}

void sub_1C540AF98(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapCBSupportKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[11],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapCBSupportKey(void)::value, "SupportsCB", "XCAP", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getXcapCBSupportKey(void)::value;
}

void sub_1C540B034(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapCBMediaTagSupportKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapCBMediaTagSupportKey(void)::value, "SupportCBMediaTag", "XCAP", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getXcapCBMediaTagSupportKey(void)::value;
}

void sub_1C540B0D0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapUtInterfaceTypeKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[5],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getXcapUtInterfaceTypeKey(void)::value, "UtInterfaceType", "XCAP", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getXcapUtInterfaceTypeKey(void)::value;
}

void sub_1C540B174(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapUseSecureTransportKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapUseSecureTransportKey(void)::value, "useSecureTransport", "XCAP", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getXcapUseSecureTransportKey(void)::value;
}

void sub_1C540B210(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getXcapHttpVersionKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[5],BOOL,char const(&)[4],BOOL>((uint64_t)&ImsPrefs::getXcapHttpVersionKey(void)::value, "XcapHttpVersion", "XCAP", (unsigned __int8 *)&v2 + 1, "1.1", (char *)&v2);
  }
  return &ImsPrefs::getXcapHttpVersionKey(void)::value;
}

void sub_1C540B2B4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAllowRTPStackHandoverKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowRTPStackHandoverKey(void)::value, "AllowRTPStackHandover", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getAllowRTPStackHandoverKey(void)::value;
}

void sub_1C540B358(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMediaSessionHandoverTimeoutMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 10000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[40],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getMediaSessionHandoverTimeoutMillisecondsKey(void)::value, "MediaSessionHandoverTimeoutMilliseconds", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getMediaSessionHandoverTimeoutMillisecondsKey(void)::value;
}

void sub_1C540B3FC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAutoRingTimerMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 50;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getAutoRingTimerMillisecondsKey(void)::value, "AutoRingTimerMilliseconds", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getAutoRingTimerMillisecondsKey(void)::value;
}

void sub_1C540B4A0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getClearThrottlingOnSocketErrorsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[30],char const(&)[9],BOOL,char const(&)[9],BOOL>((uint64_t)&ImsPrefs::getClearThrottlingOnSocketErrorsKey(void)::value, "ClearThrottlingOnSocketErrors", "Internal", (unsigned __int8 *)&v2 + 1, "49,60,65", (char *)&v2);
  }
  return &ImsPrefs::getClearThrottlingOnSocketErrorsKey(void)::value;
}

void sub_1C540B544(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getConferenceParticipantJoinTimeoutMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[45],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getConferenceParticipantJoinTimeoutMillisecondsKey(void)::value, "ConferenceParticipantJoinTimeoutMilliseconds", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getConferenceParticipantJoinTimeoutMillisecondsKey(void)::value;
}

void sub_1C540B5E8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getConferenceWaitForHoldTimeoutMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 15000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[41],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getConferenceWaitForHoldTimeoutMillisecondsKey(void)::value, "ConferenceWaitForHoldTimeoutMilliseconds", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getConferenceWaitForHoldTimeoutMillisecondsKey(void)::value;
}

void sub_1C540B68C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getCSFBDeregisterTimeoutSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 6;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getCSFBDeregisterTimeoutSecondsKey(void)::value, "CSFBDeregisterTimeoutSeconds", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getCSFBDeregisterTimeoutSecondsKey(void)::value;
}

void sub_1C540B730(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEndConferenceOn405Key(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getEndConferenceOn405Key(void)::value, "EndConferenceOn405", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getEndConferenceOn405Key(void)::value;
}

void sub_1C540B7D4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDeviceIMEIKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[11],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDeviceIMEIKey(void)::value, "DeviceIMEI", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getDeviceIMEIKey(void)::value;
}

void sub_1C540B878(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDisableDeviceSVNKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getDisableDeviceSVNKey(void)::value, "DisableDeviceSVN", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getDisableDeviceSVNKey(void)::value;
}

void sub_1C540B91C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDisplayNameKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDisplayNameKey(void)::value, "DisplayName", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getDisplayNameKey(void)::value;
}

void sub_1C540B9C0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDigestPasswordKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDigestPasswordKey(void)::value, "DigestPassword", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getDigestPasswordKey(void)::value;
}

void sub_1C540BA64(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDigestUsernameKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDigestUsernameKey(void)::value, "DigestUsername", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getDigestUsernameKey(void)::value;
}

void sub_1C540BB08(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDomainKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[7],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDomainKey(void)::value, "Domain", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getDomainKey(void)::value;
}

void sub_1C540BBAC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDropIncomingKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDropIncomingKey(void)::value, "DropIncoming", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getDropIncomingKey(void)::value;
}

void sub_1C540BC50(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDropOutgoingKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDropOutgoingKey(void)::value, "DropOutgoing", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getDropOutgoingKey(void)::value;
}

void sub_1C540BCF4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getFatalRegistrationErrorCodesKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[28],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getFatalRegistrationErrorCodesKey(void)::value, "FatalRegistrationErrorCodes", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getFatalRegistrationErrorCodesKey(void)::value;
}

void sub_1C540BD98(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getEnableBasebandAssertOnInitializationFailureKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[44],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableBasebandAssertOnInitializationFailureKey(void)::value, "EnableBasebandAssertOnInitializationFailure", "Internal", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getEnableBasebandAssertOnInitializationFailureKey(void)::value;
}

void sub_1C540BE34(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getHoldResumeTimerMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 10000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getHoldResumeTimerMillisecondsKey(void)::value, "HoldResumeTimerMilliseconds", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getHoldResumeTimerMillisecondsKey(void)::value;
}

void sub_1C540BED8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getHonorForbiddenRetryAfterKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    char v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getHonorForbiddenRetryAfterKey(void)::value, "HonorForbiddenRetryAfter", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getHonorForbiddenRetryAfterKey(void)::value;
}

void sub_1C540BF7C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getIgnoreSessionTimerExpirationKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreSessionTimerExpirationKey(void)::value, "IgnoreSessionTimerExpiration", "Internal", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getIgnoreSessionTimerExpirationKey(void)::value;
}

void sub_1C540C018(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getInternalDisableSipInstanceKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getInternalDisableSipInstanceKey(void)::value, "InternalDisableSipInstance", "Internal", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getInternalDisableSipInstanceKey(void)::value;
}

void sub_1C540C0B4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getImpiKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[5],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getImpiKey(void)::value, "Impi", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getImpiKey(void)::value;
}

void sub_1C540C158(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getImpuKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[5],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getImpuKey(void)::value, "Impu", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getImpuKey(void)::value;
}

void sub_1C540C1FC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getLoggingParamsKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[14],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getLoggingParamsKey(void)::value, "LoggingParams", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getLoggingParamsKey(void)::value;
}

void sub_1C540C2A0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMaxCallCountKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 3;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[13],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getMaxCallCountKey(void)::value, "MaxCallCount", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getMaxCallCountKey(void)::value;
}

void sub_1C540C344(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMaxProxyResolveAttemptsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[24],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getMaxProxyResolveAttemptsKey(void)::value, "MaxProxyResolveAttempts", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getMaxProxyResolveAttemptsKey(void)::value;
}

void sub_1C540C3E8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMediaAddressTypeKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[17],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getMediaAddressTypeKey(void)::value, "MediaAddressType", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getMediaAddressTypeKey(void)::value;
}

void sub_1C540C48C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMediaInterfaceKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getMediaInterfaceKey(void)::value, "MediaInterface", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getMediaInterfaceKey(void)::value;
}

void sub_1C540C530(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMediaInitTimeoutKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getMediaInitTimeoutKey(void)::value, "MediaInitTimeoutMilliseconds", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getMediaInitTimeoutKey(void)::value;
}

void sub_1C540C5D4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getMultiCallHoldResumeTimerMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[37],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getMultiCallHoldResumeTimerMillisecondsKey(void)::value, "MultiCallHoldResumeTimerMilliseconds", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getMultiCallHoldResumeTimerMillisecondsKey(void)::value;
}

void sub_1C540C678(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getNewSubscriptionOnReRegistrationKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getNewSubscriptionOnReRegistrationKey(void)::value, "NewSubscriptionOnReRegistration", "Internal", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getNewSubscriptionOnReRegistrationKey(void)::value;
}

void sub_1C540C714(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getNetworkInterfaceKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[17],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getNetworkInterfaceKey(void)::value, "NetworkInterface", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getNetworkInterfaceKey(void)::value;
}

void sub_1C540C7B8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getOutgoingUriKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getOutgoingUriKey(void)::value, "OutgoingUri", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getOutgoingUriKey(void)::value;
}

void sub_1C540C85C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPcscfOverrideKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[14],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getPcscfOverrideKey(void)::value, "PcscfOverride", "Internal", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getPcscfOverrideKey(void)::value;
}

void sub_1C540C900(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRejectSMSWithFakeTimeoutKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getRejectSMSWithFakeTimeoutKey(void)::value, "RejectSMSWithFakeTimeout", "Internal", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getRejectSMSWithFakeTimeoutKey(void)::value;
}

void sub_1C540C99C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getReRegisterOnMobikeHandoverKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getReRegisterOnMobikeHandoverKey(void)::value, "ReRegisterOnMobikeHandover", "Internal", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getReRegisterOnMobikeHandoverKey(void)::value;
}

void sub_1C540CA38(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getResponseCodesAllowedForSilentRedialKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[36],char const(&)[9],BOOL,char const(&)[2],BOOL>((uint64_t)&ImsPrefs::getResponseCodesAllowedForSilentRedialKey(void)::value, "ResponseCodesAllowedForSilentRedial", "Internal", (unsigned __int8 *)&v2 + 1, "*", (char *)&v2);
  }
  return &ImsPrefs::getResponseCodesAllowedForSilentRedialKey(void)::value;
}

void sub_1C540CADC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegistrationExpirationCushionSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 600;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[37],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationExpirationCushionSecondsKey(void)::value, "RegistrationExpirationCushionSeconds", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getRegistrationExpirationCushionSecondsKey(void)::value;
}

void sub_1C540CB80(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegistrationRefreshCushionCapSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 900;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[37],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationRefreshCushionCapSecondsKey(void)::value, "RegistrationRefreshCushionCapSeconds", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getRegistrationRefreshCushionCapSecondsKey(void)::value;
}

void sub_1C540CC24(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getRegistrationThrottlingCushionCapSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 30;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[40],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationThrottlingCushionCapSecondsKey(void)::value, "RegistrationThrottlingCushionCapSeconds", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getRegistrationThrottlingCushionCapSecondsKey(void)::value;
}

void sub_1C540CCC8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSessionExpiresCushionKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getSessionExpiresCushionKey(void)::value, "SessionExpiresCushion", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getSessionExpiresCushionKey(void)::value;
}

void sub_1C540CD6C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getShutdownWaitTimeSecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[24],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getShutdownWaitTimeSecondsKey(void)::value, "ShutdownWaitTimeSeconds", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getShutdownWaitTimeSecondsKey(void)::value;
}

void sub_1C540CE10(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTTYReinviteTimeoutMillisecondsKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 2000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getTTYReinviteTimeoutMillisecondsKey(void)::value, "TTYReinviteTimeoutMilliseconds", "Internal", &v3, &v2);
  }
  return &ImsPrefs::getTTYReinviteTimeoutMillisecondsKey(void)::value;
}

void sub_1C540CEB4(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseAPMediaStackKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseAPMediaStackKey(void)::value, "UseAPMediaStack", "Internal", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseAPMediaStackKey(void)::value;
}

void sub_1C540CF50(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getResetCallIdOn401WithoutSecurityServerKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[38],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getResetCallIdOn401WithoutSecurityServerKey(void)::value, "ResetCallIdOn401WithoutSecurityServer", "Cert", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getResetCallIdOn401WithoutSecurityServerKey(void)::value;
}

void sub_1C540CFEC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseUacAsRefresherKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseUacAsRefresherKey(void)::value, "UseUacAsRefresher", "Cert", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseUacAsRefresherKey(void)::value;
}

void sub_1C540D088(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getAddPreconditionToSupportedHeaderIfEnabledKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddPreconditionToSupportedHeaderIfEnabledKey(void)::value, "AddPreconditionToSupportedHeaderIfEnabled", "Cert", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getAddPreconditionToSupportedHeaderIfEnabledKey(void)::value;
}

void sub_1C540D124(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getUseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[52],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey(void)::value, "UseInviteToRefreshSessionIfRemoteDoesNotAllowUpdate", "Cert", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getUseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey(void)::value;
}

void sub_1C540D1C0(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getDoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[54],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getDoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey(void)::value, "DoNotRefreshSessionIfNoSessionExpiresHeaderFromRemote", "Cert", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getDoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey(void)::value;
}

void sub_1C540D25C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSendPreconditionsInPrackKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendPreconditionsInPrackKey(void)::value, "SendPreconditionsInPrack", "Cert", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getSendPreconditionsInPrackKey(void)::value;
}

void sub_1C540D2F8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getPcscfKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[6],char const(&)[12],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getPcscfKey(void)::value, "pcscf", "IPTelephony", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getPcscfKey(void)::value;
}

void sub_1C540D39C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getBlockSilentRedialOverCSKey(ImsPrefs *this)
{
  {
    char v3 = 1;
    char v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getBlockSilentRedialOverCSKey(void)::value, "BlockSilentRedialOverCS", "Voice", &v3, &v2);
  }
  return &ImsPrefs::getBlockSilentRedialOverCSKey(void)::value;
}

void sub_1C540D440(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getTTYOverImsSupportedKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getTTYOverImsSupportedKey(void)::value, "ttyIMSSupported", "Voice", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getTTYOverImsSupportedKey(void)::value;
}

void sub_1C540D4DC(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getCallTransferDialNumberKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[23],char const(&)[13],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getCallTransferDialNumberKey(void)::value, "CallTransferDialNumber", "CallTransfer", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getCallTransferDialNumberKey(void)::value;
}

void sub_1C540D580(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getCallTransferRequestUriKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[23],char const(&)[13],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getCallTransferRequestUriKey(void)::value, "CallTransferRequestUri", "CallTransfer", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getCallTransferRequestUriKey(void)::value;
}

void sub_1C540D624(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getCallTransferToUriKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[18],char const(&)[13],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getCallTransferToUriKey(void)::value, "CallTransferToUri", "CallTransfer", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getCallTransferToUriKey(void)::value;
}

void sub_1C540D6C8(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getSwitchoverSizeKey(ImsPrefs *this)
{
  {
    char v3 = 0;
    int v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[15],char const(&)[7],BOOL,int>((uint64_t)&ImsPrefs::getSwitchoverSizeKey(void)::value, "SwitchoverSize", "Lazuli", &v3, &v2);
  }
  return &ImsPrefs::getSwitchoverSizeKey(void)::value;
}

void sub_1C540D768(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getLazuliConferenceFactoryKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[7],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getLazuliConferenceFactoryKey(void)::value, "LazuliConferenceFactory", "Lazuli", (unsigned __int8 *)&v2 + 1, (char *)&str_2_6, (char *)&v2);
  }
  return &ImsPrefs::getLazuliConferenceFactoryKey(void)::value;
}

void sub_1C540D80C(_Unwind_Exception *a1)
{
}

void *ImsPrefs::getCarrierBasedKey(ImsPrefs *this)
{
  {
    __int16 v2 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[13],char const(&)[7],BOOL,BOOL>((uint64_t)&ImsPrefs::getCarrierBasedKey(void)::value, "CarrierBased", "Lazuli", (char *)&v2 + 1, &v2);
  }
  return &ImsPrefs::getCarrierBasedKey(void)::value;
}

void sub_1C540D8A8(_Unwind_Exception *a1)
{
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540D980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsPrefsKeyString::ImsPrefsKeyString(uint64_t a1, const std::string *a2, const std::string *a3, char a4, const std::string *a5, char a6)
{
  uint64_t v9 = ImsPrefsKey::ImsPrefsKey(a1, a2, a3, a4);
  *(void *)uint64_t v9 = &unk_1F20E6610;
  *(void *)(v9 + 64) = 0;
  *(void *)(v9 + 72) = 0;
  *(void *)(v9 + 80) = 0;
  *(unsigned char *)(v9 + 88) = 0;
  std::string::operator=((std::string *)(v9 + 64), a5);
  *(unsigned char *)(a1 + 88) = a6;
  return a1;
}

void sub_1C540DA40(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  ImsPrefsKey::~ImsPrefsKey((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t ImsPrefsKey::ImsPrefsKey(uint64_t a1, const std::string *a2, const std::string *a3, char a4)
{
  *(void *)a1 = &unk_1F20E6650;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v7 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::string::operator=((std::string *)(a1 + 8), a2);
  std::string::operator=(v7, a3);
  *(unsigned char *)(a1 + 56) = a4;
  return a1;
}

void sub_1C540DAEC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void ImsPrefsKey::~ImsPrefsKey(void **this)
{
  *this = &unk_1F20E6650;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[51],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540DC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, long long *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  char v9 = *a4;
  long long v11 = *a5;
  uint64_t v12 = *((void *)a5 + 2);
  *((void *)a5 + (*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  uint64_t v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540DD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t ImsPrefsKeyEnum::ImsPrefsKeyEnum(uint64_t a1, const std::string *a2, const std::string *a3, char a4, std::string **a5)
{
  uint64_t v7 = (void *)ImsPrefsKey::ImsPrefsKey(a1, a2, a3, a4);
  void *v7 = &unk_1F20E6690;
  _OWORD v7[9] = 0;
  uint64_t v8 = (uint64_t)(v7 + 9);
  v7[8] = v7 + 9;
  char v9 = (uint64_t **)(v7 + 8);
  v7[11] = 0;
  int v10 = (std::string *)(v7 + 11);
  v7[10] = 0;
  v7[12] = 0;
  v7[13] = 0;
  long long v11 = *a5;
  uint64_t v12 = a5[1];
  if (*a5 != v12)
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v9, v8, (void **)&v11->__r_.__value_.__l.__data_, (uint64_t)v11);
      ++v11;
    }
    while (v11 != v12);
    long long v11 = *a5;
  }
  std::string::operator=(v10, v11);
  return a1;
}

void sub_1C540DE34(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v3);
  }
  std::__tree<std::string>::destroy(v2, *(char **)(v1 + 72));
  ImsPrefsKey::~ImsPrefsKey((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, long long *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  char v9 = *a4;
  long long v11 = *a5;
  uint64_t v12 = *((void *)a5 + 2);
  *((void *)a5 + (*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  uint64_t v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540DF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540E008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540E0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540E1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540E2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540E388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, void *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  int v9 = *a4;
  int v10 = a5 + 1;
  std::string v11 = (void *)a5[1];
  std::string v13 = (void **)*a5;
  std::string v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *int v10 = 0;
    a5[2] = 0;
  }
  else
  {
    std::string v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540E494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540E580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, void *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  int v9 = *a4;
  int v10 = a5 + 1;
  std::string v11 = (void *)a5[1];
  std::string v13 = (void **)*a5;
  std::string v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *int v10 = 0;
    a5[2] = 0;
  }
  else
  {
    std::string v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540E68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, void *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  int v9 = *a4;
  int v10 = a5 + 1;
  std::string v11 = (void *)a5[1];
  std::string v13 = (void **)*a5;
  std::string v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *int v10 = 0;
    a5[2] = 0;
  }
  else
  {
    std::string v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540E7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540E890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540E970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540EA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540EB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540EC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540ECF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540EDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540EEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540EF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540F070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540F150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[40],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540F230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540F310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540F3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540F4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540F5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[53],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540F690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[56],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540F770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540F850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, void *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  int v9 = *a4;
  int v10 = a5 + 1;
  std::string v11 = (void *)a5[1];
  std::string v13 = (void **)*a5;
  std::string v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *int v10 = 0;
    a5[2] = 0;
  }
  else
  {
    std::string v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540F95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540FA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540FB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540FC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540FD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540FDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540FED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, long long *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  char v9 = *a4;
  long long v11 = *a5;
  uint64_t v12 = *((void *)a5 + 2);
  *((void *)a5 + (*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  uint64_t v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C540FFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54100BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54101B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5410294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,char const(&)[1]>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&v11, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyArray::ImsPrefsKeyArray(a1, &v12, &v11, a4 != 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5410378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5410484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[43],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541057C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5410670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5410768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5410848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5410928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5410A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5410B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5410C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5410D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5410E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5410EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[14],char const(&)[10],BOOL>(void *a1, char *a2, char *a3, char *a4)
{
  std::string::basic_string[abi:ne180100]<0>(&v9, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  ImsPrefsKey::ImsPrefsKey((uint64_t)a1, &v9, &__p, *a4);
  a1[9] = 0;
  *a1 = &unk_1F20E6750;
  a1[8] = a1 + 9;
  a1[11] = 0;
  a1[12] = 0;
  a1[10] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5410FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54110B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[14],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5411194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[12],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5411274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5411354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5411434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5411514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5411608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,char const(&)[6],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5411714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[9],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541180C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54118EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54119CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,char const(&)[4],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5411AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[9],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5411BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, void *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  int v9 = *a4;
  int v10 = a5 + 1;
  std::string v11 = (void *)a5[1];
  std::string v13 = (void **)*a5;
  std::string v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *int v10 = 0;
    a5[2] = 0;
  }
  else
  {
    std::string v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5411CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, void *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  int v9 = *a4;
  int v10 = a5 + 1;
  std::string v11 = (void *)a5[1];
  std::string v13 = (void **)*a5;
  std::string v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *int v10 = 0;
    a5[2] = 0;
  }
  else
  {
    std::string v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5411E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[48],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5411EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5411FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,char const(&)[20],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54120F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5412200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[44],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54122F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[46],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54123D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54124B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5412598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5412678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5412758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5412838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[10],BOOL,char const(&)[9],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541292C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5412A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,char const(&)[4],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5412B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5412C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5412D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[17],char const(&)[10],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, long long *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  char v9 = *a4;
  long long v11 = *a5;
  uint64_t v12 = *((void *)a5 + 2);
  *((void *)a5 + (*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  uint64_t v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5412E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5412EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[14],char const(&)[10],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, long long *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  char v9 = *a4;
  long long v11 = *a5;
  uint64_t v12 = *((void *)a5 + 2);
  *((void *)a5 + (*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  uint64_t v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5412FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54130D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,char const(&)[3],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54131E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54132F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,char const(&)[11],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54133FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[42],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54134F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[57],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54135D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,char const(&)[8],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54136C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,char const(&)[24],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54137D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[67],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54138E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54139D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, long long *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  char v9 = *a4;
  long long v11 = *a5;
  uint64_t v12 = *((void *)a5 + 2);
  *((void *)a5 + (*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  uint64_t v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5413AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, long long *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  char v9 = *a4;
  long long v11 = *a5;
  uint64_t v12 = *((void *)a5 + 2);
  *((void *)a5 + (*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  uint64_t v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5413BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,char const(&)[32],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5413CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[32],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5413DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5413ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,char const(&)[26]>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&v11, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyArray::ImsPrefsKeyArray(a1, &v12, &v11, a4 != 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5413FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,char const(&)[13]>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&v11, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyArray::ImsPrefsKeyArray(a1, &v12, &v11, a4 != 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54140C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[13],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, void *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  int v9 = *a4;
  int v10 = a5 + 1;
  std::string v11 = (void *)a5[1];
  std::string v13 = (void **)*a5;
  std::string v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *int v10 = 0;
    a5[2] = 0;
  }
  else
  {
    std::string v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54141E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54142D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, void *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  int v9 = *a4;
  int v10 = a5 + 1;
  std::string v11 = (void *)a5[1];
  std::string v13 = (void **)*a5;
  std::string v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *int v10 = 0;
    a5[2] = 0;
  }
  else
  {
    std::string v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54143E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[1]>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&v11, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyArray::ImsPrefsKeyArray(a1, &v12, &v11, a4 != 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54144D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[48],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54145C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[50],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54146A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541479C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54148A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[17],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54149A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,char const(&)[30],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5414A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[46],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5414B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[45],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5414C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5414D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[3],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5414E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5414F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[18],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5415018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54150F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54151D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54152B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5415398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5415478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5415558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5415638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[35],char const(&)[18],BOOL,char const(&)[12],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541572C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[17],char const(&)[18],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5415838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5415930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5415A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5415AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5415BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5415CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5415D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5415E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5415F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5416030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5416110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[30],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54161F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[35],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54162D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[11],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54163B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5416490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5416570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[10],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5416650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5416730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5416810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54168F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54169D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5416AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5416B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5416C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5416D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5416E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[14],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5416F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5416FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[17],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54170D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[6],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54171C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[6],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54172D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54173C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54174A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[20],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5417588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[22],char const(&)[6],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, long long *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  char v9 = *a4;
  long long v11 = *a5;
  uint64_t v12 = *((void *)a5 + 2);
  *((void *)a5 + (*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  uint64_t v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5417670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541775C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5417850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,char const(&)[4],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541795C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[18],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5417A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5417B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5417C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5417CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[22],char const(&)[6],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, void *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  int v9 = *a4;
  int v10 = a5 + 1;
  std::string v11 = (void *)a5[1];
  std::string v13 = (void **)*a5;
  std::string v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *int v10 = 0;
    a5[2] = 0;
  }
  else
  {
    std::string v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5417E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5417EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5417FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54180AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[6],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54181A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5418298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[12],char const(&)[6],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, void *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  int v9 = *a4;
  int v10 = a5 + 1;
  std::string v11 = (void *)a5[1];
  std::string v13 = (void **)*a5;
  std::string v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *int v10 = 0;
    a5[2] = 0;
  }
  else
  {
    std::string v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54183A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,char const(&)[6],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54184A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,char const(&)[9],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54185B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[13],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54186A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[12],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5418788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5418868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5418948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5418A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[16],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5418B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[11],char const(&)[16],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5418BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[16],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5418CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[5],char const(&)[5],BOOL,char const(&)[22],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5418DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[8],char const(&)[5],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5418EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[8],char const(&)[5],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5418FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54190A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[5],BOOL,char const(&)[34],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5419194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541928C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[5],BOOL,char const(&)[32],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5419380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[27],char const(&)[5],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541948C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[9],char const(&)[5],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5419598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[17],char const(&)[5],BOOL,char const(&)[7],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54196A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[5],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541979C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[24],char const(&)[5],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541987C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541995C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5419A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[11],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5419B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[5],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5419C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5419D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[5],BOOL,char const(&)[4],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5419DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5419EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[40],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5419FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541A0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[30],char const(&)[9],BOOL,char const(&)[9],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541A1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[45],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541A2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[41],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541A380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541A460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541A540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[11],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541A634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541A72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541A820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541A92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[7],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541AA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541AB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[28],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541AC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[44],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541AD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541AE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541AF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541AFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541B0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[5],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541B1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[14],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541B2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[13],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541B3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[24],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541B4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[17],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541B594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[37],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541B68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541B76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[36],char const(&)[9],BOOL,char const(&)[2],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541B860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541B958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541BA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541BB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[38],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541BBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541BCD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[52],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541BDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[54],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541BE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541BF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[6],char const(&)[12],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541C06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541C164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[23],char const(&)[13],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541C258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[18],char const(&)[13],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541C364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[15],char const(&)[7],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E66D0;
  *(_DWORD *)(a1 + 60) = a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541C45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[7],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541C550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[13],char const(&)[7],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, unsigned char *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(void *)a1 = &unk_1F20E6710;
  *(unsigned char *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C541C648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void IMSClientManager::queue(NSObject **a1@<X8>)
{
  char v3 = sImsDispatchQueue;
  if (sImsDispatchQueue)
  {
    *a1 = sImsDispatchQueue;
  }
  else
  {
    char v3 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v3;
    *a1 = v3;
    if (!v3) {
      return;
    }
  }
  dispatch_retain(v3);
}

uint64_t ___ZN15IMSClientRecord17callOnClientQueueEU13block_pointerFvPS_E_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t ___ZN15IMSClientRecord17callOnClientQueueEU13block_pointerFvPS_E_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IMSClientRecord::IMSClientRecord(uint64_t a1, long long *a2, dispatch_object_t object)
{
  *(void *)a1 = object;
  if (object) {
    dispatch_retain(object);
  }
  BOOL v5 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  operator new();
}

void sub_1C541C938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*v10) {
    dispatch_release(*v10);
  }
  _Unwind_Resume(exception_object);
}

void IMSClientRecord::createLazuliWrapper(IMSClientRecord *this)
{
  if (!*((void *)this + 6))
  {
    uint64_t v2 = operator new(0x50uLL);
    v2[1] = 0;
    v2[2] = 0;
    *uint64_t v2 = &unk_1F20CBC58;
    v2[5] = 0;
    v2[3] = &unk_1F20E2F08;
    v2[4] = v2 + 5;
    v2[8] = 0;
    v2[9] = 0;
    v2[6] = 0;
    v2[7] = v2 + 8;
    char v3 = (std::__shared_weak_count *)*((void *)this + 7);
    *((void *)this + 6) = v2 + 3;
    *((void *)this + 7) = v2;
    if (v3)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
}

void IMSClientRecord::~IMSClientRecord(IMSClientRecord *this)
{
  uint64_t v2 = (IMSWrapperDelegate *)*((void *)this + 4);
  if (v2)
  {
    IMSWrapperDelegate::~IMSWrapperDelegate(v2);
    MEMORY[0x1C878E320]();
  }
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(void **)(v3 + 8));
    *(void *)uint64_t v3 = v3 + 8;
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 8) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(void **)(v3 + 32));
    *(void *)(v3 + 24) = v3 + 32;
    *(void *)(v3 + 40) = 0;
    *(void *)(v3 + 32) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(void **)(v3 + 56));
    *(void *)(v3 + 48) = v3 + 56;
    *(void *)(v3 + 64) = 0;
    *(void *)(v3 + 56) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(void **)(v3 + 80));
    *(void *)(v3 + 72) = v3 + 80;
    *(void *)(v3 + 88) = 0;
    *(void *)(v3 + 80) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(void **)(v3 + 104));
    *(void *)(v3 + 96) = v3 + 104;
    *(void *)(v3 + 112) = 0;
    *(void *)(v3 + 104) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(void **)(v3 + 80));
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(void **)(v3 + 56));
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(void **)(v3 + 32));
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(void **)(v3 + 8));
    MEMORY[0x1C878E320](v3, 0x1020C40D858BDA1);
  }
  unsigned __int8 v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  if (*(void *)this) {
    dispatch_release(*(dispatch_object_t *)this);
  }
}

void IMSClientRecord::updateQueue(NSObject **this, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    ims::Dispatch::reset(this, object);
    dispatch_release(object);
  }
  else
  {
    ims::Dispatch::reset(this, 0);
  }
}

void IMSClientManager::IMSClientManager(IMSClientManager *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + (*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = (char *)this + 16;
  *((void *)this + IBISession::stop(this - 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::string::basic_string[abi:ne180100]<0>(v4, "cli.ctor");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v1 = ims::debug((uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v1 + 8), (uint64_t)"Adding record for emergency", 27);
  *(unsigned char *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v1 + 17) = 0;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  operator new();
}

void sub_1C541CEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v24 = *(std::__shared_weak_count **)(v21 + 48);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*v22);
  _Unwind_Resume(a1);
}

void IMSClientManager::~IMSClientManager(ImsBlockQueue **this)
{
  ImsBlockQueue::clearBlocks(this[5], 0);
  std::string::basic_string[abi:ne180100]<0>(&v14, "cli.dtor");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Removing ", 9);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" records", 8);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v15) < 0) {
    operator delete((void *)v14);
  }
  char v3 = this[1];
  if (v3 != (IMSClientManager *)(this + 2))
  {
    do
    {
      long long v14 = 0u;
      long long v15 = 0u;
      if (*((char *)v3 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v14, *((const std::string::value_type **)v3 + 4), *((void *)v3 + 5));
      }
      else
      {
        long long v14 = *((_OWORD *)v3 + 2);
        *(void *)&long long v15 = *((void *)v3 + 6);
      }
      *((void *)&v15 + (*(void (**)(IBISession *, uint64_t))(*(void *)this + 72))(this, 1) = *((void *)v3 + 7);
      std::string::basic_string[abi:ne180100]<0>(__p, "cli.dtor");
      std::string::basic_string[abi:ne180100]<0>(v12, "");
      uint64_t v4 = ims::debug((uint64_t)__p, (uint64_t)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Destroy record for ", 19);
      *(unsigned char *)(v4 + 17) = 0;
      if (*(char *)(*((void *)&v15 + 1) + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(*((void *)&v15 + 1) + 8), *(void *)(*((void *)&v15 + 1) + 16));
      }
      else
      {
        long long v5 = *(_OWORD *)(*((void *)&v15 + 1) + 8);
        v11.__r_.__value_.__r.__words[2] = *(void *)(*((void *)&v15 + 1) + 24);
        *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 32))(v4, &v11);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      if (*((void *)&v15 + 1))
      {
        IMSClientRecord::~IMSClientRecord(*((IMSClientRecord **)&v15 + 1));
        MEMORY[0x1C878E320]();
      }
      if (SBYTE7(v15) < 0) {
        operator delete((void *)v14);
      }
      long long v6 = (IMSClientManager *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          long long v6 = *(IMSClientManager **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (IMSClientManager *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          char v3 = v7;
        }
        while (!v8);
      }
      char v3 = v7;
    }
    while (v7 != (IMSClientManager *)(this + 2));
  }
  if (*this) {
    (*(void (**)(ImsBlockQueue *))(*(void *)*this + 8))(*this);
  }
  int v9 = this[4];
  if (v9) {
    (*(void (**)(ImsBlockQueue *))(*(void *)v9 + 8))(v9);
  }
  int v10 = (std::__shared_weak_count *)this[6];
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((char *)this[2]);
}

uint64_t IMSClientManager::createClient(void **a1)
{
  BOOL v8 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v8, (uint64_t)&v9);
  ImsResult::~ImsResult((ImsResult *)&v9);
  uint64_t v3 = IMSClientManager::instance(v2);
  if (!IMSClientManager::getClientForStack(v3, a1))
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, "cli.create");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)&v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Creating record for ", 20);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, a1);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    operator new();
  }
  ImsLock::~ImsLock(&v8);
  return 0;
}

void sub_1C541D594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,pthread_mutex_t *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  ImsLock::~ImsLock(&a26);
  _Unwind_Resume(a1);
}

void *IMSClientManager::getClientForStack(uint64_t a1, void **a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDC098, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDC098))
  {
    _MergedGlobals_12 = *(void *)(a1 + 24);
    __cxa_guard_release(&qword_1EBBDC098);
  }
  if (_MergedGlobals_12 != *(void *)(a1 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "cli.getrec");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Client record count was ", 24);
    *(unsigned char *)(v4 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" and is now ", 12);
    *(unsigned char *)(v4 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    _MergedGlobals_12 = *(void *)(a1 + 24);
  }
  char v7 = *(void **)(a1 + 16);
  long long v5 = (void **)(a1 + 16);
  long long v6 = v7;
  if (!v7) {
    return 0;
  }
  BOOL v8 = v5;
  do
  {
    char v9 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6 + 4, a2);
    if (v9 >= 0) {
      int v10 = v6;
    }
    else {
      int v10 = v6 + 1;
    }
    if (v9 >= 0) {
      BOOL v8 = (void **)v6;
    }
    long long v6 = (void *)*v10;
  }
  while (*v10);
  if (v8 == v5
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v8 + 4) & 0x80) != 0)
  {
    return 0;
  }
  else
  {
    return v8[7];
  }
}

void sub_1C541D7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN16IMSClientManager12createClientERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP16dispatch_queue_s_block_invoke(uint64_t a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  uint64_t v2 = *(uint64_t **)(v5 + 168);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v2)
  {
    BambiClient::createNewStack(v2, (const std::string *)(a1 + 32), 0, &v3);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void IMSClientManager::updateEmergencyClient(NSObject *this, dispatch_queue_s *a2)
{
  long long v6 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v6, (uint64_t)v7);
  ImsResult::~ImsResult((ImsResult *)v7);
  uint64_t v4 = IMSClientManager::instance(v3);
  v7[0] = (long long *)&IMSClientManager::kEmergencyStack;
  uint64_t v5 = std::__tree<std::__value_type<std::string,IMSClientRecord *>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSClientRecord *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSClientRecord *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v4 + 8), (void **)&IMSClientManager::kEmergencyStack, (uint64_t)&std::piecewise_construct, v7);
  IMSClientRecord::updateQueue((NSObject **)v5[7], this);
  operator new();
}

void sub_1C541D96C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x1C878E320](v2, 0x10B3C407596DCF5);
  ImsLock::~ImsLock((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void IMSClientManager::createImsClient(void **a1@<X0>, void *a2@<X8>)
{
  char v9 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v9, (uint64_t)&v10);
  ImsResult::~ImsResult((ImsResult *)&v10);
  uint64_t v5 = IMSClientManager::instance(v4);
  if (!IMSClientManager::getClientForStack(v5, a1))
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "cli.create");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Creating record for ", 20);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, a1);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    operator new();
  }
  *a2 = 0;
  a2[1] = 0;
  ImsLock::~ImsLock(&v9);
}

void sub_1C541DCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,pthread_mutex_t *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  ImsLock::~ImsLock(&a26);
  _Unwind_Resume(a1);
}

void ___ZN16IMSClientManager15createImsClientERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP16dispatch_queue_s_block_invoke(uint64_t a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  uint64_t v2 = *(uint64_t **)(v5 + 168);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v2)
  {
    BambiClient::createNewStack(v2, (const std::string *)(a1 + 32), 0, &v3);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void IMSClientManager::updateImsEmergencyClient(NSObject *this@<X0>, void *a2@<X8>)
{
  char v8 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v8, (uint64_t)v9);
  ImsResult::~ImsResult((ImsResult *)v9);
  uint64_t v6 = IMSClientManager::instance(v5);
  v9[0] = (long long *)&IMSClientManager::kEmergencyStack;
  char v7 = std::__tree<std::__value_type<std::string,IMSClientRecord *>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSClientRecord *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSClientRecord *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 8), (void **)&IMSClientManager::kEmergencyStack, (uint64_t)&std::piecewise_construct, v9);
  IMSClientRecord::updateQueue((NSObject **)v7[7], this);
  _ZNSt3__115allocate_sharedB8ne180100IN3ims15EmergencyClientENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a2);
  ImsLock::~ImsLock(&v8);
}

void sub_1C541DE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsLock::~ImsLock((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void IMSClientManager::removeClient(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v21, (uint64_t)v22);
  ImsResult::~ImsResult((ImsResult *)v22);
  uint64_t v3 = IMSClientManager::instance(v2);
  uint64_t v4 = v3 + 16;
  uint64_t v5 = *(void **)(v3 + 16);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = v3 + 16;
  do
  {
    uint64_t v3 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5 + 4, (void **)a1);
    if ((v3 & 0x80u) == 0) {
      char v7 = v5;
    }
    else {
      char v7 = v5 + 1;
    }
    if ((v3 & 0x80u) == 0) {
      uint64_t v6 = (uint64_t)v5;
    }
    uint64_t v5 = (void *)*v7;
  }
  while (*v7);
  if (v6 == v4
    || (uint64_t v3 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a1, (void **)(v6 + 32)), (v3 & 0x80) != 0))
  {
LABEL_11:
    uint64_t v6 = v4;
  }
  if (IMSClientManager::instance((IMSClientManager *)v3) + 16 != v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "cli.rm");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)v22, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Removing record for ", 20);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a1);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    char v9 = *(IMSClientRecord **)(v6 + 56);
    if (v9)
    {
      IMSClientRecord::~IMSClientRecord(v9);
      char v9 = (IMSClientRecord *)MEMORY[0x1C878E320]();
    }
    std::string v10 = (void *)IMSClientManager::instance(v9);
    std::string v11 = *(void **)(v6 + 8);
    if (v11)
    {
      do
      {
        uint64_t v12 = v11;
        std::string v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      char v13 = (void *)v6;
      do
      {
        uint64_t v12 = (void *)v13[2];
        BOOL v14 = *v12 == (void)v13;
        char v13 = v12;
      }
      while (!v14);
    }
    if (v10[1] == v6) {
      v10[1] = v12;
    }
    char v15 = (uint64_t *)v10[2];
    --v10[3];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v15, (uint64_t *)v6);
    if (*(char *)(v6 + 55) < 0) {
      operator delete(*(void **)(v6 + 32));
    }
    operator delete((void *)v6);
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string v18 = *(std::string *)a1;
    }
    char v25 = 0;
    uint64_t v16 = operator new(0x20uLL);
    void *v16 = &unk_1F20CBEE8;
    char v17 = (std::string *)(v16 + 1);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v17, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
      v16[3] = *((void *)&v18.__r_.__value_.__l + 2);
    }
    char v25 = v16;
    IMSClientManager::callOnMainQueue((IMSClientManager *)v24);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v24);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
  ImsLock::~ImsLock(&v21);
}

void sub_1C541E148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,pthread_mutex_t *a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  operator delete(v28);
  if (a14 < 0) {
    operator delete(__p);
  }
  ImsLock::~ImsLock(&a22);
  _Unwind_Resume(a1);
}

void *IMSClientManager::callOnMainQueue(IMSClientManager *a1)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  IMSClientManager::instance(a1);
  uint64_t v2 = sImsDispatchQueue;
  if (sImsDispatchQueue
    || (uint64_t v2 = dispatch_queue_create("com.apple.ipTelephony.queue", 0), (sImsDispatchQueue = (uint64_t)v2) != 0))
  {
    dispatch_retain(v2);
    char v3 = 0;
  }
  else
  {
    char v3 = 1;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN16IMSClientManager15callOnMainQueueENSt3__18functionIFvvEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_53_0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)a1);
  dispatch_async(v2, block);
  if ((v3 & 1) == 0) {
    dispatch_release(v2);
  }
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v6);
}

void sub_1C541E2E0(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void IMSClientManager::performBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  ImsBlockQueue::addBlock<std::shared_ptr<SipLockable>>(v3, a2);
}

{
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  ImsBlockQueue::addBlock<std::shared_ptr<MediaSessionInterface>>(v3, a2);
}

void sub_1C541E34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ImsBlockQueue::addBlock<std::shared_ptr<SipLockable>>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  ImsLock::set((pthread_mutex_t *)(a1 + 24), &v6, (uint64_t)v7);
  ImsResult::~ImsResult((ImsResult *)v7);
  std::string::basic_string[abi:ne180100]<0>(v7, "util");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"queuing capturable block ", 25);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 40))(v3, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" (", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" block(s) already on queue)", 27);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  operator new();
}

void sub_1C541E604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,pthread_mutex_t *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

void sub_1C541E6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ImsBlockQueue::addBlock<std::shared_ptr<MediaSessionInterface>>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  ImsLock::set((pthread_mutex_t *)(a1 + 24), &v6, (uint64_t)v7);
  ImsResult::~ImsResult((ImsResult *)v7);
  std::string::basic_string[abi:ne180100]<0>(v7, "util");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"queuing capturable block ", 25);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 40))(v3, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" (", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" block(s) already on queue)", 27);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  operator new();
}

void sub_1C541E994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,pthread_mutex_t *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void IMSClientManager::performBlockOr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  ImsBlockQueue::addBlock(v3, a2);
}

void sub_1C541EA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IMSClientManager::clearBlocks(ImsBlockQueue **this)
{
}

void IMSClientManager::updateCallDelegate(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject *a4)
{
  std::string::basic_string[abi:ne180100]<0>(&v19, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(&v18, "");
  uint64_t v8 = ims::debug((uint64_t)&v19, (uint64_t)&v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"will update call delegate ", 26);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" for stack ", 11);
  *(unsigned char *)(v8 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)a1);
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" to ", 4);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = *a3;
  char v9 = (std::__shared_weak_count *)a3[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a4) {
    dispatch_retain(a4);
  }
  memset(&v19, 0, sizeof(v19));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v19 = *(std::string *)a2;
  }
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v18 = *(std::string *)a1;
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN16IMSClientManager18updateCallDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims17CallEventDelegateEEEP16dispatch_queue_s_block_invoke;
  v11[3] = &__block_descriptor_tmp_33_1;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v12, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string v12 = v18;
  }
  uint64_t v13 = v10;
  BOOL v14 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v15, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string v15 = v19;
  }
  dispatch_object_t object = a4;
  if (a4) {
    dispatch_retain(a4);
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v11);
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (a4) {
    dispatch_release(a4);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C541EDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,dispatch_object_t object,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  if (*(char *)(v35 - 57) < 0)
  {
    operator delete(*(void **)(v35 - 80));
    if (v33) {
      goto LABEL_9;
    }
  }
  else if (v33)
  {
LABEL_9:
    dispatch_release(v33);
    if (!v34) {
      goto LABEL_14;
    }
LABEL_13:
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
LABEL_14:
    _Unwind_Resume(a1);
  }
  if (!v34) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void ___ZN16IMSClientManager18updateCallDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims17CallEventDelegateEEEP16dispatch_queue_s_block_invoke(uint64_t a1)
{
  __p[0] = 0;
  ImsLock::set(&IMSClientManager::_mutex, (pthread_mutex_t **)__p, (uint64_t)&v25);
  ImsResult::~ImsResult((ImsResult *)&v25);
  uint64_t v3 = IMSClientManager::instance(v2);
  ClientForStacuint64_t k = IMSClientManager::getClientForStack(v3, (void **)(a1 + 32));
  ImsLock::~ImsLock((pthread_mutex_t **)__p);
  if (!ClientForStack) {
    return;
  }
  char v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    {
LABEL_33:
      uint64_t v16 = ClientForStack[4];
      char v17 = *(NSObject **)(a1 + 96);
      std::string v18 = *(std::__shared_weak_count **)(a1 + 64);
      uint64_t v21 = *(std::__shared_weak_count **)(a1 + 56);
      uint64_t v22 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      IMSWrapperDelegate::addCallDelegate(v16, a1 + 72, v17, &v21);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      goto LABEL_37;
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "ims.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"holding ", 8);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a1 + 72);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = ClientForStack[5];
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 64);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(char *)(a1 + 95) < 0) {
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
    }
    else {
      std::string v25 = *(std::string *)(a1 + 72);
    }
    *(void *)&long long v26 = v9;
    *((void *)&v26 + ImsBlockQueue::clearBlocks(this[5], 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v11 = (char **)(v7 + 32);
    uint64_t v10 = *(char **)(v7 + 32);
    if (v10)
    {
      while (1)
      {
        while (1)
        {
          std::string v12 = (char **)v10;
          uint64_t v13 = v10 + 32;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v25, (void **)v10 + 4) & 0x80) == 0) {
            break;
          }
          uint64_t v10 = *v12;
          std::string v11 = v12;
          if (!*v12) {
            goto LABEL_24;
          }
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (void **)&v25.__r_.__value_.__l.__data_) & 0x80) == 0)break; {
        std::string v11 = v12 + 1;
        }
        uint64_t v10 = v12[1];
        if (!v10) {
          goto LABEL_24;
        }
      }
      if (*v11) {
        goto LABEL_27;
      }
    }
    else
    {
      std::string v12 = (char **)(v7 + 32);
    }
LABEL_24:
    BOOL v14 = (char *)operator new(0x48uLL);
    *(std::string *)(v14 + 32) = v25;
    memset(&v25, 0, sizeof(v25));
    *(_OWORD *)(v14 + 56) = v26;
    long long v26 = 0uLL;
    *(void *)BOOL v14 = 0;
    *((void *)v14 + ImsBlockQueue::clearBlocks(this[5], 1) = 0;
    *((void *)v14 + 2) = v12;
    void *v11 = v14;
    uint64_t v15 = **(void **)(v7 + 24);
    if (v15)
    {
      *(void *)(v7 + 24) = v15;
      BOOL v14 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 32), (uint64_t *)v14);
    ++*(void *)(v7 + 40);
LABEL_27:
    if (*((void *)&v26 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    goto LABEL_33;
  }
  IMSWrapperDelegate::removeCallDelegate(ClientForStack[4], (void **)(a1 + 72));
LABEL_37:
  std::string::basic_string[abi:ne180100]<0>(&v25, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v19 = ims::debug((uint64_t)&v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"updated call delegate ", 22);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 32))(v19, a1 + 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" for stack ", 11);
  *(unsigned char *)(v19 + 17) = 0;
  LoggableString::LoggableString(&v20, (const std::string *)(a1 + 32));
  (*(void (**)(uint64_t, std::string *))(*(void *)v19 + 40))(v19, &v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" to ", 4);
  *(unsigned char *)(v19 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1C541F354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c51_ZTSNSt3__110shared_ptrIN3ims17CallEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v8 = *(NSObject **)(a2 + 96);
  if (v8)
  {
    dispatch_retain(v8);
  }
}

void sub_1C541F4C0(_Unwind_Exception *exception_object)
{
  long long v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c51_ZTSNSt3__110shared_ptrIN3ims17CallEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 96);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    long long v4 = *(void **)(a1 + 32);
    operator delete(v4);
  }
}

void IMSClientManager::updateStackDelegate(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject *a4)
{
  std::string::basic_string[abi:ne180100]<0>(&v19, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(&v18, "");
  uint64_t v8 = ims::debug((uint64_t)&v19, (uint64_t)&v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"will update stack delegate ", 27);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" for stack ", 11);
  *(unsigned char *)(v8 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)a1);
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" to ", 4);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = *a3;
  uint64_t v9 = (std::__shared_weak_count *)a3[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a4) {
    dispatch_retain(a4);
  }
  memset(&v19, 0, sizeof(v19));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v19 = *(std::string *)a2;
  }
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v18 = *(std::string *)a1;
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN16IMSClientManager19updateStackDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims18StackEventDelegateEEEP16dispatch_queue_s_block_invoke;
  v11[3] = &__block_descriptor_tmp_36_1;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v12, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string v12 = v18;
  }
  uint64_t v13 = v10;
  BOOL v14 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v15, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string v15 = v19;
  }
  dispatch_object_t object = a4;
  if (a4) {
    dispatch_retain(a4);
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v11);
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (a4) {
    dispatch_release(a4);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C541F8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,dispatch_object_t object,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  if (*(char *)(v35 - 57) < 0)
  {
    operator delete(*(void **)(v35 - 80));
    if (v33) {
      goto LABEL_9;
    }
  }
  else if (v33)
  {
LABEL_9:
    dispatch_release(v33);
    if (!v34) {
      goto LABEL_14;
    }
LABEL_13:
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
LABEL_14:
    _Unwind_Resume(a1);
  }
  if (!v34) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void ___ZN16IMSClientManager19updateStackDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims18StackEventDelegateEEEP16dispatch_queue_s_block_invoke(uint64_t a1)
{
  __p[0] = 0;
  ImsLock::set(&IMSClientManager::_mutex, (pthread_mutex_t **)__p, (uint64_t)&v25);
  ImsResult::~ImsResult((ImsResult *)&v25);
  uint64_t v3 = IMSClientManager::instance(v2);
  ClientForStacuint64_t k = IMSClientManager::getClientForStack(v3, (void **)(a1 + 32));
  ImsLock::~ImsLock((pthread_mutex_t **)__p);
  if (!ClientForStack) {
    return;
  }
  uint64_t v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    {
LABEL_33:
      uint64_t v16 = ClientForStack[4];
      char v17 = *(NSObject **)(a1 + 96);
      std::string v18 = *(std::__shared_weak_count **)(a1 + 64);
      uint64_t v21 = *(std::__shared_weak_count **)(a1 + 56);
      uint64_t v22 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      IMSWrapperDelegate::addStackDelegate(v16, a1 + 72, v17, &v21);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      goto LABEL_37;
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "ims.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"holding ", 8);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a1 + 72);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    long long v7 = (uint64_t **)ClientForStack[5];
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 64);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(char *)(a1 + 95) < 0) {
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
    }
    else {
      std::string v25 = *(std::string *)(a1 + 72);
    }
    *(void *)&long long v26 = v9;
    *((void *)&v26 + ImsBlockQueue::clearBlocks(this[5], 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v11 = (char **)(v7 + 1);
    uint64_t v10 = (char *)v7[1];
    if (v10)
    {
      while (1)
      {
        while (1)
        {
          std::string v12 = (char **)v10;
          uint64_t v13 = v10 + 32;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v25, (void **)v10 + 4) & 0x80) == 0) {
            break;
          }
          uint64_t v10 = *v12;
          std::string v11 = v12;
          if (!*v12) {
            goto LABEL_24;
          }
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (void **)&v25.__r_.__value_.__l.__data_) & 0x80) == 0)break; {
        std::string v11 = v12 + 1;
        }
        uint64_t v10 = v12[1];
        if (!v10) {
          goto LABEL_24;
        }
      }
      if (*v11) {
        goto LABEL_27;
      }
    }
    else
    {
      std::string v12 = (char **)(v7 + 1);
    }
LABEL_24:
    BOOL v14 = (char *)operator new(0x48uLL);
    *(std::string *)(v14 + 32) = v25;
    memset(&v25, 0, sizeof(v25));
    *(_OWORD *)(v14 + 56) = v26;
    long long v26 = 0uLL;
    *(void *)BOOL v14 = 0;
    *((void *)v14 + ImsBlockQueue::clearBlocks(this[5], 1) = 0;
    *((void *)v14 + 2) = v12;
    void *v11 = v14;
    std::string v15 = (uint64_t *)**v7;
    if (v15)
    {
      void *v7 = v15;
      BOOL v14 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v7[1], (uint64_t *)v14);
    uint64_t v7[2] = (uint64_t *)((char *)v7[2] + 1);
LABEL_27:
    if (*((void *)&v26 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    goto LABEL_33;
  }
  IMSWrapperDelegate::removeStackDelegate(ClientForStack[4], (void **)(a1 + 72));
LABEL_37:
  std::string::basic_string[abi:ne180100]<0>(&v25, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v19 = ims::debug((uint64_t)&v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"updated stack delegate ", 23);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 32))(v19, a1 + 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" for stack ", 11);
  *(unsigned char *)(v19 + 17) = 0;
  LoggableString::LoggableString(&v20, (const std::string *)(a1 + 32));
  (*(void (**)(uint64_t, std::string *))(*(void *)v19 + 40))(v19, &v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" to ", 4);
  *(unsigned char *)(v19 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1C541FE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c52_ZTSNSt3__110shared_ptrIN3ims18StackEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v8 = *(NSObject **)(a2 + 96);
  if (v8)
  {
    dispatch_retain(v8);
  }
}

void sub_1C541FF94(_Unwind_Exception *exception_object)
{
  long long v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c52_ZTSNSt3__110shared_ptrIN3ims18StackEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 96);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    long long v4 = *(void **)(a1 + 32);
    operator delete(v4);
  }
}

void IMSClientManager::updateManagerDelegate(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject *a4)
{
  std::string::basic_string[abi:ne180100]<0>(&v19, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(&v18, "");
  uint64_t v8 = ims::debug((uint64_t)&v19, (uint64_t)&v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"will update manager delegate ", 29);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" for stack ", 11);
  *(unsigned char *)(v8 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)a1);
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" to ", 4);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = *a3;
  uint64_t v9 = (std::__shared_weak_count *)a3[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a4) {
    dispatch_retain(a4);
  }
  memset(&v19, 0, sizeof(v19));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v19 = *(std::string *)a2;
  }
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v18 = *(std::string *)a1;
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN16IMSClientManager21updateManagerDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims24CallManagerEventDelegateEEEP16dispatch_queue_s_block_invoke;
  v11[3] = &__block_descriptor_tmp_39_0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v12, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string v12 = v18;
  }
  uint64_t v13 = v10;
  BOOL v14 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v15, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string v15 = v19;
  }
  dispatch_object_t object = a4;
  if (a4) {
    dispatch_retain(a4);
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v11);
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (a4) {
    dispatch_release(a4);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C542037C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,dispatch_object_t object,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  if (*(char *)(v35 - 57) < 0)
  {
    operator delete(*(void **)(v35 - 80));
    if (v33) {
      goto LABEL_9;
    }
  }
  else if (v33)
  {
LABEL_9:
    dispatch_release(v33);
    if (!v34) {
      goto LABEL_14;
    }
LABEL_13:
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
LABEL_14:
    _Unwind_Resume(a1);
  }
  if (!v34) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void ___ZN16IMSClientManager21updateManagerDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims24CallManagerEventDelegateEEEP16dispatch_queue_s_block_invoke(uint64_t a1)
{
  __p[0] = 0;
  ImsLock::set(&IMSClientManager::_mutex, (pthread_mutex_t **)__p, (uint64_t)&v25);
  ImsResult::~ImsResult((ImsResult *)&v25);
  uint64_t v3 = IMSClientManager::instance(v2);
  ClientForStacuint64_t k = IMSClientManager::getClientForStack(v3, (void **)(a1 + 32));
  ImsLock::~ImsLock((pthread_mutex_t **)__p);
  if (!ClientForStack) {
    return;
  }
  uint64_t v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    {
LABEL_33:
      uint64_t v16 = ClientForStack[4];
      char v17 = *(NSObject **)(a1 + 96);
      std::string v18 = *(std::__shared_weak_count **)(a1 + 64);
      uint64_t v21 = *(std::__shared_weak_count **)(a1 + 56);
      uint64_t v22 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      IMSWrapperDelegate::addCallManagerDelegate(v16, a1 + 72, v17, &v21);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      goto LABEL_37;
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "ims.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"holding ", 8);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a1 + 72);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = ClientForStack[5];
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 64);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(char *)(a1 + 95) < 0) {
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
    }
    else {
      std::string v25 = *(std::string *)(a1 + 72);
    }
    *(void *)&long long v26 = v9;
    *((void *)&v26 + ImsBlockQueue::clearBlocks(this[5], 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v11 = (char **)(v7 + 56);
    uint64_t v10 = *(char **)(v7 + 56);
    if (v10)
    {
      while (1)
      {
        while (1)
        {
          std::string v12 = (char **)v10;
          uint64_t v13 = v10 + 32;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v25, (void **)v10 + 4) & 0x80) == 0) {
            break;
          }
          uint64_t v10 = *v12;
          std::string v11 = v12;
          if (!*v12) {
            goto LABEL_24;
          }
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (void **)&v25.__r_.__value_.__l.__data_) & 0x80) == 0)break; {
        std::string v11 = v12 + 1;
        }
        uint64_t v10 = v12[1];
        if (!v10) {
          goto LABEL_24;
        }
      }
      if (*v11) {
        goto LABEL_27;
      }
    }
    else
    {
      std::string v12 = (char **)(v7 + 56);
    }
LABEL_24:
    BOOL v14 = (char *)operator new(0x48uLL);
    *(std::string *)(v14 + 32) = v25;
    memset(&v25, 0, sizeof(v25));
    *(_OWORD *)(v14 + 56) = v26;
    long long v26 = 0uLL;
    *(void *)BOOL v14 = 0;
    *((void *)v14 + ImsBlockQueue::clearBlocks(this[5], 1) = 0;
    *((void *)v14 + 2) = v12;
    void *v11 = v14;
    uint64_t v15 = **(void **)(v7 + 48);
    if (v15)
    {
      *(void *)(v7 + 48) = v15;
      BOOL v14 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 56), (uint64_t *)v14);
    ++*(void *)(v7 + 64);
LABEL_27:
    if (*((void *)&v26 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    goto LABEL_33;
  }
  IMSWrapperDelegate::removeCallManagerDelegate(ClientForStack[4], (void **)(a1 + 72));
LABEL_37:
  std::string::basic_string[abi:ne180100]<0>(&v25, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v19 = ims::debug((uint64_t)&v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"updated manager delegate ", 25);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 32))(v19, a1 + 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" for stack ", 11);
  *(unsigned char *)(v19 + 17) = 0;
  LoggableString::LoggableString(&v20, (const std::string *)(a1 + 32));
  (*(void (**)(uint64_t, std::string *))(*(void *)v19 + 40))(v19, &v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" to ", 4);
  *(unsigned char *)(v19 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1C54208FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c58_ZTSNSt3__110shared_ptrIN3ims24CallManagerEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v8 = *(NSObject **)(a2 + 96);
  if (v8)
  {
    dispatch_retain(v8);
  }
}

void sub_1C5420A68(_Unwind_Exception *exception_object)
{
  long long v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c58_ZTSNSt3__110shared_ptrIN3ims24CallManagerEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 96);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    long long v4 = *(void **)(a1 + 32);
    operator delete(v4);
  }
}

void IMSClientManager::updateMessageDelegate(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject *a4)
{
  std::string::basic_string[abi:ne180100]<0>(&v19, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(&v18, "");
  uint64_t v8 = ims::debug((uint64_t)&v19, (uint64_t)&v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"will update message delegate ", 29);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" for stack ", 11);
  *(unsigned char *)(v8 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)a1);
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" to ", 4);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = *a3;
  uint64_t v9 = (std::__shared_weak_count *)a3[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a4) {
    dispatch_retain(a4);
  }
  memset(&v19, 0, sizeof(v19));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v19 = *(std::string *)a2;
  }
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v18 = *(std::string *)a1;
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN16IMSClientManager21updateMessageDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims20MessageEventDelegateEEEP16dispatch_queue_s_block_invoke;
  v11[3] = &__block_descriptor_tmp_42_0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v12, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string v12 = v18;
  }
  uint64_t v13 = v10;
  BOOL v14 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v15, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string v15 = v19;
  }
  dispatch_object_t object = a4;
  if (a4) {
    dispatch_retain(a4);
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v11);
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (a4) {
    dispatch_release(a4);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C5420E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,dispatch_object_t object,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  if (*(char *)(v35 - 57) < 0)
  {
    operator delete(*(void **)(v35 - 80));
    if (v33) {
      goto LABEL_9;
    }
  }
  else if (v33)
  {
LABEL_9:
    dispatch_release(v33);
    if (!v34) {
      goto LABEL_14;
    }
LABEL_13:
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
LABEL_14:
    _Unwind_Resume(a1);
  }
  if (!v34) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void ___ZN16IMSClientManager21updateMessageDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims20MessageEventDelegateEEEP16dispatch_queue_s_block_invoke(uint64_t a1)
{
  __p[0] = 0;
  ImsLock::set(&IMSClientManager::_mutex, (pthread_mutex_t **)__p, (uint64_t)&v25);
  ImsResult::~ImsResult((ImsResult *)&v25);
  uint64_t v3 = IMSClientManager::instance(v2);
  ClientForStacuint64_t k = IMSClientManager::getClientForStack(v3, (void **)(a1 + 32));
  ImsLock::~ImsLock((pthread_mutex_t **)__p);
  if (!ClientForStack) {
    return;
  }
  uint64_t v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    {
LABEL_33:
      uint64_t v16 = ClientForStack[4];
      char v17 = *(NSObject **)(a1 + 96);
      std::string v18 = *(std::__shared_weak_count **)(a1 + 64);
      uint64_t v21 = *(std::__shared_weak_count **)(a1 + 56);
      uint64_t v22 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      IMSWrapperDelegate::addMessageDelegate(v16, a1 + 72, v17, &v21);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      goto LABEL_37;
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "ims.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"holding ", 8);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a1 + 72);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = ClientForStack[5];
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 64);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(char *)(a1 + 95) < 0) {
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
    }
    else {
      std::string v25 = *(std::string *)(a1 + 72);
    }
    *(void *)&long long v26 = v9;
    *((void *)&v26 + ImsBlockQueue::clearBlocks(this[5], 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v11 = (char **)(v7 + 80);
    uint64_t v10 = *(char **)(v7 + 80);
    if (v10)
    {
      while (1)
      {
        while (1)
        {
          std::string v12 = (char **)v10;
          uint64_t v13 = v10 + 32;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v25, (void **)v10 + 4) & 0x80) == 0) {
            break;
          }
          uint64_t v10 = *v12;
          std::string v11 = v12;
          if (!*v12) {
            goto LABEL_24;
          }
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (void **)&v25.__r_.__value_.__l.__data_) & 0x80) == 0)break; {
        std::string v11 = v12 + 1;
        }
        uint64_t v10 = v12[1];
        if (!v10) {
          goto LABEL_24;
        }
      }
      if (*v11) {
        goto LABEL_27;
      }
    }
    else
    {
      std::string v12 = (char **)(v7 + 80);
    }
LABEL_24:
    BOOL v14 = (char *)operator new(0x48uLL);
    *(std::string *)(v14 + 32) = v25;
    memset(&v25, 0, sizeof(v25));
    *(_OWORD *)(v14 + 56) = v26;
    long long v26 = 0uLL;
    *(void *)BOOL v14 = 0;
    *((void *)v14 + ImsBlockQueue::clearBlocks(this[5], 1) = 0;
    *((void *)v14 + 2) = v12;
    void *v11 = v14;
    uint64_t v15 = **(void **)(v7 + 72);
    if (v15)
    {
      *(void *)(v7 + 72) = v15;
      BOOL v14 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 80), (uint64_t *)v14);
    ++*(void *)(v7 + 88);
LABEL_27:
    if (*((void *)&v26 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    goto LABEL_33;
  }
  IMSWrapperDelegate::removeMessageDelegate(ClientForStack[4], (void **)(a1 + 72));
LABEL_37:
  std::string::basic_string[abi:ne180100]<0>(&v25, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v19 = ims::debug((uint64_t)&v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"updated message delegate ", 25);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 32))(v19, a1 + 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" for stack ", 11);
  *(unsigned char *)(v19 + 17) = 0;
  LoggableString::LoggableString(&v20, (const std::string *)(a1 + 32));
  (*(void (**)(uint64_t, std::string *))(*(void *)v19 + 40))(v19, &v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" to ", 4);
  *(unsigned char *)(v19 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1C54213D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c54_ZTSNSt3__110shared_ptrIN3ims20MessageEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v8 = *(NSObject **)(a2 + 96);
  if (v8)
  {
    dispatch_retain(v8);
  }
}

void sub_1C542153C(_Unwind_Exception *exception_object)
{
  long long v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c54_ZTSNSt3__110shared_ptrIN3ims20MessageEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 96);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    long long v4 = *(void **)(a1 + 32);
    operator delete(v4);
  }
}

void IMSClientManager::updateXcapDelegate(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject *a4)
{
  std::string::basic_string[abi:ne180100]<0>(&v19, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(&v18, "");
  uint64_t v8 = ims::debug((uint64_t)&v19, (uint64_t)&v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"will update xcap delegate ", 26);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" for stack ", 11);
  *(unsigned char *)(v8 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)a1);
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" to ", 4);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = *a3;
  uint64_t v9 = (std::__shared_weak_count *)a3[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a4) {
    dispatch_retain(a4);
  }
  memset(&v19, 0, sizeof(v19));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v19 = *(std::string *)a2;
  }
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v18 = *(std::string *)a1;
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN16IMSClientManager18updateXcapDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims17XcapEventDelegateEEEP16dispatch_queue_s_block_invoke;
  v11[3] = &__block_descriptor_tmp_45_0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v12, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string v12 = v18;
  }
  uint64_t v13 = v10;
  BOOL v14 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v15, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string v15 = v19;
  }
  dispatch_object_t object = a4;
  if (a4) {
    dispatch_retain(a4);
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v11);
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (a4) {
    dispatch_release(a4);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C5421924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,dispatch_object_t object,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  if (*(char *)(v35 - 57) < 0)
  {
    operator delete(*(void **)(v35 - 80));
    if (v33) {
      goto LABEL_9;
    }
  }
  else if (v33)
  {
LABEL_9:
    dispatch_release(v33);
    if (!v34) {
      goto LABEL_14;
    }
LABEL_13:
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
LABEL_14:
    _Unwind_Resume(a1);
  }
  if (!v34) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void ___ZN16IMSClientManager18updateXcapDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims17XcapEventDelegateEEEP16dispatch_queue_s_block_invoke(uint64_t a1)
{
  __p[0] = 0;
  ImsLock::set(&IMSClientManager::_mutex, (pthread_mutex_t **)__p, (uint64_t)&v25);
  ImsResult::~ImsResult((ImsResult *)&v25);
  uint64_t v3 = IMSClientManager::instance(v2);
  ClientForStacuint64_t k = IMSClientManager::getClientForStack(v3, (void **)(a1 + 32));
  ImsLock::~ImsLock((pthread_mutex_t **)__p);
  if (!ClientForStack) {
    return;
  }
  uint64_t v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    {
LABEL_33:
      uint64_t v16 = ClientForStack[4];
      char v17 = *(NSObject **)(a1 + 96);
      std::string v18 = *(std::__shared_weak_count **)(a1 + 64);
      uint64_t v21 = *(std::__shared_weak_count **)(a1 + 56);
      uint64_t v22 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      IMSWrapperDelegate::addXcapDelegate(v16, a1 + 72, v17, &v21);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      goto LABEL_37;
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "ims.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"holding ", 8);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a1 + 72);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = ClientForStack[5];
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 64);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(char *)(a1 + 95) < 0) {
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
    }
    else {
      std::string v25 = *(std::string *)(a1 + 72);
    }
    *(void *)&long long v26 = v9;
    *((void *)&v26 + ImsBlockQueue::clearBlocks(this[5], 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v11 = (char **)(v7 + 104);
    uint64_t v10 = *(char **)(v7 + 104);
    if (v10)
    {
      while (1)
      {
        while (1)
        {
          std::string v12 = (char **)v10;
          uint64_t v13 = v10 + 32;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v25, (void **)v10 + 4) & 0x80) == 0) {
            break;
          }
          uint64_t v10 = *v12;
          std::string v11 = v12;
          if (!*v12) {
            goto LABEL_24;
          }
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (void **)&v25.__r_.__value_.__l.__data_) & 0x80) == 0)break; {
        std::string v11 = v12 + 1;
        }
        uint64_t v10 = v12[1];
        if (!v10) {
          goto LABEL_24;
        }
      }
      if (*v11) {
        goto LABEL_27;
      }
    }
    else
    {
      std::string v12 = (char **)(v7 + 104);
    }
LABEL_24:
    BOOL v14 = (char *)operator new(0x48uLL);
    *(std::string *)(v14 + 32) = v25;
    memset(&v25, 0, sizeof(v25));
    *(_OWORD *)(v14 + 56) = v26;
    long long v26 = 0uLL;
    *(void *)BOOL v14 = 0;
    *((void *)v14 + ImsBlockQueue::clearBlocks(this[5], 1) = 0;
    *((void *)v14 + 2) = v12;
    void *v11 = v14;
    uint64_t v15 = **(void **)(v7 + 96);
    if (v15)
    {
      *(void *)(v7 + 96) = v15;
      BOOL v14 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 104), (uint64_t *)v14);
    ++*(void *)(v7 + 112);
LABEL_27:
    if (*((void *)&v26 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    goto LABEL_33;
  }
  IMSWrapperDelegate::removeXcapDelegate(ClientForStack[4], (void **)(a1 + 72));
LABEL_37:
  std::string::basic_string[abi:ne180100]<0>(&v25, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v19 = ims::debug((uint64_t)&v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"updating xcap delegate ", 23);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 32))(v19, a1 + 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" for stack ", 11);
  *(unsigned char *)(v19 + 17) = 0;
  LoggableString::LoggableString(&v20, (const std::string *)(a1 + 32));
  (*(void (**)(uint64_t, std::string *))(*(void *)v19 + 40))(v19, &v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" to ", 4);
  *(unsigned char *)(v19 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1C5421EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c51_ZTSNSt3__110shared_ptrIN3ims17XcapEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v8 = *(NSObject **)(a2 + 96);
  if (v8)
  {
    dispatch_retain(v8);
  }
}

void sub_1C5422010(_Unwind_Exception *exception_object)
{
  long long v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c51_ZTSNSt3__110shared_ptrIN3ims17XcapEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 96);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    long long v4 = *(void **)(a1 + 32);
    operator delete(v4);
  }
}

void IMSClientManager::updateLazuliDelegate(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject **a4)
{
  memset(&v16, 0, sizeof(v16));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v16 = *(std::string *)a2;
  }
  memset(&v15, 0, sizeof(v15));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v15 = *(std::string *)a1;
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN16IMSClientManager20updateLazuliDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims6lazuli12ChatDelegateEEEN8dispatch5queueE_block_invoke;
  v9[3] = &__block_descriptor_tmp_47_0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v10, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::string v10 = v15;
  }
  long long v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v11 = *a3;
  std::string v12 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v16;
  }
  uint64_t v8 = *a4;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v9);
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1C5422268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,dispatch_object_t object)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 73) < 0) {
    operator delete(*(void **)(v28 - 96));
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN16IMSClientManager20updateLazuliDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims6lazuli12ChatDelegateEEEN8dispatch5queueE_block_invoke(uint64_t a1)
{
  v11[0] = 0;
  ImsLock::set(&IMSClientManager::_mutex, (pthread_mutex_t **)v11, (uint64_t)v16);
  ImsResult::~ImsResult((ImsResult *)v16);
  uint64_t v3 = IMSClientManager::instance(v2);
  ClientForStacuint64_t k = (IMSClientRecord *)IMSClientManager::getClientForStack(v3, (void **)(a1 + 32));
  ImsLock::~ImsLock((pthread_mutex_t **)v11);
  if (ClientForStack)
  {
    IMSClientRecord::createLazuliWrapper(ClientForStack);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = (LazuliDelegate *)*((void *)ClientForStack + 6);
    if (v5)
    {
      long long v7 = *(NSObject **)(a1 + 96);
      dispatch_object_t object = v7;
      if (v7)
      {
        dispatch_retain(v7);
        uint64_t v5 = *(void *)(a1 + 56);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(a1 + 64);
      uint64_t v13 = v5;
      BOOL v14 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      LazuliDelegate::addLazuliDelegate((uint64_t)v6, a1 + 72, &object, (uint64_t)&v13);
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      if (object) {
        dispatch_release(object);
      }
    }
    else
    {
      LazuliDelegate::removeLazuliDelegate(v6, (void **)(a1 + 72));
    }
    std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    uint64_t v9 = ims::debug((uint64_t)v16, (uint64_t)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"updating lazuli delegate ", 25);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a1 + 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" for stack ", 11);
    *(unsigned char *)(v9 + 17) = 0;
    LoggableString::LoggableString(&__p, (const std::string *)(a1 + 32));
    (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 40))(v9, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" to ", 4);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
  }
}

void sub_1C542252C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,dispatch_object_t object,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22) {
    std::__shared_weak_count::__release_weak(a22);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c53_ZTSNSt3__110shared_ptrIN3ims6lazuli12ChatDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c21_ZTSN8dispatch5queueE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v8 = *(NSObject **)(a2 + 96);
  *(void *)(a1 + 96) = v8;
  if (v8)
  {
    dispatch_retain(v8);
  }
}

void sub_1C5422678(_Unwind_Exception *exception_object)
{
  long long v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c53_ZTSNSt3__110shared_ptrIN3ims6lazuli12ChatDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c21_ZTSN8dispatch5queueE(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 96);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    long long v4 = *(void **)(a1 + 32);
    operator delete(v4);
  }
}

void IMSClientManager::clientQueue(void **a1@<X0>, NSObject **a2@<X8>)
{
  uint64_t v8 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v8, (uint64_t)v9);
  ImsResult::~ImsResult((ImsResult *)v9);
  uint64_t v5 = IMSClientManager::instance(v4);
  ClientForStacuint64_t k = (NSObject **)IMSClientManager::getClientForStack(v5, a1);
  if (ClientForStack)
  {
    long long v7 = *ClientForStack;
    *a2 = v7;
    if (v7) {
      dispatch_retain(v7);
    }
  }
  else
  {
    *a2 = 0;
  }
  ImsLock::~ImsLock(&v8);
}

void sub_1C542278C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
}

void IMSClientManager::callOnClientQueue(void **a1, void *a2)
{
  uint64_t v9 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v9, (uint64_t)v10);
  ImsResult::~ImsResult((ImsResult *)v10);
  uint64_t v5 = IMSClientManager::instance(v4);
  ClientForStacuint64_t k = (NSObject **)IMSClientManager::getClientForStack(v5, a1);
  if (ClientForStack)
  {
    long long v7 = *ClientForStack;
    if (!v7
      && ((IMSClientManager::instance(0), (uint64_t v8 = sImsDispatchQueue) != 0)
       || (long long v7 = dispatch_queue_create("com.apple.ipTelephony.queue", 0),
           uint64_t v8 = v7,
           (sImsDispatchQueue = (uint64_t)v7) != 0)))
    {
      dispatch_retain(v8);
      dispatch_async(v8, a2);
      dispatch_release(v8);
    }
    else
    {
      dispatch_async(v7, a2);
    }
  }
  ImsLock::~ImsLock(&v9);
}

void sub_1C5422868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
}

void IMSClientManager::callOnClientQueue(void **a1, uint64_t a2)
{
  std::string v15 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v15, (uint64_t)&__p);
  ImsResult::~ImsResult((ImsResult *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "util");
  std::string::basic_string[abi:ne180100]<0>(v22, "");
  uint64_t v4 = ims::debug((uint64_t)&__p, (uint64_t)v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Adding block to client queue for stack ID: ", 43);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, a1);
  uint64_t v5 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p);
  }
  uint64_t v6 = IMSClientManager::instance(v5);
  ClientForStacuint64_t k = (NSObject **)IMSClientManager::getClientForStack(v6, a1);
  if (ClientForStack)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "util");
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    uint64_t v8 = ims::debug((uint64_t)&__p, (uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Adding block to client queue now", 32);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(__p);
    }
    if (*ClientForStack)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "util");
      std::string::basic_string[abi:ne180100]<0>(v22, "");
      uint64_t v9 = ims::debug((uint64_t)&__p, (uint64_t)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Adding block to custom dispatch queue", 37);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      if (SHIBYTE(v18) < 0) {
        operator delete(__p);
      }
      std::string v10 = *ClientForStack;
      std::string __p = (void *)MEMORY[0x1E4F143A8];
      uint64_t v17 = 0x40000000;
      std::string v18 = ___ZN15IMSClientRecord17callOnClientQueueEU13block_pointerFvPS_E_block_invoke;
      uint64_t v19 = &unk_1E6510450;
      uint64_t v20 = a2;
      uint64_t v21 = ClientForStack;
      dispatch_async(v10, &__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "util");
      std::string::basic_string[abi:ne180100]<0>(v22, "");
      uint64_t v11 = ims::debug((uint64_t)&__p, (uint64_t)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Adding block to main dispatch queue", 35);
      *(unsigned char *)(v11 + 17) = 0;
      char v12 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v11 + 17) = 0;
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      if (SHIBYTE(v18) < 0) {
        operator delete(__p);
      }
      IMSClientManager::instance(v12);
      uint64_t v13 = sImsDispatchQueue;
      if (sImsDispatchQueue
        || (uint64_t v13 = dispatch_queue_create("com.apple.ipTelephony.queue", 0), (sImsDispatchQueue = (uint64_t)v13) != 0))
      {
        dispatch_retain(v13);
        char v14 = 0;
      }
      else
      {
        char v14 = 1;
      }
      std::string __p = (void *)MEMORY[0x1E4F143A8];
      uint64_t v17 = 0x40000000;
      std::string v18 = ___ZN15IMSClientRecord17callOnClientQueueEU13block_pointerFvPS_E_block_invoke_2;
      uint64_t v19 = &unk_1E6510478;
      uint64_t v20 = a2;
      uint64_t v21 = ClientForStack;
      dispatch_async(v13, &__p);
      if ((v14 & 1) == 0) {
        dispatch_release(v13);
      }
    }
  }
  ImsLock::~ImsLock(&v15);
}

void sub_1C5422CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pthread_mutex_t *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  ImsLock::~ImsLock(&a10);
  _Unwind_Resume(a1);
}

uint64_t IMSClientManager::delegateForStack(void **a1)
{
  char v12 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v12, (uint64_t)v13);
  ImsResult::~ImsResult((ImsResult *)v13);
  uint64_t v3 = IMSClientManager::instance(v2);
  ClientForStacuint64_t k = (char *)IMSClientManager::getClientForStack(v3, a1);
  if (ClientForStack)
  {
    uint64_t v5 = (uint64_t *)(ClientForStack + 32);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "stack.delegate");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::error((uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"No client record for stack ", 27);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, a1);
    long long v7 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    uint64_t v5 = (uint64_t *)IMSClientManager::instance(v7);
  }
  uint64_t v8 = *v5;
  ImsLock::~ImsLock(&v12);
  return v8;
}

void sub_1C5422E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, pthread_mutex_t *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  ImsLock::~ImsLock(&a16);
  _Unwind_Resume(a1);
}

void IMSClientManager::lazuliDelegateForStack(void **a1@<X0>, void *a2@<X8>)
{
  char v12 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v12, (uint64_t)v13);
  ImsResult::~ImsResult((ImsResult *)v13);
  uint64_t v5 = IMSClientManager::instance(v4);
  ClientForStacuint64_t k = (IMSClientRecord *)IMSClientManager::getClientForStack(v5, a1);
  long long v7 = ClientForStack;
  if (ClientForStack)
  {
    IMSClientRecord::createLazuliWrapper(ClientForStack);
    uint64_t v8 = *((void *)v7 + 7);
    *a2 = *((void *)v7 + 6);
    a2[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "lazuli.delegate");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::error((uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"No client record for stack ", 27);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, a1);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    *a2 = 0;
    a2[1] = 0;
  }
  ImsLock::~ImsLock(&v12);
}

void sub_1C5423000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, pthread_mutex_t *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  ImsLock::~ImsLock(&a16);
  _Unwind_Resume(a1);
}

uint64_t ___ZN16IMSClientManager15callOnMainQueueENSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  char v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

uint64_t __copy_helper_block_e8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void *__destroy_helper_block_e8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

void IMSClientManager::callOnDestinationQueue(NSObject *a1, void *a2)
{
  if (a1) {
    dispatch_async(a1, a2);
  }
  else {
    IMSClientManager::callOnMainQueue((IMSClientManager *)a2);
  }
}

uint64_t IMSClientManager::timerManager(IMSClientManager *this)
{
  return *((void *)this + 4);
}

BOOL IMSClientManager::isEmergencyStack(unsigned __int8 *a1)
{
  uint64_t v1 = a1[23];
  if ((v1 & 0x80u) == 0) {
    uint64_t v2 = a1[23];
  }
  else {
    uint64_t v2 = *((void *)a1 + 1);
  }
  uint64_t v3 = qword_1EBBDB100;
  if (byte_1EBBDB10F >= 0) {
    uint64_t v3 = byte_1EBBDB10F;
  }
  if (v2 != v3) {
    return 0;
  }
  if (byte_1EBBDB10F >= 0) {
    uint64_t v4 = &IMSClientManager::kEmergencyStack;
  }
  else {
    uint64_t v4 = (uint64_t *)IMSClientManager::kEmergencyStack;
  }
  if ((v1 & 0x80) != 0) {
    return memcmp(*(const void **)a1, v4, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v5 = v1 - 1;
  do
  {
    int v7 = *a1++;
    int v6 = v7;
    int v9 = *(unsigned __int8 *)v4;
    uint64_t v4 = (uint64_t *)((char *)v4 + 1);
    int v8 = v9;
    BOOL v11 = v5-- != 0;
    BOOL v12 = v6 == v8;
    BOOL v13 = v6 == v8;
  }
  while (v12 && v11);
  return v13;
}

void IMSClientManager::setBBServerConnection(void *a1)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 1174405120;
  v2[2] = ___ZN16IMSClientManager21setBBServerConnectionENSt3__110shared_ptrI18BBServerConnectionEE_block_invoke;
  v2[3] = &__block_descriptor_tmp_54_0;
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  v2[4] = *a1;
  uint64_t v3 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C542320C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN16IMSClientManager21setBBServerConnectionENSt3__110shared_ptrI18BBServerConnectionEE_block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v7);
  uint64_t v2 = v7;
  uint64_t v3 = *((void *)a1 + 4);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 5);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 360);
  *(void *)(v2 + 352) = v3;
  *(void *)(v2 + 360) = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v6 = v8;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

uint64_t __copy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrI18BBServerConnectionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrI18BBServerConnectionEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void IMSClientManager::addCallEndInfo(void **a1)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 1174405120;
  v2[2] = ___ZN16IMSClientManager14addCallEndInfoEN3xpc4dictE_block_invoke;
  v2[3] = &__block_descriptor_tmp_55;
  uint64_t v1 = *a1;
  xpc_object_t object = v1;
  if (v1) {
    xpc_retain(v1);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v2);
  xpc_release(object);
}

void sub_1C542337C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
}

void ___ZN16IMSClientManager14addCallEndInfoEN3xpc4dictE_block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v6);
  uint64_t v2 = v6;
  xpc_object_t v3 = (xpc_object_t)*((void *)a1 + 4);
  xpc_object_t v5 = v3;
  if (v3)
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v5 = v3;
  }
  IPTelephonyManager::addCallEndInfo(v2, &v5);
  xpc_release(v3);
  uint64_t v4 = v7;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C5423434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  xpc_release(v12);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_object_t v3 = *(NSObject **)(a1 + 48);
  if (v3) {
    dispatch_release(v3);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

void IMSWrapperDelegate::~IMSWrapperDelegate(IMSWrapperDelegate *this)
{
  *((void *)this + 2) = &unk_1F20CC218;
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t vars8;

  IMSWrapperDelegate::~IMSWrapperDelegate(this);
  JUMPOUT(0x1C878E320);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void IMSNullClientDelegate::~IMSNullClientDelegate(IMSNullClientDelegate *this)
{
  *((void *)this + 2) = &unk_1F20CC218;
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t vars8;

  *((void *)this + 2) = &unk_1F20CC218;
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  JUMPOUT(0x1C878E320);
}

uint64_t IMSNullClientDelegate::handleIncomingEvent(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  return result;
}

void non-virtual thunk to'IMSNullClientDelegate::~IMSNullClientDelegate(IMSNullClientDelegate *this)
{
  *((void *)this + ImsBlockQueue::clearBlocks(this[5], 1) = &unk_1F20CC218;
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  IMSNullClientDelegate::~IMSNullClientDelegate((IMSNullClientDelegate *)((char *)this - 8));
}

{
  IMSNullClientDelegate::~IMSNullClientDelegate((IMSNullClientDelegate *)((char *)this - 16));
}

{
  *((void *)this - 4) = &unk_1F20CC218;
  if (*((char *)this - 1) < 0) {
    operator delete(*((void **)this - 3));
  }
}

{
  IMSNullClientDelegate::~IMSNullClientDelegate((IMSNullClientDelegate *)((char *)this - 48));
}

{
  *((void *)this - 5) = &unk_1F20CC218;
  if (*((char *)this - 9) < 0) {
    operator delete(*((void **)this - 4));
  }
}

{
  IMSNullClientDelegate::~IMSNullClientDelegate((IMSNullClientDelegate *)((char *)this - 56));
}

void non-virtual thunk to'IMSNullClientDelegate::~IMSNullClientDelegate(void **this)
{
  *this = &unk_1F20CC218;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t non-virtual thunk to'IMSNullClientDelegate::handleIncomingEvent(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  return result;
}

std::string *ims::ClientHandle::ClientHandle(std::string *a1, long long *a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20CDD90;
  xpc_object_t v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  a1[2].__r_.__value_.__s.__data_[0] = 0;
  return a1;
}

void sub_1C54239DC(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<LazuliDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CBC58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CBC58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliDelegate>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t *std::__tree<std::__value_type<std::string,IMSClientRecord *>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSClientRecord *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSClientRecord *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,IMSClientRecord *>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSClientRecord *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSClientRecord *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,IMSClientRecord *>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSClientRecord *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSClientRecord *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *uint64_t v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  int v8 = (std::string *)(v7 + 32);
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  *((void *)v7 + 7) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C5423BCC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100I13ImsBlockQueueNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x88uLL);
  _ZNSt3__120__shared_ptr_emplaceI13ImsBlockQueueNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_1C5423C38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceI13ImsBlockQueueNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20CBFC8;
  _ZNSt3__112construct_atB8ne180100I13ImsBlockQueueJEPS1_EEPT_S4_DpOT0_((uint64_t)(a1 + 3));
  return a1;
}

void sub_1C5423C94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ImsBlockQueue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CBFC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsBlockQueue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CBFC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<ImsBlockQueue>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t _ZNSt3__112construct_atB8ne180100I13ImsBlockQueueJEPS1_EEPT_S4_DpOT0_(uint64_t a1)
{
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = &unk_1F20C6748;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 24), 0);
  *(void *)(a1 + 88) = a1 + 88;
  *(void *)(a1 + 96) = a1 + 88;
  *(void *)(a1 + 104) = 0;
  return a1;
}

void sub_1C5423DB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<IMSClientManager::createImsClient(std::string const&,dispatch_queue_s *)::ClientWrap,std::allocator<IMSClientManager::createImsClient(std::string const&,dispatch_queue_s *)::ClientWrap>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CBCA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IMSClientManager::createImsClient(std::string const&,dispatch_queue_s *)::ClientWrap,std::allocator<IMSClientManager::createImsClient(std::string const&,dispatch_queue_s *)::ClientWrap>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CBCA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<IMSClientManager::createImsClient(std::string const&,dispatch_queue_s *)::ClientWrap,std::allocator<IMSClientManager::createImsClient(std::string const&,dispatch_queue_s *)::ClientWrap>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void IMSClientManager::createImsClient(std::string const&,dispatch_queue_s *)::ClientWrap::~ClientWrap(void **a1)
{
  ims::ClientHandle::~ClientHandle(a1);
  JUMPOUT(0x1C878E320);
}

void _ZNSt3__115allocate_sharedB8ne180100IN3ims15EmergencyClientENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1@<X8>)
{
  uint64_t v2 = (std::string *)operator new(0x50uLL);
  _ZNSt3__120__shared_ptr_emplaceIN3ims15EmergencyClientENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 1;
  a1[1] = v2;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, &v2[1].__r_.__value_.__l.__size_, (uint64_t)&v2[1]);
}

void sub_1C5423EF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNSt3__120__shared_ptr_emplaceIN3ims15EmergencyClientENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(std::string *a1)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20CBE98;
  ims::ClientHandle::ClientHandle(a1 + 1, (long long *)&IMSClientManager::kEmergencyStack);
  a1[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20CCE90;
  a1[3].__r_.__value_.__s.__data_[0] = 1;
  return a1;
}

void sub_1C5423F80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ims::EmergencyClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CBE98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ims::EmergencyClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CBE98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<ims::EmergencyClient>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20CBEE8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20CBEE8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &unk_1F20CBEE8;
  uint64_t v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_1C5424164(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F20CBEE8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::operator()(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance((uint64_t *)&v7);
  uint64_t v2 = (void *)*((void *)v7 + 21);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "cli.stk.inv");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)&v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Invalidating stack ", 19);
    long long v4 = (unsigned __int8 *)a1 + 8;
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v3 + 32))(v3, v4);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v7);
    }
    BambiClient::invalidateStack(v2, v4);
  }
}

void sub_1C542434C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::target_type()
{
}

void ___ZN13ImsBlockQueue8addBlockINSt3__110shared_ptrI11SipLockableEEEEvRK14LoggableStringT_U13block_pointerFvvE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (ImsBlockQueue *)a1[4];
    long long v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        ImsBlockQueue::executeBlocks(v3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5424440(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN13ImsBlockQueue8addBlockINSt3__110shared_ptrI21MediaSessionInterfaceEEEEvRK14LoggableStringT_U13block_pointerFvvE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (ImsBlockQueue *)a1[4];
    long long v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        ImsBlockQueue::executeBlocks(v3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C54244C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::~ImsCapturableBlock(ImsBlock *a1)
{
  ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::~ImsCapturableBlock(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::perform(uint64_t result)
{
  if (*(void *)(result + 40))
  {
    uint64_t result = *(void *)(result + 32);
    if (result) {
      return (*(uint64_t (**)(void))(result + 16))();
    }
  }
  return result;
}

void ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::~ImsCapturableBlock(ImsBlock *this)
{
  *(void *)this = &unk_1F20CC018;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  ImsBlock::~ImsBlock(this);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1C878E320);
}

uint64_t _GLOBAL__sub_I_IMSClientManager_cpp()
{
  pthread_mutex_init(&IMSClientManager::_mutex, 0);
  __cxa_atexit((void (*)(void *))ImsMutex::~ImsMutex, &IMSClientManager::_mutex, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(IMSClientManager::kDefaultStack, "0224B9FE-9648-11E6-AE22-56B6B6499611");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  __cxa_atexit(MEMORY[0x1E4FBA210], IMSClientManager::kDefaultStack, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&IMSClientManager::kEmergencyStack, "8928DFB0-9B9E-11E6-9F33-A24FC0D9649C");
  return __cxa_atexit(v0, &IMSClientManager::kEmergencyStack, &dword_1C51D1000);
}

uint64_t SipRAckHeader::SipRAckHeader(uint64_t a1, int a2, int a3, const std::string *a4)
{
  uint64_t v8 = SipHeader::SipHeader(a1, (const std::string *)"RAck");
  *(void *)uint64_t v8 = &unk_1F20CC360;
  *(void *)(v8 + 72) = 0;
  *(void *)(v8 + 80) = 0;
  *(void *)(v8 + 88) = 0;
  *(_DWORD *)(v8 + 60) = a2;
  *(_DWORD *)(v8 + 64) = a3;
  std::string::operator=((std::string *)(v8 + 72), a4);
  *(unsigned char *)(a1 + 56) = 0;
  return a1;
}

void sub_1C542476C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v2);
  }
  SipHeader::~SipHeader((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t SipRAckHeader::fromResponse(SipRAckHeader *this, const SipResponse *a2)
{
  long long v4 = SipMessage::header<SipRSeqHeader>((uint64_t)a2);
  uint64_t v5 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a2);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  uint64_t v7 = !v6;
  if (!v6)
  {
    int v8 = *((_DWORD *)v5 + 15);
    *((_DWORD *)this + 15) = v4[15];
    *((_DWORD *)this + 16) = v8;
    std::string::operator=((std::string *)this + 3, (const std::string *)(v5 + 64));
  }
  return v7;
}

void *SipMessage::header<SipRSeqHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "RSeq");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

void *SipMessage::header<SipCSeqHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "CSeq");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

uint64_t SipRAckHeader::encodeValue(SipRAckHeader *this, ImsOutStream *a2)
{
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  long long v4 = (void *)*((void *)a2 + 1);
  char v7 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v7, 1);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v5 = (void *)*((void *)a2 + 1);
  char v8 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v8, 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 72);
  return 1;
}

uint64_t SipRAckHeader::setValueFromString(std::string *a1, const std::string *a2)
{
  memset(v11, 0, sizeof(v11));
  *(_OWORD *)std::string __p = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v4 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v4, a2, 8);
  MEMORY[0x1C878DFD0](&v4, (char *)&a1[2].__r_.__value_.__r.__words[1] + 4);
  MEMORY[0x1C878DFD0](&v4, &a1[2].__r_.__value_.__r.__words[2]);
  a1 += 3;
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v4, (uint64_t)a1);
  ims::chomp(a1, "\r\n\t ", 3);
  *(void *)&long long v4 = *MEMORY[0x1E4FBA410];
  *(void *)((char *)&v4 + *(void *)(v4 - IBISession::~IBISession((IBISession *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v5 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v10) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270]((char *)v11 + 8);
  return 1;
}

void sub_1C5424B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SipRAckHeader::~SipRAckHeader(void **this)
{
  *this = &unk_1F20CC360;
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20CC360;
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipRAckHeader::clone(SipRAckHeader *this)
{
}

void sub_1C5424CBC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v2);
  }
  SipHeader::~SipHeader((void **)v1);
  MEMORY[0x1C878E320](v1, 0x1093C4040100EA9);
  _Unwind_Resume(a1);
}

void SipTimerInfo::~SipTimerInfo(SipTimerInfo *this)
{
  if (*((void *)this + 3))
  {
    double v2 = *((double *)this + 4);
    uint64_t v3 = ims::debug(*((void *)this + 6) + 48, *((void *)this + 6) + 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Canceling system wake for timer ", 32);
    *(unsigned char *)(v3 + 17) = 0;
    ims::CFString::asString(*((const __CFString **)this + 3), (const void *)0x8000100, &v9);
    LoggableString::LoggableString(&__p, &v9);
    (*(void (**)(uint64_t, std::string *))(*(void *)v3 + 40))(v3, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" at ", 4);
    double v4 = v2 + -4.0;
    *(unsigned char *)(v3 + 17) = 0;
    ims::formatTimeAndIntervalFromNow((ims *)(uint64_t)(v4 + *MEMORY[0x1E4F1CF78]), v3, v5);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    CFDateRef v6 = CFDateCreate(0, v4);
    CPCancelWakeAtDateWithIdentifier();
    CFRelease(v6);
    CFRelease(*((CFTypeRef *)this + 3));
    *((void *)this + IBISession::stop(this - 3) = 0;
  }
  long long v7 = *((void *)this + 5);
  if (v7) {
    dispatch_release(v7);
  }
  long long v8 = (SipTimerInfo *)*((void *)this + 11);
  *((void *)this + 1ImsBlockQueue::clearBlocks(this[5], 1) = 0;
  if (v8 == (SipTimerInfo *)((char *)this + 64))
  {
    (*(void (**)(char *))(*((void *)this + 8) + 32))((char *)this + 64);
  }
  else if (v8)
  {
    (*(void (**)(SipTimerInfo *))(*(void *)v8 + 40))(v8);
  }
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((void *)this + 8);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void sub_1C5424F08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __clang_call_terminate(a1);
}

uint64_t SipTimerContainer::fullTimerId@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v24 = 0;
  long long v22 = 0u;
  memset(v23, 0, sizeof(v23));
  *(_OWORD *)std::string __p = 0u;
  long long v21 = 0u;
  memset(v19, 0, sizeof(v19));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  if (a2)
  {
    uint64_t v8 = *(void *)(a1 + 112);
    uint64_t v7 = a1 + 112;
    uint64_t v6 = v8;
    int v9 = *(char *)(v7 + 23);
    if (v9 >= 0) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v6;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(v7 + 23);
    }
    else {
      uint64_t v11 = *(void *)(v7 + 8);
    }
    BOOL v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v10, v11);
    char v25 = 46;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v25, 1);
    BOOL v13 = (void *)std::ostream::operator<<();
    char v25 = 46;
    char v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v25, 1);
    int v15 = *(char *)(a2 + 23);
    if (v15 >= 0) {
      uint64_t v16 = a2;
    }
    else {
      uint64_t v16 = *(void *)a2;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19 + 8, a3);
  *(void *)&v19[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v19 + *(void *)(*(void *)&v19[0] - IBISession::~IBISession((IBISession *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v19[0] + ImsBlockQueue::clearBlocks(this[5], 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v23);
}

void sub_1C542511C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ___ZN12SipTimerInfo10initializeEP17SipTimerContainerb_block_invoke(IMSClientManager *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)(IMSClientManager::instance(a1) + 32) + 32);
  return v1();
}

void SipTimerContainer::SipTimerContainer(SipTimerContainer *this)
{
  *(void *)this = &unk_1F20CC440;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + IBISession::stop(this - 3) = 0u;
  *((_OWORD *)this + 7) = 0u;
  double v2 = (void **)((char *)this + 112);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 8) = 0u;
  ImsUuid::generate((ImsUuid *)&v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v5 = __p;
  }
  if (*((char *)this + 135) < 0) {
    operator delete(*v2);
  }
  *(std::string *)double v2 = v5;
  *((unsigned char *)&v5.__r_.__value_.__s + 2IBISession::stop(this - 3) = 0;
  v5.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v3 = &unk_1F20B3708;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C54252A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 135) < 0) {
    operator delete(*v18);
  }
  if (*(char *)(v15 + 95) < 0) {
    operator delete(*(void **)(v15 + 72));
  }
  if (*(char *)(v15 + 71) < 0) {
    operator delete(*v17);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v16);
  _Unwind_Resume(a1);
}

void SipTimerContainer::~SipTimerContainer(SipTimerContainer *this)
{
  *(void *)this = &unk_1F20CC440;
  *((void *)this + 1IBISession::stop(this - 3) = 0;
  SipTimerContainer::cancelAllTimers(this);
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  SipTimerContainer::~SipTimerContainer(this);
  JUMPOUT(0x1C878E320);
}

void SipTimerContainer::cancelAllTimers(SipTimerContainer *this)
{
  for (uint64_t i = (uint64_t *)*((void *)this + 3); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v3 = ims::debug((uint64_t)this + 48, (uint64_t)this + 72);
    (*(void (**)(void **__return_ptr, SipTimerContainer *))(*(void *)this + 24))(v10, this);
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 40))(v3, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)": canceling timer ", 18);
    *(unsigned char *)(v3 + 17) = 0;
    LoggableString::LoggableString(&__p, (const std::string *)(i + 2));
    (*(void (**)(uint64_t, std::string *))(*(void *)v3 + 40))(v3, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    dispatch_source_cancel(*(dispatch_source_t *)(i[5] + 40));
    uint64_t v5 = *(void *)(IMSClientManager::instance(v4) + 32);
    SipTimerContainer::fullTimerId((uint64_t)this, i[5], v10);
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 24))(v5, v10);
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    uint64_t v6 = (SipTimerInfo *)i[5];
    if (v6)
    {
      SipTimerInfo::~SipTimerInfo(v6);
      MEMORY[0x1C878E320]();
    }
  }
  if (*((void *)this + 4))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(this + 8, *((void ***)this + 3));
    *((void *)this + IBISession::stop(this - 3) = 0;
    uint64_t v7 = *((void *)this + 2);
    if (v7)
    {
      for (uint64_t j = 0; j != v7; ++j)
        *(void *)(*((void *)this + 1) + 8 * j) = 0;
    }
    *((void *)this + 4) = 0;
  }
}

void sub_1C54255D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTimerContainer::startTimer(int8x8_t *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    SipTimerContainer::cancelTimer(a1, (std::string *)a2);
    operator new();
  }
  return 0;
}

void sub_1C5426640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  operator delete(v48);
  _Unwind_Resume(a1);
}

unsigned __int8 *SipTimerContainer::cancelTimer(int8x8_t *a1, std::string *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(&a1[1], (unsigned __int8 *)a2);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = ims::debug((uint64_t)&a1[6], (uint64_t)&a1[9]);
    (*(void (**)(void **__return_ptr, int8x8_t *))(*(void *)a1 + 24))(v8, a1);
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)": canceling timer ", 18);
    *(unsigned char *)(v6 + 17) = 0;
    LoggableString::LoggableString(&__p, a2);
    (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 40))(v6, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    return (unsigned __int8 *)SipTimerContainer::cancelTimer(a1, *((dispatch_source_t **)v5 + 5));
  }
  return result;
}

void sub_1C5426910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTimerContainer::cancelTimer(int8x8_t *this, dispatch_source_t *a2)
{
  uint64_t v4 = *(void *)(IMSClientManager::instance((IMSClientManager *)this) + 32);
  SipTimerContainer::fullTimerId((uint64_t)this, (uint64_t)a2, __p);
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 24))(v4, __p);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  dispatch_source_cancel(a2[5]);
  uint64_t v5 = this + 1;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(&this[1], (unsigned __int8 *)a2);
  if (v6)
  {
    int8x8_t v7 = this[2];
    uint64_t v8 = *(void **)v6;
    unint64_t v9 = *((void *)v6 + 1);
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(v7);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v7) {
        v9 %= *(void *)&v7;
      }
    }
    else
    {
      v9 &= *(void *)&v7 - 1;
    }
    char v11 = *(unsigned __int8 **)(*(void *)v5 + 8 * v9);
    do
    {
      BOOL v12 = (int8x8_t *)v11;
      char v11 = *(unsigned __int8 **)v11;
    }
    while (v11 != v6);
    if (v12 == &this[3]) {
      goto LABEL_21;
    }
    unint64_t v13 = (unint64_t)v12[1];
    if (v10.u32[0] > 1uLL)
    {
      if (v13 >= *(void *)&v7) {
        v13 %= *(void *)&v7;
      }
    }
    else
    {
      v13 &= *(void *)&v7 - 1;
    }
    if (v13 != v9)
    {
LABEL_21:
      if (v8)
      {
        unint64_t v14 = v8[1];
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v15 = v8[1];
          if (v14 >= *(void *)&v7) {
            unint64_t v15 = v14 % *(void *)&v7;
          }
        }
        else
        {
          unint64_t v15 = v14 & (*(void *)&v7 - 1);
        }
        if (v15 == v9) {
          goto LABEL_25;
        }
      }
      *(void *)(*(void *)v5 + 8 * v9) = 0;
      uint64_t v8 = *(void **)v6;
    }
    if (!v8)
    {
LABEL_31:
      int8x8_t *v12 = (int8x8_t)v8;
      *(void *)uint64_t v6 = 0;
      --*(void *)&this[4];
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SipDigestAlgorithm *>,void *>>>::operator()[abi:ne180100](1, (void **)v6);
      goto LABEL_32;
    }
    unint64_t v14 = v8[1];
LABEL_25:
    if (v10.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v7) {
        v14 %= *(void *)&v7;
      }
    }
    else
    {
      v14 &= *(void *)&v7 - 1;
    }
    if (v14 != v9)
    {
      *(void *)(*(void *)v5 + 8 * v14) = v12;
      uint64_t v8 = *(void **)v6;
    }
    goto LABEL_31;
  }
LABEL_32:
  SipTimerInfo::~SipTimerInfo((SipTimerInfo *)a2);
  return MEMORY[0x1C878E320]();
}

void sub_1C5426B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *SipTimerContainer::timerPastDue(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((void *)(a1 + 8), a2);
  if (result)
  {
    uint64_t v3 = *((void *)result + 5);
    if (v3) {
      return (unsigned __int8 *)(*(double *)(v3 + 32) <= CFAbsoluteTimeGetCurrent());
    }
    else {
      return 0;
    }
  }
  return result;
}

void SipTimerContainer::timerFired(int8x8_t *this, std::string *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((*(uint64_t (**)(int8x8_t *))(*(void *)this + 40))(this))
  {
    if (!a2)
    {
      uint64_t v4 = ims::error((uint64_t)&this[6], (uint64_t)&this[9]);
      (*(void (**)(long long *__return_ptr, int8x8_t *))(*(void *)this + 24))(&v11, this);
      (*(void (**)(uint64_t, long long *))(*(void *)v4 + 40))(v4, &v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)": timer fired is NULL", 21);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if ((SBYTE7(v12) & 0x80000000) == 0) {
        return;
      }
      uint64_t v5 = (void *)v11;
      goto LABEL_19;
    }
    memset(&v10, 0, sizeof(v10));
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v10, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else {
      std::string v10 = *a2;
    }
    long long v11 = 0u;
    long long v12 = 0u;
    std::__function::__value_func<void ()(std::string &)>::__value_func[abi:ne180100]((uint64_t)&v11, (uint64_t)&a2[2].__r_.__value_.__r.__words[2]);
    uint64_t v6 = ims::debug((uint64_t)&this[6], (uint64_t)&this[9]);
    (*(void (**)(void **__return_ptr, int8x8_t *))(*(void *)this + 24))(v8, this);
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)": timer ", 8);
    *(unsigned char *)(v6 + 17) = 0;
    LoggableString::LoggableString(&__p, &v10);
    (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 40))(v6, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" fired", 6);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    SipTimerContainer::cancelTimer(this, (dispatch_source_t *)a2);
    if (*((void *)&v12 + 1)) {
      (*(void (**)(void, std::string *))(**((void **)&v12 + 1) + 48))(*((void *)&v12 + 1), &v10);
    }
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](&v11);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v5 = (void *)v10.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v5);
    }
  }
  else
  {
    SipTimerContainer::cancelAllTimers((SipTimerContainer *)this);
  }
}

void sub_1C5426EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](&a28);
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t SipTimerContainer::timersEnabled(SipTimerContainer *this)
{
  uint64_t v1 = (uint64_t (***)(void))*((void *)this + 12);
  if (v1) {
    return (**v1)(v1);
  }
  else {
    return 1;
  }
}

void SipTimerContainer::loggableName(SipTimerContainer *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C54271A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

ImsOutStream *SipTimerContainer::log(SipTimerContainer *this, ImsOutStream *a2)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 3);
  if (v3)
  {
    double v4 = *MEMORY[0x1E4F1CF78];
    do
    {
      uint64_t v5 = v3[5];
      LoggableString::LoggableString(&__p, (const std::string *)(v3 + 2));
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
      *((unsigned char *)a2 + 17) = 0;
      ims::formatTimeAndIntervalFromNow((ims *)(uint64_t)(v4 + *(double *)(v5 + 32)), (uint64_t)a2, v6);
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  return a2;
}

void sub_1C54272F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTimerContainer::startSipTimer(int8x8_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  void v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (SipTimers *)a1[17];
  if (v5)
  {
    uint64_t result = SipTimers::timerValue(v5, (const SipTimer *)a2, a4);
    if (result)
    {
      if (*(char *)(a2 + 31) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
      }
      else {
        std::string __p = *(std::string *)(a2 + 8);
      }
      std::__function::__value_func<void ()(std::string &)>::__value_func[abi:ne180100]((uint64_t)v11, a3);
      SipTimerContainer::startTimer(a1, (uint64_t)&__p);
      std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v11);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v9 = ims::error((uint64_t)&a1[6], (uint64_t)&a1[9]);
    (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)a1 + 24))(&__p, a1);
    (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 40))(v9, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)": startSipTimer: no SIP timer values specified", 46);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  return result;
}

void sub_1C54274CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(std::string &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t _GLOBAL__sub_I_SipTimerContainer_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&kWakeTimerIdPrefix, "com.apple.iptelephony.SystemWake.");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &kWakeTimerIdPrefix, &dword_1C51D1000);
}

void *SipXmlBody::SipXmlBody(void *a1, uint64_t a2)
{
  *a1 = &unk_1F20CC498;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

uint64_t SipXmlBody::contentLength(SipXmlBody *this)
{
  int v2 = *((char *)this + 31);
  if ((v2 & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 31)) {
      goto LABEL_3;
    }
LABEL_6:
    long long v4 = (void **)((char *)this + 8);
    (*(void (**)(long long *__return_ptr, SipXmlBody *))(*(void *)this + 112))(&v5, this);
    if (*((char *)this + 31) < 0) {
      operator delete(*v4);
    }
    *(_OWORD *)long long v4 = v5;
    *((void *)this + IBISession::stop(this - 3) = v6;
    LOBYTE(v2) = *((unsigned char *)this + 31);
    if ((v2 & 0x80) == 0) {
      return v2;
    }
    return *((void *)this + 2);
  }
  if (!*((void *)this + 2)) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v2 & 0x80) == 0) {
    return v2;
  }
  return *((void *)this + 2);
}

uint64_t SipXmlBody::encode(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v4 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 31);
  }
  long long v5 = (void **)(a1 + 8);
  if (!v4)
  {
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 112))(&v7, a1);
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)long long v5 = v7;
    *(void *)(a1 + 24) = v8;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a1 + 8);
}

uint64_t SipXmlBody::decode(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  memset(&v12, 0, sizeof(v12));
  if (a3)
  {
    uint64_t v6 = a3;
    uint64_t v8 = a2 + 4;
    while (1)
    {
      std::string::value_type v9 = std::istream::get();
      std::string::push_back(&v12, v9);
      if (*(_DWORD *)((char *)v8 + *(void *)(*a2 - 24))) {
        break;
      }
      if (!--v6) {
        goto LABEL_5;
      }
    }
    uint64_t v10 = 0;
  }
  else
  {
LABEL_5:
    uint64_t v10 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(void *)a1 + 88))(a1, &v12, a4);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1C54278B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipXmlBody::decode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (bambi::XmlParser *)(a1 + 8);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
  if (!(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 1;
  }
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (!v5) {
    return 1;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  return bambi::XmlParser::parseXml(v4, v6, v7, v8);
}

const char *SipXmlBody::contentType(SipXmlBody *this)
{
  return "text/xml";
}

uint64_t SipXmlBody::rootItem(SipXmlBody *this)
{
  return 0;
}

void MsrpTransportInterface::~MsrpTransportInterface(MsrpTransportInterface *this)
{
  *(void *)this = &unk_1F20CC538;
  *((void *)this + IBISession::stop(this - 3) = &unk_1F20CC578;
  int v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ims::analytics::RCSServerTerminationEvent::create(unsigned int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x90uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_1F20CC630;
  v4[3] = &unk_1F20CC768;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.ca.svrterm");
  ImsLogContainer::ImsLogContainer((uint64_t)(v4 + 4), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v4[3] = &unk_1F20CC680;
  _OWORD v4[4] = &unk_1F20CC6B8;
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v6 = v5;
  uint64_t v7 = v4 + 17;
  if (v5)
  {
    void *v7 = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    void *v7 = v6;
    if (!v6)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_10;
    }
  }
  if (MEMORY[0x1C878F160](v6) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v6);
    goto LABEL_11;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_10:
  void *v7 = v8;
LABEL_11:
  xpc_release(v6);
  xpc_object_t v20 = xpc_int64_create(*a1);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"reason";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v20, &v21);
  xpc_release(v21);
  xpc_object_t v21 = 0;
  xpc_release(v20);
  xpc_object_t v20 = 0;
  xpc_object_t object = xpc_int64_create(a1[1]);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"intervalSeconds";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &object, &v19);
  xpc_release(v19);
  xpc_object_t v19 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_object_t v16 = xpc_BOOL_create(*((unsigned char *)a1 + 8));
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"isServerKeep";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  int64_t v9 = a1[3];
  if (v9)
  {
    xpc_object_t v14 = xpc_int64_create(v9);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"secondsSincePing";
    xpc::dict::object_proxy::operator=((uint64_t)&__p, &v14, &v15);
    xpc_release(v15);
    xpc_object_t v15 = 0;
    xpc_release(v14);
    xpc_object_t v14 = 0;
  }
  int64_t v10 = a1[4];
  if (v10)
  {
    xpc_object_t v12 = xpc_int64_create(v10);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"secondsUntilPing";
    xpc::dict::object_proxy::operator=((uint64_t)&__p, &v12, &v13);
    xpc_release(v13);
    xpc_object_t v13 = 0;
    xpc_release(v12);
  }
  *a2 = v4 + 3;
  a2[1] = v4;
}

void sub_1C5427DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<anonymous namespace'::RCSServerTerminationEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CC630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::RCSServerTerminationEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CC630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::RCSServerTerminationEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::RCSServerTerminationEventImpl::~RCSServerTerminationEventImpl(_anonymous_namespace_::RCSServerTerminationEventImpl *this)
{
  *(void *)this = &unk_1F20CC680;
  *((void *)this + ImsBlockQueue::clearBlocks(this[5], 1) = &unk_1F20CC6B8;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + ImsBlockQueue::clearBlocks(this[5], 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20CC680;
  *((void *)this + ImsBlockQueue::clearBlocks(this[5], 1) = &unk_1F20CC6B8;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + ImsBlockQueue::clearBlocks(this[5], 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  JUMPOUT(0x1C878E320);
}

xpc_object_t anonymous namespace'::RCSServerTerminationEventImpl::getDict@<X0>(_anonymous_namespace_::RCSServerTerminationEventImpl *this@<X0>, void *a2@<X8>)
{
  int v2 = (void *)*((void *)this + 14);
  *a2 = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void *anonymous namespace'::RCSServerTerminationEventImpl::getName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "RCSServerTermination");
}

void non-virtual thunk to'anonymous namespace'::RCSServerTerminationEventImpl::~RCSServerTerminationEventImpl(_anonymous_namespace_::RCSServerTerminationEventImpl *this)
{
  *((void *)this - ImsBlockQueue::clearBlocks(this[5], 1) = &unk_1F20CC680;
  *(void *)this = &unk_1F20CC6B8;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 1IBISession::stop(this - 3) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *((void *)this - ImsBlockQueue::clearBlocks(this[5], 1) = &unk_1F20CC680;
  *(void *)this = &unk_1F20CC6B8;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 1IBISession::stop(this - 3) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1C878E320);
}

uint64_t ImsUdpSocket::ImsUdpSocket(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5 = ImsSocket::ImsSocket(a1, a3);
  *(void *)uint64_t v5 = &unk_1F20CC7A0;
  *(void *)(v5 + 88) = 0;
  *(void *)(v5 + 96) = 0;
  *(void *)(v5 + 80) = &unk_1F20CC868;
  *(unsigned char *)(v5 + 104) = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
    xpc_object_t v8 = *(std::__shared_weak_count **)(a1 + 96);
    *(void *)(a1 + 88) = v6;
    *(void *)(a1 + 96) = v7;
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(void *)(a1 + 88) = v6;
    *(void *)(a1 + 96) = 0;
  }
  return a1;
}

void ImsUdpSocket::socketReadCallback(ImsUdpSocket *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 16), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 16), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void ImsUdpSocket::_handleDataAvailable(ImsUdpSocket *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v20 = 0uLL;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  sockaddr v21 = (sockaddr)0;
  long long v22 = 0u;
  size_t v19 = 0x8000000000;
  ioctl(**((_DWORD **)this + 5), 0x4004667FuLL, &v19);
  int v2 = v19;
  if ((int)v19 >= 0x100000) {
    int v2 = 0x100000;
  }
  if (v2 <= 256) {
    size_t v3 = 256;
  }
  else {
    size_t v3 = v2;
  }
  LODWORD(v19) = v3;
  xpc_object_t v16 = 0;
  xpc_object_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<unsigned char>::vector(&v16, v3);
  ssize_t v4 = recvfrom(**((_DWORD **)this + 5), v16, (int)v19, 128, &v21, (socklen_t *)&v19 + 1);
  if (v4 >= 1)
  {
    IpAddress::createAddress((IpAddress *)&v21, (uint64_t)v14);
    __n128 v11 = *(__n128 *)v14;
    long long v20 = *(_OWORD *)v14;
    if (*((_DWORD *)this + 18))
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v9 = ims::warn((uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"ImsUdpSocket: kDebugDropIncoming set.  Dropping incoming packet.", 64);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
    else
    {
      uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 12);
      if (v5)
      {
        uint64_t v6 = std::__shared_weak_count::lock(v5);
        if (v6)
        {
          uint64_t v7 = *((void *)this + 11);
          if (v7)
          {
            std::string::basic_string[abi:ne180100]<0>(v14, "net");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v8 = ims::spam((uint64_t)v14, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"ImsUdpSocket: handle incoming packet from ", 42);
            *(unsigned char *)(v8 + 17) = 0;
            (*(void (**)(unint64_t, uint64_t, __n128))(*(void *)v11.n128_u64[0] + 40))(v11.n128_u64[0], v8, v11);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)", len = ", 8);
            *(unsigned char *)(v8 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v8 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v8 + 17) = 0;
            if (v13 < 0) {
              operator delete(__p[0]);
            }
            if (v15 < 0) {
              operator delete(v14[0]);
            }
            (*(void (**)(uint64_t, void *, ssize_t, long long *))(*(void *)v7 + 24))(v7, v16, v4, &v20);
LABEL_26:
            std::__shared_weak_count::__release_shared[abi:ne180100](v6);
            goto LABEL_27;
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(v14, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v10 = ims::debug((uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"ImsUdpSocket: No delegate to handle incoming packet from ", 57);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(unint64_t, uint64_t, __n128))(*(void *)v11.n128_u64[0] + 40))(v11.n128_u64[0], v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)". Discarding packet", 19);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      if (v6) {
        goto LABEL_26;
      }
    }
  }
LABEL_27:
  if (v16)
  {
    xpc_object_t v17 = v16;
    operator delete(v16);
  }
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
}

void sub_1C542873C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  if (__p) {
    operator delete(__p);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [9]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C54288B0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsUdpSocket::initialize(uint64_t a1, void *a2, ImsSocket *this, dispatch_object_t *a4, uint64_t a5)
{
  uint64_t v10 = (_DWORD *)a2[5];
  if (v10 && *v10 != -1) {
    (*(void (**)(void *))(*a2 + 8))(a2);
  }
  ImsSocket::setNoSigpipeOptionForSocket(this, (uint64_t)v22);
  ImsResult::~ImsResult((ImsResult *)v22);
  uint64_t result = ImsSocket::_createSocketWithDispatch((uint64_t)a2, (int)this, a4, a5, 1);
  if (result)
  {
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(void *)a1 = &unk_1F20B2680;
    *(void *)(a1 + 8) = &_bambiDomain;
    *(_DWORD *)(a1 + 16) = 0;
  }
  else
  {
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    v16[0] = &unk_1F20B2680;
    v16[1] = &_bambiDomain;
    int v17 = 0x40000000;
    xpc_object_t v12 = (const std::string *)ImsResult::operator<<<char [52]>((uint64_t)v16, "ImsUdpSocket::initialize: unable to create CFSocket");
    ImsResult::ImsResult((ImsResult *)a1, v12);
    ImsResult::~ImsResult((ImsResult *)v16);
    std::string::basic_string[abi:ne180100]<0>(v16, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    char v13 = (unsigned char *)ims::error((uint64_t)v16, (uint64_t)__p);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v13);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v13[17] = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v16[0]);
    }
    return close((int)this);
  }
  return result;
}

void sub_1C5428AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  ImsResult::~ImsResult(v21);
  _Unwind_Resume(a1);
}

void ImsUdpSocket::send(uint64_t a1, uint64_t a2, const void *a3, size_t a4, uint64_t *a5)
{
  size_t v35 = a4;
  uint64_t v7 = *(_DWORD **)(a2 + 40);
  if (!v7 || *v7 == -1)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v28 = &unk_1F20B2680;
    uint64_t v29 = &_bambiDomain;
    int v30 = 1073741827;
    char v13 = (const std::string *)ImsResult::operator<<<char [41]>((uint64_t)&v28, "socket not initialized, can not send to ");
    ImsResult::operator<<<IpAddress>((uint64_t)v13, *a5);
    ImsResult::ImsResult((ImsResult *)a1, v13);
    ImsResult::~ImsResult((ImsResult *)&v28);
    return;
  }
  if ((*(uint64_t (**)(void))(*(void *)*a5 + 88))())
  {
    if ((*(unsigned int (**)(void))(*(void *)*a5 + 56))())
    {
      __n128 v11 = (const sockaddr *)(*(uint64_t (**)(void))(*(void *)*a5 + 72))();
      if ((*(unsigned char *)(a2 + 72) & 2) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v28, "net");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v18 = ims::warn((uint64_t)&v28, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"ImsUdpSocket: kDebugDropOutgoing set.  Dropping outgoing packet.", 64);
        *(unsigned char *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v18 + 17) = 0;
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        if (v31 < 0) {
          operator delete(v28);
        }
        ssize_t v12 = a4;
      }
      else
      {
        ssize_t v12 = sendto(**(_DWORD **)(a2 + 40), a3, a4, 0, v11, v11->sa_len);
      }
      if (v12 == -1)
      {
        int v19 = *__error();
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 56) = 0u;
        *(void *)a1 = &unk_1F20B2680;
        *(void *)(a1 + 8) = &_posixDomain;
        *(_DWORD *)(a1 + 16) = v19;
        return;
      }
      if (v12 == a4)
      {
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 56) = 0u;
        *(void *)a1 = &unk_1F20B2680;
        *(void *)(a1 + 8) = &_bambiDomain;
        *(_DWORD *)(a1 + 16) = 0;
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "net");
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v28 = &unk_1F20B2680;
      uint64_t v29 = &_bambiDomain;
      int v30 = 0x40000000;
      uint64_t v20 = ImsResult::operator<<<char [25]>((uint64_t)&v28, "ImsUdpSocket: only sent ");
      uint64_t v21 = ImsResult::operator<<<long>(v20);
      uint64_t v22 = ImsResult::operator<<<char [5]>(v21, " of ");
      uint64_t v23 = ImsResult::operator<<<unsigned long>(v22);
      uint64_t v24 = ImsResult::operator<<<char [11]>(v23, " bytes to ");
      ImsResult::operator<<<IpAddress>(v24, *a5);
      long long v25 = (const std::string *)ims::result::log((uint64_t)__p, v24);
      ImsResult::ImsResult((ImsResult *)a1, v25);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "net");
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v28 = &unk_1F20B2680;
      uint64_t v29 = &_bambiDomain;
      int v30 = 1073741825;
      uint64_t v16 = ImsResult::operator<<<char [37]>((uint64_t)&v28, "no port specified for remote address");
      int v17 = (const std::string *)ims::result::log((uint64_t)__p, v16);
      ImsResult::ImsResult((ImsResult *)a1, v17);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "net");
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v28 = &unk_1F20B2680;
    uint64_t v29 = &_bambiDomain;
    int v30 = 1073741825;
    uint64_t v14 = ImsResult::operator<<<char [17]>((uint64_t)&v28, "invalid address ");
    ImsResult::operator<<<IpAddress>(v14, *a5);
    char v15 = (const std::string *)ims::result::log((uint64_t)__p, v14);
    ImsResult::ImsResult((ImsResult *)a1, v15);
  }
  ImsResult::~ImsResult((ImsResult *)&v28);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5428FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsResult::operator<<<IpAddress>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    operator new();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v3);
  return a1;
}

void sub_1C54290D4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void ImsUdpSocket::initializeSocket(uint64_t a1@<X0>, uint64_t *a2@<X1>, dispatch_object_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  char v13 = *(const void **)(a5 + 8);
  v30[0] = &unk_1F20E38B0;
  v30[1] = v13;
  if (v13) {
    CFRetain(v13);
  }
  v30[0] = &unk_1F20B3050;
  uint64_t v15 = *a2;
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (const sockaddr *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 72))(v15);
  int sa_family = v16->sa_family;
  *(_DWORD *)(a1 + 64) = sa_family;
  uint64_t v18 = (int *)socket(sa_family, 2, 0);
  int v19 = v18;
  v41[1] = v18;
  if ((v18 & 0x80000000) != 0)
  {
    *(void *)(a7 + 64) = 0;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    int v23 = *__error();
    *(_OWORD *)(a7 + 24) = 0u;
    *(_OWORD *)(a7 + 40) = 0u;
    *(_OWORD *)(a7 + 56) = 0u;
    *(void *)a7 = &unk_1F20B2680;
    *(void *)(a7 + 8) = &_posixDomain;
    *(_DWORD *)(a7 + 16) = v23;
    std::string::basic_string[abi:ne180100]<0>(v39, "net");
    std::string::basic_string[abi:ne180100]<0>(v31, "");
    uint64_t v24 = ims::error((uint64_t)v39, (uint64_t)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"ImsUdpSocket: failed to create socket : ", 40);
    *(unsigned char *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a7 + 16))(a7, v24);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v24 + 17) = 0;
    if (v33 < 0) {
      operator delete(v31[0]);
    }
    if ((v40[7] & 0x80000000) != 0) {
      operator delete(v39[0]);
    }
  }
  else
  {
    v41[0] = 0;
    setsockopt((int)v18, 0xFFFF, 4352, v41, 4u);
    uint64_t v20 = *(unsigned __int8 *)(a6 + 23);
    if ((v20 & 0x80u) != 0) {
      uint64_t v20 = *(void *)(a6 + 8);
    }
    if (v20)
    {
      *(_OWORD *)uint64_t v39 = 0u;
      memset(v40, 0, sizeof(v40));
      char v21 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 136))(v15);
      ImsSocket::bindSocketToInterface(v19, v21, a6, (uint64_t)v39);
      if ((*(unsigned int (**)(void *, void))(*(void *)v39[1] + 24))(v39[1], *(unsigned int *)v40))
      {
        std::string::basic_string[abi:ne180100]<0>(v31, "net");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v22 = ims::error((uint64_t)v31, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"ImsUdpSocket: Unable to bind socket (", 37);
        *(unsigned char *)(v22 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v22 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)") to interface: ", 16);
        *(unsigned char *)(v22 + 17) = 0;
        (*((void (**)(void **, uint64_t))v39[0] + 2))(v39, v22);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v22 + 17) = 0;
        if (v38 < 0) {
          operator delete(__p[0]);
        }
        if (v33 < 0) {
          operator delete(v31[0]);
        }
      }
      ImsResult::~ImsResult((ImsResult *)v39);
    }
    if (bind((int)v19, v16, v16->sa_len) < 0)
    {
      *(void *)int v40 = 0;
      int v25 = *__error();
      memset(&v40[8], 0, 48);
      v39[0] = &unk_1F20B2680;
      v39[1] = &_posixDomain;
      *(_DWORD *)int v40 = v25;
      close((int)v19);
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      v31[0] = &unk_1F20B2680;
      v31[1] = &_bambiDomain;
      int v32 = 0x40000000;
      uint64_t v26 = ImsResult::operator<<<char [9]>((uint64_t)v31, "socket (");
      uint64_t v27 = ImsResult::operator<<<int>(v26);
      uint64_t v28 = ImsResult::operator<<<char [28]>(v27, ") init failed for address: ");
      uint64_t v29 = (const std::string *)ImsResult::operator<<<std::shared_ptr<IpAddress>>(v28, a2);
      ims::result::resultWithCause(v29, (const ImsResult *)v39, a7);
    }
    v39[0] = &unk_1F20B3050;
    v39[1] = 0;
    ImsUdpSocket::initialize(a7, (void *)a1, (ImsSocket *)v19, a3, a4);
    ims::CFType::~CFType((ims::CFType *)v39);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  ims::CFType::~CFType((ims::CFType *)v30);
}

void sub_1C542961C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult((ImsResult *)&a29);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  ims::CFType::~CFType((ims::CFType *)&a9);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ImsUdpSocket::initializeSocket(uint64_t a1@<X0>, uint64_t *a2@<X1>, dispatch_object_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
}

void ImsUdpSocket::initializeSocket(ImsSocket *this@<X1>, void *a2@<X0>, dispatch_object_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  __n128 v11 = *(const void **)(a5 + 8);
  v12[0] = &unk_1F20E38B0;
  v12[1] = v11;
  if (v11) {
    CFRetain(v11);
  }
  v12[0] = &unk_1F20B3050;
  ImsUdpSocket::initialize(a6, a2, this, a3, a4);
  ims::CFType::~CFType((ims::CFType *)v12);
}

void sub_1C54297AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void non-virtual thunk to'ImsUdpSocket::initializeSocket(uint64_t a1@<X0>, ImsSocket *a2@<X1>, dispatch_object_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
}

void ImsUdpSocket::sendOverSocket(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
}

void non-virtual thunk to'ImsUdpSocket::sendOverSocket(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
}

uint64_t ImsUdpSocket::closeSocket(ImsUdpSocket *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 12);
  *((void *)this + 1ImsBlockQueue::clearBlocks(this[5], 1) = 0;
  *((void *)this + 12) = 0;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(uint64_t (**)(ImsUdpSocket *))(*(void *)this + 8);
  return v3(this);
}

uint64_t non-virtual thunk to'ImsUdpSocket::closeSocket(ImsUdpSocket *this)
{
  return ImsUdpSocket::closeSocket((ImsUdpSocket *)((char *)this - 80));
}

double non-virtual thunk to'ImsUdpSocket::isPortReuseAllowed@<D0>(ImsUdpSocket *this@<X0>, uint64_t a2@<X8>)
{
  return ImsSocket::allowPortReuse((ImsUdpSocket *)((char *)this - 80), a2);
}

BOOL ImsUdpSocket::socketInterfaceInitialized(ImsUdpSocket *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 5);
  return v1 && *v1 != -1;
}

BOOL non-virtual thunk to'ImsUdpSocket::socketInterfaceInitialized(ImsUdpSocket *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this - 5);
  return v1 && *v1 != -1;
}

uint64_t ImsUdpSocket::socketLocalAddress@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t non-virtual thunk to'ImsUdpSocket::socketLocalAddress@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this - 48);
  *a2 = *(void *)(this - 56);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void ImsUdpSocket::setSocketLocalAddress(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void non-virtual thunk to'ImsUdpSocket::setSocketLocalAddress(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 - 48);
  *(void *)(a1 - 56) = v3;
  *(void *)(a1 - 48) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t non-virtual thunk to'ImsUdpSocket::socketInterfaceDescriptor(ImsUdpSocket *this)
{
  return ImsSocket::socketDescriptor((ImsUdpSocket *)((char *)this - 80));
}

void ImsUdpSocket::attachDispatchSourceToSocket(ImsUdpSocket *this, NSObject *a2)
{
  ImsSocket::attachDispatchSource(this, a2, (uint64_t)v11);
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  v6[0] = &unk_1F20B2680;
  v6[1] = &_bambiDomain;
  int v7 = 0;
  uint64_t v3 = v12;
  int v4 = v13;
  ImsResult::~ImsResult((ImsResult *)v6);
  ImsResult::~ImsResult((ImsResult *)v11);
  if (v3 == &_bambiDomain && v4 == 0) {
    (*(void (**)(ImsUdpSocket *, uint64_t))(*(void *)this + 136))(this, 1);
  }
}

void non-virtual thunk to'ImsUdpSocket::attachDispatchSourceToSocket(ImsUdpSocket *this, NSObject *a2)
{
}

void ImsUdpSocket::detachDispatchSourceFromSocket(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[5];
  if (v4 && (size_t v5 = *(NSObject **)(v4 + 136)) != 0)
  {
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 1174405120;
    handler[2] = ___ZN12ImsUdpSocket30detachDispatchSourceFromSocketEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
    handler[3] = &__block_descriptor_tmp_41;
    handler[4] = a1;
    handler[5] = v5;
    uint64_t v6 = *(void **)a2;
    if (*(void *)a2) {
      uint64_t v6 = _Block_copy(v6);
    }
    std::string aBlock = v6;
    dispatch_source_set_cancel_handler(v5, handler);
    uint64_t v7 = a1[5];
    if (v7)
    {
      long long v8 = *(NSObject **)(v7 + 136);
      if (v8)
      {
        dispatch_source_cancel(v8);
        *(void *)(a1[5] + 136) = 0;
      }
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
  else
  {
    (*(void (**)(void *, void))(*a1 + 136))(a1, 0);
    if (*(void *)a2)
    {
      long long v9 = *(void (**)(void))(*(void *)a2 + 16);
      v9();
    }
  }
}

uint64_t ___ZN12ImsUdpSocket30detachDispatchSourceFromSocketEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v7, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"ImsUdpSocket: detached from source", 34);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  (*(void (**)(uint64_t, void))(*(void *)v2 + 136))(v2, 0);
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1C5429C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_48c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 48);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_48c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 48);
  if (v1) {
    _Block_release(v1);
  }
}

void non-virtual thunk to'ImsUdpSocket::detachDispatchSourceFromSocket(uint64_t a1, uint64_t a2)
{
}

uint64_t ImsUdpSocket::setIsAttachedToDispatchSource(uint64_t this, char a2)
{
  *(unsigned char *)(this + 104) = a2;
  return this;
}

uint64_t ImsUdpSocket::isAttachedToDispatchSource(ImsUdpSocket *this)
{
  return *((unsigned __int8 *)this + 104);
}

uint64_t non-virtual thunk to'ImsUdpSocket::isAttachedToDispatchSource(ImsUdpSocket *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t ImsUdpSocket::socketDebugMask(ImsUdpSocket *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t non-virtual thunk to'ImsUdpSocket::socketDebugMask(ImsUdpSocket *this)
{
  return *((unsigned int *)this - 2);
}

uint64_t ImsUdpSocket::setSocketDebugMask(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

uint64_t non-virtual thunk to'ImsUdpSocket::setSocketDebugMask(uint64_t this, int a2)
{
  *(_DWORD *)(this - 8) = a2;
  return this;
}

void ImsUdpSocket::setSocketDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v3;
  *(void *)(a1 + 96) = v2;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void non-virtual thunk to'ImsUdpSocket::setSocketDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v2;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void non-virtual thunk to'ImsUdpSocket::setDscpClass(uint64_t a1, int a2)
{
}

void ImsUdpSocket::~ImsUdpSocket(ImsUdpSocket *this)
{
  *(void *)this = &unk_1F20CC7A0;
  *((void *)this + 10) = &unk_1F20CC868;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  ImsSocket::~ImsSocket(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20CC7A0;
  *((void *)this + 10) = &unk_1F20CC868;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  ImsSocket::~ImsSocket(this);
  JUMPOUT(0x1C878E320);
}

void ImsUdpSocket::resetSocketDelegate(ImsUdpSocket *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  *((void *)this + 1ImsBlockQueue::clearBlocks(this[5], 1) = 0;
  *((void *)this + 12) = 0;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void non-virtual thunk to'ImsUdpSocket::~ImsUdpSocket(ImsUdpSocket *this)
{
  uint64_t v1 = (ImsUdpSocket *)((char *)this - 80);
  *((void *)this - 10) = &unk_1F20CC7A0;
  *(void *)this = &unk_1F20CC868;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  ImsSocket::~ImsSocket(v1);
}

{
  ImsSocket *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (ImsUdpSocket *)((char *)this - 80);
  *((void *)this - 10) = &unk_1F20CC7A0;
  *(void *)this = &unk_1F20CC868;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  ImsSocket::~ImsSocket(v1);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'ImsUdpSocket::resetSocketDelegate(ImsUdpSocket *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + ImsBlockQueue::clearBlocks(this[5], 1) = 0;
  *((void *)this + 2) = 0;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t *dispatch::async<ImsUdpSocket::socketReadCallback(void)::$_0>(dispatch_queue_s *,std::unique_ptr<ImsUdpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsUdpSocket::socketReadCallback(void)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v7 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      size_t v5 = v4;
      if (a1[1]) {
        (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_1C542A074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SDPMediaSetup::SDPMediaSetup(uint64_t a1, long long *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "setup");
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20E5C78;
  if (SHIBYTE(v8) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v8;
  }
  *(void *)a1 = &unk_1F20CC988;
  uint64_t v4 = (std::string *)(a1 + 40);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 56) = *((void *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_1C542A180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)uint64_t v15 = v17;
  if (*(char *)(v15 + 39) < 0) {
    operator delete(*v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaSetup::SDPMediaSetup(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else {
    std::string __p = *(std::string *)(a2 + 16);
  }
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20E5C78;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::string *)(a1 + 16) = __p;
  }
  *(void *)a1 = &unk_1F20CC988;
  uint64_t v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_1C542A2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)uint64_t v14 = v16;
  if (*(char *)(v14 + 39) < 0) {
    operator delete(*v15);
  }
  _Unwind_Resume(exception_object);
}

void SDPMediaSetup::~SDPMediaSetup(void **this)
{
  *this = &unk_1F20CC988;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  SDPMediaSetup::~SDPMediaSetup(this);
  JUMPOUT(0x1C878E320);
}

void *SDPMediaSetup::key@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "setup");
}

void SDPMediaSetup::value(SDPMediaSetup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((void *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 7);
  }
}

void SipSessionIdHeader::~SipSessionIdHeader(void **this)
{
  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipSessionIdHeader::clone(SipSessionIdHeader *this)
{
}

void sub_1C542A52C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40EE8ABE80);
  _Unwind_Resume(a1);
}

void BambiAirplaneMode::set(BambiAirplaneMode *this, int a2)
{
  int v4 = *(_DWORD *)this;
  if (a2) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  *(_DWORD *)this = v5;
  std::string::basic_string[abi:ne180100]<0>(&v16, "bambi.apm");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v16, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Airplane mode is ", 17);
  *(unsigned char *)(v6 + 17) = 0;
  if (a2) {
    uint64_t v7 = "Enabled";
  }
  else {
    uint64_t v7 = "Disabled";
  }
  if (a2) {
    uint64_t v8 = 7;
  }
  else {
    uint64_t v8 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v16);
  }
  long long v9 = (BambiClient *)*((void *)this + 1);
  if (v9 && v4 && v4 != *(_DWORD *)this)
  {
    BambiClient::sipStacks(v9, (uint64_t *)&v16);
    long long v10 = (char *)v16;
    __n128 v11 = v17;
    if (v16 != v17)
    {
      do
      {
        ssize_t v12 = *(SipStack **)v10;
        int v13 = (std::__shared_weak_count *)*((void *)v10 + 1);
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipStack::handleDeviceEvents(v12, 2);
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        v10 += 16;
      }
      while (v10 != v11);
    }
    __p[0] = &v16;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_1C542A6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFHTTPMessage *HttpResponse::serialize(HttpResponse *this)
{
  uint64_t v11 = 0;
  CFStringRef v12 = 0;
  ims::CFString::CFString(&v11, (char *)this + 88, 0x8000100u);
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v3 = *((void *)this + 10);
  if (*((char *)this + 111) < 0) {
    uint64_t v4 = *((void *)this + 12);
  }
  else {
    uint64_t v4 = *((unsigned __int8 *)this + 111);
  }
  CFStringRef v5 = v12;
  int v6 = std::string::compare((const std::string *)((char *)this + 32), "1.0");
  uint64_t v7 = (CFStringRef *)MEMORY[0x1E4F18F88];
  if (v6) {
    uint64_t v7 = (CFStringRef *)MEMORY[0x1E4F18F90];
  }
  if (v4) {
    CFStringRef v8 = v5;
  }
  else {
    CFStringRef v8 = 0;
  }
  Response = CFHTTPMessageCreateResponse(v2, v3, v8, *v7);
  HttpMessage::serialize(this, Response);
  ims::CFType::~CFType((ims::CFType *)&v11);
  return Response;
}

void sub_1C542A80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t HttpResponse::deserialize(HttpResponse *this, CFHTTPMessageRef response)
{
  *((void *)this + 10) = CFHTTPMessageGetResponseStatusCode(response);
  return HttpMessage::deserialize(this, response);
}

void HttpResponse::clone(HttpResponse *this)
{
}

void sub_1C542A9B0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v2);
  }
  HttpMessage::~HttpMessage((void **)v1);
  MEMORY[0x1C878E320](v1, 0x10B3C40D5370DC4);
  _Unwind_Resume(a1);
}

uint64_t HttpResponse::isRequest(HttpResponse *this)
{
  return 0;
}

void ims::ClientHandle::~ClientHandle(void **this)
{
  *this = &unk_1F20CDD90;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  CFAllocatorRef v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  uint64_t vars8;

  ims::ClientHandle::~ClientHandle(this);
  JUMPOUT(0x1C878E320);
}

void ims::ClientHandle::addStackDelegate(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject *a4)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = a1 + 24;
  uint64_t v6 = *a3;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IMSClientManager::updateStackDelegate(v5, a2, &v6, a4);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C542AAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::addDefaultCallDelegate(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject *a4)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = a1 + 24;
  uint64_t v6 = *a3;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IMSClientManager::updateCallDelegate(v5, a2, &v6, a4);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C542AB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::addCallManagerDelegate(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject *a4)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = a1 + 24;
  uint64_t v6 = *a3;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IMSClientManager::updateManagerDelegate(v5, a2, &v6, a4);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C542ABC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::addMessageDelegate(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject *a4)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = a1 + 24;
  uint64_t v6 = *a3;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IMSClientManager::updateMessageDelegate(v5, a2, &v6, a4);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C542AC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::addXcapDelegate(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject *a4)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = a1 + 24;
  uint64_t v6 = *a3;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IMSClientManager::updateXcapDelegate(v5, a2, &v6, a4);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C542AC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::addLazuliDelegate(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject **a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v6 = a1 + 24;
  uint64_t v9 = *a3;
  long long v10 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *a4;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  IMSClientManager::updateLazuliDelegate(v6, a2, &v9, &object);
  if (object) {
    dispatch_release(object);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C542AD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, std::__shared_weak_count *a12)
{
  if (object) {
    dispatch_release(object);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::removeStackDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  CFIndex v3 = 0;
  IMSClientManager::updateStackDelegate(a1 + 24, a2, &v2, 0);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C542AD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::removeMessageDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  CFIndex v3 = 0;
  IMSClientManager::updateMessageDelegate(a1 + 24, a2, &v2, 0);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C542ADF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::removeCallManagerDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  CFIndex v3 = 0;
  IMSClientManager::updateManagerDelegate(a1 + 24, a2, &v2, 0);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C542AE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::removeDefaultCallDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  CFIndex v3 = 0;
  IMSClientManager::updateCallDelegate(a1 + 24, a2, &v2, 0);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C542AEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::removeXcapDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  CFIndex v3 = 0;
  IMSClientManager::updateXcapDelegate(a1 + 24, a2, &v2, 0);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C542AF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::removeLazuliDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  dispatch_object_t object = 0;
  IMSClientManager::updateLazuliDelegate(a1 + 24, a2, &v3, &object);
  if (object) {
    dispatch_release(object);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C542AF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, std::__shared_weak_count *a12)
{
  if (object) {
    dispatch_release(object);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::setStackDelegate(ims::ClientHandle *this, ims::StackEventDelegate *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "delegate.stack.");
  uint64_t v5 = (const std::string::value_type *)*((void *)this + 3);
  uint64_t v4 = (char *)this + 24;
  uint64_t v3 = v5;
  int v6 = v4[23];
  if (v6 >= 0) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v3;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = v4[23];
  }
  else {
    std::string::size_type v8 = *((void *)v4 + 1);
  }
  uint64_t v9 = std::string::append(&v11, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  operator new();
}

void sub_1C542B0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::setDefaultCallDelegate(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&v10, "delegate.call.");
  uint64_t v4 = *(const std::string::value_type **)(a1 + 24);
  uint64_t v3 = a1 + 24;
  uint64_t v2 = v4;
  int v5 = *(char *)(v3 + 23);
  if (v5 >= 0) {
    int v6 = (const std::string::value_type *)v3;
  }
  else {
    int v6 = v2;
  }
  if (v5 >= 0) {
    std::string::size_type v7 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    std::string::size_type v7 = *(void *)(v3 + 8);
  }
  std::string::size_type v8 = std::string::append(&v10, v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  operator new();
}

void sub_1C542B280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::setCallManagerDelegate(ims::ClientHandle *this, ims::CallManagerEventDelegate *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "delegate.callManager.");
  int v5 = (const std::string::value_type *)*((void *)this + 3);
  uint64_t v4 = (char *)this + 24;
  uint64_t v3 = v5;
  int v6 = v4[23];
  if (v6 >= 0) {
    std::string::size_type v7 = v4;
  }
  else {
    std::string::size_type v7 = v3;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = v4[23];
  }
  else {
    std::string::size_type v8 = *((void *)v4 + 1);
  }
  long long v9 = std::string::append(&v11, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  operator new();
}

void sub_1C542B438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::setMessageDelegate(ims::ClientHandle *this, ims::MessageEventDelegate *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "delegate.message.");
  int v5 = (const std::string::value_type *)*((void *)this + 3);
  uint64_t v4 = (char *)this + 24;
  uint64_t v3 = v5;
  int v6 = v4[23];
  if (v6 >= 0) {
    std::string::size_type v7 = v4;
  }
  else {
    std::string::size_type v7 = v3;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = v4[23];
  }
  else {
    std::string::size_type v8 = *((void *)v4 + 1);
  }
  long long v9 = std::string::append(&v11, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  operator new();
}

void sub_1C542B5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::setXcapDelegate(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&v10, "delegate.xcap.");
  uint64_t v4 = *(const std::string::value_type **)(a1 + 24);
  uint64_t v3 = a1 + 24;
  uint64_t v2 = v4;
  int v5 = *(char *)(v3 + 23);
  if (v5 >= 0) {
    int v6 = (const std::string::value_type *)v3;
  }
  else {
    int v6 = v2;
  }
  if (v5 >= 0) {
    std::string::size_type v7 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    std::string::size_type v7 = *(void *)(v3 + 8);
  }
  std::string::size_type v8 = std::string::append(&v10, v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  operator new();
}

void sub_1C542B798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::Client::initialize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 256))(a1, a1 + 24, a2);
}

void ims::Client::initialize()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  bzero(&v52, 0x2E0uLL);
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)v54);
  memset(v56, 0, sizeof(v56));
  memset(v55, 0, sizeof(v55));
  __int16 v57 = 257;
  *(_DWORD *)&v58[4] = 0;
  *(_WORD *)&v58[8] = 256;
  v58[10] = 1;
  memset(&v51, 0, sizeof(v51));
  if (*(char *)(v5 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(v5 + 24), *(void *)(v5 + 32));
  }
  else {
    std::string v51 = *(std::string *)(v5 + 24);
  }
  memset(&v50, 0, sizeof(v50));
  if (*(char *)(v4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
  }
  else {
    std::string v50 = *(std::string *)v4;
  }
  ims::NetworkConfig::operator=((uint64_t)v54, v2 + 24);
  std::string::operator=(v55, (const std::string *)(v2 + 616));
  std::string::operator=(&v55[1], (const std::string *)(v2 + 640));
  std::string::operator=(v56, (const std::string *)(v2 + 664));
  std::string::operator=(&v56[1], (const std::string *)(v2 + 688));
  __int16 v57 = *(_WORD *)(v2 + 712);
  *(_DWORD *)&v58[4] = *(_DWORD *)(v2 + 724);
  v58[8] = *(unsigned char *)(v2 + 728);
  *(_WORD *)&v58[9] = *(_WORD *)(v2 + 729);
  CFTypeRef v6 = *(CFTypeRef *)v2;
  if (*(void *)v2)
  {
    CFTypeRef cf = *(CFTypeRef *)v2;
    CFRetain(v6);
    char v48 = &unk_1F20E3A10;
    v39[0] = MEMORY[0x1E4F143A8];
    v39[1] = 1174405120;
    void v39[2] = ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke;
    v39[3] = &__block_descriptor_tmp_42;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v40, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
    }
    else {
      std::string v40 = v51;
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v50;
    }
    long long v42 = v52;
    uint64_t v43 = v53;
    ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v44, (const ims::NetworkConfig *)v54);
    ims::DeviceConfig::DeviceConfig(v45, (long long *)v55);
    *(_DWORD *)((char *)v46 + 7) = *(_DWORD *)&v58[7];
    v46[0] = *(void *)v58;
    v47[0] = &unk_1F20E38B0;
    v47[1] = cf;
    if (cf) {
      CFRetain(cf);
    }
    v47[0] = &unk_1F20E3A10;
    IMSClientManager::callOnMainQueue((IMSClientManager *)v39);
    ims::CFType::~CFType((ims::CFType *)v47);
    ims::StackConfig::~StackConfig((void **)&v42);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_59;
    }
    long long v9 = (void *)v40.__r_.__value_.__r.__words[0];
LABEL_24:
    operator delete(v9);
LABEL_59:
    ims::CFType::~CFType((ims::CFType *)&v48);
    goto LABEL_60;
  }
  std::string::size_type v7 = *(const void **)(v2 + 8);
  if (v7)
  {
    CFTypeRef cf = *(CFTypeRef *)(v2 + 8);
    CFRetain(v7);
    char v48 = &unk_1F20E3A10;
    std::string::size_type v8 = *(const void **)(v2 + 16);
    if (v8)
    {
      CFTypeRef v38 = *(CFTypeRef *)(v2 + 16);
      CFRetain(v8);
      uint64_t v37 = &unk_1F20E3A10;
      v27[0] = MEMORY[0x1E4F143A8];
      v27[1] = 1174405120;
      v27[2] = ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke_6;
      _OWORD v27[3] = &__block_descriptor_tmp_7_1;
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v28, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
      }
      else {
        std::string v28 = v51;
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v29, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
      }
      else {
        std::string v29 = v50;
      }
      long long v30 = v52;
      uint64_t v31 = v53;
      ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v32, (const ims::NetworkConfig *)v54);
      ims::DeviceConfig::DeviceConfig(v33, (long long *)v55);
      *(_DWORD *)((char *)v34 + 7) = *(_DWORD *)&v58[7];
      v34[0] = *(void *)v58;
      v35[0] = &unk_1F20E38B0;
      v35[1] = cf;
      if (cf) {
        CFRetain(cf);
      }
      v35[0] = &unk_1F20E3A10;
      v36[0] = &unk_1F20E38B0;
      v36[1] = v38;
      if (v38) {
        CFRetain(v38);
      }
      v36[0] = &unk_1F20E3A10;
      IMSClientManager::callOnMainQueue((IMSClientManager *)v27);
      ims::CFType::~CFType((ims::CFType *)v36);
      ims::CFType::~CFType((ims::CFType *)v35);
      ims::StackConfig::~StackConfig((void **)&v30);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      ims::CFType::~CFType((ims::CFType *)&v37);
      goto LABEL_59;
    }
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 1174405120;
    void v18[2] = ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke_8;
    v18[3] = &__block_descriptor_tmp_11_5;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v19, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
    }
    else {
      std::string v19 = v51;
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v20, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
    }
    else {
      std::string v20 = v50;
    }
    long long v21 = v52;
    uint64_t v22 = v53;
    ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v23, (const ims::NetworkConfig *)v54);
    ims::DeviceConfig::DeviceConfig(v24, (long long *)v55);
    *(_DWORD *)((char *)v25 + 7) = *(_DWORD *)&v58[7];
    v25[0] = *(void *)v58;
    v26[0] = &unk_1F20E38B0;
    v26[1] = cf;
    if (cf) {
      CFRetain(cf);
    }
    v26[0] = &unk_1F20E3A10;
    IMSClientManager::callOnMainQueue((IMSClientManager *)v18);
    ims::CFType::~CFType((ims::CFType *)v26);
    ims::StackConfig::~StackConfig((void **)&v21);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_59;
    }
    long long v9 = (void *)v19.__r_.__value_.__r.__words[0];
    goto LABEL_24;
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  uint64_t v10[2] = ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke_12;
  void v10[3] = &__block_descriptor_tmp_13;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v11, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  }
  else {
    std::string v11 = v51;
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v12, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  }
  else {
    std::string v12 = v50;
  }
  long long v13 = v52;
  uint64_t v14 = v53;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v15, (const ims::NetworkConfig *)v54);
  ims::DeviceConfig::DeviceConfig(v16, (long long *)v55);
  *(_DWORD *)((char *)v17 + 7) = *(_DWORD *)&v58[7];
  v17[0] = *(void *)v58;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v10);
  ims::StackConfig::~StackConfig((void **)&v13);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
LABEL_60:
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  ims::StackConfig::~StackConfig((void **)&v52);
}

void sub_1C542C0E0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  ims::CFType::~CFType((ims::CFType *)&STACK[0xD10]);
  if (SLOBYTE(STACK[0xD37]) < 0) {
    operator delete((void *)STACK[0xD20]);
  }
  if (SLOBYTE(STACK[0xD57]) < 0) {
    operator delete((void *)STACK[0xD40]);
  }
  ims::StackConfig::~StackConfig((void **)&STACK[0xD60]);
  _Unwind_Resume(a1);
}

void ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke(uint64_t a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IPTelephonyManager::initializeFromSIM(v3, a1 + 32, (std::string *)(a1 + 56), a1 + 80, *(void *)(a1 + 824));
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542C39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c23_ZTSN3ims11StackConfigE816c24_ZTSN3ims12CFDictionaryE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(a1 + 104), (const ims::NetworkConfig *)(a2 + 104));
  ims::DeviceConfig::DeviceConfig((std::string *)(a1 + 696), (long long *)(a2 + 696));
  uint64_t v7 = *(void *)(a2 + 800);
  *(_DWORD *)(a1 + 807) = *(_DWORD *)(a2 + 807);
  *(void *)(a1 + 800) = v7;
  *(void *)(a1 + 816) = &unk_1F20E38B0;
  CFTypeRef result = *(CFTypeRef *)(a2 + 824);
  *(void *)(a1 + 824) = result;
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(void *)(a1 + 816) = &unk_1F20E3A10;
  return result;
}

void sub_1C542C4DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c23_ZTSN3ims11StackConfigE816c24_ZTSN3ims12CFDictionaryE(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 80);
  ims::CFType::~CFType((ims::CFType *)(a1 + 816));
  ims::StackConfig::~StackConfig(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    operator delete(v3);
  }
}

void ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke_6(uint64_t a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IPTelephonyManager::initializeFromSIM(v3, a1 + 32, (std::string *)(a1 + 56), a1 + 80);
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542C620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c23_ZTSN3ims11StackConfigE816c24_ZTSN3ims12CFDictionaryE832c24_ZTSN3ims12CFDictionaryE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(a1 + 104), (const ims::NetworkConfig *)(a2 + 104));
  ims::DeviceConfig::DeviceConfig((std::string *)(a1 + 696), (long long *)(a2 + 696));
  uint64_t v7 = *(void *)(a2 + 800);
  *(_DWORD *)(a1 + 807) = *(_DWORD *)(a2 + 807);
  *(void *)(a1 + 800) = v7;
  *(void *)(a1 + 816) = &unk_1F20E38B0;
  std::string::size_type v8 = *(const void **)(a2 + 824);
  *(void *)(a1 + 824) = v8;
  if (v8) {
    CFRetain(v8);
  }
  *(void *)(a1 + 816) = &unk_1F20E3A10;
  *(void *)(a1 + 832) = &unk_1F20E38B0;
  CFTypeRef result = *(CFTypeRef *)(a2 + 840);
  *(void *)(a1 + 840) = result;
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(void *)(a1 + 832) = &unk_1F20E3A10;
  return result;
}

void sub_1C542C7A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c23_ZTSN3ims11StackConfigE816c24_ZTSN3ims12CFDictionaryE832c24_ZTSN3ims12CFDictionaryE(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 80);
  uint64_t v3 = (ims::CFType *)(a1 + 816);
  ims::CFType::~CFType((ims::CFType *)(a1 + 832));
  ims::CFType::~CFType(v3);
  ims::StackConfig::~StackConfig(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    long long v4 = *(void **)(a1 + 32);
    operator delete(v4);
  }
}

void ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke_8(uint64_t a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IPTelephonyManager::initializeFromSIM(v3, a1 + 32, (std::string *)(a1 + 56), a1 + 80);
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542C914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke_12(uint64_t a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IPTelephonyManager::initializeFromSIM(v3, a1 + 32, (std::string *)(a1 + 56), a1 + 80, 0);
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542C9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *__copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c23_ZTSN3ims11StackConfigE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(a1 + 104), (const ims::NetworkConfig *)(a2 + 104));
  CFTypeRef result = ims::DeviceConfig::DeviceConfig((std::string *)(a1 + 696), (long long *)(a2 + 696));
  uint64_t v8 = *(void *)(a2 + 800);
  *(_DWORD *)(a1 + 807) = *(_DWORD *)(a2 + 807);
  *(void *)(a1 + 800) = v8;
  return result;
}

void sub_1C542CA90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c23_ZTSN3ims11StackConfigE(uint64_t a1)
{
  ims::StackConfig::~StackConfig((void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void ims::Client::initializeLimitedAccess(ims::Client *this, const ims::NetworkConfig *a2)
{
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *((long long **)a2 + 60), *((long long **)a2 + 61), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 61) - *((void *)a2 + 60)) >> 3));
  memset(&v11, 0, sizeof(v11));
  if (*((char *)a2 + 431) < 0) {
    std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)a2 + 51), *((void *)a2 + 52));
  }
  else {
    std::string v11 = *(std::string *)((unsigned char *)a2 + 17);
  }
  memset(&v10, 0, sizeof(v10));
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v10 = *(std::string *)((unsigned char *)this + 1);
  }
  int v4 = *((_DWORD *)a2 + 54);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  void v5[2] = ___ZN3ims6Client23initializeLimitedAccessERKNS_13NetworkConfigE_block_invoke;
  _OWORD v5[3] = &__block_descriptor_tmp_14_2;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v6, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else {
    std::string v6 = v10;
  }
  int v9 = v4;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v11;
  }
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  IMSClientManager::callOnMainQueue((IMSClientManager *)v5);
  long long v13 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
}

void sub_1C542CD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v34 - 57) < 0) {
    operator delete(*(void **)(v34 - 80));
  }
  *(void *)(v34 - 80) = v34 - 48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 80));
  _Unwind_Resume(a1);
}

void ___ZN3ims6Client23initializeLimitedAccessERKNS_13NetworkConfigE_block_invoke(unsigned int *a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IPTelephonyManager::initiateLimitedAccessRegister(v3, (uint64_t)(a1 + 8), a1[26], (uint64_t)(a1 + 14), (uint64_t)(a1 + 20));
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542CE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *__copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c89_ZTSNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 80), *(long long **)(a2 + 80), *(long long **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
}

void sub_1C542CF04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c89_ZTSNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEE(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void ims::Client::deinitialize(ims::Client *this, char a2)
{
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v6 = *(std::string *)((unsigned char *)this + 1);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  void v3[2] = ___ZN3ims6Client12deinitializeEb_block_invoke;
  v3[3] = &__block_descriptor_tmp_15_0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  char v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C542D084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 25) < 0) {
    operator delete(*(void **)(v18 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ims6Client12deinitializeEb_block_invoke(unsigned __int8 *a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IPTelephonyManager::deinitialize(v3, (uint64_t)(a1 + 32), 0, a1[56]);
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542D128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::Client::shutdown(uint64_t a1, void **a2)
{
  memset(&v7, 0, sizeof(v7));
  if (*(char *)(a1 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else {
    std::string v7 = *(std::string *)(a1 + 24);
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  _OWORD v4[2] = ___ZN3ims6Client8shutdownEN3xpc4dictE_block_invoke;
  v4[3] = &__block_descriptor_tmp_16_0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v7;
  }
  uint64_t v3 = *a2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v4);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_1C542D258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, xpc_object_t object)
{
  if (*(char *)(v19 - 25) < 0) {
    operator delete(*(void **)(v19 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ims6Client8shutdownEN3xpc4dictE_block_invoke(uint64_t a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  uint64_t v2 = v5;
  xpc_object_t v3 = *(xpc_object_t *)(a1 + 56);
  if (v3) {
    xpc_retain(*(xpc_object_t *)(a1 + 56));
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  BambiClient::shutdownStack(*(void **)(v2 + 168), (unsigned __int8 *)(a1 + 32));
  xpc_release(v3);
  long long v4 = v6;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C542D344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  xpc_release(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  long long v4 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  std::string v6 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v6;
  if (v6) {
    return xpc_retain(v6);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 56) = result;
  return result;
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void ims::ClientHandle::dumpState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(&v8, 0, sizeof(v8));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v8 = *(std::string *)a2;
  }
  memset(&v7, 0, sizeof(v7));
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v7 = *(std::string *)a3;
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  _OWORD v4[2] = ___ZNK3ims12ClientHandle9dumpStateERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9__block_invoke;
  v4[3] = &__block_descriptor_tmp_17_3;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v5, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  }
  else {
    std::string v5 = v8;
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v7;
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_1C542D5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (*(char *)(v30 - 25) < 0) {
    operator delete(*(void **)(v30 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims12ClientHandle9dumpStateERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9__block_invoke(uint64_t a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IPTelephonyManager::dumpState(v3, (const std::string *)(a1 + 32), a1 + 56);
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542D670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  std::string v5 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1C542D710(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void ims::ClientHandle::qosEstablished(uint64_t a1, uint64_t a2)
{
  long long v6 = 0;
  std::string v7 = 0;
  uint64_t v8 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v6, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 1174405120;
  v2[2] = ___ZNK3ims12ClientHandle14qosEstablishedERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke;
  v2[3] = &__block_descriptor_tmp_18_4;
  long long v4 = 0;
  uint64_t v5 = 0;
  std::string __p = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v6, (uint64_t)v7, (v7 - (unsigned char *)v6) >> 2);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v2);
  if (__p)
  {
    long long v4 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    std::string v7 = v6;
    operator delete(v6);
  }
}

void sub_1C542D850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v16 = *(void **)(v14 - 40);
  if (v16)
  {
    *(void *)(v14 - 32) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims12ClientHandle14qosEstablishedERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke(int **a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IMSCallManager::handleQualityOfServiceEstablished(*(void **)(v3 + 200), a1 + 4);
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542D8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2, *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
}

void __destroy_helper_block_e8_32c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void ims::ClientHandle::qosEstablishedForBearer(uint64_t a1, int a2, char a3, uint64_t a4)
{
  long long v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&v13, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 1);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  uint64_t v7[2] = ___ZN3ims12ClientHandle23qosEstablishedForBearerEjbRKNSt3__16vectorItNS1_9allocatorItEEEE_block_invoke;
  void v7[3] = &__block_descriptor_tmp_19_2;
  int v11 = a2;
  char v12 = a3;
  void v7[4] = a1;
  std::string __p = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p, v13, (uint64_t)v14, (v14 - (unsigned char *)v13) >> 1);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v7);
  if (__p)
  {
    int v9 = __p;
    operator delete(__p);
  }
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
}

void sub_1C542DA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v17 = *(void **)(v15 - 56);
  if (v17)
  {
    *(void *)(v15 - 48) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ims12ClientHandle23qosEstablishedForBearerEjbRKNSt3__16vectorItNS1_9allocatorItEEEE_block_invoke(uint64_t a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IMSCallManager::handleQualityOfServiceEstablished(*(void **)(v3 + 200), *(_DWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 68), (void *)(a1 + 40));
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542DAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__16vectorItNS_9allocatorItEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = (void *)(a1 + 40);
  v2[2] = 0;
  return std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v2, *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 1);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__16vectorItNS_9allocatorItEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ims::ClientHandle::qosRevoked(ims::ClientHandle *this, int a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN3ims12ClientHandle10qosRevokedEj_block_invoke;
  v2[3] = &__block_descriptor_tmp_20_0;
  int v3 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v2);
}

void ___ZN3ims12ClientHandle10qosRevokedEj_block_invoke(unsigned int *a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IMSCallManager::handleQualityOfServiceRevoked(*(IMSCallManager **)(v3 + 200), a1[8]);
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542DBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *ims::Client::Client(std::string *this)
{
  xpc_object_t result = ims::ClientHandle::ClientHandle(this, (long long *)IMSClientManager::kDefaultStack);
  result->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20CDBF0;
  result[2].__r_.__value_.__l.__size_ = 0;
  result[2].__r_.__value_.__r.__words[2] = 0;
  return result;
}

{
  std::string *result;

  xpc_object_t result = ims::ClientHandle::ClientHandle(this, (long long *)IMSClientManager::kDefaultStack);
  result->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20CDBF0;
  result[2].__r_.__value_.__l.__size_ = 0;
  result[2].__r_.__value_.__r.__words[2] = 0;
  return result;
}

void ims::Client::~Client(void **this)
{
  ims::ClientHandle::~ClientHandle(this);
  JUMPOUT(0x1C878E320);
}

void ims::Client::mergeAllCalls(ims::Client *this)
{
}

void ___ZNK3ims6Client13mergeAllCallsEv_block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v2);
  IMSCallManager::mergeAllCalls(*(IMSCallManager **)(v2 + 200));
  uint64_t v1 = v3;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_1C542DD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::Client::endConferenceCall(ims::Client *this)
{
}

void ___ZNK3ims6Client17endConferenceCallEv_block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v2);
  IMSCallManager::endConferenceCall(*(IMSCallManager **)(v2 + 200));
  uint64_t v1 = v3;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_1C542DDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::Client::sendSMS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  memset(&v26, 0, sizeof(v26));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v26 = *(std::string *)a2;
  }
  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v25 = *(std::string *)a3;
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v22, *(const void **)a4, *(void *)(a4 + 8), *(void *)(a4 + 8) - *(void *)a4);
  memset(&v21, 0, sizeof(v21));
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v21 = *(std::string *)a5;
  }
  memset(&v20, 0, sizeof(v20));
  if (*(char *)(a1 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else {
    std::string v20 = *(std::string *)(a1 + 24);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZNK3ims6Client7sendSMSERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS1_6vectorIhNS5_IhEEEES9_b_block_invoke;
  v11[3] = &__block_descriptor_tmp_25_0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v12, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  }
  else {
    std::string v12 = v20;
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v13, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else {
    std::string v13 = v26;
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = v25;
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v15, v22, (uint64_t)v23, v23 - (unsigned char *)v22);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v21;
  }
  char v19 = a6;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_1C542E0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (__p) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (*(char *)(v46 - 137) < 0) {
    operator delete(*(void **)(v46 - 160));
  }
  char v48 = *(void **)(v46 - 136);
  if (v48)
  {
    *(void *)(v46 - 128) = v48;
    operator delete(v48);
  }
  if (*(char *)(v46 - 89) < 0) {
    operator delete(*(void **)(v46 - 112));
  }
  if (*(char *)(v46 - 57) < 0) {
    operator delete(*(void **)(v46 - 80));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims6Client7sendSMSERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS1_6vectorIhNS5_IhEEEES9_b_block_invoke(uint64_t a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IMSSMSManager::sendSMS(*(void *)(v3 + 208), a1 + 32, (std::string *)(a1 + 56), a1 + 80, (char **)(a1 + 104), (long long *)(a1 + 128), *(unsigned char *)(a1 + 152));
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542E22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE104c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE128c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v6;
  }
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), *(void *)(a2 + 112) - *(void *)(a2 + 104));
  std::string v7 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 128), *(void *)(a2 + 136));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1C542E350(_Unwind_Exception *exception_object)
{
  std::string v7 = *v5;
  if (*v5)
  {
    *(void *)(v2 + 112) = v7;
    operator delete(v7);
  }
  if (*(char *)(v2 + 103) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE104c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE128c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    operator delete(v3);
  }
}

void ims::Client::sendUssd(uint64_t a1, uint64_t a2)
{
  memset(&v7, 0, sizeof(v7));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v7 = *(std::string *)a2;
  }
  memset(&v6, 0, sizeof(v6));
  if (*(char *)(a1 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else {
    std::string v6 = *(std::string *)(a1 + 24);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  void v3[2] = ___ZNK3ims6Client8sendUssdERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  v3[3] = &__block_descriptor_tmp_28_1;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v4, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string v4 = v6;
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v7;
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_1C542E5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (*(char *)(v30 - 25) < 0) {
    operator delete(*(void **)(v30 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims6Client8sendUssdERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IPTelephonyManager::sendUssdData(v3, (void **)(a1 + 32), (const std::string *)(a1 + 56));
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542E67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::Client::cancelUssd(ims::Client *this)
{
  memset(&v3, 0, sizeof(v3));
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v3, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v3 = *(std::string *)((unsigned char *)this + 1);
  }
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 1174405120;
  _OWORD v1[2] = ___ZNK3ims6Client10cancelUssdEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_31_0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v3.__r_.__value_.__l.__data_, v3.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v3;
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_1C542E780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v19 - 25) < 0) {
    operator delete(*(void **)(v19 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims6Client10cancelUssdEv_block_invoke(void **a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IPTelephonyManager::cancelUssdSession(v3, a1 + 4);
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542E81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::Client::updateSimAccessClass(ims::Client *this, const unsigned int *a2)
{
  int v2 = *a2;
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v6 = *(std::string *)((unsigned char *)this + 1);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  void v3[2] = ___ZN3ims6Client20updateSimAccessClassERKj_block_invoke;
  v3[3] = &__block_descriptor_tmp_35_0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  int v5 = v2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C542E928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 25) < 0) {
    operator delete(*(void **)(v18 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ims6Client20updateSimAccessClassERKj_block_invoke(unsigned int *a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IPTelephonyManager::updateSimAccessClass(v3, (uint64_t)(a1 + 8), a1 + 14);
  int v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542E9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::Client::setThumperEnabled(ims::Client *this, char a2)
{
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v6 = *(std::string *)((unsigned char *)this + 1);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  void v3[2] = ___ZN3ims6Client17setThumperEnabledEb_block_invoke;
  v3[3] = &__block_descriptor_tmp_38;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  char v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C542EAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 25) < 0) {
    operator delete(*(void **)(v18 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ims6Client17setThumperEnabledEb_block_invoke(unsigned __int8 *a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  BambiClient::setThumperEnabled(*(void *)(v3 + 168), (uint64_t)(a1 + 32), a1[56]);
  int v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542EB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::Client::transferCalls(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(&v8, 0, sizeof(v8));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v8 = *(std::string *)a2;
  }
  memset(&v7, 0, sizeof(v7));
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v7 = *(std::string *)a3;
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  _OWORD v4[2] = ___ZN3ims6Client13transferCallsERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9__block_invoke;
  v4[3] = &__block_descriptor_tmp_41_1;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v5, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  }
  else {
    std::string v5 = v8;
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v7;
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

{
  std::string __p;
  std::string v6;

  if (a2 && a3)
  {
    if (*(char *)(a2 + 55) < 0) {
      std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
    }
    else {
      std::string v6 = *(std::string *)(a2 + 32);
    }
    if (*(char *)(a3 + 55) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 32), *(void *)(a3 + 40));
    }
    else {
      std::string __p = *(std::string *)(a3 + 32);
    }
    (*(void (**)(uint64_t, std::string *, std::string *))(*(void *)a1 + 352))(a1, &v6, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C542ECFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (*(char *)(v30 - 25) < 0) {
    operator delete(*(void **)(v30 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ims6Client13transferCallsERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9__block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v3);
  IMSCallManager::transferCalls(*(void *)(v3 + 200), (uint64_t)a1 + 32, (uint64_t)a1 + 56);
  int v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542EDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C542EED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ims::Client::transferCalls(ims::Client *this)
{
}

void ___ZN3ims6Client13transferCallsEv_block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v2);
  IMSCallManager::transferAllCalls(*(IMSCallManager **)(v2 + 200));
  uint64_t v1 = v3;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_1C542EF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::authChallengeResponse(ims::ClientHandle *this, const ims::AuthChallengeResponse *a2)
{
  memset(&v2, 0, sizeof(v2));
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v2 = *(std::string *)((unsigned char *)this + 1);
  }
  operator new();
}

void sub_1C542F0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 - 25) < 0) {
    operator delete(*(void **)(v19 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ims12ClientHandle21authChallengeResponseERKNS_21AuthChallengeResponseE_block_invoke(uint64_t *a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance((uint64_t *)&v4);
  IPTelephonyManager::handleAkaAuthResponse(v4, (uint64_t)(a1 + 4), a1[7]);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v2 = a1[7];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    JUMPOUT(0x1C878E320);
  }
}

void sub_1C542F1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *ims::EmergencyClient::EmergencyClient(std::string *this)
{
  xpc_object_t result = ims::ClientHandle::ClientHandle(this, (long long *)&IMSClientManager::kEmergencyStack);
  result->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20CCE90;
  result[2].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

{
  std::string *result;

  xpc_object_t result = ims::ClientHandle::ClientHandle(this, (long long *)&IMSClientManager::kEmergencyStack);
  result->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20CCE90;
  result[2].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void ims::EmergencyClient::~EmergencyClient(void **this)
{
  ims::ClientHandle::~ClientHandle(this);
  JUMPOUT(0x1C878E320);
}

void ims::EmergencyClient::exitEmergencyState(ims::EmergencyClient *this)
{
}

void ___ZN3ims15EmergencyClient18exitEmergencyStateEv_block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v2);
  BambiClient::exitEmergencyState(*(BambiClient **)(v2 + 168));
  uint64_t v1 = v3;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_1C542F314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::EmergencyClient::updateNetworkServices(ims::EmergencyClient *this, const ims::NetworkServices *a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  ims::NetworkServices::NetworkServices((ims::NetworkServices *)v7, a2);
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v6 = *(std::string *)((unsigned char *)this + 1);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  void v3[2] = ___ZN3ims15EmergencyClient21updateNetworkServicesERKNS_15NetworkServicesE_block_invoke;
  v3[3] = &__block_descriptor_tmp_53_1;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  ims::NetworkServices::NetworkServices((ims::NetworkServices *)v5, (const ims::NetworkServices *)v7);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  ims::NetworkServices::~NetworkServices(v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  ims::NetworkServices::~NetworkServices((void **)v7);
}

void sub_1C542F478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  ims::NetworkServices::~NetworkServices(&a62);
  _Unwind_Resume(a1);
}

void ___ZN3ims15EmergencyClient21updateNetworkServicesERKNS_15NetworkServicesE_block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v3);
  IPTelephonyManager::updateNetworkServices(v3, (uint64_t)a1 + 32, (uint64_t)a1 + 56, 1);
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542F540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::reportDeviceEvent(ims::ClientHandle *this, const unsigned int *a2)
{
  int v2 = *a2;
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v6 = *(std::string *)((unsigned char *)this + 1);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  void v3[2] = ___ZNK3ims12ClientHandle17reportDeviceEventERKj_block_invoke;
  v3[3] = &__block_descriptor_tmp_56_1;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  int v5 = v2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C542F64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 25) < 0) {
    operator delete(*(void **)(v18 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims12ClientHandle17reportDeviceEventERKj_block_invoke(uint64_t a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IPTelephonyManager::handleDeviceEvents(v3, (unsigned __int8 *)(a1 + 32), (int *)(a1 + 56));
  int v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542F6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::reportConnectivityAvailable(ims::ClientHandle *this, char a2)
{
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v6 = *(std::string *)((unsigned char *)this + 1);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  void v3[2] = ___ZNK3ims12ClientHandle27reportConnectivityAvailableEb_block_invoke;
  v3[3] = &__block_descriptor_tmp_59_1;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  char v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C542F7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 25) < 0) {
    operator delete(*(void **)(v18 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims12ClientHandle27reportConnectivityAvailableEb_block_invoke(unsigned __int8 *a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v4);
  int v2 = *(void **)(v4 + 168);
  if (v2) {
    BambiClient::handleConnectivityChange(v2, (uint64_t)(a1 + 32), a1[56]);
  }
  uint64_t v3 = v5;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C542F8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::ClientHandle::setCapability(uint64_t a1, _DWORD *a2, char a3)
{
  switch(*a2)
  {
    case 0:
      memset(&v16, 0, sizeof(v16));
      if (*(char *)(a1 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
      }
      else {
        std::string v16 = *(std::string *)(a1 + 24);
      }
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 1174405120;
      v13[2] = ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke;
      uint64_t v13[3] = &__block_descriptor_tmp_62_0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v14, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
      }
      else {
        std::string v14 = v16;
      }
      char v15 = a3;
      IMSClientManager::callOnMainQueue((IMSClientManager *)v13);
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_28;
      }
      uint64_t v4 = (void *)v14.__r_.__value_.__r.__words[0];
      break;
    case 1:
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 0x40000000;
      v11[2] = ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke_63;
      v11[3] = &__block_descriptor_tmp_64;
      char v12 = a3;
      IMSClientManager::callOnMainQueue((IMSClientManager *)v11);
      return;
    case 2:
      memset(&v16, 0, sizeof(v16));
      if (*(char *)(a1 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
      }
      else {
        std::string v16 = *(std::string *)(a1 + 24);
      }
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 1174405120;
      void v8[2] = ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke_2;
      void v8[3] = &__block_descriptor_tmp_67_0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v9, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
      }
      else {
        std::string v9 = v16;
      }
      char v10 = a3;
      IMSClientManager::callOnMainQueue((IMSClientManager *)v8);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_28;
      }
      uint64_t v4 = (void *)v9.__r_.__value_.__r.__words[0];
      break;
    case 3:
      memset(&v16, 0, sizeof(v16));
      if (*(char *)(a1 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
      }
      else {
        std::string v16 = *(std::string *)(a1 + 24);
      }
      v5[0] = MEMORY[0x1E4F143A8];
      v5[1] = 1174405120;
      void v5[2] = ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke_68;
      _OWORD v5[3] = &__block_descriptor_tmp_71_3;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v6, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
      }
      else {
        std::string v6 = v16;
      }
      char v7 = a3;
      IMSClientManager::callOnMainQueue((IMSClientManager *)v5);
      if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_28;
      }
      uint64_t v4 = (void *)v6.__r_.__value_.__r.__words[0];
      break;
    default:
      return;
  }
  operator delete(v4);
LABEL_28:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1C542FBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (*(char *)(v30 - 41) < 0) {
    operator delete(*(void **)(v30 - 64));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke(unsigned __int8 *a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IPTelephonyManager::setAutoAnswer(v3, (uint64_t)(a1 + 32), a1[56]);
  int v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542FC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke_63(unsigned __int8 *a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance((uint64_t *)&v3);
  IPTelephonyManager::setLoggingEnabled(v3, a1[32]);
  int v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542FD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke_2(unsigned __int8 *a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  BambiClient::setThumperEnabled(*(void *)(v3 + 168), (uint64_t)(a1 + 32), a1[56]);
  int v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542FD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke_68(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(v3);
  int v2 = (std::__shared_weak_count *)v3[1];
  *(unsigned char *)(*(void *)(v3[0] + 168) + 688) = *((unsigned char *)a1 + 56) ^ 1;
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void ims::ClientHandle::setTextMode(uint64_t a1, int a2, char a3)
{
  memset(&v9, 0, sizeof(v9));
  if (*(char *)(a1 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else {
    std::string v9 = *(std::string *)(a1 + 24);
  }
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  void v5[2] = ___ZN3ims12ClientHandle11setTextModeENS_20TextMediaSessionModeEb_block_invoke;
  _OWORD v5[3] = &__block_descriptor_tmp_74_0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v9;
  }
  int v7 = a2;
  char v8 = a3;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1C542FF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 25) < 0) {
    operator delete(*(void **)(v18 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ims12ClientHandle11setTextModeENS_20TextMediaSessionModeEb_block_invoke(uint64_t a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IMSCallManager::setTextMediaSessionMode(*(void *)(v3 + 200), (unsigned __int8 *)(a1 + 32), *(_DWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 60));
  int v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C542FFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::ClientHandle::sendSuppServicesConfigInfo(ims::ClientHandle *this, CFDictionaryRef theDict, const __CFDictionary *a3)
{
  void v45[2] = *MEMORY[0x1E4F143B8];
  memset(&v42, 0, sizeof(v42));
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v42, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v42 = *(std::string *)((unsigned char *)this + 1);
  }
  uint64_t v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  *(_OWORD *)uint64_t v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  uint64_t v23 = 0;
  long long v22 = 0u;
  *(_OWORD *)std::string v20 = 0u;
  memset(v21, 0, sizeof(v21));
  long long v19 = 0u;
  memset(__str, 0, sizeof(__str));
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"kRegSimFiles");
  ims::IsimFiles::Deserialize((CFIndex)__str, Value);
  std::string::operator=((std::string *)v25, (const std::string *)__str);
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)v24 + 8), *(std::string **)&__str[24], (long long *)v19, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *(void *)&__str[24]) >> 3));
  std::string::operator=((std::string *)&v25[24], (const std::string *)v20);
  CFDictionaryGetValue(theDict, @"kRegDeviceID");
  uint64_t v43 = 0;
  long long v44 = 0uLL;
  ctu::cf::assign();
  std::string v6 = v43;
  v45[0] = v44;
  *(void *)((char *)v45 + 7) = *(void *)((char *)&v44 + 7);
  char v7 = HIBYTE(v44);
  if ((v25[71] & 0x80000000) != 0) {
    operator delete(*(void **)&v25[48]);
  }
  *(void *)&v25[48] = v6;
  *(void *)&v25[56] = v45[0];
  *(void *)&v25[63] = *(void *)((char *)v45 + 7);
  v25[71] = v7;
  char v8 = (BOOL *)CFDictionaryGetValue(theDict, @"kRegIsimPresent");
  LOBYTE(v4IBISession::stop(this - 3) = 0;
  ctu::cf::assign((ctu::cf *)&v43, v8, v9);
  LOBYTE(v31[0]) = (_BYTE)v43;
  CFDictionaryGetValue(theDict, @"kRegCarrierID");
  uint64_t v43 = 0;
  long long v44 = 0uLL;
  ctu::cf::assign();
  char v10 = v43;
  v45[0] = v44;
  *(void *)((char *)v45 + 7) = *(void *)((char *)&v44 + 7);
  char v11 = HIBYTE(v44);
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[1]);
  }
  v31[1] = v10;
  *(void *)&long long v32 = v45[0];
  *(void *)((char *)&v32 + 7) = *(void *)((char *)v45 + 7);
  HIBYTE(v32) = v11;
  uint64_t v43 = (void **)&unk_1F20E38B0;
  *(void *)&long long v44 = a3;
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v43 = (void **)&unk_1F20E3A10;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1174405120;
  void v14[2] = ___ZN3ims12ClientHandle26sendSuppServicesConfigInfoEPK14__CFDictionaryS3__block_invoke;
  v14[3] = &__block_descriptor_tmp_75_0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v15, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  }
  else {
    std::string v15 = v42;
  }
  XcapConfig::XcapConfig((XcapConfig *)v16, (const XcapConfig *)v24);
  v17[0] = &unk_1F20E38B0;
  v17[1] = v44;
  if ((void)v44) {
    CFRetain((CFTypeRef)v44);
  }
  v17[0] = &unk_1F20E3A10;
  dispatch_async(MEMORY[0x1E4F14428], v14);
  ims::CFType::~CFType((ims::CFType *)v17);
  XcapConfig::~XcapConfig(v16);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  ims::CFType::~CFType((ims::CFType *)&v43);
  uint64_t v43 = (void **)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v12);
  uint64_t v43 = (void **)v21 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v43);
  if (SBYTE7(v21[0]) < 0) {
    operator delete(v20[0]);
  }
  uint64_t v43 = (void **)&__str[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v43);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  XcapConfig::~XcapConfig((void **)v24);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C54303E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  ims::CFType::~CFType((ims::CFType *)(v63 - 112));
  ims::IsimFiles::~IsimFiles(&a63);
  XcapConfig::~XcapConfig((void **)&STACK[0x230]);
  if (*(char *)(v63 - 121) < 0) {
    operator delete(*(void **)(v63 - 144));
  }
  _Unwind_Resume(a1);
}

void ___ZN3ims12ClientHandle26sendSuppServicesConfigInfoEPK14__CFDictionaryS3__block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v1);
  IPTelephonyManager::initializeXcap();
}

void sub_1C54304E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c16_ZTS10XcapConfig416c24_ZTSN3ims12CFDictionaryE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  XcapConfig::XcapConfig((XcapConfig *)(a1 + 56), (const XcapConfig *)(a2 + 56));
  CFTypeRef result = *(CFTypeRef *)(a2 + 424);
  *(void *)(a1 + 416) = &unk_1F20E38B0;
  *(void *)(a1 + 424) = result;
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(void *)(a1 + 416) = &unk_1F20E3A10;
  return result;
}

void sub_1C54305B8(_Unwind_Exception *a1)
{
  XcapConfig::~XcapConfig(v3);
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c16_ZTS10XcapConfig416c24_ZTSN3ims12CFDictionaryE(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 56);
  ims::CFType::~CFType((ims::CFType *)(a1 + 416));
  XcapConfig::~XcapConfig(v2);
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    operator delete(v3);
  }
}

void ims::IsimFiles::~IsimFiles(void **this)
{
  uint64_t v2 = this + 12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  uint64_t v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t ims::ClientHandle::sendSuppServicesProvInfo(ims::ClientHandle *this, CFTypeRef cf)
{
  memset(&v9, 0, sizeof(v9));
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v9 = *(std::string *)((unsigned char *)this + 1);
  }
  char v7 = &unk_1F20E38B0;
  CFTypeRef v8 = cf;
  if (cf) {
    CFRetain(cf);
  }
  char v7 = &unk_1F20E3A10;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN3ims12ClientHandle24sendSuppServicesProvInfoEPK14__CFDictionary_block_invoke;
  block[3] = &__block_descriptor_tmp_76_0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v9;
  }
  v6[0] = &unk_1F20E38B0;
  v6[1] = v8;
  if (v8) {
    CFRetain(v8);
  }
  v6[0] = &unk_1F20E3A10;
  dispatch_async(MEMORY[0x1E4F14428], block);
  ims::CFType::~CFType((ims::CFType *)v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ims::CFType::~CFType((ims::CFType *)&v7);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C543085C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  ims::CFType::~CFType((ims::CFType *)(v19 - 64));
  if (*(char *)(v19 - 25) < 0) {
    operator delete(*(void **)(v19 - 48));
  }
  _Unwind_Resume(a1);
}

void ___ZN3ims12ClientHandle24sendSuppServicesProvInfoEPK14__CFDictionary_block_invoke(ctu::cf **a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  IMSXcapManager::handleRequest(*(void *)(v3 + 224), (uint64_t)(a1 + 4), a1[8]);
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C5430910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c24_ZTSN3ims12CFDictionaryE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 64);
  *(void *)(a1 + 56) = &unk_1F20E38B0;
  *(void *)(a1 + 64) = result;
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(void *)(a1 + 56) = &unk_1F20E3A10;
  return result;
}

void sub_1C54309CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c24_ZTSN3ims12CFDictionaryE(uint64_t a1)
{
  ims::CFType::~CFType((ims::CFType *)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void ims::ClientHandle::setMute(ims::ClientHandle *this, char a2)
{
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v6 = *(std::string *)((unsigned char *)this + 1);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  uint64_t v3[2] = ___ZNK3ims12ClientHandle7setMuteEb_block_invoke;
  v3[3] = &__block_descriptor_tmp_79;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  char v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C5430B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 25) < 0) {
    operator delete(*(void **)(v18 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims12ClientHandle7setMuteEb_block_invoke(void **a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v3);
  BambiClient::setMute(*(void *)(v3 + 168), a1 + 4);
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C5430BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ims::CallHandle::playDtmf(ims::CallHandle *this, char a2)
{
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 55) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else {
    std::string v6 = *(std::string *)((char *)this + 32);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  uint64_t v3[2] = ___ZNK3ims10CallHandle8playDtmfEh_block_invoke;
  v3[3] = &__block_descriptor_tmp_82;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  char v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C5430CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 25) < 0) {
    operator delete(*(void **)(v18 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims10CallHandle8playDtmfEh_block_invoke(unsigned __int8 *a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  uint64_t v2 = *(void *)(v5 + 200);
  ImsUuid::ImsUuid(v3, (uint64_t)(a1 + 32));
  IMSCallManager::playDtmf(v2, (uint64_t)v3, (RTPManager *)a1[56]);
  v3[0] = &unk_1F20B3708;
  if (v4 < 0) {
    operator delete((void *)v3[1]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5430DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}