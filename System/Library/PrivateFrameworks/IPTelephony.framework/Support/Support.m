void BambiAccessBarring::setStack(BambiAccessBarring *a1, void *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::string __p;

  v4 = (std::__shared_weak_count *)*((void *)a1 + 19);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5) {
      v6 = *((void *)a1 + 18);
    }
    else {
      v6 = 0;
    }
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (std::__shared_weak_count *)*((void *)a1 + 22);
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      v9 = *((void *)a1 + 21);
      if (v9)
      {
        if (v6)
        {
          if (*(char *)(v9 + 4183) < 0) {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 4160), *(void *)(v9 + 4168));
          }
          else {
            __p = *(std::string *)(v9 + 4160);
          }
          (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v6 + 40))(v6, &__p, 4);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v11 = *a2;
  v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
  }
  v12 = (std::__shared_weak_count *)*((void *)a1 + 22);
  *((void *)a1 + 21) = v11;
  *((void *)a1 + 22) = v10;
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  if (*a2) {
    *((void *)a1 + 20) = *(void *)(*a2 + 136);
  }
  BambiAccessBarring::registerForUac(a1);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C51D2FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void IMSClientManager::callOnMainQueue(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  v2 = sImsDispatchQueue;
  if (sImsDispatchQueue
    || (v2 = dispatch_queue_create("com.apple.ipTelephony.queue", 0), (sImsDispatchQueue = (uint64_t)v2) != 0))
  {
    dispatch_retain(v2);
    dispatch_async(v2, a1);
    dispatch_release(v2);
  }
  else
  {
    dispatch_async(0, a1);
  }
}

uint64_t ImsLoggerStreambuf::sync(char **this)
{
  return 0;
}

SipStack *SipStack::copyStackConfigs(SipStack *this, const ims::StackConfig *a2, ims::StackConfig *a3)
{
  if (a2)
  {
    v4 = this;
    ims::NetworkConfig::operator=((uint64_t)a2 + 24, (uint64_t)this + 24);
    std::string::operator=((std::string *)((char *)a2 + 616), (const std::string *)((char *)v4 + 616));
    std::string::operator=((std::string *)((char *)a2 + 640), (const std::string *)((char *)v4 + 640));
    std::string::operator=((std::string *)((char *)a2 + 664), (const std::string *)((char *)v4 + 664));
    this = (SipStack *)std::string::operator=((std::string *)((char *)a2 + 688), (const std::string *)((char *)v4 + 688));
    *((_WORD *)a2 + 356) = *((_WORD *)v4 + 356);
    *((_DWORD *)a2 + 181) = *((_DWORD *)v4 + 181);
    *((unsigned char *)a2 + 728) = *((unsigned char *)v4 + 728);
  }
  return this;
}

uint64_t ims::NetworkConfig::operator=(uint64_t a1, uint64_t a2)
{
  ims::NetworkServices::operator=(a1, a2);
  std::string::operator=((std::string *)(a1 + 312), (const std::string *)(a2 + 312));
  std::string::operator=((std::string *)(a1 + 336), (const std::string *)(a2 + 336));
  std::string::operator=((std::string *)(a1 + 360), (const std::string *)(a2 + 360));
  std::string::operator=((std::string *)(a1 + 384), (const std::string *)(a2 + 384));
  std::string::operator=((std::string *)(a1 + 408), (const std::string *)(a2 + 408));
  std::string::operator=((std::string *)(a1 + 432), (const std::string *)(a2 + 432));
  if (a1 != a2)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 456), *(std::string **)(a2 + 456), *(long long **)(a2 + 464), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 464) - *(void *)(a2 + 456)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 480), *(std::string **)(a2 + 480), *(long long **)(a2 + 488), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 3));
  }
  std::string::operator=((std::string *)(a1 + 504), (const std::string *)(a2 + 504));
  int v4 = *(_DWORD *)(a2 + 531);
  *(_DWORD *)(a1 + 528) = *(_DWORD *)(a2 + 528);
  *(_DWORD *)(a1 + 531) = v4;
  std::string::operator=((std::string *)(a1 + 536), (const std::string *)(a2 + 536));
  std::string::operator=((std::string *)(a1 + 560), (const std::string *)(a2 + 560));
  *(_WORD *)(a1 + 584) = *(_WORD *)(a2 + 584);
  return a1;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  std::vector<std::string>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1C51D33A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C51D33AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  int v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t ims::NetworkServices::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  char v4 = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = v4;
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  char v5 = *(unsigned char *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 136) = v5;
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
  std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
  long long v6 = *(_OWORD *)(a2 + 192);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = v6;
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  std::string::operator=((std::string *)(a1 + 224), (const std::string *)(a2 + 224));
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 248));
  if (a1 != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 272), *(std::string **)(a2 + 272), *(long long **)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 3));
  }
  uint64_t v7 = *(void *)(a2 + 296);
  *(void *)(a1 + 302) = *(void *)(a2 + 302);
  *(void *)(a1 + 296) = v7;
  return a1;
}

void IPTelephonyManager::updateNetworkServices(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v124 = 0;
  v125 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 168) + 192))(&v124);
  if (v124)
  {
    int v101 = *(_DWORD *)(a3 + 216);
    int v102 = *(_DWORD *)(v124 + 3616);
    int v100 = *(unsigned __int8 *)(a3 + 300);
    uint64_t v123 = 0;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    memset(v110, 0, sizeof(v110));
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v110);
    if ((*(unsigned char *)(v124 + 3616) & 1) != 0
      && (*(unsigned char *)(a3 + 216) & 1) != 0
      && !ims::AccessNetwork::isWifi((ims::AccessNetwork *)a3)
      && !ims::AccessNetwork::isLTE((ims::AccessNetwork *)a3)
      && !ims::AccessNetwork::isNR((ims::AccessNetwork *)a3))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 48))(a1 + 24);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 16))(a1 + 24, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"voice services requested on non-VoLTE RAT type: ", 48);
      *(unsigned char *)(v8 + 17) = 0;
      v9 = (unsigned char *)ims::operator<<(v8, a3);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v9[17] = 0;
    }
    unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"updateNetworkServices (", 23);
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"): servicesChanged= ", 20);
    if (v102 == v101)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"false", 5);
    }
    else
    {
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"true (is= ", 10);
      int v16 = *(_DWORD *)(a3 + 216);
      std::string::basic_string[abi:ne180100]<0>(&v109, ",");
      BambiServices::namesForServiceMask(v16, v104);
      if ((v104[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v17 = v104;
      }
      else {
        v17 = (std::string *)v104[0].__r_.__value_.__r.__words[0];
      }
      if ((v104[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v104[0].__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v104[0].__r_.__value_.__l.__size_;
      }
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, size);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"; was= ", 7);
      int v21 = *(_DWORD *)(v124 + 3616);
      std::string::basic_string[abi:ne180100]<0>(&v105, ",");
      BambiServices::namesForServiceMask(v21, __p);
      if ((v108 & 0x80u) == 0) {
        v22 = __p;
      }
      else {
        v22 = (void **)__p[0];
      }
      if ((v108 & 0x80u) == 0) {
        uint64_t v23 = v108;
      }
      else {
        uint64_t v23 = (uint64_t)__p[1];
      }
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v22, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)")", 1);
      if ((char)v108 < 0) {
        operator delete(__p[0]);
      }
      if (v106 < 0) {
        operator delete(v105);
      }
      if (SHIBYTE(v104[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v104[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v109.__r_.__value_.__l.__data_);
      }
    }
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)" contextUp= ", 12);
    if (v100) {
      v29 = "true";
    }
    else {
      v29 = "false";
    }
    std::string::basic_string[abi:ne180100]<0>(v104, v29);
    if ((v104[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v30 = v104;
    }
    else {
      v30 = (std::string *)v104[0].__r_.__value_.__r.__words[0];
    }
    if ((v104[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v104[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v104[0].__r_.__value_.__l.__size_;
    }
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v30, v31);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" isEmergency= ", 14);
    if (a4) {
      v34 = "true";
    }
    else {
      v34 = "false";
    }
    std::string::basic_string[abi:ne180100]<0>(&v109, v34);
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v35 = &v109;
    }
    else {
      v35 = (std::string *)v109.__r_.__value_.__r.__words[0];
    }
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v36 = v109.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v35, v36);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v104[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104[0].__r_.__value_.__l.__data_);
    }
    uint64_t v37 = a1 + 24;
    v38 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(a1 + 24);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)(a1 + 24) + 16))(a1 + 24, v38);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v110[1], &v109);
    LoggableString::LoggableString(v104, &v109);
    (*(void (**)(unsigned char *, std::string *))(*(void *)v38 + 40))(v38, v104);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v38[17] = 0;
    if (SHIBYTE(v104[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109.__r_.__value_.__l.__data_);
    }
    uint64_t v39 = v124;
    __str = (std::string *)(a3 + 224);
    uint64_t v40 = *(unsigned __int8 *)(v124 + 3647);
    if ((v40 & 0x80u) == 0) {
      uint64_t v41 = *(unsigned __int8 *)(v124 + 3647);
    }
    else {
      uint64_t v41 = *(void *)(v124 + 3632);
    }
    uint64_t v42 = *(unsigned __int8 *)(a3 + 247);
    int v43 = (char)v42;
    if ((v42 & 0x80u) != 0) {
      uint64_t v42 = *(void *)(a3 + 232);
    }
    if (v41 == v42)
    {
      if (v43 >= 0) {
        v44 = (unsigned __int8 *)(a3 + 224);
      }
      else {
        v44 = (unsigned __int8 *)__str->__r_.__value_.__r.__words[0];
      }
      if ((v40 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(v124 + 3624), v44, *(void *)(v124 + 3632))) {
          goto LABEL_80;
        }
      }
      else
      {
        if (!*(unsigned char *)(v124 + 3647)) {
          goto LABEL_80;
        }
        uint64_t v45 = 0;
        while (*(unsigned __int8 *)(v124 + v45 + 3624) == v44[v45])
        {
          if (v40 == ++v45) {
            goto LABEL_80;
          }
        }
      }
    }
    std::string::operator=((std::string *)(v39 + 4112), __str);
    uint64_t v39 = v124;
LABEL_80:
    uint64_t v46 = *(unsigned __int8 *)(v39 + 3671);
    if ((v46 & 0x80u) == 0) {
      uint64_t v47 = *(unsigned __int8 *)(v39 + 3671);
    }
    else {
      uint64_t v47 = *(void *)(v39 + 3656);
    }
    uint64_t v48 = *(unsigned __int8 *)(a3 + 271);
    int v49 = (char)v48;
    if ((v48 & 0x80u) != 0) {
      uint64_t v48 = *(void *)(a3 + 256);
    }
    if (v47 == v48)
    {
      if (v49 >= 0) {
        v50 = (unsigned __int8 *)(a3 + 248);
      }
      else {
        v50 = *(unsigned __int8 **)(a3 + 248);
      }
      if ((v46 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(v39 + 3648), v50, *(void *)(v39 + 3656))) {
          goto LABEL_97;
        }
      }
      else
      {
        if (!*(unsigned char *)(v39 + 3671)) {
          goto LABEL_97;
        }
        uint64_t v51 = 0;
        while (*(unsigned __int8 *)(v39 + v51 + 3648) == v50[v51])
        {
          if (v46 == ++v51) {
            goto LABEL_97;
          }
        }
      }
    }
    std::string::operator=((std::string *)(v39 + 4136), (const std::string *)(a3 + 248));
    uint64_t v39 = v124;
LABEL_97:
    if (ims::AccessNetwork::networkTypeChanged((ims::AccessNetwork *)(v39 + 3400), (const ims::AccessNetwork *)a3)) {
      goto LABEL_135;
    }
    uint64_t v52 = *(unsigned __int8 *)(v39 + 3423);
    if ((v52 & 0x80u) != 0) {
      uint64_t v52 = *(void *)(v39 + 3408);
    }
    if (v52)
    {
      uint64_t v53 = *(unsigned __int8 *)(v39 + 3447);
      if ((v53 & 0x80u) != 0) {
        uint64_t v53 = *(void *)(v39 + 3432);
      }
      v55 = (unsigned __int8 *)(a3 + 23);
      uint64_t v54 = *(unsigned __int8 *)(a3 + 23);
      v56 = (uint64_t *)(a3 + 8);
      if ((v54 & 0x80u) != 0) {
        uint64_t v54 = *(void *)(a3 + 8);
      }
      if (v54)
      {
        BOOL v57 = v53 != 0;
        uint64_t v58 = *(unsigned __int8 *)(a3 + 47);
        if ((v58 & 0x80u) != 0) {
          uint64_t v58 = *(void *)(a3 + 32);
        }
        if ((v57 ^ (v58 != 0))) {
          goto LABEL_135;
        }
LABEL_116:
        if (ims::AccessNetwork::networkTypeChanged((ims::AccessNetwork *)(v39 + 3472), (const ims::AccessNetwork *)(a3 + 72)))
        {
          goto LABEL_135;
        }
        uint64_t v60 = *(unsigned __int8 *)(v39 + 3495);
        if ((v60 & 0x80u) != 0) {
          uint64_t v60 = *(void *)(v39 + 3480);
        }
        if (v60)
        {
          uint64_t v61 = *(unsigned __int8 *)(v39 + 3519);
          if ((v61 & 0x80u) != 0) {
            uint64_t v61 = *(void *)(v39 + 3504);
          }
          uint64_t v62 = *(unsigned __int8 *)(a3 + 95);
          if ((v62 & 0x80u) != 0) {
            uint64_t v62 = *(void *)(a3 + 80);
          }
          if (v62)
          {
            BOOL v63 = v61 != 0;
            uint64_t v64 = *(unsigned __int8 *)(a3 + 119);
            if ((v64 & 0x80u) != 0) {
              uint64_t v64 = *(void *)(a3 + 104);
            }
            if ((v63 ^ (v64 != 0))) {
              goto LABEL_135;
            }
            goto LABEL_163;
          }
        }
        else
        {
          uint64_t v65 = *(unsigned __int8 *)(a3 + 95);
          if ((v65 & 0x80u) != 0) {
            uint64_t v65 = *(void *)(a3 + 80);
          }
          if (!v65)
          {
LABEL_163:
            uint64_t v83 = *(unsigned __int8 *)(v39 + 3423);
            if ((v83 & 0x80u) != 0) {
              uint64_t v83 = *(void *)(v39 + 3408);
            }
            if (!v83) {
              goto LABEL_176;
            }
            uint64_t v84 = *(unsigned __int8 *)(v39 + 3447);
            if ((v84 & 0x80u) != 0) {
              uint64_t v84 = *(void *)(v39 + 3432);
            }
            if (!v84) {
              goto LABEL_176;
            }
            uint64_t v85 = *v55;
            if ((v85 & 0x80u) != 0) {
              uint64_t v85 = *v56;
            }
            if (!v85) {
              goto LABEL_176;
            }
            uint64_t v86 = *(unsigned __int8 *)(a3 + 47);
            if ((v86 & 0x80u) != 0) {
              uint64_t v86 = *(void *)(a3 + 32);
            }
            if (!v86
              || std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)(v39 + 3424), (unsigned __int8 *)(a3 + 24)))
            {
LABEL_176:
              uint64_t v87 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 64))(a1 + 24);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(a1 + 24, v87);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v87 + 8), (uint64_t)"updateNetworkServices: Access network has NOT changed", 53);
              *(unsigned char *)(v87 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v87 + 64))(v87, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v87 + 17) = 0;
              goto LABEL_208;
            }
LABEL_135:
            uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 64))(a1 + 24);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(a1 + 24, v66);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), (uint64_t)"updateNetworkServices: Access network has changed from ", 55);
            *(unsigned char *)(v66 + 17) = 0;
            uint64_t v67 = ims::operator<<(v66, v124 + 3400);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v67 + 8), (uint64_t)" to ", 4);
            *(unsigned char *)(v67 + 17) = 0;
            v68 = (unsigned char *)ims::operator<<(v67, a3);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v68[17] = 0;
            uint64_t v69 = *(unsigned __int8 *)(a3 + 95);
            if ((v69 & 0x80u) != 0) {
              uint64_t v69 = *(void *)(a3 + 80);
            }
            uint64_t v70 = a3;
            if (v69)
            {
              uint64_t v71 = *(unsigned __int8 *)(a3 + 119);
              if ((v71 & 0x80u) != 0) {
                uint64_t v71 = *(void *)(a3 + 104);
              }
              if (v71) {
                uint64_t v70 = a3 + 72;
              }
              else {
                uint64_t v70 = a3;
              }
            }
            v72 = *(void (****)(void, uint64_t))(*(void *)(*(void *)(a1 + 288) + 120) + 632);
            if (v72) {
              (**v72)(v72, v70);
            }
            if (a4) {
              goto LABEL_207;
            }
            if (ims::AccessNetwork::networkTypeChanged((ims::AccessNetwork *)(v124 + 3400), (const ims::AccessNetwork *)a3))
            {
              BOOL v73 = (ims::AccessNetwork::isHandover((ims::AccessNetwork *)a3, (const ims::AccessNetwork *)(v124 + 3400)) & 1) != 0
                 || ims::AccessNetwork::isCellularHandover((ims::AccessNetwork *)a3, (const ims::AccessNetwork *)(v124 + 3400));
            }
            else
            {
              BOOL v73 = 0;
            }
            if (ims::AccessNetwork::isLTE((ims::AccessNetwork *)a3)
              && !ims::AccessNetwork::isLTE((ims::AccessNetwork *)(v124 + 3400))
              && *(void *)(a1 + 328))
            {
              uint64_t v74 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 64))(a1 + 24);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(a1 + 24, v74);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v74 + 8), (uint64_t)"updateNetworkServices: Moving to LTE RAT.  Requesting current barring information.", 82);
              *(unsigned char *)(v74 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v74 + 64))(v74, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v74 + 17) = 0;
              IMSNasDeviceClient::requestCurrentBarringInfo(*(IMSNasDeviceClient **)(a1 + 328));
            }
            if (!v73) {
              goto LABEL_190;
            }
            uint64_t v75 = *(void *)(a1 + 328);
            if (!v75) {
              goto LABEL_190;
            }
            IMSNasDeviceClient::reportCallStatus(v75, *(unsigned int *)(v124 + 4100), 3, 1, a3, 1, 0);
            if (!capabilities::radio::supportsRel16(v76)) {
              goto LABEL_190;
            }
            uint64_t v77 = v124;
            uint64_t v78 = *(void *)(v124 + 144);
            if (!v78) {
              goto LABEL_190;
            }
            v79 = *(SipRegistrationClient **)(v78 + 248);
            v80 = *(std::__shared_weak_count **)(v78 + 256);
            if (v80)
            {
              atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
              if (!v79) {
                goto LABEL_189;
              }
              uint64_t v81 = *(void *)(v77 + 144);
              v79 = *(SipRegistrationClient **)(v81 + 248);
              v82 = *(std::__shared_weak_count **)(v81 + 256);
              if (v82)
              {
                char v99 = 0;
                atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
                goto LABEL_180;
              }
            }
            else
            {
              if (!v79) {
                goto LABEL_190;
              }
              v82 = 0;
            }
            char v99 = 1;
LABEL_180:
            int v88 = SipRegistrationClient::nasImsRegInProgress(v79);
            if ((v99 & 1) == 0) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v82);
            }
            if (v80)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v80);
              if ((v88 & 1) == 0) {
                goto LABEL_190;
              }
            }
            else if (!v88)
            {
              goto LABEL_190;
            }
            uint64_t v89 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 64))(a1 + 24);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(a1 + 24, v89);
            v90 = (unsigned char *)ImsOutStream::operator<<(v89, "stop previous RegAccessCheck while on the previous cellular RAT...");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v90 + 64))(v90, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v90[17] = 0;
            IMSNasDeviceClient::reportCallStatus(*(void *)(a1 + 328), *(unsigned int *)(v124 + 4100), 2, 64, v124 + 3400, 1, 0);
            uint64_t v91 = *(void *)(v124 + 144);
            v92 = *(SipRegistrationClient **)(v91 + 248);
            v80 = *(std::__shared_weak_count **)(v91 + 256);
            if (v80) {
              atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipRegistrationClient::nasImsRegStop(v92);
            if (v80) {
LABEL_189:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v80);
LABEL_190:
            v93 = (ims::AccessNetwork *)(v124 + 3400);
            if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v124 + 3400))) {
              BOOL v94 = ims::AccessNetwork::isLTE((ims::AccessNetwork *)a3)
            }
                 || ims::AccessNetwork::isNR((ims::AccessNetwork *)a3);
            else {
              BOOL v94 = 0;
            }
            if (ims::AccessNetwork::isLTE(v93) || (BOOL isWifi = ims::AccessNetwork::isNR(v93))) {
              BOOL isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)a3);
            }
            if (v94 || isWifi)
            {
              uint64_t v96 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 64))(a1 + 24);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(a1 + 24, v96);
              if (v94) {
                v97 = "WiFi->Cell";
              }
              else {
                v97 = "Cell->WiFi";
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v96 + 8), (uint64_t)v97, 10);
              *(unsigned char *)(v96 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v96 + 8), (uint64_t)" handover detected", 18);
              *(unsigned char *)(v96 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v96 + 64))(v96, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v96 + 17) = 0;
            }
            char v98 = v102 != v101 || v73;
            if (v98)
            {
LABEL_208:
              std::string::basic_string[abi:ne180100]<0>(&v109, ",");
              ims::join<std::__wrap_iter<std::string const*>>();
            }
LABEL_207:
            BambiClient::updateAccessNetworkInfo(*(void **)(a1 + 168), (unsigned __int8 *)a2, (ims::AccessNetwork *)a3, 0);
            goto LABEL_208;
          }
          uint64_t v61 = *(unsigned __int8 *)(a3 + 119);
          if ((v61 & 0x80u) != 0) {
            uint64_t v61 = *(void *)(a3 + 104);
          }
        }
        if (v61) {
          goto LABEL_135;
        }
        goto LABEL_163;
      }
    }
    else
    {
      v55 = (unsigned __int8 *)(a3 + 23);
      uint64_t v59 = *(unsigned __int8 *)(a3 + 23);
      v56 = (uint64_t *)(a3 + 8);
      if ((v59 & 0x80u) != 0) {
        uint64_t v59 = *(void *)(a3 + 8);
      }
      if (!v59) {
        goto LABEL_116;
      }
      uint64_t v53 = *(unsigned __int8 *)(a3 + 47);
      if ((v53 & 0x80u) != 0) {
        uint64_t v53 = *(void *)(a3 + 32);
      }
    }
    if (v53) {
      goto LABEL_135;
    }
    goto LABEL_116;
  }
  uint64_t v26 = *(void *)(a1 + 24);
  uint64_t v25 = a1 + 24;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(v26 + 56))(v25);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"unable to update network services, sip stack ", 45);
  *(unsigned char *)(v27 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 32))(v27, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)" invalid.", 9);
  *(unsigned char *)(v27 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v27 + 17) = 0;
  if (v125) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v125);
  }
}

void sub_1C51D4B5C(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x350]);
  char v4 = *(std::__shared_weak_count **)(v2 - 104);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void *std::endl[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1C51D4D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    long long v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    long long v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t ImsLogContainer::debugStream(ImsLogContainer *this)
{
  if (*((char *)this + 55) < 0)
  {
    if (*((void *)this + 5))
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 11);
      if (!v2)
      {
        uint64_t v2 = ims::debug((uint64_t)this + 8, (uint64_t)this + 32);
        *((void *)this + 11) = v2;
      }
      return v2;
    }
  }
  else if (*((unsigned char *)this + 55))
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)this + 8, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C51D4EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::operator<<(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  size_t v4 = *(void **)(a1 + 8);
  if (v3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"[type: ", 7);
    *(unsigned char *)(a1 + 17) = 0;
    LoggableString::LoggableString(&__p, (const std::string *)a2);
    (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 40))(a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v6 = *(unsigned __int8 *)(a2 + 47);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a2 + 32);
    }
    if (v6)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)", info: ", 8);
      *(unsigned char *)(a1 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2 + 24);
    }
    if (*(void *)(a2 + 56))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)", timestamp: ", 13);
      *(unsigned char *)(a1 + 17) = 0;
      uint64_t v15 = *(void *)(a2 + 56);
      memset(&__p, 0, sizeof(__p));
      p_p = &__p;
      ims::ctime((ims *)&v15, v8, &__p);
      std::string::size_type v9 = __p.__r_.__value_.__r.__words[0];
      *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + 24) = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)v9;
      }
      size_t v10 = strlen((const char *)p_p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)p_p, v10);
      *(unsigned char *)(a1 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    size_t v4 = *(void **)(a1 + 8);
    int v11 = "]";
    uint64_t v12 = 1;
  }
  else
  {
    int v11 = "[none]";
    uint64_t v12 = 6;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v11, v12);
  *(unsigned char *)(a1 + 17) = 0;
  return a1;
}

{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)"{\"", 2);
  *(unsigned char *)(a1 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)"\", \"", 4);
  *(unsigned char *)(a1 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)"\"}", 2);
  *(unsigned char *)(a1 + 17) = 0;
  return a1;
}

void sub_1C51D508C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *LoggableString::LoggableString(std::string *a1, const std::string *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::operator=(a1, a2);
  return a1;
}

void sub_1C51D50DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *ImsOutStream::putLoggableString(ImsOutStream *this, const LoggableString *a2)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  uint64_t v3 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const LoggableString **)a2;
    uint64_t v4 = v3;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)a2, v4);
}

void *ims::ctime@<X0>(ims *this@<X0>, tm *a2@<X2>, void *a3@<X8>)
{
  v44[4] = *MEMORY[0x1E4F143B8];
  if (this)
  {
    memset(&v32, 0, sizeof(v32));
    ims::localtime(this, &v32, a2);
    if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_7, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&_MergedGlobals_7))
    {
      std::string::basic_string[abi:ne180100]<0>(v34, "Sun");
      std::string::basic_string[abi:ne180100]<0>((void *)&v34[1] + 1, "Mon");
      std::string::basic_string[abi:ne180100]<0>(&v35, "Tue");
      std::string::basic_string[abi:ne180100]<0>((void *)&v36 + 1, "Wed");
      std::string::basic_string[abi:ne180100]<0>(&v38, "Thu");
      std::string::basic_string[abi:ne180100]<0>(&v39[1], "Fri");
      std::string::basic_string[abi:ne180100]<0>(v40, "Sat");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)&qword_1EBBDBDC8, v34, 7uLL);
      for (uint64_t i = 0; i != -168; i -= 24)
      {
        if (*((char *)&v40[1] + i + 7) < 0) {
          operator delete(*(void **)((char *)v40 + i));
        }
      }
      __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &qword_1EBBDBDC8, &dword_1C51D1000);
      __cxa_guard_release(&_MergedGlobals_7);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDBDC0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBBDBDC0))
    {
      std::string::basic_string[abi:ne180100]<0>(v34, "Jan");
      std::string::basic_string[abi:ne180100]<0>((void *)&v34[1] + 1, "Feb");
      std::string::basic_string[abi:ne180100]<0>(&v35, "Mar");
      std::string::basic_string[abi:ne180100]<0>((void *)&v36 + 1, "Apr");
      std::string::basic_string[abi:ne180100]<0>(&v38, "May");
      std::string::basic_string[abi:ne180100]<0>(&v39[1], "Jun");
      std::string::basic_string[abi:ne180100]<0>(v40, "Jul");
      std::string::basic_string[abi:ne180100]<0>((void *)&v40[1] + 1, "Aug");
      std::string::basic_string[abi:ne180100]<0>(v41, "Sep");
      std::string::basic_string[abi:ne180100]<0>(&v41[3], "Oct");
      std::string::basic_string[abi:ne180100]<0>(&v42, "Nov");
      std::string::basic_string[abi:ne180100]<0>(v44, "Dec");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)&qword_1EBBDBDE0, v34, 0xCuLL);
      uint64_t v30 = 288;
      do
      {
        if (*((char *)v34 + v30 - 1) < 0) {
          operator delete(*(void **)((char *)&v32.tm_gmtoff + v30));
        }
        v30 -= 24;
      }
      while (v30);
      __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &qword_1EBBDBDE0, &dword_1C51D1000);
      __cxa_guard_release(&qword_1EBBDBDC0);
    }
    uint64_t v43 = 0;
    long long v42 = 0u;
    memset(v41, 0, sizeof(v41));
    memset(v40, 0, sizeof(v40));
    long long v38 = 0u;
    memset(v39, 0, sizeof(v39));
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    memset(v34, 0, sizeof(v34));
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v34);
    uint64_t v5 = qword_1EBBDBDC8 + 24 * v32.tm_wday;
    int v6 = *(char *)(v5 + 23);
    if (v6 >= 0) {
      uint64_t v7 = qword_1EBBDBDC8 + 24 * v32.tm_wday;
    }
    else {
      uint64_t v7 = *(void *)v5;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      uint64_t v8 = *(void *)(v5 + 8);
    }
    std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v7, v8);
    LOBYTE(v33.__locale_) = 32;
    size_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v33, 1);
    uint64_t v11 = qword_1EBBDBDE0 + 24 * v32.tm_mon;
    int v12 = *(char *)(v11 + 23);
    if (v12 >= 0) {
      uint64_t v13 = qword_1EBBDBDE0 + 24 * v32.tm_mon;
    }
    else {
      uint64_t v13 = *(void *)v11;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      uint64_t v14 = *(void *)(v11 + 8);
    }
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v13, v14);
    LOBYTE(v33.__locale_) = 32;
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v33, 1);
    *(void *)((char *)v16 + *(void *)(*v16 - 24) + 24) = 2;
    v17 = (void *)std::ostream::operator<<();
    LOBYTE(v33.__locale_) = 32;
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v33, 1);
    char v31 = 48;
    v19 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, &v31);
    *(void *)((char *)v19 + *(void *)(*v19 - 24) + 24) = 2;
    v20 = (void *)std::ostream::operator<<();
    LOBYTE(v33.__locale_) = 58;
    int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v33, 1);
    *(void *)((char *)v21 + *(void *)(*v21 - 24) + 24) = 2;
    v22 = (void *)std::ostream::operator<<();
    LOBYTE(v33.__locale_) = 58;
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&v33, 1);
    *(void *)((char *)v23 + *(void *)(*v23 - 24) + 24) = 2;
    v24 = (void *)std::ostream::operator<<();
    LOBYTE(v33.__locale_) = 32;
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&v33, 1);
    *(void *)((char *)v25 + *(void *)(*v25 - 24) + 24) = 4;
    uint64_t v26 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
    uint64_t v27 = std::locale::use_facet(&v33, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale(&v33);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v34 + 8, a3);
    *(void *)&v34[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v34 + *(void *)(*(void *)&v34[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *((void *)&v34[0] + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v37) < 0) {
      operator delete(*((void **)&v36 + 1));
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x1C878E270](v39);
  }
  else
  {
    return std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

void sub_1C51D57EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, char a19)
{
  uint64_t v21 = 288;
  while (1)
  {
    if (*(char *)(v19 + v21 - 1) < 0) {
      operator delete(*(void **)(v19 + v21 - 24));
    }
    v21 -= 24;
    if (!v21)
    {
      __cxa_guard_abort(&qword_1EBBDBDC0);
      _Unwind_Resume(a1);
    }
  }
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0;
  v13[1] = 0;
  MEMORY[0x1C878E020](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      size_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1C878E030](v13);
  return a1;
}

void sub_1C51D5A38(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1C878E030](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1C51D5A18);
}

void sub_1C51D5A8C(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v18 = 0;
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_1C51D5C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsLoggerStreambuf::dump(ImsLoggerStreambuf *this, char *a2)
{
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v21 = 0;
  if ((*(unsigned int (**)(void))(**((void **)this + 9) + 24))(*((void *)this + 9)))
  {
    v31.tv_sec = 0;
    *(void *)&v31.tv_usec = 0;
    gettimeofday(&v31, 0);
    memset(&v30, 0, sizeof(v30));
    ims::localtime((ims *)&v31, &v30, v4);
    uint64_t v29 = 0;
    long long v27 = 0u;
    memset(v28, 0, sizeof(v28));
    *(_OWORD *)uint64_t v25 = 0u;
    long long v26 = 0u;
    memset(v24, 0, sizeof(v24));
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
    LOBYTE(__p[0]) = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, (char *)__p);
    *(void *)((char *)&v24[1] + *(void *)(*(void *)&v24[0] - 24) + 8) = 2;
    uint64_t v5 = (void *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 58;
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 1);
    *(void *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 2;
    uint64_t v7 = (void *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 58;
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)__p, 1);
    *(void *)((char *)v8 + *(void *)(*v8 - 24) + 24) = 2;
    int v9 = (void *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 46;
    size_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)__p, 1);
    *(void *)((char *)v10 + *(void *)(*v10 - 24) + 24) = 3;
    uint64_t v11 = (void *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)__p, 1);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v24 + 8, __p);
    *(_OWORD *)v20 = *(_OWORD *)__p;
    uint64_t v21 = v23;
    if (*(void *)&v30.tm_mon != qword_1EBBDC2AC || v30.tm_mday != _MergedGlobals_17)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v23 = 0;
      ims::ctime((ims *)&v31, v12, __p);
      if ((*(uint64_t (**)(void))(**((void **)this + 9) + 32))(*((void *)this + 9)))
      {
        uint64_t v13 = (*(uint64_t (**)(void))(**((void **)this + 9) + 32))(*((void *)this + 9));
        uint64_t v14 = (unsigned char *)HIBYTE(v23);
        if (v23 >= 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = (void **)__p[0];
        }
        if (v23 < 0) {
          uint64_t v14 = __p[1];
        }
        ImsLogger::output(v13, (uint64_t)v20, 6, (uint64_t)"date", v15, &v14[(void)v15], v13);
      }
      HIDWORD(qword_1EBBDC2AC) = v30.tm_year;
      _MergedGlobals_17 = *(void *)&v30.tm_mday;
      if (SHIBYTE(v23) < 0) {
        operator delete(__p[0]);
      }
    }
    *(void *)&v24[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v24 + *(void *)(*(void *)&v24[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *((void *)&v24[0] + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v26) < 0) {
      operator delete(v25[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C878E270](v28);
  }
  uint64_t v16 = (*(uint64_t (**)(void, void **, void, void, char *))(**((void **)this + 9) + 16))(*((void *)this + 9), v20, *((unsigned int *)this + 16), *((void *)this + 5), a2);
  if (v16 == *((void *)this + 5))
  {
    *a2++ = 10;
    uint64_t v16 = (*(uint64_t (**)(void, void **, void, void, char *))(**((void **)this + 9) + 16))(*((void *)this + 9), v20, *((unsigned int *)this + 16), *((void *)this + 5), a2);
  }
  if ((uint64_t)&a2[-v16] < 1)
  {
    uint64_t v18 = 0;
  }
  else
  {
    v17 = 0;
    do
    {
      v17[*((void *)this + 10)] = v17[v16];
      ++v17;
    }
    while (&a2[-v16] != v17);
    uint64_t v18 = (a2 - v16);
  }
  uint64_t v19 = *((void *)this + 10);
  *((void *)this + 5) = v19;
  *((void *)this + 6) = v19 + v18;
  *((void *)this + 7) = v19 + 1024;
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
}

void sub_1C51D6100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1C51D6154()
{
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    uint64_t v5 = std::locale::use_facet(&v8, MEMORY[0x1E4FBA258]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1C51D6210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1C51D6394(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1C878E270](v1);
  _Unwind_Resume(a1);
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

tm *ims::localtime(ims *this, tm *a2, tm *a3)
{
  uint64_t result = 0;
  if (this)
  {
    if (a2)
    {
      size_t v6 = objc_msgSend(MEMORY[0x1E4F1CAF0], "localTimeZone", a3);
      uint64_t v7 = [v6 secondsFromGMT];
      time_t v8 = *(void *)this + v7;
      gmtime_r(&v8, a2);
      a2->tm_gmtoff = v7;
      a2->tm_isdst = [v6 isDaylightSavingTime];

      return a2;
    }
  }
  return result;
}

void sub_1C51D6534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *ImsLogFacility::output(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, unsigned char *a5)
{
  return ImsLogger::output(*(void *)(a1 + 32), a2, a3, a1 + 8, a4, a5, *(void *)(a1 + 32));
}

uint64_t ImsLogFacility::logTimestamps(ImsLogFacility *this)
{
  return *(unsigned __int8 *)(*((void *)this + 4) + 280);
}

void ImsOutStream::putUnknownString(uint64_t a1, uint64_t a2)
{
  if (ImsOutStream::isRedacting((ImsOutStream *)a1))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    ImsOutStream::putRedactedString((void *)a1, (uint64_t)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    int v4 = *(char *)(a2 + 23);
    if (v4 >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *(void *)a2;
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), v5, v6);
    *(unsigned char *)(a1 + 17) = 0;
  }
}

void sub_1C51D65F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ImsLogger::isRedacting(ImsLogger *this)
{
  if (*((unsigned char *)this + 484)) {
    return 0;
  }
  uint64_t has_internal_content = os_variant_has_internal_content();
  return (has_internal_content & 1) == 0 && !ims::isCarrierInstall((ims *)has_internal_content);
}

BOOL ImsOutStream::isRedacting(ImsOutStream *this)
{
  int v1 = (ims *)(*(uint64_t (**)(ImsOutStream *))(*(void *)this + 24))(this);
  if (v1) {
    return 0;
  }
  unint64_t v3 = (ImsLogger *)ims::logger(v1);
  return ImsLogger::isRedacting(v3);
}

uint64_t ImsLogStream::isDefaultPublic(ImsLogStream *this)
{
  return *(unsigned __int8 *)(*((void *)this + 3) + 152);
}

uint64_t ims::logger(ims *this)
{
  return ims::_logger;
}

uint64_t ImsOutStream::putStreamFunction(uint64_t a1, uint64_t (*a2)(void))
{
  return a2(*(void *)(a1 + 8));
}

void *non-virtual thunk to'IPTelephonyManager::logPrefix(IPTelephonyManager *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"IPTelephonyManager: ", 20);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

BOOL ims::AccessNetwork::isWifi(ims::AccessNetwork *this)
{
  int v1 = this;
  if (*((char *)this + 23) < 0)
  {
    int v1 = *(ims::AccessNetwork **)this;
    uint64_t v2 = *((void *)this + 1);
  }
  else
  {
    uint64_t v2 = *((unsigned __int8 *)this + 23);
  }
  unint64_t v3 = (char *)v1 + v2;
  if (v2 >= 8)
  {
    int v4 = v1;
    do
    {
      uint64_t v5 = (char *)memchr(v4, 73, v2 - 7);
      if (!v5) {
        break;
      }
      if (*(void *)v5 == 0x3230382D45454549) {
        return v5 != v3 && v5 - (char *)v1 != -1;
      }
      int v4 = (ims::AccessNetwork *)(v5 + 1);
      uint64_t v2 = v3 - (char *)v4;
    }
    while (v3 - (char *)v4 > 7);
  }
  uint64_t v5 = v3;
  return v5 != v3 && v5 - (char *)v1 != -1;
}

BOOL ims::AccessNetwork::isLTE(ims::AccessNetwork *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 23);
  size_t v2 = *((void *)this + 1);
  if ((v1 & 0x80u) == 0) {
    uint64_t v3 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v3 = *((void *)this + 1);
  }
  if (v3 != 16) {
    return 0;
  }
  if ((v1 & 0x80) != 0)
  {
    char v8 = *(const void **)this;
    if (memcmp(*(const void **)this, "3GPP-E-UTRAN-FDD", v2)) {
      return memcmp(v8, "3GPP-E-UTRAN-TDD", v2) == 0;
    }
    return 1;
  }
  if (!*((unsigned char *)this + 23)) {
    return 1;
  }
  int v4 = "3GPP-E-UTRAN-FDD";
  uint64_t v5 = this;
  uint64_t v6 = *((unsigned __int8 *)this + 23);
  while (*(unsigned __int8 *)v5 == *(unsigned __int8 *)v4)
  {
    uint64_t v5 = (ims::AccessNetwork *)((char *)v5 + 1);
    ++v4;
    if (!--v6) {
      return 1;
    }
  }
  uint64_t v10 = v1 - 1;
  uint64_t v11 = "3GPP-E-UTRAN-TDD";
  do
  {
    int v13 = *(unsigned __int8 *)this;
    this = (ims::AccessNetwork *)((char *)this + 1);
    int v12 = v13;
    int v15 = *(unsigned __int8 *)v11++;
    int v14 = v15;
    BOOL v17 = v10-- != 0;
    BOOL v18 = v12 == v14;
    BOOL v7 = v12 == v14;
  }
  while (v18 && v17);
  return v7;
}

BOOL ims::AccessNetwork::networkTypeChanged(ims::AccessNetwork *this, const ims::AccessNetwork *a2)
{
  uint64_t v2 = *((unsigned __int8 *)this + 23);
  if (*((char *)this + 23) < 0)
  {
    if (!*((void *)this + 1)) {
      return 0;
    }
  }
  else if (!*((unsigned char *)this + 23))
  {
    return 0;
  }
  if (*((char *)this + 47) < 0)
  {
    if (*((void *)this + 4)) {
      goto LABEL_9;
    }
    return 0;
  }
  if (!*((unsigned char *)this + 47)) {
    return 0;
  }
LABEL_9:
  uint64_t v3 = *((unsigned __int8 *)a2 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *((void *)a2 + 1);
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *((unsigned __int8 *)a2 + 47);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a2 + 4);
  }
  if (!v5) {
    return 0;
  }
  if ((v2 & 0x80u) == 0) {
    uint64_t v6 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v6 = *((void *)this + 1);
  }
  if (v6 != v3) {
    return 1;
  }
  if (v4 < 0) {
    a2 = *(const ims::AccessNetwork **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)this, a2, *((void *)this + 1)) != 0;
  }
  if (*((unsigned char *)this + 23))
  {
    uint64_t v7 = v2 - 1;
    do
    {
      int v9 = *(unsigned __int8 *)this;
      this = (ims::AccessNetwork *)((char *)this + 1);
      int v8 = v9;
      int v10 = *(unsigned __int8 *)a2;
      a2 = (const ims::AccessNetwork *)((char *)a2 + 1);
      BOOL v11 = v8 == v10;
      uint64_t v2 = v8 != v10;
      BOOL v11 = !v11 || v7-- == 0;
    }
    while (!v11);
  }
  return v2;
}

uint64_t ims::debug(uint64_t a1, uint64_t a2)
{
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  uint64_t v4 = ims::_logger;
  ImsLogger::getFacilityWithStackTag(ims::_logger, a1, a2, &__p);
  uint64_t v5 = ImsLogger::streamForFacilityAndPriority(v4, (unsigned __int8 *)&__p, 7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1C51D6A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsLogger::getFacilityWithStackTag(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  if (v7)
  {
    memset(&v14, 0, sizeof(v14));
    ImsLogger::logTagForStack(a1, (unsigned __int8 *)a3, &v14);
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    char v9 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v14.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::operator+<char>();
      if ((v13 & 0x80u) == 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        std::string::size_type v11 = v13;
      }
      else {
        std::string::size_type v11 = (std::string::size_type)__p[1];
      }
      std::string::append(a4, (const std::string::value_type *)v10, v11);
      if ((char)v13 < 0) {
        operator delete(__p[0]);
      }
      char v9 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    if (v9 < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C51D6B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogger::facilityWithName(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v5 = a2[23];
  size_t v6 = *((void *)a2 + 1);
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = a2[23];
  }
  else {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (v7)
  {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 127);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a1 + 112);
    }
    if (v7 != v9) {
      goto LABEL_18;
    }
    if (v10 >= 0) {
      std::string::size_type v11 = (unsigned __int8 *)(a1 + 104);
    }
    else {
      std::string::size_type v11 = *(unsigned __int8 **)(a1 + 104);
    }
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, v11, v6)) {
        goto LABEL_18;
      }
    }
    else if (v5)
    {
      for (uint64_t i = a2; *i == *v11; ++i)
      {
        ++v11;
        if (!--v5) {
          return a1 + 96;
        }
      }
LABEL_18:
      BOOL v17 = 0;
      ImsLock::set((pthread_mutex_t *)(a1 + 312), &v17, (uint64_t)v18);
      ImsResult::~ImsResult((ImsResult *)v18);
      unsigned __int8 v13 = *(void **)(a1 + 272);
      if (v13)
      {
        std::string v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(v13, a2);
        if (v14)
        {
          uint64_t v15 = *((void *)v14 + 5);
LABEL_27:
          ImsLock::~ImsLock(&v17);
          return v15;
        }
        if (a3) {
          ImsLogger::addFacility(a1);
        }
      }
      else if (a3)
      {
        ImsLogger::addFacility(a1);
      }
      uint64_t v15 = 0;
      goto LABEL_27;
    }
  }
  return a1 + 96;
}

void sub_1C51D6CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
}

uint64_t ImsLogger::streamForFacilityAndPriority(uint64_t a1, unsigned __int8 *a2, int a3)
{
  BOOL v17 = 0;
  ImsLock::set((pthread_mutex_t *)(a1 + 376), &v17, (uint64_t)v18);
  ImsResult::~ImsResult((ImsResult *)v18);
  if (*(void *)(a1 + 16))
  {
    ImsLock::~ImsLock(&v17);
    uint64_t v7 = ImsLogger::facilityWithName(a1, a2, 1);
    uint64_t v8 = v7;
    if (*(_DWORD *)(v7 + 80) >= a3)
    {
      BOOL v17 = 0;
      ImsLock::set((pthread_mutex_t *)(v7 + 88), &v17, (uint64_t)v18);
      ImsResult::~ImsResult((ImsResult *)v18);
      unint64_t v10 = *(void *)(v8 + 48);
      if (!v10) {
        goto LABEL_23;
      }
      uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        unint64_t v12 = a3;
        if (v10 <= a3) {
          unint64_t v12 = a3 % v10;
        }
      }
      else
      {
        unint64_t v12 = (v10 - 1) & a3;
      }
      unsigned __int8 v13 = *(uint64_t ***)(*(void *)(v8 + 40) + 8 * v12);
      if (!v13 || (std::string v14 = *v13) == 0) {
LABEL_23:
      }
        operator new();
      while (1)
      {
        unint64_t v15 = v14[1];
        if (v15 == a3)
        {
          if (*((_DWORD *)v14 + 4) == a3)
          {
            uint64_t v9 = v14[3];
            goto LABEL_24;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v12) {
            goto LABEL_23;
          }
        }
        std::string v14 = (uint64_t *)*v14;
        if (!v14) {
          goto LABEL_23;
        }
      }
    }
    uint64_t v9 = *(void *)(*(void *)(v7 + 32) + 264);
    if (!v9) {
      ims::createNullStream((ims *)v7);
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 264);
    if (!v9) {
      ims::createNullStream(v6);
    }
LABEL_24:
    ImsLock::~ImsLock(&v17);
  }
  return v9;
}

void sub_1C51D739C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
}

unsigned char *ImsLogger::output(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6, uint64_t a7)
{
  uint64_t v7 = a5;
  if (a5 < a6)
  {
    unsigned __int8 v13 = (pthread_mutex_t *)(a1 + 376);
    std::string v14 = a5;
    do
    {
      int v15 = *v14;
      if (v15 == 10)
      {
        uint64_t v19 = 0;
        ImsLock::set(v13, &v19, (uint64_t)v20);
        ImsResult::~ImsResult((ImsResult *)v20);
        unsigned char *v14 = 0;
        for (uint64_t i = *(void *)(a7 + 8); i != a7; uint64_t i = *(void *)(i + 8))
        {
          BOOL v17 = *(_DWORD **)(i + 16);
          if (v17[4] >= (int)a3) {
            (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v17 + 40))(v17, a2, a3, a4, v7);
          }
        }
        uint64_t v7 = v14 + 1;
        ImsLock::~ImsLock(&v19);
      }
      else if (v15 == 13)
      {
        unsigned char *v14 = 0;
      }
      ++v14;
    }
    while (v14 != a6);
  }
  return v7;
}

void sub_1C51D7570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
}

void ImsLock::~ImsLock(pthread_mutex_t **this)
{
  ImsLock::set(0, this, (uint64_t)v1);
  ImsResult::~ImsResult((ImsResult *)v1);
}

void ImsResult::~ImsResult(ImsResult *this)
{
  *(void *)this = &unk_1F20B2680;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
}

{
  uint64_t vars8;

  ImsResult::~ImsResult(this);
  JUMPOUT(0x1C878E320);
}

uint64_t ImsLock::set@<X0>(pthread_mutex_t *a1@<X1>, pthread_mutex_t **a2@<X0>, uint64_t a3@<X8>)
{
  size_t v6 = *a2;
  if (v6)
  {
    int v7 = pthread_mutex_unlock(v6);
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    if (v7) {
      uint64_t v8 = &_posixDomain;
    }
    else {
      uint64_t v8 = &_bambiDomain;
    }
    v11[0] = &unk_1F20B2680;
    v11[1] = v8;
    int v12 = v7;
    ImsResult::~ImsResult((ImsResult *)v11);
  }
  *a2 = a1;
  if (a1)
  {
    uint64_t result = pthread_mutex_lock(a1);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    if (result) {
      unint64_t v10 = &_posixDomain;
    }
    else {
      unint64_t v10 = &_bambiDomain;
    }
  }
  else
  {
    uint64_t result = 0;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    unint64_t v10 = &_bambiDomain;
  }
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = v10;
  *(_DWORD *)(a3 + 16) = result;
  return result;
}

void ImsLogDestinationOslog::output(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 24)) {
    int v7 = *(NSObject **)(a1 + 24);
  }
  else {
    int v7 = MEMORY[0x1E4F14500];
  }
  if (a3 == 6)
  {
    int v16 = *((char *)a4 + 23);
    if (v16 >= 0) {
      uint64_t v17 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      uint64_t v17 = a4[1];
    }
    BOOL v18 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
    if (v17)
    {
      if (!v18) {
        return;
      }
      uint64_t v19 = (uint64_t *)*a4;
      if (v16 >= 0) {
        uint64_t v19 = a4;
      }
      int v29 = 136446466;
      tm v30 = v19;
      __int16 v31 = 2082;
      tm v32 = a5;
      uint64_t v20 = "I [%{public}s]: %{public}s";
      uint64_t v21 = v7;
      os_log_type_t v22 = OS_LOG_TYPE_INFO;
LABEL_43:
      uint32_t v27 = 22;
      goto LABEL_44;
    }
    if (!v18) {
      return;
    }
    int v29 = 136446210;
    tm v30 = a5;
    uint64_t v20 = "%{public}s";
    uint64_t v21 = v7;
    os_log_type_t v22 = OS_LOG_TYPE_INFO;
LABEL_37:
    uint32_t v27 = 12;
LABEL_44:
    _os_log_impl(&dword_1C51D1000, v21, v22, v20, (uint8_t *)&v29, v27);
    return;
  }
  if (a3 != 3)
  {
    uint64_t v23 = *((unsigned __int8 *)a4 + 23);
    int v24 = (char)v23;
    if ((v23 & 0x80u) != 0) {
      uint64_t v23 = a4[1];
    }
    if (v23)
    {
      BOOL v25 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      if (a3 == 4)
      {
        if (!v25) {
          return;
        }
        long long v26 = (uint64_t *)*a4;
        if (v24 >= 0) {
          long long v26 = a4;
        }
        int v29 = 136446466;
        tm v30 = v26;
        __int16 v31 = 2082;
        tm v32 = a5;
        uint64_t v20 = "W [%{public}s]: %{public}s";
      }
      else
      {
        if (!v25) {
          return;
        }
        v28 = (uint64_t *)*a4;
        if (v24 >= 0) {
          v28 = a4;
        }
        int v29 = 136446466;
        tm v30 = v28;
        __int16 v31 = 2082;
        tm v32 = a5;
        uint64_t v20 = "[%{public}s]: %{public}s";
      }
      uint64_t v21 = v7;
      os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_43;
    }
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v29 = 136446210;
    tm v30 = a5;
    uint64_t v20 = "%{public}s";
    uint64_t v21 = v7;
    os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_37;
  }
  int v9 = *((char *)a4 + 23);
  if (v9 >= 0) {
    uint64_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    uint64_t v10 = a4[1];
  }
  BOOL v11 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v10)
  {
    if (!v11) {
      return;
    }
    int v12 = (uint64_t *)*a4;
    if (v9 >= 0) {
      int v12 = a4;
    }
    int v29 = 136446466;
    tm v30 = v12;
    __int16 v31 = 2082;
    tm v32 = a5;
    long long v13 = "E [%{public}s]: %{public}s";
    long long v14 = v7;
    uint32_t v15 = 22;
  }
  else
  {
    if (!v11) {
      return;
    }
    int v29 = 136446210;
    tm v30 = a5;
    long long v13 = "%{public}s";
    long long v14 = v7;
    uint32_t v15 = 12;
  }
  _os_log_error_impl(&dword_1C51D1000, v14, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v29, v15);
}

void BambiClient::sipStack(void *a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  size_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1 + 23, a2);
  if (v6)
  {
    uint64_t v8 = *((void *)v6 + 5);
    uint64_t v7 = *((void *)v6 + 6);
    goto LABEL_3;
  }
  uint64_t v9 = a1[21];
  if (!v9) {
    goto LABEL_31;
  }
  if (*(char *)(v9 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 4160), *(void *)(v9 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v9 + 4160);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = a2[23];
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)a2 + 1);
  }
  if (size != v11)
  {
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_31;
  }
  if (v12 >= 0) {
    long long v13 = a2;
  }
  else {
    long long v13 = *(unsigned __int8 **)a2;
  }
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_33;
    }
    uint64_t v14 = 0;
    do
    {
      int v15 = __p.__r_.__value_.__s.__data_[v14];
      int v16 = v13[v14];
    }
    while (v15 == v16 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v14++);
    if (v15 == v16) {
      goto LABEL_33;
    }
LABEL_31:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  BOOL v18 = (void *)__p.__r_.__value_.__r.__words[0];
  int v19 = memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_);
  operator delete(v18);
  if (v19) {
    goto LABEL_31;
  }
LABEL_33:
  uint64_t v8 = a1[21];
  uint64_t v7 = a1[22];
LABEL_3:
  *a3 = v8;
  a3[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v4 + v7 + v8 + a3;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v8 + a3 + v5 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v6 + v9 + v17;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      os_log_type_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v30 + v28 + v39 + v29;
        uint64_t v21 = __ROR8__(v30 + v28 + v39, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

void SipStack::updateAccessNetworkInfo(SipStack *this, std::string *a2, char a3)
{
  uint64_t v69 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  *(_OWORD *)uint64_t v65 = 0u;
  *(_OWORD *)uint64_t v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  *(_OWORD *)uint64_t v62 = 0u;
  long long v59 = 0u;
  *(_OWORD *)uint64_t v60 = 0u;
  uint64_t v6 = (std::string *)((char *)this + 3160);
  memset(v58, 0, sizeof(v58));
  ims::AccessNetworks::AccessNetworks(v58, (long long *)((char *)this + 3160));
  uint64_t v57 = 0;
  long long v56 = 0u;
  memset(v55, 0, sizeof(v55));
  if (SHIBYTE(v58[0].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(v55, v58[0].__r_.__value_.__l.__data_, v58[0].__r_.__value_.__l.__size_);
  }
  else {
    v55[0] = v58[0];
  }
  if (SHIBYTE(v58[1].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v55[1], v58[1].__r_.__value_.__l.__data_, v58[1].__r_.__value_.__l.__size_);
  }
  else {
    v55[1] = v58[1];
  }
  long long v56 = v59;
  LOBYTE(v57) = v60[0];
  ims::AccessNetwork::set(v6, a2, a2 + 1);
  uint64_t v7 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"updating access network info to ", 32);
  *(unsigned char *)(v7 + 17) = 0;
  unint64_t v8 = (unsigned char *)ims::operator<<(v7, (uint64_t)v6);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v8[17] = 0;
  uint64_t v9 = (ims::AccessNetwork *)&a2[3];
  ims::AccessNetwork::set((std::string *)((char *)this + 3232), a2 + 3, a2 + 4);
  if (*((char *)this + 3255) < 0)
  {
    if (!*((void *)this + 405)) {
      goto LABEL_16;
    }
  }
  else if (!*((unsigned char *)this + 3255))
  {
    goto LABEL_16;
  }
  if (*((char *)this + 3279) < 0)
  {
    if (!*((void *)this + 408)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (*((unsigned char *)this + 3279))
  {
LABEL_15:
    uint64_t v10 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"updating camped access network info to ", 39);
    *(unsigned char *)(v10 + 17) = 0;
    uint64_t v11 = (unsigned char *)ims::operator<<(v10, (uint64_t)this + 3232);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v11[17] = 0;
  }
LABEL_16:
  *((unsigned char *)this + 3208) = a2[2].__r_.__value_.__s.__data_[0];
  *((unsigned char *)this + 3280) = a2[5].__r_.__value_.__s.__data_[0];
  *((unsigned char *)this + 3224) = a2[2].__r_.__value_.__s.__data_[16];
  *((unsigned char *)this + 3296) = a2[5].__r_.__value_.__s.__data_[16];
  if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)a2))
  {
    std::string::size_type size = HIBYTE(a2[6].__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0) {
      std::string::size_type size = a2[6].__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_25;
    }
    std::string::size_type v13 = HIBYTE(a2[7].__r_.__value_.__r.__words[2]);
    if ((v13 & 0x80u) != 0) {
      std::string::size_type v13 = a2[7].__r_.__value_.__l.__size_;
    }
    if (v13)
    {
      ims::AccessNetwork::set((std::string *)((char *)this + 3304), a2 + 6, a2 + 7);
      uint64_t v14 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"updating last access network info to ", 37);
      *(unsigned char *)(v14 + 17) = 0;
      uint64_t v15 = ims::operator<<(v14, (uint64_t)this + 3304);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      unint64_t v16 = (unsigned char *)(v15 + 17);
    }
    else
    {
LABEL_25:
      *((void *)this + 420) = 0;
      uint64_t v18 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"no last access network. Clearing timestamp.", 43);
      *(unsigned char *)(v18 + 17) = 0;
      unint64_t v16 = (unsigned char *)(v18 + 17);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    ims::AccessNetwork::clear((uint64_t)this + 3304);
    uint64_t v17 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"not on WiFi. Clearing last access network info.", 47);
    *(unsigned char *)(v17 + 17) = 0;
    unint64_t v16 = (unsigned char *)(v17 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *unint64_t v16 = 0;
  if (((_BYTE)v56 != 0) != (a2[2].__r_.__value_.__s.__data_[0] != 0))
  {
    uint64_t v19 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"updating DSCP service classes.", 30);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    SipTransportLayer::updateServiceClass(*((SipTransportLayer **)this + 20));
  }
  BOOL isLTE = ims::AccessNetwork::isLTE((ims::AccessNetwork *)v6);
  BambiAccessBarring::accessNetworkChanged((BambiAccessBarring *)((char *)this + 2928), isLTE);
  if (*((_DWORD *)this + 50) == 2)
  {
    if (!ims::AccessNetwork::networkTypeChanged((ims::AccessNetwork *)v6, (const ims::AccessNetwork *)v55)) {
      goto LABEL_48;
    }
    uint64_t v21 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"access network changed from ", 28);
    *(unsigned char *)(v21 + 17) = 0;
    LoggableString::LoggableString(&v54, v55);
    (*(void (**)(uint64_t, std::string *))(*(void *)v21 + 40))(v21, &v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)" to ", 4);
    *(unsigned char *)(v21 + 17) = 0;
    LoggableString::LoggableString(&__p, v6);
    (*(void (**)(uint64_t, std::string *))(*(void *)v21 + 40))(v21, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    uint64_t v22 = *((void *)this + 18);
    uint64_t v23 = *(SipRegistrationClient **)(v22 + 248);
    unint64_t v24 = *(std::__shared_weak_count **)(v22 + 256);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipRegistrationClient::handleDeviceEvents(v23, 4);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    int v25 = *((unsigned __int8 *)this + 2681);
    if (*((unsigned char *)this + 2681))
    {
      int isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)v6);
      int v27 = ims::AccessNetwork::isWifi((ims::AccessNetwork *)v55);
      uint64_t v28 = *(uint64_t (**)(SipStack *))(*(void *)this + 64);
      if (isWifi != v27)
      {
        uint64_t v29 = v28(this);
        (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"Removing lazuli connections due to cell<->wifi switch", 53);
        *(unsigned char *)(v29 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v29 + 17) = 0;
LABEL_45:
        SipTransportLayer::removeConnections(*((SipTransportLayer **)this + 20), 1, v25 != 0, 1);
        goto LABEL_48;
      }
      uint64_t v34 = v28(this);
      (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"Attempting to preserve lazuli connections", 41);
      *(unsigned char *)(v34 + 17) = 0;
      uint64_t v35 = (unsigned char *)(v34 + 17);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_47;
    }
    if (!ims::AccessNetwork::isIMS((ims::AccessNetwork *)v6) || !ims::AccessNetwork::isIMS((ims::AccessNetwork *)v55)) {
      goto LABEL_45;
    }
    uint64_t v30 = (ImsPrefs *)SipStack::prefs(this);
    uint64_t v31 = (void **)ImsPrefs::getResetSocketWhenNetworkChangeKey(v30);
    if (ImsPrefs::BOOLValue(v30, v31))
    {
      uint64_t v32 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v32);
      uint64_t v33 = (unsigned char *)ImsOutStream::operator<<(v32, "original: removing ununsed connection, resetting connection, and resetOnDelete");
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      if (ims::AccessNetwork::isNR((ims::AccessNetwork *)v6) && ims::AccessNetwork::isLTE((ims::AccessNetwork *)v55)
        || ims::AccessNetwork::isLTE((ims::AccessNetwork *)v6) && ims::AccessNetwork::isNR((ims::AccessNetwork *)v55))
      {
        uint64_t v44 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
        (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v44);
        uint64_t v33 = (unsigned char *)ImsOutStream::operator<<(v44, "new: removing ununsed connection, not resetting connection, and not resetOnDelete");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        int v45 = 0;
LABEL_85:
        v33[17] = 0;
        SipTransportLayer::removeConnections(*((SipTransportLayer **)this + 20), 1, v45, v45);
        uint64_t v48 = *(uint64_t (**)(SipStack *))(*(void *)this + 64);
        if ((a3 & 1) == 0)
        {
          uint64_t v51 = v48(this);
          (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v51);
          uint64_t v52 = (unsigned char *)ImsOutStream::operator<<(v51, "no need to reregister. refreshing call access network information now");
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v52[17] = 0;
          SipStack::refreshAccessNetwork(this);
LABEL_48:
          uint64_t v36 = (ImsPrefs *)SipStack::prefs(this);
          ReRegisterOnMobikeHandoverKey = (void **)ImsPrefs::getReRegisterOnMobikeHandoverKey(v36);
          if (ImsPrefs::BOOLValue(v36, ReRegisterOnMobikeHandoverKey))
          {
            if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)v58)
              && ims::AccessNetwork::isWifi((ims::AccessNetwork *)a2))
            {
              BOOL v38 = ims::AccessNetwork::isWifi((ims::AccessNetwork *)&v60[1]);
              if (v38 != ims::AccessNetwork::isWifi(v9))
              {
                uint64_t v39 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
                (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v39);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"triggering re-registration due to MOBIKE handover", 49);
                *(unsigned char *)(v39 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v39 + 17) = 0;
                uint64_t v40 = *((void *)this + 18);
                uint64_t v42 = *(void *)(v40 + 248);
                unint64_t v41 = *(std::__shared_weak_count **)(v40 + 256);
                if (v41)
                {
                  atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
                  int v43 = *(_DWORD *)(v42 + 1104);
                  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
                }
                else
                {
                  int v43 = *(_DWORD *)(v42 + 1104);
                }
                std::string::basic_string[abi:ne180100]<0>(&v54, "");
                std::string::basic_string[abi:ne180100]<0>(&__p, "xx.xx.xx.xx");
                SipStack::updateRegisteredServices(this, v43, 1, (std::string *)"MobikeHandover", (uint64_t)&v54, (uint64_t)&__p, 1);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v54.__r_.__value_.__l.__data_);
                }
              }
            }
          }
          BOOL v46 = ims::AccessNetwork::isWifi((ims::AccessNetwork *)v6);
          if (v46 != ims::AccessNetwork::isWifi((ims::AccessNetwork *)v55)) {
            SipTransportLayer::updateCrlfKeepAliveNetwork(*((SipTransportLayer **)this + 20), v46);
          }
          goto LABEL_66;
        }
        uint64_t v49 = v48(this);
        (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v49);
        uint64_t v50 = ImsOutStream::operator<<(v49, "need to reregister. defer refreshing call access network information");
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        uint64_t v35 = (unsigned char *)(v50 + 17);
LABEL_47:
        unsigned char *v35 = 0;
        goto LABEL_48;
      }
      uint64_t v47 = (*(uint64_t (**)(SipStack *))(*(void *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(void *)this + 16))(this, v47);
      uint64_t v33 = (unsigned char *)ImsOutStream::operator<<(v47, "same as original: removing ununsed connection, resetting connection, and resetOnDelete");
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    int v45 = 1;
    goto LABEL_85;
  }
LABEL_66:
  if (SHIBYTE(v55[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55[1].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete(v66[1]);
  }
  if (SHIBYTE(v66[0]) < 0) {
    operator delete(v65[0]);
  }
  if (SBYTE7(v63) < 0) {
    operator delete(v62[0]);
  }
  if (SHIBYTE(v61) < 0) {
    operator delete(v60[1]);
  }
  if (SHIBYTE(v58[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58[1].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58[0].__r_.__value_.__l.__data_);
  }
}

void sub_1C51D90DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  ims::AccessNetwork::~AccessNetwork(&a21);
  ims::AccessNetworks::~AccessNetworks(&a34);
  _Unwind_Resume(a1);
}

time_t ims::AccessNetwork::set(std::string *a1, const std::string *a2, const std::string *a3)
{
  std::string::operator=(a1, a2);
  std::string::operator=(a1 + 1, a3);
  time_t result = time(0);
  a1[2].__r_.__value_.__l.__size_ = result;
  return result;
}

void SipStack::logPrefix(SipStack *this, ImsOutStream *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 104))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C51D9254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::loggableName(SipStack *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (_OWORD *)((char *)this + 4160);
  char v4 = (char *)this + 4183;
  if (*((unsigned char *)this + 176))
  {
    if (*v4 < 0)
    {
      std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)this + 520), *((void *)this + 521));
    }
    else
    {
      *(_OWORD *)&v9.__r_.__value_.__l.__data_ = *v3;
      v9.__r_.__value_.__r.__words[2] = *((void *)this + 522);
    }
    uint64_t v5 = std::string::insert(&v9, 0, "SipStack(EMERGENCY) ", 0x14uLL);
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    LoggableString::LoggableString(a2, &__p);
  }
  else
  {
    if (*v4 < 0)
    {
      std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)this + 520), *((void *)this + 521));
    }
    else
    {
      *(_OWORD *)&v9.__r_.__value_.__l.__data_ = *v3;
      v9.__r_.__value_.__r.__words[2] = *((void *)this + 522);
    }
    uint64_t v7 = std::string::insert(&v9, 0, "SipStack ", 9uLL);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    LoggableString::LoggableString(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1C51D93A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void ims::NetworkConfig::~NetworkConfig(void **this)
{
  if (*((char *)this + 583) < 0) {
    operator delete(this[70]);
  }
  if (*((char *)this + 559) < 0) {
    operator delete(this[67]);
  }
  if (*((char *)this + 527) < 0) {
    operator delete(this[63]);
  }
  uint64_t v2 = this + 60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 455) < 0) {
    operator delete(this[54]);
  }
  if (*((char *)this + 431) < 0) {
    operator delete(this[51]);
  }
  if (*((char *)this + 407) < 0) {
    operator delete(this[48]);
  }
  if (*((char *)this + 383) < 0) {
    operator delete(this[45]);
  }
  if (*((char *)this + 359) < 0) {
    operator delete(this[42]);
  }
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  ims::NetworkServices::~NetworkServices(this);
}

void ims::Client::updateNetworkServices(ims::Client *this, const ims::NetworkServices *a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  ims::NetworkServices::NetworkServices((ims::NetworkServices *)v7, a2);
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v6 = *(std::string *)((unsigned char *)this + 1);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  v3[2] = ___ZN3ims6Client21updateNetworkServicesERKNS_15NetworkServicesE_block_invoke;
  v3[3] = &__block_descriptor_tmp_32;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  ims::NetworkServices::NetworkServices((ims::NetworkServices *)v5, (const ims::NetworkServices *)v7);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  ims::NetworkServices::~NetworkServices(v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  ims::NetworkServices::~NetworkServices((void **)v7);
}

void sub_1C51D960C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  ims::NetworkServices::~NetworkServices(&a62);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void ims::NetworkServices::~NetworkServices(void **this)
{
  uint64_t v2 = this + 34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 271) < 0) {
    operator delete(this[31]);
  }
  if (*((char *)this + 247) < 0) {
    operator delete(this[28]);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

ims::NetworkServices *ims::NetworkServices::NetworkServices(ims::NetworkServices *this, const ims::NetworkServices *a2)
{
  char v4 = ims::AccessNetworks::AccessNetworks((std::string *)this, (long long *)a2);
  LODWORD(v4[9].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 54);
  if (*((char *)a2 + 247) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)v4 + 224), *((const std::string::value_type **)a2 + 28), *((void *)a2 + 29));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 14);
    v4[10].__r_.__value_.__r.__words[0] = *((void *)a2 + 30);
    *(_OWORD *)&v4[9].__r_.__value_.__r.__words[1] = v5;
  }
  if (*((char *)a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 248), *((const std::string::value_type **)a2 + 31), *((void *)a2 + 32));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 248);
    *((void *)this + 33) = *((void *)a2 + 33);
    *(_OWORD *)((char *)this + 248) = v6;
  }
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 272), *((long long **)a2 + 34), *((long long **)a2 + 35), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 35) - *((void *)a2 + 34)) >> 3));
  uint64_t v7 = *((void *)a2 + 37);
  *(void *)((char *)this + 302) = *(void *)((char *)a2 + 302);
  *((void *)this + 37) = v7;
  return this;
}

void sub_1C51D9940(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 247) < 0) {
    operator delete(*v2);
  }
  ims::AccessNetworks::~AccessNetworks((void **)v1);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    time_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1C51D99EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  time_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  uint64_t v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      long long v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1C51D9B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

std::string *ims::AccessNetworks::AccessNetworks(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  long long v7 = a2[3];
  this[2].__r_.__value_.__s.__data_[16] = *((unsigned char *)a2 + 64);
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v8;
  }
  uint64_t v9 = this + 4;
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v10 = a2[6];
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  long long v11 = *(long long *)((char *)a2 + 120);
  this[5].__r_.__value_.__s.__data_[16] = *((unsigned char *)a2 + 136);
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v11;
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(this + 6, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v12 = a2[9];
    this[6].__r_.__value_.__r.__words[2] = *((void *)a2 + 20);
    *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v12;
  }
  std::string::size_type v13 = this + 7;
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v14 = *(long long *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((void *)a2 + 23);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  long long v15 = a2[12];
  this[8].__r_.__value_.__s.__data_[16] = *((unsigned char *)a2 + 208);
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v15;
  return this;
}

void sub_1C51D9D08(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*v3);
  }
  ims::AccessNetwork::~AccessNetwork(v2);
  ims::AccessNetwork::~AccessNetwork((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1C51D9D5C()
{
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
  JUMPOUT(0x1C51D9D54);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c27_ZTSN3ims15NetworkServicesE(uint64_t a1)
{
  ims::NetworkServices::~NetworkServices((void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

ims::NetworkServices *__copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c27_ZTSN3ims15NetworkServicesE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  return ims::NetworkServices::NetworkServices((ims::NetworkServices *)(a1 + 56), (const ims::NetworkServices *)(a2 + 56));
}

void sub_1C51D9E2C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ims6Client21updateNetworkServicesERKNS_15NetworkServicesE_block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v3);
  IPTelephonyManager::updateNetworkServices(v3, (uint64_t)a1 + 32, (uint64_t)a1 + 56, 0);
  uint64_t v2 = v4;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C51D9EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *non-virtual thunk to'IPSecurityManager::logPrefix(IPSecurityManager *this, ImsOutStream *a2)
{
  time_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"IPSecurityManager: ", 19);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void *std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

BOOL ims::AccessNetwork::isNR(ims::AccessNetwork *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 23);
  size_t v2 = *((void *)this + 1);
  if ((v1 & 0x80u) == 0) {
    uint64_t v3 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v3 = *((void *)this + 1);
  }
  if (v3 != 13)
  {
    if (v3 != 11) {
      return 0;
    }
    if ((v1 & 0x80) == 0)
    {
      if (*((unsigned char *)this + 23))
      {
        uint64_t v4 = "3GPP-NR-FDD";
        int v5 = this;
        uint64_t v6 = *((unsigned __int8 *)this + 23);
        while (*(unsigned __int8 *)v5 == *(unsigned __int8 *)v4)
        {
          int v5 = (ims::AccessNetwork *)((char *)v5 + 1);
          ++v4;
          if (!--v6) {
            return 1;
          }
        }
        uint64_t v14 = v1 - 1;
        long long v15 = "3GPP-NR-TDD";
        do
        {
          int v17 = *(unsigned __int8 *)this;
          this = (ims::AccessNetwork *)((char *)this + 1);
          int v16 = v17;
          int v19 = *(unsigned __int8 *)v15++;
          int v18 = v19;
          BOOL v20 = v14-- != 0;
          char v21 = v20;
          BOOL v22 = v16 == v18;
          BOOL v10 = v16 == v18;
        }
        while (v22 && (v21 & 1) != 0);
        return v10;
      }
      return 1;
    }
    long long v11 = *(const void **)this;
    if (!memcmp(*(const void **)this, "3GPP-NR-FDD", v2)) {
      return 1;
    }
    BOOL v12 = "3GPP-NR-TDD";
    return memcmp(v11, v12, v2) == 0;
  }
  if ((v1 & 0x80) != 0)
  {
    long long v11 = *(const void **)this;
    if (!memcmp(*(const void **)this, "3GPP-NR-U-FDD", v2)) {
      return 1;
    }
    BOOL v12 = "3GPP-NR-U-TDD";
    return memcmp(v11, v12, v2) == 0;
  }
  if (!*((unsigned char *)this + 23)) {
    return 1;
  }
  int v7 = "3GPP-NR-U-FDD";
  int v8 = this;
  uint64_t v9 = *((unsigned __int8 *)this + 23);
  while (*(unsigned __int8 *)v8 == *(unsigned __int8 *)v7)
  {
    int v8 = (ims::AccessNetwork *)((char *)v8 + 1);
    ++v7;
    if (!--v9) {
      return 1;
    }
  }
  uint64_t v23 = v1 - 1;
  unint64_t v24 = "3GPP-NR-U-TDD";
  do
  {
    int v26 = *(unsigned __int8 *)this;
    this = (ims::AccessNetwork *)((char *)this + 1);
    int v25 = v26;
    int v28 = *(unsigned __int8 *)v24++;
    int v27 = v28;
    BOOL v20 = v23-- != 0;
    char v29 = v20;
    BOOL v22 = v25 == v27;
    BOOL v10 = v25 == v27;
  }
  while (v22 && (v29 & 1) != 0);
  return v10;
}

uint64_t ImsStringOutStream::isDefaultPublic(ImsStringOutStream *this)
{
  return *((unsigned __int8 *)this + 32);
}

void SipStack::setSimConfig(SipStack *this, SipStack *a2, ims::StackConfig *a3)
{
  SipStack::copyStackConfigs(a2, (const ims::StackConfig *)((char *)this + 3376), a3);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v4, (void *)this + 15);
  BambiAccessBarring::setStack((BambiAccessBarring *)((char *)this + 2928), &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C51DA294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type ims::nextToken(std::string *__str, std::string::size_type __pos, std::string *this, char *a4)
{
  uint64_t v4 = a4;
  std::string::size_type v6 = __pos;
  int v7 = __str;
  int v8 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v8 >= 0) {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (size > __pos)
  {
    if (a4[23] >= 0) {
      BOOL v10 = a4;
    }
    else {
      BOOL v10 = *(char **)a4;
    }
    if (v8 >= 0) {
      long long v11 = __str;
    }
    else {
      long long v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    while (strchr(v10, v11->__r_.__value_.__s.__data_[v6]))
    {
      if (size == ++v6) {
        return -1;
      }
    }
  }
  if (v6 == size) {
    return -1;
  }
  std::string::size_type v12 = v6;
  if (v6 < size)
  {
    if (v4[23] >= 0) {
      BOOL v13 = v4;
    }
    else {
      BOOL v13 = *(char **)v4;
    }
    if (v8 >= 0) {
      uint64_t v14 = v7;
    }
    else {
      uint64_t v14 = (std::string *)v7->__r_.__value_.__r.__words[0];
    }
    std::string::size_type v12 = v6;
    while (!strchr(v13, v14->__r_.__value_.__s.__data_[v12]))
    {
      if (size == ++v12)
      {
        std::string::size_type v12 = size;
        break;
      }
    }
  }
  std::string::assign(this, v7, v6, v12 - v6);
  int v15 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
  if (v15 >= 0) {
    std::string::size_type v16 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = v7->__r_.__value_.__l.__size_;
  }
  if (v12 < v16)
  {
    if (v4[23] < 0) {
      uint64_t v4 = *(char **)v4;
    }
    if (v15 < 0) {
      int v7 = (std::string *)v7->__r_.__value_.__r.__words[0];
    }
    while (strchr(v4, v7->__r_.__value_.__s.__data_[v12]))
    {
      if (v16 == ++v12) {
        return v16;
      }
    }
  }
  return v12;
}

unint64_t ims::tokenize(std::string *a1, uint64_t *a2, char *a3)
{
  memset(&__s, 0, sizeof(__s));
  for (std::string::size_type i = ims::nextToken(a1, 0, &__s, a3); i != -1; std::string::size_type i = ims::nextToken(a1, i, &__s, a3))
  {
    std::string::size_type size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __s.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      unint64_t v8 = a2[1];
      if (v8 >= a2[2])
      {
        uint64_t v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (long long *)&__s);
      }
      else
      {
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)a2[1], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v9 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
          *(void *)(v8 + 16) = *((void *)&__s.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v8 = v9;
        }
        uint64_t v10 = v8 + 24;
        a2[1] = v8 + 24;
      }
      a2[1] = v10;
    }
  }
  BOOL v13 = a2;
  uint64_t v11 = *a2;
  uint64_t v12 = v13[1];
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3);
}

void sub_1C51DA51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::join<std::__wrap_iter<std::string const*>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result != a2)
  {
    uint64_t v7 = result;
    char v8 = 1;
    do
    {
      if ((v8 & 1) == 0) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, a4);
      }
      time_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v7);
      char v8 = 0;
      v7 += 24;
    }
    while (v7 != a2);
  }
  return result;
}

void ims::join<std::__wrap_iter<std::string const*>>()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C51DA6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ims::PrefsContainer::release(ims::PrefsContainer *this)
{
  size_t v2 = *(const void **)this;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 1);
  if (v3)
  {
    CFRelease(v3);
  }
}

ims::NetworkConfig *ims::NetworkConfig::NetworkConfig(ims::NetworkConfig *this)
{
  *((void *)this + 7) = 0;
  *((unsigned char *)this + 64) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 16) = 0;
  *((unsigned char *)this + 136) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((unsigned char *)this + 120) = 0;
  *((void *)this + 25) = 0;
  *((unsigned char *)this + 208) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((unsigned char *)this + 192) = 0;
  *((unsigned char *)this + 300) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((void *)this + 36) = 0;
  *((_DWORD *)this + 76) = 1;
  *((_WORD *)this + 154) = 257;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 63, "ims");
  *((_WORD *)this + 266) = 0;
  *((unsigned char *)this + 534) = 1;
  *((_WORD *)this + 292) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  return this;
}

void sub_1C51DA814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 480);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 456);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 455) < 0) {
    operator delete(*(void **)(v10 + 432));
  }
  if (*(char *)(v10 + 431) < 0) {
    operator delete(*(void **)(v10 + 408));
  }
  if (*(char *)(v10 + 407) < 0) {
    operator delete(*(void **)(v10 + 384));
  }
  if (*(char *)(v10 + 383) < 0) {
    operator delete(*(void **)(v10 + 360));
  }
  if (*(char *)(v10 + 359) < 0) {
    operator delete(*(void **)(v10 + 336));
  }
  if (*(char *)(v10 + 335) < 0) {
    operator delete(*v11);
  }
  ims::NetworkServices::~NetworkServices((void **)v10);
  _Unwind_Resume(a1);
}

uint64_t ims::AccessNetwork::clear(uint64_t this)
{
  if (*(char *)(this + 23) < 0)
  {
    **(unsigned char **)this = 0;
    *(void *)(this + 8) = 0;
  }
  else
  {
    *(unsigned char *)this = 0;
    *(unsigned char *)(this + 23) = 0;
  }
  if (*(char *)(this + 47) < 0)
  {
    **(unsigned char **)(this + 24) = 0;
    *(void *)(this + 32) = 0;
  }
  else
  {
    *(unsigned char *)(this + 24) = 0;
    *(unsigned char *)(this + 47) = 0;
  }
  *(void *)(this + 56) = 0;
  return this;
}

void ims::StackConfig::~StackConfig(void **this)
{
  size_t v2 = *this;
  if (v2) {
    CFRelease(v2);
  }
  if (*((char *)this + 711) < 0) {
    operator delete(this[86]);
  }
  if (*((char *)this + 687) < 0) {
    operator delete(this[83]);
  }
  if (*((char *)this + 663) < 0) {
    operator delete(this[80]);
  }
  if (*((char *)this + 639) < 0) {
    operator delete(this[77]);
  }
  ims::NetworkConfig::~NetworkConfig(this + 3);
  ims::PrefsContainer::release((ims::PrefsContainer *)(this + 1));
}

void ImsStringOutStream::ImsStringOutStream(ImsStringOutStream *this)
{
}

void sub_1C51DA9F4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4083609F1ALL);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::updatePolicyInterfaceList(uint64_t a1, std::string *a2)
{
  if (*(void *)(a1 + 232))
  {
    memset(v6, 0, sizeof(v6));
    std::string::basic_string[abi:ne180100]<0>(__p, ", ");
    ims::tokenize(a2, v6, (char *)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    (*(void (**)(void, uint64_t *))(**(void **)(a1 + 232) + 96))(*(void *)(a1 + 232), v6);
    __p[0] = v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_1C51DAAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::getInstance(uint64_t *__return_ptr a1@<X8>)
{
  if (!(void)gIPTelephonyManager) {
    _ZNSt3__115allocate_sharedB8ne180100I18IPTelephonyManagerNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  uint64_t v2 = *((void *)&gIPTelephonyManager + 1);
  *a1 = gIPTelephonyManager;
  a1[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

void BambiAccessBarring::accessNetworkChanged(BambiAccessBarring *this, int a2)
{
  if (*((unsigned __int8 *)this + 136) != a2)
  {
    *((unsigned char *)this + 136) = a2;
    uint64_t v4 = (*(uint64_t (**)(BambiAccessBarring *))(*(void *)this + 64))(this);
    (*(void (**)(BambiAccessBarring *, uint64_t))(*(void *)this + 16))(this, v4);
    if (a2) {
      char v5 = "";
    }
    else {
      char v5 = "non-";
    }
    if (a2) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = 4;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)v5, v6);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"LTE access network", 18);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    BambiAccessBarring::checkFlags(this);
  }
}

void BambiAccessBarring::registerForUac(BambiAccessBarring *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3) {
      uint64_t v4 = *((void *)this + 18);
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  char v5 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *((void *)this + 21);
      if (v8 && v4)
      {
        uint64_t v9 = *(unsigned int *)(v8 + 4100);
        if (*(char *)(v8 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 4160), *(void *)(v8 + 4168));
        }
        else {
          std::string __p = *(std::string *)(v8 + 4160);
        }
        (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, &__p, v9, 4);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C51DADD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void IPSecurityManager::updatePoliciesFromList(uint64_t a1, void ***a2)
{
  if (!*(void *)(a1 + 320))
  {
    uint64_t v27 = a1 + 16;
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v23);
    unint64_t v24 = *(void **)(v23 + 8);
    int v25 = "Not updating interfaces - security policy not initialized";
    uint64_t v26 = 57;
    goto LABEL_36;
  }
  uint64_t v3 = *(void *)(a1 + 184);
  if (!v3) {
    goto LABEL_34;
  }
  uint64_t v4 = *(void *)(v3 + 168);
  if (!v4) {
    goto LABEL_34;
  }
  uint64_t v6 = *(void *)(v4 + 656);
  uint64_t v7 = *(std::__shared_weak_count **)(v4 + 664);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (!v6)
  {
LABEL_34:
    uint64_t v22 = *(void *)(a1 + 16);
    uint64_t v21 = a1 + 16;
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(v22 + 56))(v21);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v23);
    unint64_t v24 = *(void **)(v23 + 8);
    int v25 = "Network manager not initialized";
    uint64_t v26 = 31;
LABEL_36:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v23 + 17) = 0;
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy interfaces before update");
  int v28 = (uint64_t **)(a1 + 160);
  printInterfaces(&__p, (uint64_t *)(a1 + 160));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v34 = 0;
  v35[0] = 0;
  v35[1] = 0;
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v34, (uint64_t)v28);
  std::__tree<std::string>::destroy((uint64_t)v28, *(char **)(a1 + 168));
  *(void *)(a1 + 160) = a1 + 168;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    uint64_t v10 = a1 + 16;
    do
    {
      uint64_t v11 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&v34, v8);
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      __p.__r_.__value_.__r.__words[2] = 0;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      if (v35 == (char **)v11)
      {
        uint64_t v12 = *(void *)(*(void *)(a1 + 184) + 168);
        uint64_t v13 = *(void *)(v12 + 656);
        uint64_t v14 = *(std::__shared_weak_count **)(v12 + 664);
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v13 + 64))(v13, v8);
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        if (v15)
        {
          (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 56))(v29, a1, v15);
          ImsResult::operator=((uint64_t)&__p, (uint64_t)v29);
          ImsResult::~ImsResult((ImsResult *)v29);
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        else
        {
          (*(void (**)(void *__return_ptr, uint64_t, void **))(*(void *)a1 + 64))(v29, a1, v8);
          ImsResult::operator=((uint64_t)&__p, (uint64_t)v29);
          ImsResult::~ImsResult((ImsResult *)v29);
        }
      }
      else
      {
        std::__tree<std::string>::erase((uint64_t **)&v34, (uint64_t)v11);
      }
      if ((*(unsigned int (**)(std::string::size_type, void))(*(void *)__p.__r_.__value_.__l.__size_
                                                                          + 24))(__p.__r_.__value_.__l.__size_, LODWORD(__p.__r_.__value_.__r.__words[2])))
      {
        uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 56))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(a1 + 16, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Unable to add policy for interface ", 35);
        *(unsigned char *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(void *)v16 + 32))(v16, v8);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v16 + 17) = 0;
      }
      else
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v28, v8, (uint64_t)v8);
      }
      ImsResult::~ImsResult((ImsResult *)&__p);
      v8 += 3;
    }
    while (v8 != v9);
  }
  int v17 = (uint64_t *)v34;
  if (v34 != v35)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 72))(a1, v17 + 4);
      int v18 = (char *)v17[1];
      if (v18)
      {
        do
        {
          int v19 = (char **)v18;
          int v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          int v19 = (char **)v17[2];
          BOOL v20 = *v19 == (char *)v17;
          int v17 = (uint64_t *)v19;
        }
        while (!v20);
      }
      int v17 = (uint64_t *)v19;
    }
    while (v19 != v35);
  }
  PolicyApply(*(void *)(*(void *)(a1 + 320) + 72));
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy interfaces after update");
  printInterfaces(&__p, (uint64_t *)v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__tree<std::string>::destroy((uint64_t)&v34, v35[0]);
}

void sub_1C51DB384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  std::__tree<std::string>::destroy(v25 - 112, *(char **)(v25 - 104));
  _Unwind_Resume(a1);
}

uint64_t IMSClientManager::instance(IMSClientManager *this)
{
  if (!IMSClientManager::_instance) {
    operator new();
  }
  return IMSClientManager::_instance;
}

void sub_1C51DB468(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1020C40587D46A0);
  _Unwind_Resume(a1);
}

void BambiClient::updateAccessNetworkInfo(void *a1, unsigned __int8 *a2, ims::AccessNetwork *a3, char a4)
{
  uint64_t v32 = 0;
  long long v33 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 192))(&v32);
  uint64_t v8 = (SipStack *)v32;
  if (v32)
  {
    if (ims::AccessNetwork::isNR((ims::AccessNetwork *)(v32 + 3160)) && ims::AccessNetwork::isLTE(a3))
    {
      uint64_t v9 = (void *)a1[42];
      if (v9)
      {
        while (1)
        {
          uint64_t v10 = v9[2];
          if (v10) {
            break;
          }
LABEL_41:
          uint64_t v9 = (void *)*v9;
          if (!v9)
          {
            uint64_t v8 = (SipStack *)v32;
            goto LABEL_46;
          }
        }
        uint64_t v11 = *(std::__shared_weak_count **)(v10 + 368);
        if (v11)
        {
          uint64_t v12 = std::__shared_weak_count::lock(v11);
          if (v12) {
            uint64_t v13 = *(void *)(v10 + 360);
          }
          else {
            uint64_t v13 = 0;
          }
        }
        else
        {
          uint64_t v13 = 0;
          uint64_t v12 = 0;
        }
        if (*(char *)(v13 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(v13 + 4160), *(void *)(v13 + 4168));
        }
        else {
          std::string __s1 = *(std::string *)(v13 + 4160);
        }
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __s1.__r_.__value_.__l.__size_;
        }
        uint64_t v15 = a2[23];
        int v16 = (char)v15;
        if ((v15 & 0x80u) != 0) {
          uint64_t v15 = *((void *)a2 + 1);
        }
        if (size == v15)
        {
          if (v16 >= 0) {
            int v17 = a2;
          }
          else {
            int v17 = *(unsigned __int8 **)a2;
          }
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            uint64_t v27 = (void *)__s1.__r_.__value_.__r.__words[0];
            BOOL v26 = memcmp(__s1.__r_.__value_.__l.__data_, v17, __s1.__r_.__value_.__l.__size_) == 0;
            goto LABEL_36;
          }
          if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23))
          {
            BOOL v26 = 1;
            if (!v12)
            {
LABEL_39:
              if (v26) {
                SipTimerContainer::cancelTimer((int8x8_t *)(v9[2] + 216), (std::string *)"EPSWatchdogTimer");
              }
              goto LABEL_41;
            }
LABEL_38:
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            goto LABEL_39;
          }
          uint64_t v18 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
          p_s1 = &__s1;
          do
          {
            int v21 = p_s1->__r_.__value_.__s.__data_[0];
            p_s1 = (std::string *)((char *)p_s1 + 1);
            int v20 = v21;
            int v23 = *v17++;
            int v22 = v23;
            BOOL v25 = v18-- != 0;
            BOOL v26 = v20 == v22;
          }
          while (v20 == v22 && v25);
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          {
LABEL_37:
            if (!v12) {
              goto LABEL_39;
            }
            goto LABEL_38;
          }
        }
        else
        {
          BOOL v26 = 0;
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_37;
          }
        }
        uint64_t v27 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_36:
        operator delete(v27);
        goto LABEL_37;
      }
    }
LABEL_46:
    SipStack::updateAccessNetworkInfo(v8, (std::string *)a3, a4);
  }
  else
  {
    uint64_t v29 = a1[2];
    int v28 = a1 + 2;
    uint64_t v30 = (*(uint64_t (**)(void *))(v29 + 56))(v28);
    (*(void (**)(void *, uint64_t))(*v28 + 16))(v28, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"Unable to update network info for invalid stack ", 48);
    *(unsigned char *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v30 + 32))(v30, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v30 + 17) = 0;
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
}

void sub_1C51DB77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<MessageSession,std::allocator<MessageSession>,std::string const&,void>(const std::string *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x448uLL);
  std::__shared_ptr_emplace<MessageSession>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<MessageSession>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4 + 18, (uint64_t)(v4 + 3));
}

void sub_1C51DB80C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<MessageSession>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<MessageSession>,0>(void *a1, const std::string *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20B2630;
  MessageSession::MessageSession((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1C51DB868(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MessageSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B2630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MessageSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B2630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<MessageSession>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      char v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void ImsResultDomainPosix::~ImsResultDomainPosix(void **this)
{
  *this = &unk_1F20B2778;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20B2778;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void ImsResultDomainBambi::~ImsResultDomainBambi(void **this)
{
  *this = &unk_1F20B2778;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20B2778;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void ImsResult::ImsResult(ImsResult *this, const std::string *a2)
{
  *(void *)this = &unk_1F20B2680;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v4 = (void *)((char *)this + 24);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 1) = a2->__r_.__value_.__l.__size_;
  *((_DWORD *)this + 4) = a2->__r_.__value_.__r.__words[2];
  std::string::operator=((std::string *)this + 2, a2 + 2);
  if (a2[1].__r_.__value_.__r.__words[0]) {
    operator new();
  }
  void *v4 = 0;
  if (a2[1].__r_.__value_.__l.__size_) {
    operator new();
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = a2[1].__r_.__value_.__r.__words[2];
  if (v5) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  *((void *)this + 5) = v5;
}

void sub_1C51DBB6C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v3, 0x10F3C40DD1005D0);
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

uint64_t ImsResult::ImsResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return a1;
}

void sub_1C51DBC5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsResult::description@<X0>(ImsResult *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    return std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*(void *)(v2 + 24) + 8, a2);
  }
  uint64_t v4 = *((unsigned int *)this + 4);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(**((void **)this + 1) + 16);
  uint64_t v6 = *((void *)this + 1);
  return v5(v6, v4);
}

void ImsResult::setCause(ImsResult *this, const ImsResult *a2)
{
}

void sub_1C51DBD84(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C40DD1005D0);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    if (*(void *)(a2 + 24)) {
      operator new();
    }
    *(void *)(a1 + 24) = 0;
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    if (*(void *)(a2 + 32)) {
      operator new();
    }
    *(void *)(a1 + 32) = 0;
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *(void *)(a2 + 40);
    if (v7) {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
    }
    *(void *)(a1 + 40) = v7;
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = 0;
  }
  return a1;
}

void sub_1C51DBF20(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C40DD1005D0);
  _Unwind_Resume(a1);
}

ImsOutStream *ImsResult::log(ImsResult *this, ImsOutStream *a2)
{
  LoggableString::LoggableString(&__p, (const std::string *)(*((void *)this + 1) + 8));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = (ImsStringOutStream *)*((void *)this + 3);
  if (v4)
  {
    ImsStringOutStream::loggableStr(v4, &__p);
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    uint64_t v5 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_10;
  }
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 1) + 16))(&v7);
  LoggableString::LoggableString(&__p, &v7);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v5 = (void *)v7.__r_.__value_.__r.__words[0];
LABEL_10:
    operator delete(v5);
  }
LABEL_11:
  if (*((void *)this + 4))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)", caused by ", 12);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(void, ImsOutStream *))(**((void **)this + 4) + 16))(*((void *)this + 4), a2);
  }
  return a2;
}

void sub_1C51DC208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void ImsStringOutStream::loggableStr(ImsStringOutStream *this@<X0>, std::string *a2@<X8>)
{
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((void *)this + 3) + 8, &__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C51DC2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsResult::loggableName(ImsResult *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C51DC3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a16);
  _Unwind_Resume(a1);
}

void ImsStringOutStream::~ImsStringOutStream(ImsStringOutStream *this)
{
  *(void *)this = &unk_1F20D1038;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v1 = *((void *)this + 1);
    if (v1) {
      (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    }
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20D1038;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v1 = *((void *)this + 1);
    if (v1) {
      (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    }
  }
  JUMPOUT(0x1C878E320);
}

std::string *ImsResultDomainPosix::textForResultCode@<X0>(int __errnum@<W1>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(__strerrbuf, 0, sizeof(__strerrbuf));
  if (!strerror_r(__errnum, (char *)__strerrbuf, 0x1FFuLL)) {
    return std::string::__assign_external(a2, (const std::string::value_type *)__strerrbuf);
  }
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v8, 0, sizeof(v8));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Unknown Error ", 14);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8 + 8, &v6);
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  uint64_t v4 = (void *)MEMORY[0x1E4FBA418];
  a2->__r_.__value_.__r.__words[2] = v7;
  *(void *)&v8[0] = *v4;
  *(void *)((char *)v8 + *(void *)(*(void *)&v8[0] - 24)) = v4[3];
  *((void *)&v8[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (std::string *)MEMORY[0x1C878E270](v12);
}

void sub_1C51DC68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C878E270](a1 + 112);
  return a1;
}

void *ImsResultDomainBambi::textForResultCode@<X0>(int a1@<W1>, void *a2@<X8>)
{
  switch(a1)
  {
    case 1073741825:
      uint64_t v3 = "Invalid Argument";
      break;
    case 1073741826:
      uint64_t v3 = "Invalid State";
      break;
    case 1073741827:
      uint64_t v3 = "Uninitialized";
      break;
    case 1073741828:
      uint64_t v3 = "Sip Format Error";
      break;
    case 1073741829:
    case 1073741846:
    case 1073741849:
      goto LABEL_7;
    case 1073741830:
      uint64_t v3 = "Timed Out";
      break;
    case 1073741831:
      uint64_t v3 = "Media Timed Out";
      break;
    case 1073741832:
      uint64_t v3 = "Auth Sync Failure";
      break;
    case 1073741833:
      uint64_t v3 = "Not Implemented";
      break;
    case 1073741834:
      uint64_t v3 = "Not Available";
      break;
    case 1073741835:
      uint64_t v3 = "Parse Error";
      break;
    case 1073741836:
      uint64_t v3 = "Not Found";
      break;
    case 1073741837:
      uint64_t v3 = "Empty";
      break;
    case 1073741838:
      uint64_t v3 = "Pending";
      break;
    case 1073741839:
      uint64_t v3 = "Remote Termination";
      break;
    case 1073741840:
      uint64_t v3 = "Socket Send Error";
      break;
    case 1073741841:
      uint64_t v3 = "Canceled";
      break;
    case 1073741842:
      uint64_t v3 = "Network Error";
      break;
    case 1073741843:
      uint64_t v3 = "Socket Closed By Peer Debug";
      break;
    case 1073741844:
      uint64_t v3 = "Network Unreachable Error";
      break;
    case 1073741845:
      uint64_t v3 = "AVConferenced crashed";
      break;
    case 1073741847:
      uint64_t v3 = "Limited Connectivity";
      break;
    case 1073741848:
      uint64_t v3 = "Authentication Failed";
      break;
    case 1073741850:
      uint64_t v3 = "Socket Reset By Peer Debug";
      break;
    default:
      if (a1)
      {
        if (a1 == 3) {
          uint64_t v3 = "Accepted";
        }
        else {
LABEL_7:
        }
          uint64_t v3 = "Unknown Error";
      }
      else
      {
        uint64_t v3 = "Success";
      }
      break;
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void ims::result::resultWithCause(const std::string *this@<X0>, const ImsResult *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  ImsResult::ImsResult((ImsResult *)a3, this);
  ImsResult::setCause((ImsResult *)a3, a2);
}

void sub_1C51DC9F4(_Unwind_Exception *a1)
{
  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

uint64_t ims::result::log(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(void, void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16)))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = (unsigned char *)ims::error(a1, (uint64_t)__p);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)a2 + 16))(a2, v4);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v4[17] = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  return a2;
}

void sub_1C51DCB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::result::log@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(unsigned int (**)(void, void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16)))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    long long v6 = (unsigned char *)ims::error(a1, (uint64_t)__p);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)a2 + 16))(a2, v6);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v6[17] = 0;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  return ImsResult::ImsResult(a3, a2);
}

void sub_1C51DCC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ImsResultDomainPosix::isError(ImsResultDomainPosix *this, int a2)
{
  return a2 != 0;
}

uint64_t ImsResultDomainBambi::isError(ImsResultDomainBambi *this, unsigned int a2)
{
  return (a2 >> 30) & 1;
}

uint64_t ImsResultDomain::ImsResultDomain(uint64_t a1, const std::string *a2)
{
  *(void *)a1 = &unk_1F20B2778;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  return a1;
}

void sub_1C51DCD98(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void __clang_call_terminate(void *a1)
{
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E650EF70, MEMORY[0x1E4FBA1C8]);
}

void sub_1C51DCE30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  time_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    char v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    char v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    unint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t _GLOBAL__sub_I_ImsResult_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "POSIX");
  ImsResultDomain::ImsResultDomain((uint64_t)&_posixDomain, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  _posixDomain = (uint64_t)&unk_1F20B26D8;
  __cxa_atexit((void (*)(void *))ImsResultDomainPosix::~ImsResultDomainPosix, &_posixDomain, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Bambi");
  ImsResultDomain::ImsResultDomain((uint64_t)&_bambiDomain, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  _bambiDomain = (uint64_t)&unk_1F20B2730;
  return __cxa_atexit((void (*)(void *))ImsResultDomainBambi::~ImsResultDomainBambi, &_bambiDomain, &dword_1C51D1000);
}

void sub_1C51DD13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsOutStream::operator<<(uint64_t a1, char *__s)
{
  size_t v4 = *(void **)(a1 + 8);
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__s, v5);
  *(unsigned char *)(a1 + 17) = 0;
  return a1;
}

uint64_t AVCAudioSession::AVCAudioSession(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, ImsPrefs *a5, uint64_t *a6, long long *a7, dispatch_object_t *a8)
{
  *(void *)(a1 + 112) = &unk_1F20B2FA8;
  long long v11 = (std::__shared_weak_count *)a2[1];
  uint64_t v37 = *a2;
  BOOL v38 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)a4[1];
  uint64_t v35 = *a4;
  uint64_t v36 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)a6[1];
  uint64_t v33 = *a6;
  uint64_t v34 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AVCRTPSession<AVCAudioStream>::AVCRTPSession(a1, (uint64_t *)&off_1F20B2A10, &v37, a3, &v35, a5, &v33, a7, a8);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  *(void *)a1 = &unk_1F20B27B0;
  *(void *)(a1 + 24) = &unk_1F20B2880;
  *(void *)(a1 + 112) = &unk_1F20B29A8;
  *(void *)(a1 + 560) = &unk_1F20B29F0;
  uint64_t v14 = *a4;
  uint64_t v15 = *(void **)(*a4 + 232);
  if (!v15) {
    goto LABEL_24;
  }
  uint64_t v16 = *a4 + 232;
  do
  {
    unint64_t v17 = v15[4];
    BOOL v18 = v17 >= a3;
    if (v17 >= a3) {
      int v19 = v15;
    }
    else {
      int v19 = v15 + 1;
    }
    if (v18) {
      uint64_t v16 = (uint64_t)v15;
    }
    uint64_t v15 = (void *)*v19;
  }
  while (*v19);
  if (v16 != *a4 + 232 && *(void *)(v16 + 32) <= a3)
  {
    BOOL v26 = 1;
  }
  else
  {
LABEL_24:
    uint64_t v20 = v14 + 256;
    int v21 = *(void **)(v14 + 256);
    if (!v21) {
      goto LABEL_35;
    }
    uint64_t v22 = v14 + 256;
    do
    {
      unint64_t v23 = v21[4];
      BOOL v24 = v23 >= a3;
      if (v23 >= a3) {
        BOOL v25 = v21;
      }
      else {
        BOOL v25 = v21 + 1;
      }
      if (v24) {
        uint64_t v22 = (uint64_t)v21;
      }
      int v21 = (void *)*v25;
    }
    while (*v25);
    if (v22 == v20 || *(void *)(v22 + 32) > a3) {
LABEL_35:
    }
      uint64_t v22 = v20;
    BOOL v26 = v22 != v20;
  }
  *(unsigned char *)(a1 + 568) = v26;
  *(unsigned char *)(a1 + 617) = 0;
  *(void *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_WORD *)(a1 + 684) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(unsigned char *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  std::string::basic_string[abi:ne180100]<0>(v31, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v27 = ims::debug((uint64_t)v31, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"AVCAudioSession", 15);
  *(unsigned char *)(v27 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v27 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v27 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v27 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v27 + 17) = 0;
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  return a1;
}

void sub_1C51DD4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v24 + 647) < 0) {
    operator delete(*v25);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v24 + 584);
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  AVCRTPSession<AVCAudioStream>::~AVCRTPSession(v24, (uint64_t *)&off_1F20B2A10);
  _Unwind_Resume(a1);
}

void AVCAudioSession::~AVCAudioSession(AVCAudioSession *this)
{
  *(void *)this = &unk_1F20B27B0;
  *((void *)this + 3) = &unk_1F20B2880;
  *((void *)this + 14) = &unk_1F20B29A8;
  *((void *)this + 70) = &unk_1F20B29F0;
  std::string::basic_string[abi:ne180100]<0>(v6, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"~AVCAudioSession", 16);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  AVCRTPStackController::sendNotifyIpVersionReq(*((AVCRTPStackController **)this + 64), *((_DWORD *)this + 170));
  if ([*((id *)this + 61) delegate])
  {

    [*((id *)this + 61) setDelegate:0];
  }
  nw_release(*((void **)this + 75));
  nw_release(*((void **)this + 76));
  if (*((char *)this + 647) < 0) {
    operator delete(*((void **)this + 78));
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  AVCRTPSession<AVCAudioStream>::~AVCRTPSession((uint64_t)this, (uint64_t *)&off_1F20B2A10);
}

{
  uint64_t vars8;

  AVCAudioSession::~AVCAudioSession(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'AVCAudioSession::~AVCAudioSession(AVCAudioSession *this)
{
}

{
  AVCAudioSession::~AVCAudioSession((AVCAudioSession *)((char *)this - 112));
}

{
  AVCAudioSession::~AVCAudioSession((AVCAudioSession *)((char *)this - 560));
}

{
  uint64_t vars8;

  AVCAudioSession::~AVCAudioSession((AVCAudioSession *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  AVCAudioSession::~AVCAudioSession((AVCAudioSession *)((char *)this - 112));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  AVCAudioSession::~AVCAudioSession((AVCAudioSession *)((char *)this - 560));
  JUMPOUT(0x1C878E320);
}

void AVCAudioSession::initialize(uint64_t a1, uint64_t a2, char a3, uint64_t a4, const std::string *a5, uint64_t a6, uint64_t *a7)
{
  std::string::basic_string[abi:ne180100]<0>(&v120, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::debug((uint64_t)&v120, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"initialize", 10);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v11 + 17) = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v114 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v122) < 0) {
    operator delete(v120);
  }
  uint64_t v13 = (void *)MEMORY[0x1C878EAB0](v12);
  uint64_t v14 = (std::__shared_weak_count *)a7[1];
  if (v14)
  {
    uint64_t v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      uint64_t v16 = *a7;
      if (*a7)
      {
        unint64_t v17 = *(std::__shared_weak_count **)(v16 + 128);
        if (v17)
        {
          unint64_t v17 = std::__shared_weak_count::lock(v17);
          BOOL v18 = v17;
          if (v17) {
            unint64_t v17 = *(std::__shared_weak_count **)(v16 + 120);
          }
        }
        else
        {
          BOOL v18 = 0;
        }
        uint64_t v20 = (ImsPrefs *)SipStack::prefs((SipStack *)v17);
        EnableAPOnlyModeKey = (void **)ImsPrefs::getEnableAPOnlyModeKey(v20);
        int v22 = ImsPrefs::BOOLValue(v20, EnableAPOnlyModeKey);
        if (v22) {
          LOBYTE(v22) = _os_feature_enabled_impl();
        }
        *(unsigned char *)(a1 + 592) = v22;
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        unint64_t v23 = *(std::__shared_weak_count **)(v16 + 128);
        if (v23)
        {
          unint64_t v23 = std::__shared_weak_count::lock(v23);
          uint64_t v24 = v23;
          if (v23) {
            unint64_t v23 = *(std::__shared_weak_count **)(v16 + 120);
          }
        }
        else
        {
          uint64_t v24 = 0;
        }
        BOOL v25 = (ImsPrefs *)SipStack::prefs((SipStack *)v23);
        BOOL v26 = (void **)ImsPrefs::getEnableAPOnlyModeKey(v25);
        int v27 = ImsPrefs::BOOLValue(v25, v26);
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        if (v27)
        {
          uint64_t v28 = *(void *)(a1 + 512);
          uint64_t v29 = (std::__shared_weak_count *)a7[1];
          uint64_t v128 = *a7;
          v129 = v29;
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          AVCRTPStackController::sendNotifyIpVersionReq(v28, &v128);
          if (v129) {
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        int v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
        if (v30 == 2)
        {
          if (*(unsigned char *)(v16 + 584))
          {
            uint64_t v31 = v16 + 152;
            goto LABEL_42;
          }
        }
        else if (v30 == 6 && *(unsigned char *)(v16 + 1856))
        {
          uint64_t v31 = v16 + 1496;
          goto LABEL_42;
        }
        if (!*(unsigned char *)(v16 + 1328))
        {
          std::string::basic_string[abi:ne180100]<0>(&v120, "avc.audio.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v39 = ims::error((uint64_t)&v120, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"initialize", 10);
          *(unsigned char *)(v39 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)" No media settings", 18);
          *(unsigned char *)(v39 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v39 + 17) = 0;
          if (v114 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v122) < 0) {
            operator delete(v120);
          }
          uint64_t v40 = *(std::__shared_weak_count **)(a1 + 40);
          if (!v40) {
            goto LABEL_179;
          }
          unint64_t v41 = std::__shared_weak_count::lock(v40);
          if (!v41) {
            goto LABEL_179;
          }
          uint64_t v42 = v41;
          int v43 = *(void (****)(void, void **, uint64_t))(a1 + 32);
          if (v43)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v126);
            (**v43)(v43, &v126, 9);
            if (v127) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v127);
            }
          }
          uint64_t v44 = v42;
          goto LABEL_178;
        }
        uint64_t v31 = v16 + 1032;
LABEL_42:
        if (*(unsigned char *)(a1 + 592))
        {
          std::string::basic_string[abi:ne180100]<0>(&v120, "avc.audio.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v32 = ims::debug((uint64_t)&v120, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"Use skywalk channels instead of sockets", 39);
          *(unsigned char *)(v32 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v32 + 17) = 0;
          if (v114 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v122) < 0) {
            operator delete(v120);
          }
          *(unsigned char *)(a1 + 616) = a3;
          std::string::operator=((std::string *)(a1 + 624), a5);
          uint64_t v33 = *(void *)(v31 + 8);
          uint64_t v34 = *(std::__shared_weak_count **)(v31 + 16);
          if (v34) {
            atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((a3 & 1) == 0)
          {
            if (!v33 && !(*(char *)(a1 + 551) < 0 ? *(void *)(a1 + 536) : *(unsigned __int8 *)(a1 + 551))) {
              *(unsigned char *)(a1 + 617) = 1;
            }
            if (!*(unsigned char *)(a1 + 617))
            {
              v124[0] = v16;
              v124[1] = v15;
              atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              AVCAudioSession::scheduleSkywalkInit((uint64_t)v125, a1, v124);
              ImsResult::~ImsResult((ImsResult *)v125);
              std::__shared_weak_count::__release_weak(v15);
              if (!v34) {
                goto LABEL_179;
              }
LABEL_116:
              uint64_t v44 = v34;
LABEL_178:
              std::__shared_weak_count::__release_shared[abi:ne180100](v44);
              goto LABEL_179;
            }
          }
          uint64_t v118 = v16;
          long long v119 = v15;
          atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 48))(&v120, a1, &v118);
          long long v115 = 0u;
          long long v116 = 0u;
          long long v117 = 0u;
          __p[0] = &unk_1F20B2680;
          __p[1] = &_bambiDomain;
          int v113 = 0;
          BOOL v58 = v121 == &_bambiDomain && v122 == 0;
          ImsResult::~ImsResult((ImsResult *)__p);
          ImsResult::~ImsResult((ImsResult *)&v120);
          if (v119) {
            std::__shared_weak_count::__release_weak(v119);
          }
          long long v59 = *(std::__shared_weak_count **)(a1 + 40);
          if (v58)
          {
            if (v59)
            {
              uint64_t v60 = std::__shared_weak_count::lock(v59);
              if (v60)
              {
                long long v61 = v60;
                uint64_t v62 = *(void *)(a1 + 32);
                if (!v62) {
                  goto LABEL_114;
                }
                RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v110);
                (*(void (**)(uint64_t, void **, void))(*(void *)v62 + 16))(v62, &v110, 0);
                long long v63 = v111;
                if (!v111) {
                  goto LABEL_114;
                }
                goto LABEL_113;
              }
            }
          }
          else if (v59)
          {
            long long v64 = std::__shared_weak_count::lock(v59);
            if (v64)
            {
              long long v61 = v64;
              uint64_t v65 = *(void (****)(void, void **, void))(a1 + 32);
              if (!v65) {
                goto LABEL_114;
              }
              RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v108);
              (**v65)(v65, &v108, 0);
              long long v63 = v109;
              if (!v109) {
                goto LABEL_114;
              }
LABEL_113:
              std::__shared_weak_count::__release_shared[abi:ne180100](v63);
LABEL_114:
              std::__shared_weak_count::__release_shared[abi:ne180100](v61);
            }
          }
          if (!v34)
          {
LABEL_179:
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            goto LABEL_180;
          }
          goto LABEL_116;
        }
        uint64_t v106 = 0;
        v107 = 0;
        uint64_t v36 = *(RTPTransportManager **)(a1 + 48);
        int v37 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
        if (v37 == 2)
        {
          if (*(unsigned char *)(v16 + 584))
          {
            uint64_t v38 = v16 + 152;
            goto LABEL_71;
          }
        }
        else if (v37 == 6 && *(unsigned char *)(v16 + 1856))
        {
          uint64_t v38 = v16 + 1496;
          goto LABEL_71;
        }
        uint64_t v38 = v16 + 1032;
        if (!*(unsigned char *)(v16 + 1328)) {
          uint64_t v38 = 0;
        }
LABEL_71:
        RTPTransportManager::getTransport(v36, *(unsigned __int16 *)(v38 + 24), &v106);
        uint64_t v104 = 0;
        v105 = 0;
        int v45 = *(RTPTransportManager **)(a1 + 48);
        int v46 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
        if (v46 == 2)
        {
          if (*(unsigned char *)(v16 + 584))
          {
            uint64_t v47 = v16 + 152;
            goto LABEL_79;
          }
        }
        else if (v46 == 6 && *(unsigned char *)(v16 + 1856))
        {
          uint64_t v47 = v16 + 1496;
          goto LABEL_79;
        }
        uint64_t v47 = v16 + 1032;
        if (!*(unsigned char *)(v16 + 1328)) {
          uint64_t v47 = 0;
        }
LABEL_79:
        RTPTransportManager::getTransport(v45, (unsigned __int16)(*(_WORD *)(v47 + 24) + 1), &v104);
        uint64_t v48 = v106;
        if (!v106)
        {
          std::string::basic_string[abi:ne180100]<0>(&v120, "avc.audio.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v51 = ims::error((uint64_t)&v120, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v51 + 8), (uint64_t)"initialize", 10);
          *(unsigned char *)(v51 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v51 + 8), (uint64_t)" No RTP socket associated with port ", 36);
          *(unsigned char *)(v51 + 17) = 0;
          (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
          std::ostream::operator<<();
          *(unsigned char *)(v51 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v51 + 8), (uint64_t)" for session ", 13);
          *(unsigned char *)(v51 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v51 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v51 + 17) = 0;
          if (v114 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v122) < 0) {
            operator delete(v120);
          }
          uint64_t v52 = *(std::__shared_weak_count **)(a1 + 40);
          if (!v52 || (uint64_t v53 = std::__shared_weak_count::lock(v52)) == 0)
          {
LABEL_175:
            if (v105) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v105);
            }
            uint64_t v44 = v107;
            if (!v107) {
              goto LABEL_179;
            }
            goto LABEL_178;
          }
          std::string v54 = v53;
          v55 = *(void (****)(void, void **, uint64_t))(a1 + 32);
          if (v55)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v102);
            (**v55)(v55, &v102, 9);
            long long v56 = v103;
            if (v103) {
              goto LABEL_156;
            }
          }
          goto LABEL_157;
        }
        uint64_t v49 = v104;
        if (!v104)
        {
          std::string::basic_string[abi:ne180100]<0>(&v120, "avc.audio.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v50 = ims::error((uint64_t)&v120, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)"initialize", 10);
          *(unsigned char *)(v50 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)" No RTCP socket associated with port ", 37);
          *(unsigned char *)(v50 + 17) = 0;
          (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
          std::ostream::operator<<();
          *(unsigned char *)(v50 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)" for session ", 13);
          *(unsigned char *)(v50 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v50 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v50 + 17) = 0;
          if (v114 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v122) < 0) {
            operator delete(v120);
          }
        }
        int v66 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 80))(v48);
        int v67 = v66;
        if (v49)
        {
          int v68 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 80))(v49);
          int v69 = v68;
          BOOL v70 = v68 == -1;
          if (v67 != -1 && v68 != -1)
          {
            if (!*(unsigned char *)(a1 + 592))
            {
              int v88 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v16 + 128));
              uint64_t v71 = *(void *)(v16 + 120);
              uint64_t v72 = *(void *)(v71 + 160);
              BOOL v73 = *(std::__shared_weak_count **)(v71 + 168);
              if (v73) {
                atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              (*(void (**)(void **__return_ptr))(*(void *)v72 + 200))(&v120);
              unsigned int v87 = HIDWORD(v120);
              if (v73) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v73);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v88);
              (*(void (**)(uint64_t, void))(*(void *)v48 + 112))(v48, v87);
              (*(void (**)(uint64_t, void))(*(void *)v49 + 112))(v49, v87);
            }
            long long v120 = 0;
            long long v121 = (uint64_t *)&v120;
            uint64_t v122 = 0x2020000000;
            char v123 = 0;
            aBlock[0] = MEMORY[0x1E4F143A8];
            aBlock[1] = 3321888768;
            aBlock[2] = ___ZN15AVCAudioSession10initializeERKNSt3__110shared_ptrI9IpAddressEEbRKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEESD_14MediaDirectionNS0_8weak_ptrI10SDPSessionEE_block_invoke;
            aBlock[3] = &unk_1F20B2A88;
            aBlock[5] = a1;
            aBlock[6] = v48;
            v92 = v107;
            if (v107) {
              atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v93 = v49;
            BOOL v94 = v105;
            if (v105) {
              atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v97 = v67;
            int v98 = v69;
            char v99 = a3;
            aBlock[4] = &v120;
            uint64_t v95 = v16;
            uint64_t v96 = v15;
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v74 = _Block_copy(aBlock);
            uint64_t v75 = v74;
            if (v74) {
              v76 = _Block_copy(v74);
            }
            else {
              v76 = 0;
            }
            v90 = v76;
            (*(void (**)(uint64_t, void **))(*(void *)v48 + 96))(v48, &v90);
            if (v90) {
              _Block_release(v90);
            }
            if (v75) {
              uint64_t v86 = _Block_copy(v75);
            }
            else {
              uint64_t v86 = 0;
            }
            uint64_t v89 = v86;
            (*(void (**)(uint64_t, void **))(*(void *)v49 + 96))(v49, &v89);
            if (v89) {
              _Block_release(v89);
            }
            if (v75) {
              _Block_release(v75);
            }
            if (v96) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v96);
            }
            if (v94) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v94);
            }
            if (v92) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v92);
            }
            _Block_object_dispose(&v120, 8);
            goto LABEL_175;
          }
          if (v67 != -1)
          {
            if (v68 != -1) {
              goto LABEL_152;
            }
            goto LABEL_148;
          }
        }
        else
        {
          if (v66 != -1) {
            goto LABEL_148;
          }
          BOOL v70 = 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&v120, "avc.audio.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v77 = ims::error((uint64_t)&v120, (uint64_t)__p);
        uint64_t v78 = ImsOutStream::operator<<(v77, "initialize");
        v79 = (unsigned char *)ImsOutStream::operator<<(v78, " didn't find valid RTP transport for session ");
        std::ostream::operator<<();
        v79[17] = 0;
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v79[17] = 0;
        if (v114 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v122) < 0) {
          operator delete(v120);
        }
        if (!v70)
        {
LABEL_152:
          uint64_t v83 = *(std::__shared_weak_count **)(a1 + 40);
          if (!v83) {
            goto LABEL_175;
          }
          uint64_t v84 = std::__shared_weak_count::lock(v83);
          if (!v84) {
            goto LABEL_175;
          }
          std::string v54 = v84;
          uint64_t v85 = *(void (****)(void, void **, uint64_t))(a1 + 32);
          if (v85)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v100);
            (**v85)(v85, &v100, 4);
            long long v56 = v101;
            if (v101) {
LABEL_156:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v56);
          }
LABEL_157:
          std::__shared_weak_count::__release_shared[abi:ne180100](v54);
          goto LABEL_175;
        }
LABEL_148:
        std::string::basic_string[abi:ne180100]<0>(&v120, "avc.audio.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v80 = ims::error((uint64_t)&v120, (uint64_t)__p);
        uint64_t v81 = ImsOutStream::operator<<(v80, "initialize");
        v82 = (unsigned char *)ImsOutStream::operator<<(v81, " didn't find valid RTCP transport for session ");
        std::ostream::operator<<();
        v82[17] = 0;
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v82[17] = 0;
        if (v114 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v122) < 0) {
          operator delete(v120);
        }
        goto LABEL_152;
      }
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v120, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v19 = ims::error((uint64_t)&v120, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"SDPSession expired", 18);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (v114 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v122) < 0) {
    operator delete(v120);
  }
  if (v15) {
    goto LABEL_179;
  }
LABEL_180:
}

void sub_1C51DE8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *aBlock, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  _Unwind_Resume(a1);
}

void RTPSharedPointerBase::getShared<MediaSessionInterface>(uint64_t a1@<X0>, void **a2@<X8>)
{
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v3, (void *)(a1 + 8));
  std::dynamic_pointer_cast[abi:ne180100]<MediaSessionInterface,RTPSharedPointerBase>(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void AVCAudioSession::scheduleSkywalkInit(uint64_t a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v40, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v40, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"scheduleSkywalkInit", 19);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v35 < 0) {
    operator delete(__p);
  }
  if (v43 < 0) {
    operator delete(v40);
  }
  char v7 = (std::__shared_weak_count *)a3[1];
  v39[0] = *a3;
  v39[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  AVCAudioSession::createNwPath((uint64_t)&v40, a2, v39);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  std::string __p = &unk_1F20B2680;
  uint64_t v33 = &_bambiDomain;
  int v34 = 0;
  BOOL v9 = v41 != &_bambiDomain || v42 != 0;
  ImsResult::~ImsResult((ImsResult *)&__p);
  ImsResult::~ImsResult((ImsResult *)&v40);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v9)
  {
    unint64_t v10 = *(std::__shared_weak_count **)(a2 + 40);
    if (!v10) {
      goto LABEL_38;
    }
    uint64_t v11 = std::__shared_weak_count::lock(v10);
    if (!v11) {
      goto LABEL_38;
    }
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(a2 + 32);
    if (!v13
      || (RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v30),
          (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v13 + 16))(v13, &v30, 9),
          (uint64_t v14 = v31) == 0))
    {
LABEL_37:
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_38:
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(void *)a1 = &unk_1F20B2680;
      *(void *)(a1 + 8) = &_bambiDomain;
      *(_DWORD *)(a1 + 16) = 0x40000000;
      return;
    }
LABEL_36:
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    goto LABEL_37;
  }
  uint64_t v15 = (std::__shared_weak_count *)a3[1];
  v29[0] = *a3;
  v29[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  AVCAudioSession::createNwPath((uint64_t)&v40, a2, v29);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  std::string __p = &unk_1F20B2680;
  uint64_t v33 = &_bambiDomain;
  int v34 = 0;
  BOOL v17 = v41 != &_bambiDomain || v42 != 0;
  ImsResult::~ImsResult((ImsResult *)&__p);
  ImsResult::~ImsResult((ImsResult *)&v40);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v17)
  {
    BOOL v18 = *(std::__shared_weak_count **)(a2 + 40);
    if (!v18) {
      goto LABEL_38;
    }
    uint64_t v19 = std::__shared_weak_count::lock(v18);
    if (!v19) {
      goto LABEL_38;
    }
    uint64_t v12 = v19;
    uint64_t v20 = *(void *)(a2 + 32);
    if (!v20) {
      goto LABEL_37;
    }
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v27);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v20 + 16))(v20, &v27, 9);
    uint64_t v14 = v28;
    if (!v28) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  dispatch_time_t v21 = dispatch_time(0, 1000000000);
  int v22 = sImsDispatchQueue;
  if (!sImsDispatchQueue)
  {
    int v22 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v22;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZN15AVCAudioSession19scheduleSkywalkInitENSt3__18weak_ptrI10SDPSessionEE_block_invoke;
  block[3] = &__block_descriptor_56_e8_40c36_ZTSKNSt3__18weak_ptrI10SDPSessionEE_e5_v8__0l;
  uint64_t v24 = *a3;
  unint64_t v23 = (std::__shared_weak_count *)a3[1];
  block[4] = a2;
  block[5] = v24;
  BOOL v26 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_after(v21, v22, block);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
}

void sub_1C51DF028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  _Unwind_Resume(a1);
}

void ___ZN15AVCAudioSession10initializeERKNSt3__110shared_ptrI9IpAddressEEbRKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEESD_14MediaDirectionNS0_8weak_ptrI10SDPSessionEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 104))(*(void *)(a1 + 48)))
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)&v49, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"RTP socket still attached to dispatch source [sessionId=", 56);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_5:
    *(unsigned char *)(v3 + 17) = 0;
    if (v43 < 0) {
      operator delete(__p[0]);
    }
    if (v52 < 0) {
      operator delete(v49);
    }
    return;
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 104))(*(void *)(a1 + 64)))
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)&v49, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"RTCP socket still attached to dispatch source [sessionId=", 57);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v4 + 24)) {
    return;
  }
  *(unsigned char *)(v4 + 24) = 1;
  if (*(void *)(v2 + 488))
  {
LABEL_12:
    char v5 = *(std::__shared_weak_count **)(a1 + 88);
    uint64_t v47 = *(void *)(a1 + 80);
    uint64_t v48 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(void *)v2 + 48))(&v49, v2, &v47);
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    __p[0] = &unk_1F20B2680;
    __p[1] = &_bambiDomain;
    int v42 = 0;
    BOOL v7 = cf == &_bambiDomain && v51 == 0;
    ImsResult::~ImsResult((ImsResult *)__p);
    ImsResult::~ImsResult((ImsResult *)&v49);
    if (v48) {
      std::__shared_weak_count::__release_weak(v48);
    }
    size_t v8 = *(std::__shared_weak_count **)(v2 + 40);
    if (v7)
    {
      if (v8)
      {
        BOOL v9 = std::__shared_weak_count::lock(v8);
        if (v9)
        {
          unint64_t v10 = v9;
          uint64_t v11 = *(void *)(v2 + 32);
          if (!v11) {
            goto LABEL_52;
          }
          RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, &v39);
          (*(void (**)(uint64_t, void **, void))(*(void *)v11 + 16))(v11, &v39, 0);
          uint64_t v12 = v40;
          if (!v40) {
            goto LABEL_52;
          }
          goto LABEL_51;
        }
      }
    }
    else if (v8)
    {
      BOOL v26 = std::__shared_weak_count::lock(v8);
      if (v26)
      {
        unint64_t v10 = v26;
        int v27 = *(void (****)(void, void **, void))(v2 + 32);
        if (!v27) {
          goto LABEL_52;
        }
        RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, &v37);
        (**v27)(v27, &v37, 0);
        uint64_t v12 = v38;
        if (!v38) {
          goto LABEL_52;
        }
LABEL_51:
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_52:
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
    if (_os_feature_enabled_impl())
    {
      uint64_t v49 = &unk_1F20B3050;
      CFTypeRef cf = 0;
      ims::CFNumber::CFNumber((ims::CFNumber *)__p, [*(id *)(v2 + 488) streamToken]);
      ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v49, (const ims::CFType *)__p);
      ims::CFType::~CFType((ims::CFType *)__p);
      ims::CFNumber::CFNumber((ims::CFNumber *)__p, [*(id *)(v2 + 488) uplinkToken]);
      ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v49, (const ims::CFType *)__p);
      ims::CFType::~CFType((ims::CFType *)__p);
      ims::CFNumber::CFNumber((ims::CFNumber *)__p, [*(id *)(v2 + 488) downlinkToken]);
      ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v49, (const ims::CFType *)__p);
      ims::CFType::~CFType((ims::CFType *)__p);
      uint64_t v30 = v2 + 48;
      uint64_t v28 = *(void *)(v2 + 48);
      uint64_t v29 = *(void *)(v30 + 8);
      v36[0] = &unk_1F20E38B0;
      v36[1] = cf;
      if (cf) {
        CFRetain(cf);
      }
      v36[0] = &unk_1F20E39B8;
      RTPManager::handleAudioStreamTokens(v29, v28, (uint64_t)v36);
      ims::CFType::~CFType((ims::CFType *)v36);
      ims::CFType::~CFType((ims::CFType *)&v49);
    }
    return;
  }
  xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_fd(v13, (const char *)*MEMORY[0x1E4F479B8], *(_DWORD *)(a1 + 96));
  if (*(void *)(a1 + 64)) {
    xpc_dictionary_set_fd(v13, (const char *)*MEMORY[0x1E4F479A8], *(_DWORD *)(a1 + 100));
  }
  id v58 = 0;
  id v14 = [NSString alloc];
  uint64_t v15 = (void *)(v2 + 624);
  if (*(char *)(v2 + 647) < 0) {
    uint64_t v15 = (void *)*v15;
  }
  uint64_t v16 = (void *)[v14 initWithUTF8String:v15];
  std::string::basic_string[abi:ne180100]<0>(&v49, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v17 = ims::debug((uint64_t)&v49, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Session initialize request [sessionId=", 38);
  *(unsigned char *)(v17 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v17 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  if (v43 < 0) {
    operator delete(__p[0]);
  }
  if (v52 < 0) {
    operator delete(v49);
  }
  *(void *)(v2 + 488) = [objc_alloc(MEMORY[0x1E4F47908]) initWithNetworkSockets:v13 isOriginator:*(unsigned __int8 *)(a1 + 104) callID:v16 error:&v58];

  xpc_release(v13);
  if (v58)
  {
    *(void *)(v2 + 488) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v49, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v18 = ims::error((uint64_t)&v49, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Session init error: ", 20);
    *(unsigned char *)(v18 + 17) = 0;
    uint64_t v19 = (const char *)objc_msgSend((id)objc_msgSend(v58, "description"), "UTF8String");
    size_t v20 = strlen(v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)v19, v20);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v43 < 0) {
      operator delete(__p[0]);
    }
    if (v52 < 0) {
      operator delete(v49);
    }
    dispatch_time_t v21 = *(std::__shared_weak_count **)(v2 + 40);
    if (v21)
    {
      int v22 = std::__shared_weak_count::lock(v21);
      if (v22)
      {
        unint64_t v23 = v22;
        uint64_t v24 = *(void (****)(void, void **, uint64_t))(v2 + 32);
        if (!v24) {
          goto LABEL_46;
        }
        RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, &v56);
        (**v24)(v24, &v56, 9);
        BOOL v25 = v57;
        if (!v57) {
          goto LABEL_46;
        }
        goto LABEL_45;
      }
    }
  }
  else
  {
    if (*(void *)(v2 + 488))
    {
      AVCAudioSession::completeInit((AVCAudioSession *)v53, v2);
      ImsResult::~ImsResult((ImsResult *)v53);
      goto LABEL_12;
    }
    std::string::basic_string[abi:ne180100]<0>(&v49, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v31 = ims::error((uint64_t)&v49, (uint64_t)__p);
    uint64_t v32 = (unsigned char *)ImsOutStream::operator<<(v31, "No AVC session");
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v32[17] = 0;
    if (v43 < 0) {
      operator delete(__p[0]);
    }
    if (v52 < 0) {
      operator delete(v49);
    }
    uint64_t v33 = *(std::__shared_weak_count **)(v2 + 40);
    if (v33)
    {
      int v34 = std::__shared_weak_count::lock(v33);
      if (v34)
      {
        unint64_t v23 = v34;
        char v35 = *(void (****)(void, void **, uint64_t))(v2 + 32);
        if (!v35) {
          goto LABEL_46;
        }
        RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, &v54);
        (**v35)(v35, &v54, 9);
        BOOL v25 = v55;
        if (!v55) {
          goto LABEL_46;
        }
LABEL_45:
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
LABEL_46:
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
    }
  }
}

void sub_1C51DF94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  long long v37 = *(std::__shared_weak_count **)(v35 - 80);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  _Unwind_Resume(a1);
}

double AVCAudioSession::completeInit(AVCAudioSession *this, uint64_t a2)
{
  uint64_t v4 = [*(id *)(a2 + 488) capabilities];
  if (!v4)
  {
    *(void *)(a2 + 488) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v47, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v17 = ims::error((uint64_t)&v47, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"AVC session doesn't have a capabilities dict", 44);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    if (v49 < 0) {
      operator delete(v47);
    }
    uint64_t v18 = *(std::__shared_weak_count **)(a2 + 40);
    if (!v18) {
      goto LABEL_53;
    }
    uint64_t v19 = std::__shared_weak_count::lock(v18);
    if (!v19) {
      goto LABEL_53;
    }
    size_t v20 = v19;
    dispatch_time_t v21 = *(void (****)(void, void **, uint64_t))(a2 + 32);
    if (!v21) {
      goto LABEL_52;
    }
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v43);
    (**v21)(v21, &v43, 9);
    int v22 = v44;
    if (!v44) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  char v5 = (void *)v4;
  std::string::basic_string[abi:ne180100]<0>(&v47, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v47, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"capabilities dict: ", 19);
  *(unsigned char *)(v6 + 17) = 0;
  BOOL v7 = (const char *)objc_msgSend((id)objc_msgSend(v5, "description"), "UTF8String");
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
  *(unsigned char *)(v6 + 17) = 0;
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0) {
    operator delete(v47);
  }
  uint64_t v9 = [v5 objectForKeyedSubscript:@"avcKeySupportedCodecs"];
  if (!v9)
  {
    *(void *)(a2 + 488) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v47, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v26 = ims::debug((uint64_t)&v47, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"No supported codecs", 19);
    *(unsigned char *)(v26 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v26 + 17) = 0;
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    if (v49 < 0) {
      operator delete(v47);
    }
    int v27 = *(std::__shared_weak_count **)(a2 + 40);
    if (!v27) {
      goto LABEL_53;
    }
    uint64_t v28 = std::__shared_weak_count::lock(v27);
    if (!v28) {
      goto LABEL_53;
    }
    size_t v20 = v28;
    uint64_t v29 = *(void (****)(void, void **, uint64_t))(a2 + 32);
    if (!v29) {
      goto LABEL_52;
    }
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v41);
    (**v29)(v29, &v41, 9);
    int v22 = v42;
    if (!v42) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  unint64_t v10 = (void *)v9;
  std::string::basic_string[abi:ne180100]<0>(&v47, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::debug((uint64_t)&v47, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Got supported codecs", 20);
  *(unsigned char *)(v11 + 17) = 0;
  uint64_t v12 = (const char *)objc_msgSend((id)objc_msgSend(v10, "description"), "UTF8String");
  size_t v13 = strlen(v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v12, v13);
  *(unsigned char *)(v11 + 17) = 0;
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0) {
    operator delete(v47);
  }
  id v14 = [AVCAudioSessionDelegate alloc];
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v47, (void *)(a2 + 8));
  if (v47
  {
    uint64_t v39 = v15;
    uint64_t v40 = v48;
    uint64_t v16 = &v47;
  }
  else
  {
    uint64_t v16 = &v39;
  }
  *uint64_t v16 = 0;
  v16[1] = 0;
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  unint64_t v23 = *(std::__shared_weak_count **)(a2 + 520);
  uint64_t v37 = *(void *)(a2 + 512);
  long long v38 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = [(AVCAudioSessionDelegate *)v14 initWithOwner:&v39 andStackController:&v37];
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (!v24)
  {
    *(void *)(a2 + 488) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v47, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v30 = ims::error((uint64_t)&v47, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"Unable to create AVC media stream delegate", 42);
    *(unsigned char *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v30 + 17) = 0;
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    if (v49 < 0) {
      operator delete(v47);
    }
    uint64_t v31 = *(std::__shared_weak_count **)(a2 + 40);
    if (!v31) {
      goto LABEL_53;
    }
    uint64_t v32 = std::__shared_weak_count::lock(v31);
    if (!v32) {
      goto LABEL_53;
    }
    size_t v20 = v32;
    uint64_t v33 = *(void (****)(void, void **, uint64_t))(a2 + 32);
    if (!v33
      || (RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v35), (**v33)(v33, &v35, 9), (int v22 = v36) == 0))
    {
LABEL_52:
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
LABEL_53:
      int v25 = 0x40000000;
      goto LABEL_54;
    }
LABEL_51:
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    goto LABEL_52;
  }
  [*(id *)(a2 + 488) setDelegate:v24];
  int v25 = 0;
LABEL_54:
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = &unk_1F20B2680;
  *((void *)this + 1) = &_bambiDomain;
  *((_DWORD *)this + 4) = v25;
  return result;
}

void sub_1C51E0034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_48c49_ZTSNSt3__110shared_ptrI21ImsUdpSocketInterfaceEE64c49_ZTSNSt3__110shared_ptrI21ImsUdpSocketInterfaceEE80c38_ZTSNSt3__110shared_ptrI10SDPSessionEE(void *result, void *a2)
{
  uint64_t v2 = a2[7];
  result[6] = a2[6];
  result[7] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[9];
  result[8] = a2[8];
  result[9] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[11];
  result[10] = a2[10];
  result[11] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c49_ZTSNSt3__110shared_ptrI21ImsUdpSocketInterfaceEE64c49_ZTSNSt3__110shared_ptrI21ImsUdpSocketInterfaceEE80c38_ZTSNSt3__110shared_ptrI10SDPSessionEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[11];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[9];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void non-virtual thunk to'AVCAudioSession::initialize(uint64_t a1, uint64_t a2, char a3, uint64_t a4, const std::string *a5, uint64_t a6, uint64_t *a7)
{
}

void AVCAudioSession::initializeWithSkywalk(AVCAudioSession *this, uint64_t a2)
{
  v38[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1C878EAB0]();
  id v36 = 0;
  id v5 = (id)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:a2 + 648];
  id v6 = (id)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:a2 + 664];
  std::string::basic_string[abi:ne180100]<0>(&v33, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)&v33, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Session initialize request [sessionId=", 38);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" rtpUuid=", 9);
  *(unsigned char *)(v7 + 17) = 0;
  size_t v8 = (const char *)objc_msgSend((id)objc_msgSend(v5, "UUIDString"), "UTF8String");
  size_t v9 = strlen(v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)v8, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" rtcpUuid=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  unint64_t v10 = (const char *)objc_msgSend((id)objc_msgSend(v6, "UUIDString"), "UTF8String");
  size_t v11 = strlen(v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)v10, v11);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v33);
  }
  id v12 = [NSString alloc];
  size_t v13 = (void *)(a2 + 624);
  if (*(char *)(a2 + 647) < 0) {
    size_t v13 = (void *)*v13;
  }
  id v14 = (id)[v12 initWithUTF8String:v13];
  uint64_t v15 = *MEMORY[0x1E4F47A10];
  v37[0] = *MEMORY[0x1E4F47A00];
  v37[1] = v15;
  uint64_t v16 = &unk_1F20EC790;
  if (*(unsigned char *)(a2 + 616)) {
    uint64_t v16 = &unk_1F20EC778;
  }
  v38[0] = v14;
  v38[1] = v16;
  v37[2] = *MEMORY[0x1E4F47A08];
  v38[2] = MEMORY[0x1E4F1CC38];
  uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v38 forKeys:v37 count:3];
  *(void *)(a2 + 488) = [objc_alloc(MEMORY[0x1E4F47908]) initWithRTPNWConnectionClientID:v5 rtcpNWConnectionClientID:v6 options:v17 error:&v36];
  if (v36)
  {
    *(void *)(a2 + 488) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v33, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v18 = ims::error((uint64_t)&v33, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Session init error: ", 20);
    *(unsigned char *)(v18 + 17) = 0;
    if (v36) {
      uint64_t v19 = (const char *)objc_msgSend((id)objc_msgSend(v36, "description"), "UTF8String");
    }
    else {
      uint64_t v19 = " returned error is nil";
    }
    size_t v23 = strlen(v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)v19, v23);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    if (v35 < 0) {
      operator delete(v33);
    }
    uint64_t v24 = *(std::__shared_weak_count **)(a2 + 40);
    if (v24)
    {
      int v25 = std::__shared_weak_count::lock(v24);
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = *(void *)(a2 + 32);
        if (v27)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v29);
          (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v27 + 40))(v27, &v29, 4);
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
    }
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(void *)this = &unk_1F20B2680;
    *((void *)this + 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 1073741825;
  }
  else
  {
    if (_os_feature_enabled_impl())
    {
      uint64_t v33 = &unk_1F20B3050;
      CFTypeRef cf = 0;
      ims::CFNumber::CFNumber((ims::CFNumber *)__p, [*(id *)(a2 + 488) streamToken]);
      ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v33, (const ims::CFType *)__p);
      ims::CFType::~CFType((ims::CFType *)__p);
      ims::CFNumber::CFNumber((ims::CFNumber *)__p, [*(id *)(a2 + 488) uplinkToken]);
      ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v33, (const ims::CFType *)__p);
      ims::CFType::~CFType((ims::CFType *)__p);
      ims::CFNumber::CFNumber((ims::CFNumber *)__p, [*(id *)(a2 + 488) downlinkToken]);
      ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v33, (const ims::CFType *)__p);
      ims::CFType::~CFType((ims::CFType *)__p);
      uint64_t v21 = *(void *)(a2 + 48);
      uint64_t v20 = *(void *)(a2 + 56);
      v28[0] = &unk_1F20E38B0;
      v28[1] = cf;
      if (cf) {
        CFRetain(cf);
      }
      v28[0] = &unk_1F20E39B8;
      RTPManager::handleAudioStreamTokens(v20, v21, (uint64_t)v28);
      ims::CFType::~CFType((ims::CFType *)v28);
      ims::CFType::~CFType((ims::CFType *)&v33);
    }
    std::string::basic_string[abi:ne180100]<0>(&v33, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v22 = ims::debug((uint64_t)&v33, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Session initialize success  [sessionId=", 39);
    *(unsigned char *)(v22 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v22 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v22 + 17) = 0;
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    if (v35 < 0) {
      operator delete(v33);
    }
    *(unsigned char *)(a2 + 617) = 0;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(void *)this = &unk_1F20B2680;
    *((void *)this + 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 0;
  }
}

void sub_1C51E0838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void AVCAudioSession::createNwPath(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v36, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v36, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"createNwPath", 12);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  if (v7)
  {
    size_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      size_t v9 = (unsigned char *)*a3;
      if (*a3)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        unint64_t v10 = *(RTPTransportManager **)(a2 + 48);
        int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 152))(a2);
        if (v11 == 2)
        {
          if (v9[584])
          {
            id v12 = v9 + 152;
            goto LABEL_23;
          }
        }
        else if (v11 == 6 && v9[1856])
        {
          id v12 = v9 + 1496;
          goto LABEL_23;
        }
        id v12 = v9 + 1032;
        if (!v9[1328]) {
          id v12 = 0;
        }
LABEL_23:
        RTPTransportManager::getNwTransport(v10, *((unsigned __int16 *)v12 + 12), &v32);
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        id v14 = *(RTPTransportManager **)(a2 + 48);
        int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 152))(a2);
        if (v15 == 2)
        {
          if (v9[584])
          {
            uint64_t v16 = v9 + 152;
            goto LABEL_31;
          }
        }
        else if (v15 == 6 && v9[1856])
        {
          uint64_t v16 = v9 + 1496;
          goto LABEL_31;
        }
        uint64_t v16 = v9 + 1032;
        if (!v9[1328]) {
          uint64_t v16 = 0;
        }
LABEL_31:
        RTPTransportManager::getNwTransport(v14, (unsigned __int16)(*((_WORD *)v16 + 12) + 1), &v30);
        uint64_t v17 = v32;
        if (v32)
        {
          uint64_t v18 = v30;
          if (v30)
          {
            int v19 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 152))(a2);
            if (v19 == 2)
            {
              if (v9[584])
              {
                uint64_t v20 = v9 + 152;
                goto LABEL_43;
              }
            }
            else if (v19 == 6 && v9[1856])
            {
              uint64_t v20 = v9 + 1496;
LABEL_43:
              uint64_t v23 = *((void *)v20 + 1);
              uint64_t v22 = (std::__shared_weak_count *)*((void *)v20 + 2);
              if (v22) {
                atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v23
                || (*(char *)(a2 + 551) < 0 ? (uint64_t v24 = *(void *)(a2 + 536)) : (uint64_t v24 = *(unsigned __int8 *)(a2 + 551)), v24))
              {
                AVCRTPStackController::getClientUniquePID(*(AVCRTPStackController **)(a2 + 512));
                std::string::basic_string[abi:ne180100]<0>(v36, "avc.audio.session");
                std::string::basic_string[abi:ne180100]<0>(__p, "");
                uint64_t v25 = ims::debug((uint64_t)v36, (uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"nw_path local RTP endpoint port=", 32);
                *(unsigned char *)(v25 + 17) = 0;
                nw_endpoint_get_port(*(nw_endpoint_t *)(v17 + 24));
                std::ostream::operator<<();
                *(unsigned char *)(v25 + 17) = 0;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)" RTCP port=", 11);
                *(unsigned char *)(v25 + 17) = 0;
                nw_endpoint_get_port(*(nw_endpoint_t *)(v18 + 24));
                std::ostream::operator<<();
                *(unsigned char *)(v25 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v25 + 17) = 0;
                if (v35 < 0) {
                  operator delete(__p[0]);
                }
                if (v37 < 0) {
                  operator delete(v36[0]);
                }
                std::string::basic_string[abi:ne180100]<0>(v36, "avc.audio.session");
                std::string::basic_string[abi:ne180100]<0>(__p, "");
                uint64_t v26 = ims::debug((uint64_t)v36, (uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"nw_path remote endpoint address=", 32);
                *(unsigned char *)(v26 + 17) = 0;
                IpAddress::asString(&v29);
              }
              std::string::basic_string[abi:ne180100]<0>(v36, "avc.audio.session");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v27 = ims::warn((uint64_t)v36, (uint64_t)__p);
              uint64_t v28 = (unsigned char *)ImsOutStream::operator<<(v27, "No remote connection found for session");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v28[17] = 0;
              if (v35 < 0) {
                operator delete(__p[0]);
              }
              if (v37 < 0) {
                operator delete(v36[0]);
              }
              *(_OWORD *)(a1 + 24) = 0u;
              *(_OWORD *)(a1 + 40) = 0u;
              *(_OWORD *)(a1 + 56) = 0u;
              *(void *)a1 = &unk_1F20B2680;
              *(void *)(a1 + 8) = &_bambiDomain;
              *(_DWORD *)(a1 + 16) = 1073741825;
              if (v22) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              }
LABEL_67:
              if (v31) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v31);
              }
              if (v33) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v33);
              }
LABEL_71:
              std::__shared_weak_count::__release_shared[abi:ne180100](v8);
              return;
            }
            if (v9[1328])
            {
              uint64_t v20 = v9 + 1032;
              goto LABEL_43;
            }
            std::string::basic_string[abi:ne180100]<0>(v36, "avc.audio.session");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v21 = ims::warn((uint64_t)v36, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Not enough information to configure with", 40);
            *(unsigned char *)(v21 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v36, "avc.audio.session");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v21 = ims::error((uint64_t)v36, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"RTCP Transport is null", 22);
            *(unsigned char *)(v21 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v36, "avc.audio.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v21 = ims::error((uint64_t)v36, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"RTP Transport is null", 21);
          *(unsigned char *)(v21 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        *(unsigned char *)(v21 + 17) = 0;
        if (v35 < 0) {
          operator delete(__p[0]);
        }
        if (v37 < 0) {
          operator delete(v36[0]);
        }
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 56) = 0u;
        *(void *)a1 = &unk_1F20B2680;
        *(void *)(a1 + 8) = &_bambiDomain;
        *(_DWORD *)(a1 + 16) = 1073741825;
        goto LABEL_67;
      }
    }
  }
  else
  {
    size_t v8 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v36, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v13 = ims::error((uint64_t)v36, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"SDPSession expired in AVCRTPAudioSession::setConfiguration", 58);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 1073741825;
  if (v8) {
    goto LABEL_71;
  }
}

void sub_1C51E1598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  _Unwind_Resume(a1);
}

void ___ZN15AVCAudioSession19scheduleSkywalkInitENSt3__18weak_ptrI10SDPSessionEE_block_invoke(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  v59[0] = a1[5];
  v59[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  AVCAudioSession::cancelNwConnectionsAndListeners(v2, v59);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  AVCAudioSession::initializeWithSkywalk((AVCAudioSession *)&v56, (uint64_t)v2);
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  uint64_t v50 = &unk_1F20B2680;
  int v51 = &_bambiDomain;
  int v52 = 0;
  uint64_t v4 = v57;
  int v5 = v58;
  ImsResult::~ImsResult((ImsResult *)&v50);
  ImsResult::~ImsResult((ImsResult *)&v56);
  if (v4 != &_bambiDomain || v5)
  {
    id v12 = (std::__shared_weak_count *)v2[5];
    if (!v12) {
      return;
    }
    uint64_t v13 = std::__shared_weak_count::lock(v12);
    if (!v13) {
      return;
    }
    id v14 = v13;
    uint64_t v15 = v2[4];
    if (!v15) {
      goto LABEL_61;
    }
    RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)v2, &v48);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v15 + 16))(v15, &v48, 9);
    uint64_t v16 = v49;
    if (!v49) {
      goto LABEL_61;
    }
LABEL_60:
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
LABEL_61:
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    return;
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      size_t v8 = v7;
      size_t v9 = (void *)a1[5];
      if (v9)
      {
        unint64_t v10 = (std::__shared_weak_count *)v9[16];
        if (v10)
        {
          unint64_t v10 = std::__shared_weak_count::lock(v10);
          int v11 = v10;
          if (v10) {
            unint64_t v10 = (std::__shared_weak_count *)v9[15];
          }
        }
        else
        {
          int v11 = 0;
        }
        uint64_t v17 = (ImsPrefs *)SipStack::prefs((SipStack *)v10);
        UseRTPDetectionAutoStartKey = (void **)ImsPrefs::getUseRTPDetectionAutoStartKey(v17);
        int v19 = ImsPrefs::BOOLValue(v17, UseRTPDetectionAutoStartKey);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        if (v19)
        {
          uint64_t v20 = (std::__shared_weak_count *)v2[73];
          if (v20)
          {
            uint64_t v21 = std::__shared_weak_count::lock(v20);
            if (v21)
            {
              uint64_t v22 = v21;
              uint64_t v23 = (MediaSessionStateMachine *)v2[72];
              if (v23) {
                MediaSessionStateMachine::setTrafficDetected(v23, 1);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            }
          }
          uint64_t v24 = (std::__shared_weak_count *)v9[242];
          if (v24)
          {
            uint64_t v25 = v9[241];
            atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            uint64_t v26 = std::__shared_weak_count::lock(v24);
            std::__shared_weak_count::__release_weak(v24);
            if (v26)
            {
              if (v25) {
                *(unsigned char *)(v25 + 462) = 1;
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v26);
            }
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  AVCAudioSession::completeInit((AVCAudioSession *)&v56, (uint64_t)v2);
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  uint64_t v50 = &unk_1F20B2680;
  int v51 = &_bambiDomain;
  int v52 = 0;
  uint64_t v27 = v57;
  int v28 = v58;
  ImsResult::~ImsResult((ImsResult *)&v50);
  ImsResult::~ImsResult((ImsResult *)&v56);
  if (v27 != &_bambiDomain || v28)
  {
    char v35 = (std::__shared_weak_count *)v2[5];
    if (!v35) {
      return;
    }
    id v36 = std::__shared_weak_count::lock(v35);
    if (!v36) {
      return;
    }
    id v14 = v36;
    uint64_t v37 = v2[4];
    if (!v37) {
      goto LABEL_61;
    }
    RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)v2, &v46);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v37 + 16))(v37, &v46, 9);
    uint64_t v16 = v47;
    if (!v47) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  uint64_t v29 = (std::__shared_weak_count *)a1[6];
  uint64_t v44 = a1[5];
  long long v45 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr, void *, uint64_t *))(*v2 + 48))(&v56, v2, &v44);
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  uint64_t v50 = &unk_1F20B2680;
  int v51 = &_bambiDomain;
  int v52 = 0;
  BOOL v31 = v57 == &_bambiDomain && v58 == 0;
  ImsResult::~ImsResult((ImsResult *)&v50);
  ImsResult::~ImsResult((ImsResult *)&v56);
  if (v45) {
    std::__shared_weak_count::__release_weak(v45);
  }
  uint64_t v32 = (std::__shared_weak_count *)v2[5];
  if (!v31)
  {
    if (!v32) {
      return;
    }
    uint64_t v38 = std::__shared_weak_count::lock(v32);
    if (!v38) {
      return;
    }
    id v14 = v38;
    uint64_t v39 = v2[4];
    if (!v39) {
      goto LABEL_61;
    }
    RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)v2, &v40);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v39 + 16))(v39, &v40, 9);
    uint64_t v16 = v41;
    if (!v41) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v32)
  {
    uint64_t v33 = std::__shared_weak_count::lock(v32);
    if (v33)
    {
      id v14 = v33;
      uint64_t v34 = v2[4];
      if (!v34) {
        goto LABEL_61;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)v2, &v42);
      (*(void (**)(uint64_t, void **, void))(*(void *)v34 + 16))(v34, &v42, 0);
      uint64_t v16 = v43;
      if (!v43) {
        goto LABEL_61;
      }
      goto LABEL_60;
    }
  }
}

void sub_1C51E1C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void AVCAudioSession::cancelNwConnectionsAndListeners(void *a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v23, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v23, (uint64_t)&__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"cancelNwConnectionsAndListeners", 31);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v22 < 0) {
    operator delete(__p);
  }
  if (v25 < 0) {
    operator delete(v23);
  }
  size_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    size_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      unint64_t v10 = v9;
      int v11 = (unsigned char *)*a2;
      if (!*a2)
      {
LABEL_33:
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        return;
      }
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      id v12 = (RTPTransportManager *)a1[6];
      int v13 = (*(uint64_t (**)(void *))(*a1 + 152))(a1);
      if (v13 == 2)
      {
        if (v11[584])
        {
          id v14 = v11 + 152;
          goto LABEL_17;
        }
      }
      else if (v13 == 6 && v11[1856])
      {
        id v14 = v11 + 1496;
        goto LABEL_17;
      }
      id v14 = v11 + 1032;
      if (!v11[1328]) {
        id v14 = 0;
      }
LABEL_17:
      RTPTransportManager::getNwTransport(v12, *((unsigned __int16 *)v14 + 12), (uint64_t *)&v23);
      std::string __p = 0;
      uint64_t v21 = 0;
      uint64_t v15 = (RTPTransportManager *)a1[6];
      int v16 = (*(uint64_t (**)(void *))(*a1 + 152))(a1);
      if (v16 == 2)
      {
        if (v11[584])
        {
          uint64_t v17 = v11 + 152;
          goto LABEL_25;
        }
      }
      else if (v16 == 6 && v11[1856])
      {
        uint64_t v17 = v11 + 1496;
LABEL_25:
        RTPTransportManager::getNwTransport(v15, (unsigned __int16)(*((_WORD *)v17 + 12) + 1), (uint64_t *)&__p);
        uint64_t v18 = v23;
        if (v23)
        {
          ImsUdpNw::cancelNwConnection(v23);
          ImsUdpNw::cancelNwListener(v18);
        }
        int v19 = (ImsUdpNw *)__p;
        if (__p)
        {
          ImsUdpNw::cancelNwConnection((ImsUdpNw *)__p);
          ImsUdpNw::cancelNwListener(v19);
        }
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        goto LABEL_33;
      }
      uint64_t v17 = v11 + 1032;
      if (!v11[1328]) {
        uint64_t v17 = 0;
      }
      goto LABEL_25;
    }
  }
}

void sub_1C51E1FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSKNSt3__18weak_ptrI10SDPSessionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSKNSt3__18weak_ptrI10SDPSessionEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void AVCAudioSession::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v184, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v184, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"setConfiguration", 16);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v179 < 0) {
    operator delete(__p);
  }
  if (SBYTE7(v185) < 0) {
    operator delete((void *)v184);
  }
  size_t v8 = (void *)MEMORY[0x1C878EAB0](v7);
  size_t v9 = (std::__shared_weak_count *)a2[1];
  if (!v9)
  {
    unint64_t v10 = 0;
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(&v184, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v19 = ims::error((uint64_t)&v184, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"SDPSession expired", 18);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    if (v179 < 0) {
      operator delete(__p);
    }
    if (SBYTE7(v185) < 0) {
      operator delete((void *)v184);
    }
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741825;
LABEL_23:
    if (!v10) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  unint64_t v10 = std::__shared_weak_count::lock(v9);
  if (!v10) {
    goto LABEL_18;
  }
  uint64_t v11 = *a2;
  if (!*a2) {
    goto LABEL_18;
  }
  if (*(void *)(a1 + 488) || !*(unsigned char *)(a1 + 592) || !*(unsigned char *)(a1 + 616) && !*(unsigned char *)(a1 + 617)) {
    goto LABEL_9;
  }
  uint64_t v20 = (std::__shared_weak_count *)a2[1];
  v183[0] = *a2;
  v183[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  AVCAudioSession::createNwPath((uint64_t)&v184, a1, v183);
  long long v180 = 0u;
  long long v181 = 0u;
  long long v182 = 0u;
  std::string __p = &unk_1F20B2680;
  v177 = &_bambiDomain;
  int v178 = 0;
  BOOL v22 = *((uint64_t **)&v184 + 1) != &_bambiDomain || v185 != 0;
  ImsResult::~ImsResult((ImsResult *)&__p);
  ImsResult::~ImsResult((ImsResult *)&v184);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  if (!v22)
  {
    uint64_t v23 = (std::__shared_weak_count *)a2[1];
    v175[0] = *a2;
    v175[1] = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    AVCAudioSession::createNwPath((uint64_t)&v184, a1, v175);
    long long v180 = 0u;
    long long v181 = 0u;
    long long v182 = 0u;
    std::string __p = &unk_1F20B2680;
    v177 = &_bambiDomain;
    int v178 = 0;
    BOOL v25 = *((uint64_t **)&v184 + 1) != &_bambiDomain || v185 != 0;
    ImsResult::~ImsResult((ImsResult *)&__p);
    ImsResult::~ImsResult((ImsResult *)&v184);
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
    if (!v25)
    {
      uint64_t v62 = *a2;
      long long v63 = (std::__shared_weak_count *)a2[1];
      v174[0] = v62;
      v174[1] = v63;
      if (v63) {
        atomic_fetch_add_explicit(&v63->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      AVCAudioSession::cancelNwConnectionsAndListeners((void *)a1, v174);
      if (v63) {
        std::__shared_weak_count::__release_weak(v63);
      }
      AVCAudioSession::initializeWithSkywalk((AVCAudioSession *)&v184, a1);
      long long v180 = 0u;
      long long v181 = 0u;
      long long v182 = 0u;
      std::string __p = &unk_1F20B2680;
      v177 = &_bambiDomain;
      int v178 = 0;
      long long v64 = (uint64_t *)*((void *)&v184 + 1);
      int v65 = v185;
      ImsResult::~ImsResult((ImsResult *)&__p);
      ImsResult::~ImsResult((ImsResult *)&v184);
      int v26 = 0x40000000;
      if (v64 != &_bambiDomain || v65) {
        goto LABEL_76;
      }
      int v66 = *(std::__shared_weak_count **)(v11 + 128);
      if (v66)
      {
        int v66 = std::__shared_weak_count::lock(v66);
        int v67 = v66;
        if (v66) {
          int v66 = *(std::__shared_weak_count **)(v11 + 120);
        }
      }
      else
      {
        int v67 = 0;
      }
      uint64_t v72 = (ImsPrefs *)SipStack::prefs((SipStack *)v66);
      UseRTPDetectionAutoStartKey = (void **)ImsPrefs::getUseRTPDetectionAutoStartKey(v72);
      int v74 = ImsPrefs::BOOLValue(v72, UseRTPDetectionAutoStartKey);
      if (v67) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v67);
      }
      if (v74)
      {
        uint64_t v75 = *(std::__shared_weak_count **)(a1 + 584);
        if (v75)
        {
          v76 = std::__shared_weak_count::lock(v75);
          if (v76)
          {
            uint64_t v77 = v76;
            uint64_t v78 = *(MediaSessionStateMachine **)(a1 + 576);
            if (v78) {
              MediaSessionStateMachine::setTrafficDetected(v78, 1);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v77);
          }
        }
        v79 = *(std::__shared_weak_count **)(v11 + 1936);
        if (v79)
        {
          uint64_t v80 = *(void *)(v11 + 1928);
          atomic_fetch_add_explicit(&v79->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v81 = std::__shared_weak_count::lock(v79);
          std::__shared_weak_count::__release_weak(v79);
          if (v81)
          {
            if (v80) {
              *(unsigned char *)(v80 + 462) = 1;
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v81);
          }
        }
      }
      AVCAudioSession::completeInit((AVCAudioSession *)&v184, a1);
      long long v180 = 0u;
      long long v181 = 0u;
      long long v182 = 0u;
      std::string __p = &unk_1F20B2680;
      v177 = &_bambiDomain;
      int v178 = 0;
      v82 = (uint64_t *)*((void *)&v184 + 1);
      int v83 = v185;
      ImsResult::~ImsResult((ImsResult *)&__p);
      ImsResult::~ImsResult((ImsResult *)&v184);
      int v26 = 0x40000000;
      if (v82 != &_bambiDomain || v83) {
        goto LABEL_76;
      }
LABEL_9:
      id v12 = *(void **)(a1 + 496);
      if (v12) {

      }
      *(void *)(a1 + 496) = objc_opt_new();
      int v13 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v11 + 128));
      int v14 = *(_DWORD *)(*(void *)(v11 + 120) + 4100);
      uint64_t v15 = (void *)[*(id *)(a1 + 496) audio];
      if (v14) {
        uint64_t v16 = 2 * (v14 == 1);
      }
      else {
        uint64_t v16 = 1;
      }
      [v15 setSubscriptionSlot:v16];
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      uint64_t v17 = *(std::__shared_weak_count **)(v11 + 128);
      if (v17)
      {
        uint64_t v17 = std::__shared_weak_count::lock(v17);
        uint64_t v18 = v17;
        if (v17) {
          uint64_t v17 = *(std::__shared_weak_count **)(v11 + 120);
        }
      }
      else
      {
        uint64_t v18 = 0;
      }
      uint64_t v27 = (ImsPrefs *)SipStack::prefs((SipStack *)v17);
      EnableANBRKey = (void **)ImsPrefs::getEnableANBRKey(v27);
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setAnbrEnabled:", ImsPrefs::BOOLValue(v27, EnableANBRKey));
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      uint64_t v29 = *(std::__shared_weak_count **)(v11 + 128);
      if (v29)
      {
        uint64_t v29 = std::__shared_weak_count::lock(v29);
        uint64_t v30 = v29;
        if (v29) {
          uint64_t v29 = *(std::__shared_weak_count **)(v11 + 120);
        }
      }
      else
      {
        uint64_t v30 = 0;
      }
      BOOL v31 = (ImsPrefs *)SipStack::prefs((SipStack *)v29);
      EnableRateAdaptationKey = (void **)ImsPrefs::getEnableRateAdaptationKey(v31);
      objc_msgSend(*(id *)(a1 + 496), "setRateAdaptationEnabled:", ImsPrefs::BOOLValue(v31, EnableRateAdaptationKey));
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      uint64_t v33 = *(std::__shared_weak_count **)(v11 + 128);
      if (v33 && (uint64_t v34 = std::__shared_weak_count::lock(v33)) != 0)
      {
        *(_DWORD *)(a1 + 680) = *(_DWORD *)(*(void *)(v11 + 120) + 4100);
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      else
      {
        *(_DWORD *)(a1 + 680) = MEMORY[0x1004];
      }
      if (*(unsigned char *)(v11 + 584)) {
        char v35 = (_WORD *)(v11 + 152);
      }
      else {
        char v35 = 0;
      }
      if (!*(unsigned char *)(v11 + 584)
        || ((*(uint64_t (**)(uint64_t))(*(void *)(v11 + 152) + 24))(v11 + 152) & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v184, "avc.audio.session");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        uint64_t v36 = ims::error((uint64_t)&v184, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"Could not find TX payload type", 30);
        *(unsigned char *)(v36 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v36 + 17) = 0;
        if (v179 < 0) {
          operator delete(__p);
        }
        if (SBYTE7(v185) < 0) {
          operator delete((void *)v184);
        }
        int v26 = 1073741825;
        goto LABEL_76;
      }
      memset(&v173, 0, sizeof(v173));
      v163 = v35;
      if (*(char *)(v11 + 455) < 0) {
        std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)(v11 + 432), *(void *)(v11 + 440));
      }
      else {
        std::string v173 = *(std::string *)(v11 + 432);
      }
      long long v37 = *(_OWORD *)(v11 + 496);
      long long v171 = *(_OWORD *)(v11 + 480);
      long long v172 = v37;
      v170 = &unk_1F20B3020;
      uint64_t v158 = *(void *)(v11 + 512);
      uint64_t v38 = *(unsigned __int16 *)(v11 + 522);
      int v39 = *(unsigned __int8 *)(v11 + 528);
      uint64_t v40 = *(char *)(v11 + 531);
      int v161 = *(unsigned __int16 *)(v11 + 520);
      unsigned int v162 = *(char *)(v11 + 532);
      int v41 = *(_DWORD *)(v11 + 540);
      uint64_t v160 = *(int *)(v11 + 548);
      int v159 = *(unsigned __int8 *)(v11 + 552);
      std::string::basic_string[abi:ne180100]<0>(&v184, "avc.audio.session");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v42 = ims::debug((uint64_t)&v184, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"Audio RX payload type ", 22);
      *(unsigned char *)(v42 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v42 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v42 + 17) = 0;
      if (v179 < 0) {
        operator delete(__p);
      }
      if (SBYTE7(v185) < 0) {
        operator delete((void *)v184);
      }
      std::string::basic_string[abi:ne180100]<0>(&v184, "avc.audio.session");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v43 = ims::debug((uint64_t)&v184, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"Audio TX payload type ", 22);
      *(unsigned char *)(v43 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v43 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v43 + 17) = 0;
      if (v179 < 0) {
        operator delete(__p);
      }
      if (SBYTE7(v185) < 0) {
        operator delete((void *)v184);
      }
      if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v173.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v173.__r_.__value_.__l.__size_;
      }
      switch(size)
      {
        case 6uLL:
          int v52 = &v173;
          if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v52 = (std::string *)v173.__r_.__value_.__r.__words[0];
          }
          int data = (int)v52->__r_.__value_.__l.__data_;
          int v54 = WORD2(v52->__r_.__value_.__r.__words[0]);
          if (data != 760368449 || v54 != 16983) {
            goto LABEL_119;
          }
          objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setCodecType:", 1);
          objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setPreferredCodecRateMode:", WORD1(v171));
          uint64_t v56 = *(void *)(a1 + 56);
          __int16 v57 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "preferredCodecRateMode");
          __int16 v58 = 1;
          break;
        case 4uLL:
          long long v59 = &v173;
          if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v59 = (std::string *)v173.__r_.__value_.__r.__words[0];
          }
          if (LODWORD(v59->__r_.__value_.__l.__data_) == 1431126864)
          {
            BOOL v70 = (void *)[*(id *)(a1 + 496) audio];
            uint64_t v71 = 2;
          }
          else
          {
            if (LODWORD(v59->__r_.__value_.__l.__data_) != 1095582544) {
              goto LABEL_119;
            }
            BOOL v70 = (void *)[*(id *)(a1 + 496) audio];
            uint64_t v71 = 3;
          }
          objc_msgSend(v70, "setCodecType:", v71, v158);
          goto LABEL_173;
        case 3uLL:
          if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v45 = &v173;
          }
          else {
            long long v45 = (std::string *)v173.__r_.__value_.__r.__words[0];
          }
          if (LOWORD(v45->__r_.__value_.__l.__data_) != 19777 || v45->__r_.__value_.__s.__data_[2] != 82)
          {
            if (!memcmp(v45, "EVS", 3uLL))
            {
              objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setPreferredCodecRateMode:", v38 + 1);
              uint64_t v47 = (void *)[*(id *)(a1 + 496) audio];
              if (v162 + 1 >= 3) {
                uint64_t v48 = 0;
              }
              else {
                uint64_t v48 = v162;
              }
              objc_msgSend(v47, "setCodecCMRMode:", v48, v158);
              objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setChannelAwareOffset:", v40);
              if (v41 < 3)
              {
                uint64_t v84 = *(void **)(a1 + 496);
                if (v41) {
                  objc_msgSend((id)objc_msgSend(v84, "audio"), "setCodecType:", 12);
                }
                else {
                  objc_msgSend((id)objc_msgSend(v84, "audio"), "setCodecType:", 14);
                }
                uint64_t v49 = *(void *)(a1 + 56);
                __int16 v50 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "preferredCodecRateMode");
                __int16 v51 = 4;
              }
              else
              {
                objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setCodecType:", 13);
                uint64_t v49 = *(void *)(a1 + 56);
                __int16 v50 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "preferredCodecRateMode");
                __int16 v51 = 5;
              }
              uint64_t v85 = *(void *)(v49 + 296);
              if (v85)
              {
                uint64_t v86 = *(void *)(v85 + 120);
                *(_WORD *)(v86 + 488) = v51;
                *(_WORD *)(v86 + 490) = v50;
              }
              if (v39)
              {
                objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setPreferredCodecRateMode:", v38);
                unsigned int v87 = (void *)[*(id *)(a1 + 496) audio];
              }
              else
              {
                if (!v161)
                {
                  if (v160 > 6) {
                    uint64_t v88 = 0;
                  }
                  else {
                    uint64_t v88 = dword_1C56C793C[v160];
                  }
                  unsigned int v87 = (void *)[*(id *)(a1 + 496) audio];
                  goto LABEL_169;
                }
                unsigned int v87 = (void *)[*(id *)(a1 + 496) audio];
              }
              uint64_t v88 = v161 | (2 * v158);
LABEL_169:
              [v87 setCodecRateModeMask:v88];
              if (v160 > 4) {
                uint64_t v89 = 0;
              }
              else {
                uint64_t v89 = dword_1C56C7958[v160];
              }
              objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setCodecBandwidthMask:", v89);
              objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setHeaderFullOnly:", v159 != 0);
              objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setEnableMaxBitrateOnNoChangeCMR:", v162 == 15);
              goto LABEL_173;
            }
            goto LABEL_119;
          }
          objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setCodecType:", 0);
          objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setPreferredCodecRateMode:", WORD1(v171));
          uint64_t v56 = *(void *)(a1 + 56);
          __int16 v57 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "preferredCodecRateMode");
          __int16 v58 = 0;
          break;
        default:
LABEL_119:
          std::string::basic_string[abi:ne180100]<0>(&v184, "avc.audio.session");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          uint64_t v60 = ims::error((uint64_t)&v184, (uint64_t)&__p);
          long long v61 = (unsigned char *)ImsOutStream::operator<<(v60, "Codec not recognized: ");
          LoggableString::LoggableString(&v169, &v173);
          (*(void (**)(unsigned char *, std::string *))(*(void *)v61 + 40))(v61, &v169);
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v61[17] = 0;
          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v169.__r_.__value_.__l.__data_);
          }
          if (v179 < 0) {
            operator delete(__p);
          }
          if (SBYTE7(v185) < 0) {
            operator delete((void *)v184);
          }
          *(_OWORD *)(a3 + 24) = 0u;
          *(_OWORD *)(a3 + 40) = 0u;
          *(_OWORD *)(a3 + 56) = 0u;
          *(void *)a3 = &unk_1F20B2680;
          *(void *)(a3 + 8) = &_bambiDomain;
          *(_DWORD *)(a3 + 16) = 1073741825;
          goto LABEL_312;
      }
      uint64_t v68 = *(void *)(v56 + 296);
      if (v68)
      {
        uint64_t v69 = *(void *)(v68 + 120);
        *(_WORD *)(v69 + 488) = v58;
        *(_WORD *)(v69 + 490) = v57;
      }
LABEL_173:
      uint64_t v91 = *(void *)(a1 + 48);
      uint64_t v90 = *(void *)(a1 + 56);
      if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v168, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
      }
      else {
        std::string v168 = v173;
      }
      RTPManager::reportCodecForSessionId(v90, v91, (uint64_t)&v168);
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v168.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v184, "avc.audio.session");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v92 = ims::debug((uint64_t)&v184, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v92 + 8), (uint64_t)"setConfiguration", 16);
      *(unsigned char *)(v92 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v92 + 8), (uint64_t)" Config: codecType: ", 20);
      *(unsigned char *)(v92 + 17) = 0;
      LoggableString::LoggableString(&v169, &v173);
      (*(void (**)(uint64_t, std::string *))(*(void *)v92 + 40))(v92, &v169);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v92 + 64))(v92, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v92 + 17) = 0;
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v169.__r_.__value_.__l.__data_);
      }
      if (v179 < 0) {
        operator delete(__p);
      }
      if (SBYTE7(v185) < 0) {
        operator delete((void *)v184);
      }
      std::string::size_type v93 = HIBYTE(v173.__r_.__value_.__r.__words[2]);
      if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v93 = v173.__r_.__value_.__l.__size_;
      }
      if (v93 == 6)
      {
        char v99 = &v173;
        if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          char v99 = (std::string *)v173.__r_.__value_.__r.__words[0];
        }
        int v100 = (int)v99->__r_.__value_.__l.__data_;
        int v96 = WORD2(v99->__r_.__value_.__r.__words[0]);
        BOOL v97 = v100 == 760368449;
        int v98 = 16983;
      }
      else
      {
        if (v93 != 3) {
          goto LABEL_203;
        }
        BOOL v94 = &v173;
        if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          BOOL v94 = (std::string *)v173.__r_.__value_.__r.__words[0];
        }
        int data_low = LOWORD(v94->__r_.__value_.__l.__data_);
        int v96 = v94->__r_.__value_.__s.__data_[2];
        BOOL v97 = data_low == 19777;
        int v98 = 82;
      }
      if (v97 && v96 == v98)
      {
        std::string::basic_string[abi:ne180100]<0>(&v184, "avc.audio.session");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        uint64_t v102 = ims::debug((uint64_t)&v184, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v102 + 8), (uint64_t)"Config: preferredCodecRateMode: ", 32);
        *(unsigned char *)(v102 + 17) = 0;
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "preferredCodecRateMode");
        std::ostream::operator<<();
        *(unsigned char *)(v102 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v102 + 64))(v102, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v102 + 17) = 0;
        if (v179 < 0) {
          operator delete(__p);
        }
        if (SBYTE7(v185) < 0) {
          operator delete((void *)v184);
        }
      }
LABEL_203:
      objc_msgSend(*(id *)(a1 + 496), "setTxPayloadType:", *(unsigned __int16 *)(v11 + 182), v158);
      [*(id *)(a1 + 496) setRxPayloadType:*(unsigned __int16 *)(v11 + 180)];
      std::string::size_type v103 = HIBYTE(v173.__r_.__value_.__r.__words[2]);
      if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v103 = v173.__r_.__value_.__l.__size_;
      }
      if (v103 == 6)
      {
        std::string v109 = &v173;
        if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string v109 = (std::string *)v173.__r_.__value_.__r.__words[0];
        }
        int v110 = (int)v109->__r_.__value_.__l.__data_;
        int v106 = WORD2(v109->__r_.__value_.__r.__words[0]);
        BOOL v107 = v110 == 760368449;
        int v108 = 16983;
      }
      else
      {
        if (v103 != 3) {
          goto LABEL_219;
        }
        uint64_t v104 = &v173;
        if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v104 = (std::string *)v173.__r_.__value_.__r.__words[0];
        }
        int v105 = LOWORD(v104->__r_.__value_.__l.__data_);
        int v106 = v104->__r_.__value_.__s.__data_[2];
        BOOL v107 = v105 == 19777;
        int v108 = 82;
      }
      if (v107 && v106 == v108)
      {
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setOctetAligned:", v171 != 0);
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setCodecRateModeMask:", WORD2(v171));
      }
LABEL_219:
      long long v112 = *(std::__shared_weak_count **)(v11 + 128);
      if (v112)
      {
        long long v112 = std::__shared_weak_count::lock(v112);
        int v113 = v112;
        if (v112) {
          long long v112 = *(std::__shared_weak_count **)(v11 + 120);
        }
      }
      else
      {
        int v113 = 0;
      }
      char v114 = (ImsPrefs *)SipStack::prefs((SipStack *)v112);
      EnableDTXKey = (void **)ImsPrefs::getEnableDTXKey(v114);
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setDtxEnabled:", ImsPrefs::BOOLValue(v114, EnableDTXKey));
      if (v113) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v113);
      }
      uint64_t v116 = *(unsigned __int16 *)(v11 + 458);
      if (v116 != 255)
      {
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setDtmfPayloadType:", v116);
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setDtmfTimestampRate:", *(unsigned __int16 *)(v11 + 462));
      }
      long long v117 = *(std::__shared_weak_count **)(v11 + 128);
      if (v117)
      {
        long long v117 = std::__shared_weak_count::lock(v117);
        uint64_t v118 = v117;
        if (v117) {
          long long v117 = *(std::__shared_weak_count **)(v11 + 120);
        }
      }
      else
      {
        uint64_t v118 = 0;
      }
      long long v119 = (ImsPrefs *)SipStack::prefs((SipStack *)v117);
      EnableIncomingDTMFKey = (void **)ImsPrefs::getEnableIncomingDTMFKey(v119);
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setDtmfTonePlaybackEnabled:", ImsPrefs::BOOLValue(v119, EnableIncomingDTMFKey));
      if (v118) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v118);
      }
      long long v121 = (void *)(*(void *)(a1 + 56) + 280);
      uint64_t v122 = (void *)*v121;
      if (!*v121) {
        goto LABEL_244;
      }
      unint64_t v123 = *(void *)(a1 + 48);
      uint64_t v124 = *(void *)(a1 + 56) + 280;
      do
      {
        unint64_t v125 = v122[4];
        BOOL v126 = v125 >= v123;
        if (v125 >= v123) {
          v127 = v122;
        }
        else {
          v127 = v122 + 1;
        }
        if (v126) {
          uint64_t v124 = (uint64_t)v122;
        }
        uint64_t v122 = (void *)*v127;
      }
      while (*v127);
      if ((void *)v124 == v121 || *(void *)(v124 + 32) > v123) {
LABEL_244:
      }
        uint64_t v124 = *(void *)(a1 + 56) + 280;
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setDtmfEventCallbacksEnabled:", v124 != (void)v121);
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setPtime:", (unsigned __int16)v163[156]);
      if ((unint64_t)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "ptime") <= 0x13)
      {
        std::string::basic_string[abi:ne180100]<0>(&v184, "avc.audio.session");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        uint64_t v128 = ims::error((uint64_t)&v184, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v128 + 8), (uint64_t)"Tried to set PacketizationTime to ", 34);
        *(unsigned char *)(v128 + 17) = 0;
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "ptime");
        std::ostream::operator<<();
        *(unsigned char *)(v128 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v128 + 8), (uint64_t)" setting it to ", 15);
        *(unsigned char *)(v128 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v128 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v128 + 64))(v128, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v128 + 17) = 0;
        if (v179 < 0) {
          operator delete(__p);
        }
        if (SBYTE7(v185) < 0) {
          operator delete((void *)v184);
        }
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setPtime:", 20);
      }
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setMaxPtime:", (unsigned __int16)v163[157]);
      if ((unint64_t)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "maxPtime") <= 0x13)
      {
        std::string::basic_string[abi:ne180100]<0>(&v184, "avc.audio.session");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        uint64_t v129 = ims::error((uint64_t)&v184, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v129 + 8), (uint64_t)"Tried to set MaxPacketizationTime to ", 37);
        *(unsigned char *)(v129 + 17) = 0;
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "maxPtime");
        std::ostream::operator<<();
        *(unsigned char *)(v129 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v129 + 8), (uint64_t)" setting it to ", 15);
        *(unsigned char *)(v129 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v129 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v129 + 64))(v129, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v129 + 17) = 0;
        if (v179 < 0) {
          operator delete(__p);
        }
        if (SBYTE7(v185) < 0) {
          operator delete((void *)v184);
        }
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setMaxPtime:", 20);
      }
      BOOL v130 = *(_DWORD *)(a1 + 256) != 1 || *(_DWORD *)(a1 + 432) != 0;
      [*(id *)(a1 + 496) setRtcpEnabled:v130];
      [*(id *)(a1 + 496) setRtcpXREnabled:*(unsigned __int8 *)(a1 + 480)];
      [*(id *)(a1 + 496) setRtcpRemotePort:(unsigned __int16)(v163[13] + 1)];
      uint64_t v132 = 436;
      if (*(_DWORD *)(a1 + 256) == 1) {
        uint64_t v132 = 432;
      }
      LODWORD(v131) = *(_DWORD *)(a1 + v132);
      [*(id *)(a1 + 496) setRtcpSendInterval:(double)v131];
      LOWORD(v133) = *(_WORD *)(a1 + 444);
      [*(id *)(a1 + 496) setRtpTimeOutInterval:(double)v133];
      LOWORD(v134) = *(_WORD *)(a1 + 446);
      [*(id *)(a1 + 496) setRtcpTimeOutInterval:(double)v134];
      [*(id *)(a1 + 496) rtcpTimeOutInterval];
      double v136 = v135;
      [*(id *)(a1 + 496) rtpTimeOutInterval];
      if (v136 < v137)
      {
        [*(id *)(a1 + 496) rtpTimeOutInterval];
        objc_msgSend(*(id *)(a1 + 496), "setRtcpTimeOutInterval:");
      }
      int v138 = *(_DWORD *)(a1 + 256);
      if (v138 == 1)
      {
        int v139 = 0;
        BOOL v140 = 1;
      }
      else if (v138 == 2)
      {
        if (*(char *)(a1 + 471) < 0) {
          std::string::__init_copy_ctor_external(&v169, *(const std::string::value_type **)(a1 + 448), *(void *)(a1 + 456));
        }
        else {
          std::string v169 = *(std::string *)(a1 + 448);
        }
        std::string::size_type v141 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
        if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v141 = v169.__r_.__value_.__l.__size_;
        }
        if (v141 == 3)
        {
          v142 = &v169;
          if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v142 = (std::string *)v169.__r_.__value_.__r.__words[0];
          }
          int v143 = LOWORD(v142->__r_.__value_.__l.__data_);
          int v144 = v142->__r_.__value_.__s.__data_[2];
          BOOL v140 = v143 == 21586 && v144 == 80;
        }
        else
        {
          BOOL v140 = 0;
        }
        int v139 = 1;
      }
      else
      {
        int v139 = 0;
        BOOL v140 = 0;
      }
      [*(id *)(a1 + 496) setRtpTimeOutEnabled:v140];
      if (v139 && SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v169.__r_.__value_.__l.__data_);
      }
      objc_msgSend(*(id *)(a1 + 496), "setRtcpTimeOutEnabled:", objc_msgSend(*(id *)(a1 + 496), "isRTPTimeOutEnabled") ^ 1);
      if (*(unsigned char *)(a1 + 592))
      {
        v146 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v11 + 128));
        uint64_t v147 = *(void *)(v11 + 120);
        uint64_t v148 = *(void *)(v147 + 160);
        v149 = *(std::__shared_weak_count **)(v147 + 168);
        if (v149) {
          atomic_fetch_add_explicit(&v149->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(long long *__return_ptr))(*(void *)v148 + 200))(&v184);
        int v150 = DWORD1(v184);
        if (v149) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v149);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v146);
        HIDWORD(v152) = v150;
        LODWORD(v152) = v150;
        unsigned int v151 = v152 >> 3;
        if (v151 > 0x18) {
          uint64_t v153 = 0;
        }
        else {
          uint64_t v153 = byte_1C56C796C[v151];
        }
        [*(id *)(a1 + 496) setDscpTag:v153];
      }
      uint64_t v188 = 0;
      long long v186 = 0u;
      long long v187 = 0u;
      long long v184 = 0u;
      long long v185 = 0u;
      uint64_t v166 = v11;
      v167 = v10;
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      AVCRTPSession<AVCAudioStream>::setConfiguration(a1, &v166, (uint64_t)&v184);
      if (v167) {
        std::__shared_weak_count::__release_weak(v167);
      }
      int isConfigEqualToActiveConfig = AVCRTPSession<AVCAudioStream>::isConfigEqualToActiveConfig(a1, *(void **)(a1 + 496));
      *(unsigned char *)(a1 + 484) = isConfigEqualToActiveConfig ^ 1;
      if (((isConfigEqualToActiveConfig ^ 1) & 1) == 0)
      {
        *(_OWORD *)(a3 + 24) = 0u;
        *(_OWORD *)(a3 + 40) = 0u;
        *(_OWORD *)(a3 + 56) = 0u;
        *(void *)a3 = &unk_1F20B2680;
        *(void *)(a3 + 8) = &_bambiDomain;
        *(_DWORD *)(a3 + 16) = 0;
LABEL_311:
        ImsResult::~ImsResult((ImsResult *)&v184);
LABEL_312:
        if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v173.__r_.__value_.__l.__data_);
        }
        goto LABEL_23;
      }
      long long v180 = 0u;
      long long v181 = 0u;
      long long v182 = 0u;
      std::string __p = &unk_1F20B2680;
      v177 = &_bambiDomain;
      int v178 = 0;
      if (*((uint64_t **)&v184 + 1) == &_bambiDomain && !v185)
      {
        char v155 = [*(id *)(a1 + 496) isValidAudioConfig];
        ImsResult::~ImsResult((ImsResult *)&__p);
        if (v155)
        {
LABEL_310:
          ImsResult::ImsResult(a3, (uint64_t)&v184);
          goto LABEL_311;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "avc.audio.session");
        std::string::basic_string[abi:ne180100]<0>(v164, "");
        uint64_t v156 = ims::warn((uint64_t)&__p, (uint64_t)v164);
        v157 = (unsigned char *)ImsOutStream::operator<<(v156, "Invalid audio config");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v157 + 64))(v157, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v157[17] = 0;
        if (v165 < 0) {
          operator delete(v164[0]);
        }
        if (v179 < 0) {
          operator delete(__p);
        }
        long long v180 = 0u;
        long long v181 = 0u;
        long long v182 = 0u;
        std::string __p = &unk_1F20B2680;
        v177 = &_bambiDomain;
        int v178 = 1073741835;
        ImsResult::operator=((uint64_t)&v184, (uint64_t)&__p);
      }
      ImsResult::~ImsResult((ImsResult *)&__p);
      goto LABEL_310;
    }
  }
  int v26 = 0x40000000;
LABEL_76:
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = v26;
LABEL_77:
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_78:
}

void sub_1C51E3960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

void non-virtual thunk to'AVCAudioSession::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
}

void AVCAudioSession::configureMediaLinkMonitor(AVCAudioSession *this, unsigned int a2, unsigned int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v14, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"configureMediaLinkMonitor", 25);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  size_t v8 = (char *)this + 24;
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  size_t v9 = (void *)MEMORY[0x1C878EAB0](v7);
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::debug((uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Enabling RTP timeout for session ", 33);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(char *))(*(void *)v8 + 176))((char *)this + 24);
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    [*((id *)this + 61) setRtpTimeOutIntervalSec:(double)a2];
  }
  [*((id *)this + 61) setRtpTimeOutEnabled:a2 != 0];
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::debug((uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Enabling RTCP timeout for session ", 34);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(char *))(*(void *)v8 + 176))((char *)this + 24);
    std::ostream::operator<<();
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    [*((id *)this + 61) setRtcpTimeOutIntervalSec:(double)a3];
  }
  [*((id *)this + 61) setRtcpTimeOutEnabled:a3 != 0];
}

void sub_1C51E3FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AVCAudioSession::configureMediaLinkMonitor(AVCAudioSession *this, unsigned int a2, unsigned int a3)
{
}

void *AVCAudioSession::configureRemoteRTCP(AVCAudioSession *this, uint64_t a2, unsigned int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"configureRemoteRTCP", 19);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" enabled=", 9);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" interval=", 10);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (*((unsigned char *)this + 481))
  {
    [*((id *)this + 61) setRtcpEnabled:a2];
    [*((id *)this + 61) setRtcpSendIntervalSec:(double)a3];
  }
  double result = (void *)*((void *)this + 62);
  if (result)
  {
    [result setRtcpEnabled:a2];
    return (void *)[*((id *)this + 62) setRtcpSendInterval:(double)a3];
  }
  return result;
}

void sub_1C51E419C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *non-virtual thunk to'AVCAudioSession::configureRemoteRTCP(AVCAudioSession *this, uint64_t a2, unsigned int a3)
{
  return AVCAudioSession::configureRemoteRTCP((AVCAudioSession *)((char *)this - 24), a2, a3);
}

void AVCAudioSession::startSendingDTMF(AVCAudioSession *this, char a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v8, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"startSendingDTMF", 16);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" digit=", 7);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v8);
  }
  size_t v5 = operator new(1uLL);
  size_t v8 = v5;
  *size_t v5 = a2;
  char v9 = v5 + 1;
  uint64_t v10 = v5 + 1;
  (*(void (**)(AVCAudioSession *, void **))(*(void *)this + 144))(this, &v8);
  if (v8)
  {
    char v9 = v8;
    operator delete(v8);
  }
}

void sub_1C51E4370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AVCAudioSession::startSendingDTMF(AVCAudioSession *this, char a2)
{
}

double AVCAudioSession::stopSendingDTMF@<D0>(AVCAudioSession *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"stopSendingDTMF", 15);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

void sub_1C51E4510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double non-virtual thunk to'AVCAudioSession::stopSendingDTMF@<D0>(AVCAudioSession *this@<X0>, uint64_t a2@<X8>)
{
  return AVCAudioSession::stopSendingDTMF((AVCAudioSession *)((char *)this - 24), a2);
}

void AVCAudioSession::sendDTMFDigits(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = (void *)MEMORY[0x1C878EAB0]();
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  char v8 = *a2;
  char v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      unsigned int v10 = *v8++;
      objc_msgSend(v7, "addObject:", objc_msgSend(NSNumber, "numberWithChar:", v10));
    }
    while (v8 != v9);
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::debug((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Sending DTMF digits: ", 21);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  [*(id *)(a1 + 488) sendDTMFDigitString:v7 withVolume:*(unsigned __int8 *)(a1 + 472) duration:*(unsigned __int8 *)(a1 + 473) interval:*(unsigned __int16 *)(a1 + 476)];
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
}

void sub_1C51E46F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AVCAudioSession::sendDTMFDigits(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
}

void AVCAudioSession::audioReady(AVCAudioSession *this)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"audioReady", 10);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" Audio ready notification received [sessionId=", 46);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  *((unsigned char *)this + 568) = 1;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      size_t v5 = v4;
      char v6 = (void *)*((void *)this + 72);
      if (v6)
      {
        uint64_t v7 = v6[19];
        if (v7)
        {
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7 + 208))(v7, 2)) {
            (*(void (**)(void *, void))(*v6 + 32))(v6, 0);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C51E48C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'AVCAudioSession::audioReady(AVCAudioSession *this)
{
}

void AVCAudioSession::reportHandover(AVCAudioSession *this, const ims::AccessNetwork *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v24, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v24, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  char v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"reportHandover", 14);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  char v8 = (void *)*((void *)this + 61);
  if (v8)
  {
    unint64_t v9 = *((void *)this + 6);
    uint64_t v10 = *((void *)this + 7);
    char v11 = *(void **)(v10 + 232);
    if (!v11) {
      goto LABEL_18;
    }
    id v12 = (void *)(v10 + 232);
    do
    {
      unint64_t v13 = v11[4];
      BOOL v14 = v13 >= v9;
      if (v13 >= v9) {
        char v15 = v11;
      }
      else {
        char v15 = v11 + 1;
      }
      if (v14) {
        id v12 = v11;
      }
      char v11 = (void *)*v15;
    }
    while (*v15);
    if (v12 == (void *)(v10 + 232) || v12[4] > v9)
    {
LABEL_18:
      uint64_t v16 = *(void **)(v10 + 256);
      if (!v16) {
        goto LABEL_29;
      }
      uint64_t v17 = (void *)(v10 + 256);
      uint64_t v18 = (void *)(v10 + 256);
      do
      {
        unint64_t v19 = v16[4];
        BOOL v20 = v19 >= v9;
        if (v19 >= v9) {
          uint64_t v21 = v16;
        }
        else {
          uint64_t v21 = v16 + 1;
        }
        if (v20) {
          uint64_t v18 = v16;
        }
        uint64_t v16 = (void *)*v21;
      }
      while (*v21);
      if (v18 == v17 || v18[4] > v9) {
LABEL_29:
      }
        [v8 setJitterBufferMode:ims::AccessNetwork::isWifi(a2)];
    }
  }
}

void sub_1C51E4B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AVCAudioSession::reportHandover(AVCAudioSession *this, const ims::AccessNetwork *a2)
{
}

void AVCAudioSession::setRelayMode(AVCAudioSession *this, char a2)
{
  std::string::basic_string[abi:ne180100]<0>(v27, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v27, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"setRelayMode", 12);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" isRelayMode=", 13);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (SBYTE7(v24[0]) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v28) < 0) {
    operator delete(v27[0]);
  }
  *((unsigned char *)this + 684) = a2;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  RTPManager::sdpSessionForSession(*((RTPManager **)this + 7), *((void *)this + 6), &v32);
  if (v32)
  {
    uint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    *(_OWORD *)uint64_t v27 = 0u;
    uint64_t v25 = v32;
    int v26 = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void **__return_ptr, AVCAudioSession *, uint64_t *))(*(void *)this + 48))(v27, this, &v25);
    if (v26) {
      std::__shared_weak_count::__release_weak(v26);
    }
    uint64_t v5 = v32;
    char v6 = *(std::__shared_weak_count **)(v32 + 128);
    if (v6)
    {
      size_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = *(void *)(v5 + 120);
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        if (v8)
        {
          *(_OWORD *)std::string __p = 0u;
          memset(v24, 0, 56);
          uint64_t v9 = v32;
          uint64_t v10 = *(std::__shared_weak_count **)(v32 + 128);
          if (v10)
          {
            char v11 = std::__shared_weak_count::lock(v10);
            if (v11) {
              uint64_t v12 = *(void *)(v9 + 120);
            }
            else {
              uint64_t v12 = 0;
            }
          }
          else
          {
            uint64_t v12 = 0;
            char v11 = 0;
          }
          if (*(char *)(v12 + 3183) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v12 + 3160), *(void *)(v12 + 3168));
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)(v12 + 3160);
            *(void *)&v24[0] = *(void *)(v12 + 3176);
          }
          if (*(char *)(v12 + 3207) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)((char *)v24 + 8), *(const std::string::value_type **)(v12 + 3184), *(void *)(v12 + 3192));
          }
          else
          {
            *(_OWORD *)((char *)v24 + 8) = *(_OWORD *)(v12 + 3184);
            *((void *)&v24[1] + 1) = *(void *)(v12 + 3200);
          }
          LOBYTE(v24[3]) = *(unsigned char *)(v12 + 3224);
          v24[2] = *(_OWORD *)(v12 + 3208);
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          if ((a2 & 1) != 0 || *((unsigned char *)this + 685))
          {
            BOOL isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)__p);
            char v15 = (void *)[*((id *)this + 62) audio];
            if (isWifi) {
              uint64_t v16 = 2;
            }
            else {
              uint64_t v16 = 9;
            }
          }
          else
          {
            BOOL v20 = ims::AccessNetwork::isWifi((ims::AccessNetwork *)__p);
            char v15 = (void *)[*((id *)this + 62) audio];
            if (v20) {
              uint64_t v16 = 0;
            }
            else {
              uint64_t v16 = 6;
            }
          }
          [v15 setAudioStreamMode:v16];
          if (SHIBYTE(v24[1]) < 0) {
            operator delete(*((void **)&v24[0] + 1));
          }
          if (SBYTE7(v24[0]) < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    char isConfigEqualToActiveConfig = AVCRTPSession<AVCAudioStream>::isConfigEqualToActiveConfig((uint64_t)this, *((void **)this + 62));
    *((unsigned char *)this + 484) = isConfigEqualToActiveConfig ^ 1;
    if ((isConfigEqualToActiveConfig & 1) == 0)
    {
      memset((char *)v24 + 8, 0, 48);
      __p[0] = &unk_1F20B2680;
      __p[1] = &_bambiDomain;
      LODWORD(v24[0]) = 0;
      if (v27[1] != &_bambiDomain || v28)
      {
        ImsResult::~ImsResult((ImsResult *)__p);
      }
      else
      {
        char v18 = [*((id *)this + 62) isValidAudioConfig];
        ImsResult::~ImsResult((ImsResult *)__p);
        if ((v18 & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "avc.audio.session");
          std::string::basic_string[abi:ne180100]<0>(v21, "");
          uint64_t v19 = ims::warn((uint64_t)__p, (uint64_t)v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Invalid audio config", 20);
          *(unsigned char *)(v19 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v19 + 17) = 0;
          if (v22 < 0) {
            operator delete(v21[0]);
          }
          if (SBYTE7(v24[0]) < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    ImsResult::~ImsResult((ImsResult *)v27);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v13 = ims::error((uint64_t)v27, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"SDP session not found", 21);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (SBYTE7(v24[0]) < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v28) < 0) {
      operator delete(v27[0]);
    }
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
}

void sub_1C51E5084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  ImsResult::~ImsResult((ImsResult *)&a31);
  int v39 = *(std::__shared_weak_count **)(v37 - 56);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  _Unwind_Resume(a1);
}

void ims::AccessNetwork::~AccessNetwork(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void AVCAudioSession::setScreeningMode(AVCAudioSession *this, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v27, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v27, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"setScreeningMode", 16);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" isScreeningMode=", 17);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (SBYTE7(v24[0]) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v28) < 0) {
    operator delete(v27[0]);
  }
  *((unsigned char *)this + 685) = a2;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  RTPManager::sdpSessionForSession(*((RTPManager **)this + 7), *((void *)this + 6), &v32);
  if (v32)
  {
    uint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    *(_OWORD *)uint64_t v27 = 0u;
    uint64_t v25 = v32;
    int v26 = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void **__return_ptr, AVCAudioSession *, uint64_t *))(*(void *)this + 48))(v27, this, &v25);
    if (v26) {
      std::__shared_weak_count::__release_weak(v26);
    }
    uint64_t v5 = v32;
    char v6 = *(std::__shared_weak_count **)(v32 + 128);
    if (v6)
    {
      size_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = *(void *)(v5 + 120);
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        if (v8)
        {
          *(_OWORD *)std::string __p = 0u;
          memset(v24, 0, 56);
          uint64_t v9 = v32;
          uint64_t v10 = *(std::__shared_weak_count **)(v32 + 128);
          if (v10)
          {
            char v11 = std::__shared_weak_count::lock(v10);
            if (v11) {
              uint64_t v12 = *(void *)(v9 + 120);
            }
            else {
              uint64_t v12 = 0;
            }
          }
          else
          {
            uint64_t v12 = 0;
            char v11 = 0;
          }
          if (*(char *)(v12 + 3183) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v12 + 3160), *(void *)(v12 + 3168));
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)(v12 + 3160);
            *(void *)&v24[0] = *(void *)(v12 + 3176);
          }
          if (*(char *)(v12 + 3207) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)((char *)v24 + 8), *(const std::string::value_type **)(v12 + 3184), *(void *)(v12 + 3192));
          }
          else
          {
            *(_OWORD *)((char *)v24 + 8) = *(_OWORD *)(v12 + 3184);
            *((void *)&v24[1] + 1) = *(void *)(v12 + 3200);
          }
          LOBYTE(v24[3]) = *(unsigned char *)(v12 + 3224);
          v24[2] = *(_OWORD *)(v12 + 3208);
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          if ((a2 & 1) != 0 || *((unsigned char *)this + 684))
          {
            BOOL isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)__p);
            char v15 = (void *)[*((id *)this + 62) audio];
            if (isWifi) {
              uint64_t v16 = 2;
            }
            else {
              uint64_t v16 = 9;
            }
          }
          else
          {
            BOOL v20 = ims::AccessNetwork::isWifi((ims::AccessNetwork *)__p);
            char v15 = (void *)[*((id *)this + 62) audio];
            if (v20) {
              uint64_t v16 = 0;
            }
            else {
              uint64_t v16 = 6;
            }
          }
          [v15 setAudioStreamMode:v16];
          [*((id *)this + 62) setOutOfProcessCodecsEnabled:a2];
          if (SHIBYTE(v24[1]) < 0) {
            operator delete(*((void **)&v24[0] + 1));
          }
          if (SBYTE7(v24[0]) < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    char isConfigEqualToActiveConfig = AVCRTPSession<AVCAudioStream>::isConfigEqualToActiveConfig((uint64_t)this, *((void **)this + 62));
    *((unsigned char *)this + 484) = isConfigEqualToActiveConfig ^ 1;
    if ((isConfigEqualToActiveConfig & 1) == 0)
    {
      memset((char *)v24 + 8, 0, 48);
      __p[0] = &unk_1F20B2680;
      __p[1] = &_bambiDomain;
      LODWORD(v24[0]) = 0;
      if (v27[1] != &_bambiDomain || v28)
      {
        ImsResult::~ImsResult((ImsResult *)__p);
      }
      else
      {
        char v18 = [*((id *)this + 62) isValidAudioConfig];
        ImsResult::~ImsResult((ImsResult *)__p);
        if ((v18 & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "avc.audio.session");
          std::string::basic_string[abi:ne180100]<0>(v21, "");
          uint64_t v19 = ims::warn((uint64_t)__p, (uint64_t)v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Invalid audio config", 20);
          *(unsigned char *)(v19 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v19 + 17) = 0;
          if (v22 < 0) {
            operator delete(v21[0]);
          }
          if (SBYTE7(v24[0]) < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    ImsResult::~ImsResult((ImsResult *)v27);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v13 = ims::error((uint64_t)v27, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"SDP session not found", 21);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (SBYTE7(v24[0]) < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v28) < 0) {
      operator delete(v27[0]);
    }
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
}

void sub_1C51E5710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  ImsResult::~ImsResult((ImsResult *)&a31);
  int v39 = *(std::__shared_weak_count **)(v37 - 56);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  _Unwind_Resume(a1);
}

uint64_t MediaSessionDriver::transactionPending(MediaSessionDriver *this)
{
  return 0;
}

uint64_t MediaSessionDriver::direction(MediaSessionDriver *this)
{
  return *((unsigned int *)this + 58);
}

uint64_t MediaSessionDriver::isAudioReady(MediaSessionDriver *this)
{
  return 1;
}

uint64_t MediaSessionInterface::delegate@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return this;
}

void MediaSessionInterface::setDelegate(void *a1, uint64_t *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v13, "rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v13, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  char v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"setDelegate", 11);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[2];
  a1[1] = v9;
  a1[2] = v8;
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1C51E5A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionInterface::clearDelegate(MediaSessionInterface *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t MediaSessionInterface::sessionId(MediaSessionInterface *this)
{
  return *((void *)this + 3);
}

uint64_t MediaSessionInterface::canChangeMediaStack(MediaSessionInterface *this)
{
  return *((unsigned __int8 *)this + 80);
}

void MediaSessionDriver::loggableName(LoggableString *a1@<X8>)
{
}

uint64_t ImsLoggable::log(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 24))(__p);
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 40))(a2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return a2;
}

void sub_1C51E5B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MediaSessionDriver::loggableName(LoggableString *a1@<X8>)
{
}

void MediaSessionDriver::toTimerIdString(MediaSessionDriver *this)
{
}

void SipThreadSafeLockable::~SipThreadSafeLockable(SipThreadSafeLockable *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

uint64_t AVCAudioSession::mediaType(AVCAudioSession *this)
{
  return 2;
}

BOOL AVCAudioSession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return a2 == 2;
}

uint64_t AVCAudioSession::isAudioReady(AVCAudioSession *this)
{
  return *((unsigned __int8 *)this + 568);
}

uint64_t non-virtual thunk to'AVCAudioSession::mediaType(AVCAudioSession *this)
{
  return 2;
}

BOOL non-virtual thunk to'AVCAudioSession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return a2 == 2;
}

uint64_t non-virtual thunk to'AVCAudioSession::isAudioReady(AVCAudioSession *this)
{
  return *((unsigned __int8 *)this + 544);
}

void ImsLoggable::~ImsLoggable(ImsLoggable *this)
{
}

void ImsLoggable::loggableName(LoggableString *a1@<X8>)
{
}

void LoggableString::LoggableString(LoggableString *this, const char *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::string::__assign_external((std::string *)this, a2);
}

void sub_1C51E5C44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ims::CFMutableArray::~CFMutableArray(ims::CFMutableArray *this)
{
  ims::CFType::~CFType(this);
  JUMPOUT(0x1C878E320);
}

ImsOutStream *ims::CFType::log(ims::CFType **this, ImsOutStream *a2)
{
  return a2;
}

void ims::CFType::loggableName(LoggableString *a1@<X8>)
{
}

CFTypeID ims::CFType::typeID(ims::CFType *this)
{
  uint64_t v1 = (const void *)*((void *)this + 1);
  if (v1) {
    return CFGetTypeID(v1);
  }
  else {
    return CFNullGetTypeID();
  }
}

uint64_t ims::CFArray::getMemorySize(ims::CFArray *this)
{
  char v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  char v11 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  ims::CFArray::asStrings((uint64_t)this, (uint64_t)&v14, (uint64_t)v10);
  char v2 = (*(uint64_t (**)(std::string::size_type, void))(*(void *)v10[0].__r_.__value_.__l.__size_ + 24))(v10[0].__r_.__value_.__l.__size_, LODWORD(v10[0].__r_.__value_.__r.__words[2]));
  ImsResult::~ImsResult((ImsResult *)v10);
  if (v2)
  {
    ims::CFArray::asUint32s((uint64_t)this, (unsigned int **)&v11, (uint64_t)v10);
    int v3 = (*(uint64_t (**)(std::string::size_type, void))(*(void *)v10[0].__r_.__value_.__l.__size_ + 24))(v10[0].__r_.__value_.__l.__size_, LODWORD(v10[0].__r_.__value_.__r.__words[2]));
    ImsResult::~ImsResult((ImsResult *)v10);
    if (v3) {
      int64_t v4 = 0;
    }
    else {
      int64_t v4 = (char *)v12 - v11;
    }
    if (v11)
    {
      char v12 = (unsigned int *)v11;
      operator delete(v11);
    }
  }
  else
  {
    char v5 = v14;
    char v6 = v15;
    if (v14 == v15)
    {
      int64_t v4 = 0;
    }
    else
    {
      int64_t v4 = 0;
      do
      {
        memset(v10, 0, 24);
        if (*((char *)v5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v5, *((void *)v5 + 1));
        }
        else
        {
          long long v7 = *v5;
          v10[0].__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
          *(_OWORD *)&v10[0].__r_.__value_.__l.__data_ = v7;
        }
        if (SHIBYTE(v10[0].__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type size = v10[0].__r_.__value_.__l.__size_;
          operator delete(v10[0].__r_.__value_.__l.__data_);
        }
        else
        {
          std::string::size_type size = HIBYTE(v10[0].__r_.__value_.__r.__words[2]);
        }
        v4 += size;
        char v5 = (long long *)((char *)v5 + 24);
      }
      while (v5 != v6);
    }
  }
  v10[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
  return v4;
}

void sub_1C51E5E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  a9 = v20 - 56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void SDPMediaAMRSettings::~SDPMediaAMRSettings(SDPMediaAMRSettings *this)
{
}

void ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C51E5F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SipThreadSafeLockable::~SipThreadSafeLockable(SipThreadSafeLockable *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 48)) = a2[3];
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  SipLockable::~SipLockable(this, a2 + 1);
}

void *std::dynamic_pointer_cast[abi:ne180100]<MediaSessionInterface,RTPSharedPointerBase>@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  char v2 = a1;
  double result = *a1;
  if (result
  {
    char v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    char v2 = a2;
  }
  std::__shared_weak_count *v2 = 0;
  v2[1] = 0;
  return result;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA438] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA2E0], MEMORY[0x1E4FBA208]);
}

uint64_t XcapBootstrappingInfo::XcapBootstrappingInfo(uint64_t a1, bambi::XmlParser *a2, uint64_t a3, bambi::XmlParserItem *a4)
{
  *(void *)a1 = &unk_1F20B30D8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  bambi::XmlParser::parseXml(a2, a1, a3, a4);
  return a1;
}

void sub_1C51E61A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*(void **)(v1 + 32));
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void XcapBootstrappingInfo::parseChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  char v7 = v6;
  uint64_t v8 = *(void *)(a2 + 8);
  if ((v6 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  if (v9 == 4)
  {
    uint64_t v10 = *(_DWORD **)a2;
    if ((v6 & 0x80u) == 0) {
      uint64_t v10 = (_DWORD *)a2;
    }
    if (*v10 == 1684632674)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "btid");
      (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, __p, a3, a1 + 8);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
      uint64_t v8 = *(void *)(a2 + 8);
      char v7 = *(unsigned char *)(a2 + 23);
    }
  }
  if (v7 < 0) {
    uint64_t v6 = v8;
  }
  if (v6 == 8)
  {
    char v11 = *(void **)a2;
    if (v7 >= 0) {
      char v11 = (void *)a2;
    }
    if (*v11 == 0x656D69746566696CLL)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "lifetime");
      (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, __p, a3, a1 + 32);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1C51E6334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XcapBootstrappingInfo::~XcapBootstrappingInfo(void **this)
{
  *this = &unk_1F20B30D8;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20B30D8;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t bambi::XmlParserItem::createChild()
{
  return 0;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void BambiLazuliDelegate::handleIncomingLazuli(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v26[4] = *MEMORY[0x1E4F143B8];
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v25 = 0;
  if (a8)
  {
    (*(void (**)(uint64_t, void *))(*(void *)a8 + 56))(a8, v24);
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a8 + 40))(a8);
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v26, a9);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, void *))(*(void *)a1 + 24))(a1, a2, a3, a4, a5, a6, a7, v24, v17, v26);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v26);
    if ((SHIBYTE(v25) & 0x80000000) == 0) {
      return;
    }
    char v18 = (void *)v24[0];
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "sip.msg");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v19 = ims::error((uint64_t)v22, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Hey, don't call handleIncomingMessage with a NULL body!", 55);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (v23 < 0)
  {
    char v18 = v22[0];
LABEL_8:
    operator delete(v18);
  }
}

void sub_1C51E668C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void SipLazuliManager::OutgoingPager::send(std::chrono::steady_clock::time_point *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "sip.laz");
  uint64_t v2 = ims::debug((uint64_t)__p, this->__d_.__rep_ + 64);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"SipLazuliManager::OutgoingMessage::send()", 41);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  rep = (SipMessage *)this[9].__d_.__rep_;
  if (rep)
  {
    int v4 = *(_DWORD *)(this->__d_.__rep_ + 192);
    *(_DWORD *)(this->__d_.__rep_ + 192) = v4 + 1;
    char v5 = (const std::string *)(*(uint64_t (**)(SipMessage *))(*(void *)rep + 112))(rep);
    uint64_t v6 = SipMessage::header<SipCSeqHeader>(rep, 1);
    *((_DWORD *)v6 + 15) = v4;
    std::string::operator=((std::string *)((char *)v6 + 64), v5);
    this[17].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v7 = *(void *)(this->__d_.__rep_ + 176);
    std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v7 + 16));
    uint64_t v8 = *(void *)(*(void *)(v7 + 8) + 152);
    uint64_t v9 = (const SipRequest *)this[9].__d_.__rep_;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10 = this[1].__d_.__rep_;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    SipTransactionLayer::sendRequest(v8, v9);
  }
}

void sub_1C51E68AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void SipLazuliManager::SipLazuliManager(SipLazuliManager *this, SipUserAgent *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F20B33E8;
  *((void *)this + 1) = &unk_1F20B3410;
  *((void *)this + 2) = &unk_1F20B3658;
  *((void *)this + 3) = &unk_1F20B3448;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.laz");
  uint64_t v38 = (char *)this + 32;
  ImsLogContainer::ImsLogContainer((uint64_t)this + 32, &__p, (const std::string *)((char *)a2 + 56));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *(void *)this = &unk_1F20B3160;
  *((void *)this + 1) = &unk_1F20B31E0;
  *((void *)this + 2) = &unk_1F20B3218;
  *((void *)this + 3) = &unk_1F20B3260;
  *((void *)this + 4) = &unk_1F20B3290;
  *((void *)this + 17) = &unk_1F20B32F0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 25) = (char *)this + 200;
  *((void *)this + 26) = (char *)this + 200;
  *((void *)this + 29) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = (char *)this + 232;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = (char *)this + 256;
  *((void *)this + 34) = (char *)this + 272;
  *((void *)this + 35) = (char *)this + 272;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = (char *)this + 304;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *(void *)((char *)this + 397) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = &unk_1F20B3050;
  *((void *)this + 55) = 0;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 28) = 0u;
  SipTimerContainer::SipTimerContainer((SipLazuliManager *)((char *)this + 496));
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_DWORD *)this + 168) = 1065353216;
  int v41 = (uint64_t **)((char *)this + 680);
  *((void *)this + 87) = 0;
  *((void *)this + 86) = 0;
  *((void *)this + 85) = (char *)this + 688;
  *((void *)this + 90) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 88) = (char *)this + 712;
  *((void *)this + 22) = a2;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0x100000001;
  int v4 = (std::__shared_weak_count *)*((void *)this + 41);
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v42 = this;
  uint64_t v37 = (char *)this + 136;
  if (!*((void *)this + 53))
  {
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&__p, "Apple Inc.");
    ims::CFString::CFString(&v46, (char *)&__p, 0x8000100u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    long long v55 = 0;
    uint64_t v56 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "RCS");
    ims::CFString::CFString(&v55, (char *)&__p, 0x8000100u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    long long v53 = (const char *)&unk_1F20B35C8;
    CFDictionaryRef v54 = 0;
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v53, (const void *)*MEMORY[0x1E4F3B718], (const void *)*MEMORY[0x1E4F3B760]);
    ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)&v53, (const void *)*MEMORY[0x1E4F3B708], 0x800u);
    RandomKey = SecKeyCreateRandomKey(v54, 0);
    SecKeyRef v6 = SecKeyCopyPublicKey(RandomKey);
    values[0] = *(void **)MEMORY[0x1E4F3BBA8];
    values[1] = (void *)v46.__r_.__value_.__l.__size_;
    CFTypeRef v45 = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFArrayRef v8 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, 0);
    CFTypeRef cf = 0;
    CFTypeRef v45 = v8;
    v51[0] = *(void **)MEMORY[0x1E4F3BB98];
    v51[1] = (void *)v56;
    CFTypeRef cf = CFArrayCreate(v7, (const void **)v51, 2, 0);
    uint64_t v49 = 0;
    CFArrayRef v50 = 0;
    uint64_t v49 = CFArrayCreate(v7, &v45, 1, 0);
    CFArrayRef v50 = CFArrayCreate(v7, &cf, 1, 0);
    CFArrayRef v9 = CFArrayCreate(v7, (const void **)&v49, 2, 0);
    v43[0] = &unk_1F20B35C8;
    v43[1] = 0;
    ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)v43, (const void *)*MEMORY[0x1E4F3B970], 0x8000003D);
    SelfSignedCertificate = (const void *)SecGenerateSelfSignedCertificate();
    if (SecCertificateGetSignatureHashAlgorithm() == 4)
    {
      SecCertificateGetSHA1Digest();
      memset(&v47, 0, sizeof(v47));
      memset(&__p, 0, sizeof(__p));
      ctu::cf::assign();
      char v11 = v6;
      std::string v47 = __p;
      memset(&__p, 0, sizeof(__p));
      ctu::hex();
      unsigned int v12 = 0;
      std::string::size_type v13 = 2;
      do
      {
        std::string::insert(&__p, v13, ":", 1uLL);
        v13 += 3;
      }
      while (v12++ < 0x12);
      std::string::operator=((std::string *)((char *)this + 472), &__p);
      SecKeyRef v6 = v11;
      if (*((char *)this + 471) < 0)
      {
        *((void *)this + 57) = 5;
        char v15 = (char *)*((void *)this + 56);
      }
      else
      {
        *((unsigned char *)this + 471) = 5;
        char v15 = (char *)this + 448;
      }
      strcpy(v15, "SHA-1");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v47.__r_.__value_.__r.__words[0])
      {
        v47.__r_.__value_.__l.__size_ = v47.__r_.__value_.__r.__words[0];
        operator delete(v47.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v16 = (*(uint64_t (**)(char *))(*(void *)v38 + 56))(v38);
      (*(void (**)(char *, uint64_t))(*(void *)v38 + 16))(v38, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Unable to compute hash for algorithm ", 37);
      *(unsigned char *)(v16 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
    }
    uint64_t v17 = (const void *)SecIdentityCreate();
    *((void *)this + 53) = v17;
    ims::CFMutableArray::appendValue((SipLazuliManager *)((char *)this + 432), v17);
    if (SelfSignedCertificate) {
      CFRelease(SelfSignedCertificate);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (v49) {
      CFRelease(v49);
    }
    if (v50) {
      CFRelease(v50);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v45) {
      CFRelease(v45);
    }
    if (v6) {
      CFRelease(v6);
    }
    if (RandomKey) {
      CFRelease(RandomKey);
    }
    ims::CFType::~CFType((ims::CFType *)v43);
    ims::CFType::~CFType((ims::CFType *)&v53);
    ims::CFType::~CFType((ims::CFType *)&v55);
    ims::CFType::~CFType((ims::CFType *)&v46);
  }
  long long v55 = ".msrpIncoming";
  uint64_t v56 = ".msrpOutgoing";
  long long v53 = ".wifi";
  CFDictionaryRef v54 = (CFDictionaryRef)".cell";
  memset(&__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100]<0>(&__p, "com.apple.ipTelephony");
  char v18 = 0;
  uint64_t v19 = 1;
  uint64_t v20 = &v55;
  do
  {
    uint64_t v40 = v19;
    char v21 = 0;
    char v39 = v18;
    char v22 = *v20;
    char v23 = &v53;
    uint64_t v24 = 1;
    do
    {
      char v25 = v21;
      memset(&v47, 0, sizeof(v47));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = __p.__r_.__value_.__l.__size_;
      }
      size_t v27 = strlen(v22);
      memset(&v46, 0, sizeof(v46));
      std::string::basic_string[abi:ne180100]((uint64_t)&v46, size + v27);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v28 = &v46;
      }
      else {
        long long v28 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v28, p_p, size);
      }
      long long v30 = (char *)v28 + size;
      if (v27) {
        memmove(v30, v22, v27);
      }
      v30[v27] = 0;
      size_t v31 = strlen(*v23);
      uint64_t v32 = std::string::append(&v46, *v23, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      PowerAssertionLock::addAssertion(v41, (long long *)&v47);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      char v23 = &(&v53)[v24];
      char v21 = 1;
      uint64_t v24 = 2;
    }
    while ((v25 & 1) == 0);
    uint64_t v20 = &(&v55)[v40];
    char v18 = 1;
    uint64_t v19 = 2;
  }
  while ((v39 & 1) == 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)v42 + 75) = v37;
  uint64_t v34 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (v34)
  {
    char v35 = std::__shared_weak_count::lock(v34);
    if (v35) {
      uint64_t v36 = *((void *)a2 + 1);
    }
    else {
      uint64_t v36 = 0;
    }
  }
  else
  {
    uint64_t v36 = 0;
    char v35 = 0;
  }
  if (*(char *)(v36 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v36 + 4160), *(void *)(v36 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v36 + 4160);
  }
  std::string::operator=((std::string *)((char *)v42 + 544), (const std::string *)((char *)v42 + 40));
  std::string::operator=((std::string *)((char *)v42 + 568), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
}

void sub_1C51E7268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, SipTimerContainer *a11, char *a12, uint64_t *a13, void **a14, void **a15, ims::CFType *a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,PowerAssertionLock **a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  ims::CFType::~CFType((ims::CFType *)&a24);
  ims::CFType::~CFType((ims::CFType *)(v46 - 128));
  ims::CFType::~CFType((ims::CFType *)(v46 - 112));
  ims::CFType::~CFType((ims::CFType *)&a28);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a23 + 704, *a10);
  PowerAssertionLock::~PowerAssertionLock(a22);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::~__hash_table(a23 + 640);
  SipTimerContainer::~SipTimerContainer(a11);
  if (*(char *)(a23 + 495) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(a23 + 471) < 0) {
    operator delete(*a14);
  }
  ims::CFType::~CFType(a16);
  uint64_t v48 = *(std::__shared_weak_count **)(a23 + 416);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (*(char *)(a23 + 399) < 0) {
    operator delete(*(void **)(a23 + 376));
  }
  if (*(char *)(a23 + 375) < 0) {
    operator delete(*(void **)(a23 + 352));
  }
  uint64_t v49 = *(std::__shared_weak_count **)(a23 + 344);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  CFArrayRef v50 = *(std::__shared_weak_count **)(a23 + 328);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  std::__tree<unsigned int>::destroy(a23 + 296, *(void **)(a23 + 304));
  std::__list_imp<SipLazuliManager::DeferredMessage>::clear(a12);
  std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::destroy(*(void ***)(a23 + 256));
  std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::destroy(*(void **)(a23 + 232));
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(a13);
  __int16 v51 = *(std::__shared_weak_count **)(a23 + 168);
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  int v52 = *(std::__shared_weak_count **)(a23 + 152);
  if (v52) {
    std::__shared_weak_count::__release_weak(v52);
  }
  ImsLogContainer::~ImsLogContainer(a19);
  _Unwind_Resume(a1);
}

void ImsLogContainer::~ImsLogContainer(void **this)
{
  *this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  *this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipLazuliManager::~SipLazuliManager(SipLazuliManager *this)
{
  *(void *)this = &unk_1F20B3160;
  *((void *)this + 1) = &unk_1F20B31E0;
  *((void *)this + 2) = &unk_1F20B3218;
  *((void *)this + 3) = &unk_1F20B3260;
  *((void *)this + 4) = &unk_1F20B3290;
  *((void *)this + 17) = &unk_1F20B32F0;
  uint64_t v2 = (const void *)*((void *)this + 53);
  if (v2) {
    CFRelease(v2);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 704, *((void **)this + 89));
  PowerAssertionLock::~PowerAssertionLock((PowerAssertionLock **)this + 85);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::~__hash_table((uint64_t)this + 640);
  SipTimerContainer::~SipTimerContainer((SipLazuliManager *)((char *)this + 496));
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  ims::CFType::~CFType((SipLazuliManager *)((char *)this + 432));
  int v3 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 399) < 0) {
    operator delete(*((void **)this + 47));
  }
  if (*((char *)this + 375) < 0) {
    operator delete(*((void **)this + 44));
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  char v5 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__tree<unsigned int>::destroy((uint64_t)this + 296, *((void **)this + 38));
  std::__list_imp<SipLazuliManager::DeferredMessage>::clear((char *)this + 272);
  std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::destroy(*((void ***)this + 32));
  std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::destroy(*((void **)this + 29));
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 25);
  SecKeyRef v6 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  CFAllocatorRef v7 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  *((void *)this + 4) = &unk_1F20C9CA0;
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
}

{
  uint64_t vars8;

  SipLazuliManager::~SipLazuliManager(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipLazuliManager::~SipLazuliManager(SipLazuliManager *this)
{
}

{
  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 16));
}

{
  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 24));
}

{
  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 32));
}

{
  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 136));
}

{
  uint64_t vars8;

  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 32));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 136));
  JUMPOUT(0x1C878E320);
}

void SipLazuliManager::deinitialize(SipLazuliManager *this)
{
  long long v2 = 0u;
  long long v3 = 0u;
  long long v4 = 0u;
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  v1.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  LODWORD(v1.__r_.__value_.__r.__words[2]) = 1073741827;
  SipLazuliManager::clearQueueWithResult(this, &v1);
  ImsResult::~ImsResult((ImsResult *)&v1);
}

void sub_1C51E7940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipLazuliManager::clearQueueWithResult(void *a1, std::string *a2)
{
  long long v4 = (const std::string *)a1[40];
  if (v4)
  {
    std::string::operator=(a2 + 2, v4 + 2);
    SipLazuliManager::generateError(a1, *(unsigned int *)(a1[40] + 16), a1[40] + 24, (uint64_t)a2);
    char v5 = (std::__shared_weak_count *)a1[41];
    a1[40] = 0;
    a1[41] = 0;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  for (std::string::size_type i = (void *)a1[26]; i != a1 + 25; std::string::size_type i = (void *)i[1])
    SipLazuliManager::generateError(a1, *(unsigned int *)(i[2] + 16), i[2] + 24, (uint64_t)a2);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(a1 + 25);
}

void SipLazuliManager::endAllMessages(SipLazuliManager *this)
{
  SipLazuliManager::deinitialize(this);
  uint64_t v2 = *((void *)this + 22);
  long long v3 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v2 + 16));
  uint64_t v4 = *(void *)(*(void *)(v2 + 8) + 152);
  memset(&v48[24], 0, 48);
  *(void *)uint64_t v48 = &unk_1F20B2680;
  *(void *)&v48[8] = &_bambiDomain;
  *(_DWORD *)&v48[16] = 1073741827;
  uint64_t v56 = 0;
  long long v54 = 0u;
  long long v55 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipClientTransaction>>::unordered_map((uint64_t)&v54, v4 + 152);
  uint64_t v53 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipServerTransaction>>::unordered_map((uint64_t)&v51, v4 + 192);
  std::string v47 = this;
  char v5 = (void *)v55;
  if ((void)v55)
  {
    uint64_t v6 = v4 + 32;
    do
    {
      CFArrayRef v8 = (void **)v5[5];
      CFAllocatorRef v7 = (std::__shared_weak_count *)v5[6];
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v8
        && ((CFArrayRef v9 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*v8[37] + 112))(v8[37]),
             uint64_t v10 = v9[23],
             (v10 & 0x80u) == 0)
          ? (uint64_t v11 = v9[23])
          : (uint64_t v11 = *((void *)v9 + 1)),
            v11 == 7))
      {
        if ((v10 & 0x80) != 0)
        {
          BOOL v20 = memcmp(*(const void **)v9, "MESSAGE", *((void *)v9 + 1)) == 0;
        }
        else if (v9[23])
        {
          uint64_t v12 = v10 - 1;
          std::string::size_type v13 = "MESSAGE";
          do
          {
            int v15 = *v9++;
            int v14 = v15;
            int v17 = *(unsigned __int8 *)v13++;
            int v16 = v17;
            BOOL v18 = v12-- != 0;
            char v19 = v18;
            BOOL v20 = v14 == v16;
          }
          while (v14 == v16 && (v19 & 1) != 0);
        }
        else
        {
          BOOL v20 = 1;
        }
      }
      else
      {
        BOOL v20 = 0;
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      if (v20)
      {
        int v21 = ((uint64_t (*)(void **))(*v8)[18])(v8);
        char v22 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 64);
        if (v21)
        {
          uint64_t v23 = v22(v4 + 32);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v4 + 32, v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
          *(unsigned char *)(v23 + 17) = 0;
          ((void (*)(void **__return_ptr, void **))(*v8)[19])(__p, v8);
          (*(void (**)(uint64_t, void **))(*(void *)v23 + 40))(v23, __p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v23 + 17) = 0;
          if (v50 < 0) {
            operator delete(__p[0]);
          }
          ((void (*)(void **, uint64_t))(*v8)[4])(v8, 7);
        }
        else
        {
          uint64_t v24 = v22(v4 + 32);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v4 + 32, v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"Error out transaction ", 22);
          *(unsigned char *)(v24 + 17) = 0;
          ((void (*)(void **__return_ptr, void **))(*v8)[19])(__p, v8);
          (*(void (**)(uint64_t, void **))(*(void *)v24 + 40))(v24, __p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v24 + 17) = 0;
          if (v50 < 0) {
            operator delete(__p[0]);
          }
          ((void (*)(void **, unsigned char *))(*v8)[14])(v8, v48);
        }
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      char v5 = (void *)*v5;
    }
    while (v5);
  }
  char v25 = (void *)v52;
  if ((void)v52)
  {
    uint64_t v26 = v4 + 32;
    do
    {
      long long v28 = (void **)v25[5];
      size_t v27 = (std::__shared_weak_count *)v25[6];
      if (v27)
      {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v28
        && ((long long v29 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*v28[37] + 112))(v28[37]),
             uint64_t v30 = v29[23],
             (v30 & 0x80u) == 0)
          ? (uint64_t v31 = v29[23])
          : (uint64_t v31 = *((void *)v29 + 1)),
            v31 == 7))
      {
        if ((v30 & 0x80) != 0)
        {
          BOOL v39 = memcmp(*(const void **)v29, "MESSAGE", *((void *)v29 + 1)) == 0;
        }
        else if (v29[23])
        {
          uint64_t v32 = v30 - 1;
          long long v33 = "MESSAGE";
          do
          {
            int v35 = *v29++;
            int v34 = v35;
            int v37 = *(unsigned __int8 *)v33++;
            int v36 = v37;
            BOOL v18 = v32-- != 0;
            char v38 = v18;
            BOOL v39 = v34 == v36;
          }
          while (v34 == v36 && (v38 & 1) != 0);
        }
        else
        {
          BOOL v39 = 1;
        }
      }
      else
      {
        BOOL v39 = 0;
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if (v39)
      {
        int v40 = ((uint64_t (*)(void **))(*v28)[18])(v28);
        int v41 = *(uint64_t (**)(uint64_t))(*(void *)v26 + 64);
        if (v40)
        {
          uint64_t v42 = v41(v4 + 32);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v4 + 32, v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
          *(unsigned char *)(v42 + 17) = 0;
          ((void (*)(void **__return_ptr, void **))(*v28)[20])(__p, v28);
          (*(void (**)(uint64_t, void **))(*(void *)v42 + 40))(v42, __p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v42 + 17) = 0;
          if (v50 < 0) {
            operator delete(__p[0]);
          }
          ((void (*)(void **, uint64_t))(*v28)[4])(v28, 7);
        }
        else
        {
          uint64_t v43 = v41(v4 + 32);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v4 + 32, v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"Error out transaction ", 22);
          *(unsigned char *)(v43 + 17) = 0;
          ((void (*)(void **__return_ptr, void **))(*v28)[20])(__p, v28);
          (*(void (**)(uint64_t, void **))(*(void *)v43 + 40))(v43, __p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v43 + 17) = 0;
          if (v50 < 0) {
            operator delete(__p[0]);
          }
          ((void (*)(void **, unsigned char *))(*v28)[14])(v28, v48);
        }
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      char v25 = (void *)*v25;
    }
    while (v25);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v51);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v54);
  ImsResult::~ImsResult((ImsResult *)v48);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  for (std::string::size_type i = (uint64_t *)*((void *)v47 + 82); i; std::string::size_type i = (uint64_t *)*i)
  {
    memset(v48, 0, 40);
    if (*((char *)i + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v48, (const std::string::value_type *)i[2], i[3]);
    }
    else
    {
      *(_OWORD *)uint64_t v48 = *((_OWORD *)i + 1);
      *(void *)&v48[16] = i[4];
    }
    uint64_t v46 = i[5];
    uint64_t v45 = i[6];
    *(void *)&v48[24] = v46;
    *(void *)&v48[32] = v45;
    if (v45)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
      uint64_t v46 = *(void *)&v48[24];
    }
    std::string::basic_string[abi:ne180100]<0>(&v54, "TerminateChat");
    MessageSession::terminate(v46, (uint64_t)&v54);
    if (SBYTE7(v55) < 0) {
      operator delete((void *)v54);
    }
    if (*(void *)&v48[32]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v48[32]);
    }
    if ((v48[23] & 0x80000000) != 0) {
      operator delete(*(void **)v48);
    }
  }
}

void sub_1C51E82D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v26 - 128);
  ImsResult::~ImsResult((ImsResult *)&a11);
  std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::shared_ptr<MessageSession>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void SipLazuliManager::generateError(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFArrayRef v8 = a1 + 38;
  uint64_t v9 = a1[38];
  if (!v9) {
    goto LABEL_12;
  }
  unsigned int v10 = *(_DWORD *)(a4 + 16);
  uint64_t v11 = a1 + 38;
  do
  {
    unsigned int v12 = *(_DWORD *)(v9 + 28);
    BOOL v13 = v12 >= v10;
    if (v12 >= v10) {
      int v14 = (uint64_t *)v9;
    }
    else {
      int v14 = (uint64_t *)(v9 + 8);
    }
    if (v13) {
      uint64_t v11 = (void *)v9;
    }
    uint64_t v9 = *v14;
  }
  while (*v14);
  if (v11 == v8 || v10 < *((_DWORD *)v11 + 7)) {
LABEL_12:
  }
    uint64_t v11 = a1 + 38;
  uint64_t v15 = a1[23];
  if (v15)
  {
    uint64_t v16 = a1[22];
    int v17 = *(std::__shared_weak_count **)(v16 + 16);
    if (v17)
    {
      BOOL v18 = std::__shared_weak_count::lock(v17);
      if (v18) {
        uint64_t v19 = *(void *)(v16 + 8);
      }
      else {
        uint64_t v19 = 0;
      }
    }
    else
    {
      uint64_t v19 = 0;
      BOOL v18 = 0;
    }
    if (*(char *)(v19 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v19 + 4160), *(void *)(v19 + 4168));
    }
    else {
      std::string __p = *(std::string *)(v19 + 4160);
    }
    (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t, uint64_t, BOOL))(*(void *)v15 + 32))(v15, &__p, a2, a3, a4, v11 != v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  BOOL v20 = (std::__shared_weak_count *)a1[41];
  a1[40] = 0;
  a1[41] = 0;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
}

void sub_1C51E855C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void SipLazuliManager::initialize(uint64_t a1, SipStack **a2)
{
  char v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 2, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 168);
  *(void *)(a1 + 160) = v5;
  *(void *)(a1 + 168) = v4;
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)((char *)*a2 + 3760));
  std::string::operator=((std::string *)(a1 + 376), (const std::string *)((char *)*a2 + 3784));
  uint64_t v7 = *(void *)(a1 + 176);
  CFArrayRef v8 = *(std::__shared_weak_count **)(v7 + 16);
  if (v8)
  {
    CFArrayRef v8 = std::__shared_weak_count::lock(v8);
    uint64_t v9 = v8;
    if (v8) {
      CFArrayRef v8 = *(std::__shared_weak_count **)(v7 + 8);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  unsigned int v10 = (ImsPrefs *)SipStack::prefs((SipStack *)v8);
  SwitchoverSizeKey = (void **)ImsPrefs::getSwitchoverSizeKey(v10);
  int v12 = ImsPrefs::intValue(v10, SwitchoverSizeKey);
  *(_DWORD *)(a1 + 400) = v12;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    int v12 = *(_DWORD *)(a1 + 400);
  }
  uint64_t v13 = *(void *)(a1 + 32);
  *(unsigned char *)(a1 + 404) = v12 != 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(v13 + 64))(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(a1 + 32, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Using SwitchoverSize ", 21);
  *(unsigned char *)(v14 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  std::string __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v15 = (ImsPrefs *)SipStack::prefs(*a2);
  FatalSmsErrorsKey = (void **)ImsPrefs::getFatalSmsErrorsKey(v15);
  ImsPrefs::stringValue(v15, FatalSmsErrorsKey);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(a1 + 296), &SipResponse::kStatusBadRequest, &SipResponse::kStatusBadRequest);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(a1 + 296), &SipResponse::kStatusNotFound, &SipResponse::kStatusNotFound);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(a1 + 296), &SipResponse::kStatusServerInternalError, &SipResponse::kStatusServerInternalError);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(a1 + 296), &SipResponse::kStatusBadGateway, &SipResponse::kStatusBadGateway);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(a1 + 296), &SipResponse::kStatusServiceUnavailable, &SipResponse::kStatusServiceUnavailable);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(a1 + 296), &SipResponse::kStatusNotImplemented, &SipResponse::kStatusNotImplemented);
  if (*((unsigned char *)*a2 + 2681))
  {
    int v17 = (uint64_t **)(*(void *)(a1 + 176) + 128);
    BOOL v18 = "MESSAGE";
    std::__tree<std::__value_type<std::string,SipUserAgentDelegate *>,std::__map_value_compare<std::string,std::__value_type<std::string,SipUserAgentDelegate *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipUserAgentDelegate *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (void **)"MESSAGE", (uint64_t)&std::piecewise_construct, (long long **)&v18)[7] = a1;
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_1C51E88AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19)
{
  a19 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t SipLazuliManager::handleNewServerTransaction(uint64_t a1, uint64_t *a2)
{
  long long v3 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v3 || (uint64_t v4 = *a2, v5 = *(void *)(a1 + 144), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = v5 + 16;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v9 = *(std::__shared_weak_count **)(v4 + 360);
  if (!v5) {
    uint64_t v8 = 0;
  }
  *(void *)(v4 + 352) = v8;
  *(void *)(v4 + 360) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  return 1;
}

void SipLazuliManager::handleRequestError(SipLazuliManager *this)
{
  uint64_t v1 = *((void *)this + 23);
  if (v1)
  {
    uint64_t v2 = *((void *)this + 22);
    long long v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
    {
      uint64_t v4 = std::__shared_weak_count::lock(v3);
      if (v4) {
        uint64_t v5 = *(void *)(v2 + 8);
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v4 = 0;
    }
    if (*(char *)(v5 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
    }
    else {
      std::string __p = *(std::string *)(v5 + 4160);
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v1 + 56))(v1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C51E8A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipLazuliManager::handleRequest(uint64_t a1, uint64_t a2, void **a3)
{
  v125[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 184);
  if (!v5) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 16);
  if (!v7)
  {
    uint64_t v8 = 0;
    goto LABEL_6;
  }
  uint64_t v8 = std::__shared_weak_count::lock(v7);
  if (!v8)
  {
LABEL_6:
    uint64_t v9 = 0;
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)(v6 + 8);
LABEL_7:
  if (*(char *)(v9 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(v9 + 4160), *(void *)(v9 + 4168));
  }
  else {
    std::string v124 = *(std::string *)(v9 + 4160);
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 48))(v5, &v124);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
LABEL_14:
  long long v111 = a3;
  uint64_t v10 = a1 + 32;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(a1 + 32, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Received message request ", 25);
  *(unsigned char *)(v11 + 17) = 0;
  int v12 = (char *)SipMessage::header<SipCallIdHeader>(a2);
  if (v12) {
    uint64_t v13 = (long long *)(v12 + 64);
  }
  else {
    uint64_t v13 = &ims::kEmptyString;
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v11 + 32))(v11, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" on stack ", 10);
  *(unsigned char *)(v11 + 17) = 0;
  uint64_t v14 = *(void *)(a1 + 176);
  uint64_t v15 = *(std::__shared_weak_count **)(v14 + 16);
  if (v15)
  {
    uint64_t v16 = std::__shared_weak_count::lock(v15);
    if (v16)
    {
      uint64_t v17 = *(void *)(v14 + 8);
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v17 = 0;
LABEL_22:
  if (*(char *)(v17 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(v17 + 4160), *(void *)(v17 + 4168));
  }
  else {
    std::string v124 = *(std::string *)(v17 + 4160);
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, &v124);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v18 = (uint64_t)SipMessage::header<SipFromHeader>(a2);
  if (v18) {
    uint64_t v19 = v18 + 104;
  }
  else {
    uint64_t v19 = 0;
  }
  if (!v18) {
    goto LABEL_51;
  }
  if (!SipUri::isValidUri((SipUri *)(v18 + 104)))
  {
    uint64_t v18 = 0;
LABEL_51:
    uint64_t v29 = a2;
    goto LABEL_52;
  }
  int v110 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v18 + 440, (void **)"Contact");
  std::string v109 = (void **)(v18 + 448);
  if ((void **)(v18 + 448) == v110) {
    goto LABEL_48;
  }
  uint64_t v20 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v18 + 440, (void **)"Contact");
  if (v109 == v20) {
    uint64_t v21 = &ims::kEmptyString;
  }
  else {
    uint64_t v21 = (long long *)(v20 + 7);
  }
  char v22 = v118;
  std::string::basic_string[abi:ne180100]<0>(v118, "+g.gsma.rcs.isbot");
  uint64_t v23 = *((unsigned __int8 *)v21 + 23);
  if ((v23 & 0x80u) == 0) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = *(long long **)v21;
  }
  unsigned __int8 v25 = v119;
  if ((v119 & 0x80u) == 0)
  {
    int64_t v26 = v119;
  }
  else
  {
    char v22 = (void **)v118[0];
    int64_t v26 = (int64_t)v118[1];
  }
  if (v26)
  {
    if ((v23 & 0x80u) != 0) {
      uint64_t v23 = *((void *)v21 + 1);
    }
    if (v23 >= v26)
    {
      uint64_t v53 = (char *)v24 + v23;
      int v54 = *(char *)v22;
      long long v55 = v24;
      do
      {
        uint64_t v56 = v23 - v26;
        if (v56 == -1) {
          break;
        }
        uint64_t v57 = (char *)memchr(v55, v54, v56 + 1);
        if (!v57) {
          break;
        }
        __int16 v58 = v57;
        if (!memcmp(v57, v22, v26))
        {
          if (v58 == v53 || v58 - (char *)v24 == -1) {
            break;
          }
          goto LABEL_117;
        }
        long long v55 = (long long *)(v58 + 1);
        uint64_t v23 = v53 - (v58 + 1);
      }
      while (v23 >= v26);
    }
LABEL_48:
    std::string::basic_string[abi:ne180100]<0>(&v124, "botplatform");
    if (*(char *)(v19 + 39) < 0)
    {
      size_t v27 = *(char **)(v19 + 16);
      uint64_t v28 = *(void *)(v19 + 24);
    }
    else
    {
      size_t v27 = (char *)(v19 + 16);
      uint64_t v28 = *(unsigned __int8 *)(v19 + 39);
    }
    int v42 = SHIBYTE(v124.__r_.__value_.__r.__words[2]);
    uint64_t v43 = (void *)v124.__r_.__value_.__r.__words[0];
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v44 = &v124;
    }
    else {
      uint64_t v44 = (std::string *)v124.__r_.__value_.__r.__words[0];
    }
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = v124.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v46 = &v27[v28];
      if (v28 >= size)
      {
        int v49 = v44->__r_.__value_.__s.__data_[0];
        char v50 = v27;
        do
        {
          uint64_t v51 = v28 - size;
          if (v51 == -1) {
            break;
          }
          long long v52 = (char *)memchr(v50, v49, v51 + 1);
          if (!v52) {
            break;
          }
          std::string v47 = v52;
          if (!memcmp(v52, v44, size)) {
            goto LABEL_84;
          }
          char v50 = v47 + 1;
          uint64_t v28 = v46 - (v47 + 1);
        }
        while (v28 >= size);
      }
      std::string v47 = v46;
LABEL_84:
      uint64_t v18 = v47 != v46 && v47 - v27 != -1;
    }
    else
    {
      uint64_t v18 = 1;
    }
    uint64_t v29 = a2;
    if (v42 < 0) {
      operator delete(v43);
    }
    if (v109 != v110 && (v119 & 0x80) != 0) {
      goto LABEL_118;
    }
    goto LABEL_52;
  }
LABEL_117:
  uint64_t v18 = 1;
  uint64_t v29 = a2;
  if ((v25 & 0x80) != 0) {
LABEL_118:
  }
    operator delete(v118[0]);
LABEL_52:
  if (*(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 176)) + 1154)
    && !*(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 176)) + 456))
  {
    uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 64))(a1 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(a1 + 32, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"Secondary device should not receive message.  Faking timeout.", 61);
    *(unsigned char *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v39 + 17) = 0;
    int v40 = *v111;
    std::string::basic_string[abi:ne180100]<0>(&v124, "");
    SipServerTransaction::sendResponse(v40, 408, &v124);
    ImsResult::~ImsResult((ImsResult *)v117);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v124.__r_.__value_.__l.__data_);
    }
    SipLazuliManager::logSendReceiveEvent(a1, 0, 408, 0, v18);
    SipLazuliManager::handleRequestError((SipLazuliManager *)a1);
    return 1;
  }
  uint64_t v30 = SipUserAgent::config(*(SipUserAgent **)(a1 + 176));
  uint64_t v31 = SipRequest::bestSenderIdentity(v29, *(_DWORD *)(v30 + 804));
  uint64_t v32 = SipMessage::assertedIdentity(a2, 1);
  long long v33 = (char *)SipMessage::header<SipToHeader>(a2);
  int v34 = v33;
  int v35 = (SipUri *)(v33 + 104);
  if (v33) {
    int v36 = v33 + 104;
  }
  else {
    int v36 = 0;
  }
  if (!v33)
  {
    uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(a1 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(a1 + 32, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"incoming Message missing To: header.", 36);
    *(unsigned char *)(v37 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v37 + 17) = 0;
    char v38 = *v111;
    std::string::basic_string[abi:ne180100]<0>(&v124, "Missing To header");
    SipServerTransaction::sendResponse(v38, 400, &v124);
    ImsResult::~ImsResult((ImsResult *)v116);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v124.__r_.__value_.__l.__data_);
    }
    SipLazuliManager::logSendReceiveEvent(a1, 0, 400, 0, v18);
    SipLazuliManager::handleRequestError((SipLazuliManager *)a1);
    return 1;
  }
  if (*(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 176)) + 918) && *(void *)(a1 + 184))
  {
    if (!SipUri::isValidUri(v35))
    {
      std::string::basic_string[abi:ne180100]<0>(&v124, "sms");
      std::string::basic_string[abi:ne180100]<0>(&v123, "");
      uint64_t v41 = ims::error((uint64_t)&v124, (uint64_t)&v123);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"Failed to validate recipient for MT SMS- Invalid URI", 52);
      *(unsigned char *)(v41 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v41 + 17) = 0;
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      goto LABEL_187;
    }
    if (*(char *)(a1 + 375) < 0)
    {
      if (!*(void *)(a1 + 360)) {
        goto LABEL_175;
      }
    }
    else if (!*(unsigned char *)(a1 + 375))
    {
      goto LABEL_175;
    }
    int v59 = *(char *)(a1 + 399);
    if ((v59 & 0x80000000) == 0)
    {
      if (!*(unsigned char *)(a1 + 399)) {
        goto LABEL_175;
      }
LABEL_113:
      memset(&v124, 0, sizeof(v124));
      if (v34[255] < 0)
      {
        std::string::__init_copy_ctor_external(&v124, *((const std::string::value_type **)v34 + 29), *((void *)v34 + 30));
        LOBYTE(v59) = *(unsigned char *)(a1 + 399);
      }
      else
      {
        std::string v124 = *(std::string *)(v34 + 232);
      }
      if ((v59 & 0x80) != 0)
      {
        uint64_t v60 = *(const void **)(a1 + 376);
        size_t v61 = *(void *)(a1 + 384);
      }
      else
      {
        uint64_t v60 = (const void *)(a1 + 376);
        size_t v61 = v59;
      }
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v62 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v62 = v124.__r_.__value_.__l.__size_;
      }
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v63 = &v124;
      }
      else {
        long long v63 = (std::string *)v124.__r_.__value_.__r.__words[0];
      }
      if (v62 >= v61) {
        size_t v64 = v61;
      }
      else {
        size_t v64 = v62;
      }
      if (!memcmp(v60, v63, v64) && v62 == v61)
      {
        std::string::basic_string[abi:ne180100]<0>(&v123, "sms");
        std::string::basic_string[abi:ne180100]<0>(&v120, "");
        uint64_t v65 = ims::debug((uint64_t)&v123, (uint64_t)&v120);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)"Validated recipient for MT SMS - IMSI match", 43);
        *(unsigned char *)(v65 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_156:
        *(unsigned char *)(v65 + 17) = 0;
        if (SHIBYTE(v122) < 0) {
          operator delete(v120);
        }
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v123.__r_.__value_.__l.__data_);
        }
        char v73 = 1;
        goto LABEL_172;
      }
      if (SipUri::isTelUri(v35))
      {
        SipUri::normalizedPhoneNumber(v35, &v123);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        std::string v124 = v123;
      }
      int v66 = (void *)(a1 + 352);
      if (*(char *)(a1 + 375) < 0)
      {
        unint64_t v67 = *(void *)(a1 + 360);
        if (v67 < 4)
        {
          unsigned int v68 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
          std::string::size_type v69 = v124.__r_.__value_.__l.__size_;
          int v66 = (void *)*v66;
LABEL_144:
          if ((v68 & 0x80u) == 0) {
            size_t v70 = v68;
          }
          else {
            size_t v70 = v69;
          }
          if ((v68 & 0x80u) == 0) {
            uint64_t v71 = &v124;
          }
          else {
            uint64_t v71 = (std::string *)v124.__r_.__value_.__r.__words[0];
          }
          if (v70 >= v67) {
            size_t v72 = v67;
          }
          else {
            size_t v72 = v70;
          }
          if (memcmp(v66, v71, v72) || v70 != v67)
          {
LABEL_167:
            std::string::basic_string[abi:ne180100]<0>(&v123, "sms");
            std::string::basic_string[abi:ne180100]<0>(&v120, "");
            uint64_t v81 = ims::error((uint64_t)&v123, (uint64_t)&v120);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v81 + 8), (uint64_t)"Failed to validate recipient for MT SMS - MDN mismatch", 54);
            *(unsigned char *)(v81 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v81 + 17) = 0;
            if (SHIBYTE(v122) < 0) {
              operator delete(v120);
            }
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v123.__r_.__value_.__l.__data_);
            }
            char v73 = 0;
LABEL_172:
            if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v124.__r_.__value_.__l.__data_);
            }
            if (v73) {
              goto LABEL_175;
            }
LABEL_187:
            uint64_t v90 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(a1 + 32);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(a1 + 32, v90);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v90 + 8), (uint64_t)"incoming Message not destined for UE. Intended Recipient:", 57);
            *(unsigned char *)(v90 + 17) = 0;
            (*(void (**)(char *, uint64_t))(*(void *)v36 + 40))(v36, v90);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v90 + 64))(v90, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v90 + 17) = 0;
            uint64_t v91 = *v111;
            std::string::basic_string[abi:ne180100]<0>(&v124, "");
            SipServerTransaction::sendResponse(v91, 404, &v124);
            ImsResult::~ImsResult((ImsResult *)v115);
            if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v124.__r_.__value_.__l.__data_);
            }
            SipLazuliManager::logSendReceiveEvent(a1, 0, 404, 0, v18);
            SipLazuliManager::handleRequestError((SipLazuliManager *)a1);
            return 1;
          }
          goto LABEL_155;
        }
        int v66 = (void *)*v66;
      }
      else
      {
        unint64_t v67 = *(unsigned __int8 *)(a1 + 375);
        if (*(unsigned __int8 *)(a1 + 375) <= 3u)
        {
          unsigned int v68 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
          std::string::size_type v69 = v124.__r_.__value_.__l.__size_;
          goto LABEL_144;
        }
      }
      int v74 = (void *)((char *)v66 + v67);
      std::string::size_type v75 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      v76 = &v124;
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        std::string::size_type v75 = v124.__r_.__value_.__l.__size_;
        v76 = (std::string *)v124.__r_.__value_.__r.__words[0];
      }
      uint64_t v77 = (std::string *)((char *)v76 + v75 - 1);
      while (v74 != (void *)((char *)v66 + v67 - 4))
      {
        int v79 = *((unsigned __int8 *)v74 - 1);
        int v74 = (void *)((char *)v74 - 1);
        int v78 = v79;
        int v80 = v77->__r_.__value_.__s.__data_[0];
        uint64_t v77 = (std::string *)((char *)v77 - 1);
        if (v78 != v80) {
          goto LABEL_167;
        }
      }
LABEL_155:
      std::string::basic_string[abi:ne180100]<0>(&v123, "sms");
      std::string::basic_string[abi:ne180100]<0>(&v120, "");
      uint64_t v65 = ims::debug((uint64_t)&v123, (uint64_t)&v120);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)"Validated recipient for MT SMS - MDN match", 42);
      *(unsigned char *)(v65 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_156;
    }
    if (*(void *)(a1 + 384)) {
      goto LABEL_113;
    }
  }
LABEL_175:
  memset(&v124, 0, sizeof(v124));
  uint64_t v82 = *(void *)(a2 + 72);
  if (v82) {
    int v83 = (long long *)(*(uint64_t (**)(uint64_t))(*(void *)v82 + 40))(v82);
  }
  else {
    int v83 = &SipBody::kGenericContentType;
  }
  if (*((char *)v83 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)v83, *((void *)v83 + 1));
  }
  else
  {
    long long v84 = *v83;
    v124.__r_.__value_.__r.__words[2] = *((void *)v83 + 2);
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v84;
  }
  uint64_t v85 = *v111;
  std::string::basic_string[abi:ne180100]<0>(&v123, "");
  SipServerTransaction::sendResponse(v85, 200, &v123);
  ImsResult::~ImsResult((ImsResult *)v114);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
  SipLazuliManager::logSendReceiveEvent(a1, 0, 200, 0, v18);
  uint64_t v86 = *(void *)(a1 + 176);
  unsigned int v87 = *(std::__shared_weak_count **)(v86 + 16);
  if (v87)
  {
    uint64_t v88 = std::__shared_weak_count::lock(v87);
    if (v88) {
      uint64_t v89 = *(unsigned char **)(v86 + 8);
    }
    else {
      uint64_t v89 = 0;
    }
  }
  else
  {
    uint64_t v89 = 0;
    uint64_t v88 = 0;
  }
  uint64_t v92 = (char *)SipMessage::header<SipCallIdHeader>(a2);
  if (v92) {
    std::string::size_type v93 = (long long *)(v92 + 64);
  }
  else {
    std::string::size_type v93 = &ims::kEmptyString;
  }
  SipStack::saveEmergencyMessageCallId(v89, v93);
  if (v88) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v88);
  }
  memset(&v123, 0, sizeof(v123));
  long long v120 = 0;
  long long v121 = 0;
  uint64_t v122 = 0;
  SipMessage::allHeadersWithName(a2, (const void **)SipHeader::kInReplyToContributionId, (uint64_t)&v120);
  BOOL v94 = v120;
  uint64_t v95 = v121;
  if (v120 != v121)
  {
    while (!*v94)
    {
      uint64_t v96 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 64))(a1 + 32);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(a1 + 32, v96);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v96 + 8), (uint64_t)"InReplyTo-Contribution-ID: NULL", 31);
      *(unsigned char *)(v96 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v96 + 64))(v96, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v96 + 17) = 0;
      if (++v94 == v95) {
        goto LABEL_202;
      }
    }
    if (((*(uint64_t (**)(void, std::string *))(*(void *)*v94 + 40))(*v94, &v123) & 1) == 0)
    {
      uint64_t v97 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 64))(a1 + 32);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(a1 + 32, v97);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v97 + 8), (uint64_t)"InReplyTo-Contribution-ID can't be decoded", 42);
      *(unsigned char *)(v97 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v97 + 64))(v97, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v97 + 17) = 0;
    }
  }
LABEL_202:
  uint64_t v98 = *(void *)(a1 + 184);
  if (v98)
  {
    uint64_t v99 = *(void *)(a1 + 176);
    int v100 = *(std::__shared_weak_count **)(v99 + 16);
    if (v100)
    {
      int v101 = std::__shared_weak_count::lock(v100);
      if (v101) {
        uint64_t v102 = *(void *)(v99 + 8);
      }
      else {
        uint64_t v102 = 0;
      }
    }
    else
    {
      uint64_t v102 = 0;
      int v101 = 0;
    }
    if (*(char *)(v102 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)(v102 + 4160), *(void *)(v102 + 4168));
    }
    else {
      std::string v113 = *(std::string *)(v102 + 4160);
    }
    std::string::size_type v103 = (char *)SipMessage::header<SipConversationIdHeader>(a2);
    uint64_t v104 = (char *)SipMessage::header<SipContributionIdHeader>(a2);
    if (v103) {
      int v105 = (long long *)(v103 + 64);
    }
    else {
      int v105 = &ims::kEmptyString;
    }
    if (v104) {
      int v106 = (long long *)(v104 + 64);
    }
    else {
      int v106 = &ims::kEmptyString;
    }
    uint64_t v107 = *(void *)(a2 + 72);
    v125[0] = &unk_1F20B3478;
    v125[3] = v125;
    (*(void (**)(uint64_t, std::string *, SipUri *, char *, long long *, long long *, std::string *, uint64_t, void *))(*(void *)v98 + 16))(v98, &v113, v31, v32, v105, v106, &v123, v107, v125);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v125);
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v113.__r_.__value_.__l.__data_);
    }
    if (v101) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v101);
    }
  }
  if (v120)
  {
    long long v121 = v120;
    operator delete(v120);
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C51E9C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 - 161) < 0) {
    operator delete(*(void **)(v20 - 184));
  }
  if (*(char *)(v20 - 137) < 0) {
    operator delete(*(void **)(v20 - 160));
  }
  _Unwind_Resume(exception_object);
}

void SipLazuliManager::logSendReceiveEvent(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 168);
  if (v6)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v6);
    if (v11)
    {
      int v12 = v11;
      uint64_t v13 = *(void *)(a1 + 160);
      if (v13)
      {
        uint64_t v15 = *(void *)(v13 + 160);
        uint64_t v14 = *(std::__shared_weak_count **)(v13 + 168);
        if (v14)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          if (v15)
          {
            uint64_t v15 = *(void *)(v13 + 160);
            uint64_t v16 = *(std::__shared_weak_count **)(v13 + 168);
            if (v16)
            {
              char v17 = 0;
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
              uint64_t v18 = *(void *)(v15 + 1040);
              uint64_t v19 = *(std::__shared_weak_count **)(v15 + 1048);
              if (v19) {
                atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if ((v17 & 1) == 0) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v16);
              }
              if (v18)
              {
                int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 216))(v18);
                memset(&v42, 0, sizeof(v42));
                if (v20)
                {
                  char v28 = 0;
                  char v21 = 3;
                  *((unsigned char *)&v42.__r_.__value_.__s + 23) = 3;
                  LODWORD(v42.__r_.__value_.__l.__data_) = 5260116;
                  int v22 = 5459028;
                }
                else
                {
                  uint64_t v40 = 0;
                  uint64_t v41 = 0;
                  (*(void (**)(uint64_t, uint64_t *, std::string *))(*(void *)v18 + 232))(v18, &v40, &v42);
                  if (v41) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
                  }
                  std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
                  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type size = v42.__r_.__value_.__l.__size_;
                  }
                  if (!size)
                  {
                    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v42.__r_.__value_.__l.__size_ = 3;
                      uint64_t v24 = (std::string *)v42.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      *((unsigned char *)&v42.__r_.__value_.__s + 23) = 3;
                      uint64_t v24 = &v42;
                    }
                    LODWORD(v24->__r_.__value_.__l.__data_) = 5260373;
                  }
                  if ((*(uint64_t (**)(uint64_t))(*(void *)v18 + 224))(v18))
                  {
                    char v21 = 5;
                    char v28 = 67;
                    int v22 = 1163087945;
                  }
                  else
                  {
                    char v28 = 0;
                    char v21 = 4;
                    int v22 = 1162760014;
                  }
                }
                (*(void (**)(uint64_t *__return_ptr))(**(void **)(v13 + 136) + 104))(&v38);
                uint64_t v25 = v38;
                if (a2)
                {
                  uint64_t v26 = (uint64_t)((double)(std::chrono::steady_clock::now().__d_.__rep_ - a4) / 1000000.0);
                  size_t v27 = "MO";
                }
                else
                {
                  uint64_t v26 = 0;
                  size_t v27 = "MT";
                }
                std::string::basic_string[abi:ne180100]<0>(__p, v27);
                if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v35, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v35 = v42;
                }
                int v29 = v22;
                char v30 = v28;
                uint64_t v32 = 0;
                uint64_t v31 = 0;
                __int16 v33 = 0;
                char v34 = v21;
                IMSMetricsManager::logLazuliMessageSendReceive(v25, (a3 & 0xFFFFFFFD) == 200, v26, a3, (uint64_t)__p, 0, a5, (uint64_t)&v35, (uint64_t)&v29);
                if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v35.__r_.__value_.__l.__data_);
                }
                if (v37 < 0) {
                  operator delete(__p[0]);
                }
                if (v39) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
                }
                if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v42.__r_.__value_.__l.__data_);
                }
              }
              if (v19) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v19);
              }
              goto LABEL_46;
            }
LABEL_10:
            char v17 = 1;
            goto LABEL_11;
          }
        }
        else if (v15)
        {
          uint64_t v16 = 0;
          goto LABEL_10;
        }
      }
LABEL_46:
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void sub_1C51EA0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (*(char *)(v32 - 89) < 0) {
    operator delete(*(void **)(v32 - 112));
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'SipLazuliManager::handleRequest(uint64_t a1, uint64_t a2, void **a3)
{
  return 1;
}

void SipLazuliManager::handleIncomingMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v29[4] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = (void *)(a1 + 32);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(void *, uint64_t))(*v15 + 16))(v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Received message [conversationId = ", 35);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 32))(v16, a4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" on stack ", 10);
  *(unsigned char *)(v16 + 17) = 0;
  uint64_t v17 = v15[18];
  uint64_t v18 = *(std::__shared_weak_count **)(v17 + 16);
  if (v18)
  {
    uint64_t v19 = std::__shared_weak_count::lock(v18);
    if (v19) {
      uint64_t v20 = *(void *)(v17 + 8);
    }
    else {
      uint64_t v20 = 0;
    }
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v19 = 0;
  }
  if (*(char *)(v20 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v20 + 4160), *(void *)(v20 + 4168));
  }
  else {
    std::string v28 = *(std::string *)(v20 + 4160);
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v16 + 32))(v16, &v28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v21 = *(void *)(a1 + 184);
  if (v21)
  {
    memset(&v28, 0, sizeof(v28));
    uint64_t v22 = *(void *)(a1 + 176);
    uint64_t v23 = *(std::__shared_weak_count **)(v22 + 16);
    if (v23)
    {
      uint64_t v24 = std::__shared_weak_count::lock(v23);
      if (v24) {
        uint64_t v25 = *(void *)(v22 + 8);
      }
      else {
        uint64_t v25 = 0;
      }
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v24 = 0;
    }
    if (*(char *)(v25 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(v25 + 4160), *(void *)(v25 + 4168));
    }
    else {
      std::string v27 = *(std::string *)(v25 + 4160);
    }
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v29, a8);
    (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t, uint64_t, uint64_t, std::string *, uint64_t, uint64_t, void *))(*(void *)v21 + 24))(v21, &v27, a2, a3, a4, a5, &v28, a6, a7, v29);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v29);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  if (*(unsigned char *)(a1 + 404))
  {
    if (!sImsDispatchQueue) {
      sImsDispatchQueue = (uint64_t)dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    }
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v28 = *(std::string *)a4;
    }
    operator new();
  }
}

void sub_1C51EA5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
}

void SipLazuliManager::handleOutgoingMessageSuccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7)
{
  uint64_t v13 = (void *)(a1 + 32);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(void *, uint64_t))(*v13 + 16))(v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Message send success conversationId ", 36);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 32))(v14, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" ctTransactionId ", 17);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 32))(v14, a5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" isEmpty ", 9);
  *(unsigned char *)(v14 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" allChunksAcked ", 16);
  *(unsigned char *)(v14 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" on stack ", 10);
  *(unsigned char *)(v14 + 17) = 0;
  uint64_t v15 = v13[18];
  uint64_t v16 = *(std::__shared_weak_count **)(v15 + 16);
  if (v16)
  {
    uint64_t v17 = std::__shared_weak_count::lock(v16);
    if (v17) {
      uint64_t v18 = *(void *)(v15 + 8);
    }
    else {
      uint64_t v18 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v17 = 0;
  }
  if (*(char *)(v18 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 4160), *(void *)(v18 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v18 + 4160);
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 32))(v14, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v19 = *(void *)(a1 + 184);
  if (v19)
  {
    uint64_t v20 = *(void *)(a1 + 176);
    uint64_t v21 = *(std::__shared_weak_count **)(v20 + 16);
    if (v21)
    {
      uint64_t v22 = std::__shared_weak_count::lock(v21);
      if (v22) {
        uint64_t v23 = *(void *)(v20 + 8);
      }
      else {
        uint64_t v23 = 0;
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v22 = 0;
    }
    if (*(char *)(v23 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v23 + 4160), *(void *)(v23 + 4168));
    }
    else {
      std::string __p = *(std::string *)(v23 + 4160);
    }
    (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 40))(v19, &__p, a4, a3, a5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  if ((a6 & 1) == 0 && *(unsigned char *)(a1 + 404) && a7)
  {
    if (!sImsDispatchQueue) {
      sImsDispatchQueue = (uint64_t)dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    }
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __p = *(std::string *)a3;
    }
    operator new();
  }
}

void sub_1C51EAAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void SipLazuliManager::handleOutgoingMessageError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  memset(&v20, 0, sizeof(v20));
  if (*(char *)(a5 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(a5 + 48), *(void *)(a5 + 56));
  }
  else {
    std::string v20 = *(std::string *)(a5 + 48);
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(a1 + 32, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Message send failed conversationId ", 35);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" ctTransactionId ", 17);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 32))(v9, &v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" on stack ", 10);
  *(unsigned char *)(v9 + 17) = 0;
  uint64_t v10 = *(void *)(a1 + 176);
  uint64_t v11 = *(std::__shared_weak_count **)(v10 + 16);
  if (v11)
  {
    int v12 = std::__shared_weak_count::lock(v11);
    if (v12) {
      uint64_t v13 = *(void *)(v10 + 8);
    }
    else {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
    int v12 = 0;
  }
  if (*(char *)(v13 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v13 + 4160), *(void *)(v13 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v13 + 4160);
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 32))(v9, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v14 = *(void *)(a1 + 184);
  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 176);
    uint64_t v16 = *(std::__shared_weak_count **)(v15 + 16);
    if (v16)
    {
      uint64_t v17 = std::__shared_weak_count::lock(v16);
      if (v17) {
        uint64_t v18 = *(void *)(v15 + 8);
      }
      else {
        uint64_t v18 = 0;
      }
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v17 = 0;
    }
    if (*(char *)(v18 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 4160), *(void *)(v18 + 4168));
    }
    else {
      std::string __p = *(std::string *)(v18 + 4160);
    }
    (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t, uint64_t, void))(*(void *)v14 + 32))(v14, &__p, a4, a3, a5, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  if (*(unsigned char *)(a1 + 404))
  {
    if (!sImsDispatchQueue) {
      sImsDispatchQueue = (uint64_t)dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    }
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __p = *(std::string *)a3;
    }
    operator new();
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_1C51EAF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipLazuliManager::queueForSend(SipLazuliManager *a1, std::string::size_type a2, int a3, uint64_t a4)
{
  uint64_t v8 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((void *)(a2 + 32), "Call-ID")+ 5);
  memset(&v18, 0, sizeof(v18));
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &v18);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)a1 + 19);
  if (!v9 || (std::string::size_type v10 = *((void *)a1 + 18), (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v12 = v11;
  uint64_t v13 = (std::string *)operator new(0xA8uLL);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B34F8;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v20 = *(std::string *)a4;
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v19, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string v19 = v18;
  }
  v13[1].__r_.__value_.__r.__words[0] = v10;
  v13[1].__r_.__value_.__l.__size_ = (std::string::size_type)v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  LODWORD(v13[1].__r_.__value_.__r.__words[2]) = a3;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(v13 + 2, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  }
  else {
    void v13[2] = v20;
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(v13 + 3, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    v13[3] = v19;
  }
  HIDWORD(v13[5].__r_.__value_.__r.__words[0]) = 0;
  v13[4].__r_.__value_.__l.__size_ = 0;
  v13[4].__r_.__value_.__r.__words[2] = 0;
  v13[4].__r_.__value_.__r.__words[0] = a2;
  v13[5].__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "com.apple.ipTelephony.rcs");
  ImsPowerAssertion::ImsPowerAssertion((uint64_t)&v13[5].__r_.__value_.__l.__size_, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v13[6].__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  uint64_t v14 = operator new(0x20uLL);
  uint64_t v15 = *((void *)a1 + 4);
  v14[2] = v13 + 1;
  v14[3] = v13;
  uint64_t v16 = *((void *)a1 + 25);
  void *v14 = v16;
  v14[1] = (char *)a1 + 200;
  *(void *)(v16 + 8) = v14;
  *((void *)a1 + 25) = v14;
  ++*((void *)a1 + 27);
  uint64_t v17 = (*(uint64_t (**)(void *))(v15 + 64))((void *)a1 + 4);
  (*(void (**)(void *, uint64_t))(*((void *)a1 + 4) + 16))((void *)a1 + 4, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"queued message for send", 23);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  SipLazuliManager::processSendQueue(a1);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C51EB288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (*(char *)(v34 + 71) < 0) {
    operator delete(*v36);
  }
  uint64_t v38 = *(std::__shared_weak_count **)(v34 + 32);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v34);
  operator delete(v39);
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void SipLazuliManager::processSendQueue(SipLazuliManager *this)
{
  if (!*((void *)this + 40) && !*((void *)this + 42))
  {
    uint64_t v2 = (char *)this + 32;
    uint64_t v3 = *((void *)this + 27);
    uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))((char *)this + 32, v4);
    uint64_t v5 = *(void **)(v4 + 8);
    if (v3)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"processing send queue", 21);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      uint64_t v6 = *((void *)this + 26);
      uint64_t v8 = *(void *)(v6 + 16);
      uint64_t v7 = *(void *)(v6 + 24);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 41);
      *((void *)this + 40) = v8;
      *((void *)this + 41) = v7;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      std::string::size_type v10 = (uint64_t *)*((void *)this + 26);
      uint64_t v11 = *v10;
      *(void *)(v11 + 8) = v10[1];
      *(void *)v10[1] = v11;
      --*((void *)this + 27);
      int v12 = (std::__shared_weak_count *)v10[3];
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      operator delete(v10);
      uint64_t v13 = *((void *)this + 22);
      uint64_t v14 = *(std::__shared_weak_count **)(v13 + 16);
      if (v14)
      {
        uint64_t v14 = std::__shared_weak_count::lock(v14);
        uint64_t v15 = v14;
        if (v14) {
          uint64_t v14 = *(std::__shared_weak_count **)(v13 + 8);
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
      BOOL isRegistrationLimitedAccess = SipStack::isRegistrationLimitedAccess((SipStack *)v14);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (isRegistrationLimitedAccess)
      {
        uint64_t v17 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
        (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Dropping message in Limited Access mode", 39);
        *(unsigned char *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v17 + 17) = 0;
        long long v30 = 0u;
        memset(v31, 0, sizeof(v31));
        v29[0] = &unk_1F20B2680;
        v29[1] = &SipResultDomain::_domain;
        void v29[2] = 503;
        std::string::operator=((std::string *)&v31[1], (const std::string *)(*((void *)this + 40) + 48));
        uint64_t v18 = *((void *)this + 40);
        uint64_t v19 = *(unsigned int *)(v18 + 16);
        long long v26 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        v24[0] = &unk_1F20B2680;
        v24[1] = &SipResultDomain::_domain;
        int v25 = 503;
        SipLazuliManager::generateError(this, v19, v18 + 24, (uint64_t)v24);
        ImsResult::~ImsResult((ImsResult *)v24);
        ImsResult::~ImsResult((ImsResult *)v29);
      }
      else
      {
        std::string v20 = (ImsPowerAssertion *)(*((void *)this + 40) + 104);
        uint64_t v21 = SipUserAgent::config(*((SipUserAgent **)this + 22));
        int v22 = SipTimers::timerValue((SipTimers *)(v21 + 512), (const SipTimer *)&SipTimers::kTimerF, 0);
        ImsPowerAssertion::initialize(v20, (double)(v22 + 30), 0, (uint64_t)v23);
        ImsResult::~ImsResult((ImsResult *)v23);
        SipLazuliManager::OutgoingPager::send(*((std::chrono::steady_clock::time_point **)this + 40));
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"send queue is empty", 19);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
    }
  }
}

void sub_1C51EB708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult((ImsResult *)(v11 - 120));
  _Unwind_Resume(a1);
}

void SipLazuliManager::sendPager(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(void *, uint64_t))(*v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"SipLazuliManager::sendPager", 27);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = v1[18];
  std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v3 + 16));
  ims::AccessNetwork::isWifi((ims::AccessNetwork *)(*(void *)(v3 + 8) + 3160));
  SipMessageEncodingMap::createRequestFromTemplate();
}

void sub_1C51EC2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, void *a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v30, a18);
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void std::list<SipLazuliManager::DeferredMessage>::pop_front(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)v2;
  *(void *)(v3 + 8) = *((void *)v2 + 1);
  **((void **)v2 + 1) = v3;
  *(void *)(a1 + 16) = v1 - 1;
  SipUri::~SipUri((SipUri *)(v2 + 336));
  LazuliSendParams::~LazuliSendParams((void **)v2 + 2);
  operator delete(v2);
}

void SipLazuliManager::OutgoingMsrp::~OutgoingMsrp(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void SipLazuliManager::handleAuthChallengeResponse(SipLazuliManager *this, const SipAuthInfo *a2)
{
  uint64_t v3 = (SipRequest **)*((void *)this + 40);
  if (v3 && *((unsigned char *)v3 + 96))
  {
    SipAuthClient::addAuthorizationToRequest(*(SipAuthClient **)(*((void *)*v3 + 22) + 280), v3[9], 1, (uint64_t)v6);
    ImsResult::~ImsResult((ImsResult *)v6);
    SipLazuliManager::OutgoingPager::send((std::chrono::steady_clock::time_point *)v3);
  }
  else
  {
    uint64_t v4 = (char *)this + 32;
    uint64_t v5 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((void *)this + 4) + 56))((char *)this + 32, a2);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))((char *)this + 32, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"received unexpected auth response.  Ignoring it, but checking queue.", 68);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    SipLazuliManager::processSendQueue(this);
  }
}

void non-virtual thunk to'SipLazuliManager::handleAuthChallengeResponse(SipLazuliManager *this, const SipAuthInfo *a2)
{
}

void SipLazuliManager::handleAuthChallengeTimeout(SipLazuliManager *this, const SipAuthInfo *a2)
{
  uint64_t v3 = *((void *)this + 40);
  if (v3 && *(unsigned char *)(v3 + 96))
  {
    uint64_t v4 = (char *)this + 32;
    uint64_t v5 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((void *)this + 4) + 56))((char *)this + 32, a2);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))((char *)this + 32, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"auth challenge timed out.  Failing current message.", 51);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    v8[2] = 401;
    long long v9 = 0u;
    memset(v10, 0, sizeof(v10));
    v8[0] = &unk_1F20B2680;
    v8[1] = &SipResultDomain::_domain;
    std::string::operator=((std::string *)((char *)v10 + 8), (const std::string *)(*((void *)this + 40) + 48));
    SipLazuliManager::generateError(this, *(unsigned int *)(*((void *)this + 40) + 16), *((void *)this + 40) + 24, (uint64_t)v8);
    SipLazuliManager::processSendQueue(this);
    ImsResult::~ImsResult((ImsResult *)v8);
  }
  else
  {
    uint64_t v6 = (char *)this + 32;
    uint64_t v7 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((void *)this + 4) + 56))((char *)this + 32, a2);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))((char *)this + 32, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"received unexpected auth challenge timeout.  Ignoring it, but checking queue.", 77);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    SipLazuliManager::processSendQueue(this);
  }
}

void sub_1C51EC8A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipLazuliManager::handleAuthChallengeTimeout(SipLazuliManager *this, const SipAuthInfo *a2)
{
}

uint64_t SipLazuliManager::handleResponse(int8x8_t *a1, uint64_t a2, void *a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  int8x8_t v3 = a1[40];
  if (!*(void *)&v3) {
    return 1;
  }
  if (*a3 != *(void *)(*(void *)&v3 + 80)) {
    return 1;
  }
  int v5 = *(_DWORD *)(a2 + 88);
  if ((v5 - 100) < 0x64) {
    return 1;
  }
  if (v5 == 401)
  {
    unsigned int v7 = *(_DWORD *)(*(void *)&v3 + 100);
    if (v7 <= 1)
    {
      *(unsigned char *)(*(void *)&v3 + 96) = 1;
      uint64_t v8 = *(std::__shared_weak_count **)(*(void *)&v3 + 88);
      *(void *)(*(void *)&v3 + 80) = 0;
      *(void *)(*(void *)&v3 + 88) = 0;
      if (v8)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        unsigned int v7 = *(_DWORD *)(*(void *)&v3 + 100);
      }
      *(_DWORD *)(*(void *)&v3 + 100) = v7 + 1;
      if ((SipAuthClient::handleUnauthorizedResponse(*(SipAuthClient **)(*(void *)&a1[22] + 280), (const SipResponse *)a2, (SipAuthChallengeSource *)&a1[3]) & 1) == 0)
      {
        long long v60 = 0u;
        memset(&v61, 0, sizeof(v61));
        *(_OWORD *)std::string __p = 0u;
        long long v59 = 0u;
        SipResultDomain::makeResult((_DWORD *)a2, (uint64_t)__p);
        std::string::operator=(&v61, (const std::string *)(*(void *)&a1[40] + 48));
        int8x8_t v9 = a1[40];
        uint64_t v10 = *(unsigned int *)(*(void *)&v9 + 16);
        SipResultDomain::makeResult((_DWORD *)a2, (uint64_t)&v55);
        SipLazuliManager::generateError(a1, v10, *(void *)&v9 + 24, (uint64_t)&v55);
        ImsResult::~ImsResult((ImsResult *)&v55);
        SipLazuliManager::processSendQueue((SipLazuliManager *)a1);
        ImsResult::~ImsResult((ImsResult *)__p);
      }
      return 1;
    }
  }
  uint64_t v11 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a2 + 32), "Call-ID")+ 5);
  memset(&__str, 0, sizeof(__str));
  (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 40))(v11, &__str);
  int v12 = (char *)SipMessage::header<SipToHeader>(*(void *)(*(void *)&a1[40] + 72));
  if (v12 && (uint64_t v13 = (uint64_t)(v12 + 104), SipUri::isValidUri((SipUri *)(v12 + 104))))
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v59 = 0;
    SipUri::asString(v13, __p);
    uint64_t v14 = (char *)&v55;
    std::string::basic_string[abi:ne180100]<0>(&v55, "botplatform");
    uint64_t v15 = BYTE7(v59);
    char v16 = BYTE7(v59);
    if ((SBYTE7(v59) & 0x80u) == 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
    int v18 = SHIBYTE(v57);
    uint64_t v19 = v55;
    if (v57 >= 0)
    {
      int64_t v20 = HIBYTE(v57);
    }
    else
    {
      uint64_t v14 = v55;
      int64_t v20 = v56;
    }
    if (v20)
    {
      if (SBYTE7(v59) < 0) {
        uint64_t v15 = (uint64_t)__p[1];
      }
      uint64_t v21 = (char *)v17 + v15;
      if (v15 >= v20)
      {
        long long v52 = v17;
        uint64_t v53 = v55;
        int v24 = *v14;
        int v25 = v17;
        do
        {
          uint64_t v26 = v15 - v20;
          if (v26 == -1) {
            break;
          }
          long long v27 = (char *)memchr(v25, v24, v26 + 1);
          if (!v27) {
            break;
          }
          int v22 = v27;
          if (!memcmp(v27, v14, v20)) {
            goto LABEL_31;
          }
          int v25 = (void **)(v22 + 1);
          uint64_t v15 = v21 - (v22 + 1);
        }
        while (v15 >= v20);
        int v22 = v21;
LABEL_31:
        uint64_t v17 = v52;
        uint64_t v19 = v53;
      }
      else
      {
        int v22 = (char *)v17 + v15;
      }
      BOOL v23 = v22 != v21 && v22 - (char *)v17 != -1;
    }
    else
    {
      BOOL v23 = 1;
    }
    if (v18 < 0)
    {
      operator delete(v19);
      char v16 = BYTE7(v59);
    }
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v23 = 0;
  }
  uint64_t v29 = *(unsigned int *)(a2 + 88);
  if (v29 != 503) {
    goto LABEL_62;
  }
  if (!*(void *)&a1[40])
  {
    uint64_t v39 = (*(uint64_t (**)(int8x8_t *))(*(void *)&a1[4] + 56))(a1 + 4);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)&a1[4] + 16))(a1 + 4, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"received unexpected service unavailable. Ignoring it.", 53);
    *(unsigned char *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v39 + 17) = 0;
LABEL_61:
    uint64_t v29 = *(unsigned int *)(a2 + 88);
LABEL_62:
    SipLazuliManager::logSendReceiveEvent((uint64_t)a1, 1, v29, *(void *)(*(void *)&a1[40] + 136), v23);
    unsigned int v40 = *(_DWORD *)(a2 + 88);
    if (v40 - 200 > 0x63)
    {
      if (v40 >= 0x12C)
      {
        long long v60 = 0u;
        memset(&v61, 0, sizeof(v61));
        *(_OWORD *)std::string __p = 0u;
        long long v59 = 0u;
        SipResultDomain::makeResult((_DWORD *)a2, (uint64_t)__p);
        std::string::operator=(&v61, &__str);
        SipLazuliManager::generateError(a1, *(unsigned int *)(*(void *)&a1[40] + 16), *(void *)&a1[40] + 24, (uint64_t)__p);
        ImsResult::~ImsResult((ImsResult *)__p);
      }
    }
    else
    {
      int8x8_t v41 = a1[23];
      if (v41)
      {
        int8x8_t v42 = a1[40];
        int8x8_t v43 = a1[22];
        uint64_t v44 = *(std::__shared_weak_count **)(*(void *)&v43 + 16);
        if (v44)
        {
          uint64_t v45 = std::__shared_weak_count::lock(v44);
          if (v45) {
            uint64_t v46 = *(void *)(*(void *)&v43 + 8);
          }
          else {
            uint64_t v46 = 0;
          }
        }
        else
        {
          uint64_t v46 = 0;
          uint64_t v45 = 0;
        }
        if (*(char *)(v46 + 4183) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v46 + 4160), *(void *)(v46 + 4168));
        }
        else
        {
          uint64_t v47 = v46 + 4160;
          *(_OWORD *)std::string __p = *(_OWORD *)v47;
          *(void *)&long long v59 = *(void *)(v47 + 16);
        }
        (*(void (**)(int8x8_t, void **, void, uint64_t, std::string *))(**(void **)&v41 + 40))(v41, __p, *(unsigned int *)(*(void *)&a1[40] + 16), *(void *)&v42 + 24, &__str);
        if (SBYTE7(v59) < 0) {
          operator delete(__p[0]);
        }
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
      }
      uint64_t v48 = (std::__shared_weak_count *)a1[41];
      a1[40] = 0;
      a1[41] = 0;
      if (v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      }
    }
    SipLazuliManager::processSendQueue((SipLazuliManager *)a1);
    goto LABEL_81;
  }
  uint64_t v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a2 + 32), "Retry-After");
  if (!v30) {
    goto LABEL_48;
  }
  uint64_t v31 = *((void *)v30 + 5);
  if (!v31) {
    goto LABEL_48;
  }
  long long v55 = 0;
  int64_t v56 = 0;
  uint64_t v57 = 0;
  (*(void (**)(uint64_t, char **))(*(void *)v31 + 40))(v31, &v55);
  if (SHIBYTE(v57) < 0)
  {
    char v50 = v55;
    if (atoi(v55))
    {
      operator delete(v50);
      goto LABEL_48;
    }
    goto LABEL_86;
  }
  if (!atoi((const char *)&v55))
  {
LABEL_86:
    uint64_t v51 = (*(uint64_t (**)(int8x8_t *))(*(void *)&a1[4] + 56))(a1 + 4);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)&a1[4] + 16))(a1 + 4, v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v51 + 8), (uint64_t)"received zero or negative Retry-After. Ignoring it.", 51);
    *(unsigned char *)(v51 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v51 + 17) = 0;
    if (SHIBYTE(v57) < 0) {
      operator delete(v55);
    }
    goto LABEL_61;
  }
LABEL_48:
  int8x8_t v33 = a1[18];
  uint64_t v32 = (std::__shared_weak_count *)a1[19];
  if (v32)
  {
    atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v34 = (*(uint64_t (**)(int8x8_t *))(*(void *)&a1[4] + 64))(a1 + 4);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)&a1[4] + 16))(a1 + 4, v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"handleServiceUnavailable. Retrying MESSAGE again after ", 55);
  *(unsigned char *)(v34 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v34 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)" seconds.", 9);
  *(unsigned char *)(v34 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v34 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v55, "Pager503RetryAfterTimer");
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)&v59 + 1) = 0;
  std::string v35 = operator new(0x20uLL);
  void *v35 = &unk_1F20B3548;
  v35[1] = a1;
  v35[2] = v33;
  v35[3] = v32;
  *((void *)&v59 + 1) = v35;
  SipTimerContainer::startTimer(a1 + 62, (uint64_t)&v55);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](__p);
  if (SHIBYTE(v57) < 0) {
    operator delete(v55);
  }
  ImsPowerAssertion::deinitialize(*(void *)&a1[40] + 104);
  int8x8_t v37 = a1[40];
  int8x8_t v36 = a1[41];
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v36 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v38 = (std::__shared_weak_count *)a1[43];
  a1[42] = v37;
  a1[43] = v36;
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v32)
  {
    std::__shared_weak_count::__release_weak(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_81:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C51ED0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'SipLazuliManager::handleResponse(uint64_t a1, uint64_t a2, void *a3)
{
  return 1;
}

void SipLazuliManager::handleTransactionError(void *a1, const std::string *a2, uint64_t a3)
{
  int v5 = *(void **)a3;
  if (*(void *)a3
  {
    unsigned int v7 = *(std::__shared_weak_count **)(a3 + 8);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t v8 = a1[40];
  if (v8 && v5 == *(void **)(v8 + 80))
  {
    memset(&v10, 0, sizeof(v10));
    memset(v9, 0, sizeof(v9));
    ImsResult::ImsResult((ImsResult *)v9, a2);
    std::string::operator=(&v10, (const std::string *)(a1[40] + 48));
    SipLazuliManager::generateError(a1, *(unsigned int *)(a1[40] + 16), a1[40] + 24, (uint64_t)v9);
    ImsResult::~ImsResult((ImsResult *)v9);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C51ED324(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipLazuliManager::handleTransactionError(uint64_t a1, const std::string *a2, uint64_t a3)
{
}

void SipLazuliManager::transactionTerminated(SipLazuliManager *a1, uint64_t a2)
{
  int8x8_t v3 = *(void **)a2;
  if (*(void *)a2
  {
    int v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v5 = 0;
  }
  uint64_t v6 = *((void *)a1 + 40);
  if (v6 && v3 == *(void **)(v6 + 80))
  {
    unsigned int v7 = (std::__shared_weak_count *)*((void *)a1 + 41);
    *((void *)a1 + 40) = 0;
    *((void *)a1 + 41) = 0;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    SipLazuliManager::processSendQueue(a1);
  }
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C51ED430(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipLazuliManager::transactionTerminated(uint64_t a1, uint64_t a2)
{
}

void ImsUuid::~ImsUuid(void **this)
{
  *this = &unk_1F20B3708;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20B3708;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

SipHeader *SipMessage::header<SipAcceptContactHeader>(SipMessage *a1, int a2)
{
  double result = SipMessage::headerWithName(a1, "Accept-Contact", a2);
  if (result)
  {
  }
  return result;
}

void SipParameterMap::~SipParameterMap(SipParameterMap *this)
{
  *(void *)this = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
  JUMPOUT(0x1C878E320);
}

void SipLazuliManager::sendMsrp(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v12 = (void *)(a1 + 32);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(void *, uint64_t))(*v12 + 16))(v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"SipLazuliManager::sendMsrp", 26);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v12 + 76, a2);
  if (v14)
  {
    uint64_t v16 = *((void *)v14 + 5);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v14 + 6);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v16)
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "");
      MessageSession::sendMessageBlob(v16, a3, (const std::string *)a4, a5, a6, (uint64_t)v21);
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v17 = (*(uint64_t (**)(void *))(*v12 + 64))(v12);
  (*(void (**)(void *, uint64_t))(*v12 + 16))(v12, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"conversation not found, queueing: ", 34);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v17 + 32))(v17, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  int v18 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 224), (void **)a2, (long long **)&v22);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v22 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v23 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  int v25 = a6;
  uint64_t v19 = (char *)operator new(0x60uLL);
  *(std::string *)(v19 + 16) = v22;
  memset(&v22, 0, sizeof(v22));
  *(std::string *)(v19 + 40) = v23;
  memset(&v23, 0, sizeof(v23));
  *(std::string *)(v19 + 64) = __p;
  memset(&__p, 0, sizeof(__p));
  *((_DWORD *)v19 + 22) = a6;
  *((void *)v19 + 1) = v18 + 7;
  uint64_t v20 = v18[7];
  *(void *)uint64_t v19 = v20;
  *(void *)(v20 + 8) = v19;
  v18[7] = (uint64_t)v19;
  ++v18[9];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1C51ED908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipLazuliManager::send(SipLazuliManager *this, const LazuliSendParams *a2, const SipUri *a3)
{
  uint64_t v5 = *((unsigned int *)this + 49);
  *((_DWORD *)this + 49) = v5 + 1;
  v54[0] = 0;
  v54[1] = 0;
  uint64_t v55 = 0;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(v54, *((char **)a2 + 18), *((char **)a2 + 19), *((void *)a2 + 19) - *((void *)a2 + 18));
  BOOL v6 = 0;
  unsigned int v7 = (char **)((char *)a2 + 224);
  uint64_t v8 = *((unsigned __int8 *)a2 + 247);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)a2 + 29);
  }
  if (v8 > 9)
  {
    if (v8 != 10)
    {
      if (v8 != 12) {
        goto LABEL_36;
      }
      if (v9 >= 0) {
        uint64_t v17 = (char *)a2 + 224;
      }
      else {
        uint64_t v17 = *v7;
      }
      uint64_t v18 = *(void *)v17;
      uint64_t v19 = *((unsigned int *)v17 + 2);
      if (v18 != *(void *)"kMessageText" || v19 != *(unsigned int *)"Text") {
        goto LABEL_35;
      }
LABEL_27:
      BOOL v6 = *((void *)a2 + 27) > (unint64_t)*((unsigned int *)this + 100);
      goto LABEL_36;
    }
    if (v9 >= 0) {
      uint64_t v21 = (char *)a2 + 224;
    }
    else {
      uint64_t v21 = *v7;
    }
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *((unsigned __int16 *)v21 + 4);
    if (v22 != *(void *)"kComposing" || v23 != *(unsigned __int16 *)"ng") {
      goto LABEL_35;
    }
    int8x8_t v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 80, (unsigned __int8 *)a2 + 72);
    if (v43)
    {
      uint64_t v44 = *((void *)v43 + 5);
      uint64_t v45 = (std::__shared_weak_count *)*((void *)v43 + 6);
      if (v45)
      {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v44)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
LABEL_75:
          BOOL v6 = 1;
          goto LABEL_36;
        }
LABEL_77:
        uint64_t v47 = *((void *)this + 4);
        uint64_t v46 = (char *)this + 32;
        uint64_t v48 = (*(uint64_t (**)(char *))(v47 + 64))(v46);
        (*(void (**)(char *, uint64_t))(*(void *)v46 + 16))(v46, v48);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"Dropping composing imdn ", 24);
        *(unsigned char *)(v48 + 17) = 0;
        (*(void (**)(uint64_t, char *))(*(void *)v48 + 32))(v48, (char *)a2 + 24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)" on ", 4);
        *(unsigned char *)(v48 + 17) = 0;
        (*(void (**)(uint64_t, char *))(*(void *)v48 + 32))(v48, (char *)a2 + 72);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v48 + 17) = 0;
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
        goto LABEL_79;
      }
      if (v44) {
        goto LABEL_75;
      }
    }
    uint64_t v45 = 0;
    goto LABEL_77;
  }
  if (!v8) {
    goto LABEL_27;
  }
  if (v8 == 5)
  {
    if (v9 >= 0) {
      std::string v10 = (char *)a2 + 224;
    }
    else {
      std::string v10 = *v7;
    }
    int v11 = *(_DWORD *)v10;
    int v12 = v10[4];
    if (v11 != *(_DWORD *)"kImdn" || v12 != str_33_8[4])
    {
LABEL_35:
      BOOL v6 = 0;
      goto LABEL_36;
    }
    uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 80, (unsigned __int8 *)a2 + 72);
    if (v14)
    {
      uint64_t v16 = *((void *)v14 + 5);
      uint64_t v15 = (std::__shared_weak_count *)*((void *)v14 + 6);
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v6 = v16 != 0;
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    BOOL v6 = v16 != 0;
  }
LABEL_36:
  uint64_t v25 = *((unsigned __int8 *)a2 + 191);
  int v26 = (char)v25;
  if ((v25 & 0x80u) != 0) {
    uint64_t v25 = *((void *)a2 + 22);
  }
  if (v25 == 34)
  {
    long long v27 = v26 >= 0 ? (const LazuliSendParams *)((char *)a2 + 168) : (const LazuliSendParams *)*((void *)a2 + 21);
    if (!memcmp(v27, "application/vnd.gsma.rcsrevoke+xml", 0x22uLL))
    {
      uint64_t v28 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"Using pager for Revoke message", 30);
      *(unsigned char *)(v28 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      BOOL v6 = 0;
      *(unsigned char *)(v28 + 17) = 0;
    }
  }
  uint64_t v29 = (char *)this + 32;
  uint64_t v30 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v30);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"send trx ", 9);
  *(unsigned char *)(v30 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v30 + 32))(v30, (char *)a2 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)" recipient ", 11);
  *(unsigned char *)(v30 + 17) = 0;
  SipUri::asString((uint64_t)a3, __p);
  (*(void (**)(uint64_t, std::string *))(*(void *)v30 + 32))(v30, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)" conv ", 6);
  *(unsigned char *)(v30 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v30 + 32))(v30, (char *)a2 + 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)" original length ", 17);
  *(unsigned char *)(v30 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v30 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)" length ", 8);
  *(unsigned char *)(v30 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v30 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)" type ", 6);
  *(unsigned char *)(v30 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v30 + 32))(v30, (char *)a2 + 224);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)" session ", 9);
  *(unsigned char *)(v30 + 17) = 0;
  if (v6) {
    uint64_t v31 = "yes";
  }
  else {
    uint64_t v31 = "no";
  }
  if (v6) {
    uint64_t v32 = 3;
  }
  else {
    uint64_t v32 = 2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)v31, v32);
  *(unsigned char *)(v30 + 17) = 0;
  int8x8_t v33 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v30 + 17) = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (*((unsigned char *)this + 404))
  {
    IMSClientManager::instance(v33);
    IPTelephonyManager::getInstance((uint64_t *)__p);
    uint64_t v34 = *(void *)(__p[0].__r_.__value_.__r.__words[0] + 200);
    std::string v35 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v34 + 64, (void **)a2 + 9);
    int8x8_t v36 = (void **)(v34 + 72);
    if (__p[0].__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
    }
    if (v36 != v35)
    {
      uint64_t v37 = (*(uint64_t (**)(char *))(*(void *)v29 + 64))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*(void *)v29 + 16))((char *)this + 32, v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"deferring trx ", 14);
      *(unsigned char *)(v37 + 17) = 0;
      (*(void (**)(uint64_t, char *))(*(void *)v37 + 32))(v37, (char *)a2 + 24);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v37 + 17) = 0;
      LazuliSendParams::LazuliSendParams(__p, a2);
      SipUri::SipUri((SipUri *)v52, a3);
      LOBYTE(v53) = v6;
      HIDWORD(v53) = v5;
      uint64_t v38 = (char *)operator new(0x2F0uLL);
      *(void *)uint64_t v38 = 0;
      *((void *)v38 + 1) = 0;
      LazuliSendParams::LazuliSendParams((std::string *)(v38 + 16), (long long *)__p);
      SipUri::SipUri((SipUri *)(v38 + 336), (const SipUri *)v52);
      *((void *)v38 + 93) = v53;
      uint64_t v39 = *((void *)this + 34);
      *(void *)uint64_t v38 = v39;
      *((void *)v38 + 1) = (char *)this + 272;
      *(void *)(v39 + 8) = v38;
      *((void *)this + 34) = v38;
      ++*((void *)this + 36);
      SipUri::~SipUri((SipUri *)v52);
      LazuliSendParams::~LazuliSendParams((void **)&__p[0].__r_.__value_.__l.__data_);
      goto LABEL_80;
    }
  }
  if (v6)
  {
    if (*((unsigned char *)this + 404)) {
      BOOL v40 = *((void *)a2 + 27) > (unint64_t)*((unsigned int *)this + 100);
    }
    else {
      BOOL v40 = 0;
    }
    if (!sImsDispatchQueue) {
      sImsDispatchQueue = (uint64_t)dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    }
    LazuliSendParams::LazuliSendParams(__p, a2);
    v52[0] = v40;
    operator new();
  }
  uint64_t Body = SipMessageEncodingMap::createBody((SipMessageEncodingMap *)(*((void *)this + 22) + 288), (const std::string *)a2 + 7);
  if (!Body)
  {
    uint64_t v42 = (*(uint64_t (**)(char *))(*(void *)v29 + 56))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(void *)v29 + 16))(v29, v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"unknown content type ", 21);
    *(unsigned char *)(v42 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v42 + 32))(v42, (char *)a2 + 168);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v5 = 0;
    *(unsigned char *)(v42 + 17) = 0;
    goto LABEL_80;
  }
  if ((*(unsigned int (**)(uint64_t, void **, uint64_t))(*(void *)Body + 88))(Body, v54, *((void *)this + 22) + 288))
  {
    SipLazuliManager::sendPager((uint64_t)this);
  }
LABEL_79:
  uint64_t v5 = 0;
LABEL_80:
  if (SHIBYTE(v55) < 0) {
    operator delete(v54[0]);
  }
  return v5;
}

void sub_1C51EE3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 - 105) < 0) {
    operator delete(*(void **)(v16 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipLazuliManager::addGroupParticipant(SipLazuliManager *this, std::string *a2, const SipUri *a3)
{
  p_int data = (void **)&a2[3].__r_.__value_.__l.__data_;
  BOOL v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 80, (unsigned __int8 *)&a2[3]);
  if (v6)
  {
    uint64_t v8 = *((void *)v6 + 5);
    unsigned int v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8)
    {
      uint64_t v19 = 0;
      memset(v18, 0, sizeof(v18));
      SipUri::SipUri((SipUri *)v18);
      SipUri::fromString((uint64_t)v18, a2 + 8);
      uint64_t v10 = *((void *)this + 4);
      int v9 = (char *)this + 32;
      uint64_t v11 = (*(uint64_t (**)(char *))(v10 + 64))(v9);
      (*(void (**)(char *, uint64_t))(*(void *)v9 + 16))(v9, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"refer/add ", 10);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(_OWORD *, uint64_t))(*(void *)&v18[0] + 40))(v18, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" to group ", 10);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, a2 + 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" trx ", 5);
      *(unsigned char *)(v11 + 17) = 0;
      int v12 = (unsigned __int8 *)&a2[1];
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v11 + 32))(v11, v12);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v11 + 17) = 0;
      MessageSession::addParticipant(v8, v12, (uint64_t)v18);
      SipUri::~SipUri((SipUri *)v18);
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t v13 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"conversation for refer not found, queueing: ", 44);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v13 + 32))(v13, p_data);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  *(void *)&v18[0] = p_data;
  uint64_t v14 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 31, p_data, (long long **)v18);
  LODWORD(v18[0]) = 0;
  uint64_t v15 = std::__list_imp<SipLazuliManager::Participant>::__create_node[abi:ne180100]<std::string const&,std::string const&,std::string const&,SipLazuliManager::Participant::Action>((uint64_t)&a2[1], (uint64_t)&a2[2], (uint64_t)&a2[8], v18);
  uint64_t v16 = v14[7];
  v14 += 7;
  *(void *)uint64_t v15 = v16;
  *((void *)v15 + 1) = v14;
  *(void *)(v16 + 8) = v15;
  uint64_t *v14 = (uint64_t)v15;
  ++v14[2];
  IMSClientManager::instance((IMSClientManager *)v15);
  IPTelephonyManager::getInstance((uint64_t *)v18);
  IMSCallManager::initializeMOLazuliSession(*(IMSCallManager **)(*(void *)&v18[0] + 200), (const LazuliSendParams *)a2, 0, 0);
  if (*((void *)&v18[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18[0] + 1));
  }
LABEL_9:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return 0;
}

void sub_1C51EE848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipLazuliManager::removeGroupParticipant(SipLazuliManager *this, std::string *a2, const SipUri *a3)
{
  p_int data = (void **)&a2[3].__r_.__value_.__l.__data_;
  BOOL v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 80, (unsigned __int8 *)&a2[3]);
  if (v6)
  {
    uint64_t v8 = *((void *)v6 + 5);
    unsigned int v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8)
    {
      uint64_t v19 = 0;
      memset(v18, 0, sizeof(v18));
      SipUri::SipUri((SipUri *)v18);
      SipUri::fromString((uint64_t)v18, a2 + 8);
      uint64_t v10 = *((void *)this + 4);
      int v9 = (char *)this + 32;
      uint64_t v11 = (*(uint64_t (**)(char *))(v10 + 64))(v9);
      (*(void (**)(char *, uint64_t))(*(void *)v9 + 16))(v9, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"refer/remove ", 13);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(_OWORD *, uint64_t))(*(void *)&v18[0] + 40))(v18, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" to group ", 10);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, a2 + 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" trx ", 5);
      *(unsigned char *)(v11 + 17) = 0;
      int v12 = (unsigned __int8 *)&a2[1];
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v11 + 32))(v11, v12);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v11 + 17) = 0;
      MessageSession::removeParticipant(v8, v12, (uint64_t)v18);
      SipUri::~SipUri((SipUri *)v18);
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t v13 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"conversation for refer not found, queueing: ", 44);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v13 + 32))(v13, p_data);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  *(void *)&v18[0] = p_data;
  uint64_t v14 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 31, p_data, (long long **)v18);
  LODWORD(v18[0]) = 1;
  uint64_t v15 = std::__list_imp<SipLazuliManager::Participant>::__create_node[abi:ne180100]<std::string const&,std::string const&,std::string const&,SipLazuliManager::Participant::Action>((uint64_t)&a2[1], (uint64_t)&a2[2], (uint64_t)&a2[8], v18);
  uint64_t v16 = v14[7];
  v14 += 7;
  *(void *)uint64_t v15 = v16;
  *((void *)v15 + 1) = v14;
  *(void *)(v16 + 8) = v15;
  uint64_t *v14 = (uint64_t)v15;
  ++v14[2];
  IMSClientManager::instance((IMSClientManager *)v15);
  IPTelephonyManager::getInstance((uint64_t *)v18);
  IMSCallManager::initializeMOLazuliSession(*(IMSCallManager **)(*(void *)&v18[0] + 200), (const LazuliSendParams *)a2, 0, 0);
  if (*((void *)&v18[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18[0] + 1));
  }
LABEL_9:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return 0;
}

void sub_1C51EEC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipLazuliManager::changeGroupInfo(SipLazuliManager *this, const LazuliSendParams *a2, const SipUri *a3)
{
  BOOL v6 = (unsigned __int8 *)a2 + 72;
  unsigned int v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 80, (unsigned __int8 *)a2 + 72);
  if (v7)
  {
    int v9 = (MessageSession *)*((void *)v7 + 5);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)v7 + 6);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v19, *((char **)a2 + 18), *((char **)a2 + 19), *((void *)a2 + 19) - *((void *)a2 + 18));
  if (v9 && MessageSession::isGroupMgmtViaMSRP(v9))
  {
    BOOL v10 = 1;
  }
  else
  {
    unint64_t v11 = HIBYTE(v21);
    if (v21 < 0) {
      unint64_t v11 = v20;
    }
    BOOL v10 = v11 > *((unsigned int *)this + 100);
  }
  uint64_t v12 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"change group info trx ", 22);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v12 + 32))(v12, (char *)a2 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" recipient ", 11);
  *(unsigned char *)(v12 + 17) = 0;
  SipUri::asString((uint64_t)a3, &__p);
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 32))(v12, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" conv ", 6);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v12 + 32))(v12, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" len ", 5);
  *(unsigned char *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v12 + 17) = 0;
  uint64_t v13 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v18 < 0)
  {
    operator delete(__p);
    if (v10) {
      goto LABEL_13;
    }
LABEL_17:
    uint64_t v14 = 0;
    goto LABEL_18;
  }
  if (!v10) {
    goto LABEL_17;
  }
LABEL_13:
  IMSClientManager::instance(v13);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  IMSCallManager::initializeMOLazuliSession(*((IMSCallManager **)__p + 25), a2, 0, 0);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v14 = *((unsigned int *)this + 49);
  *((_DWORD *)this + 49) = v14 + 1;
  SipLazuliManager::sendMsrp((uint64_t)this, v6, (uint64_t)&v19, (uint64_t)a2 + 168, (uint64_t)a2 + 24, v14);
LABEL_18:
  if (SHIBYTE(v21) < 0) {
    operator delete(v19);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v14;
}

void sub_1C51EEFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void SipLazuliManager::reportSpam(SipLazuliManager *this, const LazuliSpamReportParams *a2)
{
  uint64_t v4 = (char *)this + 32;
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"SipLazuliManager::reportSpam for ", 33);
  *(unsigned char *)(v5 + 17) = 0;
  if (*((unsigned char *)a2 + 504)) {
    BOOL v6 = "Chatbot";
  }
  else {
    BOOL v6 = "Contact";
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)v6, 7);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t v7 = (*(uint64_t (**)(char *))(*(void *)v4 + 64))(v4);
  (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"send trx: ", 10);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v7 + 32))(v7, (char *)a2 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", call-id: ", 11);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v7 + 32))(v7, (char *)a2 + 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", recipient: ", 13);
  *(unsigned char *)(v7 + 17) = 0;
  SipUri::asString((uint64_t)a2 + 512, &v11);
  (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 32))(v7, &v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", spam-reporting-uri: ", 22);
  *(unsigned char *)(v7 + 17) = 0;
  SipUri::asString((uint64_t)a2 + 96, __p);
  (*(void (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", conv: ", 8);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", content len: ", 15);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", spam type: ", 13);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v7 + 32))(v7, (char *)a2 + 952);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", free text len: ", 17);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = *((void *)this + 22);
  std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v8 + 16));
  ims::AccessNetwork::isWifi((ims::AccessNetwork *)(*(void *)(v8 + 8) + 3160));
  SipMessageEncodingMap::createRequestFromTemplate();
}

void sub_1C51F0248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43)
{
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v44, a25);
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(a1);
}

void SipLazuliManager::logPrefix(SipLazuliManager *this, ImsOutStream *a2)
{
  uint64_t v3 = *((void *)this + 22);
  if (v3
    && (uint64_t v5 = *(std::__shared_weak_count **)(v3 + 16)) != 0
    && (BOOL v6 = std::__shared_weak_count::lock(v5)) != 0
    && (uint64_t v7 = *(void *)(v3 + 8), std::__shared_weak_count::__release_shared[abi:ne180100](v6), v7))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"SipLazuliManager[", 17);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t v8 = *((void *)this + 22);
    int v9 = *(std::__shared_weak_count **)(v8 + 16);
    if (v9)
    {
      char v10 = std::__shared_weak_count::lock(v9);
      if (v10) {
        uint64_t v11 = *(void *)(v8 + 8);
      }
      else {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
      char v10 = 0;
    }
    if (*(char *)(v11 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 4160), *(void *)(v11 + 4168));
    }
    else {
      std::string __p = *(std::string *)(v11 + 4160);
    }
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 32))(a2, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"]: ", 3);
    *((unsigned char *)a2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"SipLazuliManager: ", 18);
    *((unsigned char *)a2 + 17) = 0;
  }
}

void sub_1C51F05C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipLazuliManager::logPrefix(SipLazuliManager *this, ImsOutStream *a2)
{
}

void SipLazuliManager::createMessageSession(uint64_t a1, uint64_t a2, void *a3, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a4, const std::string *a5)
{
  uint64_t v9 = a1 + 32;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"SipLazuliManager::createMessageSession for id: ", 47);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  std::string v109 = 0;
  int v110 = 0;
  std::allocate_shared[abi:ne180100]<MessageSession,std::allocator<MessageSession>,std::string const&,void>((const std::string *)(v9 + 32), &v109);
  unint64_t v11 = std::__string_hash<char>::operator()[abi:ne180100](v9 + 632, a2);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(v9 + 616);
  std::string::size_type v75 = a4;
  v76 = (unsigned __int8 *)a2;
  if (!v13)
  {
    unint64_t v16 = 0;
    goto LABEL_20;
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = v11;
    if (v11 >= v13) {
      unint64_t v16 = v11 % v13;
    }
  }
  else
  {
    unint64_t v16 = (v13 - 1) & v11;
  }
  uint64_t v17 = *(std::string::size_type **)(*(void *)(a1 + 640) + 8 * v16);
  if (v17)
  {
    std::string::size_type v18 = *v17;
    if (*v17)
    {
      while (1)
      {
        unint64_t v19 = *(void *)(v18 + 8);
        if (v19 == v12)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 672, (unsigned __int8 *)(v18 + 16), v76))
          {
            char v73 = v75;
            goto LABEL_79;
          }
        }
        else
        {
          if (v15 > 1)
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
          }
          else
          {
            v19 &= v13 - 1;
          }
          if (v19 != v16)
          {
LABEL_18:
            a2 = (uint64_t)v76;
            goto LABEL_20;
          }
        }
        std::string::size_type v18 = *(void *)v18;
        if (!v18) {
          goto LABEL_18;
        }
      }
    }
    a2 = (uint64_t)v76;
  }
LABEL_20:
  unint64_t v20 = operator new(0x38uLL);
  uint64_t v21 = (void *)(a1 + 656);
  v78[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  *(_OWORD *)&v78[0].__r_.__value_.__r.__words[1] = (unint64_t)(a1 + 656);
  void *v20 = 0;
  v20[1] = v12;
  uint64_t v22 = (std::string *)(v20 + 2);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v20[4] = *(void *)(a2 + 16);
  }
  v20[5] = 0;
  v20[6] = 0;
  v78[0].__r_.__value_.__s.__data_[16] = 1;
  float v23 = (float)(unint64_t)(*(void *)(a1 + 664) + 1);
  float v24 = *(float *)(a1 + 672);
  if (!v13 || (float)(v24 * (float)v13) < v23)
  {
    BOOL v25 = 1;
    if (v13 >= 3) {
      BOOL v25 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v13);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      int8x8_t prime = (int8x8_t)v27;
    }
    else {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v13 = *(void *)(a1 + 648);
    if (*(void *)&prime > v13) {
      goto LABEL_35;
    }
    if (*(void *)&prime < v13)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 664) / *(float *)(a1 + 672));
      if (v13 < 3 || (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (*(void *)&prime <= v35) {
        int8x8_t prime = (int8x8_t)v35;
      }
      if (*(void *)&prime >= v13)
      {
        unint64_t v13 = *(void *)(a1 + 648);
      }
      else
      {
        if (prime)
        {
LABEL_35:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v29 = operator new(8 * *(void *)&prime);
          uint64_t v30 = *(void **)(a1 + 640);
          *(void *)(a1 + 640) = v29;
          if (v30) {
            operator delete(v30);
          }
          uint64_t v31 = 0;
          *(int8x8_t *)(a1 + 648) = prime;
          do
            *(void *)(*(void *)(a1 + 640) + 8 * v31++) = 0;
          while (*(void *)&prime != v31);
          uint64_t v32 = (void *)*v21;
          if (*v21)
          {
            unint64_t v33 = v32[1];
            uint8x8_t v34 = (uint8x8_t)vcnt_s8(prime);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              if (v33 >= *(void *)&prime) {
                v33 %= *(void *)&prime;
              }
            }
            else
            {
              v33 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 640) + 8 * v33) = v21;
            uint64_t v38 = (void *)*v32;
            if (*v32)
            {
              do
              {
                unint64_t v39 = v38[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(void *)&prime) {
                    v39 %= *(void *)&prime;
                  }
                }
                else
                {
                  v39 &= *(void *)&prime - 1;
                }
                if (v39 != v33)
                {
                  uint64_t v40 = *(void *)(a1 + 640);
                  if (!*(void *)(v40 + 8 * v39))
                  {
                    *(void *)(v40 + 8 * v39) = v32;
                    goto LABEL_60;
                  }
                  void *v32 = *v38;
                  void *v38 = **(void **)(*(void *)(a1 + 640) + 8 * v39);
                  **(void **)(*(void *)(a1 + 640) + 8 * v39) = v38;
                  uint64_t v38 = v32;
                }
                unint64_t v39 = v33;
LABEL_60:
                uint64_t v32 = v38;
                uint64_t v38 = (void *)*v38;
                unint64_t v33 = v39;
              }
              while (v38);
            }
          }
          unint64_t v13 = (unint64_t)prime;
          goto LABEL_64;
        }
        int v74 = *(void **)(a1 + 640);
        *(void *)(a1 + 640) = 0;
        if (v74) {
          operator delete(v74);
        }
        unint64_t v13 = 0;
        *(void *)(a1 + 648) = 0;
      }
    }
LABEL_64:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13) {
        unint64_t v16 = v12 % v13;
      }
      else {
        unint64_t v16 = v12;
      }
    }
    else
    {
      unint64_t v16 = (v13 - 1) & v12;
    }
  }
  int8x8_t v41 = *(std::string::size_type **)(*(void *)(a1 + 640) + 8 * v16);
  std::string::size_type v18 = v78[0].__r_.__value_.__r.__words[0];
  if (v41)
  {
    *(void *)v78[0].__r_.__value_.__l.__data_ = *v41;
    char v73 = v75;
LABEL_77:
    *int8x8_t v41 = v18;
    goto LABEL_78;
  }
  *(void *)v78[0].__r_.__value_.__l.__data_ = *(void *)(a1 + 656);
  *(void *)(a1 + 656) = v18;
  *(void *)(*(void *)(a1 + 640) + 8 * v16) = v21;
  char v73 = v75;
  if (*(void *)v18)
  {
    unint64_t v42 = *(void *)(*(void *)v18 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v42 >= v13) {
        v42 %= v13;
      }
    }
    else
    {
      v42 &= v13 - 1;
    }
    int8x8_t v41 = (std::string::size_type *)(*(void *)(a1 + 640) + 8 * v42);
    goto LABEL_77;
  }
LABEL_78:
  v78[0].__r_.__value_.__r.__words[0] = 0;
  ++*(void *)(v9 + 632);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>>>>::reset[abi:ne180100]((uint64_t)v78);
LABEL_79:
  uint64_t v44 = v109;
  int8x8_t v43 = v110;
  if (v110) {
    atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v45 = *(std::__shared_weak_count **)(v18 + 48);
  *(void *)(v18 + 40) = v44;
  *(void *)(v18 + 48) = v43;
  if (v45)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    uint64_t v44 = v109;
  }
  uint64_t v46 = (std::__shared_weak_count *)a3[1];
  uint64_t v107 = *a3;
  int v108 = v46;
  uint64_t v47 = (void **)v76;
  if (v46) {
    atomic_fetch_add_explicit(&v46->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = (std::__shared_weak_count *)v73[1];
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v105 = *v73;
  int v106 = v48;
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v49 = *(const void **)(a1 + 440);
  v104[0] = &unk_1F20E38B0;
  v104[1] = v49;
  if (v49) {
    CFRetain(v49);
  }
  v104[0] = &unk_1F20B3050;
  MessageSession::initialize(v44, &v107, &v105, (uint64_t)v104, a5);
  ims::CFType::~CFType((ims::CFType *)v104);
  if (v106) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v106);
  }
  if (v108) {
    std::__shared_weak_count::__release_weak(v108);
  }
  SipLazuliManager::createPowerAssertion(a1, (long long *)v76, 0);
  char v50 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 224, (void **)v76);
  if ((void **)(a1 + 232) == v50)
  {
    uint64_t v55 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"no messages available to send for ", 34);
    *(unsigned char *)(v55 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v55 + 32))(v55, v76);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v55 + 17) = 0;
    int64_t v56 = (std::__shared_weak_count *)a3[1];
    if (v56)
    {
      uint64_t v57 = std::__shared_weak_count::lock(v56);
      if (v57)
      {
        __int16 v58 = v57;
        if (*a3 && *(unsigned char *)(*a3 + 146)) {
          MessageSession::sendEmptyMessage((MessageSession *)v109);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
    }
  }
  else
  {
    uint64_t v51 = v50;
    long long v52 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64);
    if (*(unsigned char *)(a1 + 404))
    {
      uint64_t v53 = v52(v9);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v53 + 8), (uint64_t)"sending queued large message on conversation ", 45);
      *(unsigned char *)(v53 + 17) = 0;
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v53 + 32))(v53, v76);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v53 + 17) = 0;
      *(_OWORD *)std::string __p = 0u;
      long long v80 = 0u;
      memset(v78, 0, sizeof(v78));
      int v54 = (char *)v51[8];
      if (v54[39] < 0) {
        std::string::__init_copy_ctor_external(v78, *((const std::string::value_type **)v54 + 2), *((void *)v54 + 3));
      }
      else {
        v78[0] = *(std::string *)(v54 + 16);
      }
      if (v54[63] < 0) {
        std::string::__init_copy_ctor_external(&v78[1], *((const std::string::value_type **)v54 + 5), *((void *)v54 + 6));
      }
      else {
        v78[1] = *(std::string *)(v54 + 40);
      }
      if (v54[87] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)v54 + 8), *((void *)v54 + 9));
      }
      else
      {
        *(_OWORD *)std::string __p = *((_OWORD *)v54 + 4);
        *(void *)&long long v80 = *((void *)v54 + 10);
      }
      DWORD2(v80) = *((_DWORD *)v54 + 22);
      int v63 = DWORD2(v80);
      size_t v64 = (MessageSession *)v109;
      std::string::basic_string[abi:ne180100]<0>(v103, "");
      MessageSession::sendMessageBlob((uint64_t)v64, (uint64_t)v78, &v78[1], (uint64_t)__p, v63, (uint64_t)v103);
    }
    uint64_t v59 = v52(v9);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v59 + 8), (uint64_t)"sending ", 8);
    *(unsigned char *)(v59 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v59 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v59 + 8), (uint64_t)" messages on conversation ", 26);
    *(unsigned char *)(v59 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v59 + 32))(v59, v76);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v59 + 64))(v59, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v59 + 17) = 0;
    long long v60 = (void **)v51[8];
    if (v60 != v51 + 7)
    {
      std::string v61 = (MessageSession *)v109;
      int v62 = *((_DWORD *)v60 + 22);
      std::string::basic_string[abi:ne180100]<0>(v102, "");
      MessageSession::sendMessageBlob((uint64_t)v61, (uint64_t)(v60 + 2), (const std::string *)(v60 + 5), (uint64_t)(v60 + 8), v62, (uint64_t)v102);
    }
    uint64_t v47 = (void **)v76;
    std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::__erase_unique<std::string>((void ***)(a1 + 224), (void **)v76);
  }
  uint64_t v65 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 248, v47);
  if ((void **)(a1 + 256) == v65)
  {
    uint64_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v72 + 8), (uint64_t)"no refers available for ", 24);
    *(unsigned char *)(v72 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v72 + 32))(v72, v47);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v72 + 17) = 0;
  }
  else
  {
    int v66 = v65 + 7;
    unint64_t v67 = (void **)v65[8];
    if (v67 != v65 + 7)
    {
      do
      {
        uint64_t v101 = 0;
        long long v99 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v80 = 0u;
        memset(v78, 0, sizeof(v78));
        SipUri::SipUri((SipUri *)v78);
        SipUri::fromString((uint64_t)v78, (std::string *)(v67 + 8));
        uint64_t v68 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v68 + 8), (uint64_t)"refer/", 6);
        *(unsigned char *)(v68 + 17) = 0;
        if (*((_DWORD *)v67 + 22)) {
          std::string::size_type v69 = "remove";
        }
        else {
          std::string::size_type v69 = "add";
        }
        if (*((_DWORD *)v67 + 22)) {
          uint64_t v70 = 6;
        }
        else {
          uint64_t v70 = 3;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v68 + 8), (uint64_t)v69, v70);
        *(unsigned char *)(v68 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v68 + 8), (uint64_t)" ", 1);
        *(unsigned char *)(v68 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(void *)v68 + 32))(v68, v67 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v68 + 8), (uint64_t)" to group ", 10);
        *(unsigned char *)(v68 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(void *)v68 + 32))(v68, v67 + 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v68 + 8), (uint64_t)" trx ", 5);
        *(unsigned char *)(v68 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(void *)v68 + 32))(v68, v67 + 2);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v68 + 17) = 0;
        int v71 = *((_DWORD *)v67 + 22);
        if (v71 == 1)
        {
          MessageSession::removeParticipant((uint64_t)v109, (unsigned __int8 *)v67 + 16, (uint64_t)v78);
        }
        else if (!v71)
        {
          MessageSession::addParticipant((uint64_t)v109, (unsigned __int8 *)v67 + 16, (uint64_t)v78);
        }
        SipUri::~SipUri((SipUri *)v78);
        unint64_t v67 = (void **)v67[1];
      }
      while (v67 != v66);
    }
    uint64_t v47 = (void **)v76;
    std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::__erase_unique<std::string>((void ***)(a1 + 248), (void **)v76);
  }
  SipLazuliManager::releasePowerAssertion(a1, v47);
  if (v110) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v110);
  }
}

void sub_1C51F14E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  unint64_t v27 = *(std::__shared_weak_count **)(v25 - 96);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(a1);
}

void SipLazuliManager::createPowerAssertion(uint64_t a1, long long *a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 16);
  if (v7 && (uint64_t v8 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v6 + 8);
    if (v10) {
      BOOL isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v10 + 3160));
    }
    else {
      BOOL isWifi = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  else
  {
    BOOL isWifi = 0;
  }
  memset(&__str, 0, sizeof(__str));
  SipLazuliManager::getPowerAssertionTag(a3, isWifi, &__str);
  p_str = &__str;
  unint64_t v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 680), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_str);
  AssertionCounter::initialize((atomic_uint *)v12[7], 15.0, !isWifi, (uint64_t)v14);
  ImsResult::~ImsResult((ImsResult *)v14);
  p_str = (std::string *)a2;
  unint64_t v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 704), (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&p_str);
  std::string::operator=((std::string *)(v13 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C51F1704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipLazuliManager::releasePowerAssertion(uint64_t a1, void **a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 704);
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 704, a2);
  if ((void **)(a1 + 712) != v4)
  {
    uint64_t v5 = (uint64_t *)v4;
    PowerAssertionLock::deinitialize((uint64_t **)(a1 + 680), (uint64_t)(v4 + 7));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v5);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

void SipLazuliManager::terminateMessageSession(uint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4)
{
  uint64_t v7 = (void *)(a1 + 640);
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 640), (unsigned __int8 *)a2);
  if (v8)
  {
    int v71 = v7;
    uint64_t v10 = *((void *)v8 + 5);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v72 = v10 != 0;
    if (v10)
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(a1 + 32);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(a1 + 32, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Terminating session ", 20);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 32))(v11, a2);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v11 + 17) = 0;
      MessageSession::terminate(v10, a3);
      unint64_t v12 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 664, a2);
      int8x8_t v13 = *(int8x8_t *)(a1 + 648);
      if (v13)
      {
        unint64_t v14 = v12;
        uint8x8_t v15 = (uint8x8_t)vcnt_s8(v13);
        v15.i16[0] = vaddlv_u8(v15);
        unint64_t v16 = v15.u32[0];
        if (v15.u32[0] > 1uLL)
        {
          unint64_t v17 = v12;
          if (v12 >= *(void *)&v13) {
            unint64_t v17 = v12 % *(void *)&v13;
          }
        }
        else
        {
          unint64_t v17 = (*(void *)&v13 - 1) & v12;
        }
        unint64_t v19 = *(unsigned __int8 ***)(*v71 + 8 * v17);
        if (v19)
        {
          for (std::string::size_type i = *v19; i; std::string::size_type i = *(unsigned __int8 **)i)
          {
            unint64_t v21 = *((void *)i + 1);
            if (v21 == v14)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 672, i + 16, (unsigned __int8 *)a2))
              {
                int8x8_t v60 = *(int8x8_t *)(a1 + 648);
                unint64_t v61 = *((void *)i + 1);
                uint8x8_t v62 = (uint8x8_t)vcnt_s8(v60);
                v62.i16[0] = vaddlv_u8(v62);
                if (v62.u32[0] > 1uLL)
                {
                  size_t v64 = (void *)(a1 + 664);
                  int v63 = v71;
                  if (v61 >= *(void *)&v60) {
                    v61 %= *(void *)&v60;
                  }
                }
                else
                {
                  v61 &= *(void *)&v60 - 1;
                  size_t v64 = (void *)(a1 + 664);
                  int v63 = v71;
                }
                uint64_t v65 = *(unsigned __int8 **)(*v63 + 8 * v61);
                do
                {
                  int v66 = v65;
                  uint64_t v65 = *(unsigned __int8 **)v65;
                }
                while (v65 != i);
                if (v66 == (void *)(a1 + 656)) {
                  goto LABEL_134;
                }
                unint64_t v67 = v66[1];
                if (v62.u32[0] > 1uLL)
                {
                  if (v67 >= *(void *)&v60) {
                    v67 %= *(void *)&v60;
                  }
                }
                else
                {
                  v67 &= *(void *)&v60 - 1;
                }
                if (v67 != v61)
                {
LABEL_134:
                  if (!*(void *)i) {
                    goto LABEL_135;
                  }
                  unint64_t v68 = *(void *)(*(void *)i + 8);
                  if (v62.u32[0] > 1uLL)
                  {
                    if (v68 >= *(void *)&v60) {
                      v68 %= *(void *)&v60;
                    }
                  }
                  else
                  {
                    v68 &= *(void *)&v60 - 1;
                  }
                  if (v68 != v61) {
LABEL_135:
                  }
                    *(void *)(*v63 + 8 * v61) = 0;
                }
                std::string::size_type v69 = *(unsigned __int8 **)i;
                if (*(void *)i)
                {
                  unint64_t v70 = *((void *)v69 + 1);
                  if (v62.u32[0] > 1uLL)
                  {
                    if (v70 >= *(void *)&v60) {
                      v70 %= *(void *)&v60;
                    }
                  }
                  else
                  {
                    v70 &= *(void *)&v60 - 1;
                  }
                  if (v70 != v61)
                  {
                    *(void *)(*v63 + 8 * v70) = v66;
                    std::string::size_type v69 = *(unsigned __int8 **)i;
                  }
                }
                *int v66 = v69;
                *(void *)std::string::size_type i = 0;
                --*v64;
                __p[0] = i;
                __p[1] = (void *)(a1 + 656);
                v90[0] = 1;
                std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
                if (!v9)
                {
LABEL_24:
                  BOOL v18 = v72;
                  goto LABEL_25;
                }
LABEL_23:
                std::__shared_weak_count::__release_shared[abi:ne180100](v9);
                goto LABEL_24;
              }
            }
            else
            {
              if (v16 > 1)
              {
                if (v21 >= *(void *)&v13) {
                  v21 %= *(void *)&v13;
                }
              }
              else
              {
                v21 &= *(void *)&v13 - 1;
              }
              if (v21 != v17) {
                break;
              }
            }
          }
        }
      }
    }
    if (!v9) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  BOOL v18 = 0;
LABEL_25:
  if (!*(unsigned char *)(a1 + 404) || !*(void *)(a1 + 288))
  {
    unint64_t v27 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 224, (void **)a2);
    if ((void **)(a1 + 232) == v27 || !v27[9])
    {
      uint64_t v57 = *(void *)(a1 + 32);
      uint64_t v56 = a1 + 32;
      uint64_t v58 = (*(uint64_t (**)(uint64_t))(v57 + 64))(v56);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v56 + 16))(v56, v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v58 + 8), (uint64_t)"No pending messages", 19);
      *(unsigned char *)(v58 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v58 + 17) = 0;
      return;
    }
    uint64_t v28 = v27 + 7;
    uint64_t v86 = (uint64_t)&v86;
    long long v87 = &v86;
    uint64_t v88 = 0;
    uint64_t v29 = (void **)v27[8];
    if (v29 == v27 + 7) {
      goto LABEL_109;
    }
    do
    {
      uint64_t v30 = (char *)operator new(0x60uLL);
      uint64_t v31 = (uint64_t)v30;
      *(void *)uint64_t v30 = 0;
      *((void *)v30 + 1) = 0;
      if (*((char *)v29 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v30 + 16), (const std::string::value_type *)v29[2], (std::string::size_type)v29[3]);
      }
      else
      {
        long long v32 = *((_OWORD *)v29 + 1);
        *((void *)v30 + 4) = v29[4];
        *((_OWORD *)v30 + 1) = v32;
      }
      if (*((char *)v29 + 63) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v31 + 40), (const std::string::value_type *)v29[5], (std::string::size_type)v29[6]);
      }
      else
      {
        long long v33 = *(_OWORD *)(v29 + 5);
        *(void *)(v31 + 56) = v29[7];
        *(_OWORD *)(v31 + 40) = v33;
      }
      uint8x8_t v34 = (std::string *)(v31 + 64);
      if (*((char *)v29 + 87) < 0)
      {
        std::string::__init_copy_ctor_external(v34, (const std::string::value_type *)v29[8], (std::string::size_type)v29[9]);
      }
      else
      {
        long long v35 = *((_OWORD *)v29 + 4);
        *(void *)(v31 + 80) = v29[10];
        *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
      }
      *(_DWORD *)(v31 + 88) = *((_DWORD *)v29 + 22);
      uint64_t v36 = v86;
      *(void *)uint64_t v31 = v86;
      *(void *)(v31 + 8) = &v86;
      *(void *)(v36 + 8) = v31;
      uint64_t v86 = v31;
      ++v88;
      uint64_t v29 = (void **)v29[1];
    }
    while (v29 != v28);
    uint64_t v37 = v87;
    if (v87 == &v86)
    {
LABEL_109:
      std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::__erase_unique<std::string>((void ***)(a1 + 224), (void **)a2);
      std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::__erase_unique<std::string>((void ***)(a1 + 248), (void **)a2);
      std::__list_imp<SipLazuliManager::OutgoingMsrp>::clear(&v86);
      return;
    }
    uint64_t v38 = a1 + 32;
    while (1)
    {
      uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 56))(a1 + 32);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(a1 + 32, v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"Terminating Session and propagating Send Failure for queued message trx ", 72);
      *(unsigned char *)(v39 + 17) = 0;
      uint64_t v40 = (const char *)(v37 + 8);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v39 + 32))(v39, v37 + 8);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v39 + 17) = 0;
      if (!*(void *)(a1 + 184))
      {
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = 0uLL;
        uint64_t v41 = *(void *)(a1 + 176);
        unint64_t v42 = *(std::__shared_weak_count **)(v41 + 16);
        if (v42)
        {
          int8x8_t v43 = std::__shared_weak_count::lock(v42);
          if (v43) {
            uint64_t v44 = *(void *)(v41 + 8);
          }
          else {
            uint64_t v44 = 0;
          }
        }
        else
        {
          uint64_t v44 = 0;
          int8x8_t v43 = 0;
        }
        if (*(char *)(v44 + 4183) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v44 + 4160), *(void *)(v44 + 4168));
        }
        else
        {
          uint64_t v50 = v44 + 4160;
          *(_OWORD *)std::string __p = *(_OWORD *)v50;
          *(void *)long long v90 = *(void *)(v50 + 16);
        }
        IMSClientManager::lazuliDelegateForStack(__p, &v82);
        if ((v90[7] & 0x80000000) != 0) {
          operator delete(__p[0]);
        }
        if (v43) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v43);
        }
        if (v82.__r_.__value_.__r.__words[0])
        {
          xpc_object_t v81 = 0;
          xpc_object_t v51 = xpc_dictionary_create(0, 0, 0);
          xpc_object_t v52 = v51;
          if (v51)
          {
            xpc_object_t v81 = v51;
            goto LABEL_86;
          }
          xpc_object_t v52 = xpc_null_create();
          xpc_object_t v81 = v52;
          if (v52)
          {
LABEL_86:
            if (MEMORY[0x1C878F160](v52) != MEMORY[0x1E4F14590])
            {
              xpc_object_t v53 = xpc_null_create();
              goto LABEL_90;
            }
            xpc_retain(v52);
          }
          else
          {
            xpc_object_t v53 = xpc_null_create();
            xpc_object_t v52 = 0;
LABEL_90:
            xpc_object_t v81 = v53;
          }
          xpc_release(v52);
          xpc_object_t v79 = xpc_BOOL_create(0);
          if (!v79) {
            xpc_object_t v79 = xpc_null_create();
          }
          __p[0] = &v81;
          __p[1] = "kIsSuccess";
          xpc::dict::object_proxy::operator=((uint64_t)__p, &v79, &object);
          xpc_release(object);
          xpc_object_t object = 0;
          xpc_release(v79);
          xpc_object_t v79 = 0;
          if (*((char *)v37 + 87) < 0) {
            uint64_t v40 = *(const char **)v40;
          }
          xpc_object_t v77 = xpc_string_create(v40);
          if (!v77) {
            xpc_object_t v77 = xpc_null_create();
          }
          __p[0] = &v81;
          __p[1] = "kTransactionId";
          xpc::dict::object_proxy::operator=((uint64_t)__p, &v77, &v78);
          xpc_release(v78);
          xpc_object_t v78 = 0;
          xpc_release(v77);
          xpc_object_t v77 = 0;
          if (*(char *)(a2 + 23) >= 0) {
            int v54 = (const char *)a2;
          }
          else {
            int v54 = *(const char **)a2;
          }
          xpc_object_t v75 = xpc_string_create(v54);
          if (!v75) {
            xpc_object_t v75 = xpc_null_create();
          }
          __p[0] = &v81;
          __p[1] = "kConversationId";
          xpc::dict::object_proxy::operator=((uint64_t)__p, &v75, &v76);
          xpc_release(v76);
          xpc_object_t v76 = 0;
          xpc_release(v75);
          uint64_t v55 = (LazuliDelegate *)v82.__r_.__value_.__r.__words[0];
          xpc_object_t v74 = v81;
          xpc_object_t v75 = 0;
          if (v81) {
            xpc_retain(v81);
          }
          else {
            xpc_object_t v74 = xpc_null_create();
          }
          LazuliDelegate::handleMessageSend(v55, &v74);
          xpc_release(v74);
          xpc_object_t v74 = 0;
          xpc_release(v81);
        }
        if (v82.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v82.__r_.__value_.__l.__size_);
        }
        goto LABEL_108;
      }
      *(_OWORD *)std::string __p = 0u;
      memset(v90, 0, sizeof(v90));
      long long v83 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      v82.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v82.__r_.__value_.__r.__words[2]) = 0x40000000;
      if (a4[3].__r_.__value_.__s.__data_[0]) {
        ImsResult::ImsResult((ImsResult *)__p, a4);
      }
      else {
        ImsResult::ImsResult((uint64_t)__p, (uint64_t)&v82);
      }
      ImsResult::~ImsResult((ImsResult *)&v82);
      std::string::operator=((std::string *)&v90[32], (const std::string *)(v37 + 8));
      uint64_t v45 = *(void *)(a1 + 176);
      uint64_t v46 = *(void *)(a1 + 184);
      uint64_t v47 = *(std::__shared_weak_count **)(v45 + 16);
      if (v47)
      {
        uint64_t v48 = std::__shared_weak_count::lock(v47);
        uint64_t v49 = v48 ? *(void *)(v45 + 8) : 0;
      }
      else
      {
        uint64_t v49 = 0;
        uint64_t v48 = 0;
      }
      if (*(char *)(v49 + 4183) < 0) {
        std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)(v49 + 4160), *(void *)(v49 + 4168));
      }
      else {
        std::string v82 = *(std::string *)(v49 + 4160);
      }
      (*(void (**)(uint64_t, std::string *, void, uint64_t, void **, void))(*(void *)v46 + 32))(v46, &v82, *((unsigned int *)v37 + 22), a2, __p, 0);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v48) {
        goto LABEL_69;
      }
LABEL_70:
      ImsResult::~ImsResult((ImsResult *)__p);
LABEL_108:
      uint64_t v37 = (uint64_t *)v37[1];
      if (v37 == &v86) {
        goto LABEL_109;
      }
    }
    operator delete(v82.__r_.__value_.__l.__data_);
    if (!v48) {
      goto LABEL_70;
    }
LABEL_69:
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
    goto LABEL_70;
  }
  if (v18)
  {
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(a1 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(a1 + 32, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Processing ", 11);
    *(unsigned char *)(v22 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v22 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" queued messages after Large Message Mode transfer", 50);
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v22 + 17) = 0;
    while (*(void *)(a1 + 288))
    {
      uint64_t v23 = *(void *)(a1 + 280);
      if (*(unsigned char *)(v23 + 744))
      {
        if (!sImsDispatchQueue) {
          sImsDispatchQueue = (uint64_t)dispatch_queue_create("com.apple.ipTelephony.queue", 0);
        }
        uint64_t v59 = *(atomic_ullong **)(a1 + 152);
        __p[0] = *(void **)(a1 + 144);
        __p[1] = v59;
        if (v59) {
          atomic_fetch_add_explicit(v59 + 2, 1uLL, memory_order_relaxed);
        }
        LazuliSendParams::LazuliSendParams((std::string *)v90, (const LazuliSendParams *)(v23 + 16));
        operator new();
      }
      uint64_t Body = SipMessageEncodingMap::createBody((SipMessageEncodingMap *)(*(void *)(a1 + 176) + 288), (const std::string *)(v23 + 184));
      if (Body)
      {
        uint64_t v25 = Body;
        __p[0] = 0;
        __p[1] = 0;
        *(void *)long long v90 = 0;
        std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(__p, *(char **)(v23 + 160), *(char **)(v23 + 168), *(void *)(v23 + 168) - *(void *)(v23 + 160));
        if ((*(unsigned int (**)(uint64_t, void **, uint64_t))(*(void *)v25 + 88))(v25, __p, *(void *)(a1 + 176) + 288))
        {
          SipLazuliManager::sendPager(a1);
        }
        if ((v90[7] & 0x80000000) != 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v26 = *(unsigned int *)(v23 + 748);
      memset(&v90[8], 0, 48);
      __p[0] = &unk_1F20B2680;
      __p[1] = &_bambiDomain;
      *(_DWORD *)long long v90 = 1073741828;
      SipLazuliManager::generateError((void *)a1, v26, v23 + 88, (uint64_t)__p);
      ImsResult::~ImsResult((ImsResult *)__p);
      std::list<SipLazuliManager::DeferredMessage>::pop_front(a1 + 272);
    }
  }
}

void sub_1C51F2658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,std::__shared_weak_count *a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t xpc::dict::object_proxy::operator=@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void SipLazuliManager::handleOptionsReceived(SipLazuliManager *this, const SipMessage *a2, unsigned int a3, int a4)
{
  if (*((void *)this + 23))
  {
    memset(&v76, 0, sizeof(v76));
    SipMessage::transactionId(a2, &v76);
    memset(v75, 0, sizeof(v75));
    SipMessage::assertedIdentityList(a2, (uint64_t)v75);
    uint64_t v8 = SipMessage::header<SipContactHeader>((uint64_t)a2);
    if (v8)
    {
      uint64_t v9 = v8[9];
      if (v9)
      {
        if (v9 != v8[10])
        {
          uint64_t v74 = 0;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v51 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          SipUri::SipUri((SipUri *)&v49, (const SipUri *)(v9 + 8));
          uint64_t v10 = (char *)this + 32;
          uint64_t v11 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
          (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Processing options exchange: txn-id=", 36);
          *(unsigned char *)(v11 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, &v76);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" for ", 5);
          *(unsigned char *)(v11 + 17) = 0;
          SipUri::asString((uint64_t)&v49, __p);
          (*(void (**)(uint64_t, void **))(*(void *)v11 + 32))(v11, __p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v11 + 17) = 0;
          if (SBYTE7(v47[0]) < 0) {
            operator delete(__p[0]);
          }
          SipLazuliManager::logSipOptionsEvent((uint64_t)this, a3, v9, 0, a4);
          unsigned int v43 = *(_DWORD *)(v9 + 456);
          memset(v48, 0, sizeof(v48));
          uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)v10 + 64))((char *)this + 32);
          (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))((char *)this + 32, v12);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Supported options: size=", 24);
          *(unsigned char *)(v12 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v12 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" {", 2);
          *(unsigned char *)(v12 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v12 + 17) = 0;
          int8x8_t v13 = *(long long **)(v9 + 424);
          if (v13 != (long long *)(v9 + 432))
          {
            do
            {
              memset(v47, 0, sizeof(v47));
              *(_OWORD *)std::string __p = 0u;
              std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)__p, v13 + 2);
              uint64_t v14 = (*(uint64_t (**)(char *))(*(void *)v10 + 64))((char *)this + 32);
              (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))((char *)this + 32, v14);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"  ", 2);
              *(unsigned char *)(v14 + 17) = 0;
              (*(void (**)(uint64_t, void **))(*(void *)v14 + 32))(v14, __p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" = ", 3);
              *(unsigned char *)(v14 + 17) = 0;
              (*(void (**)(uint64_t, char *))(*(void *)v14 + 32))(v14, (char *)v47 + 8);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v14 + 17) = 0;
              uint8x8_t v15 = (void *)BYTE7(v47[0]);
              if (SBYTE7(v47[0]) < 0) {
                uint8x8_t v15 = __p[1];
              }
              if (v15 == (void *)19)
              {
                unint64_t v16 = (SBYTE7(v47[0]) & 0x80u) == 0 ? __p : (void **)__p[0];
                unint64_t v17 = *v16;
                BOOL v18 = v16[1];
                uint64_t v19 = *(uint64_t *)((char *)v16 + 11);
                BOOL v20 = v17 == (void *)0x2E616D73672E672BLL && v18 == (void *)0x6D6970632E736372;
                if (v20 && v19 == 0x7478656D6970632ELL)
                {
                  if (v48[24])
                  {
                    std::string::operator=((std::string *)v48, (const std::string *)((char *)v47 + 8));
                  }
                  else
                  {
                    if (SHIBYTE(v47[1]) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)v48, *((const std::string::value_type **)&v47[0] + 1), *(std::string::size_type *)&v47[1]);
                    }
                    else
                    {
                      *(_OWORD *)uint64_t v48 = *(_OWORD *)((char *)v47 + 8);
                      *(void *)&v48[16] = *((void *)&v47[1] + 1);
                    }
                    v48[24] = 1;
                  }
                }
              }
              if (SHIBYTE(v47[1]) < 0) {
                operator delete(*((void **)&v47[0] + 1));
              }
              if (SBYTE7(v47[0]) < 0) {
                operator delete(__p[0]);
              }
              uint64_t v22 = (long long *)*((void *)v13 + 1);
              if (v22)
              {
                do
                {
                  uint64_t v23 = v22;
                  uint64_t v22 = *(long long **)v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  uint64_t v23 = (long long *)*((void *)v13 + 2);
                  BOOL v20 = *(void *)v23 == (void)v13;
                  int8x8_t v13 = v23;
                }
                while (!v20);
              }
              int8x8_t v13 = v23;
            }
            while (v23 != (long long *)(v9 + 432));
          }
          uint64_t v24 = (*(uint64_t (**)(char *))(*(void *)v10 + 64))((char *)this + 32);
          (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))((char *)this + 32, v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"}", 1);
          *(unsigned char *)(v24 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v24 + 17) = 0;
          uint64_t v25 = (*(uint64_t (**)(char *))(*(void *)v10 + 64))((char *)this + 32);
          (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))((char *)this + 32, v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"Remote serviceMask=", 19);
          *(unsigned char *)(v25 + 17) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v44, ",");
          BambiServices::namesForServiceMask(v43, __p);
          (*(void (**)(uint64_t, void **))(*(void *)v25 + 32))(v25, __p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v25 + 17) = 0;
          if (SBYTE7(v47[0]) < 0) {
            operator delete(__p[0]);
          }
          if (v45 < 0) {
            operator delete(v44);
          }
          uint64_t v28 = (char *)this + 176;
          uint64_t v26 = *((void *)this + 22);
          uint64_t v27 = *((void *)v28 + 1);
          uint64_t v29 = *(std::__shared_weak_count **)(v26 + 16);
          if (v29)
          {
            uint64_t v30 = std::__shared_weak_count::lock(v29);
            if (v30) {
              uint64_t v31 = *(void *)(v26 + 8);
            }
            else {
              uint64_t v31 = 0;
            }
          }
          else
          {
            uint64_t v31 = 0;
            uint64_t v30 = 0;
          }
          if (*(char *)(v31 + 4183) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v31 + 4160), *(void *)(v31 + 4168));
          }
          else
          {
            uint64_t v42 = v31 + 4160;
            *(_OWORD *)std::string __p = *(_OWORD *)v42;
            *(void *)&v47[0] = *(void *)(v42 + 16);
          }
          (*(void (**)(uint64_t, void **, long long *, void *, std::string *, void, unsigned char *, void))(*(void *)v27 + 64))(v27, __p, &v49, v75, &v76, v43, v48, a3);
          if (SBYTE7(v47[0]) < 0) {
            operator delete(__p[0]);
          }
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          if (v48[24] && (v48[23] & 0x80000000) != 0) {
            operator delete(*(void **)v48);
          }
          SipUri::~SipUri((SipUri *)&v49);
LABEL_70:
          *(void *)&long long v49 = v75;
          std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v76.__r_.__value_.__l.__data_);
          }
          return;
        }
      }
    }
    uint64_t v32 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"Contact header is missing.  Propagating error using asserted ID ", 64);
    *(unsigned char *)(v32 + 17) = 0;
    long long v33 = SipMessage::assertedIdentity((uint64_t)a2, 1);
    (*(void (**)(char *, uint64_t))(*(void *)v33 + 40))(v33, v32);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v32 + 17) = 0;
    uint64_t v36 = (char *)this + 176;
    uint64_t v34 = *((void *)this + 22);
    uint64_t v35 = *((void *)v36 + 1);
    uint64_t v37 = *(std::__shared_weak_count **)(v34 + 16);
    if (v37)
    {
      uint64_t v38 = std::__shared_weak_count::lock(v37);
      if (v38)
      {
        uint64_t v39 = *(void *)(v34 + 8);
LABEL_50:
        if (*(char *)(v39 + 4183) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v39 + 4160), *(void *)(v39 + 4168));
        }
        else
        {
          uint64_t v40 = v39 + 4160;
          *(_OWORD *)std::string __p = *(_OWORD *)v40;
          *(void *)&v47[0] = *(void *)(v40 + 16);
        }
        *(void *)&long long v53 = 0;
        *(void *)&long long v49 = &unk_1F20B2680;
        *((void *)&v49 + 1) = &_bambiDomain;
        LODWORD(v50) = 0;
        long long v52 = 0uLL;
        *((void *)&v50 + 1) = 0;
        long long v51 = 0uLL;
        uint64_t v41 = SipMessage::assertedIdentity((uint64_t)a2, 1);
        (*(void (**)(uint64_t, void **, long long *, std::string *, char *, void *))(*(void *)v35 + 72))(v35, __p, &v49, &v76, v41, v75);
        ImsResult::~ImsResult((ImsResult *)&v49);
        if (SBYTE7(v47[0]) < 0) {
          operator delete(__p[0]);
        }
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
        goto LABEL_70;
      }
    }
    else
    {
      uint64_t v38 = 0;
    }
    uint64_t v39 = 0;
    goto LABEL_50;
  }
}

void sub_1C51F3300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32)
{
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (a31 && a30 < 0) {
    operator delete(__p);
  }
  SipUri::~SipUri((SipUri *)&a32);
  a32 = v33 - 144;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (*(char *)(v33 - 97) < 0) {
    operator delete(*(void **)(v33 - 120));
  }
  _Unwind_Resume(a1);
}

void SipLazuliManager::logSipOptionsEvent(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 168);
  if (v6)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v6);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)(a1 + 160);
      if (v13)
      {
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        *(_OWORD *)long long v94 = 0u;
        HIDWORD(v95) = a2;
        LODWORD(v96) = a5;
        BYTE4(v96) = a2 == 0;
        DWORD2(v96) = a4;
        BYTE12(v96) = BYTE4(a4);
        if (a2 && a2 != 200)
        {
          (*(void (**)(std::string *__return_ptr))(**(void **)(v13 + 136) + 104))(v92);
          (*(void (**)(void, long long *))(**(void **)(v92[0].__r_.__value_.__r.__words[0] + 120) + 216))(*(void *)(v92[0].__r_.__value_.__r.__words[0] + 120), &v93);
        }
        else
        {
          uint64_t v90 = v13;
          uint64_t v14 = *(long long **)(a3 + 424);
          uint8x8_t v15 = (long long *)(a3 + 432);
          if (v14 != (long long *)(a3 + 432))
          {
            do
            {
              memset(v92, 0, sizeof(v92));
              std::pair<std::string const,std::string>::pair[abi:ne180100](v92, v14 + 2);
              std::string::size_type size = HIBYTE(v92[0].__r_.__value_.__r.__words[2]);
              if ((v92[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type size = v92[0].__r_.__value_.__l.__size_;
              }
              switch(size)
              {
                case 0x10uLL:
                  if ((v92[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    unint64_t v17 = v92;
                  }
                  else {
                    unint64_t v17 = (std::string *)v92[0].__r_.__value_.__r.__words[0];
                  }
                  BOOL v18 = v17->__r_.__value_.__r.__words[0] == 0x2E707067332E672BLL
                     && v17->__r_.__value_.__l.__size_ == 0x6665722D69736369;
                  if (v18
                    || ((std::string::size_type v20 = v17->__r_.__value_.__r.__words[0],
                         std::string::size_type v19 = v17->__r_.__value_.__l.__size_,
                         v20 == 0x2E707067332E672BLL)
                      ? (BOOL v21 = v19 == 0x6665722D69726169)
                      : (BOOL v21 = 0),
                        v21))
                  {
                    memset(&v91, 0, sizeof(v91));
                    if (SHIBYTE(v92[1].__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external(&v91, v92[1].__r_.__value_.__l.__data_, v92[1].__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string v91 = v92[1];
                    }
                    ims::removePercentEscapes((uint64_t)&v91);
                    int v48 = SHIBYTE(v91.__r_.__value_.__r.__words[2]);
                    long long v49 = (void *)v91.__r_.__value_.__r.__words[0];
                    if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      int64_t v50 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      int64_t v50 = v91.__r_.__value_.__l.__size_;
                    }
                    if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      long long v51 = &v91;
                    }
                    else {
                      long long v51 = (std::string *)v91.__r_.__value_.__r.__words[0];
                    }
                    if (v50 >= 43)
                    {
                      long long v52 = (char *)v51 + v50;
                      uint64_t v53 = v50;
                      long long v54 = v51;
                      do
                      {
                        long long v55 = (char *)memchr(v54, 117, v53 - 42);
                        if (!v55) {
                          break;
                        }
                        long long v56 = v55;
                        if (!memcmp(v55, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg", 0x2BuLL))
                        {
                          if (v56 != v52 && v56 - (char *)v51 != -1) {
                            LOBYTE(v93) = 1;
                          }
                          break;
                        }
                        long long v54 = (std::string *)(v56 + 1);
                        uint64_t v53 = v52 - (v56 + 1);
                      }
                      while (v53 >= 43);
                      if (v50 > 47)
                      {
                        uint64_t v57 = v50;
                        long long v58 = v51;
                        do
                        {
                          long long v59 = (char *)memchr(v58, 117, v57 - 47);
                          if (!v59) {
                            break;
                          }
                          long long v60 = v59;
                          if (!memcmp(v59, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.largemsg", 0x30uLL))
                          {
                            if (v60 != v52 && v60 - (char *)v51 != -1) {
                              BYTE1(v93) = 1;
                            }
                            break;
                          }
                          long long v58 = (std::string *)(v60 + 1);
                          uint64_t v57 = v52 - (v60 + 1);
                        }
                        while (v57 >= 48);
                        uint64_t v61 = v50;
                        long long v62 = v51;
                        do
                        {
                          long long v63 = (char *)memchr(v62, 117, v61 - 47);
                          if (!v63) {
                            break;
                          }
                          long long v64 = v63;
                          if (!memcmp(v63, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.deferred", 0x30uLL))
                          {
                            if (v64 != v52 && v64 - (char *)v51 != -1) {
                              BYTE2(v93) = 1;
                            }
                            break;
                          }
                          long long v62 = (std::string *)(v64 + 1);
                          uint64_t v61 = v52 - (v64 + 1);
                        }
                        while (v61 >= 48);
                      }
                      if (v50 > 46)
                      {
                        uint64_t v65 = v50;
                        long long v66 = v51;
                        do
                        {
                          long long v67 = (char *)memchr(v66, 117, v65 - 46);
                          if (!v67) {
                            break;
                          }
                          long long v68 = v67;
                          if (!memcmp(v67, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.session", 0x2FuLL))
                          {
                            if (v68 != v52 && v68 - (char *)v51 != -1) {
                              BYTE4(v93) = 1;
                            }
                            break;
                          }
                          long long v66 = (std::string *)(v68 + 1);
                          uint64_t v65 = v52 - (v68 + 1);
                        }
                        while (v65 > 46);
                      }
                      if (v50 >= 46)
                      {
                        uint64_t v69 = v50;
                        long long v70 = v51;
                        do
                        {
                          long long v71 = (char *)memchr(v70, 117, v69 - 45);
                          if (!v71) {
                            break;
                          }
                          long long v72 = v71;
                          if (!memcmp(v71, "urn:urn-7:3gpp-application.ims.iari.rcs.fthttp", 0x2EuLL))
                          {
                            if (v72 != v52 && v72 - (char *)v51 != -1) {
                              BYTE6(v93) = 1;
                            }
                            break;
                          }
                          long long v70 = (std::string *)(v72 + 1);
                          uint64_t v69 = v52 - (v72 + 1);
                        }
                        while (v69 >= 46);
                        if (v50 > 46)
                        {
                          uint64_t v73 = v50;
                          uint64_t v74 = v51;
                          do
                          {
                            xpc_object_t v75 = (char *)memchr(v74, 117, v73 - 46);
                            if (!v75) {
                              break;
                            }
                            std::string v76 = v75;
                            if (!memcmp(v75, "urn:urn-7:3gpp-application.ims.iari.rcs.geopush", 0x2FuLL))
                            {
                              if (v76 != v52 && v76 - (char *)v51 != -1) {
                                BYTE7(v93) = 1;
                              }
                              break;
                            }
                            uint64_t v74 = (std::string *)(v76 + 1);
                            uint64_t v73 = v52 - (v76 + 1);
                          }
                          while (v73 >= 47);
                        }
                        uint64_t v77 = v50;
                        xpc_object_t v78 = v51;
                        do
                        {
                          xpc_object_t v79 = (char *)memchr(v78, 117, v77 - 45);
                          if (!v79) {
                            break;
                          }
                          long long v80 = v79;
                          if (!memcmp(v79, "urn:urn-7:3gpp-application.ims.iari.rcs.geosms", 0x2EuLL))
                          {
                            if (v80 != v52 && v80 - (char *)v51 != -1) {
                              BYTE8(v93) = 1;
                            }
                            break;
                          }
                          xpc_object_t v78 = (std::string *)(v80 + 1);
                          uint64_t v77 = v52 - (v80 + 1);
                        }
                        while (v77 >= 46);
                        if (v50 > 46)
                        {
                          uint64_t v81 = v50;
                          std::string v82 = v51;
                          do
                          {
                            long long v83 = (char *)memchr(v82, 117, v81 - 46);
                            if (!v83) {
                              break;
                            }
                            long long v84 = v83;
                            if (!memcmp(v83, "urn:urn-7:3gpp-application.ims.iari.rcs.chatbot", 0x2FuLL))
                            {
                              if (v84 != v52 && v84 - (char *)v51 != -1) {
                                BYTE10(v93) = 1;
                              }
                              break;
                            }
                            std::string v82 = (std::string *)(v84 + 1);
                            uint64_t v81 = v52 - (v84 + 1);
                          }
                          while (v81 >= 47);
                          if (v50 >= 50)
                          {
                            long long v85 = v51;
                            do
                            {
                              uint64_t v86 = (char *)memchr(v85, 117, v50 - 49);
                              if (!v86) {
                                break;
                              }
                              long long v87 = v86;
                              if (!memcmp(v86, "urn:urn-7:3gpp-application.ims.iari.rcs.chatbot.sa", 0x32uLL))
                              {
                                if (v87 != v52 && v87 - (char *)v51 != -1) {
                                  BYTE11(v93) = 1;
                                }
                                break;
                              }
                              long long v85 = (std::string *)(v87 + 1);
                              int64_t v50 = v52 - (v87 + 1);
                            }
                            while (v50 >= 50);
                          }
                        }
                      }
                    }
                    if (v48 < 0) {
                      operator delete(v49);
                    }
                  }
                  break;
                case 0x11uLL:
                  if ((v92[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v28 = v92;
                  }
                  else {
                    uint64_t v28 = (std::string *)v92[0].__r_.__value_.__r.__words[0];
                  }
                  std::string::size_type v29 = v28->__r_.__value_.__r.__words[0];
                  std::string::size_type v30 = v28->__r_.__value_.__l.__size_;
                  int v31 = v28->__r_.__value_.__s.__data_[16];
                  if (v29 == 0x2E616D73672E672BLL && v30 == 0x6F6273692E736372 && v31 == 116) {
                    BYTE5(v96) = 1;
                  }
                  break;
                case 0x13uLL:
                  if ((v92[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v22 = v92;
                  }
                  else {
                    uint64_t v22 = (std::string *)v92[0].__r_.__value_.__r.__words[0];
                  }
                  std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
                  std::string::size_type v24 = v22->__r_.__value_.__l.__size_;
                  uint64_t v25 = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 3);
                  if (v23 == 0x2E616D73672E672BLL && v24 == 0x6D6970632E736372 && v25 == 0x7478656D6970632ELL) {
                    BYTE12(v93) = 1;
                  }
                  break;
                case 0x16uLL:
                  if ((v92[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v34 = v92;
                  }
                  else {
                    uint64_t v34 = (std::string *)v92[0].__r_.__value_.__r.__words[0];
                  }
                  std::string::size_type v35 = v34->__r_.__value_.__r.__words[0];
                  std::string::size_type v36 = v34->__r_.__value_.__l.__size_;
                  uint64_t v37 = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 6);
                  if (v35 == 0x2E616D73672E672BLL && v36 == 0x76746F622E736372 && v37 == 0x6E6F697372657674) {
                    std::string::operator=((std::string *)v94, &v92[1]);
                  }
                  break;
                case 0x1BuLL:
                  if ((v92[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v40 = v92;
                  }
                  else {
                    uint64_t v40 = (std::string *)v92[0].__r_.__value_.__r.__words[0];
                  }
                  std::string::size_type v41 = v40->__r_.__value_.__r.__words[0];
                  std::string::size_type v42 = v40->__r_.__value_.__l.__size_;
                  std::string::size_type v43 = v40->__r_.__value_.__r.__words[2];
                  uint64_t v44 = *(std::string::size_type *)((char *)&v40->__r_.__value_.__r.__words[2] + 3);
                  if (v41 == 0x2E616D73672E672BLL
                    && v42 == 0x2E6D70632E736372
                    && v43 == 0x616C2D7265676170
                    && v44 == 0x656772616C2D7265)
                  {
                    BYTE3(v93) = 1;
                  }
                  break;
                default:
                  break;
              }
              if (SHIBYTE(v92[1].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v92[1].__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v92[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v92[0].__r_.__value_.__l.__data_);
              }
              uint64_t v88 = (long long *)*((void *)v14 + 1);
              if (v88)
              {
                do
                {
                  long long v89 = v88;
                  uint64_t v88 = *(long long **)v88;
                }
                while (v88);
              }
              else
              {
                do
                {
                  long long v89 = (long long *)*((void *)v14 + 2);
                  BOOL v18 = *(void *)v89 == (void)v14;
                  uint64_t v14 = v89;
                }
                while (!v18);
              }
              uint64_t v14 = v89;
            }
            while (v89 != v15);
          }
          BYTE9(v95) = 1;
          (*(void (**)(std::string *__return_ptr))(**(void **)(v90 + 136) + 104))(v92);
          (*(void (**)(void, long long *))(**(void **)(v92[0].__r_.__value_.__r.__words[0] + 120) + 216))(*(void *)(v92[0].__r_.__value_.__r.__words[0] + 120), &v93);
        }
        if (v92[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92[0].__r_.__value_.__l.__size_);
        }
        if (SBYTE7(v95) < 0) {
          operator delete(v94[0]);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void sub_1C51F3C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipLazuliManager::handleOptionsReceived(SipLazuliManager *this, const SipMessage *a2, unsigned int a3, int a4)
{
}

void SipLazuliManager::handleOptionsError(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v12 = a1[23];
  if (!v12) {
    goto LABEL_14;
  }
  uint64_t v16 = a1[22];
  unint64_t v17 = *(std::__shared_weak_count **)(v16 + 16);
  if (!v17)
  {
    BOOL v18 = 0;
    goto LABEL_6;
  }
  BOOL v18 = std::__shared_weak_count::lock(v17);
  if (!v18)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  uint64_t v19 = *(void *)(v16 + 8);
LABEL_7:
  if (*(char *)(v19 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v19 + 4160), *(void *)(v19 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v19 + 4160);
  }
  (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 72))(v12, &__p, a4, a5, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
LABEL_14:
  std::string::size_type v20 = SipMessage::header<SipContactHeader>(a2);
  if (!v20 || ((uint64_t v21 = v20[9]) != 0 ? (v22 = v21 == v20[10]) : (v22 = 1), v22))
  {
    uint64_t v24 = a1[4];
    std::string::size_type v23 = a1 + 4;
    uint64_t v25 = (*(uint64_t (**)(void *))(v24 + 56))(v23);
    (*(void (**)(void *, uint64_t))(*v23 + 16))(v23, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"Contact header is missing in SipLazuliManager::handleOptionsError", 65);
    *(unsigned char *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v25 + 17) = 0;
  }
  else
  {
    SipLazuliManager::logSipOptionsEvent((uint64_t)a1, *(_DWORD *)(a4 + 16), v21, 0, a8);
  }
}

void sub_1C51F3F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipLazuliManager::handleOptionsError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
}

void SipLazuliManager::handleOptionsRetryAfter(SipLazuliManager *this, const ImsResult *a2, unsigned int a3, int a4)
{
}

void non-virtual thunk to'SipLazuliManager::handleOptionsRetryAfter(SipLazuliManager *this, const ImsResult *a2, unsigned int a3, int a4)
{
}

void SipLazuliManager::getPowerAssertionTag(int a1@<W1>, int a2@<W2>, std::string *a3@<X8>)
{
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v19 = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "com.apple.ipTelephony");
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v17 = 0;
  if (a1) {
    uint64_t v7 = ".msrpIncoming";
  }
  else {
    uint64_t v7 = ".msrpOutgoing";
  }
  std::string::basic_string[abi:ne180100]<0>(v16, v7);
  uint64_t v13 = 0;
  std::string::size_type v14 = 0;
  uint64_t v15 = 0;
  if (a2) {
    uint64_t v8 = ".wifi";
  }
  else {
    uint64_t v8 = ".cell";
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, v8);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v18, (const void **)v16, &__p);
  if (v15 >= 0) {
    uint64_t v9 = (const std::string::value_type *)&v13;
  }
  else {
    uint64_t v9 = (const std::string::value_type *)v13;
  }
  if (v15 >= 0) {
    std::string::size_type v10 = HIBYTE(v15);
  }
  else {
    std::string::size_type v10 = v14;
  }
  uint64_t v11 = std::string::append(&__p, v9, v10);
  *a3 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v13);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18[0]);
  }
}

void sub_1C51F40B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  std::string::size_type v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void SipLazuliManager::loggableName(LoggableString *a1@<X8>)
{
}

void non-virtual thunk to'SipLazuliManager::loggableName(LoggableString *a1@<X8>)
{
}

void SipUserAgentDelegate::~SipUserAgentDelegate(SipUserAgentDelegate *this)
{
}

uint64_t SipUserAgentDelegate::handleNewServerTransaction()
{
  return 0;
}

void SipTransactionUser::~SipTransactionUser(SipTransactionUser *this)
{
}

uint64_t SipTransactionUser::handleRequest()
{
  return 0;
}

uint64_t SipTransactionUser::handleResponse()
{
  return 0;
}

void std::__list_imp<SipLazuliManager::DeferredMessage>::clear(char *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = (char *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        size_t v5 = (char *)*((void *)v3 + 1);
        SipUri::~SipUri((SipUri *)(v3 + 336));
        LazuliSendParams::~LazuliSendParams((void **)v3 + 2);
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        size_t v5 = (uint64_t *)v3[1];
        size_t v6 = (std::__shared_weak_count *)v3[3];
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void *std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    void *v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

void LazuliSendParams::LazuliSendParams(std::string *this, const LazuliSendParams *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((void *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
  }
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(this[6].__r_.__value_.__r.__words, *((const void **)a2 + 18), *((void *)a2 + 19), *((void *)a2 + 19) - *((void *)a2 + 18));
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(this + 7, *((const std::string::value_type **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((void *)a2 + 23);
    *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v10;
  }
  if (*((char *)a2 + 215) < 0)
  {
    std::string::__init_copy_ctor_external(this + 8, *((const std::string::value_type **)a2 + 24), *((void *)a2 + 25));
  }
  else
  {
    long long v11 = *((_OWORD *)a2 + 12);
    this[8].__r_.__value_.__r.__words[2] = *((void *)a2 + 26);
    *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v11;
  }
  this[9].__r_.__value_.__r.__words[0] = *((void *)a2 + 27);
  if (*((char *)a2 + 247) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 224), *((const std::string::value_type **)a2 + 28), *((void *)a2 + 29));
  }
  else
  {
    long long v12 = *((_OWORD *)a2 + 14);
    this[10].__r_.__value_.__r.__words[0] = *((void *)a2 + 30);
    *(_OWORD *)&this[9].__r_.__value_.__r.__words[1] = v12;
  }
  if (*((char *)a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 248), *((const std::string::value_type **)a2 + 31), *((void *)a2 + 32));
  }
  else
  {
    long long v13 = *(_OWORD *)((char *)a2 + 248);
    this[11].__r_.__value_.__r.__words[0] = *((void *)a2 + 33);
    *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = v13;
  }
  if (*((char *)a2 + 295) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 272), *((const std::string::value_type **)a2 + 34), *((void *)a2 + 35));
  }
  else
  {
    long long v14 = *((_OWORD *)a2 + 17);
    this[12].__r_.__value_.__r.__words[0] = *((void *)a2 + 36);
    *(_OWORD *)&this[11].__r_.__value_.__r.__words[1] = v14;
  }
  uint64_t v15 = (std::string *)((char *)this + 296);
  if (*((char *)a2 + 319) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *((const std::string::value_type **)a2 + 37), *((void *)a2 + 38));
  }
  else
  {
    long long v16 = *(_OWORD *)((char *)a2 + 296);
    this[13].__r_.__value_.__r.__words[0] = *((void *)a2 + 39);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
}

void sub_1C51F46C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12)
{
  if (*(char *)(v12 + 295) < 0) {
    operator delete(*v15);
  }
  if (*(char *)(v12 + 271) < 0) {
    operator delete(*v14);
  }
  if (*(char *)(v12 + 247) < 0) {
    operator delete(*v13);
  }
  if (*(char *)(v12 + 215) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v12 + 191) < 0) {
    operator delete(*v19);
  }
  BOOL v22 = *v18;
  if (*v18)
  {
    *(void *)(v12 + 152) = v22;
    operator delete(v22);
  }
  if (*(char *)(v12 + 143) < 0) {
    operator delete(*v17);
  }
  if (*(char *)(v12 + 119) < 0) {
    operator delete(*v16);
  }
  if (*(char *)(v12 + 95) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v12 + 71) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v12 + 47) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    long long v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C51F4850(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
}

std::string *ImsUuid::loggableName@<X0>(ImsUuid *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 8));
}

ImsOutStream *SipParameterMap::log(SipParameterMap *this, ImsOutStream *a2)
{
  return SipParameterMap::toStream(this, a2, 0, 0, 0, 0);
}

void SipParameterMap::loggableName(LoggableString *a1@<X8>)
{
}

void LazuliSendParams::~LazuliSendParams(void **this)
{
  if (*((char *)this + 319) < 0) {
    operator delete(this[37]);
  }
  if (*((char *)this + 295) < 0) {
    operator delete(this[34]);
  }
  if (*((char *)this + 271) < 0) {
    operator delete(this[31]);
  }
  if (*((char *)this + 247) < 0) {
    operator delete(this[28]);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  uint64_t v2 = this[18];
  if (v2)
  {
    this[19] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void SipUri::~SipUri(SipUri *this)
{
  *(void *)this = &unk_1F20BAC60;
  *((void *)this + 46) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 376, *((void **)this + 48));
  *((void *)this + 41) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 336, *((void **)this + 43));
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }
  if (*((char *)this + 295) < 0) {
    operator delete(*((void **)this + 34));
  }
  if (*((char *)this + 271) < 0) {
    operator delete(*((void **)this + 31));
  }
  if (*((char *)this + 247) < 0) {
    operator delete(*((void **)this + 28));
  }
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  SipHop::~SipHop(this);
}

{
  uint64_t vars8;

  SipUri::~SipUri(this);
  JUMPOUT(0x1C878E320);
}

void SipHop::~SipHop(SipHop *this)
{
  *(void *)this = &unk_1F20B3760;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHost::~SipHost((SipHop *)((char *)this + 8));
}

uint64_t SipHop::setHost(SipHop *this, const SipHost *a2)
{
  return SipHost::operator=((uint64_t)this + 8, (uint64_t)a2);
}

ImsOutStream *SipHop::toStream(SipHop *this, ImsOutStream *a2)
{
  SipHost::ipAddress((SipHop *)((char *)this + 8), &v4);
  (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v4 + 40))(v4, a2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a2;
}

void sub_1C51F4CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipHop::ipAddress(SipHop *this@<X0>, void *a2@<X8>)
{
}

void SipHop::returnAddress(SipHop *this@<X0>, void *a2@<X8>)
{
}

xpc_object_t *xpc::array::iterator::iterator(xpc_object_t *a1, xpc_object_t object, void *a3)
{
  *a1 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    *a1 = xpc_null_create();
  }
  a1[1] = a3;
  return a1;
}

void ims::CFMutableDictionary::~CFMutableDictionary(ims::CFMutableDictionary *this)
{
  ims::CFType::~CFType(this);
  JUMPOUT(0x1C878E320);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E650EF78, MEMORY[0x1E4FBA1D0]);
}

void sub_1C51F4E00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void std::__list_imp<SipLazuliManager::OutgoingMsrp>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        long long v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<SipLazuliManager::OutgoingMsrp,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<SipLazuliManager::OutgoingMsrp,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1C51F4FA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void (***)(void))**a1;
  if (v2)
  {
    long long v4 = (void (***)(void))v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      long long v6 = v4 - 51;
      uint64_t v7 = v4 - 51;
      do
      {
        (**v7)(v7);
        v6 -= 51;
        BOOL v8 = v7 == v2;
        v7 -= 51;
      }
      while (!v8);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1C51F50F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    long long v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<unsigned int>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<unsigned int>::destroy(a1, *a2);
    std::__tree<unsigned int>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::OutgoingMsrp>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::OutgoingMsrp>>,0>(uint64_t a1)
{
  std::__list_imp<SipLazuliManager::OutgoingMsrp>::clear((uint64_t *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::destroy(void **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::Participant>>,0>(a1 + 4);
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::Participant>>,0>(void **a1)
{
  if (a1[5])
  {
    uint64_t v2 = (char *)(a1 + 3);
    uint64_t v3 = a1[3];
    uint64_t v4 = (void **)a1[4];
    uint64_t v5 = *v4;
    v5[1] = v3[1];
    *(void *)v3[1] = v5;
    a1[5] = 0;
    if (v4 != a1 + 3)
    {
      do
      {
        long long v6 = (char *)v4[1];
        if (*((char *)v4 + 87) < 0) {
          operator delete(v4[8]);
        }
        if (*((char *)v4 + 63) < 0) {
          operator delete(v4[5]);
        }
        if (*((char *)v4 + 39) < 0) {
          operator delete(v4[2]);
        }
        operator delete(v4);
        uint64_t v4 = (void **)v6;
      }
      while (v6 != v2);
    }
  }
  if (*((char *)a1 + 23) < 0)
  {
    long long v7 = *a1;
    operator delete(v7);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::unordered_map<std::string,std::shared_ptr<SipClientTransaction>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (std::string::size_type i = *(unsigned __int8 **)(a2 + 16); i; std::string::size_type i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<SipClientTransaction>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_1C51F5698(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      long long v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *long long v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            long long v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          long long v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    long long v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<SipClientTransaction>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v6 = (void *)(a1 + 24);
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    long long v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (std::string::size_type i = *v13; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  memset(v25, 0, sizeof(v25));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<SipClientTransaction>> const&>(a1, v8, a3, v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v12);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v6;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1C51F5B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<SipClientTransaction>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_1C51F5BF4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)) ^ v5);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

std::string *std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::unordered_map<std::string,std::shared_ptr<SipServerTransaction>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (std::string::size_type i = *(unsigned __int8 **)(a2 + 16); i; std::string::size_type i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<SipServerTransaction>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_1C51F5E58(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<SipServerTransaction>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unint64_t v6 = (void *)(a1 + 24);
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    long long v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (std::string::size_type i = *v13; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  memset(v25, 0, sizeof(v25));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<SipServerTransaction>> const&>(a1, v8, a3, v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v12);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v6;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1C51F60E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<SipServerTransaction>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_1C51F6168(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  std::string::size_type v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        std::string::size_type v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      std::string::size_type v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint8x8_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<unsigned int>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  std::string::size_type v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      long long v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), std::string::size_type v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unsigned int v9 = (uint64_t **)a2[2];
          }
          else
          {
            unsigned int v9 = (uint64_t **)v2[1];
            uint8x8_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              _OWORD v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            const void *v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), std::string::size_type v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *std::string::size_type v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__function::__func<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F20B3478;
  return result;
}

void std::__function::__func<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F20B3478;
}

uint64_t std::__function::__func<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(void)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

uint64_t *std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C878E320](v2, 0x1012C40EC159624);
  }
  return a1;
}

uint64_t *dispatch::async<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>(dispatch_queue_s *,std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>)::{lambda(void *)#1}::__invoke(IMSClientManager *a1)
{
  long long v4 = a1;
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  uint64_t v2 = *((void *)__p + 25);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "UserTriggered");
  xpc_object_t object = xpc_null_create();
  IMSCallManager::terminateLazuli(v2, (uint64_t)a1, (uint64_t)&__p, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v8 < 0) {
    operator delete(__p);
  }
  return std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v4);
}

void sub_1C51F6638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  xpc_object_t object = 0;
  if (a17 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<SipLazuliManager::handleOutgoingMessageSuccess(SipUri const&,std::string const&,unsigned int,std::string const&,BOOL,BOOL)::$_0>(dispatch_queue_s *,std::unique_ptr<SipLazuliManager::handleOutgoingMessageSuccess(SipUri const&,std::string const&,unsigned int,std::string const&,BOOL,BOOL)::$_0,std::default_delete<SipLazuliManager::handleOutgoingMessageSuccess(SipUri const&,std::string const&,unsigned int,std::string const&,BOOL,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(IMSClientManager *a1)
{
  long long v4 = a1;
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  uint64_t v2 = *((void *)__p + 25);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "UserTriggered");
  xpc_object_t object = xpc_null_create();
  IMSCallManager::terminateLazuli(v2, (uint64_t)a1, (uint64_t)&__p, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v8 < 0) {
    operator delete(__p);
  }
  return std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v4);
}

void sub_1C51F6714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  xpc_object_t object = 0;
  if (a17 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<SipLazuliManager::handleOutgoingMessageError(SipUri const&,std::string const&,unsigned int,ImsResult)::$_0>(dispatch_queue_s *,std::unique_ptr<SipLazuliManager::handleOutgoingMessageError(SipUri const&,std::string const&,unsigned int,ImsResult)::$_0,std::default_delete<SipLazuliManager::handleOutgoingMessageError(SipUri const&,std::string const&,unsigned int,ImsResult)::$_0>>)::{lambda(void *)#1}::__invoke(IMSClientManager *a1)
{
  long long v4 = a1;
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  uint64_t v2 = *((void *)__p + 25);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "MediaTimeout");
  xpc_object_t object = xpc_null_create();
  IMSCallManager::terminateLazuli(v2, (uint64_t)a1, (uint64_t)&__p, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v8 < 0) {
    operator delete(__p);
  }
  return std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v4);
}

void sub_1C51F67F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  xpc_object_t object = 0;
  if (a17 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipLazuliManager::OutgoingPager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B34F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipLazuliManager::OutgoingPager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B34F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<SipLazuliManager::OutgoingPager>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 128);
  if (*(_DWORD *)(a1 + 152)) {
    ImsPowerAssertion::deinitialize(a1 + 128);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 104);
  if (v4)
  {
    std::string::size_type v5 = *(std::__shared_weak_count **)(v4 + 360);
    *(void *)(v4 + 352) = 0;
    *(void *)(v4 + 360) = 0;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  ImsPowerAssertion::~ImsPowerAssertion(v2);
  int v6 = *(std::__shared_weak_count **)(a1 + 112);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

uint64_t *std::unique_ptr<SipLazuliManager::processLargeMsgQueue(void)::$_0,std::default_delete<SipLazuliManager::processLargeMsgQueue(void)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    LazuliSendParams::~LazuliSendParams((void **)(v2 + 16));
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x1C878E320](v2, 0x1032C408FF3E7C9);
  }
  return a1;
}

void LazuliSendParams::LazuliSendParams(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = a2[6];
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((void *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
  }
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(this[6].__r_.__value_.__r.__words, *((const void **)a2 + 18), *((void *)a2 + 19), *((void *)a2 + 19) - *((void *)a2 + 18));
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(this + 7, *((const std::string::value_type **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((void *)a2 + 23);
    *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v10;
  }
  if (*((char *)a2 + 215) < 0)
  {
    std::string::__init_copy_ctor_external(this + 8, *((const std::string::value_type **)a2 + 24), *((void *)a2 + 25));
  }
  else
  {
    long long v11 = a2[12];
    this[8].__r_.__value_.__r.__words[2] = *((void *)a2 + 26);
    *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v11;
  }
  this[9].__r_.__value_.__r.__words[0] = *((void *)a2 + 27);
  if (*((char *)a2 + 247) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 224), *((const std::string::value_type **)a2 + 28), *((void *)a2 + 29));
  }
  else
  {
    long long v12 = a2[14];
    this[10].__r_.__value_.__r.__words[0] = *((void *)a2 + 30);
    *(_OWORD *)&this[9].__r_.__value_.__r.__words[1] = v12;
  }
  if (*((char *)a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 248), *((const std::string::value_type **)a2 + 31), *((void *)a2 + 32));
  }
  else
  {
    long long v13 = *(long long *)((char *)a2 + 248);
    this[11].__r_.__value_.__r.__words[0] = *((void *)a2 + 33);
    *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = v13;
  }
  if (*((char *)a2 + 295) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 272), *((const std::string::value_type **)a2 + 34), *((void *)a2 + 35));
  }
  else
  {
    long long v14 = a2[17];
    this[12].__r_.__value_.__r.__words[0] = *((void *)a2 + 36);
    *(_OWORD *)&this[11].__r_.__value_.__r.__words[1] = v14;
  }
  unint64_t v15 = (std::string *)((char *)this + 296);
  if (*((char *)a2 + 319) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *((const std::string::value_type **)a2 + 37), *((void *)a2 + 38));
  }
  else
  {
    long long v16 = *(long long *)((char *)a2 + 296);
    this[13].__r_.__value_.__r.__words[0] = *((void *)a2 + 39);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
}

void sub_1C51F6C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12)
{
  if (*(char *)(v12 + 295) < 0) {
    operator delete(*v15);
  }
  if (*(char *)(v12 + 271) < 0) {
    operator delete(*v14);
  }
  if (*(char *)(v12 + 247) < 0) {
    operator delete(*v13);
  }
  if (*(char *)(v12 + 215) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v12 + 191) < 0) {
    operator delete(*v19);
  }
  BOOL v22 = *v18;
  if (*v18)
  {
    *(void *)(v12 + 152) = v22;
    operator delete(v22);
  }
  if (*(char *)(v12 + 143) < 0) {
    operator delete(*v17);
  }
  if (*(char *)(v12 + 119) < 0) {
    operator delete(*v16);
  }
  if (*(char *)(v12 + 95) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v12 + 71) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v12 + 47) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *dispatch::async<SipLazuliManager::processLargeMsgQueue(void)::$_0>(dispatch_queue_s *,std::unique_ptr<SipLazuliManager::processLargeMsgQueue(void)::$_0,std::default_delete<SipLazuliManager::processLargeMsgQueue(void)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  long long v7 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    uint64_t v3 = (IMSClientManager *)std::__shared_weak_count::lock(v2);
    long long v4 = (std::__shared_weak_count *)v3;
    if (v3 && *a1)
    {
      IMSClientManager::instance(v3);
      IPTelephonyManager::getInstance((uint64_t *)&v10);
      IMSCallManager::initializeMOLazuliSession(*((IMSCallManager **)v10 + 25), (const LazuliSendParams *)(a1 + 2), 0, 0);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
LABEL_12:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      return std::unique_ptr<SipLazuliManager::processLargeMsgQueue(void)::$_0,std::default_delete<SipLazuliManager::processLargeMsgQueue(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
    }
  }
  else
  {
    long long v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "laz.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v5 = ims::error((uint64_t)&v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Instance lost. Stack teardown?", 30);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v10);
  }
  if (v4) {
    goto LABEL_12;
  }
  return std::unique_ptr<SipLazuliManager::processLargeMsgQueue(void)::$_0,std::default_delete<SipLazuliManager::processLargeMsgQueue(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_1C51F6EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, std::__shared_weak_count *a18, int a19, __int16 a20,char a21,char a22)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  std::unique_ptr<SipLazuliManager::processLargeMsgQueue(void)::$_0,std::default_delete<SipLazuliManager::processLargeMsgQueue(void)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, long long **a3)
{
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  long long v7 = a1 + 1;
  long long v8 = a1 + 1;
  if (!v5) {
    goto LABEL_10;
  }
  long long v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      long long v8 = (uint64_t **)v5;
      long long v10 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v8;
      long long v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0) {
      break;
    }
    long long v7 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  long long v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    char v12 = *a3;
    uint64_t v19 = 0;
    long long v13 = (uint64_t *)operator new(0x50uLL);
    v18[0] = v13;
    v18[1] = v6;
    long long v14 = (std::string *)(v13 + 4);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v15 = *v12;
      v13[6] = *((void *)v12 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    v13[7] = (uint64_t)(v13 + 7);
    v13[8] = (uint64_t)(v13 + 7);
    v13[9] = 0;
    LOBYTE(v19) = 1;
    uint64_t *v13 = 0;
    v13[1] = 0;
    void v13[2] = (uint64_t)v8;
    *long long v7 = v13;
    long long v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      long long v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    long long v11 = (uint64_t *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1C51F70B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::OutgoingMsrp>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void *std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B3548;
  size_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B3548;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20B3548;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20B3548;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    size_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      size_t v7 = v6;
      if (a1[2])
      {
        uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
        int v9 = (char)v8;
        if ((v8 & 0x80u) != 0) {
          uint64_t v8 = *(void *)(a2 + 8);
        }
        if (v8 == 23
          && (v9 >= 0 ? (long long v10 = (uint64_t *)a2) : (long long v10 = *(uint64_t **)a2),
              (uint64_t v11 = *v10, v12 = v10[1], v13 = *(uint64_t *)((char *)v10 + 15), v11 == 0x3330357265676150)
            ? (BOOL v14 = v12 == 0x7466417972746552)
            : (BOOL v14 = 0),
              v14 ? (BOOL v15 = v13 == 0x72656D6954726574) : (BOOL v15 = 0),
              v15))
        {
          uint64_t v20 = v5 + 32;
          uint64_t v19 = *(void *)(v5 + 32);
          if (*(void *)(v5 + 336))
          {
            uint64_t v21 = (*(uint64_t (**)(uint64_t))(v19 + 64))(v5 + 32);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v5 + 32, v21);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Retrying pager MESSAGE again as recommended by Server", 53);
            *(unsigned char *)(v21 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v21 + 17) = 0;
            uint64_t v23 = *(void *)(v5 + 336);
            uint64_t v22 = *(void *)(v5 + 344);
            if (v22) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v24 = *(std::__shared_weak_count **)(v5 + 328);
            *(void *)(v5 + 320) = v23;
            *(void *)(v5 + 328) = v22;
            if (v24) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            }
            uint64_t v25 = *(std::__shared_weak_count **)(v5 + 344);
            *(void *)(v5 + 336) = 0;
            *(void *)(v5 + 344) = 0;
            if (v25) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            }
            SipLazuliManager::OutgoingPager::send(*(std::chrono::steady_clock::time_point **)(v5 + 320));
          }
          else
          {
            uint64_t v26 = (*(uint64_t (**)(uint64_t))(v19 + 48))(v5 + 32);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v5 + 32, v26);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"Lost track of previous throttled pager MESSAGE. Processing send queue...", 72);
            *(unsigned char *)(v26 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v26 + 17) = 0;
            SipLazuliManager::processSendQueue((SipLazuliManager *)v5);
          }
        }
        else
        {
          uint64_t v17 = *(void *)(v5 + 32);
          uint64_t v16 = v5 + 32;
          uint64_t v18 = (*(uint64_t (**)(uint64_t))(v17 + 48))(v16);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Timer fired for unknown id ", 27);
          *(unsigned char *)(v18 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 32))(v18, a2);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v18 + 17) = 0;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C51F76CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  long long v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void ***std::unique_ptr<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0,std::default_delete<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0>>::~unique_ptr[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    LazuliSendParams::~LazuliSendParams(v2);
    MEMORY[0x1C878E320]();
  }
  return a1;
}

void ***dispatch::async<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0>(dispatch_queue_s *,std::unique_ptr<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0,std::default_delete<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = (void **)a1;
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v4);
  IMSCallManager::initializeMOLazuliSession(*(IMSCallManager **)(v4 + 200), (const LazuliSendParams *)a1, 0, *(unsigned char *)(a1 + 320));
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return std::unique_ptr<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0,std::default_delete<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0>>::~unique_ptr[abi:ne180100](&v3);
}

void sub_1C51F7960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::unique_ptr<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0,std::default_delete<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, long long **a3)
{
  unint64_t v6 = a1 + 1;
  int8x8_t v5 = a1[1];
  uint8x8_t v7 = a1 + 1;
  unint64_t v8 = a1 + 1;
  if (!v5) {
    goto LABEL_10;
  }
  uint8x8_t v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      unint64_t v8 = (uint64_t **)v5;
      long long v10 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      int8x8_t v5 = *v8;
      uint8x8_t v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0) {
      break;
    }
    uint8x8_t v7 = v8 + 1;
    int8x8_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  uint64_t v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    uint64_t v12 = *a3;
    uint64_t v19 = 0;
    unint64_t v13 = (uint64_t *)operator new(0x50uLL);
    v18[0] = v13;
    v18[1] = v6;
    BOOL v14 = (std::string *)(v13 + 4);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v15 = *v12;
      v13[6] = *((void *)v12 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    v13[7] = (uint64_t)(v13 + 7);
    v13[8] = (uint64_t)(v13 + 7);
    v13[9] = 0;
    LOBYTE(v19) = 1;
    uint64_t *v13 = 0;
    v13[1] = 0;
    void v13[2] = (uint64_t)v8;
    *uint8x8_t v7 = v13;
    uint64_t v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      unint64_t v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    uint64_t v11 = (uint64_t *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1C51F7ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::Participant>>,0>(v1 + 4);
    }
    operator delete(v1);
  }
}

char *std::__list_imp<SipLazuliManager::Participant>::__create_node[abi:ne180100]<std::string const&,std::string const&,std::string const&,SipLazuliManager::Participant::Action>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = (char *)operator new(0x60uLL);
  unint64_t v9 = v8;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v8 + 16), *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a1;
    *((void *)v8 + 4) = *(void *)(a1 + 16);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v9 + 40), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)(v9 + 40) = *(_OWORD *)a2;
    *((void *)v9 + 7) = *(void *)(a2 + 16);
  }
  long long v10 = (std::string *)(v9 + 64);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v9 + 10) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v9 + 22) = *a4;
  return v9;
}

void sub_1C51F7C20(_Unwind_Exception *a1)
{
  if (v1[63] < 0) {
    operator delete(*v3);
  }
  if (v1[39] < 0) {
    operator delete(*v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void **std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(uint64_t a1, void **a2)
{
  uint64_t v2 = (void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int8x8_t v5 = (void **)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      uint8x8_t v7 = v3;
    }
    else {
      uint8x8_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      int8x8_t v5 = (void **)v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

void std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::__erase_unique<std::string>(void ***a1, void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (void ***)v3)
  {
    uint64_t v4 = (uint64_t *)v3;
    int8x8_t v5 = (void **)v3[1];
    if (v5)
    {
      do
      {
        char v6 = v5;
        int8x8_t v5 = (void **)*v5;
      }
      while (v5);
    }
    else
    {
      uint8x8_t v7 = v3;
      do
      {
        char v6 = (void **)v7[2];
        BOOL v8 = *v6 == v7;
        uint8x8_t v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3) {
      *a1 = v6;
    }
    unint64_t v9 = (uint64_t *)a1[1];
    a1[2] = (void **)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::OutgoingMsrp>>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  char v6 = (uint64_t **)v3[2];
  uint8x8_t v7 = *v6;
  if (*v6 == v3)
  {
    *char v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint8x8_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint8x8_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        uint64_t result = v7;
      }
      uint8x8_t v7 = *(uint64_t **)v12;
    }
    uint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    uint64_t v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        uint64_t v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        uint64_t *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        uint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      uint64_t v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      void v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    uint8x8_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    unint64_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    void v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    uint64_t *v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    uint8x8_t v7 = *(uint64_t **)(*v7 + 8);
  }
  long long v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  uint64_t v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    long long v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *uint8x8_t v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    uint64_t v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  void v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  uint64_t *v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::__erase_unique<std::string>(void ***a1, void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (void ***)v3)
  {
    uint64_t v4 = v3;
    int v5 = (void **)v3[1];
    if (v5)
    {
      do
      {
        char v6 = v5;
        int v5 = (void **)*v5;
      }
      while (v5);
    }
    else
    {
      uint8x8_t v7 = v3;
      do
      {
        char v6 = (void **)v7[2];
        BOOL v8 = *v6 == v7;
        uint8x8_t v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3) {
      *a1 = v6;
    }
    uint64_t v9 = (uint64_t *)a1[1];
    a1[2] = (void **)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, (uint64_t *)v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::Participant>>,0>(v4 + 4);
    operator delete(v4);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  char v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint8x8_t v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    uint8x8_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t a1, void *a2, void **a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint8x8_t v7 = v4;
        BOOL v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        int v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      int v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint8x8_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  char v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint8x8_t v7 = (std::string *)(v6 + 4);
  BOOL v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C51F83F4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  char v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t SipStringHeader::SipStringHeader(uint64_t a1, const std::string *a2, const std::string *a3)
{
  uint64_t v5 = SipHeader::SipHeader(a1, a2);
  *(void *)uint64_t v5 = &unk_1F20B37F8;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(unsigned char *)(v5 + 88) = 0;
  std::string::operator=((std::string *)(v5 + 64), a3);
  return a1;
}

void sub_1C51F8544(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  SipHeader::~SipHeader((void **)v1);
  _Unwind_Resume(a1);
}

void SipHeader::~SipHeader(void **this)
{
  *this = &unk_1F20B9848;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void SipStringHeader::SipStringHeader(SipStringHeader *this, const SipStringHeader *a2)
{
  SipHeader::SipHeader(this, a2);
  void *v4 = &unk_1F20B37F8;
  uint64_t v5 = (std::string *)(v4 + 8);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 4);
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 10);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((unsigned char *)this + 88) = 0;
}

void sub_1C51F863C(_Unwind_Exception *a1)
{
  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

uint64_t SipStringHeader::encodeValue(SipStringHeader *this, ImsOutStream *a2)
{
  if (*((unsigned char *)this + 88))
  {
    ObfuscatedString::ObfuscatedString((uint64_t)v4, (const std::string *)((char *)this + 64));
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 56))(a2, v4);
    if (v7 < 0) {
      operator delete(__p);
    }
    if (v5 < 0) {
      operator delete(v4[0]);
    }
  }
  else
  {
    (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 64);
  }
  return 1;
}

void sub_1C51F870C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t SipStringHeader::valueAsString(uint64_t a1, std::string *this)
{
  std::string::operator=(this, (const std::string *)(a1 + 64));
  return 1;
}

uint64_t SipStringHeader::setValueFromString(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 64), a2);
  return 1;
}

void SipStringHeader::~SipStringHeader(void **this)
{
  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

std::string *SipHeader::loggableName@<X0>(SipHeader *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 8));
}

void SipStringHeader::clone(SipStringHeader *this)
{
}

void sub_1C51F8890(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40EE8ABE80);
  _Unwind_Resume(a1);
}

uint64_t SipHeader::allowsDuplicates(SipHeader *this)
{
  return 0;
}

uint64_t SipHeader::allowsMerging(SipHeader *this)
{
  return 0;
}

uint64_t SipHeader::mergeHeader(SipHeader *this, const SipHeader *a2)
{
  return 0;
}

uint64_t XmlParserGenericItem::XmlParserGenericItem(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_1F20C81E8;
  bambi::XmlTreeItem::XmlTreeItem(a1 + 8, a2, 0);
  *(void *)a1 = &unk_1F20B3890;
  *(void *)(a1 + 8) = &unk_1F20B3910;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)a2);
  return a1;
}

void sub_1C51F89C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BOOL v8 = *v6;
  if (*v6)
  {
    *(void *)(v3 + 168) = v8;
    operator delete(v8);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5, *(void **)(v3 + 144));
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v3 + 111) < 0) {
    operator delete(*(void **)(v3 + 88));
  }
  if (*(char *)(v3 + 87) < 0) {
    operator delete(*v4);
  }
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  _Unwind_Resume(a1);
}

void XmlParserGenericItem::XmlParserGenericItem(XmlParserGenericItem *this, const XmlParserGenericItem *a2)
{
  *(void *)this = &unk_1F20C81E8;
  uint64_t v4 = (const std::string *)((char *)a2 + 64);
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)this + 8, (long long *)a2 + 4, 0);
  *(void *)this = &unk_1F20B3890;
  *((void *)this + 1) = &unk_1F20B3910;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 18) = 0;
  *((void *)this + 17) = (char *)this + 144;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 16) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  std::string::operator=((std::string *)((char *)this + 64), v4);
  std::string::operator=((std::string *)((char *)this + 88), (const std::string *)((char *)a2 + 88));
  if (this != a2)
  {
    std::vector<bambi::XmlParserNamespace>::__assign_with_size[abi:ne180100]<bambi::XmlParserNamespace*,bambi::XmlParserNamespace*>((uint64_t)this + 112, *((std::string **)a2 + 14), *((std::string **)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 4));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 17, *((long long **)a2 + 17), (long long *)a2 + 9);
  }
  if (*((void *)a2 + 20) != *((void *)a2 + 21)) {
    operator new();
  }
}

void sub_1C51F8BB4(_Unwind_Exception *a1, void **a2, ...)
{
  va_start(va, a2);
  BOOL v8 = *v6;
  if (*v6)
  {
    *(void *)(v3 + 168) = v8;
    operator delete(v8);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5, *(void **)(v3 + 144));
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v3 + 111) < 0) {
    operator delete(*a2);
  }
  if (*(char *)(v3 + 87) < 0) {
    operator delete(*v4);
  }
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  _Unwind_Resume(a1);
}

void XmlParserGenericItem::addChildItem(XmlParserGenericItem *this, XmlParserGenericItem *a2)
{
  unint64_t v6 = *((void *)this + 22);
  uint64_t v4 = (char *)this + 176;
  unint64_t v5 = v6;
  char v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    long long v9 = (void **)(v4 - 16);
    uint64_t v10 = *((void *)v4 - 2);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)v4, v14);
    }
    else {
      long long v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = a2;
    BOOL v8 = v16 + 8;
    uint64_t v19 = (char *)*((void *)this + 20);
    uint64_t v18 = (char *)*((void *)this + 21);
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*v9;
    }
    *((void *)this + 20) = v16;
    *((void *)this + 21) = v8;
    *((void *)this + 22) = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *char v7 = a2;
    BOOL v8 = v7 + 1;
  }
  *((void *)this + 21) = v8;
}

void XmlParserGenericItem::~XmlParserGenericItem(XmlParserGenericItem *this)
{
  *(void *)this = &unk_1F20B3890;
  uint64_t v2 = (void **)((char *)this + 8);
  *((void *)this + 1) = &unk_1F20B3910;
  uint64_t v3 = (void *)*((void *)this + 20);
  uint64_t v4 = (void *)*((void *)this + 21);
  if (v3 != v4)
  {
    do
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      ++v3;
    }
    while (v3 != v4);
    uint64_t v3 = (void *)*((void *)this + 20);
  }
  if (v3)
  {
    *((void *)this + 21) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 136, *((void **)this + 18));
  unint64_t v5 = (void **)((char *)this + 112);
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  bambi::XmlTreeItem::~XmlTreeItem(v2);
}

{
  uint64_t vars8;

  XmlParserGenericItem::~XmlParserGenericItem(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'XmlParserGenericItem::~XmlParserGenericItem(XmlParserGenericItem *this)
{
}

{
  uint64_t vars8;

  XmlParserGenericItem::~XmlParserGenericItem((XmlParserGenericItem *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

std::string *XmlParserGenericItem::setName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 64), a2);
}

std::string *XmlParserGenericItem::setText(uint64_t a1, int a2, std::string *__str)
{
  return std::string::operator=((std::string *)(a1 + 88), __str);
}

std::string *XmlParserGenericItem::setAttribute(uint64_t a1, long long *a2, const std::string *a3)
{
  unint64_t v6 = a2;
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 136), (void **)a2, (uint64_t)&std::piecewise_construct, &v6);
  return std::string::operator=((std::string *)(v4 + 7), a3);
}

BOOL XmlParserGenericItem::getAttribute(uint64_t a1, void **a2, std::string *a3)
{
  unint64_t v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 136, a2);
  unint64_t v6 = v5;
  char v7 = (void **)(a1 + 144);
  if (v7 != v5) {
    std::string::operator=(a3, (const std::string *)(v5 + 7));
  }
  return v7 != v6;
}

void XmlParserGenericItem::setNamespace(uint64_t a1, std::string **a2)
{
  uint64_t v2 = a1 + 112;
  if ((std::string **)v2 != a2) {
    std::vector<bambi::XmlParserNamespace>::__assign_with_size[abi:ne180100]<bambi::XmlParserNamespace*,bambi::XmlParserNamespace*>(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 4));
  }
}

void XmlParserGenericItem::createChild()
{
}

void sub_1C51F9098(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C403C8F4F1BLL);
  _Unwind_Resume(a1);
}

uint64_t XmlParserGenericItem::firstChildAtPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v6 = std::string::find((const std::string *)a2, 47, 0);
  if (v6 == -1)
  {
    return XmlParserGenericItem::firstChildWithName(a1, (unsigned __int8 **)a2, a3);
  }
  else
  {
    unint64_t v7 = v6;
    memset(&v13, 0, sizeof(v13));
    std::string::basic_string(&v13, (const std::string *)a2, 0, v6, (std::allocator<char> *)&v12);
    uint64_t ChildWithName = XmlParserGenericItem::firstChildWithName(a1, (unsigned __int8 **)&v13, a3);
    uint64_t v9 = ChildWithName;
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    if (v7 < v10 - 1)
    {
      if (ChildWithName)
      {
        std::string::basic_string(&v12, (const std::string *)a2, v7 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
        uint64_t v9 = XmlParserGenericItem::firstChildAtPath(v9, &v12, a3);
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        if (a3) {
          operator new();
        }
        uint64_t v9 = 0;
      }
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    return v9;
  }
}

void sub_1C51F9230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  MEMORY[0x1C878E320](v21, 0x10B3C403C8F4F1BLL);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void XmlParserGenericItem::addChildWithName()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str);
  XmlParserGenericItem::addChildWithNameAndText();
}

void sub_1C51F92EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XmlParserGenericItem::addChildWithNameAndText()
{
}

void sub_1C51F93B4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C403C8F4F1BLL);
  _Unwind_Resume(a1);
}

uint64_t XmlParserGenericItem::firstChildWithName(uint64_t a1, unsigned __int8 **a2, int a3)
{
  uint64_t v4 = *(uint64_t **)(a1 + 160);
  unint64_t v5 = *(uint64_t **)(a1 + 168);
  if (v4 != v5)
  {
    char v6 = *((unsigned char *)a2 + 23);
    if (v6 >= 0) {
      unint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      unint64_t v7 = a2[1];
    }
    if (v6 >= 0) {
      BOOL v8 = (unsigned __int8 *)a2;
    }
    else {
      BOOL v8 = *a2;
    }
    do
    {
      uint64_t v9 = *v4;
      uint64_t v10 = *(unsigned __int8 *)(*v4 + 87);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = (unsigned __int8 *)*(unsigned __int8 *)(*v4 + 87);
      }
      else {
        uint64_t v11 = *(unsigned __int8 **)(*v4 + 72);
      }
      if (v11 == v7)
      {
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v9 + 64), v8, *(void *)(*v4 + 72))) {
            return v9;
          }
        }
        else
        {
          if (!*(unsigned char *)(*v4 + 87)) {
            return v9;
          }
          uint64_t v12 = 0;
          while (*(unsigned __int8 *)(v9 + v12 + 64) == v8[v12])
          {
            if (v10 == ++v12) {
              return v9;
            }
          }
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  if (a3)
  {
    XmlParserGenericItem::addChildWithName();
  }
  return 0;
}

void XmlParserGenericItem::constructTree(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  bambi::XmlTreeItem::makeNode(a1);
}

void sub_1C51F99EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v25 + 8);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'XmlParserGenericItem::constructTree(void *a1@<X8>)
{
}

void std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<bambi::XmlParserNamespace>::__assign_with_size[abi:ne180100]<bambi::XmlParserNamespace*,bambi::XmlParserNamespace*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 4) < a4)
  {
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      uint64_t v12 = *(std::string **)a1;
      if ((std::string *)v11 != v10)
      {
        do
        {
          v11 -= 48;
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v11);
        }
        while ((std::string *)v11 != v10);
        uint64_t v12 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0x555555555555555) {
      goto LABEL_21;
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v13 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v14;
    if (v15 > 0x555555555555555) {
LABEL_21:
    }
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>>(v9, v15);
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = &v16[48 * v17];
    uint64_t v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>,bambi::XmlParserNamespace*,bambi::XmlParserNamespace*,bambi::XmlParserNamespace*>((uint64_t)__str, (uint64_t)a3, (uint64_t)v16);
    goto LABEL_17;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v10) >> 4) < a4)
  {
    uint64_t v19 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v10) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<bambi::XmlParserNamespace *,bambi::XmlParserNamespace *,bambi::XmlParserNamespace *>(__str, v19, v10);
    uint64_t v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>,bambi::XmlParserNamespace*,bambi::XmlParserNamespace*,bambi::XmlParserNamespace*>((uint64_t)v19, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_17:
    *(void *)(a1 + 8) = v18;
    return;
  }
  uint64_t v20 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<bambi::XmlParserNamespace *,bambi::XmlParserNamespace *,bambi::XmlParserNamespace *>(__str, a3, v10);
  for (uint64_t i = *(void *)(a1 + 8);
        (std::string *)i != v20;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(i))
  {
    i -= 48;
  }
  *(void *)(a1 + 8) = v20;
}

void sub_1C51F9CCC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C51F9CD4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>,bambi::XmlParserNamespace*,bambi::XmlParserNamespace*,bambi::XmlParserNamespace*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = (std::string *)(a3 + v6);
      uint64_t v8 = (long long *)(a1 + v6);
      if (*(char *)(a1 + v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v9 = *v8;
        v7->__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      uint64_t v10 = (std::string *)(a3 + v6 + 24);
      uint64_t v11 = (const std::string::value_type **)(a1 + v6 + 24);
      if (*(char *)(a1 + v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *v11, *(void *)(a1 + v6 + 32));
      }
      else
      {
        long long v12 = *(_OWORD *)v11;
        *(void *)(a3 + v6 + 40) = *(void *)(a1 + v6 + 40);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
      }
      v6 += 48;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_1C51F9D94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + v2 + 23) < 0) {
    operator delete(*(void **)(v1 + v2));
  }
  if (v2)
  {
    uint64_t v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<bambi::XmlParserNamespace *,bambi::XmlParserNamespace *,bambi::XmlParserNamespace *>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    unint64_t v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      this += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return this;
}

void std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void std::__split_buffer<bambi::XmlTreeNs>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string, std::string>>::pointer begin = this->__begin_;
  for (std::__split_buffer<std::pair<std::string, std::string>>::pointer i = this->__end_; i != begin; std::__split_buffer<std::pair<std::string, std::string>>::pointer i = this->__end_)
  {
    this->__end_ = i - 1;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)&i[-1]);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

uint64_t bambi::XmlTreeNs::XmlTreeNs(uint64_t a1, const std::string *a2, const std::string *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  unint64_t v5 = (std::string *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  std::string::operator=((std::string *)a1, a2);
  std::string::operator=(v5, a3);
  return a1;
}

void sub_1C51F9F70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  unint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    unint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    unint64_t v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        long long v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          uint64_t v18 = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<unsigned int>::__insert_node_at(v5, v18, leaf_high, v17);
          uint64_t v17 = v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              long long v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          long long v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(v5, a2 + 2);
      unint64_t v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          unint64_t v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1C51FA11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v5 = (void *)v4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)(v4 + 32)) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(uint64_t **a1, long long *a2)
{
  memset(v7, 0, sizeof(v7));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, v7);
  uint64_t v6 = 0;
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v6, v7[0] + 4);
  std::__tree<unsigned int>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1C51FA2CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1C51FA340(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseAMRFormatParameters(uint64_t a1, __int16 a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  uint64_t v5 = parseAMRFormatParametersHelper(a1, a2, 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1C51FA3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t parseAMRFormatParametersHelper(uint64_t a1, __int16 a2, int a3, std::string *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  *(_OWORD *)uint64_t v28 = 0u;
  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)&v27, a2, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "\t ;");
  ims::tokenize(a4, &v31, (char *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v6 = v31;
  uint64_t v7 = v32;
  if (v31 == v32) {
    goto LABEL_35;
  }
  uint64_t v23 = a4;
  int v8 = 1;
  do
  {
    memset(__p, 0, 24);
    if (*(char *)(v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
    }
    else
    {
      long long v9 = *(_OWORD *)v6;
      __p[0].__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v9;
    }
    char v10 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __p[0].__r_.__value_.__l.__size_;
    }
    if (size)
    {
      BOOL v12 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? __p
          : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      unint64_t v13 = memchr(v12, 61, size);
      std::string::size_type v14 = v13 - (unsigned char *)v12;
      if (v13 && v14 != -1)
      {
        memset(&v26, 0, sizeof(v26));
        std::string::basic_string(&v26, __p, 0, v14, (std::allocator<char> *)&__str);
        memset(&__str, 0, sizeof(__str));
        std::string::basic_string(&__str, __p, v14 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v34);
        ims::chomp(&__str, "\r\n\t ;", 3);
        uint64_t v16 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&SDPParser::amrFormatParameters, (void **)&v26.__r_.__value_.__l.__data_);
        int v17 = (v16 == &qword_1EBBDB420) & v8;
        if (v16 != &qword_1EBBDB420 && ((v8 ^ 1) & 1) == 0)
        {
          uint64_t v34 = &v26;
          uint64_t v18 = (uint64_t (*)(long long *, std::string *))std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&SDPParser::amrFormatParameters, (void **)&v26.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v34)[7];
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v24, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else {
            std::string v24 = __str;
          }
          int v17 = v18(&v27, &v24);
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v24.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
        char v10 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        int v8 = v17;
      }
    }
    if (v10 < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    v6 += 24;
  }
  while (v6 != v7);
  if (v8)
  {
LABEL_35:
    SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)__p, (const SDPMediaFormatAMRParams *)&v27);
    int v36 = 1;
    SDPMediaFormatInfo::setSDPMediaFormatParams(a1, (uint64_t)__p);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)__p);
    uint64_t v19 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(&v26, "");
    uint64_t v20 = ims::error((uint64_t)__p, (uint64_t)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Failed to parse AMR codec with format parameters '", 50);
    *(unsigned char *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v20 + 32))(v20, v23);
    uint64_t v21 = *(void **)(v20 + 8);
    __str.__r_.__value_.__s.__data_[0] = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)&__str, 1);
    *(unsigned char *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v20 + 17) = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t v19 = 0;
  }
  *(void *)&long long v27 = &unk_1F20E5C78;
  if (SBYTE7(v29) < 0) {
    operator delete(v28[0]);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v19;
}

void sub_1C51FA7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  std::string __p = &a42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseAMRWBFormatParameters(uint64_t a1, __int16 a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  uint64_t v5 = parseAMRFormatParametersHelper(a1, a2, 1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1C51FA94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseEVSFormatParameters(uint64_t a1, __int16 a2, std::string *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)&v23, a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "\t ;");
  ims::tokenize(a3, &v31, (char *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v19 = a1;
  uint64_t v5 = v31;
  uint64_t v6 = v32;
  for (int i = 1; v5 != v6; v5 += 24)
  {
    memset(&__str, 0, sizeof(__str));
    if (*(char *)(v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)v5;
      __str.__r_.__value_.__r.__words[2] = *(void *)(v5 + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v8;
    }
    char v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v11 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      BOOL v12 = memchr(v11, 61, size);
      std::string::size_type v13 = v12 - (unsigned char *)v11;
      if (v12 && v13 != -1)
      {
        memset(&v22, 0, sizeof(v22));
        std::string::basic_string(&v22, &__str, 0, v13, (std::allocator<char> *)&v21);
        memset(&v21, 0, sizeof(v21));
        std::string::basic_string(&v21, &__str, v13 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v34);
        ims::chomp(&v21, "\r\n\t ;", 3);
        unint64_t v15 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&SDPParser::evsFormatParameters, (void **)&v22.__r_.__value_.__l.__data_);
        int v16 = (v15 == &qword_1EBBDB438) & i;
        if (v15 != &qword_1EBBDB438 && ((i ^ 1) & 1) == 0)
        {
          uint64_t v34 = &v22;
          int v17 = (uint64_t (*)(long long *, std::string *))std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&SDPParser::evsFormatParameters, (void **)&v22.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v34)[7];
          if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v20, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
          }
          else {
            std::string v20 = v21;
          }
          int v16 = v17(&v23, &v20);
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v20.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v21.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        char v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        int i = v16;
      }
    }
    if (v9 < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)&__str, (const SDPMediaFormatEVSParams *)&v23);
  int v36 = 2;
  SDPMediaFormatInfo::setSDPMediaFormatParams(v19, (uint64_t)&__str);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&__str);
  *(void *)&long long v23 = &unk_1F20E5C78;
  if (SBYTE7(v25) < 0) {
    operator delete(__p[0]);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  return i & 1;
}

void sub_1C51FAC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)(v48 - 224));
  if (a37 < 0) {
    operator delete(__p);
  }
  *(void *)(v48 - 224) = &a48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 224));
  _Unwind_Resume(a1);
}

BOOL SDPParser::parseDTMFFormatParameters(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v11, a2);
  v11[0] = &unk_1F20B39F0;
  std::__variant_detail::__alt<3ul,SDPMediaFormatDTMFParams>::__alt[abi:ne180100]<SDPMediaFormatDTMFParams>((uint64_t)v15, (uint64_t)v11);
  int v16 = 3;
  SDPMediaFormatInfo::setSDPMediaFormatParams(a1, (uint64_t)v15);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v15);
  v11[0] = &unk_1F20E5C78;
  if (v13 < 0) {
    operator delete(__p);
  }
  ims::chomp("\r\n\t ", a3, 3, v15);
  std::string::size_type size = HIBYTE(v15[0].__r_.__value_.__r.__words[2]);
  if ((v15[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v15[0].__r_.__value_.__l.__size_;
  }
  if (size == 4)
  {
    uint64_t v6 = (std::string *)v15[0].__r_.__value_.__r.__words[0];
    if ((v15[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v6 = v15;
    }
    BOOL v7 = LODWORD(v6->__r_.__value_.__l.__data_) == 892415280;
    if ((SHIBYTE(v15[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if (v7) {
        return v7;
      }
      goto LABEL_13;
    }
  }
  else
  {
    BOOL v7 = 0;
    if ((SHIBYTE(v15[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  operator delete(v15[0].__r_.__value_.__l.__data_);
  if (v7) {
    return v7;
  }
LABEL_13:
  std::string::basic_string[abi:ne180100]<0>(v15, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(v11, "");
  uint64_t v8 = ims::warn((uint64_t)v15, (uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"DTMF with unexpected format parameters parsed: '", 48);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a3);
  char v9 = *(void **)(v8 + 8);
  char v14 = 39;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v14, 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SHIBYTE(__p) < 0) {
    operator delete(v11[0]);
  }
  if (SHIBYTE(v15[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15[0].__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1C51FAF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SDPMediaFormatDTMFParams::~SDPMediaFormatDTMFParams(void **this)
{
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t SDPParser::parseTTYFormatParameters(uint64_t a1, __int16 a2, const std::string *__s)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v19 = 0;
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v7 = (const std::string *)__s->__r_.__value_.__r.__words[0];
    uint64_t size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    uint64_t size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    BOOL v7 = __s;
  }
  if (size >= 3)
  {
    uint64_t v8 = (char *)v7 + size;
    char v9 = (std::string *)v7;
    do
    {
      char v10 = (char *)memchr(v9, 99, size - 2);
      if (!v10) {
        break;
      }
      if (*(_WORD *)v10 == 28771 && v10[2] == 115)
      {
        int v12 = 0;
        if (v10 != v8 && v10 - (char *)v7 != -1)
        {
          memset(v28, 0, sizeof(v28));
          *(_OWORD *)long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v21 = 0u;
          std::string::basic_string(&v14, __s, v10 - (char *)v7 + 4, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v20);
          std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v21, (long long *)&v14);
          if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v14.__r_.__value_.__l.__data_);
          }
          MEMORY[0x1C878DFD0](&v21, &v19);
          *(void *)&long long v21 = *MEMORY[0x1E4FBA410];
          *(void *)((char *)&v21 + *(void *)(v21 - AVCAudioSession::~AVCAudioSession((AVCAudioSession *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
          *(void *)&long long v22 = MEMORY[0x1E4FBA470] + 16;
          if (SBYTE7(v27) < 0) {
            operator delete(v26[0]);
          }
          std::streambuf::~streambuf();
          std::istream::~istream();
          MEMORY[0x1C878E270]((char *)v28 + 8);
          int v12 = v19;
        }
        goto LABEL_13;
      }
      char v9 = (std::string *)(v10 + 1);
      uint64_t size = v8 - (char *)v9;
    }
    while (v8 - (char *)v9 >= 3);
  }
  int v12 = 0;
LABEL_13:
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v14, a2);
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E2998;
  int v17 = v12;
  uint64_t v18 = 0;
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v21, v16);
  *(void *)&long long v21 = &unk_1F20E2998;
  HIDWORD(v23) = v17;
  *(void *)&long long v24 = v18;
  DWORD2(v28[0]) = 4;
  SDPMediaFormatInfo::setSDPMediaFormatParams(a1, (uint64_t)&v21);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v21);
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E5C78;
  if (v15 < 0) {
    operator delete((void *)v14.__r_.__value_.__r.__words[2]);
  }
  return 1;
}

void sub_1C51FB360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

uint64_t *std::istringstream::basic_istringstream[abi:ne180100](uint64_t *a1, long long *a2)
{
  uint64_t v4 = MEMORY[0x1E4FBA490] + 64;
  a1[15] = MEMORY[0x1E4FBA490] + 64;
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA410] + 16);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA410] + 8);
  *a1 = v7;
  *(uint64_t *)((char *)a1 + *(void *)(v7 - AVCAudioSession::~AVCAudioSession((AVCAudioSession *)((char *)this - 24)) = v6;
  a1[1] = 0;
  uint64_t v8 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v8, a1 + 2);
  uint64_t v9 = MEMORY[0x1E4FBA490] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *a1 = v9;
  a1[15] = v4;
  std::stringbuf::basic_stringbuf[abi:ne180100](v5, a2, 8);
  return a1;
}

void sub_1C51FB530(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1C878E270](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA410];
  uint64_t v3 = *MEMORY[0x1E4FBA410];
  *(void *)a1 = *MEMORY[0x1E4FBA410];
  *(void *)(a1 + *(void *)(v3 - AVCAudioSession::~AVCAudioSession((AVCAudioSession *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270](a1 + 120);
  return a1;
}

uint64_t SDPParser::parseTTYRedFormatParameters(uint64_t a1, __int16 a2, std::string *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  __int16 v6 = 255;
  __int16 v13 = 255;
  std::string::size_type v7 = std::string::find(this, 47, 0);
  if (v7 != -1)
  {
    memset(v22, 0, 160);
    long long __p = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    std::string::basic_string(&v9, this, v7 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
    std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v15, (long long *)&v9);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    MEMORY[0x1C878DFE0](&v15, &v13);
    *(void *)&long long v15 = *MEMORY[0x1E4FBA410];
    *(void *)((char *)&v15 + *(void *)(v15 - AVCAudioSession::~AVCAudioSession((AVCAudioSession *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
    *(void *)&long long v16 = MEMORY[0x1E4FBA470] + 16;
    if (SBYTE7(v21) < 0) {
      operator delete((void *)__p);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1C878E270](&v22[2]);
    __int16 v6 = v13;
  }
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v9, a2);
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E2A10;
  __int16 v12 = v6;
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v15, v11);
  *(void *)&long long v15 = &unk_1F20E2A10;
  WORD5(v17) = v12;
  v22[2] = 5;
  SDPMediaFormatInfo::setSDPMediaFormatParams(a1, (uint64_t)&v15);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v15);
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E5C78;
  if (v10 < 0) {
    operator delete((void *)v9.__r_.__value_.__r.__words[2]);
  }
  return 1;
}

void sub_1C51FB8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  __int16 v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  __int16 v6 = a3 + 1;
  std::string::size_type v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *__int16 v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t v8 = (std::string *)(v7 + 32);
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  *((void *)v7 + 7) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C51FBAA0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void SDPMediaFormatAMRParams::SDPMediaFormatAMRParams(SDPMediaFormatAMRParams *this, const SDPMediaFormatAMRParams *a2)
{
  SDPMediaFormatParams::SDPMediaFormatParams(this, *((_WORD *)a2 + 20));
  *(void *)uint64_t v3 = &unk_1F20E2848;
  *(unsigned char *)(v3 + 42) = *((unsigned char *)a2 + 42);
  *(_WORD *)(v3 + 43) = *(_WORD *)((char *)a2 + 43);
  *(_DWORD *)(v3 + 46) = *(_DWORD *)((char *)a2 + 46);
  *(unsigned char *)(v3 + 50) = *((unsigned char *)a2 + 50);
  *(_WORD *)(v3 + 52) = *((_WORD *)a2 + 26);
  *(unsigned char *)(v3 + 54) = *((unsigned char *)a2 + 54);
  *(_WORD *)(v3 + 56) = *((_WORD *)a2 + 28);
  *(unsigned char *)(v3 + 58) = *((unsigned char *)a2 + 58);
  *(_WORD *)(v3 + 60) = *((_WORD *)a2 + 30);
  *(unsigned char *)(v3 + 62) = *((unsigned char *)a2 + 62);
  *(unsigned char *)(v3 + 63) = *((unsigned char *)a2 + 63);
}

void SDPMediaFormatParams::SDPMediaFormatParams(SDPMediaFormatParams *this, __int16 a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "fmtp");
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F20E5C78;
  uint64_t v4 = (std::string *)((char *)this + 16);
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void *)this + 4) = v6;
  }
  *(void *)this = &unk_1F20E28A8;
  *((_WORD *)this + 20) = a2;
}

void sub_1C51FBC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPField::valid(SDPField *this)
{
  return *((unsigned __int8 *)this + 8);
}

void SDPMediaFormatEVSParams::SDPMediaFormatEVSParams(SDPMediaFormatEVSParams *this, __int16 a2)
{
  SDPMediaFormatParams::SDPMediaFormatParams(this, a2);
  *(void *)uint64_t v2 = &unk_1F20E2920;
  *(_DWORD *)(v2 + 42) = 257;
  *(unsigned char *)(v2 + 46) = 0;
  *(_WORD *)(v2 + 48) = 220;
  *(int64x2_t *)(v2 + 56) = vdupq_n_s64(0x1FFE00uLL);
  *(void *)(v2 + 72) = 2096640;
  *(_WORD *)(v2 + 80) = 511;
  *(void *)(v2 + 84) = 0x600000006;
  *(_DWORD *)(v2 + 92) = 6;
  *(_DWORD *)(v2 + 96) = 257;
  *(void *)(v2 + 100) = 131074;
  *(unsigned char *)(v2 + 108) = 0;
  *(_WORD *)(v2 + 109) = 257;
  *(_WORD *)(v2 + 112) = 255;
}

void SDPMediaFormatEVSParams::SDPMediaFormatEVSParams(SDPMediaFormatEVSParams *this, const SDPMediaFormatEVSParams *a2)
{
  SDPMediaFormatParams::SDPMediaFormatParams(this, *((_WORD *)a2 + 20));
  *(void *)uint64_t v3 = &unk_1F20E2920;
  *(_DWORD *)(v3 + 42) = *(_DWORD *)((char *)a2 + 42);
  *(unsigned char *)(v3 + 46) = *((unsigned char *)a2 + 46);
  *(_WORD *)(v3 + 48) = *((_WORD *)a2 + 24);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)((char *)a2 + 56);
  *(void *)(v3 + 72) = *((void *)a2 + 9);
  *(_WORD *)(v3 + 80) = *((_WORD *)a2 + 40);
  *(void *)(v3 + 84) = *(void *)((char *)a2 + 84);
  *(_DWORD *)(v3 + 92) = *((_DWORD *)a2 + 23);
  *(_DWORD *)(v3 + 96) = *((_DWORD *)a2 + 24);
  *(_DWORD *)(v3 + 100) = *((_DWORD *)a2 + 25);
  *(_WORD *)(v3 + 104) = *((_WORD *)a2 + 52);
  *(_DWORD *)(v3 + 106) = *(_DWORD *)((char *)a2 + 106);
  *(unsigned char *)(v3 + 110) = *((unsigned char *)a2 + 110);
  *(_WORD *)(v3 + 112) = *((_WORD *)a2 + 56);
}

unsigned int *std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(unsigned int *a1)
{
  uint64_t v2 = a1[30];
  if (v2 != -1) {
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix
  }
     + v2))((int)&v4, (SDPMediaFormatUnknownParams *)a1);
  a1[30] = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS8_S9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(int a1, void **this)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS8_S9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS8_S9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS8_S9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS8_S9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS8_S9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

void SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams(void **this)
{
  *this = &unk_1F20B3A68;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams(this);
  JUMPOUT(0x1C878E320);
}

void SDPMediaFormatUnknownParams::formatParameters(SDPMediaFormatUnknownParams *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((void *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 8);
  }
}

BOOL SDPMediaFormatParams::printable(SDPMediaFormatParams *this)
{
  return *((unsigned __int16 *)this + 20) != 255;
}

uint64_t SDPMediaFormatParams::isOpenOffer(SDPMediaFormatParams *this)
{
  return 0;
}

uint64_t SDPMediaFormatParams::bandwidthAS(SDPMediaFormatParams *this)
{
  return 0;
}

void *SDPMediaFormatDTMFParams::formatParameters@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "0-15");
}

uint64_t std::__variant_detail::__alt<3ul,SDPMediaFormatDTMFParams>::__alt[abi:ne180100]<SDPMediaFormatDTMFParams>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)a1 = &unk_1F20E5C78;
  char v4 = (std::string *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 32);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(void *)a1 = &unk_1F20B39F0;
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  std::string::size_type v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *uint64_t v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t v8 = (std::string *)(v7 + 32);
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  *((void *)v7 + 7) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C51FC28C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, long long *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x1E4FBA470] + 16;
  long long v7 = *a2;
  *(void *)(v6 + 80) = *((void *)a2 + 2);
  *(_OWORD *)(v6 + 64) = v7;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(v6 + 88) = 0;
  *(_DWORD *)(v6 + 96) = a3;
  std::stringbuf::__init_buf_ptrs[abi:ne180100](v6);
  return a1;
}

void sub_1C51FC324(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    char v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    char v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        char v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t ImsSocket::_createSocketWithDispatch(uint64_t a1, int a2, dispatch_object_t *a3, uint64_t a4, int a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 40);
  *(_DWORD *)uint64_t v9 = a2;
  unint64_t v10 = (NSObject **)(a1 + 56);
  if (v10 == a3)
  {
    int v11 = a2;
  }
  else
  {
    ims::Dispatch::reset(v10, *a3);
    uint64_t v9 = *(void *)(a1 + 40);
    if (!v9) {
      goto LABEL_14;
    }
    int v11 = *(_DWORD *)v9;
  }
  if (v11 != -1)
  {
    v19[0] = 128;
    getsockname(v11, (sockaddr *)(v9 + 8), v19);
    *(_DWORD *)(a1 + 64) = *(unsigned __int8 *)(v9 + 9);
    IpAddress::createAddress((IpAddress *)(v9 + 8), (uint64_t)__p);
    __int16 v12 = *(std::__shared_weak_count **)(a1 + 32);
    __int16 v13 = __p[0];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)__p;
    if (v12)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      if (*(void *)(a1 + 24)) {
        goto LABEL_8;
      }
    }
    else if (v13)
    {
LABEL_8:
      if (a5)
      {
        ImsSocket::attachDispatchSource((ImsSocket *)a1, *(NSObject **)(a1 + 56), (uint64_t)v18);
        ImsResult::~ImsResult((ImsResult *)v18);
      }
      memset(uu, 0, sizeof(uu));
      if (*(char *)(a4 + 23) < 0)
      {
        if (!*(void *)(a4 + 8)) {
          goto LABEL_22;
        }
        char v14 = *(const char **)a4;
      }
      else
      {
        char v14 = (const char *)a4;
        if (!*(unsigned char *)(a4 + 23)) {
          goto LABEL_22;
        }
      }
      if (!uuid_parse(v14, uu))
      {
        if (setsockopt(a2, 0xFFFF, 4360, uu, 0x10u))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "net");
          std::string::basic_string[abi:ne180100]<0>(v19, "");
          uint64_t v17 = ims::debug((uint64_t)__p, (uint64_t)v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Failed to Set UUID ", 19);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "net");
          std::string::basic_string[abi:ne180100]<0>(v19, "");
          uint64_t v17 = ims::debug((uint64_t)__p, (uint64_t)v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Set UUID ", 9);
        }
        *(unsigned char *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 32))(v17, a4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" on socket fd=", 14);
        *(unsigned char *)(v17 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_23;
      }
LABEL_22:
      std::string::basic_string[abi:ne180100]<0>(__p, "net");
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      uint64_t v17 = ims::debug((uint64_t)__p, (uint64_t)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Failed to parse UUID ", 21);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 32))(v17, a4);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_23:
      *(unsigned char *)(v17 + 17) = 0;
      if (v20 < 0) {
        operator delete(*(void **)v19);
      }
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      ImsSocket::_setDscpOnSocket((ImsSocket *)a1, a2);
      return 1;
    }
  }
LABEL_14:
  std::string::basic_string[abi:ne180100]<0>(__p, "net");
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  uint64_t v15 = ims::error((uint64_t)__p, (uint64_t)v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"setLocalAddressFromSocket failed", 32);
  *(unsigned char *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v15 + 17) = 0;
  if (v20 < 0) {
    operator delete(*(void **)v19);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
  return 0;
}

void sub_1C51FC920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsSocket::attachDispatchSource(ImsSocket *this@<X0>, NSObject *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = a2;
  if (!a2) {
    char v3 = *((void *)this + 7);
  }
  int v6 = (int *)*((void *)this + 5);
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "net");
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    uint64_t v7 = ims::error((uint64_t)v24, (uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Unable to attach to NULL socket descriptor object", 49);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (!v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "net");
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    uint64_t v7 = ims::error((uint64_t)v24, (uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Unable to attach to NULL dispatch queue", 39);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (*((void *)v6 + 17))
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "net");
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    uint64_t v7 = ims::warn((uint64_t)v24, (uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"socket already attached to dispatch queue", 41);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *(unsigned char *)(v7 + 17) = 0;
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0x40000000;
    return;
  }
  uint64_t v9 = *((void *)this + 1);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v6 = (int *)*((void *)this + 5);
  }
  unint64_t v10 = dispatch_source_create(MEMORY[0x1E4F14478], *v6, 0, v3);
  *(void *)(*((void *)this + 5) + 136) = v10;
  if (v10)
  {
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 1174405120;
    handler[2] = ___ZN9ImsSocket20attachDispatchSourceEP16dispatch_queue_s_block_invoke;
    handler[3] = &__block_descriptor_tmp_28;
    handler[4] = this;
    handler[5] = v9;
    long long v21 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_source_set_event_handler(v10, handler);
    uint64_t v11 = *((void *)this + 5);
    __int16 v12 = (std::__shared_weak_count *)*((void *)this + 6);
    uint64_t v13 = v11;
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v13 = *((void *)this + 5);
    }
    char v14 = *(NSObject **)(v13 + 136);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 1174405120;
    v15[2] = ___ZN9ImsSocket20attachDispatchSourceEP16dispatch_queue_s_block_invoke_26;
    v15[3] = &__block_descriptor_tmp_29_0;
    v15[4] = v11;
    long long v16 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = v9;
    long long v18 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    long long v19 = v14;
    dispatch_source_set_cancel_handler(v14, v15);
    dispatch_resume(*(dispatch_object_t *)(*((void *)this + 5) + 136));
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v21) {
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1C51FCD70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 65) < 0) {
    operator delete(*(void **)(v1 - 88));
  }
  _Unwind_Resume(exception_object);
}

void ImsSocket::_setDscpOnSocket(ImsSocket *this, int a2)
{
  char v3 = (_DWORD *)((char *)this + 68);
  int v16 = *((_DWORD *)this + 17);
  int v4 = *((_DWORD *)this + 16);
  if (v4 == 30)
  {
    if (setsockopt(a2, 41, 36, &v16, 4u))
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "net");
      std::string::basic_string[abi:ne180100]<0>(v12, "");
      uint64_t v5 = ims::debug((uint64_t)v14, (uint64_t)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Failed to Set IPV6_TCLASS on IPv6 socket fd=", 44);
      *(unsigned char *)(v5 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v5 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" DSCP = 0x", 10);
      *(unsigned char *)(v5 + 17) = 0;
      uint64_t v7 = *(void *)(v5 + 8) + *(void *)(**(void **)(v5 + 8) - 24);
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(v7 + 8) & 0xFFFFFFB5 | 8;
      *(unsigned char *)(v5 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_7;
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "net");
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    uint64_t v8 = ims::debug((uint64_t)v14, (uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Set IPV6_TCLASS to ", 19);
    *(unsigned char *)(v8 + 17) = 0;
    ims::toString<DscpClass>(v3, __p);
    (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" on IPv6 socket fd=", 19);
    *(unsigned char *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_10:
    *(unsigned char *)(v8 + 17) = 0;
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_12;
  }
  if (v4 != 2) {
    goto LABEL_16;
  }
  if (!setsockopt(a2, 0, 3, &v16, 4u))
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "net");
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    uint64_t v8 = ims::debug((uint64_t)v14, (uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Set IP_TOS to ", 14);
    *(unsigned char *)(v8 + 17) = 0;
    ims::toString<DscpClass>(v3, __p);
    (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" on IPv4 socket fd=", 19);
    *(unsigned char *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_10;
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "net");
  std::string::basic_string[abi:ne180100]<0>(v12, "");
  uint64_t v5 = ims::debug((uint64_t)v14, (uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Failed to Set IP_TOS on IPv4 socket fd=", 39);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" DSCP = 0x", 10);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t v6 = *(void *)(v5 + 8) + *(void *)(**(void **)(v5 + 8) - 24);
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(v6 + 8) & 0xFFFFFFB5 | 8;
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_7:
  *(unsigned char *)(v5 + 17) = 0;
LABEL_12:
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
LABEL_16:
  LODWORD(__p[0]) = 800;
  if (setsockopt(a2, 0xFFFF, 4230, __p, 4u))
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "net");
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    uint64_t v9 = ims::debug((uint64_t)v14, (uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Failed to Set SO_TRAFFIC_CLASS on socket fd=", 44);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "net");
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    uint64_t v9 = ims::debug((uint64_t)v14, (uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Set SO_TRAFFIC_CLASS on socket fd=", 34);
  }
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_1C51FD364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsSocket::ImsSocket(uint64_t a1, int a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F20B3AE0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  int v4 = (char *)operator new(0xA8uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)int v4 = &unk_1F20B3BB0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((void *)v4 + 19) = 0;
  *((void *)v4 + 20) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *((_DWORD *)v4 + 6) = -1;
  *(void *)(a1 + 40) = v4 + 24;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 68) = a2;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void ImsSocket::~ImsSocket(ImsSocket *this)
{
  *(void *)this = &unk_1F20B3AE0;
  ImsSocket::close(this);
  uint64_t v2 = *((void *)this + 7);
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ImsSocket::close(ImsSocket *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    if (*(void *)(v2 + 136))
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v3 = ims::debug((uint64_t)v12, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"ImsSocket detach source for fd ", 31);
      *(unsigned char *)(v3 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v3 + 17) = 0;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      uint64_t v4 = *((void *)this + 5);
      if (v4)
      {
        uint64_t v5 = *(NSObject **)(v4 + 136);
        if (v5)
        {
          dispatch_source_cancel(v5);
          *(void *)(*((void *)this + 5) + 136) = 0;
        }
      }
    }
    else if (*(_DWORD *)v2 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v7 = ims::debug((uint64_t)v12, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Closed", 6);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)v12, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Closing fd ", 11);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      close(**((_DWORD **)this + 5));
      **((_DWORD **)this + 5) = -1;
    }
  }
  uint64_t v8 = (char *)operator new(0xA8uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_1F20B3BB0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((void *)v8 + 19) = 0;
  *((void *)v8 + 20) = 0;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 6);
  *((void *)this + 6) = v8;
  *(_OWORD *)(v8 + 24) = 0u;
  v8 += 24;
  *(_DWORD *)uint64_t v8 = -1;
  *((void *)this + 5) = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C51FD810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double ImsSocket::allowPortReuse@<D0>(ImsSocket *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 5);
  if (!v2 || (uint64_t v3 = (ImsSocket *)*v2, v3 == -1))
  {
    double result = 0.0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 1073741827;
  }
  else
  {
    ImsSocket::setReusePortOptionForSocket(v3, a2);
  }
  return result;
}

void ImsSocket::setReusePortOptionForSocket(ImsSocket *this@<X0>, uint64_t a2@<X8>)
{
  int v10 = 1;
  if (setsockopt((int)this, 0xFFFF, 512, &v10, 4u) == -1)
  {
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    int v4 = *__error();
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_posixDomain;
    *(_DWORD *)(a2 + 16) = v4;
    std::string::basic_string[abi:ne180100]<0>(v8, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::error((uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"ImsSocket: unable to set port reuse for fd=", 43);
    *(unsigned char *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v5);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"ImsSocket: reuse port enabled for fd=", 37);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0;
  }
}

void sub_1C51FDB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult(v21);
  _Unwind_Resume(a1);
}

uint64_t ImsSocket::socketDescriptor(ImsSocket *this)
{
  uint64_t v1 = (unsigned int *)*((void *)this + 5);
  if (!v1 || (uint64_t result = *v1, result == -1))
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::error((uint64_t)v6, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"_sock is empty...", 17);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    if (v7 < 0) {
      operator delete(v6[0]);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_1C51FDC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsSocket::setNoTimeWaitForSocket(ImsSocket *this@<X0>, uint64_t a2@<X8>)
{
  int v10 = 1;
  if (setsockopt((int)this, 6, 520, &v10, 4u) == -1)
  {
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    int v4 = *__error();
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_posixDomain;
    *(_DWORD *)(a2 + 16) = v4;
    std::string::basic_string[abi:ne180100]<0>(v8, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::error((uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"ImsSocket: unable to set no-time-wait for fd=", 45);
    *(unsigned char *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v5);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"ImsSocket: no-time-wait enabled for socket ", 43);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0;
  }
}

void sub_1C51FDF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult(v21);
  _Unwind_Resume(a1);
}

void ImsSocket::setNoSigpipeOptionForSocket(ImsSocket *this@<X0>, uint64_t a2@<X8>)
{
  int v10 = 1;
  if (setsockopt((int)this, 0xFFFF, 4130, &v10, 4u) == -1)
  {
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    int v4 = *__error();
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_posixDomain;
    *(_DWORD *)(a2 + 16) = v4;
    std::string::basic_string[abi:ne180100]<0>(v8, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::error((uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"ImsSocket: unable to set SO_NOSIGPIPE for fd=", 45);
    *(unsigned char *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v5);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"ImsSocket: NOSIGPIPE enabled for fd=", 36);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0;
  }
}

void sub_1C51FE264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult(v21);
  _Unwind_Resume(a1);
}

int *ImsSocket::bindSocketToInterface@<X0>(int *result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = (int)result;
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(void *)(a3 + 8))
    {
      uint64_t v8 = *(const char **)a3;
      goto LABEL_6;
    }
LABEL_15:
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    int v13 = 1073741825;
    goto LABEL_25;
  }
  if (!*(unsigned char *)(a3 + 23)) {
    goto LABEL_15;
  }
  uint64_t v8 = (const char *)a3;
LABEL_6:
  unsigned int v20 = if_nametoindex(v8);
  if (!v20)
  {
    *(void *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    int v9 = *__error();
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_posixDomain;
    *(_DWORD *)(a4 + 16) = v9;
    uint64_t result = (int *)(*(uint64_t (**)(void))(_posixDomain + 24))();
    if (result) {
      return result;
    }
    ImsResult::~ImsResult((ImsResult *)a4);
  }
  if ((a2 & 2) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::debug((uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"binding IPv6 socket to interface ", 33);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 32))(v14, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" (index ", 8);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    int v12 = 125;
    int v11 = 41;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::debug((uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"binding IPv4 socket to interface ", 33);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" (index ", 8);
    *(unsigned char *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    int v11 = 0;
    int v12 = 25;
  }
  uint64_t result = (int *)setsockopt(v6, v11, v12, &v20, 4u);
  if (result == -1)
  {
    uint64_t result = __error();
    int v13 = *result;
    char v15 = &_posixDomain;
  }
  else
  {
    int v13 = 0;
    char v15 = &_bambiDomain;
  }
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(void *)a4 = &unk_1F20B2680;
  *(void *)(a4 + 8) = v15;
LABEL_25:
  *(_DWORD *)(a4 + 16) = v13;
  return result;
}

void sub_1C51FE6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9ImsSocket20attachDispatchSourceEP16dispatch_queue_s_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void (***)(void))a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        (**v3)(v3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C51FE780(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9ImsSocketEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9ImsSocketEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN9ImsSocket20attachDispatchSourceEP16dispatch_queue_s_block_invoke_26(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 32);
  if (v1 && *v1 != -1)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
    if (v3)
    {
      int v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        uint64_t v5 = v4;
        if (*(void *)(a1 + 48))
        {
          std::string::basic_string[abi:ne180100]<0>(v10, "net");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v6 = ims::debug((uint64_t)v10, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"ImsSocket ", 10);
          *(unsigned char *)(v6 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v6 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)": invalidating socket fd=", 25);
          *(unsigned char *)(v6 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v6 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v6 + 17) = 0;
          if (v9 < 0) {
            operator delete(__p[0]);
          }
          if (v11 < 0) {
            operator delete(v10[0]);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v10, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Closing fd ", 11);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    close(**(_DWORD **)(a1 + 32));
    **(_DWORD **)(a1 + 32) = -1;
    dispatch_release(*(dispatch_object_t *)(a1 + 64));
  }
}

void sub_1C51FE9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrI16SocketDescriptorEE48c33_ZTSNSt3__18weak_ptrI9ImsSocketEE(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrI16SocketDescriptorEE48c33_ZTSNSt3__18weak_ptrI9ImsSocketEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void ImsSocket::setDscpClass(uint64_t a1, int a2)
{
  uint64_t v2 = *(int **)(a1 + 40);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 68) != a2)
    {
      *(_DWORD *)(a1 + 68) = a2;
      int v3 = *v2;
      ImsSocket::_setDscpOnSocket((ImsSocket *)a1, v3);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::error((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Unable to set DSCP on NULL socket descriptor object", 51);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_1C51FEBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<SocketDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B3BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SocketDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B3BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

std::string *SipServerNonInviteTryingTransactionState::SipServerNonInviteTryingTransactionState(std::string *a1, std::string::size_type *a2)
{
  int v3 = (std::__shared_weak_count *)a2[1];
  std::string::size_type v5 = *a2;
  char v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTransactionState::SipTransactionState(a1, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3C00;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20B3C88;
  a1[9].__r_.__value_.__l.__size_ = 0x300000000;
  return a1;
}

void sub_1C51FED30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipServerNonInviteTryingTransactionState::handleOutgoingResponse(int8x8_t *this, const SipResponse *a2, ImsResult *a3)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)this[27];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      char v8 = v7;
      char v9 = (void *)this[26];
      if (v9)
      {
        if ((*(unsigned int (**)(void, void))(**((void **)a3 + 1) + 24))(*((void *)a3 + 1), *((unsigned int *)a3 + 4))&& (unsigned __int32 v10 = this[28].u32[0], v10 < this[28].i32[1]))
        {
          this[28].i32[0] = v10 + 1;
          uint64_t v12 = v9[22];
          char v11 = v9 + 22;
          uint64_t v13 = (*(uint64_t (**)(void *))(v12 + 64))(v11);
          (*(void (**)(void *, uint64_t))(*v11 + 16))(v11, v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Failed to send response, scheduling retry #", 43);
          *(unsigned char *)(v13 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v13 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v13 + 17) = 0;
          int8x8_t v15 = this[24];
          uint64_t v14 = (std::__shared_weak_count *)this[25];
          if (v14)
          {
            atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          int v16 = operator new(0x20uLL);
          *int v16 = &unk_1F20B3E68;
          v16[1] = this;
          v16[2] = v15;
          v16[3] = v14;
          v18[3] = v16;
          SipTimerContainer::startSipTimer(this + 3, (uint64_t)&SipTimers::kTimerG, (uint64_t)v18, this[28].i32[0]);
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v18);
          if (v14)
          {
            std::__shared_weak_count::__release_weak(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        else
        {
          if ((*((_DWORD *)a2 + 22) - 100) < 0x64) {
            uint64_t v17 = 3;
          }
          else {
            uint64_t v17 = 4;
          }
          (*(void (**)(void *, uint64_t))(*v9 + 32))(v9, v17);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C51FEF9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void SipServerNonInviteTryingTransactionState::handleTimer(int8x8_t *a1, unsigned __int8 *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (operator==(a2, (uint64_t)&SipTimers::kTimerG))
  {
    int v3 = (std::__shared_weak_count *)a1[27];
    if (v3)
    {
      uint64_t v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        std::string::size_type v5 = v4;
        char v6 = (void *)a1[26];
        if (v6)
        {
          uint64_t v7 = v6 + 22;
          uint64_t v8 = (*(uint64_t (**)(void *))(v6[22] + 64))(v6 + 22);
          (*(void (**)(void *, uint64_t))(v6[22] + 16))(v6 + 22, v8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Resending response", 18);
          *(unsigned char *)(v8 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v8 + 17) = 0;
          uint64_t v18 = 0;
          long long v16 = 0u;
          long long v17 = 0u;
          long long v14 = 0u;
          long long v15 = 0u;
          (*(void (**)(long long *__return_ptr, void *))(*v6 + 128))(&v14, v6);
          if ((*(unsigned int (**)(void, void))(**((void **)&v14 + 1) + 24))(*((void *)&v14 + 1), v15)&& (unsigned __int32 v9 = a1[28].u32[0], v9 < a1[28].i32[1]))
          {
            a1[28].i32[0] = v9 + 1;
            uint64_t v10 = (*(uint64_t (**)(void *))(*v7 + 64))(v6 + 22);
            (*(void (**)(void *, uint64_t))(*v7 + 16))(v7, v10);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Failed to send response, scheduling retry # ", 44);
            *(unsigned char *)(v10 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v10 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v10 + 17) = 0;
            int8x8_t v12 = a1[24];
            char v11 = (std::__shared_weak_count *)a1[25];
            if (v11)
            {
              atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            unsigned int v20 = 0;
            uint64_t v13 = operator new(0x20uLL);
            void *v13 = &unk_1F20B3EE8;
            v13[1] = a1;
            void v13[2] = v12;
            v13[3] = v11;
            unsigned int v20 = v13;
            SipTimerContainer::startSipTimer(a1 + 3, (uint64_t)&SipTimers::kTimerG, (uint64_t)v19, a1[28].i32[0]);
            std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v19);
            if (v11)
            {
              std::__shared_weak_count::__release_weak(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          else
          {
            (*(void (**)(void *, uint64_t))(*v6 + 32))(v6, 4);
          }
          ImsResult::~ImsResult((ImsResult *)&v14);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void sub_1C51FF32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](&a18);
  if (v19)
  {
    std::__shared_weak_count::__release_weak(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  ImsResult::~ImsResult((ImsResult *)&a9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

uint64_t SipServerNonInviteTryingTransactionState::enterState(uint64_t this)
{
  *(_DWORD *)(this + 224) = 0;
  return this;
}

std::string *SipServerNonInviteProceedingTransactionState::SipServerNonInviteProceedingTransactionState(std::string *a1, std::string::size_type *a2)
{
  int v3 = (std::__shared_weak_count *)a2[1];
  std::string::size_type v5 = *a2;
  char v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTransactionState::SipTransactionState(a1, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3CB8;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20B3D38;
  return a1;
}

void sub_1C51FF42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipServerNonInviteProceedingTransactionState::handleRequest(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 208);
      if (v5)
      {
        (*(void (**)(void *__return_ptr))(*(void *)v5 + 128))(v6);
        ImsResult::~ImsResult((ImsResult *)v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C51FF4C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipServerNonInviteProceedingTransactionState::handleOutgoingResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_DWORD *)(a2 + 88) - 100) > 0x63
    || (*(unsigned int (**)(void, void))(**(void **)(a3 + 8) + 24))(*(void *)(a3 + 8), *(unsigned int *)(a3 + 16)))
  {
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 216);
    if (v4)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        char v6 = v5;
        uint64_t v7 = *(void *)(a1 + 208);
        if (v7) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 4);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
}

void sub_1C51FF598(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *SipServerNonInviteCompletedTransactionState::SipServerNonInviteCompletedTransactionState(std::string *a1, std::string::size_type *a2)
{
  int v3 = (std::__shared_weak_count *)a2[1];
  std::string::size_type v5 = *a2;
  char v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTransactionState::SipTransactionState(a1, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3D68;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20B3DF0;
  return a1;
}

void sub_1C51FF644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipServerNonInviteCompletedTransactionState::enterState(int8x8_t *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)this[27];
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int8x8_t v5 = this[26];
      if (!*(void *)&v5)
      {
LABEL_19:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
      int8x8_t v7 = this[24];
      char v6 = (std::__shared_weak_count *)this[25];
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(*(void *)&v5 + 88);
      if (v8)
      {
        uint64_t v9 = *(void *)(*(void *)&v5 + 80);
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v10 = std::__shared_weak_count::lock(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (v10 && v9 && (*(unsigned int (**)(uint64_t))(*(void *)v9 + 72))(v9))
        {
          if (byte_1EBBDB680[23] < 0) {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)byte_1EBBDB680, *(std::string::size_type *)&byte_1EBBDB680[8]);
          }
          else {
            std::string __p = *(std::string *)byte_1EBBDB680;
          }
          if (v6) {
            atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          long long v16 = 0;
          int8x8_t v12 = operator new(0x20uLL);
          void *v12 = &unk_1F20B3F68;
          v12[1] = this;
          v12[2] = v7;
          v12[3] = v6;
          long long v16 = v12;
          SipTimerContainer::startTimer(this + 3, (uint64_t)&__p);
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v15);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
LABEL_16:
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_17:
          if (v6)
          {
            std::__shared_weak_count::__release_weak(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      char v11 = operator new(0x20uLL);
      *char v11 = &unk_1F20B3F68;
      v11[1] = this;
      void v11[2] = v7;
      v11[3] = v6;
      v14[3] = v11;
      SipTimerContainer::startSipTimer(this + 3, (uint64_t)&SipTimers::kTimerJ, (uint64_t)v14, 0);
      std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v14);
      if (!v10) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
}

void sub_1C51FF89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (v20)
  {
    std::__shared_weak_count::__release_weak(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

void SipServerNonInviteCompletedTransactionState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  if (operator==(a2, (uint64_t)&SipTimers::kTimerJ))
  {
    int v3 = *(std::__shared_weak_count **)(a1 + 216);
    if (v3)
    {
      uint64_t v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        int8x8_t v5 = v4;
        uint64_t v6 = *(void *)(a1 + 208);
        if (v6) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 7);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void sub_1C51FF9D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipServerNonInviteCompletedTransactionState::handleRequest(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 208);
      if (v5)
      {
        (*(void (**)(void *__return_ptr))(*(void *)v5 + 128))(v6);
        ImsResult::~ImsResult((ImsResult *)v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C51FFA68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipServerNonInviteTryingTransactionState::~SipServerNonInviteTryingTransactionState(SipServerNonInviteTryingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipServerNonInviteTryingTransactionState::id(SipServerNonInviteTryingTransactionState *this)
{
  return 1;
}

uint64_t SipTransactionState::handleResponse()
{
  return 1;
}

uint64_t SipServerNonInviteTryingTransactionState::allowOutgoingResponse(SipServerNonInviteTryingTransactionState *this)
{
  return 1;
}

void non-virtual thunk to'SipServerNonInviteTryingTransactionState::~SipServerNonInviteTryingTransactionState(SipServerNonInviteTryingTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipServerNonInviteTryingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipServerNonInviteProceedingTransactionState::~SipServerNonInviteProceedingTransactionState(SipServerNonInviteProceedingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipServerNonInviteProceedingTransactionState::id(SipServerNonInviteProceedingTransactionState *this)
{
  return 3;
}

uint64_t SipServerNonInviteProceedingTransactionState::allowOutgoingResponse(SipServerNonInviteProceedingTransactionState *this)
{
  return 1;
}

void non-virtual thunk to'SipServerNonInviteProceedingTransactionState::~SipServerNonInviteProceedingTransactionState(SipServerNonInviteProceedingTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipServerNonInviteProceedingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipServerNonInviteCompletedTransactionState::~SipServerNonInviteCompletedTransactionState(SipServerNonInviteCompletedTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipServerNonInviteCompletedTransactionState::id(SipServerNonInviteCompletedTransactionState *this)
{
  return 4;
}

uint64_t SipTransactionState::allowOutgoingResponse(SipTransactionState *this)
{
  return 0;
}

void non-virtual thunk to'SipServerNonInviteCompletedTransactionState::~SipServerNonInviteCompletedTransactionState(SipServerNonInviteCompletedTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipServerNonInviteCompletedTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipTransactionState::~SipTransactionState(SipTransactionState *this)
{
  *(void *)this = &unk_1F20E6880;
  *((void *)this + 1) = &unk_1F20E6900;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipState::~SipState(this);
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

void SipState::~SipState(SipState *this)
{
  *(void *)this = &unk_1F20C3820;
  *((void *)this + 1) = &unk_1F20C3878;
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  SipTimerContainer::~SipTimerContainer((SipState *)((char *)this + 24));
}

{
  uint64_t vars8;

  SipState::~SipState(this);
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B3E68;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B3E68;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20B3E68;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20B3E68;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int8x8_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C51FFF88(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20B3EE8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20B3EE8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20B3EE8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20B3EE8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int8x8_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5200230(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void *std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B3F68;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B3F68;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20B3F68;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20B3F68;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int8x8_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C52004D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void sub_1C5200750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5200800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)E911LocationSelector;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C5200F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (*(char *)(v54 - 209) < 0) {
    operator delete(*(void **)(v54 - 232));
  }
  ims::LocationInfo::~LocationInfo((void **)(v54 - 208));

  _Unwind_Resume(a1);
}

void ims::LocationInfo::~LocationInfo(void **this)
{
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
}

uint64_t __copy_helper_block_ea8_40c35_ZTSNSt3__110shared_ptrI8SipStackEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c35_ZTSNSt3__110shared_ptrI8SipStackEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t ImsLocationSelector::ImsLocationSelector(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  *(unsigned char *)(a1 + 20) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_1F20B4020;
  *(void *)(a1 + 8) = &unk_1F20B4070;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 88) = dispatch_queue_create("com.apple.ipTelephony.location", 0);
  std::string::basic_string[abi:ne180100]<0>(v17, "ims.location");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v17, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"launching emergency location selector", 37);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  uint64_t v8 = *(NSObject **)(a1 + 88);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3321888768;
  v12[2] = ___ZN19ImsLocationSelectorC1EP27ImsLocationSelectorDelegateNSt3__110shared_ptrI8SipStackEE18LocationUpdateMode_block_invoke;
  v12[3] = &__block_descriptor_60_ea8_40c35_ZTSNSt3__110shared_ptrI8SipStackEE_e5_v8__0l;
  uint64_t v10 = *a3;
  uint64_t v9 = (std::__shared_weak_count *)a3[1];
  v12[4] = a1;
  v12[5] = v10;
  uint64_t v13 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = a4;
  dispatch_async(v8, v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return a1;
}

void sub_1C52012F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v23 - 49) < 0) {
    operator delete(*(void **)(v23 - 72));
  }
  SipLockable::~SipLockable(v22, (uint64_t *)off_1F20B40B0);
  _Unwind_Resume(a1);
}

void ___ZN19ImsLocationSelectorC1EP27ImsLocationSelectorDelegateNSt3__110shared_ptrI8SipStackEE18LocationUpdateMode_block_invoke()
{
}

void sub_1C520143C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  MEMORY[0x1C878E320](v10, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void ImsLocationSelector::~ImsLocationSelector(ImsLocationSelector *this)
{
  *(void *)this = &unk_1F20B4020;
  uint64_t v2 = (ImsLocationSelector *)((char *)this + 8);
  *((void *)this + 1) = &unk_1F20B4070;
  uint64_t v3 = *((void *)this + 11);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN19ImsLocationSelectorD2Ev_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v3, block);
  dispatch_release(*((dispatch_object_t *)this + 11));
  SipLockable::~SipLockable(v2, (uint64_t *)off_1F20B40B0);
}

{
  uint64_t vars8;

  ImsLocationSelector::~ImsLocationSelector(this);
  JUMPOUT(0x1C878E320);
}

uint64_t ___ZN19ImsLocationSelectorD2Ev_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(void ***)(v1 + 96);
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*v2)
    {
      SipLockable *v2 = 0;

      uint64_t v3 = *v2;
    }

    uint64_t result = MEMORY[0x1C878E320](v2, 0x80C40B8603338);
    *(void *)(v1 + 96) = 0;
  }
  return result;
}

void non-virtual thunk to'ImsLocationSelector::~ImsLocationSelector(ImsLocationSelector *this)
{
}

{
  uint64_t vars8;

  ImsLocationSelector::~ImsLocationSelector((ImsLocationSelector *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void ImsLocationSelector::handleLocationUpdate(uint64_t a1, const ims::LocationInfo *a2)
{
  uint64_t v4 = sImsDispatchQueue;
  if (!sImsDispatchQueue)
  {
    uint64_t v4 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v4;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZN19ImsLocationSelector20handleLocationUpdateEN3ims12LocationInfoE_block_invoke;
  block[3] = &__block_descriptor_184_ea8_40c24_ZTSN3ims12LocationInfoE_e5_v8__0l;
  block[4] = a1;
  ims::LocationInfo::LocationInfo((ims::LocationInfo *)&v6, a2);
  dispatch_async(v4, block);
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
}

void ___ZN19ImsLocationSelector20handleLocationUpdateEN3ims12LocationInfoE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 104);
  if (v1)
  {
    ims::LocationInfo::LocationInfo((ims::LocationInfo *)v2, (const ims::LocationInfo *)(a1 + 40));
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v2);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v8 < 0) {
      operator delete(v7);
    }
    if (v6 < 0) {
      operator delete(v5);
    }
    if (v4 < 0) {
      operator delete(v3);
    }
  }
}

void sub_1C52017D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

ims::LocationInfo *__copy_helper_block_ea8_40c24_ZTSN3ims12LocationInfoE(uint64_t a1, uint64_t a2)
{
  return ims::LocationInfo::LocationInfo((ims::LocationInfo *)(a1 + 40), (const ims::LocationInfo *)(a2 + 40));
}

void __destroy_helper_block_ea8_40c24_ZTSN3ims12LocationInfoE(uint64_t a1)
{
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 88);
    operator delete(v2);
  }
}

void ImsLocationSelector::loggableName(LoggableString *a1@<X8>)
{
}

void non-virtual thunk to'ImsLocationSelector::loggableName(LoggableString *a1@<X8>)
{
}

ims::LocationInfo *ims::LocationInfo::LocationInfo(ims::LocationInfo *this, const ims::LocationInfo *a2)
{
  long long v4 = *(_OWORD *)a2;
  long long v5 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v5;
  *(_OWORD *)this = v4;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    *((void *)this + 8) = *((void *)a2 + 8);
    *((_OWORD *)this + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    *((void *)this + 11) = *((void *)a2 + 11);
    *(_OWORD *)((char *)this + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 6);
    *((void *)this + 14) = *((void *)a2 + 14);
    *((_OWORD *)this + 6) = v8;
  }
  uint64_t v9 = (std::string *)((char *)this + 120);
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 120);
    *((void *)this + 17) = *((void *)a2 + 17);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_1C5201994(_Unwind_Exception *exception_object)
{
  if (v1[119] < 0) {
    operator delete(*v4);
  }
  if (v1[95] < 0) {
    operator delete(*v3);
  }
  if (v1[71] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void ims::detail::to_string_impl<double,std::integral_constant<BOOL,false>>::operator()()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C5201AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void HttpResponse::~HttpResponse(void **this)
{
  *this = &unk_1F20CCA78;
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  HttpMessage::~HttpMessage(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20CCA78;
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  HttpMessage::~HttpMessage(this);
  JUMPOUT(0x1C878E320);
}

void HttpRequest::~HttpRequest(void **this)
{
  *this = &unk_1F20B7938;
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  HttpMessage::~HttpMessage(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20B7938;
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  HttpMessage::~HttpMessage(this);
  JUMPOUT(0x1C878E320);
}

void HttpMessage::~HttpMessage(void **this)
{
  *this = &unk_1F20D2E40;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 1), this[2]);
}

ImsPrefs *SDPLazuliSettingsBuilder::SDPLazuliSettingsBuilder(ImsPrefs *a1, void *a2, ImsPrefs *a3)
{
  long long v5 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  UseRemoteMediaOrderKey = (void **)ImsPrefs::getUseRemoteMediaOrderKey(a1);
  char v7 = ImsPrefs::BOOLValue(a3, UseRemoteMediaOrderKey);
  SDPSettingsBuilder::SDPSettingsBuilder((uint64_t)a1, v9, v7);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)a1 = &unk_1F20B41F8;
  return a1;
}

void sub_1C5201C7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SDPLazuliSettingsBuilder::~SDPLazuliSettingsBuilder(SDPLazuliSettingsBuilder *this)
{
  *(void *)this = &unk_1F20B4230;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20B4230;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1C878E320);
}

void SDPLazuliSettingsBuilder::createLazuliSettingsForOffer(uint64_t a1@<X0>, uint64_t *a2@<X1>, ImsPrefs *a3@<X2>, SDPMediaLazuliSettings *a4@<X8>)
{
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  v7[0] = *(void *)(a1 + 8);
  v7[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v5 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SDPLazuliSettingsBuilder::createLazuliSettings(v7, v6, a3, a4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C5201DF4(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SDPLazuliSettingsBuilder::createLazuliSettings(uint64_t *a1@<X1>, uint64_t *a2@<X2>, ImsPrefs *a3@<X3>, SDPMediaLazuliSettings *a4@<X8>)
{
  uint64_t v5 = *a2;
  if (*a2)
  {
    uint64_t v6 = *a1;
    if (*a1)
    {
      uint64_t v9 = *(void *)(v5 + 416);
      uint64_t v8 = *(void *)(v5 + 424);
      while (v9 != v8)
      {
        if (*(_DWORD *)(v9 + 12) == 6) {
          goto LABEL_9;
        }
        v9 += 200;
      }
      uint64_t v9 = 0;
LABEL_9:
      uint64_t v12 = *(void *)(v6 + 416);
      uint64_t v11 = *(void *)(v6 + 424);
      while (v12 != v11)
      {
        if (*(_DWORD *)(v12 + 12) == 6) {
          goto LABEL_14;
        }
        v12 += 200;
      }
      uint64_t v12 = 0;
LABEL_14:
      if (v9)
      {
        if (v12)
        {
          int v13 = *(_DWORD *)(v12 + 32);
          if (v13 == *(_DWORD *)(v9 + 32))
          {
            if (v13 == 8)
            {
              SDPMedia::path((SDPMedia *)v9, (uint64_t)__p);
              std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
              if (__p[0].__r_.__value_.__r.__words[2] != __p[0].__r_.__value_.__l.__size_)
              {
                unint64_t v15 = (uint64_t)(__p[0].__r_.__value_.__r.__words[2] - __p[0].__r_.__value_.__l.__size_) >> 3;
                if (v15 <= 1) {
                  unint64_t v15 = 1;
                }
                while (*(unsigned char *)(*(void *)size + 152))
                {
                  size += 8;
                  if (!--v15) {
                    goto LABEL_23;
                  }
                }
                LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)__p);
                std::string::basic_string[abi:ne180100]<0>(__p, "sdp.lazulisettingbuilder");
                std::string::basic_string[abi:ne180100]<0>(&v47, "");
                uint64_t v10 = ims::error((uint64_t)__p, (uint64_t)&v47);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"MSRP hops are not allowed in MSRP TLS", 37);
                *(unsigned char *)(v10 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                goto LABEL_38;
              }
LABEL_23:
              LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)__p);
            }
            memset(&v47, 0, sizeof(v47));
            SDPMedia::acceptTypes((SDPMedia *)v9, &v47);
            memset(&v46, 0, sizeof(v46));
            SDPMedia::acceptTypes((SDPMedia *)v12, &v46);
            if (v47.__r_.__value_.__r.__words[0] == v47.__r_.__value_.__l.__size_)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "sdp.lazulisettingbuilder");
              std::string::basic_string[abi:ne180100]<0>(&v45, "");
              uint64_t v20 = ims::error((uint64_t)__p, (uint64_t)&v45);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Remote Accept-Types is empty", 28);
              *(unsigned char *)(v20 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            else
            {
              if (v46.__r_.__value_.__r.__words[0] != v46.__r_.__value_.__l.__size_)
              {
                memset(&v45, 0, sizeof(v45));
                SDPMedia::acceptWrappedTypes((SDPMedia *)v9, &v45);
                memset(&v44, 0, sizeof(v44));
                SDPMedia::acceptWrappedTypes((SDPMedia *)v12, &v44);
                if (v45.__r_.__value_.__r.__words[0] == v45.__r_.__value_.__l.__size_)
                {
                  std::string::basic_string[abi:ne180100]<0>(__p, "sdp.lazulisettingbuilder");
                  std::string::basic_string[abi:ne180100]<0>(&v41, "");
                  uint64_t v22 = ims::error((uint64_t)__p, (uint64_t)&v41);
                  uint64_t v23 = (unsigned char *)ImsOutStream::operator<<(v22, "Remote Accept-Wrapped-Types is empty");
                  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                }
                else
                {
                  if (v44.__r_.__value_.__r.__words[0] != v44.__r_.__value_.__l.__size_)
                  {
                    std::string::size_type v41 = 0;
                    std::string::size_type v42 = 0;
                    uint64_t v43 = 0;
                    std::ranges::__sort::__fn::operator()[abi:ne180100]<std::vector<std::string> &,std::ranges::less,std::identity>(v47.__r_.__value_.__r.__words[0], (void **)v47.__r_.__value_.__l.__size_);
                    std::ranges::__sort::__fn::operator()[abi:ne180100]<std::vector<std::string> &,std::ranges::less,std::identity>(v46.__r_.__value_.__r.__words[0], (void **)v46.__r_.__value_.__l.__size_);
                    CarrierBasedKey = (void **)ImsPrefs::getCarrierBasedKey(v16);
                    if (ImsPrefs::BOOLValue(a3, CarrierBasedKey))
                    {
                      memset(__p, 0, 24);
                      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__p, (long long *)v47.__r_.__value_.__l.__data_, (long long *)v47.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v47.__r_.__value_.__l.__size_ - v47.__r_.__value_.__r.__words[0]) >> 3));
                      std::string::size_type v19 = v47.__r_.__value_.__l.__size_;
                      std::string::size_type v18 = v47.__r_.__value_.__r.__words[0];
                      while (v19 != v18)
                      {
                        if (*(char *)(v19 - 1) < 0) {
                          operator delete(*(void **)(v19 - 24));
                        }
                        v19 -= 24;
                      }
                      v47.__r_.__value_.__l.__size_ = v18;
                      std::ranges::__transform::__fn::operator()[abi:ne180100]<std::vector<std::string> const&,std::back_insert_iterator<std::vector<std::string>>,SDPLazuliSettingsBuilder::createLazuliSettings(std::shared_ptr<SDPModel>,std::shared_ptr<SDPModel>,ImsPrefs const&,BOOL)::$_0,std::identity>((uint64_t)__p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_, (std::vector<std::string> *)&v47);
                      uint64_t v38 = (void **)__p;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v38);
                    }
                    std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::back_insert_iterator<std::vector<std::string>>>((uint64_t)__p, (void **)v46.__r_.__value_.__l.__data_, (void **)v46.__r_.__value_.__l.__size_, (void **)v47.__r_.__value_.__l.__data_, (void **)v47.__r_.__value_.__l.__size_, (uint64_t *)&v41);
                    if (v41 == v42)
                    {
                      std::string::basic_string[abi:ne180100]<0>(__p, "sdp.lazulisettingbuilder");
                      std::string::basic_string[abi:ne180100]<0>(&v38, "");
                      uint64_t v27 = ims::error((uint64_t)__p, (uint64_t)&v38);
                      long long v28 = (unsigned char *)ImsOutStream::operator<<(v27, "Set-intersection for accept-types is empty");
                      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      v28[17] = 0;
                      if (SHIBYTE(v40) < 0) {
                        operator delete(v38);
                      }
                      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p[0].__r_.__value_.__l.__data_);
                      }
                      *(unsigned char *)a4 = 0;
                      *((unsigned char *)a4 + 360) = 0;
                    }
                    else
                    {
                      uint64_t v38 = 0;
                      uint64_t v39 = 0;
                      uint64_t v40 = 0;
                      std::ranges::__sort::__fn::operator()[abi:ne180100]<std::vector<std::string> &,std::ranges::less,std::identity>(v45.__r_.__value_.__r.__words[0], (void **)v45.__r_.__value_.__l.__size_);
                      std::ranges::__sort::__fn::operator()[abi:ne180100]<std::vector<std::string> &,std::ranges::less,std::identity>(v44.__r_.__value_.__r.__words[0], (void **)v44.__r_.__value_.__l.__size_);
                      std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::back_insert_iterator<std::vector<std::string>>>((uint64_t)__p, (void **)v44.__r_.__value_.__l.__data_, (void **)v44.__r_.__value_.__l.__size_, (void **)v45.__r_.__value_.__l.__data_, (void **)v45.__r_.__value_.__l.__size_, (uint64_t *)&v38);
                      if (v38 == (void **)v39)
                      {
                        std::string::basic_string[abi:ne180100]<0>(__p, "sdp.lazulisettingbuilder");
                        std::string::basic_string[abi:ne180100]<0>(v36, "");
                        uint64_t v29 = ims::error((uint64_t)__p, (uint64_t)v36);
                        uint64_t v30 = (unsigned char *)ImsOutStream::operator<<(v29, "Set-intersection for accept-wrapped-types is empty");
                        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                        v30[17] = 0;
                        if (v37 < 0) {
                          operator delete(v36[0]);
                        }
                        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__p[0].__r_.__value_.__l.__data_);
                        }
                        *(unsigned char *)a4 = 0;
                        *((unsigned char *)a4 + 360) = 0;
                      }
                      else
                      {
                        memset(&v34, 0, sizeof(v34));
                        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v34, v41, v42, 0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (char *)v41) >> 3));
                        memset(&v33, 0, sizeof(v33));
                        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v33, (long long *)v38, v39, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)v38) >> 3));
                        __int16 v25 = *(_WORD *)(v12 + 16);
                        __int16 v26 = *(_WORD *)(v9 + 16);
                        SDPMedia::path((SDPMedia *)v12, (uint64_t)v32);
                        SDPMedia::path((SDPMedia *)v9, (uint64_t)v31);
                        SDPMediaLazuliSettings::SDPMediaLazuliSettings((uint64_t)__p, (long long **)&v34, (long long **)&v33, v25, v26, (const LazuliRouteSet *)v32, (const LazuliRouteSet *)v31);
                        SDPMediaLazuliSettings::SDPMediaLazuliSettings(a4, (long long **)__p);
                        *((unsigned char *)a4 + 360) = 1;
                        SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)__p);
                        LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)v31);
                        LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)v32);
                        v36[0] = (void **)&v33;
                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
                        v36[0] = (void **)&v34;
                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
                      }
                      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                    }
                    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_74:
                    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_75:
                    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                    return;
                  }
                  std::string::basic_string[abi:ne180100]<0>(__p, "sdp.lazulisettingbuilder");
                  std::string::basic_string[abi:ne180100]<0>(&v41, "");
                  uint64_t v24 = ims::error((uint64_t)__p, (uint64_t)&v41);
                  uint64_t v23 = (unsigned char *)ImsOutStream::operator<<(v24, "Local Accept-Wrapped-Types is empty");
                  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                }
                v23[17] = 0;
                if (SHIBYTE(v43) < 0) {
                  operator delete(v41);
                }
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                }
                *(unsigned char *)a4 = 0;
                *((unsigned char *)a4 + 360) = 0;
                goto LABEL_74;
              }
              std::string::basic_string[abi:ne180100]<0>(__p, "sdp.lazulisettingbuilder");
              std::string::basic_string[abi:ne180100]<0>(&v45, "");
              uint64_t v21 = ims::error((uint64_t)__p, (uint64_t)&v45);
              uint64_t v20 = ImsOutStream::operator<<(v21, "Local Accept-Types is empty");
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            *(unsigned char *)(v20 + 17) = 0;
            if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v45.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            *(unsigned char *)a4 = 0;
            *((unsigned char *)a4 + 360) = 0;
            goto LABEL_75;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "sdp.lazulisettingbuilder");
          std::string::basic_string[abi:ne180100]<0>(&v47, "");
          uint64_t v10 = ims::error((uint64_t)__p, (uint64_t)&v47);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Media protocol types do not match", 33);
          *(unsigned char *)(v10 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "sdp.lazulisettingbuilder");
          std::string::basic_string[abi:ne180100]<0>(&v47, "");
          uint64_t v10 = ims::error((uint64_t)__p, (uint64_t)&v47);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Local media is null", 19);
          *(unsigned char *)(v10 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "sdp.lazulisettingbuilder");
        std::string::basic_string[abi:ne180100]<0>(&v47, "");
        uint64_t v10 = ims::error((uint64_t)__p, (uint64_t)&v47);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Remote media is null", 20);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "sdp.lazulisettingbuilder");
      std::string::basic_string[abi:ne180100]<0>(&v47, "");
      uint64_t v10 = ims::error((uint64_t)__p, (uint64_t)&v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Local SDP is null", 17);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "sdp.lazulisettingbuilder");
    std::string::basic_string[abi:ne180100]<0>(&v47, "");
    uint64_t v10 = ims::error((uint64_t)__p, (uint64_t)&v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Remote SDP is null", 18);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
LABEL_38:
  *(unsigned char *)(v10 + 17) = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  *(unsigned char *)a4 = 0;
  *((unsigned char *)a4 + 360) = 0;
}

void sub_1C5202878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  *(void *)(v34 - 216) = v34 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 216));
  *(void *)(v34 - 192) = v34 - 168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 192));
  *(void *)(v34 - 168) = v34 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 168));
  *(void *)(v34 - 144) = v34 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 144));
  *(void *)(v34 - 120) = v34 - 96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 120));
  *(void *)(v34 - 96) = v34 - 72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 96));
  _Unwind_Resume(a1);
}

void SDPLazuliSettingsBuilder::createLazuliSettingsForOfferAnswer(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, ImsPrefs *a4@<X3>, SDPMediaLazuliSettings *a5@<X8>)
{
  long long v20 = 0u;
  memset(v19, 0, sizeof(v19));
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  v18[0] = *a2;
  v18[1] = (uint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a3[1];
  v17[0] = *a3;
  v17[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SDPLazuliSettingsBuilder::createLazuliSettings(v18, v17, a4, (SDPMediaLazuliSettings *)v19);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (BYTE8(v20))
  {
    *(unsigned char *)a5 = 0;
    *((unsigned char *)a5 + 360) = 0;
    SDPMediaLazuliSettings::SDPMediaLazuliSettings(a5, (long long **)v19);
    *((unsigned char *)a5 + 360) = 1;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(std::__shared_weak_count **)(a1 + 16);
    v16[0] = v11;
    v16[1] = (uint64_t)v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *a3;
    char v14 = (std::__shared_weak_count *)a3[1];
    v15[0] = v13;
    v15[1] = (uint64_t)v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SDPLazuliSettingsBuilder::createLazuliSettings(v16, v15, a4, a5);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  if (BYTE8(v20)) {
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)v19);
  }
}

void sub_1C5202C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  if (a62) {
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)&a17);
  }
  _Unwind_Resume(exception_object);
}

void std::ranges::__sort::__fn::operator()[abi:ne180100]<std::vector<std::string> &,std::ranges::less,std::identity>(unint64_t a1, void **a2)
{
  unint64_t v2 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - a1) >> 3));
  if (a2 == (void **)a1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  std::__introsort<std::_RangeAlgPolicy,std::ranges::less &,std::string *,false>(a1, a2, v3, 1);
}

void std::ranges::__transform::__fn::operator()[abi:ne180100]<std::vector<std::string> const&,std::back_insert_iterator<std::vector<std::string>>,SDPLazuliSettingsBuilder::createLazuliSettings(std::shared_ptr<SDPModel>,std::shared_ptr<SDPModel>,ImsPrefs const&,BOOL)::$_0,std::identity>(uint64_t a1, uint64_t a2, std::vector<std::string> *a3)
{
  v23[2] = *MEMORY[0x1E4F143B8];
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    p_end_cap = (std::allocator<std::string> *)&a3->__end_cap_;
    do
    {
      if (*(char *)(v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v22, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
      }
      else
      {
        *(_OWORD *)&v22.__first_ = *(_OWORD *)v5;
        v22.__end_ = *(std::__split_buffer<std::string>::pointer *)(v5 + 16);
      }
      char end_high = HIBYTE(v22.__end_);
      std::__split_buffer<std::string>::pointer first = v22.__first_;
      if (SHIBYTE(v22.__end_) >= 0) {
        uint64_t v9 = (char *)&v22 + HIBYTE(v22.__end_);
      }
      else {
        uint64_t v9 = (char *)v22.__first_ + (unint64_t)v22.__begin_;
      }
      if (SHIBYTE(v22.__end_) >= 0) {
        std::__split_buffer<std::string>::pointer v10 = (std::__split_buffer<std::string>::pointer)&v22;
      }
      else {
        std::__split_buffer<std::string>::pointer v10 = v22.__first_;
      }
      if (v10 != (std::__split_buffer<std::string>::pointer)v9)
      {
        do
        {
          v10->__r_.__value_.__s.__data_[0] = __tolower(v10->__r_.__value_.__s.__data_[0]);
          std::__split_buffer<std::string>::pointer v10 = (std::__split_buffer<std::string>::pointer)((char *)v10 + 1);
        }
        while (v10 != (std::__split_buffer<std::string>::pointer)v9);
        std::__split_buffer<std::string>::pointer first = v22.__first_;
        char end_high = HIBYTE(v22.__end_);
      }
      v23[0] = v22.__begin_;
      *(void *)((char *)v23 + 7) = *(std::__split_buffer<std::string>::pointer *)((char *)&v22.__begin_ + 7);
      std::vector<std::string>::pointer end = a3->__end_;
      value = a3->__end_cap_.__value_;
      if (end >= value)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a3->__begin_) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a3->__begin_) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        v22.__end_cap_.__value_ = p_end_cap;
        if (v18) {
          std::string::size_type v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v18);
        }
        else {
          std::string::size_type v19 = 0;
        }
        long long v20 = v19 + v15;
        v22.__first_ = v19;
        v22.__begin_ = v20;
        v22.__end_cap_.__value_ = &v19[v18];
        std::string::size_type v21 = v23[0];
        v20->__r_.__value_.__r.__words[0] = (std::string::size_type)first;
        v20->__r_.__value_.__l.__size_ = v21;
        *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v23 + 7);
        *((unsigned char *)&v20->__r_.__value_.__s + 23) = end_high;
        v22.__end_ = v20 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(a3, &v22);
        char v14 = a3->__end_;
        std::__split_buffer<std::string>::~__split_buffer(&v22);
      }
      else
      {
        std::string::size_type v13 = v23[0];
        end->__r_.__value_.__r.__words[0] = (std::string::size_type)first;
        end->__r_.__value_.__l.__size_ = v13;
        *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v23 + 7);
        *((unsigned char *)&end->__r_.__value_.__s + 23) = end_high;
        char v14 = end + 1;
        a3->__end_ = end + 1;
      }
      a3->__end_ = v14;
      v5 += 24;
    }
    while (v5 != a2);
  }
}

void sub_1C5202EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v15 < 0) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void SDPSettingsBuilder::~SDPSettingsBuilder(SDPSettingsBuilder *this)
{
  *(void *)this = &unk_1F20B4230;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20B4230;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1C878E320);
}

void std::__introsort<std::_RangeAlgPolicy,std::ranges::less &,std::string *,false>(unint64_t a1, void **a2, uint64_t a3, char a4)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    std::__split_buffer<std::string>::pointer v10 = a2 - 3;
    uint64_t v102 = a2 - 6;
    uint64_t v104 = a2;
    uint64_t v11 = a2 - 9;
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = (uint64_t)a2 - v12;
          uint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return;
              case 2:
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (void **)a1) & 0x80) != 0)
                {
                  long long v43 = *(_OWORD *)a1;
                  int v106 = *(void **)(a1 + 16);
                  long long v105 = v43;
                  long long v44 = *(_OWORD *)v10;
                  *(void *)(a1 + 16) = v10[2];
                  *(_OWORD *)a1 = v44;
                  long long v45 = v105;
                  _OWORD v10[2] = v106;
                  *(_OWORD *)std::__split_buffer<std::string>::pointer v10 = v45;
                }
                break;
              case 3:
                std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)a1, (void **)(a1 + 24), v10);
                break;
              case 4:
                std::__sort4[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(a1, (void **)(a1 + 24), (void **)(a1 + 48), v10);
                break;
              case 5:
                std::__sort5[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            std::string v46 = (void **)(a1 + 24);
            BOOL v48 = (void **)a1 == a2 || v46 == a2;
            if (a4)
            {
              if (!v48)
              {
                uint64_t v49 = 0;
                int64_t v50 = (void **)a1;
                do
                {
                  long long v51 = v50;
                  int64_t v50 = v46;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v46, v51) & 0x80) != 0)
                  {
                    long long v52 = *(_OWORD *)v50;
                    int v106 = v50[2];
                    long long v105 = v52;
                    v50[1] = 0;
                    v50[2] = 0;
                    char *v50 = 0;
                    uint64_t v53 = v49;
                    do
                    {
                      uint64_t v54 = a1 + v53;
                      long long v55 = (void **)(a1 + v53 + 24);
                      if (*(char *)(a1 + v53 + 47) < 0) {
                        operator delete(*v55);
                      }
                      *(_OWORD *)long long v55 = *(_OWORD *)v54;
                      *(void *)(a1 + v53 + 40) = *(void *)(v54 + 16);
                      *(unsigned char *)(v54 + 23) = 0;
                      *(unsigned char *)uint64_t v54 = 0;
                      if (!v53)
                      {
                        uint64_t v57 = a1;
                        goto LABEL_93;
                      }
                      v53 -= 24;
                    }
                    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v105, (void **)(v53 + a1)) & 0x80) != 0);
                    int v56 = *(char *)(a1 + v53 + 47);
                    uint64_t v57 = a1 + v53 + 24;
                    if (v56 < 0) {
                      operator delete(*(void **)v57);
                    }
LABEL_93:
                    a2 = v104;
                    long long v58 = v105;
                    *(void *)(v57 + 16) = v106;
                    *(_OWORD *)uint64_t v57 = v58;
                  }
                  std::string v46 = v50 + 3;
                  v49 += 24;
                }
                while (v50 + 3 != a2);
              }
            }
            else if (!v48)
            {
              unint64_t v93 = a1 - 24;
              do
              {
                long long v94 = (void **)a1;
                a1 = (unint64_t)v46;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v46, v94) & 0x80) != 0)
                {
                  long long v95 = *(_OWORD *)a1;
                  int v106 = *(void **)(a1 + 16);
                  long long v105 = v95;
                  *(void *)(a1 + 8) = 0;
                  *(void *)(a1 + 16) = 0;
                  *(void *)a1 = 0;
                  unint64_t v96 = v93;
                  do
                  {
                    long long v97 = (void **)(v96 + 48);
                    if (*(char *)(v96 + 71) < 0) {
                      operator delete(*v97);
                    }
                    *(_OWORD *)long long v97 = *(_OWORD *)(v96 + 24);
                    *(void *)(v96 + 64) = *(void *)(v96 + 40);
                    *(unsigned char *)(v96 + 47) = 0;
                    *(unsigned char *)(v96 + 24) = 0;
                    char v98 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v105, (void **)v96);
                    v96 -= 24;
                  }
                  while (v98 < 0);
                  long long v99 = (void **)(v96 + 48);
                  if (*(char *)(v96 + 71) < 0) {
                    operator delete(*v99);
                  }
                  long long v100 = v105;
                  *(void *)(v96 + 64) = v106;
                  *(_OWORD *)long long v99 = v100;
                }
                std::string v46 = (void **)(a1 + 24);
                v93 += 24;
              }
              while ((void **)(a1 + 24) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((void **)a1 != a2)
            {
              int64_t v59 = (unint64_t)(v14 - 2) >> 1;
              int64_t v60 = v59;
              do
              {
                int64_t v61 = v60;
                if (v59 >= v60)
                {
                  uint64_t v62 = (2 * v60) | 1;
                  unint64_t v63 = a1 + 24 * v62;
                  if (2 * v60 + 2 < v14
                    && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24 * v62), (void **)(v63 + 24)) & 0x80u) != 0)
                  {
                    v63 += 24;
                    uint64_t v62 = 2 * v61 + 2;
                  }
                  unint64_t v64 = a1 + 24 * v61;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v63, (void **)v64) & 0x80) == 0)
                  {
                    long long v65 = *(_OWORD *)v64;
                    int v106 = *(void **)(v64 + 16);
                    long long v105 = v65;
                    *(void *)(v64 + 8) = 0;
                    *(void *)(v64 + 16) = 0;
                    *(void *)unint64_t v64 = 0;
                    while (1)
                    {
                      unint64_t v66 = v63;
                      if (*(char *)(v64 + 23) < 0) {
                        operator delete(*(void **)v64);
                      }
                      long long v67 = *(_OWORD *)v63;
                      *(void *)(v64 + 16) = *(void *)(v63 + 16);
                      *(_OWORD *)unint64_t v64 = v67;
                      *(unsigned char *)(v63 + 23) = 0;
                      *(unsigned char *)unint64_t v63 = 0;
                      if (v59 < v62) {
                        break;
                      }
                      uint64_t v68 = (2 * v62) | 1;
                      unint64_t v63 = a1 + 24 * v68;
                      uint64_t v69 = 2 * v62 + 2;
                      if (v69 < v14
                        && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24 * v68), (void **)(v63 + 24)) & 0x80u) != 0)
                      {
                        v63 += 24;
                        uint64_t v68 = v69;
                      }
                      unint64_t v64 = v66;
                      uint64_t v62 = v68;
                      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v63, (void **)&v105) & 0x80) != 0)
                      {
                        if (*(char *)(v66 + 23) < 0) {
                          operator delete(*(void **)v66);
                        }
                        break;
                      }
                    }
                    long long v70 = v105;
                    *(void *)(v66 + 16) = v106;
                    *(_OWORD *)unint64_t v66 = v70;
                  }
                }
                int64_t v60 = v61 - 1;
              }
              while (v61);
              int64_t v71 = v13 / 0x18uLL;
              long long v72 = v104;
              do
              {
                uint64_t v73 = 0;
                uint64_t v74 = v72;
                uint64_t v101 = *(void **)a1;
                *(void *)&long long v107 = *(void *)(a1 + 8);
                *(void *)((char *)&v107 + 7) = *(void *)(a1 + 15);
                char v103 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                uint64_t v75 = v71 - 2;
                if (v71 < 2) {
                  uint64_t v75 = v71 - 1;
                }
                uint64_t v76 = v75 >> 1;
                unint64_t v77 = a1;
                do
                {
                  uint64_t v78 = v77 + 24 * v73 + 24;
                  uint64_t v79 = 2 * v73;
                  uint64_t v73 = (2 * v73) | 1;
                  uint64_t v80 = v79 + 2;
                  if (v79 + 2 < v71
                    && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v78, (void **)(v78 + 24)) & 0x80u) != 0)
                  {
                    v78 += 24;
                    uint64_t v73 = v80;
                  }
                  if (*(char *)(v77 + 23) < 0) {
                    operator delete(*(void **)v77);
                  }
                  long long v81 = *(_OWORD *)v78;
                  *(void *)(v77 + 16) = *(void *)(v78 + 16);
                  *(_OWORD *)unint64_t v77 = v81;
                  *(unsigned char *)(v78 + 23) = 0;
                  *(unsigned char *)uint64_t v78 = 0;
                  unint64_t v77 = v78;
                }
                while (v73 <= v76);
                long long v72 = v74 - 3;
                if ((void **)v78 == v74 - 3)
                {
                  *(void *)uint64_t v78 = v101;
                  uint64_t v91 = *(void *)((char *)&v107 + 7);
                  *(void *)(v78 + 8) = v107;
                  *(void *)(v78 + 15) = v91;
                  *(unsigned char *)(v78 + 23) = v103;
                }
                else
                {
                  long long v82 = *(_OWORD *)v72;
                  *(void *)(v78 + 16) = *(v74 - 1);
                  *(_OWORD *)uint64_t v78 = v82;
                  *(v74 - 3) = v101;
                  long long v83 = (void *)v107;
                  *(void **)((char *)v74 - 9) = *(void **)((char *)&v107 + 7);
                  *(v74 - 2) = v83;
                  *((unsigned char *)v74 - 1) = v103;
                  uint64_t v84 = v78 - a1 + 24;
                  if (v84 >= 25)
                  {
                    unint64_t v85 = (v84 / 0x18uLL - 2) >> 1;
                    unint64_t v86 = a1 + 24 * v85;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v86, (void **)v78) & 0x80) != 0)
                    {
                      long long v87 = *(_OWORD *)v78;
                      int v106 = *(void **)(v78 + 16);
                      long long v105 = v87;
                      *(void *)(v78 + 8) = 0;
                      *(void *)(v78 + 16) = 0;
                      *(void *)uint64_t v78 = 0;
                      while (1)
                      {
                        uint64_t v88 = v86;
                        if (*(char *)(v78 + 23) < 0) {
                          operator delete(*(void **)v78);
                        }
                        long long v89 = *(_OWORD *)v86;
                        *(void *)(v78 + 16) = *(void *)(v86 + 16);
                        *(_OWORD *)uint64_t v78 = v89;
                        *(unsigned char *)(v86 + 23) = 0;
                        *(unsigned char *)unint64_t v86 = 0;
                        if (!v85) {
                          break;
                        }
                        unint64_t v85 = (v85 - 1) >> 1;
                        unint64_t v86 = a1 + 24 * v85;
                        uint64_t v78 = v88;
                        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v86, (void **)&v105) & 0x80) == 0)
                        {
                          if (*(char *)(v88 + 23) < 0) {
                            operator delete(*(void **)v88);
                          }
                          break;
                        }
                      }
                      long long v90 = v105;
                      *(void *)(v88 + 16) = v106;
                      *(_OWORD *)uint64_t v88 = v90;
                    }
                  }
                }
              }
              while (v71-- > 2);
            }
            return;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          unint64_t v16 = a1 + 24 * ((unint64_t)v14 >> 1);
          if ((unint64_t)v13 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)v16, (void **)a1, v10);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)a1, (void **)v16, v10);
            uint64_t v17 = 3 * v15;
            std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)(a1 + 24), (void **)(a1 + 8 * v17 - 24), v102);
            std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)(a1 + 48), (void **)(a1 + 24 + 8 * v17), v11);
            std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)(a1 + 8 * v17 - 24), (void **)v16, (void *)(a1 + 24 + 8 * v17));
            long long v18 = *(_OWORD *)a1;
            int v106 = *(void **)(a1 + 16);
            long long v105 = v18;
            uint64_t v19 = *(void *)(v16 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(void *)(a1 + 16) = v19;
            long long v20 = v105;
            *(void *)(v16 + 16) = v106;
            *(_OWORD *)unint64_t v16 = v20;
          }
          --a3;
          if ((a4 & 1) != 0
            || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 - 24), (void **)a1) & 0x80) != 0)
          {
            break;
          }
          long long v33 = *(_OWORD *)a1;
          uint64_t v108 = *(void *)(a1 + 16);
          long long v107 = v33;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v107, v10) & 0x80) != 0)
          {
            unint64_t v12 = a1;
            do
              v12 += 24;
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v107, (void **)v12) & 0x80) == 0);
          }
          else
          {
            uint64_t v34 = (void **)(a1 + 24);
            do
            {
              unint64_t v12 = (unint64_t)v34;
              if (v34 >= a2) {
                break;
              }
              char v35 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v107, v34);
              uint64_t v34 = (void **)(v12 + 24);
            }
            while ((v35 & 0x80) == 0);
          }
          unint64_t v36 = (unint64_t)a2;
          if (v12 < (unint64_t)a2)
          {
            unint64_t v36 = (unint64_t)a2;
            do
              v36 -= 24;
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v107, (void **)v36) & 0x80) != 0);
          }
          while (v12 < v36)
          {
            long long v37 = *(_OWORD *)v12;
            int v106 = *(void **)(v12 + 16);
            long long v105 = v37;
            long long v38 = *(_OWORD *)v36;
            *(void *)(v12 + 16) = *(void *)(v36 + 16);
            *(_OWORD *)unint64_t v12 = v38;
            long long v39 = v105;
            *(void *)(v36 + 16) = v106;
            *(_OWORD *)unint64_t v36 = v39;
            do
              v12 += 24;
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v107, (void **)v12) & 0x80) == 0);
            do
              v36 -= 24;
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v107, (void **)v36) & 0x80) != 0);
          }
          uint64_t v40 = (long long *)(v12 - 24);
          BOOL v4 = v12 - 24 >= a1;
          BOOL v5 = v12 - 24 == a1;
          if (v12 - 24 == a1)
          {
            if (*(char *)(v12 - 1) < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v41 = *v40;
            *(void *)(a1 + 16) = *(void *)(v12 - 8);
            *(_OWORD *)a1 = v41;
            *(unsigned char *)(v12 - 1) = 0;
            *(unsigned char *)(v12 - 24) = 0;
          }
          a4 = 0;
          long long v42 = v107;
          *(void *)(v12 - 8) = v108;
          *uint64_t v40 = v42;
        }
        uint64_t v21 = 0;
        long long v22 = *(_OWORD *)a1;
        uint64_t v108 = *(void *)(a1 + 16);
        long long v107 = v22;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        do
          v21 += 24;
        while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v21 + a1), (void **)&v107) & 0x80) != 0);
        unint64_t v23 = a1 + v21;
        uint64_t v24 = v104;
        if (v21 == 24)
        {
          uint64_t v24 = v104;
          do
          {
            if (v23 >= (unint64_t)v24) {
              break;
            }
            v24 -= 3;
          }
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24, (void **)&v107) & 0x80) == 0);
        }
        else
        {
          do
            v24 -= 3;
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24, (void **)&v107) & 0x80) == 0);
        }
        if (v23 >= (unint64_t)v24)
        {
          unint64_t v12 = a1 + v21;
        }
        else
        {
          __int16 v25 = v24;
          unint64_t v12 = a1 + v21;
          do
          {
            long long v26 = *(_OWORD *)v12;
            int v106 = *(void **)(v12 + 16);
            long long v105 = v26;
            long long v27 = *(_OWORD *)v25;
            *(void *)(v12 + 16) = v25[2];
            *(_OWORD *)unint64_t v12 = v27;
            long long v28 = v105;
            v25[2] = v106;
            *(_OWORD *)__int16 v25 = v28;
            do
              v12 += 24;
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v12, (void **)&v107) & 0x80) != 0);
            do
              v25 -= 3;
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v25, (void **)&v107) & 0x80) == 0);
          }
          while (v12 < (unint64_t)v25);
        }
        uint64_t v29 = (long long *)(v12 - 24);
        if (v12 - 24 == a1)
        {
          if (*(char *)(v12 - 1) < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v30 = *v29;
          *(void *)(a1 + 16) = *(void *)(v12 - 8);
          *(_OWORD *)a1 = v30;
          *(unsigned char *)(v12 - 1) = 0;
          *(unsigned char *)(v12 - 24) = 0;
        }
        long long v31 = v107;
        *(void *)(v12 - 8) = v108;
        long long *v29 = v31;
        BOOL v4 = v23 >= (unint64_t)v24;
        a2 = v104;
        if (v4) {
          break;
        }
LABEL_38:
        std::__introsort<std::_RangeAlgPolicy,std::ranges::less &,std::string *,false>(a1, v12 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(a1, (void **)(v12 - 24));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(v12, v104))
      {
        break;
      }
      if (!v32) {
        goto LABEL_38;
      }
    }
    a2 = (void **)(v12 - 24);
    if (!v32) {
      continue;
    }
    break;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(void **a1, void **a2, void *a3)
{
  char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1);
  uint64_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2);
  if (v6 < 0)
  {
    if ((char)result < 0)
    {
      uint64_t v17 = a1[2];
      long long v18 = *(_OWORD *)a1;
      long long v20 = (void *)a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v20;
    }
    else
    {
      uint64_t v14 = a1[2];
      long long v15 = *(_OWORD *)a1;
      unint64_t v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
      uint64_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2);
      if ((result & 0x80) == 0) {
        return result;
      }
      uint64_t v17 = a2[2];
      long long v18 = *(_OWORD *)a2;
      uint64_t v19 = (void *)a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v19;
    }
    *(_OWORD *)a3 = v18;
    a3[2] = v17;
  }
  else if ((char)result < 0)
  {
    uint64_t v8 = a2[2];
    long long v9 = *(_OWORD *)a2;
    std::__split_buffer<std::string>::pointer v10 = (void *)a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v10;
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
    uint64_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1);
    if ((result & 0x80) != 0)
    {
      uint64_t v11 = a1[2];
      long long v12 = *(_OWORD *)a1;
      uint64_t v13 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v13;
      *(_OWORD *)a2 = v12;
      a2[2] = v11;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(uint64_t a1, void **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v6 = a2 - 3;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2 - 3, (void **)a1) & 0x80) != 0)
      {
        char v7 = *(void **)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        long long v9 = v6[2];
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(void *)(a1 + 16) = v9;
        *(_OWORD *)char v6 = v8;
        uint64_t v6[2] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)a1, (void **)(a1 + 24), a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(a1, (void **)(a1 + 24), (void **)(a1 + 48), a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), a2 - 3);
      return 1;
    default:
      std::__split_buffer<std::string>::pointer v10 = (void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)a1, (void **)(a1 + 24), (void *)(a1 + 48));
      uint64_t v11 = (void **)(a1 + 72);
      if ((void **)(a1 + 72) == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10) & 0x80) != 0)
    {
      long long v20 = *(_OWORD *)v11;
      uint64_t v21 = v11[2];
      v11[1] = 0;
      void v11[2] = 0;
      *uint64_t v11 = 0;
      uint64_t v14 = v12;
      do
      {
        uint64_t v15 = a1 + v14;
        unint64_t v16 = (void **)(a1 + v14 + 72);
        if (*(char *)(a1 + v14 + 95) < 0) {
          operator delete(*v16);
        }
        *(_OWORD *)unint64_t v16 = *(_OWORD *)(v15 + 48);
        *(void *)(a1 + v14 + 88) = *(void *)(v15 + 64);
        *(unsigned char *)(v15 + 71) = 0;
        *(unsigned char *)(v15 + 48) = 0;
        if (v14 == -48)
        {
          uint64_t v19 = a1;
          goto LABEL_15;
        }
        char v17 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v20, (void **)(a1 + v14 + 24));
        v14 -= 24;
      }
      while (v17 < 0);
      int v18 = *(char *)(a1 + v14 + 95);
      uint64_t v19 = a1 + v14 + 72;
      if (v18 < 0) {
        operator delete(*(void **)v19);
      }
LABEL_15:
      *(_OWORD *)uint64_t v19 = v20;
      *(void *)(v19 + 16) = v21;
      if (++v13 == 8) {
        return v11 + 3 == a2;
      }
    }
    std::__split_buffer<std::string>::pointer v10 = v11;
    v12 += 24;
    v11 += 3;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(uint64_t a1, void **a2, void **a3, void *a4)
{
  std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)a1, a2, a3);
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a4, a3) & 0x80) != 0)
  {
    long long v9 = a3[2];
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = (void *)a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2) & 0x80) != 0)
    {
      uint64_t v12 = a2[2];
      long long v13 = *(_OWORD *)a2;
      uint64_t v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)a1) & 0x80) != 0)
      {
        uint64_t v15 = *(void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        unint64_t v16 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(uint64_t a1, void **a2, void **a3, void **a4, void *a5)
{
  std::__sort4[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(a1, a2, a3, a4);
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, a4) & 0x80) != 0)
  {
    uint64_t v11 = a4[2];
    long long v12 = *(_OWORD *)a4;
    long long v13 = (void *)a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a4, a3) & 0x80) != 0)
    {
      uint64_t v14 = a3[2];
      long long v15 = *(_OWORD *)a3;
      unint64_t v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2) & 0x80) != 0)
      {
        char v17 = a2[2];
        long long v18 = *(_OWORD *)a2;
        uint64_t v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)a1) & 0x80) != 0)
        {
          long long v20 = *(void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v21 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::vector<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  v12[2] = &v14;
  v12[3] = 1;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v14 + 1) = v9;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      BOOL v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        BOOL v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::back_insert_iterator<std::vector<std::string>>>(uint64_t result, void **a2, void **a3, void **a4, void **a5, uint64_t *a6)
{
  uint64_t v9 = (void *)result;
  if (a2 != a3)
  {
    long long v10 = a4;
    if (a4 != a5)
    {
      uint64_t v11 = a2;
      do
      {
        __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10);
        if ((result & 0x80) != 0)
        {
          v11 += 3;
        }
        else
        {
          __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, v11);
          if ((result & 0x80) == 0)
          {
            unint64_t v12 = a6[1];
            if (v12 >= a6[2])
            {
              __n128 result = std::vector<std::string>::__push_back_slow_path<std::string const&>(a6, (long long *)v11);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a6, (long long *)v11);
              __n128 result = v12 + 24;
            }
            a6[1] = result;
            v11 += 3;
          }
          v10 += 3;
        }
      }
      while (v11 != a3 && v10 != a5);
    }
  }
  void *v9 = a3;
  v9[1] = a5;
  void v9[2] = a6;
  return result;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_1C520439C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    long long v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1C52044B4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void SipUnknownHeader::~SipUnknownHeader(void **this)
{
  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipUnknownHeader::allowsDuplicates(SipUnknownHeader *this)
{
  return 1;
}

uint64_t TTAKRegistrationPolicy::TTAKRegistrationPolicy(uint64_t a1, std::__shared_weak_count **a2)
{
  *(void *)(a1 + 104) = &unk_1F20B2FA8;
  uint64_t v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  Rfc5626RegistrationPolicy::Rfc5626RegistrationPolicy(a1, (uint64_t *)&off_1F20B45C0, v5);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  *(void *)a1 = &unk_1F20B4300;
  *(void *)(a1 + 104) = &unk_1F20B4568;
  *(void *)(a1 + 184) = &unk_1F20B45B0;
  *(unsigned char *)(a1 + 2364) = 0;
  return a1;
}

void sub_1C520468C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TTAKRegistrationPolicy::performActualWaitTime(int8x8_t *this, const ImsResult *a2, unsigned int a3)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  this[295].i8[4] = 1;
  int8x8_t v6 = this[24];
  unint64_t v5 = (std::__shared_weak_count *)this[25];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = operator new(0x20uLL);
  *uint64_t v7 = &unk_1F20B4C08;
  v7[1] = this;
  uint64_t v7[2] = v6;
  v7[3] = v5;
  v12[3] = v7;
  SipTimerContainer::startTimer(this + 29, (uint64_t)"ActualWaitTime");
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v12);
  time_t v8 = time(0);
  this[50] = (int8x8_t)v8;
  std::string::basic_string[abi:ne180100]<0>(__p, "ActualWaitTime");
  SipRegistrationPolicy::updateNextRetryTime(this, (ims *)(v8 + a3), (uint64_t)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return -1;
}

void sub_1C52047D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

void TTAKRegistrationPolicy::handleTimer(SipRegistrationPolicy *a1, unsigned __int8 *a2)
{
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  if (v5 == 14)
  {
    if ((v4 & 0x80) == 0)
    {
      if (a2[23])
      {
        int8x8_t v6 = "ActualWaitTime";
        uint64_t v7 = a2;
        while (*v7 == *(unsigned __int8 *)v6)
        {
          ++v7;
          ++v6;
          if (!--v4) {
            goto LABEL_15;
          }
        }
        goto LABEL_12;
      }
LABEL_15:
      time_t v8 = (std::__shared_weak_count *)*((void *)a1 + 48);
      if (v8)
      {
        unint64_t v9 = std::__shared_weak_count::lock(v8);
        if (v9)
        {
          long long v10 = v9;
          uint64_t v11 = *((void *)a1 + 47);
          if (v11)
          {
            uint64_t v12 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)a1 + 64))(a1);
            (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)a1 + 16))(a1, v12);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"actual wait timer fired. Time to bring down the PDN.", 52);
            *(unsigned char *)(v12 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v12 + 17) = 0;
            (*(void (**)(uint64_t))(*(void *)v11 + 64))(v11);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
      return;
    }
    if (!memcmp(*(const void **)a2, "ActualWaitTime", *((void *)a2 + 1))) {
      goto LABEL_15;
    }
  }
LABEL_12:
  SipRegistrationPolicy::handleTimer(a1, a2);
}

void sub_1C5204A08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'TTAKRegistrationPolicy::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
}

uint64_t TTAKRegistrationPolicy::startingRegistration(TTAKRegistrationPolicy *this)
{
  if (*((unsigned char *)this + 2364))
  {
    uint64_t v2 = (*(uint64_t (**)(TTAKRegistrationPolicy *))(*(void *)this + 32))(this);
    (*(void (**)(TTAKRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"registration is blocked until the PDN is reset", 46);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    return 0;
  }
  else
  {
    return SipRegistrationPolicy::startingRegistration(this);
  }
}

void TTAKRegistrationPolicy::deinitialize(SipRegistrationPolicy *this)
{
  *((unsigned char *)this + 2364) = 0;
  SipRegistrationPolicy::deinitialize(this);
}

uint64_t TTAKRegistrationPolicy::onInterfaceChanged(TTAKRegistrationPolicy *this)
{
  uint64_t v2 = (*(uint64_t (**)(TTAKRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(TTAKRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Not clearing throttling on interface change, per policy.", 56);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  return result;
}

void Rfc5626RegistrationPolicy::~Rfc5626RegistrationPolicy(Rfc5626RegistrationPolicy *this)
{
}

{
  uint64_t vars8;

  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1F20E8468);
  JUMPOUT(0x1C878E320);
}

uint64_t Rfc5626RegistrationPolicy::generalErrorRetryInterval(Rfc5626RegistrationPolicy *this)
{
  return 0;
}

uint64_t Rfc5626RegistrationPolicy::fatalErrorRetryInterval(Rfc5626RegistrationPolicy *this)
{
  return 0;
}

uint64_t Rfc5626RegistrationPolicy::forbiddenErrorRetryInterval(Rfc5626RegistrationPolicy *this)
{
  return 0;
}

uint64_t SipRegistrationPolicy::subscriptionRetryTimer(SipRegistrationPolicy *this)
{
  return (uint64_t)this + 2168;
}

uint64_t SipRegistrationPolicy::useNextProxyOnRegistrationChange(SipRegistrationPolicy *this)
{
  return 0;
}

const char *Rfc5626RegistrationPolicy::name(Rfc5626RegistrationPolicy *this)
{
  return "RFC5626";
}

uint64_t SipRegistrationPolicy::isTransactionRetryAllowed(SipRegistrationPolicy *this)
{
  return 1;
}

uint64_t SipRegistrationPolicy::isCSFBModeEnabled(SipRegistrationPolicy *this)
{
  return 0;
}

BOOL SipRegistrationPolicy::isEmergency(SipRegistrationPolicy *this)
{
  return *((void *)this + 280) != 0;
}

uint64_t SipRegistrationPolicy::shouldNotifyDelegate(SipRegistrationPolicy *this)
{
  return 1;
}

uint64_t SipRegistrationPolicy::allowNotificationsInLimitedAccess(SipRegistrationPolicy *this)
{
  return 0;
}

void non-virtual thunk to'Rfc5626RegistrationPolicy::~Rfc5626RegistrationPolicy(Rfc5626RegistrationPolicy *this)
{
}

{
  uint64_t vars8;

  SipRegistrationPolicy::~SipRegistrationPolicy((Rfc5626RegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1F20E8468);
  JUMPOUT(0x1C878E320);
}

void TTAKRegistrationPolicy::~TTAKRegistrationPolicy(TTAKRegistrationPolicy *this)
{
}

{
  uint64_t vars8;

  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1F20B45C8);
  JUMPOUT(0x1C878E320);
}

uint64_t TTAKRegistrationPolicy::useNextProxy(TTAKRegistrationPolicy *this)
{
  return 1;
}

const char *TTAKRegistrationPolicy::name(TTAKRegistrationPolicy *this)
{
  return "TTAK";
}

void non-virtual thunk to'TTAKRegistrationPolicy::~TTAKRegistrationPolicy(TTAKRegistrationPolicy *this)
{
}

{
  uint64_t vars8;

  SipRegistrationPolicy::~SipRegistrationPolicy((TTAKRegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1F20B45C8);
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B4C08;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B4C08;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20B4C08;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20B4C08;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    int8x8_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5204FF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t SipRegistrationConfig::initializeFromPrefs(std::vector<std::string> *this, const ImsPrefs *a2)
{
  RegistrationPolicyKey = (void **)ImsPrefs::getRegistrationPolicyKey((ImsPrefs *)this);
  uint64_t v5 = (ImsPrefs *)ImsPrefs::stringValue(a2, RegistrationPolicyKey);
  p_std::vector<std::string>::pointer end = (void **)&this[53].__end_;
  if (SHIBYTE(this[54].__begin_) < 0) {
    operator delete(*p_end);
  }
  *(_OWORD *)p_std::vector<std::string>::pointer end = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  this[54].__begin_ = (std::vector<std::string>::pointer)__p.__r_.__value_.__r.__words[2];
  RegistrationExpirationSecondsKey = (void **)ImsPrefs::getRegistrationExpirationSecondsKey(v5);
  time_t v8 = (ImsPrefs *)ImsPrefs::intValue(a2, RegistrationExpirationSecondsKey);
  HIDWORD(this[1].__end_) = v8;
  RegSubscriptionEnabledKey = (void **)ImsPrefs::getRegSubscriptionEnabledKey(v8);
  long long v10 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, RegSubscriptionEnabledKey);
  BYTE1(this[1].__end_) = (_BYTE)v10;
  RegSubscriptionExpirationSecondsKey = (void **)ImsPrefs::getRegSubscriptionExpirationSecondsKey(v10);
  uint64_t v12 = (ImsPrefs *)ImsPrefs::intValue(a2, RegSubscriptionExpirationSecondsKey);
  LODWORD(this[1].__end_cap_.__value_) = v12;
  RegistrationExpirationCushionSecondsKey = (void **)ImsPrefs::getRegistrationExpirationCushionSecondsKey(v12);
  long long v14 = (ImsPrefs *)ImsPrefs::intValue(a2, RegistrationExpirationCushionSecondsKey);
  HIDWORD(this[1].__end_cap_.__value_) = v14;
  RegistrationRefreshCushionPercentKey = (void **)ImsPrefs::getRegistrationRefreshCushionPercentKey(v14);
  unint64_t v16 = (ImsPrefs *)ImsPrefs::intValue(a2, RegistrationRefreshCushionPercentKey);
  LODWORD(this[2].__begin_) = v16;
  RegistrationRefreshCushionCapSecondsKey = (void **)ImsPrefs::getRegistrationRefreshCushionCapSecondsKey(v16);
  long long v18 = (ImsPrefs *)ImsPrefs::intValue(a2, RegistrationRefreshCushionCapSecondsKey);
  LODWORD(this[2].__end_) = v18;
  RegistrationThrottlingCushionPercentKey = (void **)ImsPrefs::getRegistrationThrottlingCushionPercentKey(v18);
  long long v20 = (ImsPrefs *)ImsPrefs::intValue(a2, RegistrationThrottlingCushionPercentKey);
  HIDWORD(this[2].__end_) = v20;
  RegistrationThrottlingCushionCapSecondsKey = (void **)ImsPrefs::getRegistrationThrottlingCushionCapSecondsKey(v20);
  long long v22 = (ImsPrefs *)ImsPrefs::intValue(a2, RegistrationThrottlingCushionCapSecondsKey);
  LODWORD(this[2].__end_cap_.__value_) = v22;
  AllowEarlyRegistrationRefreshKey = (void **)ImsPrefs::getAllowEarlyRegistrationRefreshKey(v22);
  uint64_t v24 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AllowEarlyRegistrationRefreshKey);
  BYTE4(this[2].__end_cap_.__value_) = (_BYTE)v24;
  FuzzyContactMatchingKey = (void **)ImsPrefs::getFuzzyContactMatchingKey(v24);
  long long v26 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, FuzzyContactMatchingKey);
  LOBYTE(this[51].__begin_) = (_BYTE)v26;
  RegistrationCoalesceCushionPercentKey = (void **)ImsPrefs::getRegistrationCoalesceCushionPercentKey(v26);
  long long v28 = (ImsPrefs *)ImsPrefs::intValue(a2, RegistrationCoalesceCushionPercentKey);
  HIDWORD(this[2].__begin_) = v28;
  FeatureTagsEnabledKey = (void **)ImsPrefs::getFeatureTagsEnabledKey(v28);
  long long v30 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, FeatureTagsEnabledKey);
  LOBYTE(this[1].__end_) = (_BYTE)v30;
  ForcedFeatureTagsKey = (void **)ImsPrefs::getForcedFeatureTagsKey(v30);
  ImsPrefs::stringValue(a2, ForcedFeatureTagsKey);
  BOOL v32 = (ImsPrefs *)BambiServices::serviceMaskForNames(&__p);
  HIDWORD(this[1].__begin_) = v32;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ContactUserKey = (void **)ImsPrefs::getContactUserKey(v32);
  uint64_t v34 = (ImsPrefs *)ImsPrefs::stringValue(a2, ContactUserKey);
  p_std::vector<std::string>::pointer begin = (void **)&this[38].__begin_;
  if (SHIBYTE(this[38].__end_cap_.__value_) < 0) {
    operator delete(*p_begin);
  }
  *(_OWORD *)p_std::vector<std::string>::pointer begin = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  this[38].__end_cap_.__value_ = (std::string *)__p.__r_.__value_.__r.__words[2];
  AllowLimitedAccessModeRegistrationKey = (void **)ImsPrefs::getAllowLimitedAccessModeRegistrationKey(v34);
  long long v37 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AllowLimitedAccessModeRegistrationKey);
  BYTE2(this[1].__end_) = (_BYTE)v37;
  AllowDisabledModeKey = (void **)ImsPrefs::getAllowDisabledModeKey(v37);
  long long v39 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AllowDisabledModeKey);
  BYTE3(this[1].__end_) = (_BYTE)v39;
  RegistrationRetryIntervalsKey = (void **)ImsPrefs::getRegistrationRetryIntervalsKey(v39);
  ImsPrefs::stringValue(a2, RegistrationRetryIntervalsKey);
  this[40].__end_ = this[40].__begin_;
  memset(&__p, 0, sizeof(__p));
  ims::tokenize(&v142, (uint64_t *)&__p, 0x2Cu);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  std::string::size_type v41 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    long long v43 = this + 40;
    do
    {
      if (*(char *)(v41 + 23) < 0)
      {
        if (*(void *)(v41 + 8))
        {
LABEL_13:
          std::string::size_type v44 = std::string::find((const std::string *)v41, 43, 0);
          if (v44 == -1)
          {
            std::string v47 = (const char *)v41;
            if (*(char *)(v41 + 23) < 0) {
              std::string v47 = *(const char **)v41;
            }
            unint64_t v48 = strtoul(v47, 0, 10);
            if (v48)
            {
              unint64_t v49 = v48;
            }
            else
            {
              uint64_t v52 = *(unsigned __int8 *)(v41 + 23);
              int v53 = (char)v52;
              if ((v52 & 0x80u) != 0) {
                uint64_t v52 = *(void *)(v41 + 8);
              }
              if (v52 != 1) {
                goto LABEL_63;
              }
              uint64_t v54 = v53 >= 0 ? (unsigned char *)v41 : *(unsigned char **)v41;
              if (*v54 != 48) {
                goto LABEL_63;
              }
              unint64_t v49 = 0;
            }
            int v50 = 0;
          }
          else
          {
            std::string::size_type v45 = v44;
            memset(&v144, 0, sizeof(v144));
            std::string::basic_string(&v144, (const std::string *)v41, 0, v44, (std::allocator<char> *)&v143);
            memset(&v143, 0, sizeof(v143));
            std::string::basic_string(&v143, (const std::string *)v41, v45 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v146);
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            {
              if (!v144.__r_.__value_.__l.__size_) {
                goto LABEL_25;
              }
              std::string v46 = (std::string *)v144.__r_.__value_.__r.__words[0];
LABEL_24:
              unint64_t v49 = strtoul((const char *)v46, 0, 10);
            }
            else
            {
              if (*((unsigned char *)&v144.__r_.__value_.__s + 23))
              {
                std::string v46 = &v144;
                goto LABEL_24;
              }
LABEL_25:
              unint64_t v49 = 0;
            }
            if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v143.__r_.__value_.__l.__size_)
              {
                long long v51 = (std::string *)v143.__r_.__value_.__r.__words[0];
LABEL_31:
                int v50 = strtoul((const char *)v51, 0, 10);
                if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_44;
                }
              }
              else
              {
                int v50 = 0;
              }
              operator delete(v143.__r_.__value_.__l.__data_);
              goto LABEL_44;
            }
            if (*((unsigned char *)&v143.__r_.__value_.__s + 23))
            {
              long long v51 = &v143;
              goto LABEL_31;
            }
            int v50 = 0;
LABEL_44:
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v144.__r_.__value_.__l.__data_);
            }
          }
          std::vector<std::string>::pointer end = this[40].__end_;
          value = this[40].__end_cap_.__value_;
          if (end >= value)
          {
            uint64_t v58 = ((char *)end - (char *)v43->__begin_) >> 4;
            unint64_t v59 = v58 + 1;
            if ((unint64_t)(v58 + 1) >> 60) {
              std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v60 = (char *)value - (char *)v43->__begin_;
            if (v60 >> 3 > v59) {
              unint64_t v59 = v60 >> 3;
            }
            if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v61 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v61 = v59;
            }
            if (v61) {
              uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)&this[40].__end_cap_, v61);
            }
            else {
              uint64_t v62 = 0;
            }
            unint64_t v63 = &v62[16 * v58];
            *(void *)unint64_t v63 = v49;
            *((_DWORD *)v63 + 2) = v50;
            *((_DWORD *)v63 + 3) = 0;
            unint64_t v64 = this[40].__end_;
            std::vector<std::string>::pointer begin = this[40].__begin_;
            unint64_t v66 = (std::string *)v63;
            if (v64 != (_DWORD *)begin)
            {
              do
              {
                std::string::size_type v67 = *((void *)v64 - 2);
                v64 -= 4;
                int v68 = v64[2];
                v66[-1].__r_.__value_.__l.__size_ = v67;
                unint64_t v66 = (std::string *)((char *)v66 - 16);
                LODWORD(v66->__r_.__value_.__r.__words[1]) = v68;
              }
              while (v64 != (_DWORD *)begin);
              unint64_t v64 = v43->__begin_;
            }
            this[40].__begin_ = v66;
            uint64_t v57 = (std::string *)(v63 + 16);
            this[40].__end_ = (std::vector<std::string>::pointer)(v63 + 16);
            this[40].__end_cap_.__value_ = (std::string *)&v62[16 * v61];
            if (v64) {
              operator delete(v64);
            }
          }
          else
          {
            end->__r_.__value_.__r.__words[0] = v49;
            uint64_t v57 = (std::string *)&end->__r_.__value_.__r.__words[2];
            LODWORD(end->__r_.__value_.__r.__words[1]) = v50;
            HIDWORD(end->__r_.__value_.__r.__words[1]) = 0;
          }
          this[40].__end_ = v57;
        }
      }
      else if (*(unsigned char *)(v41 + 23))
      {
        goto LABEL_13;
      }
LABEL_63:
      v41 += 24;
    }
    while (v41 != size);
  }
  v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v142.__r_.__value_.__l.__data_);
  }
  MaxFatalRegistrationErrorsKey = (void **)ImsPrefs::getMaxFatalRegistrationErrorsKey(v69);
  int64_t v71 = (ImsPrefs *)ImsPrefs::intValue(a2, MaxFatalRegistrationErrorsKey);
  LODWORD(this[41].__end_cap_.__value_) = v71;
  MaxAuthRetriesKey = (void **)ImsPrefs::getMaxAuthRetriesKey(v71);
  uint64_t v73 = (ImsPrefs *)ImsPrefs::intValue(a2, MaxAuthRetriesKey);
  HIDWORD(this[41].__end_cap_.__value_) = v73;
  NetworkTerminationRetryIntervalSecondsKey = (void **)ImsPrefs::getNetworkTerminationRetryIntervalSecondsKey(v73);
  uint64_t v75 = (ImsPrefs *)ImsPrefs::intValue(a2, NetworkTerminationRetryIntervalSecondsKey);
  this[41].__begin_ = (std::vector<std::string>::pointer)(int)v75;
  SubscriptionTerminatedMeansRegistrationTerminatedKey = (void **)ImsPrefs::getSubscriptionTerminatedMeansRegistrationTerminatedKey(v75);
  unint64_t v77 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, SubscriptionTerminatedMeansRegistrationTerminatedKey);
  BYTE1(this[51].__begin_) = (_BYTE)v77;
  ReSubscribeOnReRegistrationKey = (void **)ImsPrefs::getReSubscribeOnReRegistrationKey(v77);
  uint64_t v79 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, ReSubscribeOnReRegistrationKey);
  BYTE2(this[51].__begin_) = (_BYTE)v79;
  RetryAfterStatusCodesKey = (void **)ImsPrefs::getRetryAfterStatusCodesKey(v79);
  ImsPrefs::stringValue(a2, RetryAfterStatusCodesKey);
  SipRegistrationConfig::retryAfterStatusCodesFromString((uint64_t)&this[51].__end_, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  IgnoreRetryAfterStatusCodesKey = (void **)ImsPrefs::getIgnoreRetryAfterStatusCodesKey(v81);
  ImsPrefs::stringValue(a2, IgnoreRetryAfterStatusCodesKey);
  SipRegistrationConfig::retryAfterStatusCodesFromString((uint64_t)&this[52].__end_, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ResetDisabledModeOnEventsKey = (void **)ImsPrefs::getResetDisabledModeOnEventsKey(v83);
  ImsPrefs::stringValue(a2, ResetDisabledModeOnEventsKey);
  unint64_t v85 = (ImsPrefs *)deviceEventsFromString(&__p);
  LODWORD(this[54].__end_) = v85;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ResetThrottlingOnEventsKey = (void **)ImsPrefs::getResetThrottlingOnEventsKey(v85);
  ImsPrefs::stringValue(a2, ResetThrottlingOnEventsKey);
  long long v87 = (ImsPrefs *)deviceEventsFromString(&__p);
  HIDWORD(this[54].__end_) = v87;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  MaxForbiddenErrorsKey = (void **)ImsPrefs::getMaxForbiddenErrorsKey(v87);
  long long v89 = (ImsPrefs *)ImsPrefs::intValue(a2, MaxForbiddenErrorsKey);
  LODWORD(this[55].__end_cap_.__value_) = v89;
  MaxReRegistrationAttemptsKey = (void **)ImsPrefs::getMaxReRegistrationAttemptsKey(v89);
  uint64_t v91 = (ImsPrefs *)ImsPrefs::intValue(a2, MaxReRegistrationAttemptsKey);
  HIDWORD(this[55].__end_cap_.__value_) = v91;
  long long v92 = (void **)ImsPrefs::getClearRegistrationCallIdOnDeinitializationKey(v91);
  unint64_t v93 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, v92);
  LOBYTE(this[56].__begin_) = (_BYTE)v93;
  IncompleteRegistrationThrottlingIntervalSecondsKey = (void **)ImsPrefs::getIncompleteRegistrationThrottlingIntervalSecondsKey(v93);
  long long v95 = (ImsPrefs *)ImsPrefs::intValue(a2, IncompleteRegistrationThrottlingIntervalSecondsKey);
  this[41].__end_ = (std::vector<std::string>::pointer)(int)v95;
  RegistrationRetryMaxTimeSecondsKey = (void **)ImsPrefs::getRegistrationRetryMaxTimeSecondsKey(v95);
  long long v97 = (ImsPrefs *)ImsPrefs::intValue(a2, RegistrationRetryMaxTimeSecondsKey);
  LODWORD(this[56].__end_) = v97;
  RegistrationRetryBaseTimeSecondsKey = (void **)ImsPrefs::getRegistrationRetryBaseTimeSecondsKey(v97);
  long long v99 = (ImsPrefs *)ImsPrefs::intValue(a2, RegistrationRetryBaseTimeSecondsKey);
  HIDWORD(this[56].__end_) = v99;
  UseFakeSAsForDeregistrationKey = (void **)ImsPrefs::getUseFakeSAsForDeregistrationKey(v99);
  uint64_t v101 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, UseFakeSAsForDeregistrationKey);
  BYTE1(this[56].__begin_) = (_BYTE)v101;
  MaxRegistrationAttemptsPerProxyKey = (void **)ImsPrefs::getMaxRegistrationAttemptsPerProxyKey(v101);
  char v103 = (ImsPrefs *)ImsPrefs::intValue(a2, MaxRegistrationAttemptsPerProxyKey);
  LODWORD(this[56].__end_cap_.__value_) = v103;
  PdnBringupTimerSecondsKey = (void **)ImsPrefs::getPdnBringupTimerSecondsKey(v103);
  HIDWORD(this[56].__end_cap_.__value_) = ImsPrefs::intValue(a2, PdnBringupTimerSecondsKey);
  long long v105 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(&__p, "REGISTER");
  FatalRegistrationErrorCodesKey = (void **)ImsPrefs::getFatalRegistrationErrorCodesKey(v105);
  ImsPrefs::stringValue(a2, FatalRegistrationErrorCodesKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)&this[59], (uint64_t)&__p, &v144);
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v107 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(&__p, "REGISTER");
  ForbiddenRegistrationErrorCodesKey = (void **)ImsPrefs::getForbiddenRegistrationErrorCodesKey(v107);
  ImsPrefs::stringValue(a2, ForbiddenRegistrationErrorCodesKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)&this[57].__end_cap_, (uint64_t)&__p, &v144);
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v109 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(&__p, "REGISTER");
  DontThrottleOnRegistrationErrorCodesKey = (void **)ImsPrefs::getDontThrottleOnRegistrationErrorCodesKey(v109);
  ImsPrefs::stringValue(a2, DontThrottleOnRegistrationErrorCodesKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)&this[60].__end_, (uint64_t)&__p, &v144);
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v111 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(&__p, "REGISTER");
  TimeoutRegistrationAllProxyErrorCodesKey = (void **)ImsPrefs::getTimeoutRegistrationAllProxyErrorCodesKey(v111);
  ImsPrefs::stringValue(a2, TimeoutRegistrationAllProxyErrorCodesKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)&this[61].__end_cap_, (uint64_t)&__p, &v144);
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  SubscriptionRetryMaxSecondsKey = (void **)ImsPrefs::getSubscriptionRetryMaxSecondsKey(v113);
  long long v115 = (ImsPrefs *)ImsPrefs::intValue(a2, SubscriptionRetryMaxSecondsKey);
  LODWORD(this[57].__begin_) = v115;
  SubscriptionRetryMinSecondsKey = (void **)ImsPrefs::getSubscriptionRetryMinSecondsKey(v115);
  long long v117 = (ImsPrefs *)ImsPrefs::intValue(a2, SubscriptionRetryMinSecondsKey);
  HIDWORD(this[57].__begin_) = v117;
  UseCustomSSOAuthKey = (void **)ImsPrefs::getUseCustomSSOAuthKey(v117);
  unsigned __int8 v119 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, UseCustomSSOAuthKey);
  LOBYTE(this[64].__end_) = (_BYTE)v119;
  DisableRegistrationOnNotifyEventsKey = ImsPrefs::getDisableRegistrationOnNotifyEventsKey(v119);
  long long v121 = (ImsPrefs *)ImsPrefs::stringArrayValues(a2, (uint64_t)DisableRegistrationOnNotifyEventsKey, this + 68);
  AllowRegistrationCanceledStateKey = (void **)ImsPrefs::getAllowRegistrationCanceledStateKey(v121);
  std::string v123 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AllowRegistrationCanceledStateKey);
  BYTE1(this[57].__end_) = (_BYTE)v123;
  KillRegistrationOnHandoverTimeoutKey = (void **)ImsPrefs::getKillRegistrationOnHandoverTimeoutKey(v123);
  unint64_t v125 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, KillRegistrationOnHandoverTimeoutKey);
  BYTE2(this[56].__begin_) = (_BYTE)v125;
  AlwaysResetProxyListKey = (void **)ImsPrefs::getAlwaysResetProxyListKey(v125);
  v127 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AlwaysResetProxyListKey);
  LOBYTE(this[69].__begin_) = (_BYTE)v127;
  uint64_t v128 = (void **)ImsPrefs::getDontChangeProxiesDuringActiveCallsKey(v127);
  uint64_t v129 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, v128);
  BYTE1(this[69].__begin_) = (_BYTE)v129;
  ReRegistrationHysteresisTimerMillisecondsKey = (void **)ImsPrefs::getReRegistrationHysteresisTimerMillisecondsKey(v129);
  unint64_t v131 = (ImsPrefs *)ImsPrefs::intValue(a2, ReRegistrationHysteresisTimerMillisecondsKey);
  HIDWORD(this[69].__begin_) = v131;
  HonorForbiddenRetryAfterKey = (void **)ImsPrefs::getHonorForbiddenRetryAfterKey(v131);
  unint64_t v133 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, HonorForbiddenRetryAfterKey);
  LOBYTE(this[67].__end_cap_.__value_) = (_BYTE)v133;
  ClearThrottlingOnSocketErrorsKey = (void **)ImsPrefs::getClearThrottlingOnSocketErrorsKey(v133);
  ImsPrefs::stringValue(a2, ClearThrottlingOnSocketErrorsKey);
  double v135 = (ImsPrefs *)ImsResultSet::fromString((uint64_t)&this[63], (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  UseNextProxyForPcscfRestorationKey = (void **)ImsPrefs::getUseNextProxyForPcscfRestorationKey(v135);
  double v137 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, UseNextProxyForPcscfRestorationKey);
  LOBYTE(this[69].__end_) = (_BYTE)v137;
  NoFallbackVoiceServiceKey = (void **)ImsPrefs::getNoFallbackVoiceServiceKey(v137);
  int v139 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, NoFallbackVoiceServiceKey);
  BYTE1(this[69].__end_) = (_BYTE)v139;
  DeferReRegOnSubDisableKey = (void **)ImsPrefs::getDeferReRegOnSubDisableKey(v139);
  uint64_t result = ImsPrefs::BOOLValue(a2, DeferReRegOnSubDisableKey);
  BYTE3(this[56].__begin_) = result;
  return result;
}

void sub_1C520598C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationConfig::retryAfterStatusCodesFromString(uint64_t a1, std::string *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::__tree<unsigned int>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  void *v4 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  ims::tokenize(a2, &v8, 0x2Cu);
  uint64_t v5 = v8;
  uint64_t v6 = v9;
  while (v5 != v6)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      if (!*(void *)(v5 + 8)) {
        goto LABEL_10;
      }
      LODWORD(v11) = 0;
      uint64_t v7 = *(const char **)v5;
    }
    else
    {
      if (!*(unsigned char *)(v5 + 23)) {
        goto LABEL_10;
      }
      LODWORD(v11) = 0;
      uint64_t v7 = (const char *)v5;
    }
    LODWORD(v11) = strtoul(v7, 0, 10);
    if (v11) {
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)a1, (unsigned int *)&v11, &v11);
    }
LABEL_10:
    v5 += 24;
  }
  uint64_t v11 = (void **)&v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_1C5205B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t deviceEventsFromString(std::string *a1)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  ims::tokenize(a1, &v15, 0x2Cu);
  uint64_t v1 = v15;
  uint64_t v2 = v16;
  if (v15 == v16)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    do
    {
      ims::chomp((std::string *)v1, "\r\n\t ", 3);
      int v4 = *(char *)(v1 + 23);
      if (v4 >= 0) {
        size_t v5 = *(unsigned __int8 *)(v1 + 23);
      }
      else {
        size_t v5 = *(void *)(v1 + 8);
      }
      switch(v5)
      {
        case 0xAuLL:
          if (v4 >= 0) {
            uint64_t v6 = (void *)v1;
          }
          else {
            uint64_t v6 = *(void **)v1;
          }
          if (memcmp(v6, "AudioReady", v5))
          {
            int v7 = memcmp(v6, "SubEnabled", v5);
            unsigned int v8 = v3 | 0x200;
            goto LABEL_34;
          }
          uint64_t v3 = v3 | 8;
          break;
        case 0xBuLL:
          if (v4 >= 0) {
            uint64_t v9 = (void *)v1;
          }
          else {
            uint64_t v9 = *(void **)v1;
          }
          if (*v9 != *(void *)"SimInserted" || *(void *)((char *)v9 + 3) != *(void *)"Inserted")
          {
            int v7 = memcmp(v9, "SubDisabled", v5);
            unsigned int v8 = v3 | 0x100;
            goto LABEL_34;
          }
          uint64_t v3 = v3 | 1;
          break;
        case 0x13uLL:
          if (v4 >= 0) {
            uint64_t v11 = (void *)v1;
          }
          else {
            uint64_t v11 = *(void **)v1;
          }
          if (memcmp(v11, "AirplaneModeToggled", v5))
          {
            int v7 = memcmp(v11, "AirplaneModeEnabled", v5);
            unsigned int v8 = v3 | 0x20;
            goto LABEL_34;
          }
          uint64_t v3 = v3 | 2;
          break;
        case 0x14uLL:
          if (v4 >= 0) {
            uint64_t v12 = (void *)v1;
          }
          else {
            uint64_t v12 = *(void **)v1;
          }
          if (memcmp(v12, "AccessNetworkChanged", v5))
          {
            int v7 = memcmp(v12, "AirplaneModeDisabled", v5);
            unsigned int v8 = v3 | 0x40;
            goto LABEL_34;
          }
          uint64_t v3 = v3 | 4;
          break;
        case 0x15uLL:
          if (v4 >= 0) {
            uint64_t v13 = (void *)v1;
          }
          else {
            uint64_t v13 = *(void **)v1;
          }
          int v7 = memcmp(v13, "ServingNetworkChanged", v5);
          unsigned int v8 = v3 | 0x80;
LABEL_34:
          if (v7) {
            uint64_t v3 = v3;
          }
          else {
            uint64_t v3 = v8;
          }
          break;
        default:
          break;
      }
      v1 += 24;
    }
    while (v1 != v2);
  }
  long long v18 = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
  return v3;
}

void sub_1C5205D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL SipRegistrationConfig::honorRetryAfterForStatusCode(SipRegistrationConfig *this, unsigned int a2)
{
  if (*((unsigned char *)this + 1348)) {
    return 1;
  }
  uint64_t v3 = *((void *)this + 158);
  if (!v3) {
    goto LABEL_14;
  }
  int v4 = (_DWORD *)((char *)this + 1264);
  do
  {
    unsigned int v5 = *(_DWORD *)(v3 + 28);
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      int v7 = (uint64_t *)v3;
    }
    else {
      int v7 = (uint64_t *)(v3 + 8);
    }
    if (v6) {
      int v4 = (_DWORD *)v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v4 != (_DWORD *)((char *)this + 1264) && v4[7] <= a2) {
    return 0;
  }
LABEL_14:
  if (!*((void *)this + 156)) {
    return 1;
  }
  unsigned int v8 = (char *)this + 1240;
  uint64_t v9 = (char *)*((void *)this + 155);
  if (!v9) {
    goto LABEL_26;
  }
  uint64_t v10 = (char *)this + 1240;
  do
  {
    unsigned int v11 = *((_DWORD *)v9 + 7);
    BOOL v12 = v11 >= a2;
    if (v11 >= a2) {
      uint64_t v13 = (char **)v9;
    }
    else {
      uint64_t v13 = (char **)(v9 + 8);
    }
    if (v12) {
      uint64_t v10 = v9;
    }
    uint64_t v9 = *v13;
  }
  while (*v13);
  if (v10 == v8 || *((_DWORD *)v10 + 7) > a2) {
LABEL_26:
  }
    uint64_t v10 = (char *)this + 1240;
  return v10 != v8;
}

uint64_t SipRegistrationConfig::isValid(SipRegistrationConfig *this)
{
  uint64_t result = SipUri::isValidUri((SipRegistrationConfig *)((char *)this + 72));
  if (!result) {
    return result;
  }
  if (*((char *)this + 911) < 0)
  {
    if (*((void *)this + 112)) {
      goto LABEL_12;
    }
  }
  else if (*((unsigned char *)this + 911))
  {
    goto LABEL_12;
  }
  if (*((char *)this + 111) < 0)
  {
    if (!*((void *)this + 12))
    {
LABEL_10:
      uint64_t result = *((void *)this + 15);
      if (!result) {
        return result;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 88))(result);
      if (!result) {
        return result;
      }
    }
  }
  else if (!*((unsigned char *)this + 111))
  {
    goto LABEL_10;
  }
LABEL_12:
  if (*((char *)this + 959) < 0)
  {
    if (*((void *)this + 118)) {
      return *(void *)this != *((void *)this + 1);
    }
  }
  else if (*((unsigned char *)this + 959))
  {
    return *(void *)this != *((void *)this + 1);
  }
  return 0;
}

void deviceEventsToString(__int16 a1)
{
  memset(&v85, 0, sizeof(v85));
  if ((a1 & 1) == 0) {
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SimInserted");
  std::vector<std::string>::pointer end = v85.__end_;
  if (v85.__end_ < v85.__end_cap_.__value_)
  {
    long long v3 = *(_OWORD *)__p;
    v85.__end_->__r_.__value_.__r.__words[2] = v84;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v3;
    v85.__end_ = end + 1;
    if ((a1 & 2) == 0) {
      goto LABEL_30;
    }
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(__p, "AirplaneModeToggled");
    std::vector<std::string>::pointer v11 = v85.__end_;
    if (v85.__end_ >= v85.__end_cap_.__value_)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v14) {
        unint64_t v14 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v14;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
      if (v15) {
        uint64_t v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v85.__end_cap_, v15);
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = v16 + v13;
      __v.__first_ = v16;
      __v.__begin_ = v17;
      __v.__end_cap_.__value_ = &v16[v15];
      long long v18 = *(_OWORD *)__p;
      v17->__r_.__value_.__r.__words[2] = v84;
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      __p[1] = 0;
      std::string::size_type v84 = 0;
      __p[0] = 0;
      __v.__end_ = v17 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v85, &__v);
      uint64_t v19 = v85.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v85.__end_ = v19;
      if (SHIBYTE(v84) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v12 = *(_OWORD *)__p;
      v85.__end_->__r_.__value_.__r.__words[2] = v84;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
      v85.__end_ = v11 + 1;
    }
    goto LABEL_30;
  }
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
  }
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555
     ? 0xAAAAAAAAAAAAAAALL
     : v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
  int v7 = v6
     ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v85.__end_cap_, v6)
     : 0;
  unsigned int v8 = v7 + v4;
  __v.__first_ = v7;
  __v.__begin_ = v8;
  __v.__end_cap_.__value_ = &v7[v6];
  long long v9 = *(_OWORD *)__p;
  v8->__r_.__value_.__r.__words[2] = v84;
  *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  __p[1] = 0;
  std::string::size_type v84 = 0;
  __p[0] = 0;
  __v.__end_ = v8 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v85, &__v);
  uint64_t v10 = v85.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v85.__end_ = v10;
  if (SHIBYTE(v84) < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 2) != 0) {
      goto LABEL_16;
    }
  }
  else
  {
LABEL_15:
    if ((a1 & 2) != 0) {
      goto LABEL_16;
    }
  }
  if ((a1 & 4) == 0) {
    goto LABEL_44;
  }
LABEL_30:
  std::string::basic_string[abi:ne180100]<0>(__p, "AccessNetworkChanged");
  std::vector<std::string>::pointer v20 = v85.__end_;
  if (v85.__end_ < v85.__end_cap_.__value_)
  {
    long long v21 = *(_OWORD *)__p;
    v85.__end_->__r_.__value_.__r.__words[2] = v84;
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
    v85.__end_ = v20 + 1;
    if ((a1 & 8) == 0) {
      goto LABEL_59;
    }
LABEL_45:
    std::string::basic_string[abi:ne180100]<0>(__p, "AudioReady");
    std::vector<std::string>::pointer v29 = v85.__end_;
    if (v85.__end_ >= v85.__end_cap_.__value_)
    {
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
      unint64_t v32 = v31 + 1;
      if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v32) {
        unint64_t v32 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v33 = v32;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
      if (v33) {
        uint64_t v34 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v85.__end_cap_, v33);
      }
      else {
        uint64_t v34 = 0;
      }
      char v35 = v34 + v31;
      __v.__first_ = v34;
      __v.__begin_ = v35;
      __v.__end_cap_.__value_ = &v34[v33];
      long long v36 = *(_OWORD *)__p;
      v35->__r_.__value_.__r.__words[2] = v84;
      *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
      __p[1] = 0;
      std::string::size_type v84 = 0;
      __p[0] = 0;
      __v.__end_ = v35 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v85, &__v);
      long long v37 = v85.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v85.__end_ = v37;
      if (SHIBYTE(v84) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v30 = *(_OWORD *)__p;
      v85.__end_->__r_.__value_.__r.__words[2] = v84;
      *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
      v85.__end_ = v29 + 1;
    }
    goto LABEL_59;
  }
  unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
  unint64_t v23 = v22 + 1;
  if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v23) {
    unint64_t v23 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
  }
  unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v23;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
  __int16 v25 = v24
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v85.__end_cap_, v24): 0;
  long long v26 = v25 + v22;
  __v.__first_ = v25;
  __v.__begin_ = v26;
  __v.__end_cap_.__value_ = &v25[v24];
  long long v27 = *(_OWORD *)__p;
  v26->__r_.__value_.__r.__words[2] = v84;
  *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
  __p[1] = 0;
  std::string::size_type v84 = 0;
  __p[0] = 0;
  __v.__end_ = v26 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v85, &__v);
  long long v28 = v85.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v85.__end_ = v28;
  if (SHIBYTE(v84) < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 8) != 0) {
      goto LABEL_45;
    }
  }
  else
  {
LABEL_44:
    if ((a1 & 8) != 0) {
      goto LABEL_45;
    }
  }
  if ((a1 & 0x80) == 0) {
    goto LABEL_73;
  }
LABEL_59:
  std::string::basic_string[abi:ne180100]<0>(__p, "ServingNetworkChanged");
  std::vector<std::string>::pointer v38 = v85.__end_;
  if (v85.__end_ < v85.__end_cap_.__value_)
  {
    long long v39 = *(_OWORD *)__p;
    v85.__end_->__r_.__value_.__r.__words[2] = v84;
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
    v85.__end_ = v38 + 1;
    if ((a1 & 0x40) == 0) {
      goto LABEL_88;
    }
LABEL_74:
    std::string::basic_string[abi:ne180100]<0>(__p, "AirplaneModeDisabled");
    std::vector<std::string>::pointer v47 = v85.__end_;
    if (v85.__end_ >= v85.__end_cap_.__value_)
    {
      unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
      unint64_t v50 = v49 + 1;
      if (v49 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v50) {
        unint64_t v50 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v51 = v50;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
      if (v51) {
        uint64_t v52 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v85.__end_cap_, v51);
      }
      else {
        uint64_t v52 = 0;
      }
      int v53 = v52 + v49;
      __v.__first_ = v52;
      __v.__begin_ = v53;
      __v.__end_cap_.__value_ = &v52[v51];
      long long v54 = *(_OWORD *)__p;
      v53->__r_.__value_.__r.__words[2] = v84;
      *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
      __p[1] = 0;
      std::string::size_type v84 = 0;
      __p[0] = 0;
      __v.__end_ = v53 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v85, &__v);
      long long v55 = v85.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v85.__end_ = v55;
      if (SHIBYTE(v84) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v48 = *(_OWORD *)__p;
      v85.__end_->__r_.__value_.__r.__words[2] = v84;
      *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v48;
      v85.__end_ = v47 + 1;
    }
    goto LABEL_88;
  }
  unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
  unint64_t v41 = v40 + 1;
  if (v40 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v41) {
    unint64_t v41 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
  }
  unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v41;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
  long long v43 = v42
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v85.__end_cap_, v42): 0;
  std::string::size_type v44 = v43 + v40;
  __v.__first_ = v43;
  __v.__begin_ = v44;
  __v.__end_cap_.__value_ = &v43[v42];
  long long v45 = *(_OWORD *)__p;
  v44->__r_.__value_.__r.__words[2] = v84;
  *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
  __p[1] = 0;
  std::string::size_type v84 = 0;
  __p[0] = 0;
  __v.__end_ = v44 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v85, &__v);
  std::string v46 = v85.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v85.__end_ = v46;
  if (SHIBYTE(v84) < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x40) != 0) {
      goto LABEL_74;
    }
  }
  else
  {
LABEL_73:
    if ((a1 & 0x40) != 0) {
      goto LABEL_74;
    }
  }
  if ((a1 & 0x20) == 0) {
    goto LABEL_102;
  }
LABEL_88:
  std::string::basic_string[abi:ne180100]<0>(__p, "AirplaneModeEnabled");
  std::vector<std::string>::pointer v56 = v85.__end_;
  if (v85.__end_ < v85.__end_cap_.__value_)
  {
    long long v57 = *(_OWORD *)__p;
    v85.__end_->__r_.__value_.__r.__words[2] = v84;
    *(_OWORD *)&v56->__r_.__value_.__l.__data_ = v57;
    v85.__end_ = v56 + 1;
    if ((a1 & 0x200) == 0) {
      goto LABEL_117;
    }
    goto LABEL_103;
  }
  unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
  unint64_t v59 = v58 + 1;
  if (v58 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v59) {
    unint64_t v59 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
  }
  unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v59;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
  unint64_t v61 = v60
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v85.__end_cap_, v60): 0;
  uint64_t v62 = v61 + v58;
  __v.__first_ = v61;
  __v.__begin_ = v62;
  __v.__end_cap_.__value_ = &v61[v60];
  long long v63 = *(_OWORD *)__p;
  v62->__r_.__value_.__r.__words[2] = v84;
  *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v63;
  __p[1] = 0;
  std::string::size_type v84 = 0;
  __p[0] = 0;
  __v.__end_ = v62 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v85, &__v);
  unint64_t v64 = v85.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v85.__end_ = v64;
  if (SHIBYTE(v84) < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x200) == 0) {
      goto LABEL_117;
    }
  }
  else
  {
LABEL_102:
    if ((a1 & 0x200) == 0) {
      goto LABEL_117;
    }
  }
LABEL_103:
  std::string::basic_string[abi:ne180100]<0>(__p, "SubEnabled");
  std::vector<std::string>::pointer v65 = v85.__end_;
  if (v85.__end_ >= v85.__end_cap_.__value_)
  {
    unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
    unint64_t v68 = v67 + 1;
    if (v67 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v68) {
      unint64_t v68 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v69 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v69 = v68;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
    if (v69) {
      long long v70 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v85.__end_cap_, v69);
    }
    else {
      long long v70 = 0;
    }
    int64_t v71 = v70 + v67;
    __v.__first_ = v70;
    __v.__begin_ = v71;
    __v.__end_cap_.__value_ = &v70[v69];
    long long v72 = *(_OWORD *)__p;
    v71->__r_.__value_.__r.__words[2] = v84;
    *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
    __p[1] = 0;
    std::string::size_type v84 = 0;
    __p[0] = 0;
    __v.__end_ = v71 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v85, &__v);
    uint64_t v73 = v85.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v85.__end_ = v73;
    if (SHIBYTE(v84) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v66 = *(_OWORD *)__p;
    v85.__end_->__r_.__value_.__r.__words[2] = v84;
    *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v66;
    v85.__end_ = v65 + 1;
  }
LABEL_117:
  if ((a1 & 0x100) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "SubDisabled");
    std::vector<std::string>::pointer v74 = v85.__end_;
    if (v85.__end_ >= v85.__end_cap_.__value_)
    {
      unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
      unint64_t v77 = v76 + 1;
      if (v76 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v77) {
        unint64_t v77 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v78 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v78 = v77;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
      if (v78) {
        uint64_t v79 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v85.__end_cap_, v78);
      }
      else {
        uint64_t v79 = 0;
      }
      uint64_t v80 = v79 + v76;
      __v.__first_ = v79;
      __v.__begin_ = v80;
      __v.__end_cap_.__value_ = &v79[v78];
      long long v81 = *(_OWORD *)__p;
      v80->__r_.__value_.__r.__words[2] = v84;
      *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v81;
      __p[1] = 0;
      std::string::size_type v84 = 0;
      __p[0] = 0;
      __v.__end_ = v80 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v85, &__v);
      long long v82 = v85.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v85.__end_ = v82;
      if (SHIBYTE(v84) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v75 = *(_OWORD *)__p;
      v85.__end_->__r_.__value_.__r.__words[2] = v84;
      *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v75;
      v85.__end_ = v74 + 1;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, ",");
  ims::join<std::__wrap_iter<std::string const*>>();
}

void sub_1C520693C(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, char a8, uint64_t a9, char *__pa, std::__split_buffer<std::string> *a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a15 < 0) {
    operator delete(__pa);
  }
  __pa = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void SDPMediaAudioSettings::~SDPMediaAudioSettings(void **this)
{
  *this = &unk_1F20B4C88;
  if (*((char *)this + 303) < 0) {
    operator delete(this[35]);
  }
  SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)this);
}

{
  uint64_t vars8;

  SDPMediaAudioSettings::~SDPMediaAudioSettings(this);
  JUMPOUT(0x1C878E320);
}

BOOL SDPMediaAudioSettings::operator!=(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 303);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 303);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 288);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 303);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 288);
  }
  if (v3 != v4) {
    return 1;
  }
  unsigned int v8 = (const void **)(a1 + 280);
  if (v5 >= 0) {
    long long v9 = (unsigned __int8 *)(a2 + 280);
  }
  else {
    long long v9 = *(unsigned __int8 **)(a2 + 280);
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 288))) {
      return 1;
    }
  }
  else if (*(unsigned char *)(a1 + 303))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      unsigned int v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 1;
  }
LABEL_16:
  if (*(unsigned __int16 *)(a1 + 304) != *(unsigned __int16 *)(a2 + 304)
    || *(unsigned __int16 *)(a1 + 306) != *(unsigned __int16 *)(a2 + 306)
    || *(unsigned __int16 *)(a1 + 308) != *(unsigned __int16 *)(a2 + 308)
    || *(unsigned __int16 *)(a1 + 312) != *(unsigned __int16 *)(a2 + 312)
    || *(unsigned __int16 *)(a1 + 314) != *(unsigned __int16 *)(a2 + 314)
    || SDPMediaAMRSettings::operator!=(a1 + 320, a2 + 320)
    || SDPMediaEVSSettings::operator!=(a1 + 360, a2 + 360))
  {
    return 1;
  }
  return SDPMediaSettings::operator!=(a1, a2);
}

BOOL SDPMediaAMRSettings::operator!=(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)
      || *(unsigned __int16 *)(a1 + 10) != *(unsigned __int16 *)(a2 + 10)
      || *(unsigned __int16 *)(a1 + 12) != *(unsigned __int16 *)(a2 + 12)
      || *(unsigned __int16 *)(a1 + 14) != *(unsigned __int16 *)(a2 + 14)
      || *(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16)
      || *(unsigned __int16 *)(a1 + 18) != *(unsigned __int16 *)(a2 + 18)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
      || *(void *)(a1 + 32) != *(void *)(a2 + 32);
}

BOOL SDPMediaEVSSettings::operator!=(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 != *(void *)a2
      || *(unsigned __int16 *)(a1 + 8) != *(unsigned __int16 *)(a2 + 8)
      || *(unsigned __int16 *)(a1 + 12) != *(unsigned __int16 *)(a2 + 12)
      || *(unsigned __int16 *)(a1 + 14) != *(unsigned __int16 *)(a2 + 14)
      || *(unsigned __int8 *)(a1 + 18) != *(unsigned __int8 *)(a2 + 18)
      || *(unsigned __int8 *)(a1 + 19) != *(unsigned __int8 *)(a2 + 19)
      || *(unsigned __int8 *)(a1 + 20) != *(unsigned __int8 *)(a2 + 20)
      || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
      || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)
      || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)
      || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)
      || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)
      || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 41)
      || *(void *)(a1 + 48) != *(void *)(a2 + 48)
      || *(unsigned __int8 *)(a1 + 63) != *(unsigned __int8 *)(a2 + 63)
      || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64)
      || *(unsigned __int8 *)(a1 + 65) != *(unsigned __int8 *)(a2 + 65);
}

BOOL SDPMediaAudioSettings::valid(SDPMediaAudioSettings *this)
{
  return *((void *)this + 1)
      && *((_WORD *)this + 12)
      && *((_WORD *)this + 13)
      && *((_WORD *)this + 14) != 255
      && *((unsigned __int16 *)this + 15) != 255;
}

void SDPMediaAMRSettings::SDPMediaAMRSettings(SDPMediaAMRSettings *this, const SDPMediaFormatAMRParams *a2, const SDPMediaFormatAMRParams *a3, int a4, int a5, __int16 a6)
{
  *(void *)this = &unk_1F20B3020;
  *((_WORD *)this + 5) = 0;
  *(_DWORD *)((char *)this + 14) = 0x20000;
  *((_WORD *)this + 9) = 2;
  *((void *)this + 4) = 0;
  *(void *)((char *)this + 20) = 0;
  *((unsigned char *)this + 8) = *((unsigned char *)a3 + 43);
  unsigned int v11 = (unsigned __int16)(*((_WORD *)a2 + 23) & *((_WORD *)a3 + 23));
  *((_WORD *)this + 6) = *((_WORD *)a2 + 23) & *((_WORD *)a3 + 23);
  if ((v11 >> a6))
  {
    __int16 v12 = a6;
  }
  else
  {
    __int16 v12 = 0;
    __int16 v13 = 0;
    do
    {
      if (v11) {
        __int16 v12 = v13;
      }
      ++v13;
      BOOL v14 = v11 > 1;
      v11 >>= 1;
    }
    while (v14);
    std::string::basic_string[abi:ne180100]<0>(v21, "sdp.amr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v15 = ims::warn((uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Preferred mode: ", 16);
    *(unsigned char *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" can't be used, using mode: ", 28);
    *(unsigned char *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
  }
  *((_WORD *)this + 5) = v12;
  *((_WORD *)this + 7) = *((_WORD *)a3 + 24);
  *((_WORD *)this + 8) = *((_WORD *)a3 + 26);
  *((_WORD *)this + 9) = *((_WORD *)a3 + 28);
  *((_WORD *)this + 10) = *((_WORD *)a3 + 30);
  if ((*(unsigned int (**)(const SDPMediaFormatAMRParams *))(*(void *)a2 + 64))(a2)) {
    char v16 = (*(uint64_t (**)(const SDPMediaFormatAMRParams *))(*(void *)a3 + 64))(a3) ^ 1;
  }
  else {
    char v16 = 1;
  }
  *((unsigned char *)this + 22) = v16;
  *((unsigned char *)this + 23) = *((unsigned char *)a3 + 44);
  if (*((unsigned char *)a3 + 50)) {
    BOOL v17 = 1;
  }
  else {
    BOOL v17 = *((unsigned char *)a2 + 50) != 0;
  }
  *((unsigned char *)this + 24) = v17;
  if (*((unsigned char *)a3 + 54)) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = *((unsigned char *)a2 + 54) != 0;
  }
  *((unsigned char *)this + 25) = v18;
  *((unsigned char *)this + 26) = *((unsigned char *)a3 + 58);
  *((unsigned char *)this + 27) = *((unsigned char *)a3 + 62);
  *((void *)this + 4) = SDPMediaAMRSettings::amrBandwidthASValue((SDPMediaAMRSettings *)*((unsigned __int16 *)this + 6), a4, a5, *((unsigned __int8 *)this + 8));
}

void sub_1C5207098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaAMRSettings::amrBandwidthASValue(SDPMediaAMRSettings *this, int a2, int a3, int a4)
{
  unsigned __int16 v4 = 0;
  unsigned __int16 v5 = 0;
  do
  {
    if (this) {
      unsigned __int16 v4 = v5;
    }
    ++v5;
    BOOL v6 = this > 1;
    LODWORD(this) = this >> 1;
  }
  while (v6);
  if (a2)
  {
    if (a4)
    {
      if (a3)
      {
        int v7 = &qword_1EBBDBB68;
        if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_0, memory_order_acquire) & 1) == 0)
        {
          char v22 = &_MergedGlobals_0;
          if (__cxa_guard_acquire(&_MergedGlobals_0))
          {
            qword_1EBBDBB68 = 0;
            qword_1EBBDBB70 = 0;
            qword_1EBBDBB78 = 0;
            unsigned int v8 = operator new(0x12uLL);
            qword_1EBBDBB68 = (uint64_t)v8;
            int v7 = &qword_1EBBDBB68;
            *(_OWORD *)unsigned int v8 = xmmword_1C56C84F0;
            v8[8] = 49;
            qword_1EBBDBB70 = (uint64_t)(v8 + 9);
            qword_1EBBDBB78 = (uint64_t)(v8 + 9);
LABEL_46:
            __cxa_guard_release(v22);
          }
        }
      }
      else
      {
        int v7 = &qword_1EBBDBB80;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDBB20, memory_order_acquire) & 1) == 0)
        {
          char v22 = &qword_1EBBDBB20;
          if (__cxa_guard_acquire(&qword_1EBBDBB20))
          {
            qword_1EBBDBB80 = 0;
            qword_1EBBDBB88 = 0;
            qword_1EBBDBB90 = 0;
            __int16 v12 = operator new(0x12uLL);
            qword_1EBBDBB80 = (uint64_t)v12;
            int v7 = &qword_1EBBDBB80;
            *(_OWORD *)__int16 v12 = xmmword_1C56C84E0;
            v12[8] = 41;
            qword_1EBBDBB88 = (uint64_t)(v12 + 9);
            qword_1EBBDBB90 = (uint64_t)(v12 + 9);
            goto LABEL_46;
          }
        }
      }
    }
    else if (a3)
    {
      int v7 = &qword_1EBBDBB98;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDBB28, memory_order_acquire) & 1) == 0)
      {
        char v22 = &qword_1EBBDBB28;
        if (__cxa_guard_acquire(&qword_1EBBDBB28))
        {
          qword_1EBBDBB98 = 0;
          qword_1EBBDBBA0 = 0;
          qword_1EBBDBBA8 = 0;
          uint64_t v10 = operator new(0x12uLL);
          qword_1EBBDBB98 = (uint64_t)v10;
          int v7 = &qword_1EBBDBB98;
          *(_OWORD *)uint64_t v10 = xmmword_1C56C84D0;
          v10[8] = 49;
          qword_1EBBDBBA0 = (uint64_t)(v10 + 9);
          qword_1EBBDBBA8 = (uint64_t)(v10 + 9);
          goto LABEL_46;
        }
      }
    }
    else
    {
      int v7 = &qword_1EBBDBBB0;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDBB30, memory_order_acquire) & 1) == 0)
      {
        char v22 = &qword_1EBBDBB30;
        if (__cxa_guard_acquire(&qword_1EBBDBB30))
        {
          qword_1EBBDBBB0 = 0;
          qword_1EBBDBBB8 = 0;
          qword_1EBBDBBC0 = 0;
          BOOL v14 = operator new(0x12uLL);
          qword_1EBBDBBB0 = (uint64_t)v14;
          int v7 = &qword_1EBBDBBB0;
          *(_OWORD *)BOOL v14 = xmmword_1C56C84C0;
          v14[8] = 41;
          qword_1EBBDBBB8 = (uint64_t)(v14 + 9);
          qword_1EBBDBBC0 = (uint64_t)(v14 + 9);
          goto LABEL_46;
        }
      }
    }
  }
  else if (a4)
  {
    if (a3)
    {
      int v7 = &qword_1EBBDBBC8;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDBB38, memory_order_acquire) & 1) == 0)
      {
        char v22 = &qword_1EBBDBB38;
        if (__cxa_guard_acquire(&qword_1EBBDBB38))
        {
          qword_1EBBDBBC8 = 0;
          qword_1EBBDBBD0 = 0;
          qword_1EBBDBBD8 = 0;
          long long v9 = operator new(0x10uLL);
          qword_1EBBDBBC8 = (uint64_t)v9;
          int v7 = &qword_1EBBDBBC8;
          _OWORD *v9 = xmmword_1C56C84B0;
          qword_1EBBDBBD0 = (uint64_t)(v9 + 1);
          qword_1EBBDBBD8 = (uint64_t)(v9 + 1);
          goto LABEL_46;
        }
      }
    }
    else
    {
      int v7 = &qword_1EBBDBBE0;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDBB40, memory_order_acquire) & 1) == 0)
      {
        char v22 = &qword_1EBBDBB40;
        if (__cxa_guard_acquire(&qword_1EBBDBB40))
        {
          qword_1EBBDBBE0 = 0;
          qword_1EBBDBBE8 = 0;
          qword_1EBBDBBF0 = 0;
          __int16 v13 = operator new(0x10uLL);
          qword_1EBBDBBE0 = (uint64_t)v13;
          int v7 = &qword_1EBBDBBE0;
          _OWORD *v13 = xmmword_1C56C84A0;
          qword_1EBBDBBE8 = (uint64_t)(v13 + 1);
          qword_1EBBDBBF0 = (uint64_t)(v13 + 1);
          goto LABEL_46;
        }
      }
    }
  }
  else if (a3)
  {
    int v7 = &qword_1EBBDBBF8;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDBB48, memory_order_acquire) & 1) == 0)
    {
      char v22 = &qword_1EBBDBB48;
      if (__cxa_guard_acquire(&qword_1EBBDBB48))
      {
        qword_1EBBDBBF8 = 0;
        qword_1EBBDBC00 = 0;
        qword_1EBBDBC08 = 0;
        unsigned int v11 = operator new(0x10uLL);
        qword_1EBBDBBF8 = (uint64_t)v11;
        int v7 = &qword_1EBBDBBF8;
        *unsigned int v11 = xmmword_1C56C8490;
        qword_1EBBDBC00 = (uint64_t)(v11 + 1);
        qword_1EBBDBC08 = (uint64_t)(v11 + 1);
        goto LABEL_46;
      }
    }
  }
  else
  {
    int v7 = &qword_1EBBDBC10;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDBB50, memory_order_acquire) & 1) == 0)
    {
      char v22 = &qword_1EBBDBB50;
      if (__cxa_guard_acquire(&qword_1EBBDBB50))
      {
        qword_1EBBDBC10 = 0;
        qword_1EBBDBC18 = 0;
        qword_1EBBDBC20 = 0;
        long long v21 = operator new(0x10uLL);
        qword_1EBBDBC10 = (uint64_t)v21;
        int v7 = &qword_1EBBDBC10;
        *long long v21 = xmmword_1C56C8480;
        qword_1EBBDBC18 = (uint64_t)(v21 + 1);
        qword_1EBBDBC20 = (uint64_t)(v21 + 1);
        goto LABEL_46;
      }
    }
  }
  uint64_t v15 = *v7;
  unint64_t v16 = (v7[1] - *v7) >> 1;
  if (v16 <= v4)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "sdp");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v18 = ims::error((uint64_t)v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"SDPAudioSettingsBuilder::amrBandwidthASVAlue relevantBWValues array only has ", 77);
    *(unsigned char *)(v18 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" values, highest mode is: ", 26);
    *(unsigned char *)(v18 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    uint64_t v15 = *v7;
    uint64_t v19 = v7[1] - *v7;
    unint64_t v17 = (unsigned __int16)((v19 >> 1) - 1);
    unint64_t v16 = v19 >> 1;
  }
  else
  {
    unint64_t v17 = v4;
  }
  if (v16 <= v17) {
    std::vector<unsigned short>::__throw_out_of_range[abi:ne180100]();
  }
  return *(unsigned __int16 *)(v15 + 2 * v17);
}

void sub_1C5207578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void SDPMediaEVSSettings::SDPMediaEVSSettings(SDPMediaEVSSettings *this, const SDPMediaFormatEVSParams *a2, const SDPMediaFormatEVSParams *a3, int a4, const ImsPrefs *a5)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 13) = 0;
  *((void *)this + 3) = 0x500000005;
  *((_DWORD *)this + 8) = 6;
  *((_WORD *)this + 20) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 131074;
  *((_WORD *)this + 32) = 0;
  uint64_t v10 = *((void *)a3 + 7);
  if (v10 == 2096640)
  {
    __int16 v12 = (unsigned int *)((char *)a3 + 84);
    int v11 = *((_DWORD *)a3 + 21);
    uint64_t v13 = *((void *)a2 + 7);
    uint64_t v14 = 2096640;
    switch(v11)
    {
      case 0:
        uint64_t v14 = 65024;
        goto LABEL_16;
      case 3:
        uint64_t v14 = 2093056;
        goto LABEL_16;
      case 5:
        uint64_t v14 = 2080768;
        goto LABEL_16;
      case 6:
        uint64_t v16 = v13 & 0x1FFE00;
        goto LABEL_18;
      default:
LABEL_16:
        uint64_t v16 = v14 & v13;
LABEL_18:
        *(void *)this = v16;
        break;
    }
  }
  else
  {
    *(void *)this = *((void *)a2 + 7) & v10;
    __int16 v12 = (unsigned int *)((char *)a3 + 84);
    if ((v10 & 0x3000) != 0) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if ((v10 & 0xC000) != 0) {
      int v15 = 6;
    }
    if ((v10 & 0xFE00) != 0) {
      int v11 = v15;
    }
    else {
      int v11 = 5;
    }
    if (*((_DWORD *)a3 + 21) != 6) {
      int v11 = *((_DWORD *)a3 + 21);
    }
  }
  if (*((_DWORD *)a2 + 21) < v11) {
    int v11 = *((_DWORD *)a2 + 21);
  }
  *((_DWORD *)this + 9) = v11;
  RestrictSessionEVSBandwidthKey = (void **)ImsPrefs::getRestrictSessionEVSBandwidthKey(this);
  uint64_t v18 = (ImsPrefs *)ImsPrefs::BOOLValue(a5, RestrictSessionEVSBandwidthKey);
  if (v18)
  {
    unsigned int v19 = *v12;
    if (*((_DWORD *)a2 + 21) < (signed int)*v12) {
      unsigned int v19 = *((_DWORD *)a2 + 21);
    }
  }
  else
  {
    unsigned int v19 = *v12;
  }
  *((_DWORD *)this + 8) = v19;
  if (v19 > 4) {
    int v20 = 5;
  }
  else {
    int v20 = dword_1C56C8538[v19];
  }
  *((_DWORD *)this + 6) = v20;
  uint64_t v21 = *((int *)this + 9);
  if (v21 > 4) {
    int v22 = 5;
  }
  else {
    int v22 = dword_1C56C8538[v21];
  }
  *((_DWORD *)this + 7) = v22;
  unint64_t v23 = (void **)ImsPrefs::getRestrictSessionEVSBandwidthKey(v18);
  if (ImsPrefs::BOOLValue(a5, v23))
  {
    unsigned int v24 = (unsigned __int16)(*((_WORD *)a2 + 40) & *((_WORD *)a3 + 40));
  }
  else if (*((unsigned __int16 *)a2 + 56) <= 2u && *((_WORD *)a2 + 40) == 7 && !*((unsigned char *)a3 + 45))
  {
    unsigned int v24 = 7;
  }
  else
  {
    unsigned int v24 = *((unsigned __int16 *)a3 + 40);
  }
  int v25 = 0;
  __int16 v26 = 0;
  *((_WORD *)this + 4) = v24;
  int v27 = *((unsigned __int8 *)a3 + 45);
  *((unsigned char *)this + 16) = v27;
  unint64_t v28 = *(void *)this;
  unint64_t v29 = *(void *)this;
  do
  {
    if (v29) {
      __int16 v26 = v25;
    }
    ++v25;
    BOOL v30 = v29 > 1;
    v29 >>= 1;
  }
  while (v30);
  if (v27 && ((v24 >> v26) & 1) == 0)
  {
    __int16 v31 = 0;
    int v32 = 0;
    do
    {
      if (v24) {
        __int16 v31 = v32;
      }
      ++v32;
      BOOL v30 = v24 > 1;
      v24 >>= 1;
    }
    while (v30);
    std::string::basic_string[abi:ne180100]<0>(v41, "sdp.evs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v33 = ims::warn((uint64_t)v41, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"Preferred mode: ", 16);
    *(unsigned char *)(v33 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v33 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)" can't be used in EVS AMR-WB IO mode, using mode: ", 50);
    *(unsigned char *)(v33 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v33 + 17) = 0;
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    unint64_t v28 = *(void *)this;
    __int16 v26 = v31;
  }
  *((_WORD *)this + 5) = v26;
  __int16 v34 = *((_WORD *)a3 + 24);
  *((_WORD *)this + 6) = v34;
  *((_WORD *)this + 7) = v34;
  *((unsigned char *)this + 17) = *((unsigned char *)a3 + 46);
  if ((v28 & 0x2000) != 0) {
    char v35 = *((unsigned char *)a3 + 99);
  }
  else {
    char v35 = -1;
  }
  *((unsigned char *)this + 18) = v35;
  *((unsigned char *)this + 19) = v35;
  *((unsigned char *)this + 20) = *((unsigned char *)a3 + 98);
  char v36 = *((unsigned char *)a3 + 44);
  *((unsigned char *)this + 40) = v36;
  *((unsigned char *)this + 41) = v36;
  *((void *)this + 6) = SDPMediaEVSSettings::evsBandwidthASValue(v28, (SDPMediaAMRSettings *)*((unsigned __int16 *)this + 4), *((unsigned __int8 *)this + 16), a4);
  *((_WORD *)this + 28) = *((_WORD *)a3 + 50);
  *(_DWORD *)((char *)this + 58) = *(_DWORD *)((char *)a3 + 102);
  if ((*(unsigned int (**)(const SDPMediaFormatEVSParams *))(*(void *)a2 + 64))(a2)) {
    char v37 = (*(uint64_t (**)(const SDPMediaFormatEVSParams *))(*(void *)a3 + 64))(a3) ^ 1;
  }
  else {
    char v37 = 1;
  }
  *((unsigned char *)this + 62) = v37;
  if (*((unsigned char *)a3 + 106)) {
    BOOL v38 = 1;
  }
  else {
    BOOL v38 = *((unsigned char *)a2 + 106) != 0;
  }
  *((unsigned char *)this + 63) = v38;
  *((_WORD *)this + 32) = *(_WORD *)((char *)a3 + 107);
}

void sub_1C5207A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaEVSSettings::evsBandwidthASValue(unint64_t this, SDPMediaAMRSettings *a2, int a3, int a4)
{
  if (a3)
  {
    return SDPMediaAMRSettings::amrBandwidthASValue(a2, 1, a4, 1);
  }
  unsigned __int16 v5 = 0;
  unsigned __int16 v6 = 0;
  uint64_t v7 = 1024;
  do
  {
    if ((v7 & this) != 0) {
      unsigned __int16 v5 = v6;
    }
    ++v6;
    v7 *= 2;
  }
  while (v7);
  if (a4)
  {
    unsigned int v8 = &qword_1EBBDBC28;
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDBB58, memory_order_acquire)) {
      goto LABEL_14;
    }
    uint64_t v16 = &qword_1EBBDBB58;
    if (!__cxa_guard_acquire(&qword_1EBBDBB58)) {
      goto LABEL_14;
    }
    qword_1EBBDBC28 = 0;
    qword_1EBBDBC30 = 0;
    qword_1EBBDBC38 = 0;
    long long v9 = operator new(0x16uLL);
    qword_1EBBDBC28 = (uint64_t)v9;
    unsigned int v8 = &qword_1EBBDBC28;
    *(_OWORD *)long long v9 = xmmword_1C56C8510;
    v9[4] = 7929945;
    *((_WORD *)v9 + 10) = 153;
    qword_1EBBDBC30 = (uint64_t)v9 + 22;
    qword_1EBBDBC38 = (uint64_t)v9 + 22;
  }
  else
  {
    unsigned int v8 = &qword_1EBBDBC40;
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDBB60, memory_order_acquire)) {
      goto LABEL_14;
    }
    uint64_t v16 = &qword_1EBBDBB60;
    if (!__cxa_guard_acquire(&qword_1EBBDBB60)) {
      goto LABEL_14;
    }
    qword_1EBBDBC40 = 0;
    qword_1EBBDBC48 = 0;
    qword_1EBBDBC50 = 0;
    int v15 = operator new(0x16uLL);
    qword_1EBBDBC40 = (uint64_t)v15;
    unsigned int v8 = &qword_1EBBDBC40;
    *(_OWORD *)int v15 = xmmword_1C56C8500;
    v15[4] = 7405649;
    *((_WORD *)v15 + 10) = 145;
    qword_1EBBDBC48 = (uint64_t)v15 + 22;
    qword_1EBBDBC50 = (uint64_t)v15 + 22;
  }
  __cxa_guard_release(v16);
LABEL_14:
  uint64_t v10 = *v8;
  unint64_t v11 = (v8[1] - *v8) >> 1;
  if (v11 <= v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "sdp");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v13 = ims::error((uint64_t)v19, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"SDPAudioSettingsBuilder::evsBandwidthASVAlue relevantBWValues array only has ", 77);
    *(unsigned char *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" values, highest mode is: ", 26);
    *(unsigned char *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    uint64_t v10 = *v8;
    uint64_t v14 = v8[1] - *v8;
    unint64_t v12 = (unsigned __int16)((v14 >> 1) - 1);
    unint64_t v11 = v14 >> 1;
  }
  else
  {
    unint64_t v12 = v5;
  }
  if (v11 <= v12) {
    std::vector<unsigned short>::__throw_out_of_range[abi:ne180100]();
  }
  return *(unsigned __int16 *)(v10 + 2 * v12);
}

void sub_1C5207D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void std::vector<unsigned short>::__throw_out_of_range[abi:ne180100]()
{
}

void SipAcceptHeader::~SipAcceptHeader(char **this)
{
  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipAcceptHeader::clone(SipAcceptHeader *this)
{
}

void sub_1C5207EFC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

uint64_t SipMultiStringHeader::allowsDuplicates(SipMultiStringHeader *this)
{
  return 1;
}

uint64_t SipMultiStringHeader::allowsMerging(SipMultiStringHeader *this)
{
  return 1;
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(void *)a2);
    std::__tree<std::string>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

SipState *BambiConferenceCallState::BambiConferenceCallState(SipState *a1, void *a2)
{
  uint64_t v4 = *a2;
  unsigned __int16 v5 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(*a2 + 368));
  SipState::SipState(a1, *(const SipUserAgent **)(*(void *)(v4 + 360) + 144));
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  *((void *)a1 + 24) = 0;
  *((void *)a1 + 25) = 0;
  *(void *)a1 = &unk_1F20B4D70;
  *((void *)a1 + 1) = &unk_1F20B4DD0;
  *((void *)a1 + 26) = 0;
  *((void *)a1 + 27) = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
    unsigned int v8 = (std::__shared_weak_count *)*((void *)a1 + 27);
    *((void *)a1 + 26) = v6;
    *((void *)a1 + 27) = v7;
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *((void *)a1 + 26) = v6;
    *((void *)a1 + 27) = 0;
  }
  return a1;
}

void sub_1C520805C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t BambiConferenceCallState::stateMachine(BambiConferenceCallState *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 26);
  if (v4) {
    uint64_t v5 = v4 + 1896;
  }
  else {
    uint64_t v5 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v5;
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 26);
  if (v4) {
    uint64_t v5 = v4 + 1896;
  }
  else {
    uint64_t v5 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v5;
}

void BambiConferenceCallState::participants(BambiConferenceCallState *this, uint64_t a2)
{
  memset(v8, 0, sizeof(v8));
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 216);
  if (v3 && (uint64_t v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a2 + 208);
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    if (v7) {
      std::vector<std::shared_ptr<BambiConferenceParticipant>>::__init_with_size[abi:ne180100]<std::shared_ptr<BambiConferenceParticipant>*,std::shared_ptr<BambiConferenceParticipant>*>(this, *(void **)(v7 + 1872), *(void **)(v7 + 1880), (uint64_t)(*(void *)(v7 + 1880) - *(void *)(v7 + 1872)) >> 4);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
  long long v9 = (void **)v8;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_1C52081B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

SipState *BambiConferenceCallWaitingForHoldState::BambiConferenceCallWaitingForHoldState(SipState *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiConferenceCallState::BambiConferenceCallState(a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_1F20B4E00;
  *((void *)a1 + 1) = &unk_1F20B4E68;
  return a1;
}

void sub_1C5208274(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiConferenceCallWaitingForHoldState::enterState(int8x8_t *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)this[27];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int8x8_t v4 = this[26];
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  int8x8_t v4 = 0;
LABEL_6:
  int8x8_t v6 = this[24];
  uint64_t v5 = (std::__shared_weak_count *)this[25];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(*(void *)&v4 + 368));
    SipUserAgent::config(*(SipUserAgent **)(*(void *)(*(void *)&v4 + 360) + 144));
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "WaitingForHoldTimeout");
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = 0;
  unsigned int v8 = operator new(0x20uLL);
  *unsigned int v8 = &unk_1F20B51C8;
  v8[1] = this;
  v8[2] = v6;
  void v8[3] = v5;
  unint64_t v12 = v8;
  SipTimerContainer::startTimer(this + 3, (uint64_t)__p);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C5208400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](&a15);
  if (a14 < 0)
  {
    operator delete(__p);
    if (!v16)
    {
LABEL_3:
      if (!v15) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v16)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (!v15) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_4:
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  goto LABEL_5;
}

void BambiConferenceCallWaitingForHoldState::handleTimer(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2 == 21)
  {
    int8x8_t v4 = v3 >= 0 ? (uint64_t *)a2 : *(uint64_t **)a2;
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    uint64_t v7 = *(uint64_t *)((char *)v4 + 13);
    BOOL v8 = v5 == 0x46676E6974696157 && v6 == 0x6954646C6F48726FLL;
    if (v8 && v7 == 0x74756F656D695464)
    {
      unint64_t v11 = *(std::__shared_weak_count **)(a1 + 216);
      if (v11)
      {
        unint64_t v12 = std::__shared_weak_count::lock(v11);
        if (v12)
        {
          uint64_t v13 = *(BambiCall **)(a1 + 208);
          if (v13)
          {
            std::string::basic_string[abi:ne180100]<0>(&v24, "bambi.conf");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v14 = ims::debug((uint64_t)&v24, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Timed out while waiting for initial participants to go on hold", 62);
            *(unsigned char *)(v14 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v14 + 17) = 0;
            if (v23 < 0) {
              operator delete(__p[0]);
            }
            if (v26 < 0) {
              operator delete(v24);
            }
            BambiConferenceCallState::participants((BambiConferenceCallState *)&v24, a1);
            if (v24 != v25)
            {
              uint64_t v15 = *(void *)v24;
              uint64_t v16 = *((void *)v24 + 1);
              if (v16)
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
                uint64_t v21 = v16;
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
              }
              else
              {
                uint64_t v21 = 0;
              }
              uint64_t v20 = v15;
              BambiConferenceCall::setParticipantState(v13, (uint64_t)&v20);
            }
            __p[0] = &v24;
            std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            BambiConferenceCallState::participants((BambiConferenceCallState *)&v24, a1);
            unint64_t v17 = v24;
            char v18 = v25;
            __p[0] = &v24;
            std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            if (v17 == v18) {
              BambiConferenceCall::cleanupOnTimeout((void **)v13);
            }
LABEL_34:
            if (v12) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
            return;
          }
        }
      }
      else
      {
        unint64_t v12 = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(&v24, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v19 = ims::debug((uint64_t)&v24, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"handleTimer", 11);
      *(unsigned char *)(v19 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" NULL conference call", 21);
      *(unsigned char *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v19 + 17) = 0;
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(v24);
      }
      goto LABEL_34;
    }
  }
}

void sub_1C5208764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void BambiConferenceCallWaitingForHoldState::handleParticipantStateChange(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if ((a4 & 0xFFFFFFF7) != 2) {
    return;
  }
  BambiConferenceCallState::participants((BambiConferenceCallState *)&v24, a1);
  uint64_t v5 = v24;
  uint64_t v6 = v25;
  if (v24 == v25)
  {
    v22[0] = &v24;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  }
  else
  {
    int v7 = 0;
    do
    {
      uint64_t v9 = *v5;
      BOOL v8 = (std::__shared_weak_count *)v5[1];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v22, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(v20, "");
      uint64_t v10 = ims::debug((uint64_t)v22, (uint64_t)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"checkForHeldParticipants: participant ", 38);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 + 264) + 40))(v9 + 264, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" is in state ", 13);
      *(unsigned char *)(v10 + 17) = 0;
      int v17 = *(_DWORD *)(v9 + 240);
      ims::toString<BambiCallParticipant::ParticipantState>(&v17, &v18);
      LoggableString::LoggableString(&__p, &v18);
      (*(void (**)(uint64_t, std::string *))(*(void *)v10 + 40))(v10, &__p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      if (*(int *)(v9 + 240) <= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v22, "bambi.conf");
        std::string::basic_string[abi:ne180100]<0>(v20, "");
        uint64_t v11 = ims::debug((uint64_t)v22, (uint64_t)v20);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 + 264) + 40))(v9 + 264, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" isn't held yet", 15);
        *(unsigned char *)(v11 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v11 + 17) = 0;
        if (v21 < 0) {
          operator delete(v20[0]);
        }
        if (v23 < 0) {
          operator delete(v22[0]);
        }
        ++v7;
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      v5 += 2;
    }
    while (v5 != v6);
    v22[0] = &v24;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
    if (v7) {
      goto LABEL_32;
    }
  }
  BambiConferenceCallState::participants((BambiConferenceCallState *)&v24, a1);
  unint64_t v12 = v24;
  uint64_t v13 = v25;
  v22[0] = &v24;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  if (v12 != v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    uint64_t v14 = ims::debug((uint64_t)&v24, (uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"All participants on hold. Start the session.", 44);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (v26 < 0) {
      operator delete(v24);
    }
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 2);
    return;
  }
LABEL_32:
  std::string::basic_string[abi:ne180100]<0>(&v24, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(v22, "");
  uint64_t v16 = ims::debug((uint64_t)&v24, (uint64_t)v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"BambiConferenceCall: still waiting for ", 39);
  *(unsigned char *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" participants to hold before starting conference", 48);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v26 < 0) {
    operator delete(v24);
  }
}

void sub_1C5208D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 81) < 0) {
    operator delete(*(void **)(v35 - 104));
  }
  _Unwind_Resume(exception_object);
}

SipState *BambiConferenceCallSessionRequestedState::BambiConferenceCallSessionRequestedState(SipState *a1, void *a2)
{
  int v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiConferenceCallState::BambiConferenceCallState(a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_1F20B4E98;
  *((void *)a1 + 1) = &unk_1F20B4EF8;
  return a1;
}

void sub_1C5208E80(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiConferenceCallSessionRequestedState::enterState(BambiConferenceCallSessionRequestedState *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int8x8_t v4 = v3;
      uint64_t v5 = (BambiConferenceCall *)*((void *)this + 26);
      if (v5) {
        BambiConferenceCall::startSessionWithConferenceServer(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5208EF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

SipState *BambiConferenceCallSessionConfirmedState::BambiConferenceCallSessionConfirmedState(SipState *a1, void *a2)
{
  int v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiConferenceCallState::BambiConferenceCallState(a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_1F20B4F28;
  *((void *)a1 + 1) = &unk_1F20B4F88;
  return a1;
}

void sub_1C5208FA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiConferenceCallSessionConfirmedState::addParticipants(BambiConferenceCallSessionConfirmedState *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *((void *)this + 26);
      if (v4)
      {
        BambiConferenceCallState::participants((BambiConferenceCallState *)&v31, (uint64_t)this);
        uint64_t v5 = (char *)v31;
        uint64_t v6 = v32;
        if (v31 == v32)
        {
          v23[0] = &v31;
          std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
          goto LABEL_48;
        }
        char v7 = 1;
        while (1)
        {
          uint64_t v9 = *(int8x8_t **)v5;
          BOOL v8 = (std::__shared_weak_count *)*((void *)v5 + 1);
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v9[30].i32[0] == 2)
          {
            std::string::basic_string[abi:ne180100]<0>(v29, "bambi.conf");
            std::string::basic_string[abi:ne180100]<0>(v27, "");
            uint64_t v10 = ims::debug((uint64_t)v29, (uint64_t)v27);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Adding ", 7);
            *(unsigned char *)(v10 + 17) = 0;
            (*(void (**)(int8x8_t *, uint64_t))(*(void *)&v9[33] + 40))(v9 + 33, v10);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" to conference ", 15);
            *(unsigned char *)(v10 + 17) = 0;
            ObfuscatedString::ObfuscatedString((uint64_t)v23, (const std::string *)(v4 + 472));
            (*(void (**)(uint64_t, void **))(*(void *)v10 + 56))(v10, v23);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v10 + 17) = 0;
            if (v26 < 0) {
              operator delete(__p);
            }
            if (v24 < 0) {
              operator delete(v23[0]);
            }
            if (v28 < 0) {
              operator delete(v27[0]);
            }
            if (v30 < 0) {
              operator delete(v29[0]);
            }
            BambiConferenceParticipant::joinConference(v9);
            uint64_t v11 = *(std::__shared_weak_count **)(v4 + 368);
            if (v11)
            {
              uint64_t v11 = std::__shared_weak_count::lock(v11);
              unint64_t v12 = v11;
              if (v11) {
                uint64_t v11 = *(std::__shared_weak_count **)(v4 + 360);
              }
            }
            else
            {
              unint64_t v12 = 0;
            }
            uint64_t v13 = (ImsPrefs *)SipStack::prefs((SipStack *)v11);
            SerializeRefersKey = (void **)ImsPrefs::getSerializeRefersKey(v13);
            if (ImsPrefs::BOOLValue(v13, SerializeRefersKey))
            {
              char v15 = 1;
            }
            else
            {
              uint64_t v16 = *(std::__shared_weak_count **)(v4 + 368);
              if (v16)
              {
                uint64_t v16 = std::__shared_weak_count::lock(v16);
                int v17 = v16;
                if (v16) {
                  uint64_t v16 = *(std::__shared_weak_count **)(v4 + 360);
                }
              }
              else
              {
                int v17 = 0;
              }
              std::string v18 = (ImsPrefs *)SipStack::prefs((SipStack *)v16);
              SerializeParticipantsKey = (void **)ImsPrefs::getSerializeParticipantsKey(v18);
              char v15 = ImsPrefs::BOOLValue(v18, SerializeParticipantsKey);
              if (v17) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v17);
              }
            }
            if (v12) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
            char v7 = 0;
            if (v15) {
              break;
            }
          }
          char v20 = 0;
          if (v8) {
            goto LABEL_35;
          }
LABEL_36:
          v5 += 16;
          if (v5 == v6) {
            char v21 = 1;
          }
          else {
            char v21 = v20;
          }
          if (v21)
          {
            v23[0] = &v31;
            std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
            if ((v7 & 1) == 0) {
              goto LABEL_49;
            }
LABEL_48:
            BambiConferenceCall::subscribeToConferenceEvents((BambiConferenceCall *)v4);
            goto LABEL_49;
          }
        }
        char v20 = 1;
        if (!v8) {
          goto LABEL_36;
        }
LABEL_35:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        goto LABEL_36;
      }
    }
  }
  else
  {
    int v3 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(&v31, "");
  uint64_t v22 = ims::debug((uint64_t)v23, (uint64_t)&v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"addParticipants", 15);
  *(unsigned char *)(v22 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" NULL conference call", 21);
  *(unsigned char *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v22 + 17) = 0;
  if (v33 < 0) {
    operator delete(v31);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
LABEL_49:
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C5209378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Unwind_Resume(exception_object);
}

void BambiConferenceCallSessionConfirmedState::handleParticipantStateChange(BambiConferenceCallSessionConfirmedState *a1, int8x8_t **a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 27);
  if (v5)
  {
    BOOL v8 = std::__shared_weak_count::lock(v5);
    if (v8)
    {
      uint64_t v9 = *((void *)a1 + 26);
      if (v9)
      {
        if (a4 == 2)
        {
          if ((*(_DWORD *)(v9 + 448) & 0xFFFFFFFE) == 2)
          {
            std::string::basic_string[abi:ne180100]<0>(v29, "bambi.conf");
            std::string::basic_string[abi:ne180100]<0>(v27, "");
            uint64_t v10 = ims::debug((uint64_t)v29, (uint64_t)v27);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Wait to resume conference ", 26);
            *(unsigned char *)(v10 + 17) = 0;
            ObfuscatedString::ObfuscatedString((uint64_t)v23, (const std::string *)(v9 + 472));
            (*(void (**)(uint64_t, void **))(*(void *)v10 + 56))(v10, v23);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v10 + 17) = 0;
            if (v26 < 0) {
              operator delete(__p);
            }
            if (v24 < 0) {
              operator delete(v23[0]);
            }
            if (v28 < 0) {
              operator delete(v27[0]);
            }
            if (v30 < 0) {
              operator delete(v29[0]);
            }
            uint64_t v11 = (*(uint64_t (**)(BambiConferenceCallSessionConfirmedState *))(*(void *)a1 + 32))(a1);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 4);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v29, "bambi.conf");
            std::string::basic_string[abi:ne180100]<0>(v27, "");
            uint64_t v13 = ims::debug((uint64_t)v29, (uint64_t)v27);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Adding ", 7);
            *(unsigned char *)(v13 + 17) = 0;
            (*(void (**)(int8x8_t *, uint64_t))(*(void *)&(*a2)[33] + 40))(*a2 + 33, v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" to conference ", 15);
            *(unsigned char *)(v13 + 17) = 0;
            ObfuscatedString::ObfuscatedString((uint64_t)v23, (const std::string *)(v9 + 472));
            (*(void (**)(uint64_t, void **))(*(void *)v13 + 56))(v13, v23);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v13 + 17) = 0;
            if (v26 < 0) {
              operator delete(__p);
            }
            if (v24 < 0) {
              operator delete(v23[0]);
            }
            if (v28 < 0) {
              operator delete(v27[0]);
            }
            if (v30 < 0) {
              operator delete(v29[0]);
            }
            BambiConferenceParticipant::joinConference(*a2);
          }
        }
        uint64_t v14 = *(std::__shared_weak_count **)(v9 + 368);
        if (v14)
        {
          uint64_t v14 = std::__shared_weak_count::lock(v14);
          char v15 = v14;
          if (v14) {
            uint64_t v14 = *(std::__shared_weak_count **)(v9 + 360);
          }
        }
        else
        {
          char v15 = 0;
        }
        uint64_t v16 = (ImsPrefs *)SipStack::prefs((SipStack *)v14);
        SerializeParticipantsKey = (void **)ImsPrefs::getSerializeParticipantsKey(v16);
        int v18 = ImsPrefs::BOOLValue(v16, SerializeParticipantsKey);
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        if (v18)
        {
          if (a4 != 5 && a4 != 10)
          {
            if (a4 == 6)
            {
              uint64_t v19 = *((void *)a1 + 25);
              if (v19) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 16), 1uLL, memory_order_relaxed);
              }
              uint64_t v20 = BambiCall::bambiClient((BambiCall *)v9);
              LoggableString::LoggableString((LoggableString *)v23, "handleParticipantStateChange");
              v22[0] = v9;
              v22[1] = v8;
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
              if (v19) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 16), 1uLL, memory_order_relaxed);
              }
              BambiClient::performBlock(v20, (uint64_t)v23, (uint64_t)v22);
            }
            goto LABEL_50;
          }
        }
        else if (a4 > 0xA || ((1 << a4) & 0x470) == 0)
        {
LABEL_50:
          if (a4 - 8 <= 2)
          {
            std::string::basic_string[abi:ne180100]<0>(v29, "bambi.conf");
            std::string::basic_string[abi:ne180100]<0>(v27, "");
            uint64_t v21 = ims::debug((uint64_t)v29, (uint64_t)v27);
            (*(void (**)(int8x8_t *, uint64_t))(*(void *)&(*a2)[33] + 40))(*a2 + 33, v21);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)" left conference ", 17);
            *(unsigned char *)(v21 + 17) = 0;
            ObfuscatedString::ObfuscatedString((uint64_t)v23, (const std::string *)(v9 + 472));
            (*(void (**)(uint64_t, void **))(*(void *)v21 + 56))(v21, v23);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v21 + 17) = 0;
            if (v26 < 0) {
              operator delete(__p);
            }
            if (v24 < 0) {
              operator delete(v23[0]);
            }
            if (v28 < 0) {
              operator delete(v27[0]);
            }
            if (v30 < 0) {
              operator delete(v29[0]);
            }
            BambiConferenceParticipant::handleParticipantLeftConference((BambiConferenceParticipant *)*a2, a4 == 9);
          }
LABEL_21:
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          return;
        }
        BambiConferenceCallSessionConfirmedState::addParticipants(a1);
        goto LABEL_50;
      }
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(v29, "");
  uint64_t v12 = ims::debug((uint64_t)v23, (uint64_t)v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"handleParticipantStateChange", 28);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" NULL conference call", 21);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v8) {
    goto LABEL_21;
  }
}

void sub_1C5209B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void ___ZN40BambiConferenceCallSessionConfirmedState28handleParticipantStateChangeENSt3__110shared_ptrI26BambiConferenceParticipantEEN20BambiCallParticipant16ParticipantStateES5__block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    int v3 = (BambiConferenceCallSessionConfirmedState *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        BambiConferenceCallSessionConfirmedState::addParticipants(v3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5209C88(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__18weak_ptrI24BambiConferenceCallStateEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__18weak_ptrI24BambiConferenceCallStateEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

SipState *BambiConferenceCallSessionTerminatedState::BambiConferenceCallSessionTerminatedState(SipState *a1, void *a2)
{
  int v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiConferenceCallState::BambiConferenceCallState(a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_1F20B4FE8;
  *((void *)a1 + 1) = &unk_1F20B5048;
  return a1;
}

void sub_1C5209D60(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiConferenceCallSessionTerminatedState::enterState(BambiConferenceCallSessionTerminatedState *this)
{
  BambiConferenceCallState::participants((BambiConferenceCallState *)&v5, (uint64_t)this);
  uint64_t v1 = v5;
  for (uint64_t i = v6; v1 != i; v1 += 16)
  {
    int v3 = *(BambiConferenceParticipant **)v1;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BambiConferenceParticipant::handleParticipantLeftConference(v3, 0);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  char v7 = (void **)&v5;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1C5209E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

SipState *BambiConferenceCallWaitToResumeConfirmedSessionState::BambiConferenceCallWaitToResumeConfirmedSessionState(SipState *a1, void *a2)
{
  int v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiConferenceCallState::BambiConferenceCallState(a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_1F20B5078;
  *((void *)a1 + 1) = &unk_1F20B50D8;
  return a1;
}

void sub_1C5209ECC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiConferenceCallWaitToResumeConfirmedSessionState::enterState(BambiConferenceCallWaitToResumeConfirmedSessionState *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = (BambiConferenceCall *)*((void *)this + 26);
      if (v4)
      {
        BambiConferenceCall::resumeConferenceCall(v4);
LABEL_11:
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
        return;
      }
    }
  }
  else
  {
    int v3 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v5 = ims::debug((uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"enterState", 10);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" NULL conference call", 21);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v3) {
    goto LABEL_11;
  }
}

void sub_1C5209FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void BambiConferenceCallWaitToResumeConfirmedSessionState::handleParticipantStateChange(uint64_t a1, BambiConferenceParticipant **a2, uint64_t a3, int a4)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 216);
  if (v5)
  {
    BOOL v8 = std::__shared_weak_count::lock(v5);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 208);
      if (v9)
      {
        if ((a4 - 8) <= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(v18, "bambi.conf");
          std::string::basic_string[abi:ne180100]<0>(v16, "");
          uint64_t v10 = ims::debug((uint64_t)v18, (uint64_t)v16);
          (*(void (**)(uint64_t, uint64_t))(*((void *)*a2 + 33) + 40))((uint64_t)*a2 + 264, v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" left conference ", 17);
          *(unsigned char *)(v10 + 17) = 0;
          ObfuscatedString::ObfuscatedString((uint64_t)v12, (const std::string *)(v9 + 472));
          (*(void (**)(uint64_t, void **))(*(void *)v10 + 56))(v10, v12);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v10 + 17) = 0;
          if (v15 < 0) {
            operator delete(__p);
          }
          if (v13 < 0) {
            operator delete(v12[0]);
          }
          if (v17 < 0) {
            operator delete(v16[0]);
          }
          if (v19 < 0) {
            operator delete(v18[0]);
          }
          BambiConferenceParticipant::handleParticipantLeftConference(*a2, a4 == 9);
        }
LABEL_20:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return;
      }
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(v18, "");
  uint64_t v11 = ims::debug((uint64_t)v12, (uint64_t)v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"handleParticipantStateChange", 28);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" NULL conference call", 21);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v8) {
    goto LABEL_20;
  }
}

void sub_1C520A2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void BambiConferenceCallState::~BambiConferenceCallState(BambiConferenceCallState *this)
{
  *(void *)this = &unk_1F20B4D70;
  *((void *)this + 1) = &unk_1F20B4DD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipState::~SipState(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20B4D70;
  *((void *)this + 1) = &unk_1F20B4DD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipState::~SipState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t BambiConferenceCallState::id(BambiConferenceCallState *this)
{
  return 0;
}

void non-virtual thunk to'BambiConferenceCallState::~BambiConferenceCallState(BambiConferenceCallState *this)
{
  uint64_t v2 = (BambiConferenceCallState *)((char *)this - 8);
  *((void *)this - 1) = &unk_1F20B4D70;
  *(void *)this = &unk_1F20B4DD0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  SipState::~SipState(v2);
}

{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  uint64_t v2 = (BambiConferenceCallState *)((char *)this - 8);
  *((void *)this - 1) = &unk_1F20B4D70;
  *(void *)this = &unk_1F20B4DD0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  SipState::~SipState(v2);
  JUMPOUT(0x1C878E320);
}

void BambiConferenceCallWaitingForHoldState::~BambiConferenceCallWaitingForHoldState(BambiConferenceCallWaitingForHoldState *this)
{
  *(void *)this = &unk_1F20B4D70;
  *((void *)this + 1) = &unk_1F20B4DD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipState::~SipState(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20B4D70;
  *((void *)this + 1) = &unk_1F20B4DD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipState::~SipState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t BambiConferenceCallWaitingForHoldState::id(BambiConferenceCallWaitingForHoldState *this)
{
  return 1;
}

void non-virtual thunk to'BambiConferenceCallWaitingForHoldState::~BambiConferenceCallWaitingForHoldState(BambiConferenceCallWaitingForHoldState *this)
{
  uint64_t v2 = (BambiConferenceCallWaitingForHoldState *)((char *)this - 8);
  *((void *)this - 1) = &unk_1F20B4D70;
  *(void *)this = &unk_1F20B4DD0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  SipState::~SipState(v2);
}

{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  uint64_t v2 = (BambiConferenceCallWaitingForHoldState *)((char *)this - 8);
  *((void *)this - 1) = &unk_1F20B4D70;
  *(void *)this = &unk_1F20B4DD0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  SipState::~SipState(v2);
  JUMPOUT(0x1C878E320);
}

void BambiConferenceCallSessionRequestedState::~BambiConferenceCallSessionRequestedState(BambiConferenceCallSessionRequestedState *this)
{
  *(void *)this = &unk_1F20B4D70;
  *((void *)this + 1) = &unk_1F20B4DD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipState::~SipState(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20B4D70;
  *((void *)this + 1) = &unk_1F20B4DD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipState::~SipState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t BambiConferenceCallSessionRequestedState::id(BambiConferenceCallSessionRequestedState *this)
{
  return 2;
}

void non-virtual thunk to'BambiConferenceCallSessionRequestedState::~BambiConferenceCallSessionRequestedState(BambiConferenceCallSessionRequestedState *this)
{
  uint64_t v2 = (BambiConferenceCallSessionRequestedState *)((char *)this - 8);
  *((void *)this - 1) = &unk_1F20B4D70;
  *(void *)this = &unk_1F20B4DD0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  SipState::~SipState(v2);
}

{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  uint64_t v2 = (BambiConferenceCallSessionRequestedState *)((char *)this - 8);
  *((void *)this - 1) = &unk_1F20B4D70;
  *(void *)this = &unk_1F20B4DD0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  SipState::~SipState(v2);
  JUMPOUT(0x1C878E320);
}

void BambiConferenceCallSessionConfirmedState::~BambiConferenceCallSessionConfirmedState(BambiConferenceCallSessionConfirmedState *this)
{
  *(void *)this = &unk_1F20B4D70;
  *((void *)this + 1) = &unk_1F20B4DD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipState::~SipState(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20B4D70;
  *((void *)this + 1) = &unk_1F20B4DD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipState::~SipState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t BambiConferenceCallSessionConfirmedState::id(BambiConferenceCallSessionConfirmedState *this)
{
  return 3;
}

void non-virtual thunk to'BambiConferenceCallSessionConfirmedState::~BambiConferenceCallSessionConfirmedState(BambiConferenceCallSessionConfirmedState *this)
{
  uint64_t v2 = (BambiConferenceCallSessionConfirmedState *)((char *)this - 8);
  *((void *)this - 1) = &unk_1F20B4D70;
  *(void *)this = &unk_1F20B4DD0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  SipState::~SipState(v2);
}

{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  uint64_t v2 = (BambiConferenceCallSessionConfirmedState *)((char *)this - 8);
  *((void *)this - 1) = &unk_1F20B4D70;
  *(void *)this = &unk_1F20B4DD0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  SipState::~SipState(v2);
  JUMPOUT(0x1C878E320);
}

void BambiConferenceCallSessionTerminatedState::~BambiConferenceCallSessionTerminatedState(BambiConferenceCallSessionTerminatedState *this)
{
  *(void *)this = &unk_1F20B4D70;
  *((void *)this + 1) = &unk_1F20B4DD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipState::~SipState(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20B4D70;
  *((void *)this + 1) = &unk_1F20B4DD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipState::~SipState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t BambiConferenceCallSessionTerminatedState::id(BambiConferenceCallSessionTerminatedState *this)
{
  return 5;
}

void non-virtual thunk to'BambiConferenceCallSessionTerminatedState::~BambiConferenceCallSessionTerminatedState(BambiConferenceCallSessionTerminatedState *this)
{
  uint64_t v2 = (BambiConferenceCallSessionTerminatedState *)((char *)this - 8);
  *((void *)this - 1) = &unk_1F20B4D70;
  *(void *)this = &unk_1F20B4DD0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  SipState::~SipState(v2);
}

{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  uint64_t v2 = (BambiConferenceCallSessionTerminatedState *)((char *)this - 8);
  *((void *)this - 1) = &unk_1F20B4D70;
  *(void *)this = &unk_1F20B4DD0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  SipState::~SipState(v2);
  JUMPOUT(0x1C878E320);
}

void BambiConferenceCallWaitToResumeConfirmedSessionState::~BambiConferenceCallWaitToResumeConfirmedSessionState(BambiConferenceCallWaitToResumeConfirmedSessionState *this)
{
  *(void *)this = &unk_1F20B4D70;
  *((void *)this + 1) = &unk_1F20B4DD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipState::~SipState(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20B4D70;
  *((void *)this + 1) = &unk_1F20B4DD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipState::~SipState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t BambiConferenceCallWaitToResumeConfirmedSessionState::id(BambiConferenceCallWaitToResumeConfirmedSessionState *this)
{
  return 4;
}

void non-virtual thunk to'BambiConferenceCallWaitToResumeConfirmedSessionState::~BambiConferenceCallWaitToResumeConfirmedSessionState(BambiConferenceCallWaitToResumeConfirmedSessionState *this)
{
  uint64_t v2 = (BambiConferenceCallWaitToResumeConfirmedSessionState *)((char *)this - 8);
  *((void *)this - 1) = &unk_1F20B4D70;
  *(void *)this = &unk_1F20B4DD0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  SipState::~SipState(v2);
}

{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  uint64_t v2 = (BambiConferenceCallWaitToResumeConfirmedSessionState *)((char *)this - 8);
  *((void *)this - 1) = &unk_1F20B4D70;
  *(void *)this = &unk_1F20B4DD0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  SipState::~SipState(v2);
  JUMPOUT(0x1C878E320);
}

void *std::vector<std::shared_ptr<BambiConferenceParticipant>>::__init_with_size[abi:ne180100]<std::shared_ptr<BambiConferenceParticipant>*,std::shared_ptr<BambiConferenceParticipant>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<BambiConferenceParticipant>>,std::shared_ptr<BambiConferenceParticipant>*,std::shared_ptr<BambiConferenceParticipant>*,std::shared_ptr<BambiConferenceParticipant>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C520B1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<BambiConferenceParticipant>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<BambiConferenceParticipant>>,std::shared_ptr<BambiConferenceParticipant>*,std::shared_ptr<BambiConferenceParticipant>*,std::shared_ptr<BambiConferenceParticipant>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v8;
  v7[3] = 1;
  BOOL v8 = a4;
  uint64_t v7[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<BambiConferenceParticipant>>,std::shared_ptr<BambiConferenceParticipant>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<BambiConferenceParticipant>>,std::shared_ptr<BambiConferenceParticipant>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<BambiConferenceParticipant>>,std::shared_ptr<BambiConferenceParticipant>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<BambiConferenceParticipant>>,std::shared_ptr<BambiConferenceParticipant>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    int v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

void std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100]((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void *std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B51C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B51C8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20B51C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20B51C8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      char v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 80))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C520B600(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t AVCRTTSession::AVCRTTSession(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, ImsPrefs *a5, uint64_t *a6, long long *a7, dispatch_object_t *a8)
{
  *(void *)(a1 + 112) = &unk_1F20B2FA8;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v22 = *a2;
  char v23 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a4[1];
  uint64_t v20 = *a4;
  uint64_t v21 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)a6[1];
  uint64_t v18 = *a6;
  char v19 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AVCRTPSession<AVCTextStream>::AVCRTPSession(a1, (uint64_t *)&off_1F20B5470, &v22, a3, &v20, a5, &v18, a7, a8);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  *(void *)a1 = &unk_1F20B5250;
  *(void *)(a1 + 24) = &unk_1F20B5308;
  *(void *)(a1 + 112) = &unk_1F20B5430;
  *(unsigned char *)(a1 + 553) = 0;
  *(void *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  std::string::basic_string[abi:ne180100]<0>(v16, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v12 = ims::debug((uint64_t)v16, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"AVCRTTSession", 13);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  ++RTPManager::kRTTSessionCount;
  *(unsigned char *)(a1 + 104) = 0;
  return a1;
}

void sub_1C520B8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v24 + 607) < 0) {
    operator delete(*(void **)(v24 + 584));
  }
  AVCRTPSession<AVCTextStream>::~AVCRTPSession(v24, (uint64_t *)&off_1F20B5470);
  _Unwind_Resume(a1);
}

void AVCRTTSession::~AVCRTTSession(AVCRTTSession *this)
{
  *(void *)this = &unk_1F20B5250;
  *((void *)this + 3) = &unk_1F20B5308;
  *((void *)this + 14) = &unk_1F20B5430;
  std::string::basic_string[abi:ne180100]<0>(v5, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"~AVCRTTSession", 14);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  --RTPManager::kRTTSessionCount;
  if ([*((id *)this + 61) delegate])
  {

    [*((id *)this + 61) setDelegate:0];
  }
  nw_release(*((void **)this + 70));
  nw_release(*((void **)this + 71));
  if (*((char *)this + 607) < 0) {
    operator delete(*((void **)this + 73));
  }
  AVCRTPSession<AVCTextStream>::~AVCRTPSession((uint64_t)this, (uint64_t *)&off_1F20B5470);
}

{
  uint64_t vars8;

  AVCRTTSession::~AVCRTTSession(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'AVCRTTSession::~AVCRTTSession(AVCRTTSession *this)
{
}

{
  AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 112));
}

{
  uint64_t vars8;

  AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 112));
  JUMPOUT(0x1C878E320);
}

void AVCRTTSession::initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const std::string *a5, uint64_t a6, uint64_t *a7)
{
  std::string::basic_string[abi:ne180100]<0>(&v92, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v10 = ims::debug((uint64_t)&v92, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"initialize", 10);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" isMO=", 6);
  *(unsigned char *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v10 + 17) = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v86 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v94) < 0) {
    operator delete(v92);
  }
  uint64_t v12 = (void *)MEMORY[0x1C878EAB0](v11);
  char v13 = (std::__shared_weak_count *)a7[1];
  if (v13)
  {
    uint64_t v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      uint64_t v15 = *a7;
      if (*a7)
      {
        uint64_t v16 = *(std::__shared_weak_count **)(v15 + 128);
        if (v16)
        {
          uint64_t v16 = std::__shared_weak_count::lock(v16);
          char v17 = v16;
          if (v16) {
            uint64_t v16 = *(std::__shared_weak_count **)(v15 + 120);
          }
        }
        else
        {
          char v17 = 0;
        }
        char v19 = (ImsPrefs *)SipStack::prefs((SipStack *)v16);
        EnableAPOnlyModeKey = (void **)ImsPrefs::getEnableAPOnlyModeKey(v19);
        int v21 = ImsPrefs::BOOLValue(v19, EnableAPOnlyModeKey);
        if (v21) {
          LOBYTE(v21) = _os_feature_enabled_impl();
        }
        *(unsigned char *)(a1 + 553) = v21;
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        int v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
        if (v22 == 2)
        {
          if (*(unsigned char *)(v15 + 584)) {
            goto LABEL_30;
          }
        }
        else if (v22 == 6 && *(unsigned char *)(v15 + 1856))
        {
          goto LABEL_30;
        }
        if (!*(unsigned char *)(v15 + 1328))
        {
          std::string::basic_string[abi:ne180100]<0>(&v92, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v36 = ims::error((uint64_t)&v92, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"No media settings", 17);
          *(unsigned char *)(v36 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v36 + 17) = 0;
          if (v86 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v94) < 0) {
            operator delete(v92);
          }
          char v37 = *(std::__shared_weak_count **)(a1 + 40);
          if (!v37) {
            goto LABEL_17;
          }
          BOOL v38 = std::__shared_weak_count::lock(v37);
          if (!v38) {
            goto LABEL_17;
          }
          char v28 = v38;
          long long v39 = *(void (****)(void, void **, uint64_t))(a1 + 32);
          if (!v39) {
            goto LABEL_66;
          }
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v96);
          (**v39)(v39, &v96, 9);
          char v30 = v97;
          if (!v97) {
            goto LABEL_66;
          }
          goto LABEL_65;
        }
LABEL_30:
        if (*(unsigned char *)(a1 + 553))
        {
          std::string::basic_string[abi:ne180100]<0>(&v92, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v23 = ims::debug((uint64_t)&v92, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"Use skywalk channels instead of sockets", 39);
          *(unsigned char *)(v23 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v23 + 17) = 0;
          if (v86 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v94) < 0) {
            operator delete(v92);
          }
          *(unsigned char *)(a1 + 576) = 1;
          std::string::operator=((std::string *)(a1 + 584), a5);
          uint64_t v90 = v15;
          uint64_t v91 = v14;
          atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 48))(&v92, a1, &v90);
          long long v87 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          __p[0] = &unk_1F20B2680;
          __p[1] = &_bambiDomain;
          int v85 = 0;
          BOOL v25 = v93 == &_bambiDomain && v94 == 0;
          ImsResult::~ImsResult((ImsResult *)__p);
          ImsResult::~ImsResult((ImsResult *)&v92);
          if (v91) {
            std::__shared_weak_count::__release_weak(v91);
          }
          char v26 = *(std::__shared_weak_count **)(a1 + 40);
          if (v25)
          {
            if (!v26) {
              goto LABEL_17;
            }
            int v27 = std::__shared_weak_count::lock(v26);
            if (!v27) {
              goto LABEL_17;
            }
            char v28 = v27;
            uint64_t v29 = *(void *)(a1 + 32);
            if (!v29) {
              goto LABEL_66;
            }
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v82);
            (*(void (**)(uint64_t, void **, void))(*(void *)v29 + 16))(v29, &v82, 0);
            char v30 = v83;
            if (!v83) {
              goto LABEL_66;
            }
          }
          else
          {
            if (!v26) {
              goto LABEL_17;
            }
            __int16 v34 = std::__shared_weak_count::lock(v26);
            if (!v34) {
              goto LABEL_17;
            }
            char v28 = v34;
            uint64_t v35 = *(void (****)(void, void **, void))(a1 + 32);
            if (!v35) {
              goto LABEL_66;
            }
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v80);
            (**v35)(v35, &v80, 0);
            char v30 = v81;
            if (!v81) {
              goto LABEL_66;
            }
          }
LABEL_65:
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
LABEL_66:
          char v40 = v28;
LABEL_129:
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
LABEL_17:
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          goto LABEL_18;
        }
        uint64_t v78 = 0;
        uint64_t v79 = 0;
        RTPTransportManager::getTransport(*(RTPTransportManager **)(a1 + 48), *(unsigned __int16 *)(v15 + 142), &v78);
        uint64_t v76 = 0;
        unint64_t v77 = 0;
        RTPTransportManager::getTransport(*(RTPTransportManager **)(a1 + 48), (unsigned __int16)(*(_WORD *)(v15 + 142) + 1), &v76);
        uint64_t v31 = v78;
        if (!v78)
        {
          std::string::basic_string[abi:ne180100]<0>(&v92, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v41 = ims::error((uint64_t)&v92, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"No RTP socket associated with port ", 35);
          *(unsigned char *)(v41 + 17) = 0;
          (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
          std::ostream::operator<<();
          *(unsigned char *)(v41 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)" for session ", 13);
          *(unsigned char *)(v41 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v41 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v41 + 17) = 0;
          if (v86 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v94) < 0) {
            operator delete(v92);
          }
          char v42 = *(std::__shared_weak_count **)(a1 + 40);
          if (!v42 || (long long v43 = std::__shared_weak_count::lock(v42)) == 0)
          {
LABEL_126:
            if (v77) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v77);
            }
            char v40 = v79;
            if (!v79) {
              goto LABEL_17;
            }
            goto LABEL_129;
          }
          std::string::size_type v44 = v43;
          long long v45 = *(void (****)(void, void **, uint64_t))(a1 + 32);
          if (v45)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v74);
            (**v45)(v45, &v74, 9);
            std::string v46 = v75;
            if (v75) {
              goto LABEL_107;
            }
          }
          goto LABEL_108;
        }
        uint64_t v32 = v76;
        if (!v76)
        {
          std::string::basic_string[abi:ne180100]<0>(&v92, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v33 = ims::error((uint64_t)&v92, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"No RTCP socket associated with port ", 36);
          *(unsigned char *)(v33 + 17) = 0;
          (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
          std::ostream::operator<<();
          *(unsigned char *)(v33 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)" for session ", 13);
          *(unsigned char *)(v33 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v33 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v33 + 17) = 0;
          if (v86 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v94) < 0) {
            operator delete(v92);
          }
        }
        int v47 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 80))(v31);
        int v48 = v47;
        if (v32)
        {
          int v49 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 80))(v32);
          BOOL v50 = v49 == -1;
          if (v48 != -1 && v49 != -1)
          {
            long long v92 = 0;
            unint64_t v93 = (uint64_t *)&v92;
            uint64_t v94 = 0x2020000000;
            char v95 = 0;
            aBlock[0] = MEMORY[0x1E4F143A8];
            aBlock[1] = 3321888768;
            aBlock[2] = ___ZN13AVCRTTSession10initializeERKNSt3__110shared_ptrI9IpAddressEEbRKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEESD_14MediaDirectionNS0_8weak_ptrI10SDPSessionEE_block_invoke;
            aBlock[3] = &unk_1F20B54E8;
            aBlock[5] = a1;
            aBlock[6] = v31;
            std::vector<std::string>::pointer v65 = v79;
            if (v79) {
              atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v66 = v32;
            unint64_t v67 = v77;
            if (v77) {
              atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v70 = v48;
            int v71 = v49;
            aBlock[4] = &v92;
            uint64_t v68 = v15;
            unint64_t v69 = v14;
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            unint64_t v51 = _Block_copy(aBlock);
            uint64_t v52 = v51;
            if (v51) {
              int v53 = _Block_copy(v51);
            }
            else {
              int v53 = 0;
            }
            long long v63 = v53;
            (*(void (**)(uint64_t, void **))(*(void *)v31 + 96))(v31, &v63);
            if (v63) {
              _Block_release(v63);
            }
            if (v52) {
              unint64_t v61 = _Block_copy(v52);
            }
            else {
              unint64_t v61 = 0;
            }
            uint64_t v62 = v61;
            (*(void (**)(uint64_t, void **))(*(void *)v32 + 96))(v32, &v62);
            if (v62) {
              _Block_release(v62);
            }
            if (v52) {
              _Block_release(v52);
            }
            if (v69) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v69);
            }
            if (v67) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v67);
            }
            if (v65) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v65);
            }
            _Block_object_dispose(&v92, 8);
            goto LABEL_126;
          }
          if (v48 != -1)
          {
            if (v49 != -1) {
              goto LABEL_103;
            }
            goto LABEL_99;
          }
        }
        else
        {
          if (v47 != -1) {
            goto LABEL_99;
          }
          BOOL v50 = 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&v92, "avc.rtt.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v54 = ims::error((uint64_t)&v92, (uint64_t)__p);
        long long v55 = (unsigned char *)ImsOutStream::operator<<(v54, "Didn't find valid RTP transport for session ");
        std::ostream::operator<<();
        v55[17] = 0;
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v55[17] = 0;
        if (v86 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v94) < 0) {
          operator delete(v92);
        }
        if (!v50)
        {
LABEL_103:
          unint64_t v58 = *(std::__shared_weak_count **)(a1 + 40);
          if (!v58) {
            goto LABEL_126;
          }
          unint64_t v59 = std::__shared_weak_count::lock(v58);
          if (!v59) {
            goto LABEL_126;
          }
          std::string::size_type v44 = v59;
          unint64_t v60 = *(void (****)(void, void **, uint64_t))(a1 + 32);
          if (v60)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v72);
            (**v60)(v60, &v72, 4);
            std::string v46 = v73;
            if (v73) {
LABEL_107:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v46);
          }
LABEL_108:
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
          goto LABEL_126;
        }
LABEL_99:
        std::string::basic_string[abi:ne180100]<0>(&v92, "avc.rtt.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v56 = ims::error((uint64_t)&v92, (uint64_t)__p);
        long long v57 = (unsigned char *)ImsOutStream::operator<<(v56, "Didn't find valid RTCP transport for session ");
        std::ostream::operator<<();
        v57[17] = 0;
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v57[17] = 0;
        if (v86 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v94) < 0) {
          operator delete(v92);
        }
        goto LABEL_103;
      }
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v92, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v18 = ims::error((uint64_t)&v92, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"SDPSession expired", 18);
  *(unsigned char *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v18 + 17) = 0;
  if (v86 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v94) < 0) {
    operator delete(v92);
  }
  if (v14) {
    goto LABEL_17;
  }
LABEL_18:
}

void sub_1C520C960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTTSession10initializeERKNSt3__110shared_ptrI9IpAddressEEbRKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEESD_14MediaDirectionNS0_8weak_ptrI10SDPSessionEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 104))(*(void *)(a1 + 48)))
  {
    std::string::basic_string[abi:ne180100]<0>(&v75, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)&v75, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"RTP socket still attached to dispatch source [sessionId=", 56);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_5:
    *(unsigned char *)(v3 + 17) = 0;
    if (v69 < 0) {
      operator delete(__p[0]);
    }
    if (v78 < 0) {
      operator delete(v75);
    }
    return;
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 104))(*(void *)(a1 + 64)))
  {
    std::string::basic_string[abi:ne180100]<0>(&v75, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)&v75, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"RTCP socket still attached to dispatch source [sessionId=", 57);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v4 + 24)) {
    return;
  }
  *(unsigned char *)(v4 + 24) = 1;
  if (*(void *)(v2 + 488))
  {
LABEL_11:
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
    uint64_t v73 = *(void *)(a1 + 80);
    std::vector<std::string>::pointer v74 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(void *)v2 + 48))(&v75, v2, &v73);
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    __p[0] = &unk_1F20B2680;
    __p[1] = &_bambiDomain;
    int v68 = 0;
    BOOL v7 = cf == &_bambiDomain && v77 == 0;
    ImsResult::~ImsResult((ImsResult *)__p);
    ImsResult::~ImsResult((ImsResult *)&v75);
    if (v74) {
      std::__shared_weak_count::__release_weak(v74);
    }
    BOOL v8 = *(std::__shared_weak_count **)(v2 + 40);
    if (v7)
    {
      if (!v8) {
        goto LABEL_48;
      }
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      if (!v9) {
        goto LABEL_48;
      }
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)(v2 + 32);
      if (!v11
        || (RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, &v65),
            (*(void (**)(uint64_t, void **, void))(*(void *)v11 + 16))(v11, &v65, 0),
            (uint64_t v12 = v66) == 0))
      {
LABEL_47:
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_48:
        long long v75 = 0;
        CFTypeRef cf = 0;
        ims::CFNumber::CFNumber((ims::CFNumber *)&v75, [*(id *)(v2 + 488) streamToken]);
        uint64_t v29 = v2 + 48;
        uint64_t v27 = *(void *)(v2 + 48);
        uint64_t v28 = *(void *)(v29 + 8);
        v62[0] = &unk_1F20E38B0;
        v62[1] = cf;
        if (cf) {
          CFRetain(cf);
        }
        v62[0] = &unk_1F20E3960;
        RTPManager::handleTextStreamToken(v28, v27, (uint64_t)v62);
        ims::CFType::~CFType((ims::CFType *)v62);
        ims::CFType::~CFType((ims::CFType *)&v75);
        return;
      }
    }
    else
    {
      if (!v8) {
        goto LABEL_48;
      }
      BOOL v25 = std::__shared_weak_count::lock(v8);
      if (!v25) {
        goto LABEL_48;
      }
      uint64_t v10 = v25;
      char v26 = *(void (****)(void, void **, void))(v2 + 32);
      if (!v26) {
        goto LABEL_47;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, &v63);
      (**v26)(v26, &v63, 0);
      uint64_t v12 = v64;
      if (!v64) {
        goto LABEL_47;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    goto LABEL_47;
  }
  xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_fd(v13, (const char *)*MEMORY[0x1E4F479B8], *(_DWORD *)(a1 + 96));
  if (*(void *)(a1 + 64)) {
    xpc_dictionary_set_fd(v13, (const char *)*MEMORY[0x1E4F479A8], *(_DWORD *)(a1 + 100));
  }
  id v93 = 0;
  id v14 = [NSString alloc];
  uint64_t v15 = (void *)(v2 + 584);
  if (*(char *)(v2 + 607) < 0) {
    uint64_t v15 = (void *)*v15;
  }
  uint64_t v16 = (void *)[v14 initWithUTF8String:v15];
  *(void *)(v2 + 488) = [objc_alloc(MEMORY[0x1E4F47988]) initWithNetworkSockets:v13 callID:v16 error:&v93];

  xpc_release(v13);
  if (!v93)
  {
    char v30 = *(void **)(v2 + 488);
    if (v30)
    {
      uint64_t v31 = [v30 capabilities];
      if (v31)
      {
        uint64_t v32 = (void *)v31;
        std::string::basic_string[abi:ne180100]<0>(&v75, "avc.rtt.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v33 = ims::debug((uint64_t)&v75, (uint64_t)__p);
        uint64_t v34 = ImsOutStream::operator<<(v33, "capabilities dict: ");
        ImsOutStream::operator<<(v34, (char *)objc_msgSend((id)objc_msgSend(v32, "description"), "UTF8String"));
        if (v69 < 0) {
          operator delete(__p[0]);
        }
        if (v78 < 0) {
          operator delete(v75);
        }
        uint64_t v35 = [v32 objectForKeyedSubscript:@"avcKeySupportedCodecs"];
        if (v35)
        {
          uint64_t v36 = (void *)v35;
          std::string::basic_string[abi:ne180100]<0>(&v75, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v37 = ims::debug((uint64_t)&v75, (uint64_t)__p);
          uint64_t v38 = ImsOutStream::operator<<(v37, "Got supported codecs");
          ImsOutStream::operator<<(v38, (char *)objc_msgSend((id)objc_msgSend(v36, "description"), "UTF8String"));
          if (v69 < 0) {
            operator delete(__p[0]);
          }
          if (v78 < 0) {
            operator delete(v75);
          }
          long long v39 = [AVCRTTSessionDelegate alloc];
          RTPSharedPointerBase::getShared<AVCRTTSession>(&v83, v2);
          char v40 = *(std::__shared_weak_count **)(v2 + 520);
          uint64_t v81 = *(void *)(v2 + 512);
          long long v82 = v40;
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v41 = [(AVCRTTSessionDelegate *)v39 initWithOwner:&v83 andStackController:&v81];
          if (v82) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v82);
          }
          if (v84) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v84);
          }
          if (v41)
          {
            [*(id *)(v2 + 488) setDelegate:v41];
            goto LABEL_11;
          }
          *(void *)(v2 + 488) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v75, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v57 = ims::error((uint64_t)&v75, (uint64_t)__p);
          unint64_t v58 = (unsigned char *)ImsOutStream::operator<<(v57, "Unable to create AVC media stream delegate");
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v58[17] = 0;
          if (v69 < 0) {
            operator delete(__p[0]);
          }
          if (v78 < 0) {
            operator delete(v75);
          }
          unint64_t v59 = *(std::__shared_weak_count **)(v2 + 40);
          if (!v59) {
            return;
          }
          unint64_t v60 = std::__shared_weak_count::lock(v59);
          if (!v60) {
            return;
          }
          int v22 = v60;
          unint64_t v61 = *(void (****)(void, void **, uint64_t))(v2 + 32);
          if (!v61) {
            goto LABEL_41;
          }
          RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, &v79);
          (**v61)(v61, &v79, 9);
          uint64_t v24 = v80;
          if (!v80) {
            goto LABEL_41;
          }
        }
        else
        {
          *(void *)(v2 + 488) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v75, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v52 = ims::debug((uint64_t)&v75, (uint64_t)__p);
          int v53 = (unsigned char *)ImsOutStream::operator<<(v52, "No supported codecs");
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v53[17] = 0;
          if (v69 < 0) {
            operator delete(__p[0]);
          }
          if (v78 < 0) {
            operator delete(v75);
          }
          uint64_t v54 = *(std::__shared_weak_count **)(v2 + 40);
          if (!v54) {
            return;
          }
          long long v55 = std::__shared_weak_count::lock(v54);
          if (!v55) {
            return;
          }
          int v22 = v55;
          uint64_t v56 = *(void (****)(void, void **, uint64_t))(v2 + 32);
          if (!v56) {
            goto LABEL_41;
          }
          RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, &v85);
          (**v56)(v56, &v85, 9);
          uint64_t v24 = v86;
          if (!v86) {
            goto LABEL_41;
          }
        }
      }
      else
      {
        *(void *)(v2 + 488) = 0;
        std::string::basic_string[abi:ne180100]<0>(&v75, "avc.rtt.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v47 = ims::error((uint64_t)&v75, (uint64_t)__p);
        int v48 = (unsigned char *)ImsOutStream::operator<<(v47, "AVC session doesn't have a capabilities dict");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v48[17] = 0;
        if (v69 < 0) {
          operator delete(__p[0]);
        }
        if (v78 < 0) {
          operator delete(v75);
        }
        int v49 = *(std::__shared_weak_count **)(v2 + 40);
        if (!v49) {
          return;
        }
        BOOL v50 = std::__shared_weak_count::lock(v49);
        if (!v50) {
          return;
        }
        int v22 = v50;
        unint64_t v51 = *(void (****)(void, void **, uint64_t))(v2 + 32);
        if (!v51) {
          goto LABEL_41;
        }
        RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, &v87);
        (**v51)(v51, &v87, 9);
        uint64_t v24 = v88;
        if (!v88) {
          goto LABEL_41;
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v75, "avc.rtt.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v42 = ims::error((uint64_t)&v75, (uint64_t)__p);
      long long v43 = (unsigned char *)ImsOutStream::operator<<(v42, "No AVC session");
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v43[17] = 0;
      if (v69 < 0) {
        operator delete(__p[0]);
      }
      if (v78 < 0) {
        operator delete(v75);
      }
      std::string::size_type v44 = *(std::__shared_weak_count **)(v2 + 40);
      if (!v44) {
        return;
      }
      long long v45 = std::__shared_weak_count::lock(v44);
      if (!v45) {
        return;
      }
      int v22 = v45;
      std::string v46 = *(void (****)(void, void **, uint64_t))(v2 + 32);
      if (!v46) {
        goto LABEL_41;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, &v89);
      (**v46)(v46, &v89, 9);
      uint64_t v24 = v90;
      if (!v90) {
        goto LABEL_41;
      }
    }
LABEL_40:
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
LABEL_41:
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    return;
  }
  *(void *)(v2 + 488) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v75, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v17 = ims::error((uint64_t)&v75, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Session init error: ", 20);
  *(unsigned char *)(v17 + 17) = 0;
  uint64_t v18 = (const char *)objc_msgSend((id)objc_msgSend(v93, "description"), "UTF8String");
  size_t v19 = strlen(v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)v18, v19);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  if (v69 < 0) {
    operator delete(__p[0]);
  }
  if (v78 < 0) {
    operator delete(v75);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v2 + 40);
  if (v20)
  {
    int v21 = std::__shared_weak_count::lock(v20);
    if (v21)
    {
      int v22 = v21;
      uint64_t v23 = *(void (****)(void, void **, uint64_t))(v2 + 32);
      if (!v23) {
        goto LABEL_41;
      }
      RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, &v91);
      (**v23)(v23, &v91, 9);
      uint64_t v24 = v92;
      if (!v92) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }
  }
}

void sub_1C520D764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v38 = *(std::__shared_weak_count **)(v36 - 160);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  _Unwind_Resume(a1);
}

void RTPSharedPointerBase::getShared<AVCRTTSession>(void **p_lpsrc, uint64_t a2)
{
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (void *)(a2 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v6;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void non-virtual thunk to'AVCRTTSession::initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const std::string *a5, uint64_t a6, uint64_t *a7)
{
}

void AVCRTTSession::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v46, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v46, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"setConfiguration", 16);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v41 < 0) {
    operator delete(__p);
  }
  if (v49 < 0) {
    operator delete(v46);
  }
  BOOL v8 = (void *)MEMORY[0x1C878EAB0](v7);
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v9);
    if (v10)
    {
      uint64_t v11 = *a2;
      if (*a2)
      {
        if (*(void *)(a1 + 488) || !*(unsigned char *)(a1 + 553) || !*(unsigned char *)(a1 + 576)) {
          goto LABEL_10;
        }
        uint64_t v18 = (std::__shared_weak_count *)a2[1];
        v45[0] = *a2;
        v45[1] = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        AVCRTTSession::createNwPath((uint64_t)&v46, a1, v45);
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        std::string __p = &unk_1F20B2680;
        long long v39 = &_bambiDomain;
        int v40 = 0;
        BOOL v20 = v47 != &_bambiDomain || v48 != 0;
        ImsResult::~ImsResult((ImsResult *)&__p);
        ImsResult::~ImsResult((ImsResult *)&v46);
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
        if (v20) {
          goto LABEL_52;
        }
        int v21 = (std::__shared_weak_count *)a2[1];
        v37[0] = *a2;
        v37[1] = v21;
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        AVCRTTSession::createNwPath((uint64_t)&v46, a1, v37);
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        std::string __p = &unk_1F20B2680;
        long long v39 = &_bambiDomain;
        int v40 = 0;
        BOOL v23 = v47 != &_bambiDomain || v48 != 0;
        ImsResult::~ImsResult((ImsResult *)&__p);
        ImsResult::~ImsResult((ImsResult *)&v46);
        if (v21) {
          std::__shared_weak_count::__release_weak(v21);
        }
        if (v23) {
          goto LABEL_52;
        }
        AVCRTTSession::initializeWithSkywalk((AVCRTTSession *)&v46, a1);
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        std::string __p = &unk_1F20B2680;
        long long v39 = &_bambiDomain;
        int v40 = 0;
        uint64_t v31 = v47;
        int v32 = v48;
        ImsResult::~ImsResult((ImsResult *)&__p);
        ImsResult::~ImsResult((ImsResult *)&v46);
        if (v31 != &_bambiDomain) {
          goto LABEL_52;
        }
        if (v32) {
          goto LABEL_52;
        }
        AVCRTTSession::completeInit((AVCRTTSession *)&v46, a1);
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        std::string __p = &unk_1F20B2680;
        long long v39 = &_bambiDomain;
        int v40 = 0;
        uint64_t v33 = v47;
        int v34 = v48;
        ImsResult::~ImsResult((ImsResult *)&__p);
        ImsResult::~ImsResult((ImsResult *)&v46);
        if (v33 != &_bambiDomain || v34)
        {
LABEL_52:
          *(_OWORD *)(a3 + 24) = 0u;
          *(_OWORD *)(a3 + 40) = 0u;
          *(_OWORD *)(a3 + 56) = 0u;
          *(void *)a3 = &unk_1F20B2680;
          *(void *)(a3 + 8) = &_bambiDomain;
          int v17 = 0x40000000;
        }
        else
        {
LABEL_10:
          if (*(unsigned char *)(v11 + 1328) && ((*(uint64_t (**)(void))(*(void *)(v11 + 1032) + 24))() & 1) != 0)
          {
            uint64_t v12 = *(void **)(a1 + 496);
            if (v12) {

            }
            xpc_object_t v13 = objc_opt_new();
            *(void *)(a1 + 496) = v13;
            [v13 setTxPayloadType:*(unsigned __int16 *)(v11 + 1062)];
            [*(id *)(a1 + 496) setRxPayloadType:*(unsigned __int16 *)(v11 + 1060)];
            BOOL v14 = *(_DWORD *)(a1 + 256) != 1 || *(_DWORD *)(a1 + 432) != 0;
            [*(id *)(a1 + 496) setRtcpEnabled:v14];
            LODWORD(v24) = *(_DWORD *)(a1 + 432);
            [*(id *)(a1 + 496) setRtcpSendInterval:(double)v24];
            objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "text"), "setCodecType:", 0);
            if (*(_WORD *)(v11 + 1320) != 255 && *(_WORD *)(v11 + 1322) != 255)
            {
              objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "text"), "setNumRedundantPayloads:", 2);
              objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "text"), "setTxRedPayloadType:", *(unsigned __int16 *)(v11 + 1322));
              objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "text"), "setRxRedPayloadType:", *(unsigned __int16 *)(v11 + 1320));
              BOOL v25 = (void *)[*(id *)(a1 + 496) text];
              LODWORD(v26) = 1050253722;
              [v25 setTxIntervalMin:v26];
              std::string::basic_string[abi:ne180100]<0>(&v46, "avc.rtt.session");
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              uint64_t v27 = ims::debug((uint64_t)&v46, (uint64_t)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"txIntervalMin was set", 21);
              *(unsigned char *)(v27 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v27 + 17) = 0;
              if (v41 < 0) {
                operator delete(__p);
              }
              if (v49 < 0) {
                operator delete(v46);
              }
            }
            objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "audio"), "setAudioStreamMode:", 2);
            *(void *)(a3 + 64) = 0;
            *(_OWORD *)(a3 + 32) = 0u;
            *(_OWORD *)(a3 + 48) = 0u;
            *(_OWORD *)a3 = 0u;
            *(_OWORD *)(a3 + 16) = 0u;
            uint64_t v28 = (std::__shared_weak_count *)a2[1];
            uint64_t v35 = *a2;
            uint64_t v36 = v28;
            if (v28) {
              atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            AVCRTPSession<AVCTextStream>::setConfiguration(a1, &v35, a3);
            if (v36) {
              std::__shared_weak_count::__release_weak(v36);
            }
            long long v50 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            std::string v46 = &unk_1F20B2680;
            uint64_t v47 = &_bambiDomain;
            int v48 = 0;
            if (*(uint64_t **)(a3 + 8) == &_bambiDomain && !*(_DWORD *)(a3 + 16))
            {
              char v29 = objc_msgSend(*(id *)(a1 + 496), "isValidTextConfig", v35);
              ImsResult::~ImsResult((ImsResult *)&v46);
              if (v29) {
                goto LABEL_73;
              }
              std::string::basic_string[abi:ne180100]<0>(&v46, "avc.rtt.session");
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              uint64_t v30 = ims::warn((uint64_t)&v46, (uint64_t)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"Invalid RTT config", 18);
              *(unsigned char *)(v30 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v30 + 17) = 0;
              if (v41 < 0) {
                operator delete(__p);
              }
              if (v49 < 0) {
                operator delete(v46);
              }
              long long v50 = 0u;
              long long v51 = 0u;
              long long v52 = 0u;
              std::string v46 = &unk_1F20B2680;
              uint64_t v47 = &_bambiDomain;
              int v48 = 1073741835;
              ImsResult::operator=(a3, (uint64_t)&v46);
            }
            ImsResult::~ImsResult((ImsResult *)&v46);
            goto LABEL_73;
          }
          std::string::basic_string[abi:ne180100]<0>(&v46, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          uint64_t v16 = ims::error((uint64_t)&v46, (uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"TTY media information missing.", 30);
          *(unsigned char *)(v16 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v16 + 17) = 0;
          if (v41 < 0) {
            operator delete(__p);
          }
          if (v49 < 0) {
            operator delete(v46);
          }
          *(_OWORD *)(a3 + 24) = 0u;
          *(_OWORD *)(a3 + 40) = 0u;
          *(_OWORD *)(a3 + 56) = 0u;
          *(void *)a3 = &unk_1F20B2680;
          *(void *)(a3 + 8) = &_bambiDomain;
          int v17 = 1073741825;
        }
        *(_DWORD *)(a3 + 16) = v17;
LABEL_73:
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        goto LABEL_74;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v46, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v15 = ims::error((uint64_t)&v46, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"SDPSession expired", 18);
  *(unsigned char *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v15 + 17) = 0;
  if (v41 < 0) {
    operator delete(__p);
  }
  if (v49 < 0) {
    operator delete(v46);
  }
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 1073741825;
  if (v10) {
    goto LABEL_73;
  }
LABEL_74:
}

void sub_1C520E260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  _Unwind_Resume(a1);
}

void AVCRTTSession::createNwPath(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v36, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v36, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"createNwPath", 12);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  if (v7)
  {
    BOOL v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      uint64_t v9 = (unsigned char *)*a3;
      if (*a3)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v10 = *(RTPTransportManager **)(a2 + 48);
        int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 144))(a2);
        if (v11 == 2)
        {
          if (v9[584])
          {
            uint64_t v12 = v9 + 152;
            goto LABEL_23;
          }
        }
        else if (v11 == 6 && v9[1856])
        {
          uint64_t v12 = v9 + 1496;
          goto LABEL_23;
        }
        uint64_t v12 = v9 + 1032;
        if (!v9[1328]) {
          uint64_t v12 = 0;
        }
LABEL_23:
        RTPTransportManager::getNwTransport(v10, *((unsigned __int16 *)v12 + 12), &v32);
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        BOOL v14 = *(RTPTransportManager **)(a2 + 48);
        int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 144))(a2);
        if (v15 == 2)
        {
          if (v9[584])
          {
            uint64_t v16 = v9 + 152;
            goto LABEL_31;
          }
        }
        else if (v15 == 6 && v9[1856])
        {
          uint64_t v16 = v9 + 1496;
          goto LABEL_31;
        }
        uint64_t v16 = v9 + 1032;
        if (!v9[1328]) {
          uint64_t v16 = 0;
        }
LABEL_31:
        RTPTransportManager::getNwTransport(v14, (unsigned __int16)(*((_WORD *)v16 + 12) + 1), &v30);
        uint64_t v17 = v32;
        if (v32)
        {
          uint64_t v18 = v30;
          if (v30)
          {
            int v19 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 144))(a2);
            if (v19 == 2)
            {
              if (v9[584])
              {
                BOOL v20 = v9 + 152;
                goto LABEL_43;
              }
            }
            else if (v19 == 6 && v9[1856])
            {
              BOOL v20 = v9 + 1496;
LABEL_43:
              uint64_t v23 = *((void *)v20 + 1);
              int v22 = (std::__shared_weak_count *)*((void *)v20 + 2);
              if (v22) {
                atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v23
                || (*(char *)(a2 + 551) < 0 ? (uint64_t v24 = *(void *)(a2 + 536)) : (uint64_t v24 = *(unsigned __int8 *)(a2 + 551)), v24))
              {
                AVCRTPStackController::getClientUniquePID(*(AVCRTPStackController **)(a2 + 512));
                std::string::basic_string[abi:ne180100]<0>(v36, "avc.rtt.session");
                std::string::basic_string[abi:ne180100]<0>(__p, "");
                uint64_t v25 = ims::debug((uint64_t)v36, (uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"nw_path local RTP endpoint port=", 32);
                *(unsigned char *)(v25 + 17) = 0;
                nw_endpoint_get_port(*(nw_endpoint_t *)(v17 + 24));
                std::ostream::operator<<();
                *(unsigned char *)(v25 + 17) = 0;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)" RTCP port=", 11);
                *(unsigned char *)(v25 + 17) = 0;
                nw_endpoint_get_port(*(nw_endpoint_t *)(v18 + 24));
                std::ostream::operator<<();
                *(unsigned char *)(v25 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v25 + 17) = 0;
                if (v35 < 0) {
                  operator delete(__p[0]);
                }
                if (v37 < 0) {
                  operator delete(v36[0]);
                }
                std::string::basic_string[abi:ne180100]<0>(v36, "avc.rtt.session");
                std::string::basic_string[abi:ne180100]<0>(__p, "");
                uint64_t v26 = ims::debug((uint64_t)v36, (uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"nw_path remote endpoint address=", 32);
                *(unsigned char *)(v26 + 17) = 0;
                IpAddress::asString(&v29);
              }
              std::string::basic_string[abi:ne180100]<0>(v36, "avc.rtt.session");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v27 = ims::warn((uint64_t)v36, (uint64_t)__p);
              uint64_t v28 = (unsigned char *)ImsOutStream::operator<<(v27, "No remote connection found for session");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v28[17] = 0;
              if (v35 < 0) {
                operator delete(__p[0]);
              }
              if (v37 < 0) {
                operator delete(v36[0]);
              }
              *(_OWORD *)(a1 + 24) = 0u;
              *(_OWORD *)(a1 + 40) = 0u;
              *(_OWORD *)(a1 + 56) = 0u;
              *(void *)a1 = &unk_1F20B2680;
              *(void *)(a1 + 8) = &_bambiDomain;
              *(_DWORD *)(a1 + 16) = 1073741825;
              if (v22) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              }
LABEL_67:
              if (v31) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v31);
              }
              if (v33) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v33);
              }
LABEL_71:
              std::__shared_weak_count::__release_shared[abi:ne180100](v8);
              return;
            }
            if (v9[1328])
            {
              BOOL v20 = v9 + 1032;
              goto LABEL_43;
            }
            std::string::basic_string[abi:ne180100]<0>(v36, "avc.rtt.session");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v21 = ims::warn((uint64_t)v36, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Not enough information to configure with", 40);
            *(unsigned char *)(v21 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v36, "avc.rtt.session");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v21 = ims::error((uint64_t)v36, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"RTCP Transport is null", 22);
            *(unsigned char *)(v21 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v36, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v21 = ims::error((uint64_t)v36, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"RTP Transport is null", 21);
          *(unsigned char *)(v21 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        *(unsigned char *)(v21 + 17) = 0;
        if (v35 < 0) {
          operator delete(__p[0]);
        }
        if (v37 < 0) {
          operator delete(v36[0]);
        }
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 56) = 0u;
        *(void *)a1 = &unk_1F20B2680;
        *(void *)(a1 + 8) = &_bambiDomain;
        *(_DWORD *)(a1 + 16) = 1073741825;
        goto LABEL_67;
      }
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v36, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v13 = ims::error((uint64_t)v36, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"SDPSession expired in AVCRTTSession::setConfiguration", 53);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 1073741825;
  if (v8) {
    goto LABEL_71;
  }
}

void sub_1C520F054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  _Unwind_Resume(a1);
}

void AVCRTTSession::initializeWithSkywalk(AVCRTTSession *this, uint64_t a2)
{
  v39[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1C878EAB0]();
  id v37 = 0;
  id v5 = (id)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:a2 + 608];
  id v6 = (id)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:a2 + 624];
  std::string::basic_string[abi:ne180100]<0>(&v34, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)&v34, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Session initialize request [sessionId=", 38);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" rtpUuid=", 9);
  *(unsigned char *)(v7 + 17) = 0;
  BOOL v8 = (const char *)objc_msgSend((id)objc_msgSend(v5, "UUIDString"), "UTF8String");
  size_t v9 = strlen(v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)v8, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" rtcpUuid=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v10 = (const char *)objc_msgSend((id)objc_msgSend(v6, "UUIDString"), "UTF8String");
  size_t v11 = strlen(v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)v10, v11);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v36 < 0) {
    operator delete(v34);
  }
  id v12 = [NSString alloc];
  uint64_t v13 = (void *)(a2 + 584);
  if (*(char *)(a2 + 607) < 0) {
    uint64_t v13 = (void *)*v13;
  }
  id v14 = (id)[v12 initWithUTF8String:v13];
  uint64_t v15 = *MEMORY[0x1E4F47A10];
  v38[0] = *MEMORY[0x1E4F47A00];
  v38[1] = v15;
  uint64_t v16 = &unk_1F20EC7C0;
  if (*(unsigned char *)(a2 + 576)) {
    uint64_t v16 = &unk_1F20EC7A8;
  }
  v39[0] = v14;
  v39[1] = v16;
  v38[2] = *MEMORY[0x1E4F47A08];
  void v39[2] = MEMORY[0x1E4F1CC38];
  uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:v38 count:3];
  *(void *)(a2 + 488) = [objc_alloc(MEMORY[0x1E4F47988]) initWithRTPNWConnectionClientID:v5 rtcpNWConnectionClientID:v6 options:v17 error:&v37];
  if (v37)
  {
    *(void *)(a2 + 488) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v34, "avc.rtt.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v18 = ims::error((uint64_t)&v34, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Session init error: ", 20);
    *(unsigned char *)(v18 + 17) = 0;
    if (v37) {
      int v19 = (const char *)objc_msgSend((id)objc_msgSend(v37, "description"), "UTF8String");
    }
    else {
      int v19 = " returned error is nil";
    }
    size_t v24 = strlen(v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)v19, v24);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v33 < 0) {
      operator delete(__p[0]);
    }
    if (v36 < 0) {
      operator delete(v34);
    }
    uint64_t v25 = *(std::__shared_weak_count **)(a2 + 40);
    if (v25)
    {
      uint64_t v26 = std::__shared_weak_count::lock(v25);
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v28 = *(void *)(a2 + 32);
        if (v28)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v30);
          (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v28 + 40))(v28, &v30, 4);
          if (v31) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
    }
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(void *)this = &unk_1F20B2680;
    *((void *)this + 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 1073741825;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "avc.rtt.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v20 = ims::debug((uint64_t)&v34, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Session initialize success  [sessionId=", 39);
    *(unsigned char *)(v20 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v20 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v20 + 17) = 0;
    if (v33 < 0) {
      operator delete(__p[0]);
    }
    if (v36 < 0) {
      operator delete(v34);
    }
    int v34 = 0;
    CFTypeRef cf = 0;
    ims::CFNumber::CFNumber((ims::CFNumber *)&v34, [*(id *)(a2 + 488) streamToken]);
    uint64_t v23 = a2 + 48;
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = *(void *)(v23 + 8);
    v29[0] = &unk_1F20E38B0;
    v29[1] = cf;
    if (cf) {
      CFRetain(cf);
    }
    v29[0] = &unk_1F20E3960;
    RTPManager::handleTextStreamToken(v22, v21, (uint64_t)v29);
    ims::CFType::~CFType((ims::CFType *)v29);
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(void *)this = &unk_1F20B2680;
    *((void *)this + 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 0;
    ims::CFType::~CFType((ims::CFType *)&v34);
  }
}

void sub_1C520F864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

double AVCRTTSession::completeInit(AVCRTTSession *this, uint64_t a2)
{
  uint64_t v4 = [*(id *)(a2 + 488) capabilities];
  if (!v4)
  {
    *(void *)(a2 + 488) = 0;
    std::string::basic_string[abi:ne180100]<0>(v45, "avc.rtt.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v18 = ims::error((uint64_t)v45, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"AVC session doesn't have a capabilities dict", 44);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v44 < 0) {
      operator delete(__p[0]);
    }
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    int v19 = *(std::__shared_weak_count **)(a2 + 40);
    if (!v19) {
      goto LABEL_47;
    }
    uint64_t v20 = std::__shared_weak_count::lock(v19);
    if (!v20) {
      goto LABEL_47;
    }
    uint64_t v21 = v20;
    uint64_t v22 = *(void (****)(void, void **, uint64_t))(a2 + 32);
    if (!v22) {
      goto LABEL_46;
    }
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v41);
    (**v22)(v22, &v41, 9);
    uint64_t v23 = v42;
    if (!v42) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  id v5 = (void *)v4;
  std::string::basic_string[abi:ne180100]<0>(v45, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v45, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"capabilities dict: ", 19);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = (const char *)objc_msgSend((id)objc_msgSend(v5, "description"), "UTF8String");
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
  *(unsigned char *)(v6 + 17) = 0;
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  uint64_t v9 = [v5 objectForKeyedSubscript:@"avcKeySupportedCodecs"];
  if (!v9)
  {
    *(void *)(a2 + 488) = 0;
    std::string::basic_string[abi:ne180100]<0>(v45, "avc.rtt.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v24 = ims::debug((uint64_t)v45, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"No supported codecs", 19);
    *(unsigned char *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v24 + 17) = 0;
    if (v44 < 0) {
      operator delete(__p[0]);
    }
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    uint64_t v25 = *(std::__shared_weak_count **)(a2 + 40);
    if (!v25) {
      goto LABEL_47;
    }
    uint64_t v26 = std::__shared_weak_count::lock(v25);
    if (!v26) {
      goto LABEL_47;
    }
    uint64_t v21 = v26;
    uint64_t v27 = *(void (****)(void, void **, uint64_t))(a2 + 32);
    if (!v27) {
      goto LABEL_46;
    }
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v39);
    (**v27)(v27, &v39, 9);
    uint64_t v23 = v40;
    if (!v40) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  uint64_t v10 = (void *)v9;
  std::string::basic_string[abi:ne180100]<0>(v45, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::debug((uint64_t)v45, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Got supported codecs", 20);
  *(unsigned char *)(v11 + 17) = 0;
  id v12 = (const char *)objc_msgSend((id)objc_msgSend(v10, "description"), "UTF8String");
  size_t v13 = strlen(v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v12, v13);
  *(unsigned char *)(v11 + 17) = 0;
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  id v14 = [AVCRTTSessionDelegate alloc];
  RTPSharedPointerBase::getShared<AVCRTTSession>(&v37, a2);
  uint64_t v15 = *(std::__shared_weak_count **)(a2 + 520);
  uint64_t v35 = *(void *)(a2 + 512);
  char v36 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = [(AVCRTTSessionDelegate *)v14 initWithOwner:&v37 andStackController:&v35];
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (!v16)
  {
    *(void *)(a2 + 488) = 0;
    std::string::basic_string[abi:ne180100]<0>(v45, "avc.rtt.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v28 = ims::error((uint64_t)v45, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"Unable to create AVC media stream delegate", 42);
    *(unsigned char *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v28 + 17) = 0;
    if (v44 < 0) {
      operator delete(__p[0]);
    }
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    char v29 = *(std::__shared_weak_count **)(a2 + 40);
    if (!v29) {
      goto LABEL_47;
    }
    uint64_t v30 = std::__shared_weak_count::lock(v29);
    if (!v30) {
      goto LABEL_47;
    }
    uint64_t v21 = v30;
    uint64_t v31 = *(void (****)(void, void **, uint64_t))(a2 + 32);
    if (!v31
      || (RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v33), (**v31)(v31, &v33, 9), (uint64_t v23 = v34) == 0))
    {
LABEL_46:
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
LABEL_47:
      int v17 = 0x40000000;
      goto LABEL_48;
    }
LABEL_45:
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    goto LABEL_46;
  }
  [*(id *)(a2 + 488) setDelegate:v16];
  int v17 = 0;
LABEL_48:
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = &unk_1F20B2680;
  *((void *)this + 1) = &_bambiDomain;
  *((_DWORD *)this + 4) = v17;
  return result;
}

void sub_1C520FE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'AVCRTTSession::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
}

void *AVCRTTSession::configureRemoteRTCP(AVCRTTSession *this, uint64_t a2, unsigned int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" enabled=", 9);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" interval=", 10);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (*((unsigned char *)this + 481))
  {
    [*((id *)this + 61) setRtcpEnabled:a2];
    [*((id *)this + 61) setRtcpSendIntervalSec:(double)a3];
  }
  double result = (void *)*((void *)this + 62);
  if (result)
  {
    [result setRtcpEnabled:a2];
    return (void *)[*((id *)this + 62) setRtcpSendInterval:(double)a3];
  }
  return result;
}

void sub_1C52100B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *non-virtual thunk to'AVCRTTSession::configureRemoteRTCP(AVCRTTSession *this, uint64_t a2, unsigned int a3)
{
  return AVCRTTSession::configureRemoteRTCP((AVCRTTSession *)((char *)this - 24), a2, a3);
}

double AVCRTTSession::startSendingDTMF@<D0>(AVCRTTSession *this@<X0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 1073741834;
  return result;
}

double AVCRTTSession::stopSendingDTMF@<D0>(AVCRTTSession *this@<X0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 1073741834;
  return result;
}

double AVCRTTSession::sendDTMFDigits@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 1073741834;
  return result;
}

uint64_t AVCRTTSession::mediaType(AVCRTTSession *this)
{
  return 4;
}

BOOL AVCRTTSession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return a2 == 4;
}

uint64_t non-virtual thunk to'AVCRTTSession::mediaType(AVCRTTSession *this)
{
  return 4;
}

BOOL non-virtual thunk to'AVCRTTSession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return a2 == 4;
}

double non-virtual thunk to'AVCRTTSession::startSendingDTMF@<D0>(AVCRTTSession *this@<X0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 1073741834;
  return result;
}

double non-virtual thunk to'AVCRTTSession::stopSendingDTMF@<D0>(AVCRTTSession *this@<X0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 1073741834;
  return result;
}

double non-virtual thunk to'AVCRTTSession::sendDTMFDigits@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 1073741834;
  return result;
}

void *IMSRegistrationManager::IMSRegistrationManager(void *a1, uint64_t *a2)
{
  *a1 = &unk_1F20B5B40;
  a1[1] = &unk_1F20B5B60;
  uint64_t v4 = (uint64_t)(a1 + 2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "reg");
  ImsLogContainer::ImsLogContainer(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_1F20B59A8;
  a1[1] = &unk_1F20B5A20;
  a1[2] = &unk_1F20B5A88;
  a1[19] = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  a1[18] = a1 + 19;
  a1[23] = 0;
  a1[22] = 0;
  a1[20] = 0;
  a1[21] = a1 + 22;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = (std::__shared_weak_count *)a1[17];
    a1[16] = v5;
    a1[17] = v6;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  else
  {
    a1[16] = v5;
    a1[17] = 0;
  }
  return a1;
}

void sub_1C5210408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSRegistrationManager::~IMSRegistrationManager(IMSRegistrationManager *this)
{
  *(void *)this = &unk_1F20B59A8;
  *((void *)this + 1) = &unk_1F20B5A20;
  *((void *)this + 2) = &unk_1F20B5A88;
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 22));
  std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::destroy(*((void **)this + 19));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((void *)this + 2) = &unk_1F20C9CA0;
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t vars8;

  IMSRegistrationManager::~IMSRegistrationManager(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'IMSRegistrationManager::~IMSRegistrationManager(IMSRegistrationManager *this)
{
}

{
  IMSRegistrationManager::~IMSRegistrationManager((IMSRegistrationManager *)((char *)this - 16));
}

{
  uint64_t vars8;

  IMSRegistrationManager::~IMSRegistrationManager((IMSRegistrationManager *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  IMSRegistrationManager::~IMSRegistrationManager((IMSRegistrationManager *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

void IMSRegistrationManager::sipStackInitialized(void *a1, void **a2)
{
  uint64_t v4 = (uint64_t **)(a1 + 19);
  uint64_t v5 = (void *)a1[19];
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = (void **)(a1 + 19);
  do
  {
    char v7 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5 + 4, a2);
    if (v7 >= 0) {
      size_t v8 = v5;
    }
    else {
      size_t v8 = v5 + 1;
    }
    if (v7 >= 0) {
      uint64_t v6 = (void **)v5;
    }
    uint64_t v5 = (void *)*v8;
  }
  while (*v8);
  if (v6 == (void **)v4
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v6 + 4) & 0x80) != 0)
  {
LABEL_12:
    uint64_t v12 = a1[2];
    char v11 = a1 + 2;
    uint64_t v13 = (*(uint64_t (**)(void *))(v12 + 56))(v11);
    (*(void (**)(void *, uint64_t))(*v11 + 16))(v11, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Unable to find configuration for ", 33);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v13 + 32))(v13, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
  }
  else
  {
    char v9 = *(void **)(a1[16] + 168);
    id v14 = a2;
    uint64_t v10 = std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4 - 1, a2, (uint64_t)&std::piecewise_construct, (long long **)&v14);
    BambiClient::startRegistration(v9, (unsigned __int8 *)a2, (uint64_t)(v10 + 7));
  }
}

uint64_t SipRegistrationConfig::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    std::vector<SipUri>::__assign_with_size[abi:ne180100]<SipUri*,SipUri*>((SipUri **)a1, *(void *)a2, *(void *)(a2 + 8), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  long long v4 = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  SipUri::operator=((SipUri *)(a1 + 72), a2 + 72);
  SipUri::operator=((SipUri *)(a1 + 480), a2 + 480);
  std::string::operator=((std::string *)(a1 + 888), (const std::string *)(a2 + 888));
  std::string::operator=((std::string *)(a1 + 912), (const std::string *)(a2 + 912));
  std::string::operator=((std::string *)(a1 + 936), (const std::string *)(a2 + 936));
  if (a1 != a2) {
    std::vector<SipRetryInfo>::__assign_with_size[abi:ne180100]<SipRetryInfo*,SipRetryInfo*>((char *)(a1 + 960), *(char **)(a2 + 960), *(void *)(a2 + 968), (uint64_t)(*(void *)(a2 + 968) - *(void *)(a2 + 960)) >> 4);
  }
  long long v6 = *(_OWORD *)(a2 + 984);
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  *(_OWORD *)(a1 + 984) = v6;
  std::string::operator=((std::string *)(a1 + 1008), (const std::string *)(a2 + 1008));
  std::string::operator=((std::string *)(a1 + 1032), (const std::string *)(a2 + 1032));
  char v7 = *(unsigned char *)(a2 + 1072);
  *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 1056);
  *(unsigned char *)(a1 + 1072) = v7;
  std::string::operator=((std::string *)(a1 + 1080), (const std::string *)(a2 + 1080));
  std::string::operator=((std::string *)(a1 + 1104), (const std::string *)(a2 + 1104));
  char v8 = *(unsigned char *)(a2 + 1144);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 1128);
  *(unsigned char *)(a1 + 1144) = v8;
  std::string::operator=((std::string *)(a1 + 1152), (const std::string *)(a2 + 1152));
  std::string::operator=((std::string *)(a1 + 1176), (const std::string *)(a2 + 1176));
  long long v9 = *(_OWORD *)(a2 + 1200);
  *(unsigned char *)(a1 + 1216) = *(unsigned char *)(a2 + 1216);
  *(_OWORD *)(a1 + 1200) = v9;
  char v10 = *(unsigned char *)(a2 + 1226);
  *(_WORD *)(a1 + 1224) = *(_WORD *)(a2 + 1224);
  *(unsigned char *)(a1 + 1226) = v10;
  if (a1 != a2)
  {
    std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t **)(a1 + 1232), *(unsigned int **)(a2 + 1232), (unsigned int *)(a2 + 1240));
    std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t **)(a1 + 1256), *(unsigned int **)(a2 + 1256), (unsigned int *)(a2 + 1264));
  }
  std::string::operator=((std::string *)(a1 + 1280), (const std::string *)(a2 + 1280));
  *(void *)(a1 + 1304) = *(void *)(a2 + 1304);
  std::string::operator=((std::string *)(a1 + 1312), (const std::string *)(a2 + 1312));
  long long v11 = *(_OWORD *)(a2 + 1363);
  long long v12 = *(_OWORD *)(a2 + 1352);
  *(_OWORD *)(a1 + 1336) = *(_OWORD *)(a2 + 1336);
  *(_OWORD *)(a1 + 1352) = v12;
  *(_OWORD *)(a1 + 1363) = v11;
  if (a1 != a2)
  {
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1392), *(long long **)(a2 + 1392), (long long *)(a2 + 1400));
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1424), *(long long **)(a2 + 1424), (long long *)(a2 + 1432));
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1456), *(long long **)(a2 + 1456), (long long *)(a2 + 1464));
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1488), *(long long **)(a2 + 1488), (long long *)(a2 + 1496));
    std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t **)(a1 + 1520), *(unsigned int **)(a2 + 1520), (unsigned int *)(a2 + 1528));
  }
  *(unsigned char *)(a1 + 1544) = *(unsigned char *)(a2 + 1544);
  std::string::operator=((std::string *)(a1 + 1552), (const std::string *)(a2 + 1552));
  std::string::operator=((std::string *)(a1 + 1576), (const std::string *)(a2 + 1576));
  std::string::operator=((std::string *)(a1 + 1600), (const std::string *)(a2 + 1600));
  *(unsigned char *)(a1 + 1624) = *(unsigned char *)(a2 + 1624);
  if (a1 != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 1632), *(std::string **)(a2 + 1632), *(long long **)(a2 + 1640), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1640) - *(void *)(a2 + 1632)) >> 3));
  }
  uint64_t v13 = *(void *)(a2 + 1656);
  *(_WORD *)(a1 + 1664) = *(_WORD *)(a2 + 1664);
  *(void *)(a1 + 1656) = v13;
  return a1;
}

void ims::AccessNetworks::~AccessNetworks(void **this)
{
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void IMSRegistrationManager::sipStackInvalidated(uint64_t a1, void **a2)
{
  uint64_t v3 = (void ***)(a1 + 168);
  long long v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 168, a2);
  if ((void **)(a1 + 176) != v4)
  {
    long long v5 = v4;
    long long v6 = (void **)v4[1];
    if (v6)
    {
      do
      {
        char v7 = v6;
        long long v6 = (void **)*v6;
      }
      while (v6);
    }
    else
    {
      char v8 = v4;
      do
      {
        char v7 = (void **)v8[2];
        BOOL v9 = *v7 == v8;
        char v8 = v7;
      }
      while (!v9);
    }
    if (*v3 == v4) {
      *uint64_t v3 = v7;
    }
    char v10 = *(uint64_t **)(a1 + 176);
    --*(void *)(a1 + 184);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v10, (uint64_t *)v5);
    if (*((char *)v5 + 55) < 0) {
      operator delete(v5[4]);
    }
    operator delete(v5);
  }
}

void ims::RegistrationActiveInfo::~RegistrationActiveInfo(void **this)
{
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  uint64_t v2 = this + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t *IMSRegistrationManager::setRegistrationTerminated(uint64_t a1, void **a2, int a3, uint64_t a4, char a5)
{
  int v22 = a4;
  int v24 = 0;
  int v25 = a3;
  uint64_t v23 = 200;
  BYTE4(v23) = a5;
  *(_WORD *)((char *)&v23 + 5) = a4 != -1;
  uint64_t v9 = a1 + 16;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"send registration terminated due to ", 36);
  *(unsigned char *)(v10 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, off_1E650F1E8[a3]);
  (*(void (**)(uint64_t, void **))(*(void *)v10 + 32))(v10, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" ", 1);
  *(unsigned char *)(v10 + 17) = 0;
  if (a4 == -1) {
    long long v11 = "will NOT retry";
  }
  else {
    long long v11 = "will retry";
  }
  if (a4 == -1) {
    uint64_t v12 = 14;
  }
  else {
    uint64_t v12 = 10;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)v11, v12);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (IMSRegistrationManager::getRegistrationState(a1, a2))
  {
    uint64_t v13 = *(void *)(a1 + 128);
    uint64_t v15 = *(void *)(v13 + 288);
    id v14 = *(std::__shared_weak_count **)(v13 + 296);
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v13 = *(void *)(a1 + 128);
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v13 + 168) + 192))(&v18);
    IMSMetricsManager::logRegistrationTerminated(v15, &v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  uint64_t v16 = IMSClientManager::delegateForStack(a2);
  (*(void (**)(void))(*(void *)(v16 + 8) + 32))();
  __p[0] = a2;
  double result = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 168), a2, (uint64_t)&std::piecewise_construct, (long long **)__p);
  *((unsigned char *)result + 56) = 0;
  return result;
}

void sub_1C5210E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL IMSRegistrationManager::getRegistrationState(uint64_t a1, void **a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 168);
  if ((void **)(a1 + 176) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 168, a2))return 0; {
  long long v5 = a2;
  }
  return *((unsigned char *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, a2, (uint64_t)&std::piecewise_construct, (long long **)&v5)+ 56) != 0;
}

uint64_t IMSRegistrationManager::setRegistrationError(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v4 = a1 + 16;
  if (a3 == -1) {
    long long v5 = "will NOT retry";
  }
  else {
    long long v5 = "will retry";
  }
  if (a3 == -1) {
    uint64_t v6 = 14;
  }
  else {
    uint64_t v6 = 10;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"sending registration terminated due to sip registration error ", 62);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)v5, v6);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(void))(*(void *)(v8 + 8) + 32))();
}

uint64_t IMSRegistrationManager::handleRegistrationStateChanged(uint64_t a1, void **a2, uint64_t a3, int a4)
{
  if (a4)
  {
    uint64_t v6 = *(void *)(a1 + 128);
    uint64_t v8 = *(void *)(v6 + 288);
    uint64_t v7 = *(std::__shared_weak_count **)(v6 + 296);
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v6 = *(void *)(a1 + 128);
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 168) + 192))(&v11);
    IMSMetricsManager::logRegistrationStateChange(v8, &v11, a3);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  uint64_t v9 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(void))(*(void *)(v9 + 8) + 16))();
}

void sub_1C5211140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'IMSRegistrationManager::handleRegistrationStateChanged(uint64_t a1, void **a2, uint64_t a3, int a4)
{
  return IMSRegistrationManager::handleRegistrationStateChanged(a1 - 8, a2, a3, a4);
}

uint64_t IMSRegistrationManager::handleRegistrationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v8 = *(void *)(v6 + 288);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 296);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *(void *)(a1 + 128);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 168) + 192))(&v10);
  IMSMetricsManager::logRegistrationRequest(v8, &v10, a3);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t result = *(void *)(a1 + 120);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 48))(result, a2, a3);
  }
  return result;
}

void sub_1C521125C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'IMSRegistrationManager::handleRegistrationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IMSRegistrationManager::handleRegistrationRequest(a1 - 8, a2, a3);
}

uint64_t IMSRegistrationManager::handleRegistrationActive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(*(void *)(a3 + 48) + 504);
  uint64_t v40 = 0;
  char v41 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(*(void *)(a1 + 128) + 168) + 192))(&v40);
  memset(&v39, 0, sizeof(v39));
  memset(&v38, 0, sizeof(v38));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v38 = *(std::string *)a2;
  }
  uint64_t v35 = 0;
  char v36 = 0;
  unint64_t v37 = 0;
  memset(__str, 0, 24);
  SipUserAgent::lastPreferredPublicUriString(*(SipUserAgent **)(v40 + 144), __str);
  uint64_t v7 = __str[23];
  char v8 = __str[23];
  if (__str[23] < 0) {
    uint64_t v7 = *(void *)&__str[8];
  }
  if (v7)
  {
    std::string::operator=(&v39, (const std::string *)__str);
    char v8 = __str[23];
  }
  if (v8 < 0) {
    operator delete(*(void **)__str);
  }
  uint64_t v9 = *(void **)(v40 + 144);
  if (v9[61] != v9[62])
  {
    uint64_t v32 = 0;
    char v33 = 0;
    uint64_t v34 = 0;
    SipRouteSet::allHops((uint64_t)(v9 + 60), (char **)&v32);
    uint64_t v10 = (uint64_t *)v32;
    uint64_t v11 = (uint64_t *)v33;
    if (v32 != v33)
    {
      do
      {
        uint64_t v12 = *v10;
        memset(__str, 0, 24);
        SipUri::asString(v12, (uint64_t)__str);
        uint64_t v13 = v36;
        if ((unint64_t)v36 >= v37)
        {
          uint64_t v15 = (long long *)std::vector<std::string>::__emplace_back_slow_path<std::string&>((uint64_t *)&v35, (long long *)__str);
        }
        else
        {
          if ((__str[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
          }
          else
          {
            long long v14 = *(_OWORD *)__str;
            v36->__r_.__value_.__r.__words[2] = *(void *)&__str[16];
            *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
          }
          uint64_t v15 = (long long *)&v13[1];
        }
        char v36 = (std::string *)v15;
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        ++v10;
      }
      while (v10 != v11);
      uint64_t v10 = (uint64_t *)v32;
    }
    if (v10)
    {
      char v33 = (long long *)v10;
      operator delete(v10);
    }
    uint64_t v9 = *(void **)(v40 + 144);
  }
  uint64_t v16 = v9[31];
  int v17 = (std::__shared_weak_count *)v9[32];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(void *)(v16 + 472);
  int v19 = time(0);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v31 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  memset(__str, 0, sizeof(__str));
  *(_DWORD *)std::string __str = v6;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)&__str[8], v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)&__str[8] = v39;
  }
  *(_OWORD *)std::string __p = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  std::string::operator=((std::string *)&__p[1], &v38);
  LODWORD(v31) = v18 - v19;
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v28, v35, (long long *)v36, 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v35) >> 3));
  uint64_t v20 = IMSClientManager::delegateForStack((void **)a2);
  (*(void (**)(void))(*(void *)(v20 + 8) + 24))();
  uint64_t v32 = (long long *)a2;
  *((unsigned char *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 168), (void **)a2, (uint64_t)&std::piecewise_construct, &v32)+ 56) = 1;
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[1]);
  }
  uint64_t v32 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if ((__str[31] & 0x80000000) != 0) {
    operator delete(*(void **)&__str[8]);
  }
  *(void *)std::string __str = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  uint64_t v21 = *(void *)(a1 + 128);
  uint64_t v23 = *(void *)(v21 + 288);
  int v22 = *(std::__shared_weak_count **)(v21 + 296);
  if (v22)
  {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v21 = *(void *)(a1 + 128);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v21 + 168) + 192))(&v25);
  IMSMetricsManager::logRegistrationSuccess(v23, &v25, a3);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t result = *(void *)(a1 + 120);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 16))(result, a2, a3);
  }
  return result;
}

void sub_1C5211694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30)
{
  a11 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  if (*(char *)(v30 - 121) < 0) {
    operator delete(*(void **)(v30 - 144));
  }
  if (*(char *)(v30 - 89) < 0) {
    operator delete(*(void **)(v30 - 112));
  }
  uint64_t v32 = *(std::__shared_weak_count **)(v30 - 80);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'IMSRegistrationManager::handleRegistrationActive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IMSRegistrationManager::handleRegistrationActive(a1 - 8, a2, a3);
}

uint64_t IMSRegistrationManager::handleRegistrationTerminated(void *a1, void **a2, unsigned int *a3, int a4)
{
  char v8 = a1 + 2;
  uint64_t v9 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
  (*(void (**)(void *, uint64_t))(*v8 + 16))(v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Registration terminated due to ", 31);
  *(unsigned char *)(v9 + 17) = 0;
  unint64_t v10 = a3[14];
  if (0xAAAAAAAAAAAAAAABLL * ((qword_1EBBDAFA0 - _terminationReasonStrings) >> 3) <= v10) {
    uint64_t v11 = (const std::string *)"Unknown";
  }
  else {
    uint64_t v11 = (const std::string *)(_terminationReasonStrings + 24 * v10);
  }
  LoggableString::LoggableString(&__p, v11);
  (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 40))(v9, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = (*(uint64_t (**)(void *))(*v8 + 64))(v8);
  (*(void (**)(void *, uint64_t))(*v8 + 16))(v8, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Network is ", 11);
  *(unsigned char *)(v12 + 17) = 0;
  int v13 = a3[14] - 4;
  if (v13 > 0xD)
  {
    uint64_t v15 = 0;
    long long v14 = "";
  }
  else
  {
    long long v14 = off_1E650F240[v13];
    uint64_t v15 = qword_1C56C8870[v13];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)v14, v15);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"aware of our deregistration", 27);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  uint64_t v16 = (*(uint64_t (**)(void *))(*v8 + 64))(v8);
  (*(void (**)(void *, uint64_t))(*v8 + 16))(v8, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Network ", 8);
  *(unsigned char *)(v16 + 17) = 0;
  int v17 = (*(uint64_t (**)(unsigned int *))(*(void *)a3 + 48))(a3);
  if (v17) {
    uint64_t v18 = "initiated";
  }
  else {
    uint64_t v18 = "didn't initiate";
  }
  if (v17) {
    uint64_t v19 = 9;
  }
  else {
    uint64_t v19 = 15;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)v18, v19);
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" our deregistration", 19);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  time_t Retry = SipRegistrationNotification::secondsUntilNextRetry((SipRegistrationNotification *)a3);
  if (a4)
  {
    uint64_t v21 = (*(uint64_t (**)(void *))(*v8 + 64))(v8);
    (*(void (**)(void *, uint64_t))(*v8 + 16))(v8, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"hasDeferredRegistration: set retryAfter = 1 instead of ", 55);
    *(unsigned char *)(v21 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    time_t Retry = 1;
  }
  unsigned int v22 = a3[14];
  int v23 = 3;
  int v24 = 2;
  switch(v22)
  {
    case 5u:
    case 6u:
    case 9u:
      goto LABEL_20;
    case 0xAu:
      goto LABEL_28;
    case 0xBu:
      int v23 = 4;
      goto LABEL_28;
    case 0xDu:
      int v23 = 6;
      goto LABEL_28;
    case 0x12u:
    case 0x15u:
      int v24 = 8;
      goto LABEL_20;
    case 0x13u:
      int v23 = 9;
      goto LABEL_28;
    case 0x16u:
      int v23 = 10;
      goto LABEL_28;
    default:
      int v24 = 0;
LABEL_20:
      if (v22 <= 0x11 && ((1 << v22) & 0x351F0) != 0)
      {
        char v25 = 0;
      }
      else
      {
        int v23 = v24;
LABEL_28:
        char v25 = 1;
        int v24 = v23;
      }
      IMSRegistrationManager::setRegistrationTerminated((uint64_t)a1, a2, v24, Retry, v25);
      if ((*(unsigned int (**)(unsigned int *))(*(void *)a3 + 48))(a3))
      {
        uint64_t v26 = a1[16];
        uint64_t v28 = *(void *)(v26 + 288);
        uint64_t v27 = *(std::__shared_weak_count **)(v26 + 296);
        if (v27)
        {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v26 = a1[16];
        }
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(v26 + 168) + 192))(&v30);
        IMSMetricsManager::logRegistrationTerminated(v28, &v30, (uint64_t)a3);
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
      }
      uint64_t result = a1[15];
      if (result) {
        return (*(uint64_t (**)(uint64_t, void **, unsigned int *, void))(*(void *)result + 24))(result, a2, a3, 0);
      }
      return result;
  }
}

void sub_1C5211D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'IMSRegistrationManager::handleRegistrationTerminated(uint64_t a1, void **a2, unsigned int *a3, int a4)
{
  return IMSRegistrationManager::handleRegistrationTerminated((void *)(a1 - 8), a2, a3, a4);
}

uint64_t IMSRegistrationManager::handleRegistrationError(void *a1, void **a2, SipRegistrationNotification *this, int a4)
{
  time_t Retry = SipRegistrationNotification::secondsUntilNextRetry(this);
  uint64_t v9 = a1 + 2;
  uint64_t v10 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
  (*(void (**)(void *, uint64_t))(a1[2] + 16))(a1 + 2, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Registration error = ", 21);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(char *, uint64_t))(*((void *)this + 8) + 16))((char *)this + 64, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)".  Next retry in ", 17);
  *(unsigned char *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" seconds", 8);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (*((uint64_t **)this + 9) == &SipResultDomain::_domain) {
    int v11 = *((_DWORD *)this + 20);
  }
  else {
    int v11 = 0;
  }
  if (IMSRegistrationManager::getRegistrationState((uint64_t)a1, a2))
  {
    uint64_t v35 = 0;
    *(void *)&long long v36 = 0;
    char v33 = &unk_1F20E3DD0;
    uint64_t v34 = (uint64_t *)&v35;
    long long v42 = 0;
    long long v43 = 0;
    (*(void (**)(SipStack **__return_ptr))(**(void **)(a1[16] + 168) + 192))(&v42);
    if (!v42)
    {
      uint64_t v23 = (*(uint64_t (**)(void *))(*v9 + 64))(a1 + 2);
      (*(void (**)(void *, uint64_t))(*v9 + 16))(a1 + 2, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"sipStack is null: will not report.", 34);
      *(unsigned char *)(v23 + 17) = 0;
      int v24 = (unsigned char *)(v23 + 17);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_25;
    }
    std::string::basic_string[abi:ne180100]<0>(v40, "all");
    uint64_t v12 = (ImsPrefs *)SipStack::prefs(v42);
    IgnoreReregistrationErrorCodesKey = (void **)ImsPrefs::getIgnoreReregistrationErrorCodesKey(v12);
    ImsPrefs::stringValue(v12, IgnoreReregistrationErrorCodesKey);
    SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)&v33, (uint64_t)v40, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v41 < 0) {
      operator delete(v40[0]);
    }
    long long v14 = (ImsPrefs *)SipStack::prefs(v42);
    ReportSipErrorsDuringReRegistrationKey = (void **)ImsPrefs::getReportSipErrorsDuringReRegistrationKey(v14);
    int v16 = ImsPrefs::BOOLValue(v14, ReportSipErrorsDuringReRegistrationKey);
    if (v11) {
      int v17 = v16;
    }
    else {
      int v17 = 0;
    }
    if (v17 == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v40, "all");
      BOOL v18 = SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)&v33, v40, v11, 0);
      BOOL v19 = v18;
      if (v41 < 0)
      {
        operator delete(v40[0]);
        if (v19) {
          goto LABEL_16;
        }
      }
      else if (v18)
      {
        goto LABEL_16;
      }
      uint64_t v26 = (*(uint64_t (**)(void *))(*v9 + 64))(a1 + 2);
      (*(void (**)(void *, uint64_t))(*v9 + 16))(a1 + 2, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"Response ", 9);
      *(unsigned char *)(v26 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v26 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)" should be reported as RegistrationTerminated", 45);
      *(unsigned char *)(v26 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v26 + 17) = 0;
      IMSRegistrationManager::setRegistrationTerminated((uint64_t)a1, a2, 0, Retry, 1);
      goto LABEL_28;
    }
LABEL_16:
    uint64_t v20 = *(uint64_t (**)(void *))(*v9 + 64);
    if (a4)
    {
      uint64_t v21 = v20(a1 + 2);
      (*(void (**)(void *, uint64_t))(*v9 + 16))(a1 + 2, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"causedByUAC. Will report.", 25);
      *(unsigned char *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v21 + 17) = 0;
      IMSRegistrationManager::setRegistrationError((uint64_t)a1, a2, Retry);
LABEL_28:
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      char v33 = &unk_1F20E3DD0;
      std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)&v34, v35);
      goto LABEL_31;
    }
    uint64_t v25 = v20(a1 + 2);
    (*(void (**)(void *, uint64_t))(*v9 + 16))(a1 + 2, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"Will not report.", 16);
    *(unsigned char *)(v25 + 17) = 0;
    int v24 = (unsigned char *)(v25 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_25:
    unsigned char *v24 = 0;
    goto LABEL_28;
  }
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  char v33 = &unk_1F20B2680;
  uint64_t v34 = &_bambiDomain;
  LODWORD(v35) = 1073741848;
  if (*((uint64_t **)this + 9) == &_bambiDomain)
  {
    int v22 = *((_DWORD *)this + 20);
    ImsResult::~ImsResult((ImsResult *)&v33);
    if (v22 == 1073741848)
    {
      IMSRegistrationManager::setRegistrationTerminated((uint64_t)a1, a2, 7, -1, 0);
      goto LABEL_31;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v33);
  }
  IMSRegistrationManager::setRegistrationError((uint64_t)a1, a2, Retry);
LABEL_31:
  uint64_t v27 = a1[16];
  uint64_t v29 = *(void *)(v27 + 288);
  uint64_t v28 = *(std::__shared_weak_count **)(v27 + 296);
  if (v28)
  {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v27 = a1[16];
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v27 + 168) + 192))(&v31);
  IMSMetricsManager::logRegistrationError(v29, &v31, (uint64_t)this);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  uint64_t result = a1[15];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void **, SipRegistrationNotification *, void))(*(void *)result + 40))(result, a2, this, 0);
  }
  return result;
}

void sub_1C5212554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 96);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v31, a13);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'IMSRegistrationManager::handleRegistrationError(uint64_t a1, void **a2, SipRegistrationNotification *a3, int a4)
{
  return IMSRegistrationManager::handleRegistrationError((void *)(a1 - 8), a2, a3, a4);
}

uint64_t IMSRegistrationManager::handleRegistrationModeChange(uint64_t a1, void **a2, unsigned int *a3)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Registration mode changed to ", 29);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = operator<<(v7, a3);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  unsigned int v9 = *a3;
  if (*a3 == SipRegistrationMode::kModeDisabled)
  {
    IMSRegistrationManager::setRegistrationTerminated(a1, a2, 4, -1, 1);
    unsigned int v9 = *a3;
  }
  if (v9 == SipRegistrationMode::kModeDisabledCountry)
  {
    IMSRegistrationManager::setRegistrationTerminated(a1, a2, 6, -1, 1);
    unsigned int v9 = *a3;
  }
  if (v9 == SipRegistrationMode::kModeLimitedAccess)
  {
    IMSRegistrationManager::setRegistrationTerminated(a1, a2, 3, -1, 1);
    unsigned int v9 = *a3;
  }
  if (v9 == SipRegistrationMode::kModeNormal)
  {
    uint64_t v10 = IMSClientManager::delegateForStack(a2);
    (*(void (**)(void))(*(void *)(v10 + 8) + 104))();
  }
  uint64_t result = *(void *)(a1 + 120);
  if (result)
  {
    uint64_t v12 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v12();
  }
  return result;
}

uint64_t non-virtual thunk to'IMSRegistrationManager::handleRegistrationModeChange(uint64_t a1, void **a2, unsigned int *a3)
{
  return IMSRegistrationManager::handleRegistrationModeChange(a1 - 8, a2, a3);
}

uint64_t IMSRegistrationManager::handleRegistrationIdentities(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(IMSClientManager::delegateForStack(a2) + 8) + 120);
  return v2();
}

uint64_t non-virtual thunk to'IMSRegistrationManager::handleRegistrationIdentities(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(IMSClientManager::delegateForStack(a2) + 8) + 120);
  return v2();
}

uint64_t IMSRegistrationManager::handleNewInitialRegistration(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(IMSClientManager::delegateForStack(a2) + 8) + 128);
  return v2();
}

uint64_t non-virtual thunk to'IMSRegistrationManager::handleNewInitialRegistration(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(IMSClientManager::delegateForStack(a2) + 8) + 128);
  return v2();
}

void *IMSRegistrationManager::logPrefix(IMSRegistrationManager *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"RegistrationManager: ", 21);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void *non-virtual thunk to'IMSRegistrationManager::logPrefix(IMSRegistrationManager *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"RegistrationManager: ", 21);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

SipUri *std::vector<SipUri>::__assign_with_size[abi:ne180100]<SipUri*,SipUri*>(SipUri **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  unsigned int v9 = *a1;
  if (0xFAFAFAFAFAFAFAFBLL * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<SipUri>::__vdeallocate(a1);
    if (a4 > 0xA0A0A0A0A0A0A0) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xF5F5F5F5F5F5F5F6 * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xFAFAFAFAFAFAFAFBLL * ((a1[2] - *a1) >> 3) >= 0x50505050505050) {
      unint64_t v11 = 0xA0A0A0A0A0A0A0;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<SipUri>::__vallocate[abi:ne180100](a1, v11);
    uint64_t result = (SipUri *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipUri>,SipUri*,SipUri*,SipUri*>(v8, a2, a3, (uint64_t)a1[1]);
    goto LABEL_11;
  }
  if (0xFAFAFAFAFAFAFAFBLL * ((a1[1] - v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((a1[1] - v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,SipUri *,SipUri *,SipUri *,0>(a2, v13, v9);
    uint64_t result = (SipUri *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipUri>,SipUri*,SipUri*,SipUri*>(v8, v13, a3, (uint64_t)a1[1]);
LABEL_11:
    a1[1] = result;
    return result;
  }
  uint64_t result = (SipUri *)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,SipUri *,SipUri *,SipUri *,0>(a2, a3, v9);
  uint64_t v15 = v14;
  int v16 = a1[1];
  if (v16 != v14)
  {
    uint64_t v17 = (uint64_t)v16 - 408;
    BOOL v18 = (SipUri *)((char *)v16 - 408);
    do
    {
      uint64_t result = (SipUri *)(**(uint64_t (***)(SipUri *))v18)(v18);
      v17 -= 408;
      BOOL v19 = v18 == v15;
      BOOL v18 = (SipUri *)((char *)v18 - 408);
    }
    while (!v19);
  }
  a1[1] = v15;
  return result;
}

void sub_1C5212B84(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C5212B8C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<SipUri>::__vdeallocate(void *a1)
{
  uint64_t v1 = (void (***)(void))*a1;
  if (*a1)
  {
    uint64_t v3 = (void (***)(void))a1[1];
    uint64_t v4 = (void (***)(void))*a1;
    if (v3 != v1)
    {
      long long v5 = v3 - 51;
      uint64_t v6 = v3 - 51;
      do
      {
        (**v6)(v6);
        v5 -= 51;
        BOOL v7 = v6 == v1;
        v6 -= 51;
      }
      while (!v7);
      uint64_t v4 = (void (***)(void))*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<SipUri>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xA0A0A0A0A0A0A1) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipUri>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[408 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipUri>,SipUri*,SipUri*,SipUri*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      SipUri::SipUri((SipUri *)(a4 + v7), (const SipUri *)(a2 + v7));
      v7 += 408;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C5212CE4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 408;
    do
    {
      (**(void (***)(void))(v4 + v2))();
      v2 -= 408;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,SipUri *,SipUri *,SipUri *,0>(uint64_t a1, uint64_t a2, SipUri *this)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      SipUri::operator=(this, v4);
      v4 += 408;
      this = (SipUri *)((char *)this + 408);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipUri>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xA0A0A0A0A0A0A1) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(408 * a2);
}

char *std::vector<SipRetryInfo>::__assign_with_size[abi:ne180100]<SipRetryInfo*,SipRetryInfo*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unsigned int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v7[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<std::shared_ptr<BambiConferenceParticipant>>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    unsigned int v9 = v13;
LABEL_16:
    uint64_t v17 = a3 - (void)__src;
    if (v17)
    {
      size_t v18 = v17 - 4;
      BOOL v19 = v9;
      uint64_t v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9 - 4);
    unsigned int v9 = (char *)*v12;
  }
  uint64_t v17 = a3 - (void)v16;
  if (v17)
  {
    size_t v18 = v17 - 4;
    BOOL v19 = v9;
    uint64_t v20 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  ImsPrefs *v12 = &v9[v17];
  return result;
}

uint64_t **std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t **result, unsigned int *a2, unsigned int *a3)
{
  long long v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    uint64_t v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    long long v14 = result;
    unint64_t v15 = v8;
    int v16 = v8;
    if (v8)
    {
      unint64_t v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        unsigned int v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          std::__tree<unsigned int>::__node_insert_multi(v5, (uint64_t)v8);
          uint64_t v8 = v15;
          int v16 = v15;
          if (v15) {
            unint64_t v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (unsigned int *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = *(unsigned int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (unsigned int *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              unsigned int v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          unsigned int v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<unsigned int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<unsigned int>::__emplace_multi<unsigned int const&>(v5, a2 + 7);
      uint64_t v12 = (unsigned int *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = *(unsigned int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (unsigned int *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1C5213038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<unsigned int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<unsigned int>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        long long v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    long long v5 = v3 + 1;
  }
  else
  {
    long long v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t std::__tree<unsigned int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<unsigned int>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<unsigned int>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<unsigned int>::__emplace_multi<unsigned int const&>(uint64_t **a1, unsigned int *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x20uLL);
  unsigned int v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7)) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        uint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    uint64_t v8 = v6 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t **std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  unsigned int v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    uint64_t v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    unint64_t v15 = result;
    int v16 = v8;
    uint64_t v17 = v8;
    if (v8)
    {
      int v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        unsigned int v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::set<unsigned int> &>::operator=[abi:ne180100]<std::string const,std::set<unsigned int>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          v18[0] = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<unsigned int>::__insert_node_at(v5, v18[0], leaf_high, v17);
          uint64_t v17 = v16;
          if (v16) {
            int v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          BOOL v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              BOOL v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              unsigned int v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          unsigned int v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__emplace_multi<std::pair<std::string const,std::set<unsigned int>> const&>(v5, a2 + 2);
      uint64_t v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          long long v14 = v13;
          uint64_t v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1C5213324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::set<unsigned int> &>::operator=[abi:ne180100]<std::string const,std::set<unsigned int>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(uint64_t ***)(a1 + 8);
  if (v4 != (uint64_t **)(a2 + 24)) {
    std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(v4, *(unsigned int **)(a2 + 24), (unsigned int *)(a2 + 32));
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<unsigned int>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<unsigned int>>,0>(uint64_t a1)
{
  std::__tree<unsigned int>::destroy(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__emplace_multi<std::pair<std::string const,std::set<unsigned int>> const&>(uint64_t **a1, long long *a2)
{
  memset(v7, 0, sizeof(v7));
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__construct_node<std::pair<std::string const,std::set<unsigned int>> const&>((uint64_t)a1, a2, v7);
  uint64_t v6 = 0;
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v6, v7[0] + 4);
  std::__tree<unsigned int>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1C5213504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__construct_node<std::pair<std::string const,std::set<unsigned int>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::set<unsigned int>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1C5213578(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::set<unsigned int>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<unsigned int>::set[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1C52135EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<unsigned int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1C5213648(_Unwind_Exception *a1)
{
  std::__tree<unsigned int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(v5, v6, v4 + 7, v4 + 7);
      uint64_t v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v10 = 0;
  BOOL v11 = 0;
  uint64_t v6 = std::__tree<unsigned int>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__find_equal<unsigned int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    BOOL v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      BOOL v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    BOOL v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      BOOL v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<unsigned int>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void SipRegistrationConfig::SipRegistrationConfig(SipRegistrationConfig *this, const SipRegistrationConfig *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<SipUri>::__init_with_size[abi:ne180100]<SipUri*,SipUri*>(this, *(void *)a2, *((void *)a2 + 1), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  long long v5 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 53) = *(_OWORD *)((char *)a2 + 53);
  *(_OWORD *)((char *)this + 40) = v5;
  *(_OWORD *)((char *)this + 24) = v4;
  SipUri::SipUri((SipRegistrationConfig *)((char *)this + 72), (const SipRegistrationConfig *)((char *)a2 + 72));
  SipUri::SipUri((SipRegistrationConfig *)((char *)this + 480), (const SipRegistrationConfig *)((char *)a2 + 480));
  if (*((char *)a2 + 911) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 37, *((const std::string::value_type **)a2 + 111), *((void *)a2 + 112));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 888);
    *((void *)this + 113) = *((void *)a2 + 113);
    *(_OWORD *)((char *)this + 888) = v6;
  }
  if (*((char *)a2 + 935) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 38, *((const std::string::value_type **)a2 + 114), *((void *)a2 + 115));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 57);
    *((void *)this + 116) = *((void *)a2 + 116);
    *((_OWORD *)this + 57) = v7;
  }
  if (*((char *)a2 + 959) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 39, *((const std::string::value_type **)a2 + 117), *((void *)a2 + 118));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 936);
    *((void *)this + 119) = *((void *)a2 + 119);
    *(_OWORD *)((char *)this + 936) = v8;
  }
  *((void *)this + 122) = 0;
  *((_OWORD *)this + 60) = 0u;
  std::vector<SipRetryInfo>::__init_with_size[abi:ne180100]<SipRetryInfo*,SipRetryInfo*>((void *)this + 120, *((const void **)a2 + 120), *((void *)a2 + 121), (uint64_t)(*((void *)a2 + 121) - *((void *)a2 + 120)) >> 4);
  long long v9 = *(_OWORD *)((char *)a2 + 984);
  *((void *)this + 125) = *((void *)a2 + 125);
  *(_OWORD *)((char *)this + 984) = v9;
  ims::AccessNetworks::AccessNetworks((std::string *)this + 42, (long long *)a2 + 63);
  __int16 v10 = *((_WORD *)a2 + 612);
  *((unsigned char *)this + 1226) = *((unsigned char *)a2 + 1226);
  *((_WORD *)this + 612) = v10;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t *)this + 154, (uint64_t)a2 + 1232);
  std::set<unsigned int>::set[abi:ne180100]((uint64_t *)this + 157, (uint64_t)a2 + 1256);
  if (*((char *)a2 + 1303) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 1280), *((const std::string::value_type **)a2 + 160), *((void *)a2 + 161));
  }
  else
  {
    long long v11 = *((_OWORD *)a2 + 80);
    *((void *)this + 162) = *((void *)a2 + 162);
    *((_OWORD *)this + 80) = v11;
  }
  *((void *)this + 163) = *((void *)a2 + 163);
  if (*((char *)a2 + 1335) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 1312), *((const std::string::value_type **)a2 + 164), *((void *)a2 + 165));
  }
  else
  {
    long long v12 = *((_OWORD *)a2 + 82);
    *((void *)this + 166) = *((void *)a2 + 166);
    *((_OWORD *)this + 82) = v12;
  }
  long long v13 = *(_OWORD *)((char *)a2 + 1336);
  long long v14 = *(_OWORD *)((char *)a2 + 1352);
  *(_OWORD *)((char *)this + 1363) = *(_OWORD *)((char *)a2 + 1363);
  *(_OWORD *)((char *)this + 1336) = v13;
  *(_OWORD *)((char *)this + 1352) = v14;
  *((void *)this + 173) = &unk_1F20E3DD0;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 174, (uint64_t)a2 + 1392);
  *((void *)this + 177) = &unk_1F20E3DD0;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 178, (uint64_t)a2 + 1424);
  *((void *)this + 181) = &unk_1F20E3DD0;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 182, (uint64_t)a2 + 1456);
  *((void *)this + 185) = &unk_1F20E3DD0;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 186, (uint64_t)a2 + 1488);
  *((void *)this + 189) = &unk_1F20D68F0;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t *)this + 190, (uint64_t)a2 + 1520);
  *((unsigned char *)this + 1544) = *((unsigned char *)a2 + 1544);
  if (*((char *)a2 + 1575) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 1552), *((const std::string::value_type **)a2 + 194), *((void *)a2 + 195));
  }
  else
  {
    long long v15 = *((_OWORD *)a2 + 97);
    *((void *)this + 196) = *((void *)a2 + 196);
    *((_OWORD *)this + 97) = v15;
  }
  if (*((char *)a2 + 1599) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 1576), *((const std::string::value_type **)a2 + 197), *((void *)a2 + 198));
  }
  else
  {
    long long v16 = *(_OWORD *)((char *)a2 + 1576);
    *((void *)this + 199) = *((void *)a2 + 199);
    *(_OWORD *)((char *)this + 1576) = v16;
  }
  uint64_t v17 = (std::string *)((char *)this + 1600);
  if (*((char *)a2 + 1623) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *((const std::string::value_type **)a2 + 200), *((void *)a2 + 201));
  }
  else
  {
    long long v18 = *((_OWORD *)a2 + 100);
    *((void *)this + 202) = *((void *)a2 + 202);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
  }
  *((unsigned char *)this + 1624) = *((unsigned char *)a2 + 1624);
  *((void *)this + 204) = 0;
  *((void *)this + 206) = 0;
  *((void *)this + 205) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 68, *((long long **)a2 + 204), *((long long **)a2 + 205), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 205) - *((void *)a2 + 204)) >> 3));
  uint64_t v19 = *((void *)a2 + 207);
  *((_WORD *)this + 832) = *((_WORD *)a2 + 832);
  *((void *)this + 207) = v19;
}

void sub_1C5213DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, void **a18, void **a19, void **a20,void **a21,SipUri *a22)
{
  if (*(char *)(v22 + 1599) < 0) {
    operator delete(*v27);
  }
  if (*(char *)(v22 + 1575) < 0) {
    operator delete(*v29);
  }
  *(void *)(v22 + 1512) = v25;
  std::__tree<unsigned int>::destroy(v23, *(void **)(v22 + 1528));
  *(void *)(v22 + 1480) = v28;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v24, *(void **)(v22 + 1496));
  *(void *)(v22 + 1448) = v30;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v26, *(void **)(v22 + 1464));
  *(void *)(v22 + 1416) = a10;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a11, *(void **)(v22 + 1432));
  *(void *)(v22 + 1384) = a13;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a14, *(void **)(v22 + 1400));
  if (*(char *)(v22 + 1335) < 0) {
    operator delete(*a9);
  }
  if (*(char *)(v22 + 1303) < 0) {
    operator delete(*a12);
  }
  std::__tree<unsigned int>::destroy(a15, *(void **)(v22 + 1264));
  std::__tree<unsigned int>::destroy(a16, *(void **)(v22 + 1240));
  ims::AccessNetworks::~AccessNetworks(a20);
  char v33 = *a21;
  if (*a21)
  {
    *(void *)(v22 + 968) = v33;
    operator delete(v33);
  }
  if (*(char *)(v22 + 959) < 0) {
    operator delete(*a17);
  }
  if (*(char *)(v22 + 935) < 0) {
    operator delete(*a18);
  }
  if (*(char *)(v22 + 911) < 0) {
    operator delete(*a19);
  }
  SipUri::~SipUri(a22);
  SipUri::~SipUri(*(SipUri **)(v31 - 96));
  *(void *)(v31 - 88) = v22;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 88));
  _Unwind_Resume(a1);
}

void sub_1C5213F64()
{
}

void sub_1C5213F6C()
{
}

void sub_1C5213F74()
{
}

void sub_1C5213F7C()
{
}

void sub_1C5213F84()
{
}

void sub_1C5213F8C()
{
}

void sub_1C5213F94()
{
}

void sub_1C5213F9C()
{
}

void sub_1C5213FA4()
{
}

void *std::vector<SipUri>::__init_with_size[abi:ne180100]<SipUri*,SipUri*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<SipUri>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipUri>,SipUri*,SipUri*,SipUri*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C5214014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::vector<SipRetryInfo>::__init_with_size[abi:ne180100]<SipRetryInfo*,SipRetryInfo*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = std::vector<std::shared_ptr<BambiConferenceParticipant>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8 - 4);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C5214094(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::set<unsigned int>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::set<unsigned int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1C52140F0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::set<unsigned int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<unsigned int>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<unsigned int>> const&>(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v11 = 0;
  long long v12 = 0;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__construct_node<std::pair<std::string const,std::set<unsigned int>> const&>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void **std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(void *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  BOOL v9 = (void **)(a1 + 1);
  if (a1 + 1 == (void *)a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      long long v12 = (void *)a2;
    }
    else
    {
      uint64_t v11 = *(void **)a2;
      if (*(void *)a2)
      {
        do
        {
          long long v12 = v11;
          uint64_t v11 = (void *)v11[1];
        }
        while (v11);
      }
      else
      {
        long long v16 = (void *)a2;
        do
        {
          long long v12 = (void *)v16[2];
          BOOL v17 = *v12 == (void)v16;
          long long v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0) {
        goto LABEL_17;
      }
    }
    if (*(void *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a2 + 32), a5) & 0x80) == 0)
  {
    *a3 = (void **)a2;
    *a4 = a2;
    return (void **)a4;
  }
  a4 = (uint64_t *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    long long v14 = *(void ***)(a2 + 8);
    do
    {
      long long v15 = v14;
      long long v14 = (void **)*v14;
    }
    while (v14);
  }
  else
  {
    uint64_t v19 = (void **)a2;
    do
    {
      long long v15 = (void **)v19[2];
      BOOL v17 = *v15 == v19;
      uint64_t v19 = v15;
    }
    while (!v17);
  }
  if (v15 == v9)
  {
LABEL_29:
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (void **)a2;
    }
    return (void **)a4;
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
  {
    uint64_t v13 = *a4;
    goto LABEL_29;
  }
LABEL_17:
  return (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1C52144E0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipRegistrationConfig>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipRegistrationConfig>,0>(uint64_t a1)
{
  SipRegistrationConfig::~SipRegistrationConfig((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void SipRegistrationConfig::~SipRegistrationConfig(void **this)
{
  uint64_t v3 = this + 204;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 1623) < 0) {
    operator delete(this[200]);
  }
  if (*((char *)this + 1599) < 0) {
    operator delete(this[197]);
  }
  if (*((char *)this + 1575) < 0) {
    operator delete(this[194]);
  }
  this[189] = &unk_1F20D68F0;
  std::__tree<unsigned int>::destroy((uint64_t)(this + 190), this[191]);
  this[185] = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(this + 186), this[187]);
  this[181] = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(this + 182), this[183]);
  this[177] = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(this + 178), this[179]);
  this[173] = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(this + 174), this[175]);
  if (*((char *)this + 1335) < 0) {
    operator delete(this[164]);
  }
  if (*((char *)this + 1303) < 0) {
    operator delete(this[160]);
  }
  std::__tree<unsigned int>::destroy((uint64_t)(this + 157), this[158]);
  std::__tree<unsigned int>::destroy((uint64_t)(this + 154), this[155]);
  if (*((char *)this + 1199) < 0) {
    operator delete(this[147]);
  }
  if (*((char *)this + 1175) < 0) {
    operator delete(this[144]);
  }
  if (*((char *)this + 1127) < 0) {
    operator delete(this[138]);
  }
  if (*((char *)this + 1103) < 0) {
    operator delete(this[135]);
  }
  if (*((char *)this + 1055) < 0) {
    operator delete(this[129]);
  }
  if (*((char *)this + 1031) < 0) {
    operator delete(this[126]);
  }
  uint64_t v2 = this[120];
  if (v2)
  {
    this[121] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 959) < 0) {
    operator delete(this[117]);
  }
  if (*((char *)this + 935) < 0) {
    operator delete(this[114]);
  }
  if (*((char *)this + 911) < 0) {
    operator delete(this[111]);
  }
  SipUri::~SipUri((SipUri *)(this + 60));
  SipUri::~SipUri((SipUri *)(this + 9));
  uint64_t v3 = this;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipRegistrationConfig>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipRegistrationConfig>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (char *)operator new(0x6C0uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,SipRegistrationConfig>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1C5214944(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipRegistrationConfig>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipRegistrationConfig>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,SipRegistrationConfig>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  bzero(&this[1], 0x688uLL);
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)&this[1]);
  return this;
}

void sub_1C52149C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationConfig::SipRegistrationConfig(SipRegistrationConfig *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 16777473;
  *(_OWORD *)((char *)this + 36) = xmmword_1C56C87F0;
  *(_OWORD *)((char *)this + 52) = xmmword_1C56C8800;
  *((unsigned char *)this + 68) = 1;
  SipUri::SipUri((SipRegistrationConfig *)((char *)this + 72));
  SipUri::SipUri((SipRegistrationConfig *)((char *)this + 480));
  *(_OWORD *)((char *)this + 952) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((void *)this + 123) = 60;
  *((void *)this + 124) = 30;
  *((void *)this + 125) = 0x200000001;
  *((void *)this + 133) = 0;
  *((unsigned char *)this + 1072) = 0;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((unsigned char *)this + 1056) = 0;
  *((void *)this + 142) = 0;
  *((unsigned char *)this + 1144) = 0;
  *((unsigned char *)this + 1128) = 0;
  *(_OWORD *)((char *)this + 1112) = 0u;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *((void *)this + 151) = 0;
  *((unsigned char *)this + 1216) = 0;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((unsigned char *)this + 1200) = 0;
  *((_WORD *)this + 612) = 1;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *((unsigned char *)this + 1226) = 0;
  *((void *)this + 154) = (char *)this + 1240;
  *((_OWORD *)this + 79) = 0u;
  *((void *)this + 157) = (char *)this + 1264;
  *((void *)this + 162) = 0;
  *((_OWORD *)this + 80) = 0u;
  *((void *)this + 163) = 0x300000003;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 164, "sos");
  *((void *)this + 167) = 0x100000002;
  *((_DWORD *)this + 336) = 16842752;
  *((unsigned char *)this + 1348) = 0;
  *(_OWORD *)((char *)this + 1352) = xmmword_1C56C8810;
  *((void *)this + 171) = 900;
  *((_WORD *)this + 688) = 256;
  *((unsigned char *)this + 1378) = 1;
  *(_OWORD *)((char *)this + 1400) = 0u;
  *((void *)this + 173) = &unk_1F20E3DD0;
  *((void *)this + 174) = (char *)this + 1400;
  *((void *)this + 177) = &unk_1F20E3DD0;
  *(_OWORD *)((char *)this + 1432) = 0u;
  *((void *)this + 178) = (char *)this + 1432;
  *((void *)this + 181) = &unk_1F20E3DD0;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *((void *)this + 182) = (char *)this + 1464;
  *((void *)this + 185) = &unk_1F20E3DD0;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *((void *)this + 186) = (char *)this + 1496;
  *((void *)this + 189) = &unk_1F20D68F0;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *((void *)this + 190) = (char *)this + 1528;
  *((unsigned char *)this + 1544) = 0;
  *((_OWORD *)this + 97) = 0u;
  *((_OWORD *)this + 98) = 0u;
  *((_OWORD *)this + 99) = 0u;
  *((_OWORD *)this + 100) = 0u;
  *((void *)this + 202) = 0;
  *((void *)this + 206) = 0;
  *((_OWORD *)this + 102) = 0u;
  *((_WORD *)this + 828) = 256;
  *((_DWORD *)this + 415) = 0;
  *((_WORD *)this + 832) = 1;
}

void sub_1C5214C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 + 1303) < 0) {
    operator delete(*v17);
  }
  std::__tree<unsigned int>::destroy(v15, *(void **)(v10 + 1264));
  std::__tree<unsigned int>::destroy(v14, *(void **)(v10 + 1240));
  ims::AccessNetworks::~AccessNetworks(v13);
  uint64_t v19 = *(void **)(v10 + 960);
  if (v19)
  {
    *(void *)(v10 + 968) = v19;
    operator delete(v19);
  }
  if (*(char *)(v10 + 959) < 0) {
    operator delete(*(void **)(v10 + 936));
  }
  if (*(char *)(v10 + 935) < 0) {
    operator delete(*(void **)(v10 + 912));
  }
  if (*(char *)(v10 + 911) < 0) {
    operator delete(*v16);
  }
  SipUri::~SipUri(v12);
  SipUri::~SipUri(v11);
  a10 = (void **)v10;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipRegistrationConfig>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipRegistrationConfig>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipRegistrationConfig>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *uint64_t v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  unint64_t v8 = (std::string *)(v7 + 32);
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  v7[56] = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C5214EB8(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

const char *toString(uint64_t a1)
{
  uint64_t result = "kCFStreamEventNone";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "kCFStreamEventOpenCompleted";
      break;
    case 2:
      uint64_t result = "kCFStreamEventHasBytesAvailable";
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    case 4:
      uint64_t result = "kCFStreamEventCanAcceptBytes";
      break;
    case 8:
      uint64_t result = "kCFStreamEventErrorOccurred";
      break;
    default:
      if (a1 == 16) {
        uint64_t result = "kCFStreamEventEndEncountered";
      }
      else {
LABEL_5:
      }
        uint64_t result = "Unknown event";
      break;
  }
  return result;
}

void HttpStreamPair::~HttpStreamPair(HttpStreamPair *this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void HttpStreamPair::_cleanupReadStream(CFReadStreamRef *this)
{
  if (this[4])
  {
    std::string::basic_string[abi:ne180100]<0>(v7, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v2 = ims::debug((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Cleaning up read stream: ", 25);
    *(unsigned char *)(v2 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    CFReadStreamSetClient(this[4], 0, 0, 0);
    uint64_t v3 = this[4];
    Main = CFRunLoopGetMain();
    CFReadStreamUnscheduleFromRunLoop(v3, Main, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
    CFReadStreamClose(this[4]);
    CFRelease(this[4]);
    this[4] = 0;
  }
}

void sub_1C5215104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HttpStreamPair::_cleanupWriteStream(CFWriteStreamRef *this)
{
  if (this[5])
  {
    std::string::basic_string[abi:ne180100]<0>(v7, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v2 = ims::debug((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Cleaning up write stream: ", 26);
    *(unsigned char *)(v2 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    CFWriteStreamSetClient(this[5], 0, 0, 0);
    uint64_t v3 = this[5];
    Main = CFRunLoopGetMain();
    CFWriteStreamUnscheduleFromRunLoop(v3, Main, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
    CFWriteStreamClose(this[5]);
    CFRelease(this[5]);
    this[5] = 0;
  }
}

void sub_1C521527C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL HttpStreamPair::initialize(CFReadStreamRef *a1, const char *a2, UInt32 a3)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  v9[0] = &unk_1F20E3908;
  v9[1] = v6;
  CFStreamCreatePairWithSocketToHost(v5, v6, a3, a1 + 4, a1 + 5);
  BOOL v7 = HttpStreamPair::_initiateReadStream(a1) && (HttpStreamPair::_initiateWriteStream(a1) & 1) != 0;
  ims::CFType::~CFType((ims::CFType *)v9);
  return v7;
}

void sub_1C5215378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t HttpStreamPair::_initiateReadStream(CFReadStreamRef *this)
{
  clientContext.version = 0;
  clientContext.info = this;
  memset(&clientContext.retain, 0, 24);
  if (CFReadStreamSetClient(this[4], 0x1BuLL, (CFReadStreamClientCallBack)HttpStreamPair::_handleReadStreamCallback, &clientContext))
  {
    uint64_t v2 = this[4];
    Main = CFRunLoopGetMain();
    CFReadStreamScheduleWithRunLoop(v2, Main, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
  }
  uint64_t v20 = 0;
  CFTypeRef propertyValue = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  (**(void (***)(void **__return_ptr))*this)(__p);
  if (v19 >= 0) {
    CFAllocatorRef v5 = __p;
  }
  else {
    CFAllocatorRef v5 = (void **)__p[0];
  }
  CFStringRef v6 = CFStringCreateWithCString(v4, (const char *)v5, 0x600u);
  uint64_t v20 = &unk_1F20E3908;
  CFTypeRef propertyValue = v6;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    CFStringRef v6 = propertyValue;
  }
  if (!CFReadStreamSetProperty(this[4], (CFStreamPropertyKey)*MEMORY[0x1E4F190B0], v6))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    uint64_t v8 = ims::error((uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Failed to set stream property on read stream: kCFStreamPropertyDataConnectionServiceType", 88);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_28:
    *(unsigned char *)(v8 + 17) = 0;
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v19 < 0) {
      operator delete(__p[0]);
    }
LABEL_37:
    uint64_t v11 = 0;
    goto LABEL_38;
  }
  if (*((char *)this + 31) < 0)
  {
    if (this[2])
    {
      uint64_t v14 = 0;
      CFTypeRef v15 = 0;
      BOOL v7 = (const char *)this[1];
      goto LABEL_15;
    }
LABEL_21:
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    uint64_t v10 = ims::error((uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"No network ID given for carrier ", 32);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v10 + 32))(v10, (char *)this + 8);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_25;
  }
  if (!*((unsigned char *)this + 31)) {
    goto LABEL_21;
  }
  uint64_t v14 = 0;
  CFTypeRef v15 = 0;
  BOOL v7 = (const char *)(this + 1);
LABEL_15:
  uint64_t v14 = &unk_1F20E3908;
  CFTypeRef v15 = CFStringCreateWithCString(v4, v7, 0x600u);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  uint64_t v9 = ims::debug((uint64_t)__p, (uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Setting account ID property to carrier ID: ", 43);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v9 + 32))(v9, (char *)this + 8);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (!CFReadStreamSetProperty(this[4], (CFStreamPropertyKey)*MEMORY[0x1E4F19068], v15))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    uint64_t v12 = ims::error((uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Failed to set stream property on read stream: kCFStreamPropertyAccountIdentifier", 80);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    ims::CFType::~CFType((ims::CFType *)&v14);
    goto LABEL_37;
  }
  ims::CFType::~CFType((ims::CFType *)&v14);
LABEL_25:
  if (!CFReadStreamOpen(this[4]))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    uint64_t v8 = ims::error((uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Failed to open read stream", 26);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_28;
  }
  uint64_t v11 = 1;
LABEL_38:
  ims::CFType::~CFType((ims::CFType *)&v20);
  return v11;
}

void sub_1C5215948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)&a10);
  ims::CFType::~CFType((ims::CFType *)&a24);
  _Unwind_Resume(a1);
}

uint64_t HttpStreamPair::_initiateWriteStream(CFWriteStreamRef *this)
{
  clientContext.version = 0;
  clientContext.info = this;
  memset(&clientContext.retain, 0, 24);
  if (CFWriteStreamSetClient(this[5], 0x1DuLL, (CFWriteStreamClientCallBack)HttpStreamPair::_handleWriteStreamCallback, &clientContext))
  {
    uint64_t v2 = this[5];
    Main = CFRunLoopGetMain();
    CFWriteStreamScheduleWithRunLoop(v2, Main, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
  }
  uint64_t v20 = 0;
  CFTypeRef propertyValue = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  (**(void (***)(void **__return_ptr))*this)(__p);
  if (v19 >= 0) {
    CFAllocatorRef v5 = __p;
  }
  else {
    CFAllocatorRef v5 = (void **)__p[0];
  }
  CFStringRef v6 = CFStringCreateWithCString(v4, (const char *)v5, 0x600u);
  uint64_t v20 = &unk_1F20E3908;
  CFTypeRef propertyValue = v6;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    CFStringRef v6 = propertyValue;
  }
  if (!CFWriteStreamSetProperty(this[5], (CFStreamPropertyKey)*MEMORY[0x1E4F190B0], v6))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    uint64_t v8 = ims::error((uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Failed to set stream property on write stream: kCFStreamPropertyDataConnectionServiceType)", 90);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_28:
    *(unsigned char *)(v8 + 17) = 0;
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v19 < 0) {
      operator delete(__p[0]);
    }
LABEL_37:
    uint64_t v11 = 0;
    goto LABEL_38;
  }
  if (*((char *)this + 31) < 0)
  {
    if (this[2])
    {
      uint64_t v14 = 0;
      CFTypeRef v15 = 0;
      BOOL v7 = (const char *)this[1];
      goto LABEL_15;
    }
LABEL_21:
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    uint64_t v10 = ims::error((uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"No network ID given for carrier ", 32);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v10 + 32))(v10, (char *)this + 8);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_25;
  }
  if (!*((unsigned char *)this + 31)) {
    goto LABEL_21;
  }
  uint64_t v14 = 0;
  CFTypeRef v15 = 0;
  BOOL v7 = (const char *)(this + 1);
LABEL_15:
  uint64_t v14 = &unk_1F20E3908;
  CFTypeRef v15 = CFStringCreateWithCString(v4, v7, 0x600u);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  uint64_t v9 = ims::debug((uint64_t)__p, (uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Setting account ID property to carrier ID: ", 43);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v9 + 32))(v9, (char *)this + 8);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (!CFWriteStreamSetProperty(this[5], (CFStreamPropertyKey)*MEMORY[0x1E4F19068], v15))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    uint64_t v12 = ims::error((uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Failed to set stream property on write stream: kCFStreamPropertyAccountIdentifier", 81);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    ims::CFType::~CFType((ims::CFType *)&v14);
    goto LABEL_37;
  }
  ims::CFType::~CFType((ims::CFType *)&v14);
LABEL_25:
  if (!CFWriteStreamOpen(this[5]))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    uint64_t v8 = ims::error((uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Failed to open write stream", 27);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_28;
  }
  uint64_t v11 = 1;
LABEL_38:
  ims::CFType::~CFType((ims::CFType *)&v20);
  return v11;
}

void sub_1C5215FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)&a10);
  ims::CFType::~CFType((ims::CFType *)&a24);
  _Unwind_Resume(a1);
}

void HttpStreamPair::_handleReadStreamCallback(HttpStreamPair *this, __CFReadStream *a2, void *a3, void *a4)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleReadStreamCallback: Event - ", 34);
    *(unsigned char *)(v7 + 17) = 0;
    uint64_t v8 = toString((uint64_t)a2);
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)v8, v9);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if ((uint64_t)a2 > 7)
    {
      if (a2 == (__CFReadStream *)8)
      {
        CFErrorRef v10 = CFReadStreamCopyError(this);
        (*(void (**)(void, void, CFErrorRef))(*(void *)*a3 + 24))(*a3, 0, v10);
        CFRelease(v10);
        return;
      }
      if (a2 == (__CFReadStream *)16)
      {
        (*(void (**)(void, void))(*(void *)*a3 + 32))(*a3, 0);
        return;
      }
    }
    else
    {
      if (a2 == (__CFReadStream *)1) {
        return;
      }
      if (a2 == (__CFReadStream *)2)
      {
        (*(void (**)(void))(*(void *)*a3 + 8))();
        return;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v15, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::warn((uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Not handling CFStreamEventType - ", 33);
    *(unsigned char *)(v11 + 17) = 0;
    size_t v12 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v8, v12);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
}

void sub_1C5216370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HttpStreamPair::_handleWriteStreamCallback(HttpStreamPair *this, __CFWriteStream *a2, void *a3, void *a4)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleWriteStreamCallback: Event - ", 35);
    *(unsigned char *)(v7 + 17) = 0;
    uint64_t v8 = toString((uint64_t)a2);
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)v8, v9);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if ((uint64_t)a2 > 7)
    {
      if (a2 == (__CFWriteStream *)8)
      {
        CFErrorRef v10 = CFWriteStreamCopyError(this);
        (*(void (**)(void, uint64_t, CFErrorRef))(*(void *)*a3 + 24))(*a3, 1, v10);
        CFRelease(v10);
        return;
      }
      if (a2 == (__CFWriteStream *)16)
      {
        (*(void (**)(void, uint64_t))(*(void *)*a3 + 32))(*a3, 1);
        return;
      }
    }
    else
    {
      if (a2 == (__CFWriteStream *)1) {
        return;
      }
      if (a2 == (__CFWriteStream *)4)
      {
        (*(void (**)(void))(*(void *)*a3 + 16))();
        return;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v15, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::warn((uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Not handling CFStreamEventType - ", 33);
    *(unsigned char *)(v11 + 17) = 0;
    size_t v12 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v8, v12);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
}

void sub_1C5216680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HttpStreamPair::readData(HttpStreamPair *this, void *a2, unint64_t *a3)
{
  CFAllocatorRef v5 = (__CFReadStream *)*((void *)this + 4);
  if (v5)
  {
    if (CFReadStreamHasBytesAvailable(v5))
    {
      buffer = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      std::vector<unsigned char>::vector(&buffer, *a3);
      CFIndex v7 = CFReadStreamRead(*((CFReadStreamRef *)this + 4), buffer, *a3);
      if ((v7 & 0x8000000000000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v17, (char *)kXcapLoggingFacility);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v8 = ims::debug((uint64_t)v17, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"readData: Length - Expected = ", 30);
        *(unsigned char *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)", Actual = ", 11);
        *(unsigned char *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        if (v18 < 0) {
          operator delete(v17[0]);
        }
        size_t v9 = buffer;
        memcpy(a2, buffer, v7);
        if (v7 == *a3) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = 4294957493;
        }
        *a3 = v7;
        if (!v9) {
          return v10;
        }
LABEL_28:
        uint64_t v20 = v9;
        operator delete(v9);
        return v10;
      }
      CFReadStreamGetError(*((CFReadStreamRef *)this + 4));
      std::string::basic_string[abi:ne180100]<0>(v17, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v13 = ims::error((uint64_t)v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Failure to read data from stream. Errorcode: ", 45);
      *(unsigned char *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      uint64_t v10 = 4294957496;
      size_t v9 = buffer;
      if (buffer) {
        goto LABEL_28;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&buffer, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(v17, "");
      uint64_t v12 = ims::debug((uint64_t)&buffer, (uint64_t)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v12 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"readData: No bytes available to be read", 39);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      if (SHIBYTE(v21) < 0) {
        operator delete(buffer);
      }
      *a3 = 0;
      return 4294957493;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&buffer, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v17, "");
    uint64_t v11 = ims::error((uint64_t)&buffer, (uint64_t)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Stream not open for reading: ", 29);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(buffer);
    }
    *a3 = 0;
    return 4294957496;
  }
  return v10;
}

void sub_1C5216AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HttpStreamPair::writeData(HttpStreamPair *this, const UInt8 *a2, CFIndex *a3)
{
  CFAllocatorRef v5 = (__CFWriteStream *)*((void *)this + 5);
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::error((uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Stream not open for writing: ", 29);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    *a3 = 0;
    return 4294957496;
  }
  CFIndex v6 = CFWriteStreamWrite(v5, a2, *a3);
  if (v6 < 0)
  {
    CFWriteStreamGetError(*((CFWriteStreamRef *)this + 5));
    std::string::basic_string[abi:ne180100]<0>(v14, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::error((uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Failed to write data to stream. Errorcode: ", 43);
    *(unsigned char *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    return 4294957496;
  }
  unint64_t v7 = v6;
  std::string::basic_string[abi:ne180100]<0>(v14, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"writeData: Length - Max = ", 26);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)", Actual = ", 11);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  uint64_t result = 0;
  *a3 = v7;
  return result;
}

void sub_1C5216E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *HttpStreamPair::localHostPortInfo@<X0>(HttpStreamPair *this@<X0>, void *a2@<X8>)
{
  return HttpStreamPair::_hostPortInfo(a2, (int (*)(int, sockaddr *, unsigned int *))this, MEMORY[0x1E4F14888]);
}

void *HttpStreamPair::_hostPortInfo(void *this, int (*a2)(int, sockaddr *, unsigned int *), unsigned int (*a3)(void, sockaddr *, int *))
{
  uint64_t v3 = this;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!*((void *)a2 + 4))
  {
    *this = 0;
    this[1] = 0;
    this[2] = 0;
    return this;
  }
  uint64_t v25 = 0;
  long long v23 = 0u;
  memset(v24, 0, sizeof(v24));
  long long v21 = 0u;
  long long v22 = 0u;
  memset(v20, 0, sizeof(v20));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  char v18 = 0;
  CFDataRef v19 = 0;
  CFDataRef v6 = (const __CFData *)CFReadStreamCopyProperty(*((CFReadStreamRef *)a2 + 4), (CFStreamPropertyKey)*MEMORY[0x1E4F1D488]);
  char v18 = &unk_1F20D2EE0;
  CFDataRef v19 = v6;
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&__s, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::warn((uint64_t)&__s, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Cannot fetch transport name/ip - CFReadStreamCopyProperty() failed ", 67);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_7;
  }
  *(_DWORD *)buffer = 0;
  v36.location = 0;
  v36.length = 4;
  CFDataGetBytes(v6, v36, buffer);
  *(void *)&v34.sa_len = 0;
  *(void *)&v34.sa_data[6] = 0;
  int v16 = 16;
  if (a3(*(unsigned int *)buffer, &v34, &v16))
  {
    std::string::basic_string[abi:ne180100]<0>(&__s, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::warn((uint64_t)&__s, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Cannot fetch transport name/ip - getsockname() failed ", 54);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_7:
    *(unsigned char *)(v7 + 17) = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if ((SBYTE7(v27) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    uint64_t v8 = (void *)__s;
    goto LABEL_11;
  }
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long __s = 0u;
  long long v27 = 0u;
  if (!getnameinfo(&v34, 0x10u, (char *)&__s, 0x80u, 0, 0, 10))
  {
    size_t v10 = strlen((const char *)&__s);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&__s, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)":", 1);
    std::ostream::operator<<();
    goto LABEL_18;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v12, "");
  uint64_t v9 = ims::warn((uint64_t)__p, (uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Cannot fetch transport name/ip - getnameinfo() failed ", 54);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if ((v15 & 0x80000000) == 0) {
    goto LABEL_18;
  }
  uint64_t v8 = __p[0];
LABEL_11:
  operator delete(v8);
LABEL_18:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v20 + 8, v3);
  ims::CFType::~CFType((ims::CFType *)&v18);
  *(void *)&v20[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v20 + *(void *)(*(void *)&v20[0] - AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v20[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v22) < 0) {
    operator delete(*((void **)&v21 + 1));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x1C878E270](v24);
}

void sub_1C521737C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)&a23);
  std::ostringstream::~ostringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void *HttpStreamPair::remoteHostPortInfo@<X0>(HttpStreamPair *this@<X0>, void *a2@<X8>)
{
  return HttpStreamPair::_hostPortInfo(a2, (int (*)(int, sockaddr *, unsigned int *))this, MEMORY[0x1E4F14878]);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    CFAllocatorRef v4 = (char *)a1[1];
    CFAllocatorRef v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1C521749C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallMediaStream::~BambiCallMediaStream(BambiCallMediaStream *this)
{
  *(void *)this = &unk_1F20B5BD8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20B5BD8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

void *BambiCallMediaStream::setMediaSessionId(void *this, uint64_t a2)
{
  if (this[4] != a2)
  {
    uint64_t v2 = (uint64_t)this;
    this[4] = a2;
    uint64_t v3 = (*(uint64_t (**)(void *))(*this + 64))(this);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"setMediaSessionId to ", 21);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    this = (void *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
  }
  return this;
}

void *BambiCallMediaStream::logPrefix(BambiCallMediaStream *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"BambiCallMediaStream: ", 22);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void SipUssdDataBody::SipUssdDataBody(SipUssdDataBody *this, const SipUssdData *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1F20B5C60;
  SipUssdData::SipUssdData((SipUssdDataBody *)((char *)this + 32), a2);
}

void sub_1C52176F4(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F20CC498;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void SipUssdData::~SipUssdData(SipUssdData *this)
{
  *(void *)this = &unk_1F20C3FC0;
  uint64_t v2 = (void **)((char *)this + 8);
  *((void *)this + 1) = &unk_1F20C4038;
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  bambi::XmlTreeItem::~XmlTreeItem(v2);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20C3FC0;
  uint64_t v2 = (void **)((char *)this + 8);
  *((void *)this + 1) = &unk_1F20C4038;
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  JUMPOUT(0x1C878E320);
}

void SipUssdDataBody::generateXml(SipUssdDataBody *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v7 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v6 = 0u;
  *(_OWORD *)CFAllocatorRef v4 = 0u;
  memset(v3, 0, sizeof(v3));
  SipUssdData::SipUssdData((SipUssdData *)v3, (SipUssdDataBody *)((char *)this + 32));
  bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)((char *)v3 + 8), 0, 1, a2);
  *(void *)&v3[0] = &unk_1F20C3FC0;
  *((void *)&v3[0] + 1) = &unk_1F20C4038;
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v4[0]);
  }
  bambi::XmlTreeItem::~XmlTreeItem((void **)v3 + 1);
}

void sub_1C5217884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SipUssdDataBody::~SipUssdDataBody(SipUssdDataBody *this)
{
  *(void *)this = &unk_1F20B5C60;
  *((void *)this + 4) = &unk_1F20C3FC0;
  uint64_t v2 = (void **)((char *)this + 40);
  *((void *)this + 5) = &unk_1F20C4038;
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  *(void *)this = &unk_1F20CC498;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20B5C60;
  *((void *)this + 4) = &unk_1F20C3FC0;
  uint64_t v2 = (void **)((char *)this + 40);
  *((void *)this + 5) = &unk_1F20C4038;
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  *(void *)this = &unk_1F20CC498;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1C878E320);
}

uint64_t SipBody::initWithContentTypeHeader()
{
  return 1;
}

void SipUssdDataBody::clone(SipUssdDataBody *this)
{
}

void sub_1C5217AD8(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_1F20CC498;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  MEMORY[0x1C878E320](v1, 0x10B3C40DDEF20B8);
  _Unwind_Resume(a1);
}

void *SipUssdDataBody::contentType(SipUssdDataBody *this)
{
  return &SipUssdDataBody::kContentType;
}

uint64_t SipUssdDataBody::rootItem(SipUssdDataBody *this)
{
  return (uint64_t)this + 32;
}

uint64_t _GLOBAL__sub_I_SipUssdDataBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(SipUssdDataBody::kContentType, "application/vnd.3gpp.ussd+xml");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, SipUssdDataBody::kContentType, &dword_1C51D1000);
}

void SipIPSecTransportGroup::SipTransportPair::deletePair(SipIPSecTransportGroup::SipTransportPair *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void SipTransportGroup::~SipTransportGroup(SipTransportGroup *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 4IMSRegistrationManager::~IMSRegistrationManager((IMSRegistrationManager *)((char *)this - 8)) = a2[5];
  *((void *)this + 10) = &unk_1F20E18C8;
  CFAllocatorRef v5 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  SipTransportInterface::~SipTransportInterface(this, (uint64_t)(a2 + 1));
}

uint64_t SipIPSecTransportGroup::SipIPSecTransportGroup(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1F20B2FA8;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = *a2;
  char v15 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTransportGroup::SipTransportGroup((uint64_t *)a1, (uint64_t *)off_1F20B5F10, &v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  *(void *)a1 = &unk_1F20B5D20;
  *(void *)(a1 + 80) = &unk_1F20B5E80;
  *(void *)(a1 + 216) = &unk_1F20B5EE0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 344));
  *(_WORD *)(a1 + 500) = 0;
  CFAllocatorRef v5 = *(std::__shared_weak_count **)(a1 + 232);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 248);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 264);
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *(void *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 448) = a1 + *(void *)(*(void *)a1 - 48);
  uint64_t v8 = *a2;
  uint64_t v9 = *(std::__shared_weak_count **)(*a2 + 16);
  if (v9)
  {
    size_t v10 = std::__shared_weak_count::lock(v9);
    if (v10) {
      uint64_t v11 = *(void *)(v8 + 8);
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
    size_t v10 = 0;
  }
  if (*(char *)(v11 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 4160), *(void *)(v11 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v11 + 4160);
  }
  std::string::operator=((std::string *)(a1 + 392), (const std::string *)(a1 + 88));
  std::string::operator=((std::string *)(a1 + 416), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return a1;
}

void sub_1C5217EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  SipTimerContainer::~SipTimerContainer(v18);
  long long v21 = (std::__shared_weak_count *)*((void *)v17 + 35);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  long long v22 = (std::__shared_weak_count *)*((void *)v17 + 33);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  long long v23 = (std::__shared_weak_count *)*((void *)v17 + 31);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)v17 + 29);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  SipTransportGroup::~SipTransportGroup(v17, (uint64_t *)off_1F20B5F10);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::~SipIPSecTransportGroup(int8x8_t *this)
{
  *this = (int8x8_t)&unk_1F20B5D20;
  this[10] = (int8x8_t)&unk_1F20B5E80;
  this[27] = (int8x8_t)&unk_1F20B5EE0;
  int8x8_t v2 = this[30];
  if (v2)
  {
    (*(void (**)(int8x8_t))(**(void **)&v2 + 40))(v2);
    uint64_t v3 = (std::__shared_weak_count *)this[31];
    this[30] = 0;
    this[31] = 0;
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  uint64_t v4 = (std::__shared_weak_count *)this[29];
  this[28] = 0;
  this[29] = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  CFAllocatorRef v5 = (std::__shared_weak_count *)this[33];
  this[32] = 0;
  this[33] = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int8x8_t v6 = this[37];
  if (v6) {
    (*(void (**)(int8x8_t))(**(void **)&v6 + 8))(v6);
  }
  this[37] = 0;
  int8x8_t v7 = this[38];
  if (v7) {
    (*(void (**)(int8x8_t))(**(void **)&v7 + 8))(v7);
  }
  this[38] = 0;
  int8x8_t v8 = this[36];
  if (v8) {
    (*(void (**)(int8x8_t))(**(void **)&v8 + 8))(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)this[35];
  this[34] = 0;
  this[35] = 0;
  this[36] = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  int8x8_t v10 = this[39];
  if (v10) {
    (*(void (**)(int8x8_t))(**(void **)&v10 + 8))(v10);
  }
  this[39] = 0;
  int8x8_t v11 = this[40];
  if (v11) {
    (*(void (**)(int8x8_t))(**(void **)&v11 + 8))(v11);
  }
  this[40] = 0;
  int8x8_t v12 = this[41];
  if (v12) {
    (*(void (**)(int8x8_t))(**(void **)&v12 + 8))(v12);
  }
  this[41] = 0;
  SipTimerContainer::cancelTimer(this + 43, (std::string *)"SALifetime");
  SipTimerContainer::~SipTimerContainer((SipTimerContainer *)&this[43]);
  char v13 = (std::__shared_weak_count *)this[35];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)this[33];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  char v15 = (std::__shared_weak_count *)this[31];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  int v16 = (std::__shared_weak_count *)this[29];
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  SipTransportGroup::~SipTransportGroup((SipTransportGroup *)this, (uint64_t *)off_1F20B5F10);
}

{
  uint64_t vars8;

  SipIPSecTransportGroup::~SipIPSecTransportGroup(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipIPSecTransportGroup::~SipIPSecTransportGroup(int8x8_t *this)
{
}

{
  SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 27);
}

{
  uint64_t vars8;

  SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10);
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 27);
  JUMPOUT(0x1C878E320);
}

SipIPSecTransportGroup *SipIPSecTransportGroup::securityDelegate(SipIPSecTransportGroup *this, std::__shared_weak_count *a2)
{
  if (!a2) {
    return 0;
  }
  atomic_fetch_add_explicit(&a2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v4 = std::__shared_weak_count::lock(a2);
  std::__shared_weak_count::__release_weak(a2);
  if (!v4) {
    return 0;
  }
  if (this) {
    this = (SipIPSecTransportGroup *)(*(uint64_t (**)(SipIPSecTransportGroup *))(*(void *)this + 136))(this);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return this;
}

void sub_1C5218360(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL SipIPSecTransportGroup::initialized(SipIPSecTransportGroup *this)
{
  uint64_t v1 = *((void *)this + 37);
  return v1
      && *(_DWORD *)(v1 + 8)
      && *(_DWORD *)(v1 + 12)
      && (uint64_t v2 = *((void *)this + 38)) != 0
      && *(_DWORD *)(v2 + 8)
      && *(_DWORD *)(v2 + 12) != 0;
}

uint64_t ImsResult::operator<<<char [39]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5218438(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [28]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C52184E0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::initialize(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X3>, uint64_t *a4@<X4>, ImsResult *a5@<X8>)
{
  if (!SipIPSecTransportGroup::securityDelegate(*(SipIPSecTransportGroup **)(a1 + 200), *(std::__shared_weak_count **)(a1 + 208)))
  {
    long long v130 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    *(void *)&long long v128 = &unk_1F20B2680;
    *((void *)&v128 + 1) = &_bambiDomain;
    LODWORD(v129) = 1073741827;
    uint64_t v26 = (const std::string *)ImsResult::operator<<<char [25]>((uint64_t)&v128, "no security delegate set");
    ImsResult::ImsResult(a5, v26);
    ImsResult::~ImsResult((ImsResult *)&v128);
    return;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 208);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 200);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int8x8_t v11 = std::__shared_weak_count::lock(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v11 && v10)
    {
      uint64_t v12 = a1 + 80;
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"SipIPSecTransportGroup::initialize()", 36);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v102 = 0u;
      memset(v101, 0, 72);
      uint64_t v14 = *a4;
      char v15 = (std::__shared_weak_count *)a4[1];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v16 = *(std::__shared_weak_count **)(a1 + 208);
      uint64_t v97 = a1 + 80;
      if (v16)
      {
        long long v92 = a5;
        uint64_t v17 = *(void *)(a1 + 200);
        atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        char v18 = std::__shared_weak_count::lock(v16);
        std::__shared_weak_count::__release_weak(v16);
        if (v18)
        {
          uint64_t v94 = v17;
          if (v17)
          {
            uint64_t v91 = v14;
            long long v126 = 0uLL;
            uint64_t v127 = 0;
            long long v88 = v15;
            long long v89 = v11;
            long long v87 = v18;
            std::string::basic_string[abi:ne180100]<0>(&v126, "67A03811-DB0A-594E-C2AE-8B0517EDF26F");
            CFDataRef v19 = *(std::__shared_weak_count **)(a1 + 208);
            if (!v19) {
              goto LABEL_43;
            }
            uint64_t v20 = *(void *)(a1 + 200);
            atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            long long v21 = std::__shared_weak_count::lock(v19);
            std::__shared_weak_count::__release_weak(v19);
            if (!v21) {
              goto LABEL_43;
            }
            if (v20)
            {
              long long v22 = *(std::__shared_weak_count **)(v20 + 16);
              if (v22)
              {
                long long v23 = std::__shared_weak_count::lock(v22);
                if (v23)
                {
                  uint64_t v24 = *(void *)(v20 + 8);
                  if (v24)
                  {
                    int v25 = *(unsigned __int8 *)(v24 + 2681);
                    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
                    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
                    if (v25)
                    {
                      ims::convertBundleIdToUuid(&v128);
                      if (SHIBYTE(v127) < 0) {
                        operator delete((void *)v126);
                      }
                      long long v126 = v128;
                      uint64_t v127 = v129;
                    }
LABEL_43:
                    uint64_t v124 = 0;
                    unint64_t v125 = 0;
                    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 32))(&v124);
                    uint64_t v31 = v17;
                    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v17 + 200))(&v128, v17);
                    uint64_t v32 = v91;
                    a5 = v92;
                    long long v33 = (ImsPrefs *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 184))(v31);
                    UseEphemeralRangeForIPSecKey = (void **)ImsPrefs::getUseEphemeralRangeForIPSecKey(v33);
                    int v96 = ImsPrefs::BOOLValue(v33, UseEphemeralRangeForIPSecKey);
                    uint64_t v35 = a1 + 80;
                    CFRange v36 = (ImsPrefs *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 184))(v31);
                    DefaultIPSecPortKey = (void **)ImsPrefs::getDefaultIPSecPortKey(v36);
                    unsigned __int16 v38 = ImsPrefs::intValue(v36, DefaultIPSecPortKey);
                    uint64_t v122 = 0;
                    std::string v123 = 0;
                    char v95 = (void *)(a1 + 184);
                    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v128, (void *)(a1 + 184));
                    if ((void)v128
                    {
                      uint64_t v122 = v39;
                      std::string v123 = (std::__shared_weak_count *)*((void *)&v128 + 1);
                      uint64_t v40 = (void **)&v128;
                    }
                    else
                    {
                      uint64_t v40 = &v122;
                    }
                    *uint64_t v40 = 0;
                    v40[1] = 0;
                    if (*((void *)&v128 + 1)) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v128 + 1));
                    }
                    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v94 + 176))(&v128, v94);
                    if ((void)v128)
                    {
                      char v41 = v122;
                      if (*((void *)&v128 + 1)) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v128 + 1));
                      }
                      if (v41)
                      {
                        (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)v94 + 176))(v119, v94);
                        uint64_t v42 = *(void *)&v119[0];
                        long long v120 = v41;
                        long long v121 = v123;
                        if (v123) {
                          atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        (*(void (**)(long long *__return_ptr))(*(void *)v42 + 112))(&v128);
                        long long v43 = v128;
                        long long v128 = 0uLL;
                        uint64_t v90 = v43;
                        long long v102 = v43;
                        if (v121) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v121);
                        }
                        if (*((void *)&v119[0] + 1)) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119[0]
                        }
                                                                                   + 1));
                        uint64_t v44 = v90;
                        goto LABEL_63;
                      }
                    }
                    else if (*((void *)&v128 + 1))
                    {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v128 + 1));
                    }
                    uint64_t v44 = 0;
LABEL_63:
                    long long v45 = (ImsPrefs *)(*(uint64_t (**)(uint64_t))(*(void *)v94 + 184))(v94);
                    MaxIPSecTransportRetriesKey = (void **)ImsPrefs::getMaxIPSecTransportRetriesKey(v45);
                    int v47 = ImsPrefs::intValue(v45, MaxIPSecTransportRetriesKey);
                    uint64_t v129 = 0x40000000;
                    long long v130 = 0u;
                    long long v131 = 0u;
                    long long v132 = 0u;
                    *(void *)&long long v128 = &unk_1F20B2680;
                    *((void *)&v128 + 1) = &_bambiDomain;
                    uint64_t v48 = (uint64_t)a3;
                    if (v47 >= 1)
                    {
                      if (v47 >= 100) {
                        int v49 = 100;
                      }
                      else {
                        int v49 = v47;
                      }
                      while (1)
                      {
                        if (!(*(unsigned int (**)(void, void))(**((void **)&v128 + 1) + 24))(*((void *)&v128 + 1), v129))goto LABEL_141; {
                        if (v96)
                        }
                          unsigned __int16 v51 = 0;
                        else {
                          unsigned __int16 v51 = v38;
                        }
                        (*(void (**)(uint64_t, void))(*(void *)v124 + 64))(v124, v51);
                        if (!v44)
                        {
                          long long v112 = 0u;
                          long long v113 = 0u;
                          long long v114 = 0u;
                          v110[0] = &unk_1F20B2680;
                          v110[1] = &_bambiDomain;
                          int v111 = 0x40000000;
                          int v53 = (const std::string *)ImsResult::operator<<<char [28]>((uint64_t)v110, "NetworkManager no available");
                          ImsResult::ImsResult((ImsResult *)v119, v53);
                          goto LABEL_79;
                        }
                        long long v52 = v50[184];
                        if (v52) {
                          break;
                        }
                        long long v52 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
                        v50[184] = (__guard)v52;
                        dispatch_object_t object = v52;
                        if (v52) {
                          goto LABEL_77;
                        }
LABEL_78:
                        v117[0] = &unk_1F20B3050;
                        v117[1] = 0;
                        std::string::basic_string[abi:ne180100]<0>(__p, "");
                        (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t *, dispatch_object_t *, long long *, void, void *, void **, uint64_t))(*(void *)v44 + 16))(v119, v44, &v124, &object, &v126, 0, v117, __p, v48);
LABEL_79:
                        ImsResult::operator=((uint64_t)&v128, (uint64_t)v119);
                        ImsResult::~ImsResult((ImsResult *)v119);
                        if (v44)
                        {
                          if (v116 < 0) {
                            operator delete(__p[0]);
                          }
                          ims::CFType::~CFType((ims::CFType *)v117);
                          if (object) {
                            dispatch_release(object);
                          }
                        }
                        else
                        {
                          ImsResult::~ImsResult((ImsResult *)v110);
                        }
                        if ((*(uint64_t (**)(void, void))(**((void **)&v128 + 1) + 24))(*((void *)&v128 + 1), v129))goto LABEL_140; {
                        uint64_t v54 = v124;
                        }
                        (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)v44 + 64))(v119, v44);
                        uint64_t v55 = (*(uint64_t (**)(void))(**(void **)&v119[0] + 56))(*(void *)&v119[0]);
                        (*(void (**)(uint64_t, uint64_t))(*(void *)v54 + 64))(v54, v55);
                        if (*((void *)&v119[0] + 1)) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119[0]
                        }
                                                                                   + 1));
                        if (v32)
                        {
                          (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)v32 + 136))(v119, v32);
                          if (*(void *)&v119[0])
                          {
                            (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)v32 + 144))(v105, v32);
                            BOOL v56 = *(void *)&v105[0] != 0;
                            if (*((void *)&v105[0] + 1)) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v105[0]
                            }
                                                                                       + 1));
                          }
                          else
                          {
                            BOOL v56 = 0;
                          }
                          if (*((void *)&v119[0] + 1)) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119[0]
                          }
                                                                                     + 1));
                          if (v56)
                          {
                            uint64_t v81 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 64))(v35);
                            (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v81);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v81 + 8), (uint64_t)"using existing transport for IPSec initialization", 49);
                            *(unsigned char *)(v81 + 17) = 0;
                            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                            *(unsigned char *)(v81 + 17) = 0;
                            std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v105, v95);
                            uint64_t v108 = (SipTcpTransport *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 112))(v31);
                            std::allocate_shared[abi:ne180100]<SipUdpTransport,std::allocator<SipUdpTransport>,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,void>((uint64_t *)v105, (uint64_t *)&v108, v119);
                            long long v82 = v119[0];
                            v119[0] = 0uLL;
                            long long v83 = (std::__shared_weak_count *)*((void *)&v103 + 1);
                            uint64_t __stra = v82;
                            long long v103 = v82;
                            if (v83)
                            {
                              std::__shared_weak_count::__release_shared[abi:ne180100](v83);
                              if (*((void *)&v119[0] + 1)) {
                                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119[0]
                              }
                                                                                         + 1));
                            }
                            if (*((void *)&v105[0] + 1)) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v105[0]
                            }
                                                                                       + 1));
                            (*(void (**)(SipTcpTransport **__return_ptr, uint64_t))(*(void *)v32 + 136))(&v108, v32);
                            SipUdpTransport::initialize(__stra, (uint64_t)&v108, (uint64_t)v119);
                            ImsResult::~ImsResult((ImsResult *)v119);
                            if (v109) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](v109);
                            }
                            std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v107, v95);
                            uint64_t v106 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 112))(v31);
                            std::allocate_shared[abi:ne180100]<SipTcpTransport,std::allocator<SipTcpTransport>,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,void>((uint64_t *)&v107, &v106, v105);
                            long long v84 = v105[0];
                            v105[0] = 0uLL;
                            int v85 = (std::__shared_weak_count *)*((void *)&v104 + 1);
                            uint64_t __strb = v84;
                            long long v104 = v84;
                            if (v85)
                            {
                              std::__shared_weak_count::__release_shared[abi:ne180100](v85);
                              if (*((void *)&v105[0] + 1)) {
                                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v105[0]
                              }
                                                                                         + 1));
                            }
                            if (*((void *)&v107 + 1)) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v107
                            }
                                                                                       + 1));
                            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v32 + 144))(&v107, v32);
                            uint64_t v86 = (*(uint64_t (**)(uint64_t))(*(void *)v124 + 56))(v124);
                            SipTcpTransport::initialize(__strb, (uint64_t)&v107, v86, (uint64_t)v105);
                            ImsResult::~ImsResult((ImsResult *)v105);
                            if (*((void *)&v107 + 1)) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v107
                            }
                                                                                       + 1));
                            ImsResult::ImsResult((uint64_t)v101, (uint64_t)&v128);
                            goto LABEL_142;
                          }
                        }
                        if (v96) {
                          unsigned __int16 v57 = 0;
                        }
                        else {
                          unsigned __int16 v57 = v38 + 1;
                        }
                        (*(void (**)(uint64_t, void))(*(void *)v124 + 64))(v124, v57);
                        v105[0] = 0uLL;
                        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v119, v95);
                        uint64_t v108 = (SipTcpTransport *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 112))(v31);
                        std::allocate_shared[abi:ne180100]<SipUdpTransport,std::allocator<SipUdpTransport>,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,void>((uint64_t *)v119, (uint64_t *)&v108, v105);
                        if (*((void *)&v119[0] + 1)) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119[0]
                        }
                                                                                   + 1));
                        SipUdpTransport::initialize(*(SipTransport **)&v105[0], (uint64_t)&v124, (uint64_t)&v126, v48, (uint64_t)v119);
                        ImsResult::operator=((uint64_t)&v128, (uint64_t)v119);
                        ImsResult::~ImsResult((ImsResult *)v119);
                        if ((*(unsigned int (**)(void, void))(**((void **)&v128 + 1) + 24))(*((void *)&v128 + 1), v129))
                        {
                          ImsResult::ImsResult((uint64_t)v101, (uint64_t)&v128);
                          int v58 = 1;
                          goto LABEL_136;
                        }
                        (*(void (**)(_OWORD *__return_ptr))(**(void **)&v105[0] + 16))(v119);
                        uint64_t v59 = *(void *)&v119[0];
                        if (*((void *)&v119[0] + 1)) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119[0]
                        }
                                                                                   + 1));
                        if (v59)
                        {
                          uint64_t v60 = v124;
                          (*(void (**)(_OWORD *__return_ptr))(**(void **)&v105[0] + 16))(v119);
                          uint64_t v61 = (*(uint64_t (**)(void))(**(void **)&v119[0] + 56))(*(void *)&v119[0]);
                          (*(void (**)(uint64_t, uint64_t))(*(void *)v60 + 64))(v60, v61);
                          if (*((void *)&v119[0] + 1)) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119[0]
                          }
                                                                                     + 1));
                        }
                        int v62 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v31 + 16))(v31) + 576);
                        if (v62 < 1)
                        {
                          int v66 = 0;
                        }
                        else
                        {
                          uint64_t v63 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 144))(v31);
                          if (v63)
                          {
                            int v64 = *(_DWORD *)(v63 + 56);
                            uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 64))(v35);
                            (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v65);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)"using MSS ", 10);
                            int v66 = v64 - v62;
                            *(unsigned char *)(v65 + 17) = 0;
                            unint64_t v67 = (unsigned char *)(v65 + 17);
                            std::ostream::operator<<();
                            *(unsigned char *)(v65 + 17) = 0;
                            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                          }
                          else
                          {
                            uint64_t v68 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 64))(v35);
                            (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v68);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v68 + 8), (uint64_t)"layer doesn't have a local interface, so I can't set MSS", 56);
                            *(unsigned char *)(v68 + 17) = 0;
                            unint64_t v67 = (unsigned char *)(v68 + 17);
                            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                            int v66 = 0;
                          }
                          *unint64_t v67 = 0;
                        }
                        (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)v44 + 64))(v119, v44);
                        uint64_t v69 = (*(uint64_t (**)(void))(**(void **)&v119[0] + 56))(*(void *)&v119[0]);
                        uint64_t v93 = v44;
                        if (*((void *)&v119[0] + 1)) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119[0]
                        }
                                                                                   + 1));
                        int v70 = v66;
                        uint64_t v108 = 0;
                        uint64_t v109 = 0;
                        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v107, v95);
                        long long v71 = a5;
                        uint64_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)v94 + 112))(v94);
                        uint64_t v73 = (std::__shared_weak_count *)operator new(0x150uLL);
                        v73->__shared_owners_ = 0;
                        v73->__shared_weak_owners_ = 0;
                        v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B6318;
                        std::vector<std::string>::pointer v74 = (std::__shared_weak_count *)*((void *)&v107 + 1);
                        v119[0] = v107;
                        long long v107 = 0uLL;
                        SipTcpTransport::SipTcpTransport((uint64_t)&v73[1], (uint64_t *)v119, v72, v70);
                        uint64_t v35 = a1 + 80;
                        uint64_t v44 = v93;
                        if (v74) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v74);
                        }
                        uint64_t v108 = (SipTcpTransport *)&v73[1];
                        uint64_t v109 = v73;
                        std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v108, &v73[7].__shared_owners_, (uint64_t)&v73[1]);
                        if (*((void *)&v107 + 1)) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v107
                        }
                                                                                   + 1));
                        SipTcpTransport::initialize(v108, a3, (uint64_t)&v124, (uint64_t)&v126, v69, (uint64_t)v119);
                        uint64_t v32 = v91;
                        a5 = v71;
                        ImsResult::operator=((uint64_t)&v128, (uint64_t)v119);
                        uint64_t v31 = v94;
                        ImsResult::~ImsResult((ImsResult *)v119);
                        uint64_t v48 = (uint64_t)a3;
                        if ((*(unsigned int (**)(void, void))(**((void **)&v128 + 1) + 24))(*((void *)&v128 + 1), v129))
                        {
                          if (v129 == 48 && *((uint64_t **)&v128 + 1) == &_posixDomain)
                          {
                            int v58 = 4;
                            goto LABEL_134;
                          }
                        }
                        else
                        {
                          long long v75 = v105[0];
                          if (*((void *)&v105[0] + 1)) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v105[0] + 1) + 8), 1uLL, memory_order_relaxed);
                          }
                          uint64_t v76 = (std::__shared_weak_count *)*((void *)&v103 + 1);
                          long long v103 = v75;
                          if (v76) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v76);
                          }
                          char v78 = v108;
                          int v77 = v109;
                          if (v109) {
                            atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          uint64_t v79 = (std::__shared_weak_count *)*((void *)&v104 + 1);
                          *(void *)&long long v104 = v78;
                          *((void *)&v104 + 1) = v77;
                          if (v79) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v79);
                          }
                          *(_WORD *)(a1 + 500) = (*(uint64_t (**)(uint64_t))(*(void *)v124 + 56))(v124);
                        }
                        ImsResult::ImsResult((uint64_t)v101, (uint64_t)&v128);
                        int v58 = 1;
LABEL_134:
                        if (v109) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v109);
                        }
LABEL_136:
                        if (*((void *)&v105[0] + 1)) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v105[0]
                        }
                                                                                   + 1));
                        BOOL v80 = v58 == 4;
                        if (!v80) {
                          goto LABEL_142;
                        }
LABEL_140:
                        ++v38;
                        if (!--v49) {
                          goto LABEL_141;
                        }
                      }
                      dispatch_object_t object = (dispatch_object_t)v50[184];
LABEL_77:
                      dispatch_retain(v52);
                      goto LABEL_78;
                    }
LABEL_141:
                    memset((char *)&v101[1] + 8, 0, 48);
                    *(void *)&v101[0] = &unk_1F20B2680;
                    *((void *)&v101[0] + 1) = &_bambiDomain;
                    LODWORD(v101[1]) = 0x40000000;
LABEL_142:
                    ImsResult::~ImsResult((ImsResult *)&v128);
                    if (v123) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v123);
                    }
                    char v15 = v88;
                    int8x8_t v11 = v89;
                    char v18 = v87;
                    if (v125) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v125);
                    }
                    if (SHIBYTE(v127) < 0) {
                      operator delete((void *)v126);
                    }
                    goto LABEL_27;
                  }
                  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
                }
              }
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
            goto LABEL_43;
          }
        }
        a5 = v92;
      }
      else
      {
        char v18 = 0;
      }
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 56))(a1 + 80);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(a1 + 80, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"No Transport Layer to setup transports", 38);
      *(unsigned char *)(v28 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v28 + 17) = 0;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      *(void *)&long long v128 = &unk_1F20B2680;
      *((void *)&v128 + 1) = &_bambiDomain;
      LODWORD(v129) = 0x40000000;
      long long v29 = (const std::string *)ImsResult::operator<<<char [39]>((uint64_t)&v128, "No Transport Layer to setup transports");
      ImsResult::ImsResult((ImsResult *)v101, v29);
      ImsResult::~ImsResult((ImsResult *)&v128);
LABEL_27:
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (!(*(unsigned int (**)(void, void))(**((void **)&v101[0] + 1) + 24))(*((void *)&v101[0] + 1), LODWORD(v101[1])))
      {
        uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v97 + 64))(v97);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v97 + 16))(v97, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"creating temporary inbound SA for local client port", 51);
        *(unsigned char *)(v30 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v30 + 17) = 0;
        operator new();
      }
      SipIPSecTransportGroup::SipTransportPair::deletePair((SipIPSecTransportGroup::SipTransportPair *)&v102);
      ImsResult::ImsResult((uint64_t)a5, (uint64_t)v101);
      ImsResult::~ImsResult((ImsResult *)v101);
      if (*((void *)&v104 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v104 + 1));
      }
      if (*((void *)&v103 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v103 + 1));
      }
      if (*((void *)&v102 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v102 + 1));
      }
      goto LABEL_40;
    }
  }
  else
  {
    int8x8_t v11 = 0;
  }
  long long v130 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  *(void *)&long long v128 = &unk_1F20B2680;
  *((void *)&v128 + 1) = &_bambiDomain;
  LODWORD(v129) = 0x40000000;
  long long v27 = (const std::string *)ImsResult::operator<<<char [19]>((uint64_t)&v128, "no transport layer");
  ImsResult::ImsResult(a5, v27);
  ImsResult::~ImsResult((ImsResult *)&v128);
  if (v11) {
LABEL_40:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
}

void sub_1C521A1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (*(char *)(v37 - 185) < 0) {
    operator delete(*(void **)(v37 - 208));
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  SipIPSecTransportGroup::SipTransportPair::~SipTransportPair((SipIPSecTransportGroup::SipTransportPair *)&a37);
  std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  _Unwind_Resume(a1);
}

void sub_1C521A508()
{
  ImsResult::~ImsResult((ImsResult *)(v1 - 176));
  if (!v0) {
    JUMPOUT(0x1C521A500);
  }
  JUMPOUT(0x1C521A4F8);
}

uint64_t ImsResult::operator<<<char [25]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C521A5A4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [19]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C521A64C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::initializeSecurityClientHeader(SipIPSecTransportGroup *this)
{
  uint64_t v2 = *((void *)this + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 25);
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    size_t v5 = std::__shared_weak_count::lock(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v5)
    {
      if (v4) {
        operator new();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C521AE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
}

void SipIPSecTransportGroup::SipTransportPair::~SipTransportPair(SipIPSecTransportGroup::SipTransportPair *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void SipVectorHeader<SipSecurityMechanism *>::addItem(void *a1, void *a2)
{
  unint64_t v6 = a1[10];
  uint64_t v4 = (uint64_t)(a1 + 10);
  unint64_t v5 = v6;
  int8x8_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *(void *)(v4 - 16);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      char v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v4, v14);
    }
    else {
      char v15 = 0;
    }
    int v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)int v16 = *a2;
    int8x8_t v8 = v16 + 8;
    CFDataRef v19 = (char *)a1[8];
    char v18 = (char *)a1[9];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      char v18 = (char *)*v9;
    }
    a1[8] = v16;
    a1[9] = v8;
    a1[10] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *int8x8_t v7 = *a2;
    int8x8_t v8 = v7 + 1;
  }
  a1[9] = v8;
}

void SipIPSecTransportGroup::updateServiceClass(SipIPSecTransportGroup *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 25);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v4 && v3)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 200))(&v8, v3);
      uint64_t v5 = v8;
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 104;
LABEL_7:
  uint64_t v6 = *((void *)this + 30);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 112))(v6, v5);
  }
  uint64_t v7 = *((void *)this + 32);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v5);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C521B148(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::updateCrlfKeepAliveInterval(SipIPSecTransportGroup *this, __int32 a2, __int32 a3)
{
  uint64_t v3 = (SipTcpTransport *)*((void *)this + 32);
  if (v3) {
    SipTcpTransport::updateCrlfKeepAliveInterval(v3, a2, a3);
  }
}

void SipIPSecTransportGroup::updateCrlfKeepAliveNetwork(SipIPSecTransportGroup *this)
{
  uint64_t v1 = (SipTcpTransport *)*((void *)this + 32);
  if (v1) {
    SipTcpTransport::updateCrlfKeepAliveNetwork(v1);
  }
}

SipTcpTransport *SipIPSecTransportGroup::handleKeepAliveWake(SipIPSecTransportGroup *this)
{
  uint64_t result = (SipTcpTransport *)*((void *)this + 32);
  if (result) {
    return (SipTcpTransport *)SipTcpTransport::handleKeepAliveWake(result);
  }
  return result;
}

void SipIPSecTransportGroup::updateFromSecurityServerHeader(SipIPSecTransportGroup *this@<X0>, const SipSecurityServerHeader *a2@<X1>, ImsResult *a3@<X8>)
{
  if (!a2 || *((void *)a2 + 9) == *((void *)a2 + 8))
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    uint64_t v24 = &unk_1F20B2680;
    int v25 = &_bambiDomain;
    int v26 = 1073741825;
    uint64_t v17 = (ImsResult *)ImsResult::operator<<<char [57]>((uint64_t)&v24, "no security mechanism specified in SecurityServer header");
    char v18 = ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 80), v17);
    ImsResult::ImsResult(a3, (const std::string *)v18);
  }
  else
  {
    uint64_t v5 = SipSecurityServerHeader::bestMatchingMechanism(a2, *((const SipSecurityClientHeader **)this + 40));
    if (!v5)
    {
      long long v27 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      uint64_t v24 = &unk_1F20B2680;
      int v25 = &_bambiDomain;
      int v26 = 1073741825;
      operator new();
    }
    uint64_t v6 = v5;
    if (v7)
    {
      uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)v7 + 32))(v7);
      *((void *)this + 39) = v8;
      uint64_t v9 = *((void *)this + 37);
      *(_DWORD *)(v9 + 12) = SipParameterMap::uintParameter(v8 + 32, (void **)"spi-s", 0);
      uint64_t v10 = *((void *)this + 38);
      *(_DWORD *)(v10 + 12) = SipParameterMap::uintParameter(*((void *)this + 39) + 32, (void **)"spi-c", 0);
      unsigned __int16 v11 = SipParameterMap::uintParameter(*((void *)this + 39) + 32, (void **)"port-s", 0);
      unsigned __int16 v12 = SipParameterMap::uintParameter(*((void *)this + 39) + 32, (void **)"port-c", 0);
      if (*((void *)this + 34))
      {
        unsigned __int16 v13 = v12;
        unint64_t v14 = (SipHop *)*((void *)this + 36);
        if (v14)
        {
          SipHop::setHostPort(v14, v11);
          (*(void (**)(void, void))(**((void **)this + 34) + 64))(*((void *)this + 34), v13);
          SipUdpTransport::setRemoteOutboundAddress(*((void *)this + 28), (uint64_t)this + 272, (uint64_t)&v24);
          ImsResult::~ImsResult((ImsResult *)&v24);
          SipTcpTransport::setRemoteOutboundAddress(*((void *)this + 32), (uint64_t)this + 272, (uint64_t)v23);
          ImsResult::~ImsResult((ImsResult *)v23);
        }
      }
      uint64_t v15 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
      (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"using security mechanism ", 25);
      *(unsigned char *)(v15 + 17) = 0;
      (*(void (**)(void, uint64_t))(**((void **)this + 39) + 16))(*((void *)this + 39), v15);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v15 + 17) = 0;
      uint64_t v16 = *((void *)this + 41);
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      operator new();
    }
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    uint64_t v24 = &unk_1F20B2680;
    int v25 = &_bambiDomain;
    int v26 = 0x40000000;
    uint64_t v19 = ImsResult::operator<<<char [20]>((uint64_t)&v24, "Security mechanism ");
    uint64_t v20 = *(void *)(v19 + 24);
    if (!v20) {
      operator new();
    }
    (*(void (**)(SipSecurityMechanism *, uint64_t))(*(void *)v6 + 16))(v6, v20);
    long long v21 = (ImsResult *)ImsResult::operator<<<char [19]>(v19, "has the wrong type");
    long long v22 = ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 80), v21);
    ImsResult::ImsResult(a3, (const std::string *)v22);
  }
  ImsResult::~ImsResult((ImsResult *)&v24);
}

void sub_1C521B6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  MEMORY[0x1C878E320](v10, 0x10A1C4082A5C483);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [57]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C521B794(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [20]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C521B83C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::addTransportSpecificHeaders(SipIPSecTransportGroup *this, SipMessage *a2)
{
  SipTransportGroup::addAccessNetworkInfoHeader(this, a2);
  SipTransportGroup::addRoutableLocalAddressHeader(this, a2);
  if (a2)
  {
    if (v4)
    {
      size_t v5 = v4;
      SipMessage::removeHeadersWithName(v4, "Security-Verify");
      uint64_t v6 = *((void *)this + 41);
      if (v6)
      {
        uint64_t v7 = (SipHeader *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
        SipMessage::addHeader(v5, v7, 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "sec-agree");
        SipMessage::addRequiredOption(v5, __p);
        if (v9 < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "sec-agree");
        SipMessage::addProxyRequiredOption(v5, __p);
        if (v9 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_1C521B98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsResult::operator<<<char [53]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C521BA30(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [21]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C521BAD8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [40]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C521BB80(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [22]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C521BC28(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [31]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C521BCD0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [32]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C521BD78(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::updateKeysFromAuthResponse(SipIPSecTransportGroup *this@<X0>, const SipAuthResponse *lpsrc@<X1>, uint64_t a3@<X8>)
{
  if (v5)
  {
    uint64_t v6 = v5;
    (*(void (**)(void *))(*(void *)v5 + 32))(v5);
    (*(void (**)(void *))(*(void *)v6 + 32))(v6);
    uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
    (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"updating with keys from AKA response", 36);
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
    (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"auth mechanism wasn't AKA; trying to update with NULL keys",
      58);
  }
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (*((void *)this + 37) && *((void *)this + 38))
  {
    if (SipIPSecTransportGroup::securityDelegate(*((SipIPSecTransportGroup **)this + 25), *((std::__shared_weak_count **)this + 26)))
    {
      uint64_t v8 = *((void *)this + 34);
      if (v8 && *((void *)this + 36))
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v8 + 56))(v8)) {
          goto LABEL_26;
        }
        (*(void (**)(_OWORD *__return_ptr))(**((void **)this + 36) + 48))(v49);
        int v9 = (*(uint64_t (**)(void))(**(void **)&v49[0] + 56))(*(void *)&v49[0]);
        if (*((void *)&v49[0] + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v49[0] + 1));
        }
        if (v9)
        {
          uint64_t v10 = *((void *)this + 37);
          if (v10 && *(_DWORD *)(v10 + 8) && *(_DWORD *)(v10 + 12))
          {
            uint64_t v11 = *((void *)this + 38);
            if (v11 && *(_DWORD *)(v11 + 8) && *(_DWORD *)(v11 + 12))
            {
              if (*((void *)this + 39))
              {
                unsigned __int16 v12 = (char *)this + 80;
                uint64_t v13 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
                (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v13);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"updating SA pair for local client port <-> remote server port", 61);
                *(unsigned char *)(v13 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v13 + 17) = 0;
                memset(v49, 0, 72);
                uint64_t v14 = *((void *)this + 37);
                (*(void (**)(void **__return_ptr, SipIPSecTransportGroup *))(*(void *)this + 184))(&v41, this);
                uint64_t v15 = *((void *)this + 36);
                if (v15)
                {
                  (*(void (**)(uint64_t *__return_ptr))(*(void *)v15 + 48))(&v47);
                }
                else
                {
                  uint64_t v47 = 0;
                  uint64_t v48 = 0;
                }
                SipSecurityAssociationPair::update(v14, (uint64_t)&v41, (uint64_t)&v47, (uint64_t)v49);
                if (v48) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v48);
                }
                if (v42) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v42);
                }
                if ((*(unsigned int (**)(void, void))(**((void **)&v49[0] + 1) + 24))(*((void *)&v49[0] + 1), LODWORD(v49[1])))
                {
                  long long v44 = 0u;
                  long long v45 = 0u;
                  long long v46 = 0u;
                  char v41 = &unk_1F20B2680;
                  uint64_t v42 = (std::__shared_weak_count *)&_bambiDomain;
                  int v43 = 0x40000000;
                  uint64_t v30 = (const std::string *)ImsResult::operator<<<char [32]>((uint64_t)&v41, "unable to update client SA pair");
                  ims::result::resultWithCause(v30, (const ImsResult *)v49, a3);
                }
                uint64_t v31 = (*(uint64_t (**)(char *))(*(void *)v12 + 64))((char *)this + 80);
                (*(void (**)(char *, uint64_t))(*(void *)v12 + 16))((char *)this + 80, v31);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"updating SA pair for local server port <-> remote client port", 61);
                *(unsigned char *)(v31 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v31 + 17) = 0;
                uint64_t v32 = *((void *)this + 38);
                (*(void (**)(uint64_t *__return_ptr, SipIPSecTransportGroup *))(*(void *)this + 192))(&v47, this);
                long long v33 = (std::__shared_weak_count *)*((void *)this + 35);
                uint64_t v39 = *((void *)this + 34);
                uint64_t v40 = v33;
                if (v33) {
                  atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                SipSecurityAssociationPair::update(v32, (uint64_t)&v47, (uint64_t)&v39, (uint64_t)&v41);
                ImsResult::operator=((uint64_t)v49, (uint64_t)&v41);
                ImsResult::~ImsResult((ImsResult *)&v41);
                if (v40) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
                }
                if (v48) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v48);
                }
                if ((*(unsigned int (**)(void, void))(**((void **)&v49[0] + 1) + 24))(*((void *)&v49[0] + 1), LODWORD(v49[1])))
                {
                  long long v44 = 0u;
                  long long v45 = 0u;
                  long long v46 = 0u;
                  char v41 = &unk_1F20B2680;
                  uint64_t v42 = (std::__shared_weak_count *)&_bambiDomain;
                  int v43 = 0x40000000;
                  sockaddr v34 = (const std::string *)ImsResult::operator<<<char [32]>((uint64_t)&v41, "unable to update server SA pair");
                  ims::result::resultWithCause(v34, (const ImsResult *)v49, a3);
                }
                uint64_t v35 = SipIPSecTransportGroup::securityDelegate(*((SipIPSecTransportGroup **)this + 25), *((std::__shared_weak_count **)this + 26));
                (*(void (**)(SipIPSecTransportGroup *))(*(void *)v35 + 48))(v35);
                uint64_t v36 = (*(uint64_t (**)(char *))(*(void *)v12 + 64))((char *)this + 80);
                (*(void (**)(char *, uint64_t))(*(void *)v12 + 16))((char *)this + 80, v36);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"initialized successfully", 24);
                *(unsigned char *)(v36 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v36 + 17) = 0;
                uint64_t v37 = (*(uint64_t (**)(char *))(*(void *)v12 + 64))((char *)this + 80);
                (*(void (**)(char *, uint64_t))(*(void *)v12 + 16))((char *)this + 80, v37);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"client SA pair: ", 16);
                *(unsigned char *)(v37 + 17) = 0;
                (*(void (**)(void, uint64_t))(**((void **)this + 37) + 16))(*((void *)this + 37), v37);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v37 + 17) = 0;
                uint64_t v38 = (*(uint64_t (**)(char *))(*(void *)v12 + 64))((char *)this + 80);
                (*(void (**)(char *, uint64_t))(*(void *)v12 + 16))((char *)this + 80, v38);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"server SA pair: ", 16);
                *(unsigned char *)(v38 + 17) = 0;
                (*(void (**)(void, uint64_t))(**((void **)this + 38) + 16))(*((void *)this + 38), v38);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v38 + 17) = 0;
                *(_OWORD *)(a3 + 24) = 0u;
                *(_OWORD *)(a3 + 40) = 0u;
                *(_OWORD *)(a3 + 56) = 0u;
                *(void *)a3 = &unk_1F20B2680;
                *(void *)(a3 + 8) = &_bambiDomain;
                *(_DWORD *)(a3 + 16) = 0;
              }
              else
              {
                memset((char *)&v49[1] + 8, 0, 48);
                *(void *)&v49[0] = &unk_1F20B2680;
                *((void *)&v49[0] + 1) = &_bambiDomain;
                LODWORD(v49[1]) = 1073741827;
                long long v28 = (ImsResult *)ImsResult::operator<<<char [22]>((uint64_t)v49, "No Security Mechanism");
                long long v29 = ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 80), v28);
                ImsResult::ImsResult((ImsResult *)a3, (const std::string *)v29);
              }
            }
            else
            {
              memset((char *)&v49[1] + 8, 0, 48);
              *(void *)&v49[0] = &unk_1F20B2680;
              *((void *)&v49[0] + 1) = &_bambiDomain;
              LODWORD(v49[1]) = 1073741827;
              int v26 = (ImsResult *)ImsResult::operator<<<char [31]>((uint64_t)v49, "server SA pair not initialized");
              long long v27 = ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 80), v26);
              ImsResult::ImsResult((ImsResult *)a3, (const std::string *)v27);
            }
          }
          else
          {
            memset((char *)&v49[1] + 8, 0, 48);
            *(void *)&v49[0] = &unk_1F20B2680;
            *((void *)&v49[0] + 1) = &_bambiDomain;
            LODWORD(v49[1]) = 1073741827;
            uint64_t v24 = (ImsResult *)ImsResult::operator<<<char [31]>((uint64_t)v49, "client SA pair not initialized");
            int v25 = ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 80), v24);
            ImsResult::ImsResult((ImsResult *)a3, (const std::string *)v25);
          }
        }
        else
        {
LABEL_26:
          memset((char *)&v49[1] + 8, 0, 48);
          *(void *)&v49[0] = &unk_1F20B2680;
          *((void *)&v49[0] + 1) = &_bambiDomain;
          LODWORD(v49[1]) = 1073741827;
          long long v22 = (ImsResult *)ImsResult::operator<<<char [22]>((uint64_t)v49, "ports not initialized");
          long long v23 = ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 80), v22);
          ImsResult::ImsResult((ImsResult *)a3, (const std::string *)v23);
        }
      }
      else
      {
        memset((char *)&v49[1] + 8, 0, 48);
        *(void *)&v49[0] = &unk_1F20B2680;
        *((void *)&v49[0] + 1) = &_bambiDomain;
        LODWORD(v49[1]) = 1073741827;
        char v18 = (ImsResult *)ImsResult::operator<<<char [40]>((uint64_t)v49, "client/server addresses not initialized");
        uint64_t v19 = ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 80), v18);
        ImsResult::ImsResult((ImsResult *)a3, (const std::string *)v19);
      }
    }
    else
    {
      memset((char *)&v49[1] + 8, 0, 48);
      *(void *)&v49[0] = &unk_1F20B2680;
      *((void *)&v49[0] + 1) = &_bambiDomain;
      LODWORD(v49[1]) = 1073741827;
      uint64_t v20 = (ImsResult *)ImsResult::operator<<<char [21]>((uint64_t)v49, "no security delegate");
      long long v21 = ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 80), v20);
      ImsResult::ImsResult((ImsResult *)a3, (const std::string *)v21);
    }
  }
  else
  {
    memset((char *)&v49[1] + 8, 0, 48);
    *(void *)&v49[0] = &unk_1F20B2680;
    *((void *)&v49[0] + 1) = &_bambiDomain;
    LODWORD(v49[1]) = 1073741826;
    uint64_t v16 = (ImsResult *)ImsResult::operator<<<char [53]>((uint64_t)v49, "updateKeys called on an uninitalized transport group");
    uint64_t v17 = ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 80), v16);
    ImsResult::ImsResult((ImsResult *)a3, (const std::string *)v17);
  }
  ImsResult::~ImsResult((ImsResult *)v49);
}

void sub_1C521CA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult((ImsResult *)va1);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::processMessageFromTransport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t *a8)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1) & 1) == 0)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 32))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"not initialized.  Rejecting incoming message from ", 50);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(void, uint64_t))(*(void *)*a6 + 40))(*a6, v15);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
  }
  if (!*(void *)(a1 + 272))
  {
    uint64_t v23 = *(void *)(a1 + 80);
    uint64_t v22 = a1 + 80;
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(v23 + 32))(v22);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"no remote client address specified.  Rejecting incoming message from ", 69);
    *(unsigned char *)(v24 + 17) = 0;
    (*(void (**)(void, uint64_t))(*(void *)*a6 + 40))(*a6, v24);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v24 + 17) = 0;
    return;
  }
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 208);
  if (v16)
  {
    uint64_t v17 = *(void *)(a1 + 200);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v18 = std::__shared_weak_count::lock(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v18 && v17)
    {
      uint64_t v19 = *a6;
      uint64_t v20 = *(std::__shared_weak_count **)(a1 + 280);
      uint64_t v39 = *(void *)(a1 + 272);
      uint64_t v40 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v19 + 104))(v19, &v39, 1))
      {
        int v21 = 0;
      }
      else if (*a8)
      {
        uint64_t v28 = *a6;
        uint64_t v29 = *(void *)(a1 + 288);
        if (v29)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v29 + 48))(&v37);
        }
        else
        {
          uint64_t v37 = 0;
          uint64_t v38 = 0;
        }
        int v21 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v28 + 104))(v28, &v37, 1) ^ 1;
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
      }
      else
      {
        int v21 = 1;
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      if (v21)
      {
        uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 32))(a1 + 80);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"rejecting incoming message from ", 32);
        *(unsigned char *)(v30 + 17) = 0;
        (*(void (**)(void, uint64_t))(*(void *)*a6 + 40))(*a6, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)".  Should be from ", 18);
        *(unsigned char *)(v30 + 17) = 0;
        uint64_t v31 = *(void *)(a1 + 272);
        uint64_t v32 = *(std::__shared_weak_count **)(a1 + 280);
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 40))(v31, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)" or TCP connection from ", 24);
        *(unsigned char *)(v30 + 17) = 0;
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 288) + 48))(&v39);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 40))(v39, v30);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v30 + 17) = 0;
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
      }
      else
      {
        ++*(_DWORD *)(a1 + 496);
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v36, (void *)(a1 + 184));
        long long v33 = (std::__shared_weak_count *)a8[1];
        uint64_t v34 = *a8;
        uint64_t v35 = v33;
        if (v33) {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, void *, uint64_t *))(*(void *)v17 + 128))(v17, a2, a3, a4, a5, a6, v36, &v34);
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
        uint64_t v32 = (std::__shared_weak_count *)v36[1];
      }
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      goto LABEL_36;
    }
  }
  else
  {
    char v18 = 0;
  }
  uint64_t v26 = *(void *)(a1 + 80);
  uint64_t v25 = a1 + 80;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(v26 + 56))(v25);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"no transport layer.  Rejecting incoming message from ", 53);
  *(unsigned char *)(v27 + 17) = 0;
  (*(void (**)(void, uint64_t))(*(void *)*a6 + 40))(*a6, v27);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v27 + 17) = 0;
  if (v18) {
LABEL_36:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
}

void sub_1C521D18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

uint64_t SipIPSecTransportGroup::processDataFromSocket(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a1 + 80;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"received ", 9);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" bytes from ", 12);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(void, uint64_t))(*(void *)*a4 + 40))(*a4, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" on outgoing SA socket.  Ignoring.", 34);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  return result;
}

uint64_t non-virtual thunk to'SipIPSecTransportGroup::processDataFromSocket(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return SipIPSecTransportGroup::processDataFromSocket(a1 - 216, a2, a3, a4);
}

void SipIPSecTransportGroup::sendData(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X5>, ImsResult *a7@<X8>)
{
  if (((*(uint64_t (**)(void *))(*a1 + 176))(a1) & 1) == 0)
  {
    memset((char *)&v91[1] + 8, 0, 48);
    *(void *)&v91[0] = &unk_1F20B2680;
    *((void *)&v91[0] + 1) = &_bambiDomain;
    LODWORD(v91[1]) = 1073741827;
    uint64_t v16 = (ImsResult *)ImsResult::operator<<<char [38]>((uint64_t)v91, "sendData() called on uninitialized SA");
    uint64_t v17 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 10), v16);
    ImsResult::ImsResult(a7, (const std::string *)v17);
LABEL_39:
    ImsResult::~ImsResult((ImsResult *)v91);
    return;
  }
  uint64_t v14 = *a5;
  uint64_t v15 = a1[36];
  if (v15) {
    (*(void (**)(_OWORD *__return_ptr))(*(void *)v15 + 48))(v91);
  }
  else {
    v91[0] = 0uLL;
  }
  if ((*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(void *)v14 + 104))(v14, v91, 1))
  {
    int v18 = 0;
  }
  else if (a6)
  {
    uint64_t v19 = *a5;
    uint64_t v20 = (std::__shared_weak_count *)a1[35];
    long long v83 = (void *)a1[34];
    long long v84 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v18 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v19 + 104))(v19, &v83, 1) ^ 1;
    if (v84) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v84);
    }
  }
  else
  {
    int v18 = 1;
  }
  if (*((void *)&v91[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v91[0] + 1));
  }
  if (v18)
  {
    memset((char *)&v91[1] + 8, 0, 48);
    *(void *)&v91[0] = &unk_1F20B2680;
    *((void *)&v91[0] + 1) = &_bambiDomain;
    LODWORD(v91[1]) = 1073741825;
    uint64_t v21 = ImsResult::operator<<<char [49]>((uint64_t)v91, "remote address for sendData does not match (got ");
    uint64_t v22 = ImsResult::operator<<<std::shared_ptr<IpAddress>>(v21, a5);
    uint64_t v23 = ImsResult::operator<<<char [12]>(v22, ", expected ");
    uint64_t v24 = a1[36];
    if (v24)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v24 + 48))(&v83);
    }
    else
    {
      long long v83 = 0;
      long long v84 = 0;
    }
    uint64_t v31 = ImsResult::operator<<<std::shared_ptr<IpAddress>>(v23, &v83);
    uint64_t v32 = ImsResult::operator<<<char [23]>(v31, " or TCP connection to ");
    long long v33 = (std::__shared_weak_count *)a1[35];
    uint64_t v89 = a1[34];
    uint64_t v90 = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v34 = (ImsResult *)ImsResult::operator<<<std::shared_ptr<IpAddress>>(v32, &v89);
    uint64_t v35 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 10), v34);
    ImsResult::ImsResult(a7, (const std::string *)v35);
    if (v90) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v90);
    }
    uint64_t v36 = v84;
    if (!v84) {
      goto LABEL_39;
    }
LABEL_35:
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    goto LABEL_39;
  }
  uint64_t v25 = *(unsigned __int8 *)(a4 + 23);
  size_t v26 = *(void *)(a4 + 8);
  if ((v25 & 0x80u) == 0) {
    uint64_t v27 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v27 = *(void *)(a4 + 8);
  }
  if (v27 != 3) {
    goto LABEL_38;
  }
  if ((v25 & 0x80) == 0)
  {
    if (*(unsigned char *)(a4 + 23))
    {
      uint64_t v28 = &SipTransport::kTransportUDP;
      uint64_t v29 = (unsigned __int8 *)a4;
      uint64_t v30 = *(unsigned __int8 *)(a4 + 23);
      while (*v29 == *v28)
      {
        ++v29;
        ++v28;
        if (!--v30) {
          goto LABEL_41;
        }
      }
      unsigned __int16 v51 = &SipTransport::kTransportTCP;
      long long v52 = (unsigned __int8 *)a4;
      while (*v52 == *v51)
      {
        ++v52;
        ++v51;
        if (!--v25) {
          goto LABEL_53;
        }
      }
      goto LABEL_38;
    }
LABEL_41:
    if (a6 && *a6)
    {
      memset((char *)&v91[1] + 8, 0, 48);
      *(void *)&v91[0] = &unk_1F20B2680;
      *((void *)&v91[0] + 1) = &_bambiDomain;
      LODWORD(v91[1]) = 1073741825;
      char v41 = (ImsResult *)ImsResult::operator<<<char [53]>((uint64_t)v91, "UDP transport specified, but TCP connection provided");
      uint64_t v42 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 10), v41);
      ImsResult::ImsResult(a7, (const std::string *)v42);
      goto LABEL_39;
    }
    int v43 = (ImsLogContainer *)(a1 + 10);
    uint64_t v44 = (*(uint64_t (**)(void *))(a1[10] + 64))(a1 + 10);
    (*(void (**)(void *, uint64_t))(a1[10] + 16))(a1 + 10, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"sending data with client outbound SPI ", 38);
    *(unsigned char *)(v44 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v44 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v44 + 17) = 0;
    uint64_t v45 = *(void *)(v44 + 8) + *(void *)(**(void **)(v44 + 8) - 24);
    *(_DWORD *)(v45 + 8) = *(_DWORD *)(v45 + 8) & 0xFFFFFFB5 | 8;
    *(unsigned char *)(v44 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v44 + 17) = 0;
    long long v46 = *(void **)(v44 + 8);
    *(_DWORD *)((char *)v46 + *(void *)(*v46 - 24) + 8) = *(_DWORD *)((unsigned char *)v46 + *(void *)(*v46 - 24) + 8) & 0xFFFFFFB5 | 2;
    *(unsigned char *)(v44 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)")", 1);
    *(unsigned char *)(v44 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v44 + 17) = 0;
    memset(v91, 0, 72);
    uint64_t v47 = a1[30];
    (*(void (**)(void **__return_ptr))(*(void *)a1[36] + 48))(&v83);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, void **))(*(void *)v47 + 32))(v91, v47, a2, a3, &v83);
    if (v84) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v84);
    }
    uint64_t v48 = (std::__shared_weak_count *)a1[26];
    if (v48)
    {
      uint64_t v49 = a1[25];
      atomic_fetch_add_explicit(&v48->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      long long v50 = std::__shared_weak_count::lock(v48);
      if (!v50) {
        uint64_t v49 = 0;
      }
      std::__shared_weak_count::__release_weak(v48);
    }
    else
    {
      uint64_t v49 = 0;
      long long v50 = 0;
    }
    if (LODWORD(v91[1]) == 51 && *((uint64_t **)&v91[0] + 1) == &_posixDomain)
    {
      if (v49)
      {
        uint64_t v63 = (ImsPrefs *)(*(uint64_t (**)(uint64_t))(*(void *)v49 + 184))(v49);
        IgnoreNetworkUnreachableErrorsKey = (void **)ImsPrefs::getIgnoreNetworkUnreachableErrorsKey(v63);
        if (ImsPrefs::BOOLValue(v63, IgnoreNetworkUnreachableErrorsKey))
        {
          uint64_t v65 = (*(uint64_t (**)(ImsLogContainer *))(*(void *)v43 + 32))(v43);
          (*(void (**)(ImsLogContainer *, uint64_t))(*(void *)v43 + 16))(v43, v65);
          int v66 = (unsigned char *)ImsOutStream::operator<<(v65, "Ignoring network unreachable error");
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v66[17] = 0;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          long long v83 = &unk_1F20B2680;
          long long v84 = (std::__shared_weak_count *)&_bambiDomain;
          int v85 = 0;
          ImsResult::operator=((uint64_t)v91, (uint64_t)&v83);
          ImsResult::~ImsResult((ImsResult *)&v83);
        }
      }
    }
    unint64_t v67 = ImsLogContainer::logResult(v43, (ImsResult *)v91);
    ImsResult::ImsResult(a7, (const std::string *)v67);
    if (!v50) {
      goto LABEL_39;
    }
    uint64_t v36 = v50;
    goto LABEL_35;
  }
  uint64_t v37 = *(const void **)a4;
  if (!memcmp(*(const void **)a4, &SipTransport::kTransportUDP, *(void *)(a4 + 8))) {
    goto LABEL_41;
  }
  if (memcmp(v37, &SipTransport::kTransportTCP, v26))
  {
LABEL_38:
    memset((char *)&v91[1] + 8, 0, 48);
    *(void *)&v91[0] = &unk_1F20B2680;
    *((void *)&v91[0] + 1) = &_bambiDomain;
    LODWORD(v91[1]) = 1073741825;
    uint64_t v38 = ImsResult::operator<<<char [24]>((uint64_t)v91, "unknown transport type ");
    uint64_t v39 = (ImsResult *)ImsResult::operator<<<std::string>(v38, a4);
    uint64_t v40 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 10), v39);
    ImsResult::ImsResult(a7, (const std::string *)v40);
    goto LABEL_39;
  }
LABEL_53:
  if (a6 && (uint64_t v53 = *a6) != 0)
  {
    uint64_t v54 = (std::__shared_weak_count *)a6[1];
    if (v54) {
      atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(_OWORD *__return_ptr))(**(void **)(v53 + 280) + 136))(v91);
    int v55 = (*(uint64_t (**)(void))(**(void **)&v91[0] + 56))(*(void *)&v91[0]);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 184))(&v83, a1);
    int v56 = (*(uint64_t (**)(void *))(*(void *)v83 + 56))(v83);
    if (v84) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v84);
    }
    if (*((void *)&v91[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v91[0] + 1));
    }
    if (v55 == v56)
    {
      uint64_t v57 = (*(uint64_t (**)(void *))(a1[10] + 64))(a1 + 10);
      (*(void (**)(void *, uint64_t))(a1[10] + 16))(a1 + 10, v57);
      uint64_t v58 = ImsOutStream::operator<<(v57, "sending data with existing connection using client outbound SPI ");
      std::ostream::operator<<();
      *(unsigned char *)(v58 + 17) = 0;
      uint64_t v59 = ImsOutStream::operator<<(v58, " (");
      uint64_t v60 = *(void *)(v59 + 8) + *(void *)(**(void **)(v59 + 8) - 24);
      *(_DWORD *)(v60 + 8) = *(_DWORD *)(v60 + 8) & 0xFFFFFFB5 | 8;
      *(unsigned char *)(v59 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v59 + 17) = 0;
      uint64_t v61 = *(void *)(v59 + 8) + *(void *)(**(void **)(v59 + 8) - 24);
      *(_DWORD *)(v61 + 8) = *(_DWORD *)(v61 + 8) & 0xFFFFFFB5 | 2;
      *(unsigned char *)(v59 + 17) = 0;
      int v62 = (unsigned char *)ImsOutStream::operator<<(v59, ")");
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      (*(void (**)(_OWORD *__return_ptr))(**(void **)(v53 + 280) + 136))(v91);
      int v71 = (*(uint64_t (**)(void))(**(void **)&v91[0] + 56))(*(void *)&v91[0]);
      (*(void (**)(void **__return_ptr, void *))(*a1 + 192))(&v83, a1);
      int v72 = (*(uint64_t (**)(void *))(*(void *)v83 + 56))(v83);
      if (v84) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v84);
      }
      if (*((void *)&v91[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v91[0] + 1));
      }
      std::vector<std::string>::pointer v74 = a1 + 10;
      uint64_t v73 = a1[10];
      if (v71 == v72)
      {
        uint64_t v75 = (*(uint64_t (**)(void *))(v73 + 64))(a1 + 10);
        (*(void (**)(void *, uint64_t))(*v74 + 16))(a1 + 10, v75);
        uint64_t v76 = ImsOutStream::operator<<(v75, "sending data with existing connection using server outbound SPI ");
        std::ostream::operator<<();
        *(unsigned char *)(v76 + 17) = 0;
        uint64_t v77 = ImsOutStream::operator<<(v76, " (");
        uint64_t v78 = *(void *)(v77 + 8) + *(void *)(**(void **)(v77 + 8) - 24);
        *(_DWORD *)(v78 + 8) = *(_DWORD *)(v78 + 8) & 0xFFFFFFB5 | 8;
        *(unsigned char *)(v77 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v77 + 17) = 0;
        uint64_t v79 = *(void *)(v77 + 8) + *(void *)(**(void **)(v77 + 8) - 24);
        *(_DWORD *)(v79 + 8) = *(_DWORD *)(v79 + 8) & 0xFFFFFFB5 | 2;
        *(unsigned char *)(v77 + 17) = 0;
        int v62 = (unsigned char *)ImsOutStream::operator<<(v77, ")");
      }
      else
      {
        uint64_t v80 = (*(uint64_t (**)(void *))(v73 + 56))(a1 + 10);
        (*(void (**)(void *, uint64_t))(*v74 + 16))(a1 + 10, v80);
        uint64_t v81 = ImsOutStream::operator<<(v80, "I don't know which SPI will be used for ");
        int v62 = (unsigned char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*a6 + 104))(*a6, v81);
      }
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    v62[17] = 0;
    if (v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
    }
  }
  else
  {
    uint64_t v68 = (*(uint64_t (**)(void *))(a1[10] + 64))(a1 + 10);
    (*(void (**)(void *, uint64_t))(a1[10] + 16))(a1 + 10, v68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v68 + 8), (uint64_t)"sending data with client outbound SPI ", 38);
    *(unsigned char *)(v68 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v68 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v68 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v68 + 17) = 0;
    uint64_t v69 = *(void *)(v68 + 8) + *(void *)(**(void **)(v68 + 8) - 24);
    *(_DWORD *)(v69 + 8) = *(_DWORD *)(v69 + 8) & 0xFFFFFFB5 | 8;
    *(unsigned char *)(v68 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v68 + 17) = 0;
    int v70 = *(void **)(v68 + 8);
    *(_DWORD *)((char *)v70 + *(void *)(*v70 - 24) + 8) = *(_DWORD *)((unsigned char *)v70 + *(void *)(*v70 - 24) + 8) & 0xFFFFFFB5 | 2;
    *(unsigned char *)(v68 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)")", 1);
    *(unsigned char *)(v68 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v68 + 17) = 0;
  }
  uint64_t v82 = a1[32];
  (*(void (**)(void **__return_ptr))(*(void *)a1[36] + 48))(&v83);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, void **, void *))(*(void *)v82 + 32))(v91, v82, a2, a3, &v83, a6);
  ImsLogContainer::logResult((uint64_t)(a1 + 10), (uint64_t)v91, (uint64_t)a7);
  ImsResult::~ImsResult((ImsResult *)v91);
  if (v84) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v84);
  }
}

void sub_1C521E300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,std::__shared_weak_count *a22)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsResult::operator<<<char [38]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C521E48C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [49]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C521E534(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<std::shared_ptr<IpAddress>>(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    operator new();
  }
  (*(void (**)(void, uint64_t))(*(void *)*a2 + 40))(*a2, v3);
  return a1;
}

void sub_1C521E5E8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [12]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C521E690(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [23]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C521E738(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [24]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C521E7E0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<std::string>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    operator new();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 32))(v3, a2);
  return a1;
}

void sub_1C521E894(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t SipIPSecTransportGroup::localServerAddress@<X0>(SipIPSecTransportGroup *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 28);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t SipIPSecTransportGroup::localClientAddress@<X0>(SipIPSecTransportGroup *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 30);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t SipIPSecTransportGroup::remoteServerUri(SipIPSecTransportGroup *this)
{
  return *((void *)this + 36);
}

void SipIPSecTransportGroup::updateExpiration(SipIPSecTransportGroup *this, unsigned int a2)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  time_t v3 = time(0) + a2;
  if (*((void *)this + 42) < v3)
  {
    uint64_t v5 = *((void *)this + 23);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)this + 42) = v3;
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      *((void *)this + 42) = v3;
    }
    uint64_t v6 = operator new(0x20uLL);
    *uint64_t v6 = &unk_1F20B6248;
    v6[1] = this;
    uint64_t v6[2] = v5;
    uint64_t v6[3] = v4;
    _OWORD v9[3] = v6;
    SipTimerContainer::startTimer((int8x8_t *)this + 43, (uint64_t)"SALifetime");
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v9);
    uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
    (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"new expiration is ", 18);
    *(unsigned char *)(v7 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 42), v7, v8);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1C521EAF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::handleTimer(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 80);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
  (*(void (**)(void *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"expiration timer fired.  Telling my owner.", 42);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, v2 + 13);
  if (lpsrc
  {
    uint64_t v11 = v4;
    uint64_t v12 = v10;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v11;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v6 = *(void *)(a1 + 488);
  if (v6 && v11)
  {
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 16))(v6, &v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1C521ED00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipIPSecTransportGroup::loggableName@<X0>(SipIPSecTransportGroup *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v38 = 0;
  long long v36 = 0u;
  memset(v37, 0, sizeof(v37));
  *(_OWORD *)uint64_t v34 = 0u;
  long long v35 = 0u;
  memset(v33, 0, sizeof(v33));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v33);
  (*(void (**)(std::string *__return_ptr, SipIPSecTransportGroup *))(*(void *)this + 192))(&__p, this);
  if (__p.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(uint64_t *__return_ptr, SipIPSecTransportGroup *))(*(void *)this + 192))(&v31, this);
    (*(void (**)(uint64_t))(*(void *)v31 + 56))(v31);
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  (*(void (**)(std::string *__return_ptr, SipIPSecTransportGroup *))(*(void *)this + 184))(&__p, this);
  if (__p.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(uint64_t *__return_ptr, SipIPSecTransportGroup *))(*(void *)this + 184))(&v31, this);
    (*(void (**)(uint64_t))(*(void *)v31 + 56))(v31);
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  uint64_t v4 = *((void *)this + 36);
  if (v4)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v4 + 48))(&__p);
    if (__p.__r_.__value_.__r.__words[0])
    {
      uint64_t v5 = *((void *)this + 36);
      if (v5)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 48))(&v31);
        uint64_t v5 = v31;
      }
      else
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v5 + 56))(v5);
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
    }
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  uint64_t v6 = *((void *)this + 34);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    uint64_t v8 = *((void *)this + 34);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 35);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t))(*(void *)v8 + 56))(v8);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (v7) {
      goto LABEL_30;
    }
  }
  else if (v7)
  {
LABEL_30:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"IPSecTransport [", 16);
  uint64_t v10 = *((void *)this + 37);
  if (!v10) {
    goto LABEL_45;
  }
  uint64_t v11 = *(unsigned __int8 *)(v10 + 79);
  if (*(char *)(v10 + 79) < 0)
  {
    if (!*(void *)(v10 + 64)) {
      goto LABEL_45;
    }
  }
  else if (!*(unsigned char *)(v10 + 79))
  {
    goto LABEL_45;
  }
  uint64_t v12 = v10 + 56;
  uint64_t v14 = *(void *)(v10 + 56);
  uint64_t v13 = *(void *)(v10 + 64);
  if ((v11 & 0x80u) == 0) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = v14;
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v16 = v11;
  }
  else {
    uint64_t v16 = v13;
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
LABEL_45:
  int v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" --> ", 5);
  uint64_t v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", ", 2);
  uint64_t v20 = *((void *)this + 38);
  if (!v20) {
    goto LABEL_57;
  }
  uint64_t v21 = *(unsigned __int8 *)(v20 + 79);
  if (*(char *)(v20 + 79) < 0)
  {
    if (!*(void *)(v20 + 64)) {
      goto LABEL_57;
    }
  }
  else if (!*(unsigned char *)(v20 + 79))
  {
    goto LABEL_57;
  }
  uint64_t v22 = v20 + 56;
  uint64_t v24 = *(void *)(v20 + 56);
  uint64_t v23 = *(void *)(v20 + 64);
  if ((v21 & 0x80u) == 0) {
    uint64_t v25 = v22;
  }
  else {
    uint64_t v25 = v24;
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v26 = v21;
  }
  else {
    uint64_t v26 = v23;
  }
  uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v25, v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ", 1);
LABEL_57:
  uint64_t v28 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" <-- ", 5);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"]", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v33 + 8, &__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)&v33[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v33 + *(void *)(*(void *)&v33[0] - AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v33[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v37);
}

void sub_1C521F278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::printTransportInfo(SipIPSecTransportGroup *this, ImsOutStream *a2, int a3)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 192))(v18);
  if (v18[0])
  {
    (*(void (**)(std::string *__return_ptr, SipIPSecTransportGroup *))(*(void *)this + 192))(&__p, this);
    (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 56))(__p.__r_.__value_.__r.__words[0]);
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  if (v18[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v18[1]);
  }
  (*(void (**)(void **__return_ptr, SipIPSecTransportGroup *))(*(void *)this + 184))(v18, this);
  if (v18[0])
  {
    (*(void (**)(std::string *__return_ptr, SipIPSecTransportGroup *))(*(void *)this + 184))(&__p, this);
    (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 56))(__p.__r_.__value_.__r.__words[0]);
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  if (v18[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v18[1]);
  }
  uint64_t v6 = *((void *)this + 36);
  if (v6)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v6 + 48))(v18);
    if (v18[0])
    {
      std::string::size_type v7 = *((void *)this + 36);
      if (v7)
      {
        (*(void (**)(std::string *__return_ptr))(*(void *)v7 + 48))(&__p);
        std::string::size_type v7 = __p.__r_.__value_.__r.__words[0];
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      }
      (*(void (**)(std::string::size_type))(*(void *)v7 + 56))(v7);
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
    }
  }
  else
  {
    v18[0] = 0;
    v18[1] = 0;
  }
  if (v18[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v18[1]);
  }
  uint64_t v8 = *((void *)this + 34);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v8)
  {
    uint64_t v10 = *((void *)this + 34);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 35);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t))(*(void *)v10 + 56))(v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v9) {
      goto LABEL_30;
    }
  }
  else if (v9)
  {
LABEL_30:
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v12 = *((void *)this + 36);
  if (v12)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v12 + 48))(v18);
    uint64_t v13 = v18[0];
    if (v18[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v18[1]);
    }
    if (v13)
    {
      uint64_t v20 = 0;
      *(_OWORD *)int v18 = 0u;
      long long v19 = 0u;
      ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v18, a2);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    __p.__r_.__value_.__l.__size_ = 1;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 1;
    p_p = &__p;
  }
  LOWORD(p_p->__r_.__value_.__l.__data_) = 63;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"IPSecTransport [", 16);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr, SipIPSecTransportGroup *))(*(void *)this + 192))(&v16, this);
  (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v16 + 40))(v16, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" <--> ", 6);
  *((unsigned char *)a2 + 17) = 0;
  LoggableString::LoggableString((std::string *)v18, &__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)", ", 2);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" --> ", 5);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)", ", 2);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" <-- ", 5);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"]", 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SBYTE7(v19) < 0) {
    operator delete(v18[0]);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a3)
  {
    uint64_t v15 = *((void *)this + 32);
    if (v15)
    {
      if (*(void *)(v15 + 224))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Open connections:", 19);
        *((unsigned char *)a2 + 17) = 0;
        (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *((unsigned char *)a2 + 17) = 0;
        SipTcpTransport::printConnectionMap(*((ImsOutStream **)this + 32), a2);
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C521F9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t SipTransportGroup::isReliable(SipTransportGroup *this)
{
  return 0;
}

void *SipTransportGroup::transportGroup@<X0>(SipTransportGroup *this@<X0>, void *a2@<X8>)
{
  return std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(a2, (void *)this + 23);
}

uint64_t SipTransportGroup::isIPSec(SipTransportGroup *this)
{
  return 0;
}

uint64_t SipTransportGroup::acceptsTransactionsFromConnection(SipTransportGroup *this)
{
  return 1;
}

uint64_t SipIPSecTransportGroup::udpTransport@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 232);
  *a2 = *(void *)(this + 224);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t SipIPSecTransportGroup::tcpTransport@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 264);
  *a2 = *(void *)(this + 256);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t SipIPSecTransportGroup::localPort(SipIPSecTransportGroup *this)
{
  return *((unsigned __int16 *)this + 250);
}

uint64_t SipIPSecTransportGroup::isSecure(SipIPSecTransportGroup *this)
{
  return 1;
}

uint64_t SipIPSecTransportGroup::isIPSec(SipIPSecTransportGroup *this)
{
  return 1;
}

void ImsUdpSocketInterfaceDelegate::~ImsUdpSocketInterfaceDelegate(ImsUdpSocketInterfaceDelegate *this)
{
}

void SipTransportInterface::~SipTransportInterface(SipTransportInterface *this, uint64_t a2)
{
  *((void *)this + SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = &unk_1F20C9CA0;
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  SipLockable::~SipLockable(this, (uint64_t *)(a2 + 8));
}

void std::allocate_shared[abi:ne180100]<SipUdpTransport,std::allocator<SipUdpTransport>,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  std::__shared_ptr_emplace<SipUdpTransport>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,std::allocator<SipUdpTransport>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a3, v6 + 8, (uint64_t)(v6 + 3));
}

void sub_1C521FC40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SipUdpTransport>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,std::allocator<SipUdpTransport>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20B62C8;
  std::construct_at[abi:ne180100]<SipUdpTransport,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,SipUdpTransport*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1C521FC9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipUdpTransport>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B62C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipUdpTransport>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B62C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipUdpTransport>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::construct_at[abi:ne180100]<SipUdpTransport,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,SipUdpTransport*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = (uint64_t)v4;
  *a2 = 0;
  a2[1] = 0;
  SipUdpTransport::SipUdpTransport(a1, v6, *a3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void sub_1C521FD9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<SipTcpTransport,std::allocator<SipTcpTransport>,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x150uLL);
  std::__shared_ptr_emplace<SipTcpTransport>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,std::allocator<SipTcpTransport>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a3, v6 + 22, (uint64_t)(v6 + 3));
}

void sub_1C521FE1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SipTcpTransport>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,std::allocator<SipTcpTransport>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20B6318;
  std::construct_at[abi:ne180100]<SipTcpTransport,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,SipTcpTransport*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1C521FE78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipTcpTransport>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B6318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipTcpTransport>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B6318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipTcpTransport>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::construct_at[abi:ne180100]<SipTcpTransport,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,SipTcpTransport*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = (uint64_t)v4;
  *a2 = 0;
  a2[1] = 0;
  SipTcpTransport::SipTcpTransport(a1, v6, *a3, 0);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void sub_1C521FF7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B6248;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B6248;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20B6248;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20B6248;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      std::string::size_type v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 320))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C52201E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void sub_1C52203B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_1C522091C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void sub_1C5220B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1C5220E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void sub_1C522108C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1C5221394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void sub_1C52215A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_1C5221A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void sub_1C5221CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_1C52220D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void sub_1C52222E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1C52225D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void sub_1C52227B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1C5222AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void sub_1C5222C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_AVCRTTSessionDelegate_mm()
{
  uint64_t v0 = (void *)MEMORY[0x1C878EAB0]();
}

__n128 MediaSessionBaseCollection::add@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v25, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v25, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void **)(v8 + 8);
  size_t v11 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"add", 3);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" session=", 9);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  uint64_t v13 = (uint64_t **)(a1 + 16);
  uint64_t v12 = *(uint64_t **)(a1 + 16);
  if (v12)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v14 = (uint64_t **)v12;
        unint64_t v15 = v12[4];
        if (v15 <= (unint64_t)a2) {
          break;
        }
        uint64_t v12 = *v14;
        uint64_t v13 = v14;
        if (!*v14) {
          goto LABEL_14;
        }
      }
      if (v15 >= (unint64_t)a2) {
        break;
      }
      uint64_t v12 = v14[1];
      if (!v12)
      {
        uint64_t v13 = v14 + 1;
        goto LABEL_14;
      }
    }
  }
  else
  {
    uint64_t v14 = (uint64_t **)(a1 + 16);
LABEL_14:
    uint64_t v16 = (uint64_t *)v14;
    uint64_t v14 = (uint64_t **)operator new(0x38uLL);
    v14[5] = 0;
    v14[6] = 0;
    void v14[4] = a2;
    SipHop *v14 = 0;
    v14[1] = 0;
    v14[2] = v16;
    void *v13 = (uint64_t *)v14;
    uint64_t v17 = **(void **)(a1 + 8);
    int v18 = (uint64_t *)v14;
    if (v17)
    {
      *(void *)(a1 + 8) = v17;
      int v18 = *v13;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16), v18);
    ++*(void *)(a1 + 24);
  }
  uint64_t v20 = (uint64_t *)a3->n128_u64[0];
  long long v19 = (uint64_t *)a3->n128_u64[1];
  if (v19) {
    atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = (std::__shared_weak_count *)v14[6];
  v14[5] = v20;
  v14[6] = v19;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  __n128 result = *a3;
  *a4 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_1C522306C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionBaseCollection::get(MediaSessionBaseCollection *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v15 = a2;
  std::string::basic_string[abi:ne180100]<0>(v13, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v5 = ims::debug((uint64_t)v13, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v6 = v5;
  std::string::size_type v7 = *(void **)(v5 + 8);
  size_t v8 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"get", 3);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  ims::getValueFromMap<unsigned long long,std::shared_ptr<MediaSessionInterface>>(a3, (uint64_t)this + 8, &v15, (uint64_t)&v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C522324C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void ims::getValueFromMap<unsigned long long,std::shared_ptr<MediaSessionInterface>>(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  size_t v8 = *(void **)(a2 + 8);
  uint64_t v6 = (void *)(a2 + 8);
  std::string::size_type v7 = v8;
  if (!v8) {
    goto LABEL_12;
  }
  unint64_t v9 = *a3;
  uint64_t v10 = v6;
  do
  {
    unint64_t v11 = v7[4];
    BOOL v12 = v11 >= v9;
    if (v11 >= v9) {
      uint64_t v13 = v7;
    }
    else {
      uint64_t v13 = v7 + 1;
    }
    if (v12) {
      uint64_t v10 = v7;
    }
    std::string::size_type v7 = (void *)*v13;
  }
  while (*v13);
  if (v10 != v6 && v9 >= v10[4])
  {
    uint64_t v16 = v10[5];
    uint64_t v15 = v10[6];
    *a1 = v16;
    a1[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(v19, "rtp.util");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::debug((uint64_t)v19, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"getValueFromMap", 15);
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" Object not found [key=", 23);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
}

void sub_1C5223418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionBaseCollection::remove(MediaSessionBaseCollection *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v28 = a2;
  std::string::basic_string[abi:ne180100]<0>(v26, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v26, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  size_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"remove", 6);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  *a3 = 0;
  a3[1] = 0;
  uint64_t v10 = (uint64_t **)((char *)this + 8);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  ims::getValueFromMap<unsigned long long,std::shared_ptr<MediaSessionInterface>>(a3, (uint64_t)this + 8, &v28, (uint64_t)&v22);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (*a3)
  {
    unint64_t v11 = (uint64_t *)*((void *)this + 2);
    if (v11)
    {
      BOOL v12 = (uint64_t *)((char *)this + 16);
      uint64_t v13 = (void *)*((void *)this + 2);
      do
      {
        unint64_t v14 = v13[4];
        BOOL v15 = v14 >= a2;
        if (v14 >= a2) {
          uint64_t v16 = v13;
        }
        else {
          uint64_t v16 = v13 + 1;
        }
        if (v15) {
          BOOL v12 = v13;
        }
        uint64_t v13 = (void *)*v16;
      }
      while (*v16);
      if (v12 != (uint64_t *)((char *)this + 16) && v12[4] <= a2)
      {
        uint64_t v17 = (uint64_t *)v12[1];
        if (v17)
        {
          do
          {
            char v18 = v17;
            uint64_t v17 = (uint64_t *)*v17;
          }
          while (v17);
        }
        else
        {
          long long v19 = v12;
          do
          {
            char v18 = (uint64_t *)v19[2];
            BOOL v20 = *v18 == (void)v19;
            long long v19 = v18;
          }
          while (!v20);
        }
        if (*v10 == v12) {
          *uint64_t v10 = v18;
        }
        --*((void *)this + 3);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v12);
        uint64_t v21 = (std::__shared_weak_count *)v12[6];
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        operator delete(v12);
      }
    }
  }
}

void sub_1C52236B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL MediaSessionBaseCollection::contains(MediaSessionBaseCollection *this, unint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v18, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"contains", 8);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  uint64_t v10 = (void *)*((void *)this + 2);
  size_t v9 = (char *)this + 16;
  size_t v8 = v10;
  if (!v10) {
    goto LABEL_17;
  }
  unint64_t v11 = v9;
  do
  {
    unint64_t v12 = v8[4];
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      unint64_t v14 = v8;
    }
    else {
      unint64_t v14 = v8 + 1;
    }
    if (v13) {
      unint64_t v11 = (char *)v8;
    }
    size_t v8 = (void *)*v14;
  }
  while (*v14);
  if (v11 == v9 || *((void *)v11 + 4) > a2) {
LABEL_17:
  }
    unint64_t v11 = v9;
  return v11 != v9;
}

void sub_1C52238C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionBaseCollection::contains(void *a1, uint64_t *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v20, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"contains", 8);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  size_t v8 = (void *)a1[1];
  size_t v9 = a1 + 2;
  if (v8 != a1 + 2)
  {
    do
    {
      uint64_t v11 = v8[5];
      uint64_t v10 = (std::__shared_weak_count *)v8[6];
      if (v10)
      {
        uint64_t v12 = 1;
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v13 = *a2;
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        if (v11 == v13) {
          return v12;
        }
      }
      else if (v11 == *a2)
      {
        return 1;
      }
      unint64_t v14 = (void *)v8[1];
      if (v14)
      {
        do
        {
          BOOL v15 = v14;
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          BOOL v15 = (void *)v8[2];
          BOOL v16 = *v15 == (void)v8;
          size_t v8 = v15;
        }
        while (!v16);
      }
      size_t v8 = v15;
    }
    while (v15 != v9);
  }
  return 0;
}

void sub_1C5223B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionBaseCollection::size(MediaSessionBaseCollection *this)
{
  return *((void *)this + 3);
}

BOOL MediaSessionBaseCollection::empty(MediaSessionBaseCollection *this)
{
  return *((void *)this + 3) == 0;
}

void MediaSessionBaseCollection::clear(MediaSessionBaseCollection *this)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v10, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"clear", 5);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  size_t v7 = (void *)*((void *)this + 2);
  uint64_t v6 = (void *)((char *)this + 16);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy((uint64_t)(v6 - 1), v7);
  *(v6 - 1) = v6;
  *uint64_t v6 = 0;
  v6[1] = 0;
}

void sub_1C5223C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionBaseCollection::sessionIdList(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v29, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v29, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  size_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"sessionIdList", 13);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  *a3 = (uint64_t)a3;
  a3[1] = (uint64_t)a3;
  a3[2] = 0;
  uint64_t v10 = (void *)a1[1];
  char v11 = a1 + 2;
  if (v10 != a1 + 2)
  {
    while (1)
    {
      uint64_t v13 = v10[4];
      uint64_t v12 = v10[5];
      unint64_t v14 = (std::__shared_weak_count *)v10[6];
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = *(unsigned __int8 *)(v12 + 79);
      size_t v16 = *(void *)(v12 + 64);
      if ((v15 & 0x80u) == 0) {
        uint64_t v17 = *(unsigned __int8 *)(v12 + 79);
      }
      else {
        uint64_t v17 = *(void *)(v12 + 64);
      }
      uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
      int v19 = (char)v18;
      if ((v18 & 0x80u) != 0) {
        uint64_t v18 = *(void *)(a2 + 8);
      }
      if (v17 != v18) {
        goto LABEL_25;
      }
      BOOL v20 = (const void **)(v12 + 56);
      char v21 = v19 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v15 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v20, v21, v16)) {
        goto LABEL_24;
      }
LABEL_25:
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      char v24 = (void *)v10[1];
      if (v24)
      {
        do
        {
          char v25 = v24;
          char v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          char v25 = (void *)v10[2];
          BOOL v26 = *v25 == (void)v10;
          uint64_t v10 = v25;
        }
        while (!v26);
      }
      uint64_t v10 = v25;
      if (v25 == v11) {
        return;
      }
    }
    if (v15)
    {
      while (*(unsigned __int8 *)v20 == *v21)
      {
        BOOL v20 = (const void **)((char *)v20 + 1);
        ++v21;
        if (!--v15) {
          goto LABEL_24;
        }
      }
      goto LABEL_25;
    }
LABEL_24:
    uint64_t v22 = operator new(0x18uLL);
    v22[1] = a3;
    void v22[2] = v13;
    uint64_t v23 = *a3;
    void *v22 = *a3;
    *(void *)(v23 + 8) = v22;
    *a3 = (uint64_t)v22;
    ++a3[2];
    goto LABEL_25;
  }
}

void sub_1C5223F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionBaseCollection::~MediaSessionBaseCollection(MediaSessionBaseCollection *this)
{
  MediaSessionBaseCollection::~MediaSessionBaseCollection(this);
  JUMPOUT(0x1C878E320);
}

{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  *(void *)this = &unk_1F20B63C8;
  std::string::basic_string[abi:ne180100]<0>(v5, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"~MediaSessionBaseCollection", 27);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  (*(void (**)(MediaSessionBaseCollection *))(*(void *)this + 72))(this);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
  MediaSessionCollection::~MediaSessionCollection(this);
}

void *std::__list_imp<unsigned long long>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    __n128 result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    _OWORD v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        __n128 result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void MediaSessionCollection::~MediaSessionCollection(MediaSessionCollection *this)
{
  *(void *)this = &unk_1F20B6458;
  std::string::basic_string[abi:ne180100]<0>(v4, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v1 = ims::debug((uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v1 + 8), (uint64_t)"~MediaSessionCollection", 23);
  *(unsigned char *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v1 + 17) = 0;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

void *XcapNodeSelector::Step::encodePrefix(void *a1, unsigned __int8 *a2)
{
  if (a2)
  {
    unsigned __int8 v12 = *a2;
    uint64_t v13 = (char *)&v12;
    char v3 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v12, (uint64_t)&std::piecewise_construct, &v13);
    uint64_t v6 = v3[8];
    uint64_t v4 = v3 + 8;
    uint64_t v5 = (uint64_t)v6;
    int v7 = *((char *)v4 + 23);
    if (v7 >= 0) {
      uint64_t v8 = (uint64_t)v4;
    }
    else {
      uint64_t v8 = v5;
    }
    if (v7 >= 0) {
      uint64_t v9 = *((unsigned __int8 *)v4 + 23);
    }
    else {
      uint64_t v9 = (uint64_t)v4[1];
    }
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)":", 1);
  }
  return a1;
}

void XcapNodeSelector::XcapNodeSelector(XcapNodeSelector *this)
{
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
  *((void *)this + 1) = 0;
  *((void *)this + 4) = 0;
  operator new();
}

void sub_1C5224474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__tree<unsigned int>::destroy(v15, *v16);
  _Unwind_Resume(a1);
}

void XcapNodeSelector::appendNode()
{
}

void XcapNodeSelector::XcapNodeSelector(XcapNodeSelector *this, const XcapNodeSelector *a2)
{
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
  *((void *)this + 4) = 0;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  XcapNodeSelector::operator=((uint64_t)this, a2);
}

void sub_1C5224648(_Unwind_Exception *a1)
{
  char v3 = v2;
  std::__tree<unsigned int>::destroy(v1, *v3);
  _Unwind_Resume(a1);
}

uint64_t XcapNodeSelector::operator=(uint64_t a1, void *a2)
{
  if (*a2) {
    *(void *)a1 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))(*a2);
  }
  uint64_t v4 = a2[1];
  if (v4) {
    *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  if ((void *)a1 != a2) {
    std::__tree<XcapNs::nsType>::__assign_multi<std::__tree_const_iterator<XcapNs::nsType,std::__tree_node<XcapNs::nsType,void *> *,long>>((uint64_t **)(a1 + 16), (void *)a2[2], a2 + 3);
  }
  return a1;
}

void XcapNodeSelector::~XcapNodeSelector(XcapNodeSelector *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__tree<unsigned int>::destroy((uint64_t)this + 16, *((void **)this + 3));
}

uint64_t XcapNodeSelector::fetchPath@<X0>(XcapNodeSelector *this@<X0>, void *a2@<X8>)
{
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)unint64_t v14 = 0u;
  memset(v13, 0, sizeof(v13));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  if (*(void *)this)
  {
    (*(void (**)(void **__return_ptr))(**(void **)this + 24))(&__p);
    if ((v12 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v12 & 0x80u) == 0) {
      uint64_t v5 = v12;
    }
    else {
      uint64_t v5 = v11;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, v5);
    if ((char)v12 < 0) {
      operator delete(__p);
    }
    if (*((void *)this + 1))
    {
      uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"/", 1);
      (*(void (**)(void **__return_ptr))(**((void **)this + 1) + 24))(&__p);
      int v7 = (v12 & 0x80u) == 0 ? &__p : (void **)__p;
      uint64_t v8 = (v12 & 0x80u) == 0 ? v12 : v11;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
      if ((char)v12 < 0) {
        operator delete(__p);
      }
    }
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v13 + 8, a2);
  *(void *)&v13[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v13 + *(void *)(*(void *)&v13[0] - AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v13[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v17);
}

void sub_1C52249D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t XcapNodeSelector::fetchQuery@<X0>(XcapNodeSelector *this@<X0>, void *a2@<X8>)
{
  uint64_t v33 = 0;
  long long v31 = 0u;
  memset(v32, 0, sizeof(v32));
  *(_OWORD *)std::string __p = 0u;
  long long v30 = 0u;
  memset(v28, 0, sizeof(v28));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
  if (*((void *)this + 4))
  {
    uint64_t v3 = (XcapNodeSelector *)*((void *)this + 2);
    if (v3 != (XcapNodeSelector *)((char *)this + 24))
    {
      do
      {
        unsigned __int8 v4 = *((unsigned char *)v3 + 25);
        uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"xmlns(", 6);
        unsigned __int8 v34 = v4;
        v35[0] = (char *)&v34;
        uint64_t v6 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v34, (uint64_t)&std::piecewise_construct, v35);
        uint64_t v9 = v6[8];
        int v7 = v6 + 8;
        uint64_t v8 = (uint64_t)v9;
        int v10 = *((char *)v7 + 23);
        if (v10 >= 0) {
          uint64_t v11 = (uint64_t)v7;
        }
        else {
          uint64_t v11 = v8;
        }
        if (v10 >= 0) {
          uint64_t v12 = *((unsigned __int8 *)v7 + 23);
        }
        else {
          uint64_t v12 = (uint64_t)v7[1];
        }
        uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v11, v12);
        unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"=", 1);
        unsigned __int8 v34 = v4;
        v35[0] = (char *)&v34;
        long long v15 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v34, (uint64_t)&std::piecewise_construct, v35);
        uint64_t v18 = v15[5];
        long long v16 = v15 + 5;
        uint64_t v17 = (uint64_t)v18;
        int v19 = *((char *)v16 + 23);
        if (v19 >= 0) {
          uint64_t v20 = (uint64_t)v16;
        }
        else {
          uint64_t v20 = v17;
        }
        if (v19 >= 0) {
          uint64_t v21 = *((unsigned __int8 *)v16 + 23);
        }
        else {
          uint64_t v21 = (uint64_t)v16[1];
        }
        uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v20, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
        uint64_t v23 = (XcapNodeSelector *)*((void *)v3 + 1);
        if (v23)
        {
          do
          {
            char v24 = v23;
            uint64_t v23 = *(XcapNodeSelector **)v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            char v24 = (XcapNodeSelector *)*((void *)v3 + 2);
            BOOL v25 = *(void *)v24 == (void)v3;
            uint64_t v3 = v24;
          }
          while (!v25);
        }
        uint64_t v3 = v24;
      }
      while (v24 != (XcapNodeSelector *)((char *)this + 24));
    }
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v28 + 8, a2);
  *(void *)&v28[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v28 + *(void *)(*(void *)&v28[0] - AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v28[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v32);
}

void sub_1C5224CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t XcapNodeSelector::asString@<X0>(XcapNodeSelector *this@<X0>, void *a2@<X8>)
{
  uint64_t v21 = 0;
  long long v19 = 0u;
  memset(v20, 0, sizeof(v20));
  *(_OWORD *)uint64_t v17 = 0u;
  long long v18 = 0u;
  memset(v16, 0, sizeof(v16));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  XcapNodeSelector::fetchPath(this, &v13);
  std::string __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  XcapNodeSelector::fetchQuery(this, &__p);
  if (v15 >= 0) {
    uint64_t v4 = HIBYTE(v15);
  }
  else {
    uint64_t v4 = v14;
  }
  if (v4)
  {
    if (v15 >= 0) {
      uint64_t v5 = &v13;
    }
    else {
      uint64_t v5 = v13;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v5, v4);
  }
  uint64_t v6 = HIBYTE(v12);
  if (v12 < 0) {
    uint64_t v6 = v11;
  }
  if (v6)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"?", 1);
    if (v12 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v12 >= 0) {
      uint64_t v8 = HIBYTE(v12);
    }
    else {
      uint64_t v8 = v11;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)p_p, v8);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16 + 8, a2);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v13);
  }
  *(void *)&v16[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v16 + *(void *)(*(void *)&v16[0] - AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v16[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v20);
}

void sub_1C5224EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void XcapNodeSelector::appendNodeByAttr()
{
}

void *XcapNodeSelector::StepName::encode@<X0>(unsigned __int8 **this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 9))
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "*");
  }
  else
  {
    uint64_t v16 = 0;
    long long v14 = 0u;
    memset(v15, 0, sizeof(v15));
    *(_OWORD *)std::string __p = 0u;
    long long v13 = 0u;
    memset(v11, 0, sizeof(v11));
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
    XcapNodeSelector::Step::encodePrefix(v11, this[2]);
    int v7 = this[3];
    uint64_t v6 = (char *)(this + 3);
    uint64_t v5 = (uint64_t)v7;
    int v8 = v6[23];
    if (v8 >= 0) {
      uint64_t v9 = (uint64_t)v6;
    }
    else {
      uint64_t v9 = v5;
    }
    if (v8 >= 0) {
      uint64_t v10 = v6[23];
    }
    else {
      uint64_t v10 = *((void *)v6 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v9, v10);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v11 + 8, a2);
    *(void *)&v11[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v11 + *(void *)(*(void *)&v11[0] - AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *((void *)&v11[0] + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x1C878E270](v15);
  }
}

void sub_1C52252E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t XcapNodeSelector::StepAttr::encode@<X0>(XcapNodeSelector::StepAttr *this@<X0>, void *a2@<X8>)
{
  uint64_t v28 = 0;
  memset(v27, 0, sizeof(v27));
  long long v25 = 0u;
  long long v26 = 0u;
  *(_OWORD *)char v24 = 0u;
  memset(v23, 0, sizeof(v23));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  XcapNodeSelector::StepName::encode((unsigned __int8 **)((char *)this + *(void *)(*(void *)this - 24)), __p);
  if ((v22 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v22 & 0x80u) == 0) {
    uint64_t v5 = v22;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v4, v5);
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"[@", 2);
  int v8 = *((char *)this + 31);
  if (v8 >= 0) {
    uint64_t v9 = (char *)this + 8;
  }
  else {
    uint64_t v9 = (char *)*((void *)this + 1);
  }
  if (v8 >= 0) {
    uint64_t v10 = *((unsigned __int8 *)this + 31);
  }
  else {
    uint64_t v10 = *((void *)this + 2);
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"=\"", 2);
  uint64_t v15 = *((void *)this + 4);
  long long v14 = (char *)this + 32;
  uint64_t v13 = v15;
  int v16 = v14[23];
  if (v16 >= 0) {
    uint64_t v17 = (uint64_t)v14;
  }
  else {
    uint64_t v17 = v13;
  }
  if (v16 >= 0) {
    uint64_t v18 = v14[23];
  }
  else {
    uint64_t v18 = *((void *)v14 + 1);
  }
  long long v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v17, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\"]", 2);
  if ((char)v22 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v23 + 8, a2);
  *(void *)&v23[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v23 + *(void *)(*(void *)&v23[0] - AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v23[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v27);
}

void sub_1C5225518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t virtual thunk to'XcapNodeSelector::StepAttr::encode@<X0>(XcapNodeSelector::StepAttr *this@<X0>, void *a2@<X8>)
{
  return XcapNodeSelector::StepAttr::encode((XcapNodeSelector::StepAttr *)((char *)this + *(void *)(*(void *)this - 40)), a2);
}

void XcapNodeSelector::ElementSelector::~ElementSelector(XcapNodeSelector::ElementSelector *this)
{
  *(void *)this = &unk_1F20B64C0;
  uint64_t v2 = (void *)*((void *)this + 1);
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)*((void *)this + 1);
  }
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XcapNodeSelector::ElementSelector::~ElementSelector(this);
  JUMPOUT(0x1C878E320);
}

uint64_t XcapNodeSelector::ElementSelector::encode@<X0>(XcapNodeSelector::ElementSelector *this@<X0>, void *a2@<X8>)
{
  uint64_t v19 = 0;
  long long v17 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)uint64_t v15 = 0u;
  long long v16 = 0u;
  memset(v14, 0, sizeof(v14));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  uint64_t v5 = *((void *)this + 1);
  uint64_t v4 = *((void *)this + 2);
  if (v4 != v5)
  {
    unint64_t v6 = (v4 - v5) >> 3;
    int v7 = MEMORY[0x1E4F14500];
    unint64_t v8 = 1;
    do
    {
      if (*(void *)v5)
      {
        (*(void (**)(void **__return_ptr))(**(void **)v5 + 24))(__p);
        if ((v13 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        if ((v13 & 0x80u) == 0) {
          uint64_t v10 = v13;
        }
        else {
          uint64_t v10 = (uint64_t)__p[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v9, v10);
        if ((char)v13 < 0) {
          operator delete(__p[0]);
        }
        if (v8 < v6) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/", 1);
        }
      }
      else if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_fault_impl(&dword_1C51D1000, v7, OS_LOG_TYPE_FAULT, "Invalid step value", (uint8_t *)__p, 2u);
      }
      v5 += 8;
      ++v8;
    }
    while (v5 != v4);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v14 + 8, a2);
  *(void *)&v14[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v14 + *(void *)(*(void *)&v14[0] - AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v14[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v18);
}

void sub_1C52258A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void XcapNodeSelector::StepName::~StepName(void **this)
{
  *this = &unk_1F20B64F0;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20B64F0;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  JUMPOUT(0x1C878E320);
}

void XcapNodeSelector::StepName::clone(XcapNodeSelector::StepName *this)
{
}

void sub_1C5225A24(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10D3C4091169FA2);
  _Unwind_Resume(a1);
}

void XcapNodeSelector::StepAttr::~StepAttr(void **this)
{
  *(void *)(v2 + 56) = &unk_1F20B64F0;
  if (*(char *)(v2 + 103) < 0) {
    operator delete(this[10]);
  }
}

{
  uint64_t vars8;

  XcapNodeSelector::StepAttr::~StepAttr(this);
  JUMPOUT(0x1C878E320);
}

void XcapNodeSelector::StepAttr::clone(XcapNodeSelector::StepAttr *this)
{
}

void sub_1C5225C34(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v4);
  }
  *(void *)(v1 + 56) = v3;
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v2);
  }
  MEMORY[0x1C878E320](v1, 0x10D3C40D90D4617);
  _Unwind_Resume(a1);
}

void virtual thunk to'XcapNodeSelector::StepAttr::~StepAttr(XcapNodeSelector::StepAttr *this)
{
}

{
  uint64_t vars8;

  XcapNodeSelector::StepAttr::~StepAttr((void **)((char *)this + *(void *)(*(void *)this - 24)));
  JUMPOUT(0x1C878E320);
}

void covariant return thunk to'XcapNodeSelector::StepAttr::clone(XcapNodeSelector::StepAttr *this)
{
}

void XcapNodeSelector::ElementSelector::clone(XcapNodeSelector::ElementSelector *this)
{
}

void sub_1C5225EC4(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x1C878E320](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<XcapNs::nsType>::__assign_multi<std::__tree_const_iterator<XcapNs::nsType,std::__tree_node<XcapNs::nsType,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    unint64_t v6 = *result;
    unint64_t v8 = result + 1;
    int v7 = result[1];
    *__n128 result = (uint64_t *)(result + 1);
    uint64_t v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v9 = v6[1];
    }
    else {
      uint64_t v9 = (uint64_t)v6;
    }
    char v27 = result;
    uint64_t v28 = (void *)v9;
    uint64_t v29 = v9;
    if (v9)
    {
      uint64_t v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next(v9);
      uint64_t v28 = v10;
      if (a2 != a3)
      {
        uint64_t v11 = a2;
        do
        {
          uint64_t v12 = (uint64_t)v10;
          unsigned int v13 = *((unsigned __int8 *)v11 + 25);
          *(unsigned char *)(v9 + 25) = v13;
          long long v14 = *v8;
          uint64_t v15 = v5 + 1;
          long long v16 = v5 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                uint64_t v15 = (uint64_t **)v14;
                if (v13 >= *((unsigned __int8 *)v14 + 25)) {
                  break;
                }
                long long v14 = (uint64_t *)*v14;
                long long v16 = v15;
                if (!*v15) {
                  goto LABEL_14;
                }
              }
              long long v14 = (uint64_t *)v14[1];
            }
            while (v14);
            long long v16 = v15 + 1;
          }
LABEL_14:
          std::__tree<unsigned int>::__insert_node_at(v5, (uint64_t)v15, v16, (uint64_t *)v9);
          if (v12) {
            uint64_t v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next(v12);
          }
          else {
            uint64_t v10 = 0;
          }
          long long v17 = (void *)v11[1];
          if (v17)
          {
            do
            {
              a2 = v17;
              long long v17 = (void *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              a2 = (void *)v11[2];
              BOOL v18 = *a2 == (void)v11;
              uint64_t v11 = a2;
            }
            while (!v18);
          }
          if (!v12) {
            break;
          }
          uint64_t v9 = v12;
          uint64_t v11 = a2;
        }
        while (a2 != a3);
        uint64_t v28 = v10;
        uint64_t v29 = v12;
      }
    }
    __n128 result = (uint64_t **)std::__tree<unsigned int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v27);
  }
  if (a2 != a3)
  {
    uint64_t v19 = v5 + 1;
    do
    {
      unsigned int v20 = *((unsigned __int8 *)a2 + 25);
      uint64_t v21 = (uint64_t *)operator new(0x20uLL);
      *((unsigned char *)v21 + 25) = v20;
      unsigned __int8 v22 = *v19;
      uint64_t v23 = v5 + 1;
      char v24 = v5 + 1;
      if (*v19)
      {
        do
        {
          while (1)
          {
            uint64_t v23 = (uint64_t **)v22;
            if (*((unsigned __int8 *)v22 + 25) <= v20) {
              break;
            }
            unsigned __int8 v22 = (uint64_t *)*v22;
            char v24 = v23;
            if (!*v23) {
              goto LABEL_34;
            }
          }
          unsigned __int8 v22 = (uint64_t *)v22[1];
        }
        while (v22);
        char v24 = v23 + 1;
      }
LABEL_34:
      __n128 result = (uint64_t **)std::__tree<unsigned int>::__insert_node_at(v5, (uint64_t)v23, v24, v21);
      long long v25 = (void *)a2[1];
      if (v25)
      {
        do
        {
          long long v26 = v25;
          long long v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          long long v26 = (void *)a2[2];
          BOOL v18 = *v26 == (void)a2;
          a2 = v26;
        }
        while (!v18);
      }
      a2 = v26;
    }
    while (v26 != a3);
  }
  return result;
}

void std::vector<XcapNodeSelector::Step *>::__throw_length_error[abi:ne180100]()
{
}

void XcapNodeSelector::StepAttr::~StepAttr(void **this, void **a2)
{
  uint64_t v3 = *a2;
  *this = *a2;
  *(void **)((char *)this + *(v3 - 3)) = a2[1];
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t SDPParserSettings::initializeFromStack(unsigned char *a1, SipStack **a2)
{
  uint64_t v4 = (ImsPrefs *)SipStack::prefs(*a2);
  AllowIPv6UnicastAddressKey = (void **)ImsPrefs::getAllowIPv6UnicastAddressKey(v4);
  uint64_t result = ImsPrefs::BOOLValue(v4, AllowIPv6UnicastAddressKey);
  *a1 = result;
  a1[1] = *((unsigned char *)*a2 + 2681);
  return result;
}

BOOL SDPParser::parseVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v4 = (const char *)a2;
    }
    else {
      uint64_t v4 = *(const char **)a2;
    }
    *(void *)(v3 + 32) = atoll(v4);
    std::string::basic_string[abi:ne180100]<0>(v11, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::spam((uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"SDPModel Protocol Version set to ", 33);
    *(unsigned char *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::error((uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(unsigned char *)(v6 + 17) = 0;
    int v7 = *(void **)(v6 + 8);
    char v13 = 118;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  return v3 != 0;
}

void sub_1C5226430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPParser::parseOrigin(uint64_t a1, const std::string *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::error((uint64_t)v27, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(unsigned char *)(v5 + 17) = 0;
    int v7 = *(void **)(v5 + 8);
    LOBYTE(v22[0]) = 111;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v22, 1);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(void *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_5;
  }
  if ((*(unsigned int (**)(void))(*(void *)(v4 + 40) + 24))())
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::error((uint64_t)v27, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Origin already found: '", 23);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v6 = *(void **)(v5 + 8);
    LOBYTE(v22[0]) = 111;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v22, 1);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(void *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_5:
    *(unsigned char *)(v5 + 17) = 0;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v28) < 0) {
      operator delete(v27[0]);
    }
    return 0;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 32);
  BOOL v8 = v9 == 0;
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::error((uint64_t)v27, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Protocol version set to ", 24);
    *(unsigned char *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)". Only 0 is supported: '", 24);
    *(unsigned char *)(v10 + 17) = 0;
    uint64_t v11 = *(void **)(v10 + 8);
    LOBYTE(v22[0]) = 111;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v22, 1);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(void *)v10 + 32))(v10, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v28) < 0) {
      operator delete(v27[0]);
    }
  }
  memset(&v38, 0, sizeof(v38));
  memset(&v37, 0, sizeof(v37));
  std::string::basic_string[abi:ne180100]<0>(&v37, "");
  std::string::size_type v35 = 0;
  std::string::size_type v36 = 0;
  memset(v34, 0, sizeof(v34));
  *(_OWORD *)uint64_t v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  *(_OWORD *)char v27 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)v27, a2, 8);
  char v12 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v27, (uint64_t)&v37);
  if ((*((unsigned char *)v12 + *(void *)(*v12 - 24) + 32) & 5) != 0
    || (char v13 = (void *)MEMORY[0x1C878DFF0](v27, &v36), (*((unsigned char *)v13 + *(void *)(*v13 - 24) + 32) & 5) != 0)
    || (long long v14 = (void *)MEMORY[0x1C878DFF0](v27, &v35), (*((unsigned char *)v14 + *(void *)(*v14 - 24) + 32) & 5) != 0))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    uint64_t v15 = ims::error((uint64_t)__p, (uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"SDPOrigin is missing something: '", 33);
    *(unsigned char *)(v15 + 17) = 0;
    long long v16 = *(void **)(v15 + 8);
    char v39 = 111;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v39, 1);
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(void *)v15 + 32))(v15, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    BOOL v8 = 0;
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *((void *)v27[0] - 3)));
  long long v17 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  unsigned __int8 v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale((std::locale *)__p);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v27, (uint64_t)&v38, v18);
  uint64_t v19 = *(void *)(a1 + 8);
  SDPParser::parseConnectionHelper(&v38, (char *)a1, (uint64_t)v22);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v21, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  }
  else {
    std::string v21 = v37;
  }
  SDPOrigin::SDPOrigin(__p, (uint64_t)v22, (long long *)&v21, v36, v35);
  SDPModel::setOrigin(v19, (uint64_t)__p);
  SDPOrigin::~SDPOrigin((void **)&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  v22[0] = &unk_1F20CB730;
  if (v25 < 0) {
    operator delete(v24);
  }
  v27[0] = *(void **)MEMORY[0x1E4FBA410];
  *(void **)((char *)v27 + *((void *)v27[0] - 3)) = *(void **)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v28 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v33) < 0) {
    operator delete(v32[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270]((char *)v34 + 8);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_1C5226C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::locale a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  std::istringstream::~istringstream((uint64_t)&a45);
  if (*(char *)(v50 - 81) < 0) {
    operator delete(*(void **)(v50 - 104));
  }
  if (*(char *)(v50 - 57) < 0) {
    operator delete(*(void **)(v50 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseSessionName(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    std::string::operator=((std::string *)(v3 + 152), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = *(void *)(a1 + 8);
    if (!*(void *)(v7 + 32) && ((*(uint64_t (**)(void))(*(void *)(v7 + 40) + 24))() & 1) != 0) {
      return 1;
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    uint64_t v5 = ims::error((uint64_t)v13, (uint64_t)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Session name parsed out of order. Must appear after origin: '", 61);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v9 = *(void **)(v5 + 8);
    char v15 = 115;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v15, 1);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    uint64_t v5 = ims::error((uint64_t)v13, (uint64_t)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v6 = *(void **)(v5 + 8);
    char v15 = 115;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v15, 1);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v5 + 17) = 0;
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  return 0;
}

void sub_1C5227084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseSessionInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    std::string::operator=((std::string *)(v3 + 176), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = *(void *)(a1 + 8);
    if (!*(void *)(v7 + 32) && (*(unsigned int (**)(void))(*(void *)(v7 + 40) + 24))())
    {
      uint64_t v8 = *(void *)(a1 + 8);
      if (*(char *)(v8 + 175) < 0) {
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v8 + 152), *(void *)(v8 + 160));
      }
      else {
        std::string v15 = *(std::string *)(v8 + 152);
      }
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v15.__r_.__value_.__l.__size_;
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (size) {
        return 1;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v15, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    uint64_t v5 = ims::error((uint64_t)&v15, (uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Session information parsed out of order. Must appear after origin: '", 68);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v11 = *(void **)(v5 + 8);
    char v16 = 105;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v16, 1);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    uint64_t v5 = ims::error((uint64_t)&v15, (uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v6 = *(void **)(v5 + 8);
    char v16 = 105;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v16, 1);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v5 + 17) = 0;
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C52273FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseURI(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    std::string::operator=((std::string *)(v3 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = *(void *)(a1 + 8);
    if (!*(void *)(v7 + 32) && (*(unsigned int (**)(void))(*(void *)(v7 + 40) + 24))())
    {
      uint64_t v8 = *(void *)(a1 + 8);
      if (*(char *)(v8 + 175) < 0) {
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v8 + 152), *(void *)(v8 + 160));
      }
      else {
        std::string v15 = *(std::string *)(v8 + 152);
      }
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v15.__r_.__value_.__l.__size_;
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (size) {
        return 1;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v15, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    uint64_t v5 = ims::error((uint64_t)&v15, (uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"URI parsed out of order. Must appear after origin: '", 52);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v11 = *(void **)(v5 + 8);
    char v16 = 117;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v16, 1);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    uint64_t v5 = ims::error((uint64_t)&v15, (uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v6 = *(void **)(v5 + 8);
    char v16 = 117;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v16, 1);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v5 + 17) = 0;
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C5227774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseEmail(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v5 = std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>(v3 + 224, 0, 0, a2);
    v5[1] = v3 + 224;
    uint64_t v6 = *(void *)(v3 + 224);
    *uint64_t v5 = v6;
    *(void *)(v6 + 8) = v5;
    *(void *)(v3 + 224) = v5;
    ++*(void *)(v3 + 240);
    uint64_t v7 = *(void *)(a1 + 8);
    if (!*(void *)(v7 + 32) && (*(unsigned int (**)(void))(*(void *)(v7 + 40) + 24))())
    {
      uint64_t v8 = *(void *)(a1 + 8);
      if (*(char *)(v8 + 175) < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v8 + 152), *(void *)(v8 + 160));
      }
      else {
        std::string v16 = *(std::string *)(v8 + 152);
      }
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v16.__r_.__value_.__l.__size_;
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (size) {
        return 1;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v16, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::error((uint64_t)&v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Email parsed out of order. Must appear after origin: '", 54);
    *(unsigned char *)(v9 + 17) = 0;
    char v13 = *(void **)(v9 + 8);
    char v17 = 101;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v17, 1);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::error((uint64_t)&v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(unsigned char *)(v9 + 17) = 0;
    uint64_t v10 = *(void **)(v9 + 8);
    char v17 = 101;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v17, 1);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v9 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C5227AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parsePhoneNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v5 = std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>(v3 + 248, 0, 0, a2);
    v5[1] = v3 + 248;
    uint64_t v6 = *(void *)(v3 + 248);
    *uint64_t v5 = v6;
    *(void *)(v6 + 8) = v5;
    *(void *)(v3 + 248) = v5;
    ++*(void *)(v3 + 264);
    uint64_t v7 = *(void *)(a1 + 8);
    if (!*(void *)(v7 + 32) && (*(unsigned int (**)(void))(*(void *)(v7 + 40) + 24))())
    {
      uint64_t v8 = *(void *)(a1 + 8);
      if (*(char *)(v8 + 175) < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v8 + 152), *(void *)(v8 + 160));
      }
      else {
        std::string v16 = *(std::string *)(v8 + 152);
      }
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v16.__r_.__value_.__l.__size_;
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (size) {
        return 1;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v16, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::error((uint64_t)&v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Phone number parsed out of order. Must appear after origin: '", 61);
    *(unsigned char *)(v9 + 17) = 0;
    char v13 = *(void **)(v9 + 8);
    char v17 = 112;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v17, 1);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::error((uint64_t)&v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(unsigned char *)(v9 + 17) = 0;
    uint64_t v10 = *(void **)(v9 + 8);
    char v17 = 112;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v17, 1);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v9 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C5227E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseConnection(uint64_t a1, const std::string *a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v19 = 0;
    *(_OWORD *)char v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    SDPParser::parseConnectionHelper(a2, (char *)a1, (uint64_t)__p);
    SDPModel::addSDPConnection(*(SDPModel **)(a1 + 8), (const SDPConnection *)__p);
    uint64_t v4 = *(void *)(a1 + 8);
    if (*(void *)(v4 + 32) || !(*(unsigned int (**)(void))(*(void *)(v4 + 40) + 24))()) {
      goto LABEL_20;
    }
    uint64_t v5 = *(void *)(a1 + 8);
    if (*(char *)(v5 + 175) < 0) {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(v5 + 152), *(void *)(v5 + 160));
    }
    else {
      std::string v20 = *(std::string *)(v5 + 152);
    }
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v20.__r_.__value_.__l.__size_;
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (size)
    {
      if (SDPConnection::valid((const std::string *)__p))
      {
        uint64_t v8 = 1;
LABEL_26:
        __p[0] = &unk_1F20CB730;
        if (SHIBYTE(v18) < 0) {
          operator delete(v17[1]);
        }
        return v8;
      }
      std::string::basic_string[abi:ne180100]<0>(&v20, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(v14, "");
      uint64_t v10 = ims::error((uint64_t)&v20, (uint64_t)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Invalid address given in connection object ", 43);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(void *)v10 + 32))(v10, &v17[1]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)": '", 3);
      *(unsigned char *)(v10 + 17) = 0;
      char v13 = *(void **)(v10 + 8);
      char v21 = 99;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v21, 1);
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"=", 1);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(void *)v10 + 32))(v10, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"'", 1);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
LABEL_20:
      std::string::basic_string[abi:ne180100]<0>(&v20, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(v14, "");
      uint64_t v10 = ims::error((uint64_t)&v20, (uint64_t)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Connection information parsed out of order. Must appear after origin: '", 71);
      *(unsigned char *)(v10 + 17) = 0;
      uint64_t v11 = *(void **)(v10 + 8);
      char v21 = 99;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v21, 1);
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"=", 1);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(void *)v10 + 32))(v10, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"'", 1);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(unsigned char *)(v10 + 17) = 0;
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    uint64_t v8 = 0;
    goto LABEL_26;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(&v20, "");
  uint64_t v6 = ims::error((uint64_t)__p, (uint64_t)&v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SDPModel is null: '", 19);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = *(void **)(v6 + 8);
  LOBYTE(v14[0]) = 99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v14, 1);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"=", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, const std::string *))(*(void *)v6 + 32))(v6, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"'", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17[0]) < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1C5228328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v27 - 25) < 0) {
    operator delete(*(void **)(v27 - 48));
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseBandwidth(uint64_t a1, std::string *this)
{
  if (!*(void *)(a1 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(&v35, "");
    uint64_t v15 = ims::error((uint64_t)v31, (uint64_t)&v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(unsigned char *)(v15 + 17) = 0;
    std::string v16 = *(void **)(v15 + 8);
    v34.__r_.__value_.__s.__data_[0] = 98;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v34, 1);
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v15 + 32))(v15, this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_47;
  }
  std::string::size_type v4 = std::string::find(this, 58, 0);
  if (v4 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(&v35, "");
    uint64_t v15 = ims::error((uint64_t)v31, (uint64_t)&v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Bandwidth missing information: '", 32);
    *(unsigned char *)(v15 + 17) = 0;
    uint64_t v27 = *(void **)(v15 + 8);
    v34.__r_.__value_.__s.__data_[0] = 98;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)&v34, 1);
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v15 + 32))(v15, this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_47;
  }
  std::string::size_type v5 = v4;
  memset(&v35, 0, sizeof(v35));
  std::string::basic_string(&v35, this, 0, v4, (std::allocator<char> *)v31);
  memset(&v34, 0, sizeof(v34));
  std::string::basic_string(&v34, this, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v31);
  uint64_t v6 = 0;
  uint64_t v7 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  long long v8 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  while (1)
  {
    uint64_t v10 = (char *)&SDPBandwidth::bwTypeLookup + 24 * v6;
    int v11 = v10[23];
    if (size != (v11 & ~(v11 >> 31))) {
      goto LABEL_17;
    }
    char v12 = v11 >= 0 ? (unsigned __int8 *)&SDPBandwidth::bwTypeLookup + 24 * v6 : *(unsigned __int8 **)v10;
    if ((v7 & 0x80) != 0) {
      break;
    }
    if (!v7) {
      goto LABEL_20;
    }
    char v13 = &v35;
    uint64_t v14 = v7;
    while (v13->__r_.__value_.__s.__data_[0] == *v12)
    {
      char v13 = (std::string *)((char *)v13 + 1);
      ++v12;
      if (!--v14) {
        goto LABEL_20;
      }
    }
LABEL_17:
    if (++v6 == 6) {
      goto LABEL_21;
    }
  }
  if (memcmp((const void *)v8, v12, *((size_t *)&v8 + 1))) {
    goto LABEL_17;
  }
LABEL_20:
  if (v6) {
    goto LABEL_26;
  }
LABEL_21:
  std::string::basic_string[abi:ne180100]<0>(v31, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v17 = ims::error((uint64_t)v31, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Bandwidth set to kBWTypeUnknown: '", 34);
  *(unsigned char *)(v17 + 17) = 0;
  long long v18 = *(void **)(v17 + 8);
  char v36 = 98;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v36, 1);
  *(unsigned char *)(v17 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"=", 1);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v17 + 32))(v17, this);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"'", 1);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if ((v31[23] & 0x80000000) != 0) {
    operator delete(*(void **)v31);
  }
  LODWORD(v6) = 0;
LABEL_26:
  uint64_t v19 = *(void *)(a1 + 8);
  std::string v20 = (void *)v34.__r_.__value_.__r.__words[0];
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v21 = &v34;
  }
  else {
    char v21 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  uint64_t v22 = atoll((const char *)v21);
  v31[8] = 1;
  *(void *)long long v31 = &unk_1F20BAA28;
  *(_DWORD *)&v31[12] = v6;
  v31[16] = v22 != 0;
  *(void *)&v31[24] = v22;
  *(_DWORD *)&v31[32] = 2;
  *(_WORD *)&v31[36] = 5;
  char v23 = (char *)operator new(0x38uLL);
  v23[24] = 1;
  *(_OWORD *)(v23 + 38) = *(_OWORD *)&v31[22];
  *(_OWORD *)(v23 + 28) = *(_OWORD *)&v31[12];
  *((void *)v23 + 1) = v19 + 296;
  *((void *)v23 + 2) = &unk_1F20BAA28;
  uint64_t v24 = *(void *)(v19 + 296);
  *(void *)char v23 = v24;
  *(void *)(v24 + 8) = v23;
  *(void *)(v19 + 296) = v23;
  ++*(void *)(v19 + 312);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  uint64_t v25 = *(void *)(a1 + 8);
  if (!*(void *)(v25 + 32) && (*(unsigned int (**)(void))(*(void *)(v25 + 40) + 24))())
  {
    uint64_t v26 = *(void *)(a1 + 8);
    if (*(char *)(v26 + 175) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v31, *(const std::string::value_type **)(v26 + 152), *(void *)(v26 + 160));
    }
    else
    {
      *(_OWORD *)long long v31 = *(_OWORD *)(v26 + 152);
      *(void *)&v31[16] = *(void *)(v26 + 168);
    }
    if (v31[23] >= 0) {
      uint64_t v28 = v31[23];
    }
    else {
      uint64_t v28 = *(void *)&v31[8];
    }
    if ((v31[23] & 0x80000000) != 0) {
      operator delete(*(void **)v31);
    }
    if (v28) {
      return 1;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v31, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(&v35, "");
  uint64_t v15 = ims::error((uint64_t)v31, (uint64_t)&v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Bandwidth information parsed out of order. Must appear after origin: '", 70);
  *(unsigned char *)(v15 + 17) = 0;
  long long v30 = *(void **)(v15 + 8);
  v34.__r_.__value_.__s.__data_[0] = 98;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v34, 1);
  *(unsigned char *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"=", 1);
  *(unsigned char *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v15 + 32))(v15, this);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"'", 1);
  *(unsigned char *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_47:
  *(unsigned char *)(v15 + 17) = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if ((v31[23] & 0x80000000) != 0) {
    operator delete(*(void **)v31);
  }
  return 0;
}

void sub_1C5228ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseTime(uint64_t a1, const std::string *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    if (*(void *)(v4 + 32) || !(*(unsigned int (**)(void))(*(void *)(v4 + 40) + 24))()) {
      goto LABEL_19;
    }
    uint64_t v5 = *(void *)(a1 + 8);
    if (*(char *)(v5 + 175) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v31, *(const std::string::value_type **)(v5 + 152), *(void *)(v5 + 160));
    }
    else
    {
      *(_OWORD *)long long v31 = *(_OWORD *)(v5 + 152);
      *(void *)&v31[16] = *(void *)(v5 + 168);
    }
    if (v31[23] >= 0) {
      uint64_t v9 = v31[23];
    }
    else {
      uint64_t v9 = *(void *)&v31[8];
    }
    if ((v31[23] & 0x80000000) != 0) {
      operator delete(*(void **)v31);
    }
    if (v9)
    {
      uint64_t v8 = 1;
    }
    else
    {
LABEL_19:
      std::string::basic_string[abi:ne180100]<0>(v31, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v10 = ims::error((uint64_t)v31, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Time information parsed out of order. Must appear after origin: '", 65);
      *(unsigned char *)(v10 + 17) = 0;
      int v11 = *(void **)(v10 + 8);
      LOBYTE(v29[0]) = 116;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v29, 1);
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"=", 1);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(void *)v10 + 32))(v10, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"'", 1);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (SHIBYTE(v26) < 0) {
        operator delete(__p);
      }
      if ((v31[23] & 0x80000000) != 0) {
        operator delete(*(void **)v31);
      }
      uint64_t v8 = 0;
    }
    long long v38 = 0uLL;
    memset(v37, 0, sizeof(v37));
    *(_OWORD *)std::string v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    memset(v31, 0, sizeof(v31));
    std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)v31, a2, 8);
    char v12 = (void *)MEMORY[0x1C878DFF0](v31, (char *)&v38 + 8);
    if ((*((unsigned char *)v12 + *(void *)(*v12 - 24) + 32) & 5) != 0
      || (char v13 = (void *)MEMORY[0x1C878DFF0](v31, &v38), (*((unsigned char *)v13 + *(void *)(*v13 - 24) + 32) & 5) != 0))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(v29, "");
      uint64_t v14 = ims::error((uint64_t)&__p, (uint64_t)v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Unable to parse Timing object: '", 32);
      *(unsigned char *)(v14 + 17) = 0;
      uint64_t v15 = *(void **)(v14 + 8);
      char v39 = 116;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v39, 1);
      *(unsigned char *)(v14 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"=", 1);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(void *)v14 + 32))(v14, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"'", 1);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      if (v30 < 0) {
        operator delete(v29[0]);
      }
      if (SHIBYTE(v26) < 0) {
        operator delete(__p);
      }
      uint64_t v8 = 0;
      uint64_t v16 = *((void *)&v38 + 1);
      uint64_t v17 = v38;
    }
    else
    {
      uint64_t v16 = *((void *)&v38 + 1) | v38;
      if (v38 == 0)
      {
        uint64_t v17 = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parser");
        std::string::basic_string[abi:ne180100]<0>(v29, "");
        uint64_t v22 = ims::warn((uint64_t)&__p, (uint64_t)v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"We don't support non-zero values in timing objects: '", 53);
        *(unsigned char *)(v22 + 17) = 0;
        char v23 = *(void **)(v22 + 8);
        char v39 = 116;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v39, 1);
        *(unsigned char *)(v22 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"=", 1);
        *(unsigned char *)(v22 + 17) = 0;
        (*(void (**)(uint64_t, const std::string *))(*(void *)v22 + 32))(v22, a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"'", 1);
        *(unsigned char *)(v22 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v22 + 17) = 0;
        if (v30 < 0) {
          operator delete(v29[0]);
        }
        if (SHIBYTE(v26) < 0) {
          operator delete(__p);
        }
        uint64_t v17 = 0;
        uint64_t v16 = 0;
        long long v38 = 0uLL;
      }
    }
    uint64_t v18 = *(void *)(a1 + 8);
    char v25 = 1;
    std::string __p = &unk_1F20E67F0;
    uint64_t v26 = v16;
    uint64_t v27 = v17;
    v28[0] = (uint64_t)v28;
    v28[1] = (uint64_t)v28;
    void v28[2] = 0;
    uint64_t v19 = std::__list_imp<SDPTiming>::__create_node[abi:ne180100]<SDPTiming>(v18 + 320, 0, 0, (const SDPTiming *)&__p);
    v19[1] = v18 + 320;
    uint64_t v20 = *(void *)(v18 + 320);
    void *v19 = v20;
    *(void *)(v20 + 8) = v19;
    *(void *)(v18 + 320) = v19;
    ++*(void *)(v18 + 336);
    std::string __p = &unk_1F20E67F0;
    std::__list_imp<SDPRepeatTime>::clear(v28);
    *(void *)long long v31 = *MEMORY[0x1E4FBA410];
    *(void *)&v31[*(void *)(*(void *)v31 - 24)] = *(void *)(MEMORY[0x1E4FBA410] + 24);
    *(void *)&v31[16] = MEMORY[0x1E4FBA470] + 16;
    if (SBYTE7(v36) < 0) {
      operator delete(v35[0]);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1C878E270]((char *)v37 + 8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v6 = ims::error((uint64_t)v31, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(unsigned char *)(v6 + 17) = 0;
    uint64_t v7 = *(void **)(v6 + 8);
    LOBYTE(v29[0]) = 116;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v29, 1);
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(void *)v6 + 32))(v6, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (SHIBYTE(v26) < 0) {
      operator delete(__p);
    }
    if ((v31[23] & 0x80000000) != 0) {
      operator delete(*(void **)v31);
    }
    return 0;
  }
  return v8;
}

void sub_1C52292F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::istringstream::~istringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseRepeatTimes(uint64_t a1, const std::string *a2)
{
  if (*(void *)(a1 + 8))
  {
    v49[0] = v49;
    v49[1] = v49;
    uint64_t v50 = 0;
    memset(&v48, 0, sizeof(v48));
    memset(&v47, 0, sizeof(v47));
    memset(&v46, 0, sizeof(v46));
    memset(v45, 0, 160);
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    *(_OWORD *)long long v38 = 0u;
    std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)v38, a2, 8);
    uint64_t v4 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v38, (uint64_t)&v48);
    if ((*((unsigned char *)v4 + *(void *)(*v4 - 24) + 32) & 5) != 0
      || (uint64_t v5 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v38, (uint64_t)&v47), (*((unsigned char *)v5 + *(void *)(*v5 - 24) + 32) & 5) != 0)|| (v6 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v38, (uint64_t)&v46), (*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0))
    {
      std::string::basic_string[abi:ne180100]<0>(&v28, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v7 = ims::error((uint64_t)&v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Repeat Times missing information: '", 35);
      *(unsigned char *)(v7 + 17) = 0;
      uint64_t v8 = *(void **)(v7 + 8);
      char v51 = 114;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v51, 1);
      *(unsigned char *)(v7 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"=", 1);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(void *)v7 + 32))(v7, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"'", 1);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      if (SBYTE7(v30) < 0) {
        operator delete(v28);
      }
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = 1;
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v35, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
    }
    else {
      std::string v35 = v48;
    }
    uint64_t TimeInSeconds = SDPParser::getTimeInSeconds((uint64_t)&v35);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v34, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
    }
    else {
      std::string v34 = v47;
    }
    uint64_t v13 = SDPParser::getTimeInSeconds((uint64_t)&v34);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v33, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
    }
    else {
      std::string v33 = v46;
    }
    uint64_t v14 = SDPParser::getTimeInSeconds((uint64_t)&v33);
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = v49[0];
    v15[1] = v49;
    uint64_t v15[2] = v14;
    void *v15 = v16;
    *(void *)(v16 + 8) = v15;
    v49[0] = v15;
    ++v50;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    while (1)
    {
      uint64_t v17 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v38, (uint64_t)&v46);
      if ((*((unsigned char *)v17 + *(void *)(*v17 - 24) + 32) & 5) != 0) {
        break;
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v32, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
      }
      else {
        std::string v32 = v46;
      }
      uint64_t v18 = SDPParser::getTimeInSeconds((uint64_t)&v32);
      uint64_t v19 = operator new(0x18uLL);
      v19[1] = v49;
      socklen_t v19[2] = v18;
      uint64_t v20 = v49[0];
      void *v19 = v49[0];
      *(void *)(v20 + 8) = v19;
      v49[0] = v19;
      ++v50;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v21 = *(void *)(a1 + 8);
    if (*(void *)(v21 + 336))
    {
      uint64_t v22 = *(void *)(v21 + 320);
      char v29 = 1;
      uint64_t v28 = &unk_1F20E67A8;
      *(void *)&long long v30 = TimeInSeconds;
      *((void *)&v30 + 1) = v13;
      std::list<unsigned long long>::list(v31, (uint64_t)v49);
      char v23 = operator new(0x48uLL);
      *char v23 = 0;
      v23[1] = 0;
      *((unsigned char *)v23 + 24) = 1;
      v23[2] = &unk_1F20E67A8;
      *((_OWORD *)v23 + 2) = v30;
      std::list<unsigned long long>::list(v23 + 6, (uint64_t)v31);
      v23[1] = v22 + 48;
      uint64_t v24 = *(void *)(v22 + 48);
      *char v23 = v24;
      *(void *)(v24 + 8) = v23;
      *(void *)(v22 + 48) = v23;
      ++*(void *)(v22 + 64);
      uint64_t v28 = &unk_1F20E67A8;
      std::__list_imp<unsigned long long>::clear(v31);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v28, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v25 = ims::error((uint64_t)&v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"Parsing of SDP_REPEAT_TIMES_TAG failed: '", 41);
      *(unsigned char *)(v25 + 17) = 0;
      uint64_t v26 = *(void **)(v25 + 8);
      char v51 = 114;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)&v51, 1);
      *(unsigned char *)(v25 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"=", 1);
      *(unsigned char *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(void *)v25 + 32))(v25, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"'", 1);
      *(unsigned char *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v25 + 17) = 0;
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      if (SBYTE7(v30) < 0) {
        operator delete(v28);
      }
      uint64_t v9 = 0;
    }
    v38[0] = *(void **)MEMORY[0x1E4FBA410];
    *(void **)((char *)v38 + *((void *)v38[0] - 3)) = *(void **)(MEMORY[0x1E4FBA410] + 24);
    *(void *)&long long v39 = MEMORY[0x1E4FBA470] + 16;
    if (SBYTE7(v44) < 0) {
      operator delete((void *)v43);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1C878E270](&v45[8]);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    std::__list_imp<unsigned long long>::clear(v49);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(&v28, "");
    uint64_t v10 = ims::error((uint64_t)v38, (uint64_t)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(unsigned char *)(v10 + 17) = 0;
    int v11 = *(void **)(v10 + 8);
    LOBYTE(v49[0]) = 114;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v49, 1);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(void *)v10 + 32))(v10, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (SBYTE7(v30) < 0) {
      operator delete(v28);
    }
    if (SBYTE7(v39) < 0) {
      operator delete(v38[0]);
    }
    return 0;
  }
  return v9;
}

void sub_1C5229BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::istringstream::~istringstream((uint64_t)&a53);
  if (*(char *)(v58 - 161) < 0) {
    operator delete(*(void **)(v58 - 184));
  }
  if (*(char *)(v58 - 137) < 0) {
    operator delete(*(void **)(v58 - 160));
  }
  if (*(char *)(v58 - 113) < 0) {
    operator delete(*(void **)(v58 - 136));
  }
  std::__list_imp<unsigned long long>::clear((void *)(v58 - 112));
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseTimeZone(uint64_t a1, const std::string *a2)
{
  if (*(void *)(a1 + 8))
  {
    v36[0] = v36;
    v36[1] = v36;
    uint64_t v37 = 0;
    memset(v35, 0, 160);
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)std::string __p = 0u;
    std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)__p, a2, 8);
    memset(&v27, 0, sizeof(v27));
    std::string::basic_string[abi:ne180100]<0>(&v27, "");
    memset(&v26, 0, sizeof(v26));
    std::string::basic_string[abi:ne180100]<0>(&v26, "");
    while (1)
    {
      uint64_t v4 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)__p, (uint64_t)&v27);
      if ((*((unsigned char *)v4 + *(void *)(*v4 - 24) + 32) & 5) != 0) {
        break;
      }
      uint64_t v5 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)__p, (uint64_t)&v26);
      if ((*((unsigned char *)v5 + *(void *)(*v5 - 24) + 32) & 5) != 0) {
        break;
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v25, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
      }
      else {
        std::string v25 = v27;
      }
      uint64_t TimeInSeconds = SDPParser::getTimeInSeconds((uint64_t)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v24, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
      }
      else {
        std::string v24 = v26;
      }
      uint64_t v7 = SDPParser::getTimeInSeconds((uint64_t)&v24);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      uint64_t v8 = operator new(0x20uLL);
      v8[2] = TimeInSeconds;
      void v8[3] = v7;
      uint64_t v9 = v36[0];
      *uint64_t v8 = v36[0];
      v8[1] = v36;
      *(void *)(v9 + 8) = v8;
      v36[0] = v8;
      ++v37;
    }
    uint64_t v10 = *(void *)(a1 + 8);
    char v22 = 1;
    std::list<std::pair<unsigned long long,long>>::list(v23, (uint64_t)v36);
    char v40 = 1;
    long long v39 = &unk_1F20E6838;
    std::list<std::pair<unsigned long long,long>>::list(v41, (uint64_t)v23);
    std::optional<SDPTimeZone>::operator=[abi:ne180100]<SDPTimeZone,void>(v10 + 344, (uint64_t)&v39);
    long long v39 = &unk_1F20E6838;
    std::__list_imp<unsigned long long>::clear(v41);
    uint64_t v21 = &unk_1F20E6838;
    std::__list_imp<unsigned long long>::clear(v23);
    if (!v37) {
      goto LABEL_30;
    }
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    }
    std::string::size_type v12 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    if (!size) {
      goto LABEL_23;
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v12 = v26.__r_.__value_.__l.__size_;
    }
    if (v12)
    {
LABEL_23:
      uint64_t v13 = 1;
      if ((*((unsigned char *)&v26.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_42:
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        __p[0] = *(void **)MEMORY[0x1E4FBA410];
        *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA410] + 24);
        *(void *)&long long v29 = MEMORY[0x1E4FBA470] + 16;
        if (SBYTE7(v34) < 0) {
          operator delete((void *)v33);
        }
        std::streambuf::~streambuf();
        std::istream::~istream();
        MEMORY[0x1C878E270](&v35[8]);
        std::__list_imp<unsigned long long>::clear(v36);
        return v13;
      }
    }
    else
    {
LABEL_30:
      std::string::basic_string[abi:ne180100]<0>(&v39, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(&v21, "");
      uint64_t v16 = ims::error((uint64_t)&v39, (uint64_t)&v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Timezone adjustment offset list ", 32);
      *(unsigned char *)(v16 + 17) = 0;
      if (v37) {
        uint64_t v17 = " missing offset";
      }
      else {
        uint64_t v17 = "missing";
      }
      if (v37) {
        uint64_t v18 = 15;
      }
      else {
        uint64_t v18 = 7;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)v17, v18);
      *(unsigned char *)(v16 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)": '", 3);
      *(unsigned char *)(v16 + 17) = 0;
      uint64_t v19 = *(void **)(v16 + 8);
      char v38 = 122;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v38, 1);
      *(unsigned char *)(v16 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"=", 1);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(void *)v16 + 32))(v16, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"'", 1);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if (SHIBYTE(v23[0]) < 0) {
        operator delete(v21);
      }
      if (SHIBYTE(v41[0]) < 0) {
        operator delete(v39);
      }
      uint64_t v13 = 0;
      if ((*((unsigned char *)&v26.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_42;
      }
    }
    operator delete(v26.__r_.__value_.__l.__data_);
    goto LABEL_42;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(&v39, "");
  uint64_t v14 = ims::error((uint64_t)__p, (uint64_t)&v39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"SDPModel is null: '", 19);
  *(unsigned char *)(v14 + 17) = 0;
  uint64_t v15 = *(void **)(v14 + 8);
  LOBYTE(v21) = 122;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v21, 1);
  *(unsigned char *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"=", 1);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, const std::string *))(*(void *)v14 + 32))(v14, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"'", 1);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  if (SHIBYTE(v41[0]) < 0) {
    operator delete(v39);
  }
  if (SBYTE7(v29) < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1C522A370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (*(char *)(v49 - 81) < 0) {
    operator delete(*(void **)(v49 - 104));
  }
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  std::istringstream::~istringstream((uint64_t)&a44);
  std::__list_imp<unsigned long long>::clear((void *)(v49 - 136));
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseEncryptionKey(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v8, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::error((uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"SDP_ENCRYPTION_KEY_TAG NOT IMPLEMENTED: '", 41);
  *(unsigned char *)(v3 + 17) = 0;
  uint64_t v4 = *(void **)(v3 + 8);
  char v10 = 107;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v10, 1);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"=", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 32))(v3, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"'", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  return 1;
}

void sub_1C522A5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPParser::parseAttribute(uint64_t a1, std::string *this)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    std::string::size_type v5 = std::string::find(this, 58, 0);
    memset(&v29, 0, sizeof(v29));
    std::string::basic_string(&v29, this, 0, v5, (std::allocator<char> *)&v25);
    memset(&v28, 0, sizeof(v28));
    if (v5 != -1)
    {
      std::string::basic_string(&v25, this, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v30);
      std::string v28 = v25;
    }
    uint64_t v6 = qword_1EBBDBC78;
    if (!qword_1EBBDBC78) {
      goto LABEL_17;
    }
    char v7 = &qword_1EBBDBC78;
    do
    {
      char v8 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v6 + 32), (void **)&v29.__r_.__value_.__l.__data_);
      if (v8 >= 0) {
        char v9 = (uint64_t *)v6;
      }
      else {
        char v9 = (uint64_t *)(v6 + 8);
      }
      if (v8 >= 0) {
        char v7 = (uint64_t *)v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
    if (v7 == &qword_1EBBDBC78
      || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v29, (void **)v7 + 4) & 0x80) != 0)
    {
LABEL_17:
      uint64_t v14 = *(void *)(a1 + 8);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v24, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      }
      else {
        std::string v24 = v29;
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v28;
      }
      SDPUnsupportedAttribute::SDPUnsupportedAttribute((uint64_t)&v25, (uint64_t)&v24, (long long *)&__p);
      uint64_t v18 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPUnsupportedAttribute>(v14 + 392, 0, 0, (uint64_t)&v25);
      v18[1] = v14 + 392;
      uint64_t v19 = *(void *)(v14 + 392);
      void *v18 = v19;
      *(void *)(v19 + 8) = v18;
      *(void *)(v14 + 392) = v18;
      ++*(void *)(v14 + 408);
      SDPUnsupportedAttribute::~SDPUnsupportedAttribute((void **)&v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      v25.__r_.__value_.__r.__words[0] = 0;
      char v10 = std::__tree<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>>>::__find_equal<std::string>((uint64_t **)&v25, (void **)&v29.__r_.__value_.__l.__data_);
      int v11 = (uint64_t *)*v10;
      if (!*v10)
      {
        std::string::size_type v12 = (uint64_t **)v10;
        int v11 = (uint64_t *)operator new(0x40uLL);
        uint64_t v13 = (std::string *)(v11 + 4);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v13, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
          v11[6] = v29.__r_.__value_.__r.__words[2];
        }
        v11[7] = 0;
        std::__tree<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>>>::__insert_node_at((uint64_t)v25.__r_.__value_.__l.__data_, v12, v11);
      }
      uint64_t v20 = (void (*)(uint64_t *, std::string *))v11[7];
      uint64_t v21 = *(std::__shared_weak_count **)(a1 + 16);
      uint64_t v26 = *(void *)(a1 + 8);
      std::string v27 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v20(&v26, &v28);
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v17 = (void *)v29.__r_.__value_.__r.__words[0];
      goto LABEL_41;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(&v29, "");
    uint64_t v15 = ims::error((uint64_t)&v25, (uint64_t)&v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(unsigned char *)(v15 + 17) = 0;
    uint64_t v16 = *(void **)(v15 + 8);
    v28.__r_.__value_.__s.__data_[0] = 97;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v28, 1);
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"=", 1);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v15 + 32))(v15, this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v17 = (void *)v25.__r_.__value_.__r.__words[0];
LABEL_41:
      operator delete(v17);
    }
  }
  return v3 != 0;
}

void sub_1C522A9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  operator delete(v35);
  if (*(char *)(v36 - 89) < 0) {
    operator delete(*(void **)(v36 - 112));
  }
  if (*(char *)(v36 - 57) < 0) {
    operator delete(*(void **)(v36 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMedia(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 8))
  {
    int v72 = 1;
    int v75 = 0;
    long long v82 = 0u;
    memset(&v81[2], 0, 32);
    v79[2] = 0;
    v80[2] = 0;
    int v71 = &unk_1F20DB408;
    long long v73 = 0uLL;
    uint64_t v74 = 0;
    v76[0] = v76;
    v76[1] = v76;
    long long v77 = 0u;
    long long v78 = 0u;
    v79[0] = v79;
    v79[1] = v79;
    v80[0] = v80;
    v80[1] = v80;
    v81[0] = v81;
    v81[1] = v81;
    SDPPreconditionTable::SDPPreconditionTable((SDPPreconditionTable *)&v81[3], 1);
    char v3 = 0;
    LOBYTE(v82) = 0;
    *((void *)&v82 + 1) = 0;
    uint64_t v63 = *(void **)(MEMORY[0x1E4FBA410] + 24);
    int v64 = (void *)*MEMORY[0x1E4FBA410];
    int v4 = 109;
    int v62 = 1;
    while (1)
    {
      if (v4 == 109 && (v3 & 1) != 0)
      {
        std::string::size_type v5 = *(void **)(a1 + 8);
        *((void *)&v82 + 1) = v5;
        unint64_t v6 = v5[53];
        if (v6 >= v5[54])
        {
          uint64_t v7 = std::vector<SDPMedia>::__push_back_slow_path<SDPMedia const&>(v5 + 52, (const SDPMedia *)&v71);
        }
        else
        {
          SDPMedia::SDPMedia((SDPMedia *)v5[53], (const SDPMedia *)&v71);
          uint64_t v7 = v6 + 200;
          v5[53] = v6 + 200;
        }
        v5[53] = v7;
      }
      else if (v4 != 109)
      {
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v8 = *(void *)(a2 + 8);
        }
        uint64_t v9 = qword_1EBBDBC90;
        if (v8) {
          BOOL v10 = qword_1EBBDBC90 == 0;
        }
        else {
          BOOL v10 = 1;
        }
        if (v10) {
          goto LABEL_24;
        }
        int v11 = &qword_1EBBDBC90;
        uint64_t v12 = qword_1EBBDBC90;
        do
        {
          int v13 = *(_DWORD *)(v12 + 32);
          BOOL v14 = v13 < v4;
          if (v13 >= v4) {
            uint64_t v15 = (uint64_t *)v12;
          }
          else {
            uint64_t v15 = (uint64_t *)(v12 + 8);
          }
          if (!v14) {
            int v11 = (uint64_t *)v12;
          }
          uint64_t v12 = *v15;
        }
        while (*v15);
        if (v11 == &qword_1EBBDBC90 || v4 < *((_DWORD *)v11 + 8))
        {
LABEL_24:
          std::string::basic_string[abi:ne180100]<0>(v92, "sdp.parser");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          uint64_t v16 = ims::warn((uint64_t)v92, (uint64_t)&__p);
          uint64_t v17 = v16;
          uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
          if ((v18 & 0x80u) != 0) {
            uint64_t v18 = *(void *)(a2 + 8);
          }
          if (v18) {
            uint64_t v19 = "Media parser not found";
          }
          else {
            uint64_t v19 = "Nothing to parse";
          }
          uint64_t v20 = *(void **)(v16 + 8);
          if (v18) {
            uint64_t v21 = 22;
          }
          else {
            uint64_t v21 = 16;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v19, v21);
          *(unsigned char *)(v17 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)": '", 3);
          *(unsigned char *)(v17 + 17) = 0;
          char v22 = *(void **)(v17 + 8);
          LOBYTE(v89) = 109;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&v89, 1);
          *(unsigned char *)(v17 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"=", 1);
          *(unsigned char *)(v17 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 32))(v17, a2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"'", 1);
          *(unsigned char *)(v17 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v17 + 17) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SBYTE7(v93) < 0) {
            operator delete(v92[0]);
          }
          int v62 = 0;
        }
        else
        {
          do
          {
            while (1)
            {
              uint64_t v23 = v9;
              int v24 = *(_DWORD *)(v9 + 32);
              if (v24 <= v4) {
                break;
              }
              uint64_t v9 = *(void *)v23;
              if (!*(void *)v23)
              {
                uint64_t v69 = (uint64_t **)v23;
                goto LABEL_126;
              }
            }
            if (v24 >= v4) {
              goto LABEL_127;
            }
            uint64_t v9 = *(void *)(v23 + 8);
          }
          while (v9);
          uint64_t v69 = (uint64_t **)(v23 + 8);
LABEL_126:
          uint64_t v54 = operator new(0x30uLL);
          v54[8] = v4;
          *((void *)v54 + 5) = 0;
          std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>>>::__insert_node_at(v23, v69, (uint64_t *)v54);
          uint64_t v23 = (uint64_t)v54;
LABEL_127:
          v62 &= (*(uint64_t (**)(uint64_t, void **, uint64_t))(v23 + 40))(a1, &v71, a2);
        }
        goto LABEL_123;
      }
      memset(v99, 0, 160);
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      *(_OWORD *)long long v92 = 0u;
      std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)v92, (const std::string *)a2, 8);
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      uint64_t v91 = 0;
      memset(&__str, 0, sizeof(__str));
      int v85 = 0;
      uint64_t v86 = 0;
      uint64_t v87 = 0;
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v92, (uint64_t)&v89);
      uint64_t v25 = HIBYTE(v91);
      if (v91 < 0) {
        uint64_t v25 = v90;
      }
      if (v25)
      {
        uint64_t v26 = 0;
        while (1)
        {
          if (v91 >= 0) {
            std::string v27 = (const char *)&v89;
          }
          else {
            std::string v27 = (const char *)v89;
          }
          int v28 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string v29 = (void *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          int v31 = strcasecmp(v27, (const char *)p_p);
          if (v28 < 0) {
            operator delete(v29);
          }
          if (!v31) {
            break;
          }
          if (++v26 == 7) {
            goto LABEL_61;
          }
        }
        if (v26) {
          goto LABEL_66;
        }
LABEL_61:
        std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parser");
        std::string::basic_string[abi:ne180100]<0>(v83, "");
        uint64_t v32 = ims::error((uint64_t)&__p, (uint64_t)v83);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"Unknown MediaType - ", 20);
        *(unsigned char *)(v32 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(void *)v32 + 32))(v32, &v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)": '", 3);
        *(unsigned char *)(v32 + 17) = 0;
        long long v33 = *(void **)(v32 + 8);
        char v100 = 109;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v100, 1);
        *(unsigned char *)(v32 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"=", 1);
        *(unsigned char *)(v32 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 32))(v32, a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"'", 1);
        *(unsigned char *)(v32 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v32 + 17) = 0;
        if (v84 < 0) {
          operator delete(v83[0]);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      LODWORD(v26) = 0;
LABEL_66:
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v92, (uint64_t)&__str);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = __str.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        uint64_t v36 = memchr(p_str, 47, size);
        if (v36) {
          std::string::size_type v37 = v36 - (unsigned char *)p_str;
        }
        else {
          std::string::size_type v37 = -1;
        }
        std::string::basic_string(&__p, &__str, 0, v37, (std::allocator<char> *)v83);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          char v38 = (void *)__p.__r_.__value_.__r.__words[0];
          uint64_t v68 = atol(__p.__r_.__value_.__l.__data_);
          operator delete(v38);
        }
        else
        {
          uint64_t v68 = atol((const char *)&__p);
        }
        if (v37 != -1)
        {
          std::string::basic_string(&__p, &__str, v37 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v83);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v53 = (void *)__p.__r_.__value_.__r.__words[0];
            uint64_t v67 = atol(__p.__r_.__value_.__l.__data_);
            operator delete(v53);
          }
          else
          {
            uint64_t v67 = atol((const char *)&__p);
          }
          goto LABEL_84;
        }
      }
      else
      {
        uint64_t v68 = 0;
      }
      uint64_t v67 = 0;
LABEL_84:
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v92, (uint64_t)&v85);
      uint64_t v39 = HIBYTE(v87);
      if (v87 < 0) {
        uint64_t v39 = v86;
      }
      if (v39)
      {
        uint64_t v40 = 0;
        while (1)
        {
          if (v87 >= 0) {
            long long v41 = (const char *)&v85;
          }
          else {
            long long v41 = (const char *)v85;
          }
          int v42 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          long long v43 = (void *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v44 = &__p;
          }
          else {
            long long v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          int v45 = strcasecmp(v41, (const char *)v44);
          if (v42 < 0) {
            operator delete(v43);
          }
          if (!v45) {
            break;
          }
          if (++v40 == 9) {
            goto LABEL_106;
          }
        }
        if (*(unsigned char *)(a1 + 1) || (v40 - 7) > 1)
        {
          if (v40) {
            goto LABEL_111;
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parser");
          std::string::basic_string[abi:ne180100]<0>(v83, "");
          uint64_t v46 = ims::error((uint64_t)&__p, (uint64_t)v83);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)"Unexpected protocol ", 20);
          *(unsigned char *)(v46 + 17) = 0;
          (*(void (**)(uint64_t, void **))(*(void *)v46 + 32))(v46, &v85);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)" (", 2);
          *(unsigned char *)(v46 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v46 + 17) = 0;
          std::string v47 = *(void **)(v46 + 8);
          char v100 = 41;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)&v100, 1);
          *(unsigned char *)(v46 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v46 + 17) = 0;
          if (v84 < 0) {
            operator delete(v83[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
LABEL_106:
        std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parser");
        std::string::basic_string[abi:ne180100]<0>(v83, "");
        uint64_t v48 = ims::error((uint64_t)&__p, (uint64_t)v83);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"Unknown ProtocolType - ", 23);
        *(unsigned char *)(v48 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(void *)v48 + 32))(v48, &v85);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)": '", 3);
        *(unsigned char *)(v48 + 17) = 0;
        uint64_t v49 = *(void **)(v48 + 8);
        char v100 = 109;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)&v100, 1);
        *(unsigned char *)(v48 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"=", 1);
        *(unsigned char *)(v48 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 32))(v48, a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"'", 1);
        *(unsigned char *)(v48 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v48 + 17) = 0;
        if (v84 < 0) {
          operator delete(v83[0]);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      LODWORD(v40) = 0;
LABEL_111:
      SDPMedia::SDPMedia((uint64_t)&__p, v26, v68, v67, v40);
      SDPMedia::operator=((uint64_t)&v71, (uint64_t)&__p);
      SDPMedia::~SDPMedia((SDPMedia *)&__p);
      LOWORD(v83[0]) = 0;
      while (1)
      {
        uint64_t v50 = (void *)MEMORY[0x1C878DFE0](v92, v83);
        if ((*((unsigned char *)v50 + *(void *)(*v50 - 24) + 32) & 5) != 0) {
          break;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DB438;
        LOWORD(__p.__r_.__value_.__r.__words[1]) = v83[0];
        char v102 = 1;
        uint64_t v104 = 0;
        uint64_t v105 = 0;
        uint64_t v103 = 0;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F20E7518;
        __int16 v106 = 255;
        uint64_t v108 = 0;
        uint64_t v109 = 0;
        uint64_t v107 = 0;
        __int16 v110 = 0;
        __int16 v111 = 1;
        v112[1] = 1;
        v112[5] = 255;
        memset(&v112[2], 0, 24);
        v112[0] = &unk_1F20B3A68;
        memset(&v112[6], 0, 24);
        int v113 = 0;
        char v51 = operator new(0xF0uLL);
        *char v51 = 0;
        v51[1] = 0;
        SDPMediaFormatInfo::SDPMediaFormatInfo((uint64_t)(v51 + 2), (uint64_t)&__p);
        uint64_t v52 = v76[0];
        *char v51 = v76[0];
        v51[1] = v76;
        *(void *)(v52 + 8) = v51;
        v76[0] = v51;
        *(void *)&long long v77 = v77 + 1;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DB438;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v112);
        SDPMediaRTPMap::~SDPMediaRTPMap((void **)&__p.__r_.__value_.__r.__words[2]);
      }
      if (SHIBYTE(v87) < 0) {
        operator delete(v85);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v91) < 0) {
        operator delete(v89);
      }
      v92[0] = v64;
      *(void **)((char *)v92 + *((void *)v64 - 3)) = v63;
      *(void *)&long long v93 = MEMORY[0x1E4FBA470] + 16;
      if (SBYTE7(v98) < 0) {
        operator delete((void *)v97);
      }
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x1C878E270](&v99[8]);
      char v3 = 1;
LABEL_123:
      int v4 = SDPParser::parseHelper(a3, (uint64_t *)a2);
      if (v4 == 110)
      {
        if (v3)
        {
          int v55 = *(void **)(a1 + 8);
          *((void *)&v82 + 1) = v55;
          unint64_t v56 = v55[53];
          if (v56 >= v55[54])
          {
            uint64_t v57 = std::vector<SDPMedia>::__push_back_slow_path<SDPMedia const&>(v55 + 52, (const SDPMedia *)&v71);
          }
          else
          {
            SDPMedia::SDPMedia((SDPMedia *)v55[53], (const SDPMedia *)&v71);
            uint64_t v57 = v56 + 200;
            v55[53] = v56 + 200;
          }
          v55[53] = v57;
        }
        SDPMedia::~SDPMedia((SDPMedia *)&v71);
        char v60 = v62;
        return v60 & 1;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v92, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v58 = ims::error((uint64_t)v92, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v58 + 8), (uint64_t)"SDPModel is null: '", 19);
  *(unsigned char *)(v58 + 17) = 0;
  uint64_t v59 = *(void **)(v58 + 8);
  LOBYTE(v71) = 109;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)&v71, 1);
  *(unsigned char *)(v58 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v58 + 8), (uint64_t)"=", 1);
  *(unsigned char *)(v58 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 32))(v58, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v58 + 8), (uint64_t)"'", 1);
  *(unsigned char *)(v58 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v58 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v93) < 0) {
    operator delete(v92[0]);
  }
  char v60 = 0;
  return v60 & 1;
}

void sub_1C522B900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  SDPMedia::~SDPMedia((SDPMedia *)va);
  _Unwind_Resume(a1);
}

uint64_t std::map<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<std::string,BOOL (*)(SDPMedia &,std::string&)>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string),SDPParser::str_caseless_compare,std::allocator<std::pair<std::string const,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<std::string,unsigned long long>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<std::string,EVSBandwidthTypes>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void SDPParser::parse(BOOL *a1@<X0>, const std::string *a2@<X1>, _WORD *a3@<X2>, void *a4@<X8>)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  std::string::size_type v37 = 0;
  _ZNSt3__115allocate_sharedB8ne180100I8SDPModelNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v36);
  *(void *)(v36 + 32) = -1;
  LOWORD(v35) = *a3;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  memset(v31, 0, sizeof(v31));
  *(_OWORD *)std::string __p = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v24 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v24, a2, 8);
  while (1)
  {
    int v8 = SDPParser::parseHelper(&v24, (uint64_t *)&v32);
    int v9 = v8;
    if (v8 == 110) {
      break;
    }
    if (v34 >= 0) {
      uint64_t v10 = HIBYTE(v34);
    }
    else {
      uint64_t v10 = v33;
    }
    uint64_t v11 = qword_1EBBDBC60;
    if (v10) {
      BOOL v12 = qword_1EBBDBC60 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      goto LABEL_28;
    }
    int v13 = &qword_1EBBDBC60;
    uint64_t v14 = qword_1EBBDBC60;
    do
    {
      int v15 = *(_DWORD *)(v14 + 32);
      BOOL v16 = v15 < v8;
      if (v15 >= v8) {
        uint64_t v17 = (uint64_t *)v14;
      }
      else {
        uint64_t v17 = (uint64_t *)(v14 + 8);
      }
      if (!v16) {
        int v13 = (uint64_t *)v14;
      }
      uint64_t v14 = *v17;
    }
    while (*v17);
    if (v13 == &qword_1EBBDBC60 || v8 < *((_DWORD *)v13 + 8)) {
      goto LABEL_28;
    }
    do
    {
      while (1)
      {
        uint64_t v18 = v11;
        int v19 = *(_DWORD *)(v11 + 32);
        if (v19 <= v8) {
          break;
        }
        uint64_t v11 = *(void *)v18;
        if (!*(void *)v18)
        {
          uint64_t v20 = (uint64_t **)v18;
          goto LABEL_25;
        }
      }
      if (v19 >= v8) {
        goto LABEL_26;
      }
      uint64_t v11 = *(void *)(v18 + 8);
    }
    while (v11);
    uint64_t v20 = (uint64_t **)(v18 + 8);
LABEL_25:
    uint64_t v21 = operator new(0x30uLL);
    v21[8] = v9;
    *((void *)v21 + 5) = 0;
    std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::__insert_node_at(v18, v20, (uint64_t *)v21);
    uint64_t v18 = (uint64_t)v21;
LABEL_26:
    if (!(*(unsigned int (**)(uint64_t *, void **, long long *))(v18 + 40))(&v35, &v32, &v24)) {
LABEL_28:
    }
      BOOL v22 = 0;
    else {
      BOOL v22 = *a1;
    }
    *a1 = v22;
  }
  uint64_t v23 = v37;
  *a4 = v36;
  a4[1] = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v24 = *MEMORY[0x1E4FBA410];
  *(void *)((char *)&v24 + *(void *)(v24 - AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v25 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v30) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270]((char *)v31 + 8);
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
}

void sub_1C522BF14(_Unwind_Exception *exception_object)
{
  char v3 = *(std::__shared_weak_count **)(v1 - 88);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::istringstream::basic_istringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x1E4FBA490] + 64;
  a1[15] = MEMORY[0x1E4FBA490] + 64;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA410] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA410] + 8);
  *a1 = v9;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24)) = v8;
  a1[1] = 0;
  uint64_t v10 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v10, a1 + 2);
  uint64_t v11 = MEMORY[0x1E4FBA490] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *a1 = v11;
  a1[15] = v6;
  std::stringbuf::basic_stringbuf[abi:ne180100](v7, a2, a3 | 8);
  return a1;
}

void sub_1C522C0A8(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1C878E270](v1);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseHelper(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  memset(&__str, 0, sizeof(__str));
  if (*((char *)a2 + 23) < 0)
  {
    *(unsigned char *)*a2 = 0;
    a2[1] = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *((unsigned char *)a2 + 23) = 0;
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  int v4 = std::locale::use_facet((const std::locale *)&v12, MEMORY[0x1E4FBA258]);
  unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale((std::locale *)&v12);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)&__str, v5);
  ims::chomp(&__str, "\r\n\t ", 3);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    uint64_t v8 = p_str->__r_.__value_.__s.__data_[0];
    if (*((char *)v2 + 23) < 0)
    {
      v2[1] = 0;
      uint64_t v9 = (unsigned char *)*v2;
    }
    else
    {
      *((unsigned char *)v2 + 23) = 0;
      uint64_t v9 = v2;
    }
    unsigned char *v9 = 0;
    std::string::size_type v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v10 = __str.__r_.__value_.__l.__size_;
    }
    if (v10 < 3)
    {
      if (v8 == 115)
      {
        if (*((char *)v2 + 23) < 0)
        {
          v2[1] = 1;
          uint64_t v2 = (uint64_t *)*v2;
        }
        else
        {
          *((unsigned char *)v2 + 23) = 1;
        }
        *(_WORD *)uint64_t v2 = 32;
        uint64_t v8 = 115;
      }
    }
    else
    {
      std::string::basic_string(&v12, &__str, 2uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
      if (*((char *)v2 + 23) < 0) {
        operator delete((void *)*v2);
      }
      *(std::string *)uint64_t v2 = v12;
    }
  }
  else
  {
    uint64_t v8 = 110;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_1C522C2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  char v20 = 0;
  MEMORY[0x1C878DFB0](&v20, a1, 0);
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  uint64_t v7 = std::locale::use_facet(&v19, MEMORY[0x1E4FBA258]);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    uint64_t v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    std::string v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    char v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_14;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1C522C4FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C522C4B8);
  }
  __cxa_rethrow();
}

void sub_1C522C598(_Unwind_Exception *a1)
{
}

__n128 SDPModel::setOrigin(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 68) = *(void *)(a2 + 28);
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 40));
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 64);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 72));
  __n128 result = *(__n128 *)(a2 + 96);
  *(__n128 *)(a1 + 136) = result;
  return result;
}

void SDPParser::parseConnectionHelper(const std::string *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  memset(&v54, 0, sizeof(v54));
  char v51 = 0;
  size_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v48 = 0;
  size_t v49 = 0;
  uint64_t v50 = 0;
  memset(v47, 0, sizeof(v47));
  *(_OWORD *)int v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v40 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v40, a1, 8);
  uint64_t v6 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v40, (uint64_t)&v51);
  if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0
    || (uint64_t v7 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v40, (uint64_t)&v48), (*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0)|| (v8 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v40, (uint64_t)&v54), (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::error((uint64_t)v38, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"SDPConnection is missing something: '", 37);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(void *)v9 + 32))(v9, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v9 + 17) = 0;
    uint64_t v8 = (uint64_t *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v37 < 0) {
      operator delete(__p[0]);
    }
    if (v39 < 0) {
      operator delete(v38[0]);
    }
  }
  uint64_t v10 = 0;
  char v11 = 1;
  while (1)
  {
    char v12 = v11;
    uint64_t v8 = SDPConnection::networkTypeLookup((SDPConnection *)v8);
    int v13 = &v8[3 * v10];
    uint64_t v14 = HIBYTE(v53);
    if (v53 >= 0) {
      size_t v15 = HIBYTE(v53);
    }
    else {
      size_t v15 = v52;
    }
    uint64_t v16 = *((unsigned __int8 *)v13 + 23);
    int v17 = (char)v16;
    if ((v16 & 0x80u) != 0) {
      uint64_t v16 = v13[1];
    }
    if (v15 != v16) {
      goto LABEL_25;
    }
    uint64_t v18 = v17 >= 0 ? &v8[3 * v10] : (uint64_t *)*v13;
    if (v53 < 0) {
      break;
    }
    if (!HIBYTE(v53)) {
      goto LABEL_27;
    }
    std::locale v19 = &v51;
    while (*(unsigned __int8 *)v19 == *(unsigned __int8 *)v18)
    {
      std::locale v19 = (void **)((char *)v19 + 1);
      uint64_t v18 = (uint64_t *)((char *)v18 + 1);
      if (!--v14) {
        goto LABEL_27;
      }
    }
LABEL_25:
    char v11 = 0;
    uint64_t v10 = 1;
    if ((v12 & 1) == 0) {
      goto LABEL_28;
    }
  }
  uint64_t v8 = (uint64_t *)memcmp(v51, v18, v52);
  if (v8) {
    goto LABEL_25;
  }
LABEL_27:
  if ((v12 & 1) == 0)
  {
    int v21 = 1;
    goto LABEL_34;
  }
LABEL_28:
  std::string::basic_string[abi:ne180100]<0>(v38, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v20 = ims::error((uint64_t)v38, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"SDPConnection: NetworkType set to kNetworkTypeUnknown: '", 56);
  *(unsigned char *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, const std::string *))(*(void *)v20 + 32))(v20, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"'", 1);
  *(unsigned char *)(v20 + 17) = 0;
  uint64_t v8 = (uint64_t *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v20 + 17) = 0;
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  int v21 = 0;
LABEL_34:
  uint64_t v22 = 0;
  while (2)
  {
    uint64_t v8 = SDPConnection::addressTypeLookup((SDPConnection *)v8);
    uint64_t v23 = &v8[3 * v22];
    uint64_t v24 = HIBYTE(v50);
    if (v50 >= 0) {
      size_t v25 = HIBYTE(v50);
    }
    else {
      size_t v25 = v49;
    }
    uint64_t v26 = *((unsigned __int8 *)v23 + 23);
    int v27 = (char)v26;
    if ((v26 & 0x80u) != 0) {
      uint64_t v26 = v23[1];
    }
    if (v25 != v26) {
      goto LABEL_51;
    }
    if (v27 >= 0) {
      long long v28 = &v8[3 * v22];
    }
    else {
      long long v28 = (uint64_t *)*v23;
    }
    if ((v50 & 0x8000000000000000) == 0)
    {
      if (!HIBYTE(v50)) {
        break;
      }
      std::string v29 = &v48;
      while (*(unsigned __int8 *)v29 == *(unsigned __int8 *)v28)
      {
        std::string v29 = (void **)((char *)v29 + 1);
        long long v28 = (uint64_t *)((char *)v28 + 1);
        if (!--v24) {
          goto LABEL_53;
        }
      }
      goto LABEL_51;
    }
    uint64_t v8 = (uint64_t *)memcmp(v48, v28, v49);
    if (v8)
    {
LABEL_51:
      if (++v22 == 3) {
        goto LABEL_54;
      }
      continue;
    }
    break;
  }
LABEL_53:
  if (v22) {
    goto LABEL_59;
  }
LABEL_54:
  std::string::basic_string[abi:ne180100]<0>(v38, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v30 = ims::error((uint64_t)v38, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"SDPConnection: AddressType set to kAddressTypeUnknown: '", 56);
  *(unsigned char *)(v30 + 17) = 0;
  (*(void (**)(uint64_t, const std::string *))(*(void *)v30 + 32))(v30, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"'", 1);
  *(unsigned char *)(v30 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v30 + 17) = 0;
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  LODWORD(v22) = 0;
LABEL_59:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v35, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  }
  else {
    std::string v35 = v54;
  }
  char v31 = *a2;
  char v32 = a2[1];
  *(unsigned char *)(a3 + 8) = 1;
  *(void *)a3 = &unk_1F20CB730;
  *(_DWORD *)(a3 + 12) = v21;
  *(_DWORD *)(a3 + 16) = v22;
  uint64_t v33 = (std::string *)(a3 + 24);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v33, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    int v34 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
    *(unsigned char *)(a3 + 48) = v31;
    *(unsigned char *)(a3 + 49) = v32;
    if (v34 < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    *(void *)(a3 + 40) = *((void *)&v35.__r_.__value_.__l + 2);
    *(unsigned char *)(a3 + 48) = v31;
    *(unsigned char *)(a3 + 49) = v32;
  }
  *(void *)&long long v40 = *MEMORY[0x1E4FBA410];
  *(void *)((char *)&v40 + *(void *)(v40 - AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v41 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v46) < 0) {
    operator delete(v45[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270]((char *)v47 + 8);
  if (SHIBYTE(v50) < 0) {
    operator delete(v48);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete(v51);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
}

void sub_1C522CCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::istringstream::~istringstream((uint64_t)&a28);
  if (*(char *)(v28 - 113) < 0) {
    operator delete(*(void **)(v28 - 136));
  }
  if (*(char *)(v28 - 89) < 0) {
    operator delete(*(void **)(v28 - 112));
  }
  if (*(char *)(v28 - 65) < 0) {
    operator delete(*(void **)(v28 - 88));
  }
  _Unwind_Resume(a1);
}

uint64_t SDPParser::getTimeInSeconds(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (v1)
  {
    char v23 = 0;
    uint64_t v22 = 0;
    memset(v21, 0, 160);
    *(_OWORD *)std::locale v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)uint64_t v14 = 0u;
    std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)v14, (const std::string *)a1, 8);
    char v3 = (void *)MEMORY[0x1C878DFF0](v14, &v22);
    if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::error((uint64_t)v24, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Unable to parse time: ", 22);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, a1);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      uint64_t v5 = 0;
      goto LABEL_25;
    }
    uint64_t v7 = std::operator>>[abi:ne180100]<char,std::char_traits<char>>(v14, &v23);
    if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) == 0)
    {
      switch(v23)
      {
        case 'm':
          uint64_t v10 = 60 * v22;
LABEL_23:
          uint64_t v22 = v10;
          break;
        case 'h':
          uint64_t v8 = v22;
          uint64_t v9 = 3600;
          goto LABEL_22;
        case 'd':
          uint64_t v8 = v22;
          uint64_t v9 = 86400;
LABEL_22:
          uint64_t v10 = v8 * v9;
          goto LABEL_23;
      }
    }
    uint64_t v5 = v22;
LABEL_25:
    v14[0] = *(void **)MEMORY[0x1E4FBA410];
    *(void **)((char *)v14 + *((void *)v14[0] - 3)) = *(void **)(MEMORY[0x1E4FBA410] + 24);
    *(void *)&long long v15 = MEMORY[0x1E4FBA470] + 16;
    if (SBYTE7(v20) < 0) {
      operator delete(v19[0]);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1C878E270](&v21[8]);
    return v5;
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(v24, "");
  uint64_t v6 = ims::warn((uint64_t)v14, (uint64_t)v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Nothing to parse as time.", 25);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (SBYTE7(v15) < 0) {
    operator delete(v14[0]);
  }
  return 0;
}

void sub_1C522D15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::operator>>[abi:ne180100]<char,std::char_traits<char>>(void *a1, unsigned char *a2)
{
  char v8 = 0;
  MEMORY[0x1C878DFB0](&v8, a1, 0);
  if (v8)
  {
    uint64_t v4 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v5 = (unsigned char *)v4[3];
    if (v5 == (unsigned char *)v4[4])
    {
      LODWORD(v4) = (*(uint64_t (**)(void *))(*v4 + 80))(v4);
      if (v4 == -1)
      {
        int v6 = 6;
        goto LABEL_6;
      }
    }
    else
    {
      v4[3] = v5 + 1;
      LOBYTE(v4) = *v5;
    }
    int v6 = 0;
    *a2 = (_BYTE)v4;
LABEL_6:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v6);
  }
  return a1;
}

void sub_1C522D2B8(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C522D278);
  }
  __cxa_rethrow();
}

void sub_1C522D330(_Unwind_Exception *a1)
{
}

void _ZNSt3__115allocate_sharedB8ne180100I8SDPModelNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x1D0uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1F20B6750;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *((void *)v2 + 57) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  SDPModel::SDPModel((SDPModel *)(v2 + 24));
  *a1 = v2 + 24;
  a1[1] = v2;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, (void *)v2 + 5, (uint64_t)(v2 + 24));
}

void std::__shared_ptr_emplace<SDPModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B6750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SDPModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B6750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SDPModel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void SDPModel::SDPModel(SDPModel *this)
{
  *((unsigned char *)this + 8) = 1;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F20DEF68;
  *((unsigned char *)this + 48) = 1;
  *((void *)this + 5) = &unk_1F20E7748;
  *((unsigned char *)this + 64) = 1;
  *((void *)this + 7) = &unk_1F20CB730;
  *((_DWORD *)this + 17) = 0;
  *((_DWORD *)this + 18) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = 0;
  *((_WORD *)this + 52) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((void *)this + 28) = (char *)this + 224;
  *((void *)this + 29) = (char *)this + 224;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = (char *)this + 248;
  *((void *)this + 32) = (char *)this + 248;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = (char *)this + 272;
  *((void *)this + 35) = (char *)this + 272;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = (char *)this + 296;
  *((void *)this + 38) = (char *)this + 296;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = (char *)this + 320;
  *((void *)this + 41) = (char *)this + 320;
  *((void *)this + 42) = 0;
  *((unsigned char *)this + 344) = 0;
  *((unsigned char *)this + 384) = 0;
  *((void *)this + 49) = (char *)this + 392;
  *((void *)this + 50) = (char *)this + 392;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
}

std::string *SDPOrigin::SDPOrigin(std::string *a1, uint64_t a2, long long *a3, std::string::size_type a4, std::string::size_type a5)
{
  a1->__r_.__value_.__s.__data_[8] = 1;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E7748;
  SDPConnection::SDPConnection((uint64_t)&a1->__r_.__value_.__r.__words[2], a2);
  uint64_t v9 = a1 + 3;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    a1[3].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  a1[4].__r_.__value_.__r.__words[0] = a4;
  a1[4].__r_.__value_.__l.__size_ = a5;
  return a1;
}

void sub_1C522D644(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 16) = &unk_1F20CB730;
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*(void **)(v1 + 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPConnection::SDPConnection(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20CB730;
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  uint64_t v4 = (std::string *)(a1 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  return a1;
}

void SDPOrigin::~SDPOrigin(void **this)
{
  *this = &unk_1F20E7748;
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  this[2] = &unk_1F20CB730;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
}

{
  uint64_t vars8;

  SDPOrigin::~SDPOrigin(this);
  JUMPOUT(0x1C878E320);
}

void std::__list_imp<SDPRepeatTime>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    char v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        long long v5 = (uint64_t *)v3[1];
        (*(void (**)(void))v3[2])();
        operator delete(v3);
        char v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void *std::list<unsigned long long>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    int v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      uint64_t v7[2] = v8;
      *uint64_t v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      int v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1C522D8A0(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned long long>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::optional<SDPTimeZone>::operator=[abi:ne180100]<SDPTimeZone,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    if (a1 != a2) {
      std::list<std::pair<unsigned long long,long>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,long>,void *>,std::__list_const_iterator<std::pair<unsigned long long,long>,void *>>((uint64_t *)(a1 + 16), *(void *)(a2 + 24), a2 + 16);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 8) = 1;
    *(void *)a1 = &unk_1F20E6838;
    std::list<std::pair<unsigned long long,long>>::list((void *)(a1 + 16), a2 + 16);
    *(unsigned char *)(a1 + 40) = 1;
  }
  return a1;
}

void *std::list<std::pair<unsigned long long,long>>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    int v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x20uLL);
      v7[1] = *(_OWORD *)(v3 + 16);
      *(void *)uint64_t v7 = v6;
      *((void *)v7 + 1) = a1;
      *((void *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      int v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1C522D9C0(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned long long>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::list<std::pair<unsigned long long,long>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,long>,void *>,std::__list_const_iterator<std::pair<unsigned long long,long>,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = (uint64_t *)a1[1]; a2 != a3 && i != a1; uint64_t i = (uint64_t *)i[1])
  {
    *((_OWORD *)i + 1) = *(_OWORD *)(a2 + 16);
    a2 = *(void *)(a2 + 8);
  }
  if (i == a1) {
    return std::list<std::pair<unsigned long long,long>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,long>,void *>,std::__list_const_iterator<std::pair<unsigned long long,long>,void *>>((uint64_t)a1, a1, a2, a3);
  }
  else {
    return std::list<std::pair<unsigned long long,long>>::erase((uint64_t)a1, i, a1);
  }
}

uint64_t *std::list<std::pair<unsigned long long,long>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,long>,void *>,std::__list_const_iterator<std::pair<unsigned long long,long>,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x20uLL);
    uint64_t v9 = v8;
    *uint64_t v8 = 0;
    v8[1] = 0;
    *((_OWORD *)v8 + 1) = *(_OWORD *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      char v12 = v8;
      do
      {
        uint64_t v8 = operator new(0x20uLL);
        *uint64_t v8 = v12;
        v8[1] = 0;
        *((_OWORD *)v8 + 1) = *(_OWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        char v12 = v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    void *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1C522DAF8(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1C522DB18(_Unwind_Exception *a1)
{
}

uint64_t *std::list<std::pair<unsigned long long,long>>::erase(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  if (__p != a3)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = *__p;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    do
    {
      uint64_t v7 = (uint64_t *)__p[1];
      --*(void *)(a1 + 16);
      operator delete(__p);
      std::string __p = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

uint64_t SDPUnsupportedAttribute::SDPUnsupportedAttribute(uint64_t a1, uint64_t a2, long long *a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20E5C78;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::string *)(a1 + 16) = __p;
  }
  *(void *)a1 = &unk_1F20B6838;
  uint64_t v5 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(a1 + 56) = *((void *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1C522DCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)uint64_t v14 = v16;
  if (*(char *)(v14 + 39) < 0) {
    operator delete(*v15);
  }
  _Unwind_Resume(exception_object);
}

void SDPUnsupportedAttribute::~SDPUnsupportedAttribute(void **this)
{
  SDPUnsupportedAttribute::~SDPUnsupportedAttribute(this);
  JUMPOUT(0x1C878E320);
}

{
  *this = &unk_1F20B6838;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

void SDPUnsupportedAttribute::value(SDPUnsupportedAttribute *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((void *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 7);
  }
}

void std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::clear(unsigned int *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = (unsigned int *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (unsigned int *)*((void *)v3 + 1);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>,(std::__variant_detail::_Trait)1>::~__dtor(v3 + 4);
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

unsigned int *std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>,(std::__variant_detail::_Trait)1>::~__dtor(unsigned int *a1)
{
  uint64_t v2 = a1[30];
  if (v2 != -1) {
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix[v2]((int)&v4, (SDPRTCPXR *)a1);
  }
  a1[30] = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, SDPMediaCrypto *this)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
}

void SDPRTCPXR::~SDPRTCPXR(void **this)
{
  *this = &unk_1F20BC9D8;
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  uint64_t v3 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)this[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  SDPRTCPXR::~SDPRTCPXR(this);
  JUMPOUT(0x1C878E320);
}

void SDPMediaCandidate::~SDPMediaCandidate(void **this)
{
  *this = &unk_1F20B8848;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  SDPMediaCandidate::~SDPMediaCandidate(this);
  JUMPOUT(0x1C878E320);
}

void SDPMediaCrypto::~SDPMediaCrypto(SDPMediaCrypto *this)
{
  *(void *)this = &unk_1F20DBE20;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  SDPMediaCrypto::~SDPMediaCrypto(this);
  JUMPOUT(0x1C878E320);
}

void SDPMediaRTPMap::~SDPMediaRTPMap(void **this)
{
  *this = &unk_1F20E7518;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  SDPMediaRTPMap::~SDPMediaRTPMap(this);
  JUMPOUT(0x1C878E320);
}

void std::__list_imp<SDPMediaFormatInfo>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        (*(void (**)(void))v3[2])();
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t std::vector<SDPMedia>::__push_back_slow_path<SDPMedia const&>(uint64_t *a1, const SDPMedia *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x147AE147AE147AELL) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8F5C28F5C28F5C29 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xA3D70A3D70A3D7) {
    unint64_t v9 = 0x147AE147AE147AELL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPMedia>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (SDPMedia *)&v10[200 * v4];
  uint64_t v16 = &v10[200 * v9];
  SDPMedia::SDPMedia(v14, a2);
  long long v15 = (char *)v14 + 200;
  std::vector<SDPMedia>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<SDPMedia>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1C522E41C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SDPMedia>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SDPMedia>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SDPMedia>,std::reverse_iterator<SDPMedia*>,std::reverse_iterator<SDPMedia*>,std::reverse_iterator<SDPMedia*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SDPMedia>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x147AE147AE147AFLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(200 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SDPMedia>,std::reverse_iterator<SDPMedia*>,std::reverse_iterator<SDPMedia*>,std::reverse_iterator<SDPMedia*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 200;
  while (a3 + v10 != a5)
  {
    char v12 = (SDPMedia *)(v11 + v10);
    v10 -= 200;
    SDPMedia::SDPMedia(v12, (const SDPMedia *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<SDPMedia>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 200);
    *(void *)(a1 + 16) = i - 200;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)_MergedGlobals_1)
  {
    _MergedGlobals_1 = *(void *)_MergedGlobals_1;
    a3 = *a2;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBBDBC60, a3);
  ++qword_1EBBDBC68;
  return result;
}

void std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*a1);
    std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)qword_1EBBDBC70)
  {
    qword_1EBBDBC70 = *(void *)qword_1EBBDBC70;
    a3 = *a2;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBBDBC78, a3);
  ++qword_1EBBDBC80;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>>>::__find_equal<std::string>(uint64_t **a1, void **a2)
{
  uint64_t v3 = &qword_1EBBDBC78;
  uint64_t v4 = qword_1EBBDBC78;
  if (qword_1EBBDBC78)
  {
    uint64_t v6 = &qword_1EBBDBC78;
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t *)v4;
        uint64_t v7 = (void *)(v4 + 32);
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)(v4 + 32)) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = *v3;
        uint64_t v6 = v3;
        if (!*v3) {
          goto LABEL_10;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2) & 0x80) == 0) {
        break;
      }
      uint64_t v6 = v3 + 1;
      uint64_t v4 = v3[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = &qword_1EBBDBC78;
  }
LABEL_10:
  *a1 = v3;
  return v6;
}

uint64_t *std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)qword_1EBBDBC88)
  {
    qword_1EBBDBC88 = *(void *)qword_1EBBDBC88;
    a3 = *a2;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBBDBC90, a3);
  ++qword_1EBBDBC98;
  return result;
}

void *std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::__find_equal<std::string>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v6 = (const char *)a3;
    }
    else {
      uint64_t v6 = *(const char **)a3;
    }
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v10 = (void *)v4[4];
        uint64_t v8 = v4 + 4;
        unint64_t v9 = v10;
        uint64_t v11 = (const char *)(*((char *)v8 + 23) >= 0 ? v8 : v9);
        if ((strcasecmp(v6, v11) & 0x80000000) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_15;
        }
      }
      if ((strcasecmp(v11, v6) & 0x80000000) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_15:
  *a2 = v7;
  return v5;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_1C522E948(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  char v11 = 0;
  MEMORY[0x1C878DFB0](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1C522EAD0(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C522EA90);
  }
  __cxa_rethrow();
}

void sub_1C522EB4C(_Unwind_Exception *a1)
{
}

void *std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = operator new(0x28uLL);
  *uint64_t v7 = a2;
  v7[1] = a3;
  uint64_t v8 = (std::string *)(v7 + 2);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    void v7[4] = *(void *)(a4 + 16);
  }
  return v7;
}

void sub_1C522EBC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__list_imp<SDPTiming>::__create_node[abi:ne180100]<SDPTiming>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPTiming *a4)
{
  uint64_t v7 = operator new(0x48uLL);
  *uint64_t v7 = a2;
  v7[1] = a3;
  SDPTiming::SDPTiming((SDPTiming *)(v7 + 2), a4);
  return v7;
}

void sub_1C522EC28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void SDPTiming::SDPTiming(SDPTiming *this, const SDPTiming *a2)
{
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F20E67F0;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  uint64_t v3 = (char *)this + 32;
  *((void *)this + 4) = (char *)this + 32;
  *((void *)this + 5) = (char *)this + 32;
  *((void *)this + 6) = 0;
  uint64_t v4 = (char *)a2 + 32;
  for (uint64_t i = *((void *)a2 + 5); (char *)i != v4; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v6 = std::__list_imp<SDPRepeatTime>::__create_node[abi:ne180100]<SDPRepeatTime const&>((uint64_t)v3, 0, 0, i + 16);
    uint64_t v7 = *((void *)this + 4);
    *uint64_t v6 = v7;
    v6[1] = v3;
    *(void *)(v7 + 8) = v6;
    *((void *)this + 4) = v6;
    ++*((void *)this + 6);
  }
}

void sub_1C522ECE8(_Unwind_Exception *a1)
{
  std::__list_imp<SDPRepeatTime>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__list_imp<SDPRepeatTime>::__create_node[abi:ne180100]<SDPRepeatTime const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = operator new(0x48uLL);
  *uint64_t v7 = a2;
  v7[1] = a3;
  *((unsigned char *)v7 + 24) = 1;
  uint64_t v7[2] = &unk_1F20E67A8;
  *((_OWORD *)v7 + 2) = *(_OWORD *)(a4 + 16);
  std::list<unsigned long long>::list(v7 + 6, a4 + 32);
  return v7;
}

void sub_1C522ED7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPUnsupportedAttribute>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = operator new(0x90uLL);
  *uint64_t v7 = a2;
  v7[1] = a3;
  std::__variant_detail::__alt<1ul,SDPUnsupportedAttribute>::__alt[abi:ne180100]<SDPUnsupportedAttribute>((uint64_t)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 1;
  return v7;
}

void sub_1C522EDE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__alt<1ul,SDPUnsupportedAttribute>::__alt[abi:ne180100]<SDPUnsupportedAttribute>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)a1 = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  *(void *)a1 = &unk_1F20B6838;
  uint64_t v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1C522EEC8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_SDPParser_cpp()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  v142[4] = *MEMORY[0x1E4F143B8];
  qword_1EBBDBC60 = 0;
  uint64_t v2 = &qword_1EBBDBC60;
  qword_1EBBDBC68 = 0;
  _MergedGlobals_1 = (uint64_t)&qword_1EBBDBC60;
  while (1)
  {
    uint64_t v3 = (_OWORD *)((char *)&unk_1F20B6600 + 16 * v1);
    if (v2 == &qword_1EBBDBC60)
    {
      uint64_t v5 = &qword_1EBBDBC60;
LABEL_10:
      if (v0)
      {
        int v9 = (uint64_t **)(v5 + 1);
        if (v5[1]) {
          goto LABEL_23;
        }
      }
      else
      {
LABEL_21:
        int v9 = (uint64_t **)&qword_1EBBDBC60;
        uint64_t v5 = &qword_1EBBDBC60;
      }
LABEL_22:
      char v12 = (uint64_t *)operator new(0x30uLL);
      *((_OWORD *)v12 + 2) = *v3;
      std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::__insert_node_at((uint64_t)v5, v9, v12);
      goto LABEL_23;
    }
    long long v4 = (uint64_t *)v0;
    if (v0)
    {
      do
      {
        uint64_t v5 = v4;
        long long v4 = (uint64_t *)v4[1];
      }
      while (v4);
    }
    else
    {
      long long v6 = &qword_1EBBDBC60;
      do
      {
        uint64_t v5 = (uint64_t *)v6[2];
        BOOL v7 = *v5 == (void)v6;
        long long v6 = v5;
      }
      while (v7);
    }
    int v8 = *(_DWORD *)v3;
    if (*((_DWORD *)v5 + 8) < *(_DWORD *)v3) {
      goto LABEL_10;
    }
    if (!v0) {
      goto LABEL_21;
    }
    uint64_t v10 = v0;
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (uint64_t *)v10;
        int v11 = *(_DWORD *)(v10 + 32);
        if (v11 <= v8) {
          break;
        }
        uint64_t v10 = *v5;
        int v9 = (uint64_t **)v5;
        if (!*v5) {
          goto LABEL_22;
        }
      }
      if (v11 >= v8) {
        break;
      }
      uint64_t v10 = v5[1];
      if (!v10)
      {
        int v9 = (uint64_t **)(v5 + 1);
        goto LABEL_22;
      }
    }
LABEL_23:
    if (++v1 == 15) {
      break;
    }
    uint64_t v2 = (uint64_t *)_MergedGlobals_1;
    uint64_t v0 = qword_1EBBDBC60;
  }
  __cxa_atexit((void (*)(void *))std::map<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>::~map[abi:ne180100], &_MergedGlobals_1, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(v103, "sendrecv");
  uint64_t v104 = (uint64_t)SDPParser::parseSessionSendRecvAttribute;
  std::string::basic_string[abi:ne180100]<0>(v105, "sendonly");
  uint64_t v106 = (uint64_t)SDPParser::parseSessionSendOnlyAttribute;
  std::string::basic_string[abi:ne180100]<0>(v107, "recvonly");
  uint64_t v108 = (uint64_t)SDPParser::parseSessionRecvOnlyAttribute;
  std::string::basic_string[abi:ne180100]<0>(v109, "inactive");
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v110 = (uint64_t)SDPParser::parseSessionInactiveAttribute;
  qword_1EBBDBC78 = 0;
  long long v15 = &qword_1EBBDBC78;
  qword_1EBBDBC80 = 0;
  qword_1EBBDBC70 = (uint64_t)&qword_1EBBDBC78;
  while (1)
  {
    uint64_t v16 = (const std::string::value_type **)&v103[4 * v14];
    long long v99 = 0;
    if (v15 == &qword_1EBBDBC78)
    {
      long long v17 = &qword_1EBBDBC78;
      if (v13) {
        goto LABEL_31;
      }
    }
    else
    {
      if (v13)
      {
        do
        {
          long long v17 = (uint64_t *)v13;
          uint64_t v13 = *(void *)(v13 + 8);
        }
        while (v13);
      }
      else
      {
        std::locale v19 = &qword_1EBBDBC78;
        do
        {
          long long v17 = (uint64_t *)v19[2];
          BOOL v7 = *v17 == (void)v19;
          std::locale v19 = v17;
        }
        while (v7);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17 + 4, (void **)&v103[4 * v14]) & 0x80) == 0)
      {
        long long v18 = std::__tree<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>>>::__find_equal<std::string>(&v99, (void **)&v103[4 * v14]);
LABEL_36:
        if (*v18) {
          goto LABEL_44;
        }
        goto LABEL_40;
      }
      if (qword_1EBBDBC78)
      {
LABEL_31:
        long long v99 = v17;
        long long v18 = v17 + 1;
        goto LABEL_36;
      }
    }
    long long v99 = &qword_1EBBDBC78;
    long long v18 = &qword_1EBBDBC78;
LABEL_40:
    long long v20 = (uint64_t *)operator new(0x40uLL);
    int v21 = (std::string *)(v20 + 4);
    if (*((char *)v16 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v21, *v16, (std::string::size_type)v16[1]);
    }
    else
    {
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
      v20[6] = (uint64_t)v16[2];
    }
    v20[7] = v103[4 * v14 + 3];
    std::__tree<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>>>::__insert_node_at((uint64_t)v99, (uint64_t **)v18, v20);
LABEL_44:
    if (++v14 == 4) {
      break;
    }
    long long v15 = (uint64_t *)qword_1EBBDBC70;
    uint64_t v13 = qword_1EBBDBC78;
  }
  for (uint64_t i = 0; i != -16; i -= 4)
  {
    if (SHIBYTE(v109[i + 2]) < 0) {
      operator delete((void *)v109[i]);
    }
  }
  __cxa_atexit((void (*)(void *))std::map<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>::~map[abi:ne180100], &qword_1EBBDBC70, &dword_1C51D1000);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  qword_1EBBDBC90 = 0;
  qword_1EBBDBC98 = 0;
  char v25 = &qword_1EBBDBC90;
  qword_1EBBDBC88 = (uint64_t)&qword_1EBBDBC90;
  while (2)
  {
    uint64_t v26 = (int *)((char *)&unk_1F20B66F0 + 16 * v24);
    if (v25 == &qword_1EBBDBC90)
    {
      uint64_t v28 = &qword_1EBBDBC90;
      goto LABEL_59;
    }
    int v27 = (uint64_t *)v23;
    if (v23)
    {
      do
      {
        uint64_t v28 = v27;
        int v27 = (uint64_t *)v27[1];
      }
      while (v27);
    }
    else
    {
      std::string v29 = &qword_1EBBDBC90;
      do
      {
        uint64_t v28 = (uint64_t *)v29[2];
        BOOL v7 = *v28 == (void)v29;
        std::string v29 = v28;
      }
      while (v7);
    }
    int v30 = *v26;
    if (*((_DWORD *)v28 + 8) >= *v26)
    {
      if (v23)
      {
        uint64_t v32 = v23;
        while (1)
        {
          while (1)
          {
            uint64_t v28 = (uint64_t *)v32;
            int v33 = *(_DWORD *)(v32 + 32);
            if (v33 <= v30) {
              break;
            }
            uint64_t v32 = *v28;
            char v31 = (uint64_t **)v28;
            if (!*v28) {
              goto LABEL_71;
            }
          }
          if (v33 >= v30) {
            goto LABEL_72;
          }
          uint64_t v32 = v28[1];
          if (!v32)
          {
            char v31 = (uint64_t **)(v28 + 1);
            goto LABEL_71;
          }
        }
      }
LABEL_70:
      char v31 = (uint64_t **)&qword_1EBBDBC90;
      uint64_t v28 = &qword_1EBBDBC90;
      goto LABEL_71;
    }
LABEL_59:
    if (!v23) {
      goto LABEL_70;
    }
    char v31 = (uint64_t **)(v28 + 1);
    if (!v28[1])
    {
LABEL_71:
      int v34 = (uint64_t *)operator new(0x30uLL);
      *((_OWORD *)v34 + 2) = *(_OWORD *)v26;
      std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>>>::__insert_node_at((uint64_t)v28, v31, v34);
    }
LABEL_72:
    if (++v24 != 5)
    {
      char v25 = (uint64_t *)qword_1EBBDBC88;
      uint64_t v23 = qword_1EBBDBC90;
      continue;
    }
    break;
  }
  __cxa_atexit((void (*)(void *))std::map<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>::~map[abi:ne180100], &qword_1EBBDBC88, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(v103, "sendrecv");
  uint64_t v104 = (uint64_t)SDPParser::parseMediaSendRecvAttribute;
  std::string::basic_string[abi:ne180100]<0>(v105, "sendonly");
  uint64_t v106 = (uint64_t)SDPParser::parseMediaSendOnlyAttribute;
  std::string::basic_string[abi:ne180100]<0>(v107, "recvonly");
  uint64_t v108 = (uint64_t)SDPParser::parseMediaRecvOnlyAttribute;
  std::string::basic_string[abi:ne180100]<0>(v109, "inactive");
  uint64_t v110 = (uint64_t)SDPParser::parseMediaInactiveAttribute;
  std::string::basic_string[abi:ne180100]<0>(v111, "ptime");
  uint64_t v112 = (uint64_t)SDPParser::parseMediaPacketTimeAttribute;
  std::string::basic_string[abi:ne180100]<0>(v113, "maxptime");
  uint64_t v114 = (uint64_t)SDPParser::parseMediaMaxPacketTimeAttribute;
  std::string::basic_string[abi:ne180100]<0>(v115, "candidate");
  uint64_t v116 = (uint64_t)SDPParser::parseMediaCandidateAttribute;
  std::string::basic_string[abi:ne180100]<0>(v117, "crypto");
  uint64_t v118 = (uint64_t)SDPParser::parseMediaCryptoAttribute;
  std::string::basic_string[abi:ne180100]<0>(v119, "3ge2ae");
  uint64_t v120 = (uint64_t)SDPParser::parseMediaEndToAccessEdgeProtection;
  std::string::basic_string[abi:ne180100]<0>(v121, "rtpmap");
  uint64_t v122 = (uint64_t)SDPParser::parseMediaRTPMapAttribute;
  std::string::basic_string[abi:ne180100]<0>(v123, "fmtp");
  uint64_t v124 = (uint64_t)SDPParser::parseMediaFormatParamsAttribute;
  std::string::basic_string[abi:ne180100]<0>(v125, "curr");
  uint64_t v126 = (uint64_t)SDPParser::parseMediaPreconditionCurrentAttribute;
  std::string::basic_string[abi:ne180100]<0>(v127, "des");
  uint64_t v128 = (uint64_t)SDPParser::parseMediaPreconditionDesiredAttribute;
  std::string::basic_string[abi:ne180100]<0>(v129, "conf");
  uint64_t v130 = (uint64_t)SDPParser::parseMediaPreconditionConfirmedAttribute;
  std::string::basic_string[abi:ne180100]<0>(v131, "accept-types");
  uint64_t v132 = (uint64_t)SDPParser::parseMediaAcceptTypesAttribute;
  std::string::basic_string[abi:ne180100]<0>(v133, "accept-wrapped-types");
  uint64_t v134 = (uint64_t)SDPParser::parseMediaAcceptWrappedTypesAttribute;
  std::string::basic_string[abi:ne180100]<0>(v135, "path");
  uint64_t v136 = (uint64_t)SDPParser::parseMediaPathAttribute;
  std::string::basic_string[abi:ne180100]<0>(v137, "setup");
  uint64_t v138 = (uint64_t)SDPParser::parseMediaSetupAttribute;
  std::string::basic_string[abi:ne180100]<0>(v139, "fingerprint");
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v140 = (uint64_t)SDPParser::parseMediaFingerprintAttribute;
  qword_1EBBDB458 = 0;
  qword_1EBBDB450 = 0;
  char v37 = &qword_1EBBDB450;
  SDPParser::mediaAttributeParsers = (uint64_t)&qword_1EBBDB450;
  while (2)
  {
    char v38 = (const std::string::value_type **)&v103[4 * v36];
    char v102 = 0;
    if (v37 == &qword_1EBBDB450)
    {
      char v39 = &qword_1EBBDB450;
      if (!v35)
      {
LABEL_88:
        char v102 = &qword_1EBBDB450;
        long long v40 = (uint64_t **)&qword_1EBBDB450;
        goto LABEL_89;
      }
LABEL_80:
      char v102 = v39;
      long long v40 = (uint64_t **)(v39 + 1);
      goto LABEL_85;
    }
    if (v35)
    {
      do
      {
        char v39 = (uint64_t *)v35;
        uint64_t v35 = *(void *)(v35 + 8);
      }
      while (v35);
    }
    else
    {
      long long v41 = &qword_1EBBDB450;
      do
      {
        char v39 = (uint64_t *)v41[2];
        BOOL v7 = *v39 == (void)v41;
        long long v41 = v39;
      }
      while (v7);
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v39 + 4, (void **)&v103[4 * v36]) & 0x80) != 0)
    {
      if (!qword_1EBBDB450) {
        goto LABEL_88;
      }
      goto LABEL_80;
    }
    long long v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&SDPParser::mediaAttributeParsers, &v102, (void **)&v103[4 * v36]);
LABEL_85:
    if (!*v40)
    {
LABEL_89:
      uint64_t v101 = 0;
      long long v42 = (uint64_t *)operator new(0x40uLL);
      long long v99 = v42;
      char v100 = &qword_1EBBDB450;
      long long v43 = (std::string *)(v42 + 4);
      if (*((char *)v38 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v43, *v38, (std::string::size_type)v38[1]);
      }
      else
      {
        *(_OWORD *)&v43->__r_.__value_.__l.__data_ = *(_OWORD *)v38;
        v42[6] = (uint64_t)v38[2];
      }
      v42[7] = v103[4 * v36 + 3];
      LOBYTE(v101) = 1;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::mediaAttributeParsers, (uint64_t)v102, v40, v42);
    }
    if (++v36 != 19)
    {
      char v37 = (uint64_t *)SDPParser::mediaAttributeParsers;
      uint64_t v35 = qword_1EBBDB450;
      continue;
    }
    break;
  }
  uint64_t v44 = 76;
  do
  {
    if (*((char *)&v101 + v44 * 8 + 7) < 0) {
      operator delete((&v99)[v44]);
    }
    v44 -= 4;
  }
  while (v44 * 8);
  __cxa_atexit((void (*)(void *))std::map<std::string,BOOL (*)(SDPMedia &,std::string&)>::~map[abi:ne180100], &SDPParser::mediaAttributeParsers, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(v103, "AMR");
  uint64_t v104 = (uint64_t)SDPParser::parseAMRFormatParameters;
  std::string::basic_string[abi:ne180100]<0>(v105, "AMR-WB");
  uint64_t v106 = (uint64_t)SDPParser::parseAMRWBFormatParameters;
  std::string::basic_string[abi:ne180100]<0>(v107, "EVS");
  uint64_t v108 = (uint64_t)SDPParser::parseEVSFormatParameters;
  std::string::basic_string[abi:ne180100]<0>(v109, "telephone-event");
  uint64_t v110 = (uint64_t)SDPParser::parseDTMFFormatParameters;
  std::string::basic_string[abi:ne180100]<0>(v111, "t140");
  uint64_t v112 = (uint64_t)SDPParser::parseTTYFormatParameters;
  std::string::basic_string[abi:ne180100]<0>(v113, "red");
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v114 = (uint64_t)SDPParser::parseTTYRedFormatParameters;
  qword_1EBBDB470 = 0;
  qword_1EBBDB468 = 0;
  std::string v47 = &qword_1EBBDB468;
  SDPParser::mediaFormatParameterParsers = (uint64_t)&qword_1EBBDB468;
  while (2)
  {
    uint64_t v48 = (const char **)&v103[4 * v46];
    char v102 = 0;
    if (v47 == &qword_1EBBDB468)
    {
      uint64_t v50 = &qword_1EBBDB468;
      goto LABEL_114;
    }
    size_t v49 = (uint64_t *)v45;
    if (v45)
    {
      do
      {
        uint64_t v50 = v49;
        size_t v49 = (uint64_t *)v49[1];
      }
      while (v49);
    }
    else
    {
      char v51 = &qword_1EBBDB468;
      do
      {
        uint64_t v50 = (uint64_t *)v51[2];
        BOOL v7 = *v50 == (void)v51;
        char v51 = v50;
      }
      while (v7);
    }
    if (*((char *)v50 + 55) >= 0) {
      size_t v52 = (const char *)(v50 + 4);
    }
    else {
      size_t v52 = (const char *)v50[4];
    }
    if (*((char *)v48 + 23) >= 0) {
      uint64_t v53 = (const char *)&v103[4 * v46];
    }
    else {
      uint64_t v53 = *v48;
    }
    if (strcasecmp(v52, v53) < 0)
    {
LABEL_114:
      if (v45)
      {
        char v102 = v50;
        std::string v54 = (uint64_t **)(v50 + 1);
      }
      else
      {
        char v102 = &qword_1EBBDB468;
        std::string v54 = (uint64_t **)&qword_1EBBDB468;
      }
    }
    else
    {
      std::string v54 = (uint64_t **)std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::__find_equal<std::string>((uint64_t)&SDPParser::mediaFormatParameterParsers, &v102, (uint64_t)&v103[4 * v46]);
    }
    if (!*v54)
    {
      uint64_t v101 = 0;
      int v55 = (uint64_t *)operator new(0x40uLL);
      long long v99 = v55;
      char v100 = &qword_1EBBDB468;
      unint64_t v56 = (std::string *)(v55 + 4);
      if (*((char *)v48 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v56, *v48, (std::string::size_type)v48[1]);
      }
      else
      {
        *(_OWORD *)&v56->__r_.__value_.__l.__data_ = *(_OWORD *)v48;
        v55[6] = (uint64_t)v48[2];
      }
      v55[7] = v103[4 * v46 + 3];
      LOBYTE(v101) = 1;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::mediaFormatParameterParsers, (uint64_t)v102, v54, v55);
    }
    if (++v46 != 6)
    {
      std::string v47 = (uint64_t *)SDPParser::mediaFormatParameterParsers;
      uint64_t v45 = qword_1EBBDB468;
      continue;
    }
    break;
  }
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v113[j + 2]) < 0) {
      operator delete((void *)v113[j]);
    }
  }
  __cxa_atexit((void (*)(void *))std::map<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string),SDPParser::str_caseless_compare,std::allocator<std::pair<std::string const,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::~map[abi:ne180100], &SDPParser::mediaFormatParameterParsers, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(v103, "dtx");
  uint64_t v104 = (uint64_t)SDPParser::parseEVSDTX;
  std::string::basic_string[abi:ne180100]<0>(v105, "dtx-recv");
  uint64_t v106 = (uint64_t)SDPParser::parseEVSDTXRecv;
  std::string::basic_string[abi:ne180100]<0>(v107, "hf-only");
  uint64_t v108 = (uint64_t)SDPParser::parseEVSHeaderFullOnly;
  std::string::basic_string[abi:ne180100]<0>(v109, "evs-mode-switch");
  uint64_t v110 = (uint64_t)SDPParser::parseEVSModeSwitch;
  std::string::basic_string[abi:ne180100]<0>(v111, "max-red");
  uint64_t v112 = (uint64_t)SDPParser::parseEVSMaxRed;
  std::string::basic_string[abi:ne180100]<0>(v113, "br");
  uint64_t v114 = (uint64_t)SDPParser::parseEVSBr;
  std::string::basic_string[abi:ne180100]<0>(v115, "br-send");
  uint64_t v116 = (uint64_t)SDPParser::parseEVSBrSend;
  std::string::basic_string[abi:ne180100]<0>(v117, "br-recv");
  uint64_t v118 = (uint64_t)SDPParser::parseEVSBrRecv;
  std::string::basic_string[abi:ne180100]<0>(v119, "bw");
  uint64_t v120 = (uint64_t)SDPParser::parseEVSBw;
  std::string::basic_string[abi:ne180100]<0>(v121, "bw-send");
  uint64_t v122 = (uint64_t)SDPParser::parseEVSBwSend;
  std::string::basic_string[abi:ne180100]<0>(v123, "bw-recv");
  uint64_t v124 = (uint64_t)SDPParser::parseEVSBwRecv;
  std::string::basic_string[abi:ne180100]<0>(v125, "ch-send");
  uint64_t v126 = (uint64_t)SDPParser::parseEVSChSend;
  std::string::basic_string[abi:ne180100]<0>(v127, "ch-recv");
  uint64_t v128 = (uint64_t)SDPParser::parseEVSChRecv;
  std::string::basic_string[abi:ne180100]<0>(v129, "cmr");
  uint64_t v130 = (uint64_t)SDPParser::parseEVSCmr;
  std::string::basic_string[abi:ne180100]<0>(v131, "ch-aw-recv");
  uint64_t v132 = (uint64_t)SDPParser::parseEVSChAwRecv;
  std::string::basic_string[abi:ne180100]<0>(v133, "mode-set");
  uint64_t v134 = (uint64_t)SDPParser::parseEVSModeSet;
  std::string::basic_string[abi:ne180100]<0>(v135, "mode-change-period");
  uint64_t v136 = (uint64_t)SDPParser::parseEVSModeChangePeriod;
  std::string::basic_string[abi:ne180100]<0>(v137, "mode-change-neighbor");
  uint64_t v138 = (uint64_t)SDPParser::parseEVSModeChangeNeighbor;
  std::string::basic_string[abi:ne180100]<0>(v139, "mode-change-capability");
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v140 = (uint64_t)SDPParser::parseEVSModeChangeCapability;
  qword_1EBBDB440 = 0;
  qword_1EBBDB438 = 0;
  char v60 = &qword_1EBBDB438;
  SDPParser::evsFormatParameters = (uint64_t)&qword_1EBBDB438;
  while (2)
  {
    uint64_t v61 = (const std::string::value_type **)&v103[4 * v59];
    char v102 = 0;
    if (v60 == &qword_1EBBDB438)
    {
      int v62 = &qword_1EBBDB438;
      if (!v58)
      {
LABEL_143:
        char v102 = &qword_1EBBDB438;
        uint64_t v63 = (uint64_t **)&qword_1EBBDB438;
        goto LABEL_144;
      }
LABEL_135:
      char v102 = v62;
      uint64_t v63 = (uint64_t **)(v62 + 1);
      goto LABEL_140;
    }
    if (v58)
    {
      do
      {
        int v62 = (uint64_t *)v58;
        uint64_t v58 = *(void *)(v58 + 8);
      }
      while (v58);
    }
    else
    {
      int v64 = &qword_1EBBDB438;
      do
      {
        int v62 = (uint64_t *)v64[2];
        BOOL v7 = *v62 == (void)v64;
        int v64 = v62;
      }
      while (v7);
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v62 + 4, (void **)&v103[4 * v59]) & 0x80) != 0)
    {
      if (!qword_1EBBDB438) {
        goto LABEL_143;
      }
      goto LABEL_135;
    }
    uint64_t v63 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&SDPParser::evsFormatParameters, &v102, (void **)&v103[4 * v59]);
LABEL_140:
    if (!*v63)
    {
LABEL_144:
      uint64_t v101 = 0;
      uint64_t v65 = (uint64_t *)operator new(0x40uLL);
      long long v99 = v65;
      char v100 = &qword_1EBBDB438;
      int v66 = (std::string *)(v65 + 4);
      if (*((char *)v61 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v66, *v61, (std::string::size_type)v61[1]);
      }
      else
      {
        *(_OWORD *)&v66->__r_.__value_.__l.__data_ = *(_OWORD *)v61;
        v65[6] = (uint64_t)v61[2];
      }
      v65[7] = v103[4 * v59 + 3];
      LOBYTE(v101) = 1;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::evsFormatParameters, (uint64_t)v102, v63, v65);
    }
    if (++v59 != 19)
    {
      char v60 = (uint64_t *)SDPParser::evsFormatParameters;
      uint64_t v58 = qword_1EBBDB438;
      continue;
    }
    break;
  }
  uint64_t v67 = 76;
  do
  {
    if (*((char *)&v101 + v67 * 8 + 7) < 0) {
      operator delete((&v99)[v67]);
    }
    v67 -= 4;
  }
  while (v67 * 8);
  __cxa_atexit((void (*)(void *))std::map<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>::~map[abi:ne180100], &SDPParser::evsFormatParameters, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(v103, "octet-align");
  uint64_t v104 = (uint64_t)SDPParser::parseAMROctetAligned;
  std::string::basic_string[abi:ne180100]<0>(v105, "mode-set");
  uint64_t v106 = (uint64_t)SDPParser::parseAMRModeset;
  std::string::basic_string[abi:ne180100]<0>(v107, "max-red");
  uint64_t v108 = (uint64_t)SDPParser::parseAMRMaxRedundancy;
  std::string::basic_string[abi:ne180100]<0>(v109, "mode-change-capability");
  uint64_t v110 = (uint64_t)SDPParser::parseAMRModeChangeCapability;
  std::string::basic_string[abi:ne180100]<0>(v111, "mode-change-period");
  uint64_t v112 = (uint64_t)SDPParser::parseAMRModeChangePeriod;
  std::string::basic_string[abi:ne180100]<0>(v113, "mode-change-neighbor");
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v114 = (uint64_t)SDPParser::parseAMRModeChangeNeighbor;
  qword_1EBBDB428 = 0;
  qword_1EBBDB420 = 0;
  int v70 = &qword_1EBBDB420;
  SDPParser::amrFormatParameters = (uint64_t)&qword_1EBBDB420;
  while (2)
  {
    int v71 = (const std::string::value_type **)&v103[4 * v69];
    char v102 = 0;
    if (v70 == &qword_1EBBDB420)
    {
      int v72 = &qword_1EBBDB420;
      if (!v68)
      {
LABEL_168:
        char v102 = &qword_1EBBDB420;
        long long v73 = (uint64_t **)&qword_1EBBDB420;
        goto LABEL_169;
      }
LABEL_160:
      char v102 = v72;
      long long v73 = (uint64_t **)(v72 + 1);
      goto LABEL_165;
    }
    if (v68)
    {
      do
      {
        int v72 = (uint64_t *)v68;
        uint64_t v68 = *(void *)(v68 + 8);
      }
      while (v68);
    }
    else
    {
      uint64_t v74 = &qword_1EBBDB420;
      do
      {
        int v72 = (uint64_t *)v74[2];
        BOOL v7 = *v72 == (void)v74;
        uint64_t v74 = v72;
      }
      while (v7);
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v72 + 4, (void **)&v103[4 * v69]) & 0x80) != 0)
    {
      if (!qword_1EBBDB420) {
        goto LABEL_168;
      }
      goto LABEL_160;
    }
    long long v73 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&SDPParser::amrFormatParameters, &v102, (void **)&v103[4 * v69]);
LABEL_165:
    if (!*v73)
    {
LABEL_169:
      uint64_t v101 = 0;
      int v75 = (uint64_t *)operator new(0x40uLL);
      long long v99 = v75;
      char v100 = &qword_1EBBDB420;
      uint64_t v76 = (std::string *)(v75 + 4);
      if (*((char *)v71 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v76, *v71, (std::string::size_type)v71[1]);
      }
      else
      {
        *(_OWORD *)&v76->__r_.__value_.__l.__data_ = *(_OWORD *)v71;
        v75[6] = (uint64_t)v71[2];
      }
      v75[7] = v103[4 * v69 + 3];
      LOBYTE(v101) = 1;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::amrFormatParameters, (uint64_t)v102, v73, v75);
    }
    if (++v69 != 6)
    {
      int v70 = (uint64_t *)SDPParser::amrFormatParameters;
      uint64_t v68 = qword_1EBBDB420;
      continue;
    }
    break;
  }
  for (uint64_t k = 0; k != -24; k -= 4)
  {
    if (SHIBYTE(v113[k + 2]) < 0) {
      operator delete((void *)v113[k]);
    }
  }
  __cxa_atexit((void (*)(void *))std::map<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>::~map[abi:ne180100], &SDPParser::amrFormatParameters, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(v103, "6.6");
  uint64_t v104 = 1;
  std::string::basic_string[abi:ne180100]<0>(v105, "8.85");
  uint64_t v106 = 2;
  std::string::basic_string[abi:ne180100]<0>(v107, "12.65");
  uint64_t v108 = 4;
  std::string::basic_string[abi:ne180100]<0>(v109, "14.25");
  uint64_t v110 = 8;
  std::string::basic_string[abi:ne180100]<0>(v111, "15.85");
  uint64_t v112 = 16;
  std::string::basic_string[abi:ne180100]<0>(v113, "18.25");
  uint64_t v114 = 32;
  std::string::basic_string[abi:ne180100]<0>(v115, "19.85");
  uint64_t v116 = 64;
  std::string::basic_string[abi:ne180100]<0>(v117, "23.05");
  uint64_t v118 = 128;
  std::string::basic_string[abi:ne180100]<0>(v119, "23.85");
  uint64_t v120 = 256;
  std::string::basic_string[abi:ne180100]<0>(v121, "5.9");
  uint64_t v122 = 512;
  std::string::basic_string[abi:ne180100]<0>(v123, "7.2");
  uint64_t v124 = 1024;
  std::string::basic_string[abi:ne180100]<0>(v125, "8");
  uint64_t v126 = 2048;
  std::string::basic_string[abi:ne180100]<0>(v127, "9.6");
  uint64_t v128 = 4096;
  std::string::basic_string[abi:ne180100]<0>(v129, "13.2");
  uint64_t v130 = 0x2000;
  std::string::basic_string[abi:ne180100]<0>(v131, "16.4");
  uint64_t v132 = 0x4000;
  std::string::basic_string[abi:ne180100]<0>(v133, "24.4");
  uint64_t v134 = 0x8000;
  std::string::basic_string[abi:ne180100]<0>(v135, "32");
  uint64_t v136 = 0x10000;
  std::string::basic_string[abi:ne180100]<0>(v137, "48");
  uint64_t v138 = 0x20000;
  std::string::basic_string[abi:ne180100]<0>(v139, "64");
  uint64_t v140 = 0x40000;
  std::string::basic_string[abi:ne180100]<0>(v141, "96");
  v141[3] = 0x80000;
  std::string::basic_string[abi:ne180100]<0>(v142, "128");
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  v142[3] = 0x100000;
  qword_1EBBDB3F8 = 0;
  qword_1EBBDB3F0 = 0;
  uint64_t v80 = &qword_1EBBDB3F0;
  SDPParser::evsBitrateMap = (uint64_t)&qword_1EBBDB3F0;
  while (2)
  {
    uint64_t v81 = (const std::string::value_type **)&v103[4 * v79];
    char v102 = 0;
    if (v80 == &qword_1EBBDB3F0)
    {
      long long v82 = &qword_1EBBDB3F0;
      if (!v78)
      {
LABEL_193:
        char v102 = &qword_1EBBDB3F0;
        long long v83 = (uint64_t **)&qword_1EBBDB3F0;
        goto LABEL_194;
      }
LABEL_185:
      char v102 = v82;
      long long v83 = (uint64_t **)(v82 + 1);
      goto LABEL_190;
    }
    if (v78)
    {
      do
      {
        long long v82 = (uint64_t *)v78;
        uint64_t v78 = *(void *)(v78 + 8);
      }
      while (v78);
    }
    else
    {
      char v84 = &qword_1EBBDB3F0;
      do
      {
        long long v82 = (uint64_t *)v84[2];
        BOOL v7 = *v82 == (void)v84;
        char v84 = v82;
      }
      while (v7);
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82 + 4, (void **)&v103[4 * v79]) & 0x80) != 0)
    {
      if (!qword_1EBBDB3F0) {
        goto LABEL_193;
      }
      goto LABEL_185;
    }
    long long v83 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&SDPParser::evsBitrateMap, &v102, (void **)&v103[4 * v79]);
LABEL_190:
    if (!*v83)
    {
LABEL_194:
      uint64_t v101 = 0;
      int v85 = (uint64_t *)operator new(0x40uLL);
      long long v99 = v85;
      char v100 = &qword_1EBBDB3F0;
      uint64_t v86 = (std::string *)(v85 + 4);
      if (*((char *)v81 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v86, *v81, (std::string::size_type)v81[1]);
      }
      else
      {
        *(_OWORD *)&v86->__r_.__value_.__l.__data_ = *(_OWORD *)v81;
        v85[6] = (uint64_t)v81[2];
      }
      v85[7] = v103[4 * v79 + 3];
      LOBYTE(v101) = 1;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::evsBitrateMap, (uint64_t)v102, v83, v85);
    }
    if (++v79 != 21)
    {
      uint64_t v80 = (uint64_t *)SDPParser::evsBitrateMap;
      uint64_t v78 = qword_1EBBDB3F0;
      continue;
    }
    break;
  }
  uint64_t v87 = 84;
  do
  {
    if (*((char *)&v101 + v87 * 8 + 7) < 0) {
      operator delete((&v99)[v87]);
    }
    v87 -= 4;
  }
  while (v87 * 8);
  __cxa_atexit((void (*)(void *))std::map<std::string,unsigned long long>::~map[abi:ne180100], &SDPParser::evsBitrateMap, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(v103, "nb");
  LODWORD(v104) = 0;
  std::string::basic_string[abi:ne180100]<0>(v105, "wb");
  LODWORD(v106) = 1;
  std::string::basic_string[abi:ne180100]<0>(v107, "swb");
  LODWORD(v108) = 3;
  std::string::basic_string[abi:ne180100]<0>(v109, "fb");
  LODWORD(v1SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = 5;
  std::string::basic_string[abi:ne180100]<0>(v111, "nb-wb");
  LODWORD(v112) = 2;
  std::string::basic_string[abi:ne180100]<0>(v113, "nb-swb");
  LODWORD(v114) = 4;
  std::string::basic_string[abi:ne180100]<0>(v115, "nb-fb");
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  LODWORD(v116) = 6;
  qword_1EBBDB410 = 0;
  qword_1EBBDB408 = 0;
  uint64_t v90 = &qword_1EBBDB408;
  SDPParser::evsBandwidthMap = (uint64_t)&qword_1EBBDB408;
  while (2)
  {
    uint64_t v91 = (const std::string::value_type **)&v103[4 * v89];
    char v102 = 0;
    if (v90 == &qword_1EBBDB408)
    {
      long long v92 = &qword_1EBBDB408;
      if (!v88)
      {
LABEL_218:
        char v102 = &qword_1EBBDB408;
        long long v93 = (uint64_t **)&qword_1EBBDB408;
        goto LABEL_219;
      }
LABEL_210:
      char v102 = v92;
      long long v93 = (uint64_t **)(v92 + 1);
      goto LABEL_215;
    }
    if (v88)
    {
      do
      {
        long long v92 = (uint64_t *)v88;
        uint64_t v88 = *(void *)(v88 + 8);
      }
      while (v88);
    }
    else
    {
      long long v94 = &qword_1EBBDB408;
      do
      {
        long long v92 = (uint64_t *)v94[2];
        BOOL v7 = *v92 == (void)v94;
        long long v94 = v92;
      }
      while (v7);
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v92 + 4, (void **)&v103[4 * v89]) & 0x80) != 0)
    {
      if (!qword_1EBBDB408) {
        goto LABEL_218;
      }
      goto LABEL_210;
    }
    long long v93 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&SDPParser::evsBandwidthMap, &v102, (void **)&v103[4 * v89]);
LABEL_215:
    if (!*v93)
    {
LABEL_219:
      uint64_t v101 = 0;
      long long v95 = (char *)operator new(0x40uLL);
      long long v99 = (uint64_t *)v95;
      char v100 = &qword_1EBBDB408;
      long long v96 = (std::string *)(v95 + 32);
      if (*((char *)v91 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v96, *v91, (std::string::size_type)v91[1]);
      }
      else
      {
        *(_OWORD *)&v96->__r_.__value_.__l.__data_ = *(_OWORD *)v91;
        *((void *)v95 + 6) = v91[2];
      }
      *((_DWORD *)v95 + 14) = v103[4 * v89 + 3];
      LOBYTE(v101) = 1;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::evsBandwidthMap, (uint64_t)v102, v93, (uint64_t *)v95);
    }
    if (++v89 != 7)
    {
      uint64_t v90 = (uint64_t *)SDPParser::evsBandwidthMap;
      uint64_t v88 = qword_1EBBDB408;
      continue;
    }
    break;
  }
  for (uint64_t m = 0; m != -28; m -= 4)
  {
    if (SHIBYTE(v115[m + 2]) < 0) {
      operator delete((void *)v115[m]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,EVSBandwidthTypes>::~map[abi:ne180100], &SDPParser::evsBandwidthMap, &dword_1C51D1000);
}

void sub_1C5230798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  while (1)
  {
    if (*(v13 - 9) < 0) {
      operator delete(*((void **)v13 - 4));
    }
    v13 -= 32;
    if (v13 == &a13) {
      _Unwind_Resume(exception_object);
    }
  }
}

void XcapRequest::XcapRequest(uint64_t a1, char a2, XcapRequest *this)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 1) = a2;
  *(unsigned char *)a1 = 0;
  XcapNodeSelector::clone(this);
}

{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 1) = a2;
  *(unsigned char *)a1 = 1;
  XcapNodeSelector::clone(this);
}

void sub_1C5230C1C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void XcapNodeSelector::clone(XcapNodeSelector *this)
{
}

void sub_1C5230C80(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1020C40DBF2485DLL);
  _Unwind_Resume(a1);
}

void sub_1C5230D14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void XcapRequest::~XcapRequest(XcapRequest *this)
{
  uint64_t v2 = (XcapNodeSelector *)*((void *)this + 1);
  if (v2)
  {
    XcapNodeSelector::~XcapNodeSelector(v2);
    MEMORY[0x1C878E320]();
  }
  _Block_release(*((const void **)this + 5));
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

void *XcapRequest::serviceAsString@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E650F300[a1]);
}

uint64_t SipSdpBody::SipSdpBody(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_1F20B6890;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = 0;
  }
  *(unsigned char *)(a1 + 48) = 1;
  return a1;
}

uint64_t SipSdpBody::SipSdpBody(uint64_t a1, const std::string *a2, _WORD *a3)
{
  *(void *)a1 = &unk_1F20B6890;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  char v11 = 1;
  SDPParser::parse((BOOL *)&v11, a2, a3, &v10);
  long long v5 = v10;
  long long v10 = 0uLL;
  long long v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (*((void *)&v10 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  char v7 = (*(uint64_t (**)(void))(*(void *)*v4 + 24))(*v4);
  *(unsigned char *)(a1 + 48) = v7;
  if ((v7 & 1) == 0)
  {
    int v8 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return a1;
}

void sub_1C5230F00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void SipSdpBody::~SipSdpBody(void **this)
{
  *this = &unk_1F20B6890;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  uint64_t vars8;

  SipSdpBody::~SipSdpBody(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSdpBody::contentLength(SipSdpBody *this)
{
  if (!*((void *)this + 1))
  {
    int v1 = *((char *)this + 47);
    if (v1 < 0) {
      return *((void *)this + 4);
    }
    return v1;
  }
  int v1 = *((char *)this + 47);
  if ((v1 & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 47)) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v4 = 0;
    memset(v3, 0, sizeof(v3));
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v3);
  }
  if (!*((void *)this + 4)) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v1 & 0x80) == 0) {
    return v1;
  }
  return *((void *)this + 4);
}

void sub_1C5231104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)va);
  _Unwind_Resume(a1);
}

uint64_t SipSdpBody::encode(SipSdpBody *this, ImsOutStream *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result)
  {
    if (*((char *)this + 47) < 0)
    {
      if (!*((void *)this + 4)) {
        goto LABEL_6;
      }
    }
    else if (!*((unsigned char *)this + 47))
    {
LABEL_6:
      uint64_t v5 = 0;
      memset(v4, 0, sizeof(v4));
      ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4);
    }
    return (*(uint64_t (**)(uint64_t, ImsOutStream *))(*(void *)result + 16))(result, a2);
  }
  return result;
}

void sub_1C5231270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)va);
  _Unwind_Resume(a1);
}

uint64_t SipSdpBody::decode(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  memset(&v12, 0, sizeof(v12));
  if (a3)
  {
    uint64_t v6 = a3;
    int v8 = a2 + 4;
    while (1)
    {
      std::string::value_type v9 = std::istream::get();
      std::string::push_back(&v12, v9);
      if (*(_DWORD *)((char *)v8 + *(void *)(*a2 - 24))) {
        break;
      }
      if (!--v6) {
        goto LABEL_5;
      }
    }
    uint64_t v10 = 0;
  }
  else
  {
LABEL_5:
    uint64_t v10 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(void *)a1 + 88))(a1, &v12, a4);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1C5231364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSdpBody::decode(uint64_t a1, uint64_t a2, SipMessageEncodingMap *this)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    **(unsigned char **)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 47) = 0;
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (v7)
  {
    LOBYTE(v15) = *((unsigned char *)this + 131);
    HIBYTE(v15) = SipMessageEncodingMap::useLazuliTypes(this);
    char v14 = 1;
    SDPParser::parse((BOOL *)&v14, (const std::string *)a2, &v15, &v13);
    long long v8 = v13;
    long long v13 = 0uLL;
    std::string::value_type v9 = *(std::__shared_weak_count **)(a1 + 16);
    *(_OWORD *)(a1 + 8) = v8;
    if (v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      if (*((void *)&v13 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
      }
    }
    char v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
    *(unsigned char *)(a1 + 48) = v10;
    if ((v10 & 1) == 0)
    {
      std::string::operator=((std::string *)(a1 + 24), (const std::string *)a2);
      char v11 = *(std::__shared_weak_count **)(a1 + 16);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
  }
  return 1;
}

void SipSdpBody::clone(SipSdpBody *this)
{
}

const char *SipSdpBody::contentType(SipSdpBody *this)
{
  return "application/sdp";
}

void *SipServerTransaction::SipServerTransaction(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const std::string *a6)
{
  std::string::value_type v9 = (void *)SipTransaction::SipTransaction((uint64_t)a1, a2 + 1, a3, a5, a6);
  uint64_t v10 = *a2;
  void *v9 = *a2;
  v9[9] = &unk_1F20B69E8;
  v9[12] = a2[6];
  *(void *)((char *)a1 + *(void *)(v10 - AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24)) = a2[7];
  a1[22] = &unk_1F20B6A98;
  a1[37] = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
  a1[71] = 0;
  return a1;
}

void sub_1C52316E0(_Unwind_Exception *a1)
{
  SipTransaction::~SipTransaction(v1, v2);
  _Unwind_Resume(a1);
}

void SipServerTransaction::~SipServerTransaction(SipServerTransaction *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *((void *)this + 9) = &unk_1F20B69E8;
  *((void *)this + 12) = a2[6];
  *(void *)((char *)this + *(void *)(v4 - AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24)) = a2[7];
  *((void *)this + 22) = &unk_1F20B6A98;
  (*(void (**)(char *))(*((void *)this + 9) + 48))((char *)this + 72);
  uint64_t v5 = *((void *)this + 71);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  SipTransaction::~SipTransaction(this, a2 + 1);
}

void SipServerTransaction::rejectTransactionWithStatus(uint64_t a1, int a2, uint64_t a3)
{
  int v9 = a2;
  std::allocate_shared[abi:ne180100]<SipAutoRespondingTransactionUser,std::allocator<SipAutoRespondingTransactionUser>,unsigned int &,std::string const&,void>(&v9, a3, &v7);
  uint64_t v4 = v7;
  uint64_t v5 = v8;
  uint64_t v7 = 0;
  long long v8 = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 360);
  *(void *)(a1 + 352) = v4;
  *(void *)(a1 + 360) = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void SipServerTransaction::rejectTransactionWithResult(SipServerTransaction *this, ImsResult *a2)
{
  std::allocate_shared[abi:ne180100]<SipAutoRespondingTransactionUser,std::allocator<SipAutoRespondingTransactionUser>,ImsResult &,void>(a2, &v6);
  uint64_t v3 = v6;
  uint64_t v4 = v7;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 45);
  *((void *)this + 44) = v3;
  *((void *)this + 45) = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void SipServerTransaction::loggableName(SipServerTransaction *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C5231B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  ims::AccessNetwork::~AccessNetwork(&a10);
  if (a21 < 0) {
    operator delete(__p);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)(v21 - 64));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipServerTransaction::loggableName(SipServerTransaction *this)
{
}

void SipServerTransaction::resendLastMessage(SipServerTransaction *this@<X0>, ImsResult *a2@<X8>)
{
  if (*((void *)this + 71))
  {
    uint64_t v4 = (void *)((char *)this + 176);
    uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 22) + 64))((char *)this + 176);
    (*(void (**)(void *, uint64_t))(*v4 + 16))(v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"resending ", 10);
    *(unsigned char *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" response", 9);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v6 = v4[18];
    uint64_t v7 = v4[49];
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v15, v4 + 13);
    SipTransactionLayer::sendMessageInTransaction(v6, v7, (uint64_t)&v15, (uint64_t)a2);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    v10[0] = &unk_1F20B2680;
    v10[1] = &_bambiDomain;
    int v11 = 0x40000000;
    long long v8 = (ImsResult *)ImsResult::operator<<<char [22]>((uint64_t)v10, "no response to resend");
    int v9 = ImsLogContainer::logResult((SipServerTransaction *)((char *)this + 176), v8);
    ImsResult::ImsResult(a2, (const std::string *)v9);
    ImsResult::~ImsResult((ImsResult *)v10);
  }
}

void sub_1C5231D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  long long v12 = *(std::__shared_weak_count **)(v10 - 40);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipServerTransaction::handleRequest(SipServerTransaction *this, const SipRequest *a2)
{
  memset(v24, 0, sizeof(v24));
  uint64_t v4 = (void *)((char *)this + 280);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (void *)this + 35);
  if (lpsrc) {
    uint64_t v5 = (std::__shared_weak_count *)((char *)lpsrc + 96);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v22 = v5;
  uint64_t v23 = v21;
  lpsrc = 0;
  uint64_t v21 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "handleRequest");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v24, &v22, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v6 = (char *)this + 176;
  uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 22) + 64))((char *)this + 176);
  (*(void (**)(char *, uint64_t))(*((void *)this + 22) + 16))((char *)this + 176, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"SipServerTransaction::handleRequest", 35);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = *((void *)this + 7);
  if (!v8)
  {
    uint64_t v9 = (*(uint64_t (**)(SipServerTransaction *))(*(void *)this + 152))(this);
    (*(void (**)(SipServerTransaction *, uint64_t))(*(void *)this + 32))(this, v9);
  }
  uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)v6 + 64))((char *)this + 176);
  (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))((char *)this + 176, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"received ", 9);
  *(unsigned char *)(v10 + 17) = 0;
  int v11 = (const std::string *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
  LoggableString::LoggableString(&__p, v11);
  (*(void (**)(uint64_t, std::string *))(*(void *)v10 + 40))(v10, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" request", 8);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, v4);
  if (lpsrc
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
    p_lpsrc = (std::string *)&lpsrc;
  }
  else
  {
    p_lpsrc = &__p;
  }
  p_lpsrc->__r_.__value_.__r.__words[0] = 0;
  p_lpsrc->__r_.__value_.__l.__size_ = 0;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v14 = *((void *)this + 44);
  if (v14 && __p.__r_.__value_.__r.__words[0])
  {
    if (!v8)
    {
      long long v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, const SipRequest *, long long *))(*(void *)v14 + 16))(v14, a2, &v18);
      if (*((void *)&v18 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
      }
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v15 = (*(uint64_t (**)(char *))(*(void *)v6 + 64))((char *)this + 176);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))((char *)this + 176, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"no transaction user to handle request", 37);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
  }
  if (v8)
  {
    uint64_t v16 = *((void *)this + 7);
    if (v16) {
      (*(void (**)(uint64_t, const SipRequest *))(*(void *)v16 + 72))(v16, a2);
    }
  }
LABEL_31:
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v24);
}

void sub_1C5232248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a22);
  _Unwind_Resume(a1);
}

const SipRequest *SipServerTransaction::internalSendResponse@<X0>(const SipRequest **this@<X0>, SipResponse *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3)
  {
    uint64_t v7 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a2);
    uint64_t v8 = (long long *)(v7 + 64);
    if (!v7) {
      uint64_t v8 = &ims::kEmptyString;
    }
    uint64_t v9 = *((unsigned __int8 *)v8 + 23);
    uint64_t v10 = *((void *)v8 + 1);
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = v9;
    }
    if (!v10)
    {
      int v11 = (void *)*((void *)a2 + 10);
      if (v11) {
        SipMessageEncodingMap::copyHeadersFromRequestToResponse(v11, this[37], a2, 0);
      }
    }
  }
  if (*((_DWORD *)a2 + 22) != 100)
  {
    long long v12 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)a2);
    if (v12) {
      long long v13 = SipUriHeader::tag(v12);
    }
    else {
      long long v13 = &ims::kEmptyString;
    }
    uint64_t v14 = *((unsigned __int8 *)v13 + 23);
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *((void *)v13 + 1);
    }
    if (!v14)
    {
      uint64_t v15 = (*((uint64_t (**)(char *))this[22] + 8))((char *)this + 176);
      (*((void (**)(char *, uint64_t))this[22] + 2))((char *)this + 176, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"adding To: tag to ", 18);
      *(unsigned char *)(v15 + 17) = 0;
      (*(void (**)(std::string *__return_ptr, SipResponse *))(*(void *)a2 + 48))(&v25, a2);
      LoggableString::LoggableString(&__p, &v25);
      (*(void (**)(uint64_t, std::string *))(*(void *)v15 + 40))(v15, &__p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v15 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      uint64_t v16 = SipTransportLayer::userAgent(this[40]);
      ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(v16 + 656), 10, &__p);
      long long v17 = SipMessage::header<SipToHeader>(a2, 1);
      SipUriHeader::setTag((uint64_t)v17, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v18 = (*((uint64_t (**)(char *))this[22] + 8))((char *)this + 176);
  (*((void (**)(char *, uint64_t))this[22] + 2))((char *)this + 176, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"sending ", 8);
  *(unsigned char *)(v18 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v18 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" response to ", 13);
  *(unsigned char *)(v18 + 17) = 0;
  std::locale v19 = (const std::string *)(*(uint64_t (**)(const SipRequest *))(*(void *)this[37] + 112))(this[37]);
  LoggableString::LoggableString(&__p, v19);
  (*(void (**)(uint64_t, std::string *))(*(void *)v18 + 40))(v18, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" request", 8);
  *(unsigned char *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v18 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  uint64_t v20 = (uint64_t)this[40];
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v23, this + 35);
  SipTransactionLayer::sendMessageInTransaction(v20, (uint64_t)a2, (uint64_t)&v23, a4);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v21 = this[71];
  if (v21) {
    (*(void (**)(const SipRequest *))(*(void *)v21 + 8))(v21);
  }
  uint64_t result = (const SipRequest *)(*(uint64_t (**)(SipResponse *))(*(void *)a2 + 32))(a2);
  this[71] = result;
  return result;
}

void sub_1C5232720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipServerTransaction::sendResponse(SipServerTransaction *this@<X0>, SipResponse *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *((void *)this + 7);
  if (!v6)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    int v27 = &unk_1F20B2680;
    uint64_t v28 = &_bambiDomain;
    int v29 = 1073741827;
    uint64_t v14 = (ImsResult *)ImsResult::operator<<<char [36]>((uint64_t)&v27, "can't send response from NULL state");
    uint64_t v15 = ImsLogContainer::logResult((SipServerTransaction *)((char *)this + 176), v14);
    ImsResult::ImsResult((ImsResult *)a4, (const std::string *)v15);
    goto LABEL_18;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 104))(v6) & 1) == 0)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    int v27 = &unk_1F20B2680;
    uint64_t v28 = &_bambiDomain;
    int v29 = 0x40000000;
    uint64_t v16 = ImsResult::operator<<<char [41]>((uint64_t)&v27, "outgoing responses not allowed in state ");
    uint64_t v17 = (*(uint64_t (**)(SipServerTransaction *))(*(void *)this + 24))(this);
    uint64_t v18 = (const std::string *)(*(uint64_t (**)(SipServerTransaction *, uint64_t))(*(void *)this + 16))(this, v17);
    LoggableString::LoggableString(&__p, v18);
    std::locale v19 = (ImsResult *)ImsResult::operator<<<LoggableString>(v16, (uint64_t)&__p);
    uint64_t v20 = ImsLogContainer::logResult((SipServerTransaction *)((char *)this + 176), v19);
    ImsResult::ImsResult((ImsResult *)a4, (const std::string *)v20);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_18;
  }
  *(void *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  SipServerTransaction::internalSendResponse((const SipRequest **)this, a2, a3, a4);
  (*(void (**)(void, void, uint64_t))(**((void **)this + 7) + 96))(*((void *)this + 7), *((void *)this + 71), a4);
  if ((*(_DWORD *)(*((void *)this + 71) + 88) - 100) > 0x63) {
    return;
  }
  uint64_t v9 = *((void *)this + 37);
  if (!v9) {
    return;
  }
  uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 112))(v9);
  uint64_t v11 = v10[23];
  uint64_t v12 = (v11 & 0x80u) == 0 ? v10[23] : *((void *)v10 + 1);
  if (v12 != 6) {
    return;
  }
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v10, "INVITE", *((void *)v10 + 1))) {
      return;
    }
    goto LABEL_21;
  }
  if (!v10[23])
  {
LABEL_21:
    if (*(uint64_t **)(a4 + 8) != &_posixDomain)
    {
      uint64_t v21 = a4;
      do
      {
        uint64_t v22 = v21;
        uint64_t v21 = *(void *)(v21 + 32);
      }
      while (v21);
      if (*(uint64_t **)(v22 + 8) != &_posixDomain) {
        return;
      }
    }
    uint64_t v24 = *((void *)this + 22);
    uint64_t v23 = (char *)this + 176;
    uint64_t v25 = (*(uint64_t (**)(char *))(v24 + 48))(v23);
    (*(void (**)(char *, uint64_t))(*(void *)v23 + 16))(v23, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"ignoring POSIX error for provisional response: ", 47);
    *(unsigned char *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 16))(a4, v25);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v25 + 17) = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    int v27 = &unk_1F20B2680;
    uint64_t v28 = &_bambiDomain;
    int v29 = 0;
    ImsResult::operator=(a4, (uint64_t)&v27);
LABEL_18:
    ImsResult::~ImsResult((ImsResult *)&v27);
    return;
  }
  long long v13 = "INVITE";
  while (*v10 == *(unsigned __int8 *)v13)
  {
    ++v10;
    ++v13;
    if (!--v11) {
      goto LABEL_21;
    }
  }
}

void sub_1C5232B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  ImsResult::~ImsResult((ImsResult *)&a15);
  ImsResult::~ImsResult(v15);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [36]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5232C70(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [41]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5232D18(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<LoggableString>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    operator new();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 40))(v3, a2);
  return a1;
}

void sub_1C5232DCC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipServerTransaction::sendResponse(void *a1, int a2, std::string *a3)
{
  uint64_t v6 = (SipTransportLayer *)a1[40];
  if (SipTransportLayer::userAgent(v6)) {
    uint64_t v7 = SipTransportLayer::userAgent(v6) + 288;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v8, 0, sizeof(v8));
  SipResponse::SipResponse((uint64_t)v8, a2, a3, v7);
  (*(void (**)(void *, _OWORD *, uint64_t))(*a1 + 168))(a1, v8, 1);
  *(void *)&v8[0] = &unk_1F20DD488;
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  SipMessage::~SipMessage((SipMessage *)v8);
}

void sub_1C5232EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void SipResponse::~SipResponse(void **this)
{
  *this = &unk_1F20DD488;
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  SipMessage::~SipMessage((SipMessage *)this);
}

{
  uint64_t vars8;

  *this = &unk_1F20DD488;
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  SipMessage::~SipMessage((SipMessage *)this);
  JUMPOUT(0x1C878E320);
}

void *SipServerInviteTransaction::SipServerInviteTransaction(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const std::string *a5)
{
  a1[12] = &unk_1F20B2FA8;
  uint64_t result = SipServerTransaction::SipServerTransaction(a1, (uint64_t *)off_1F20B6CC8, a2, a3, a4, a5);
  *uint64_t result = &unk_1F20B6B00;
  result[9] = &unk_1F20B6BC0;
  result[12] = &unk_1F20B6C28;
  result[22] = &unk_1F20B6C70;
  *((_DWORD *)result + 144) = 1;
  return result;
}

void SipServerInviteTransaction::constructStateMachine(SipServerInviteTransaction *this)
{
  std::string::size_type v35 = 0;
  uint64_t v36 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v35, (void *)this + 35);
  std::string::size_type v3 = v35;
  uint64_t v2 = v36;
  uint64_t v4 = (std::string *)operator new(0xF8uLL);
  size_t v5 = (std::__shared_weak_count *)v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B7598;
  uint64_t v6 = (std::__shared_weak_count_vtbl *)&v4[1];
  *(void *)&long long v37 = v3;
  *((void *)&v37 + 1) = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipServerInviteProceedingTransactionState::SipServerInviteProceedingTransactionState(v4 + 1, (std::string::size_type *)&v37);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  shared_owners = (std::__shared_weak_count *)v5[9].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      goto LABEL_10;
    }
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[9].__vftable = v6;
    v5[9].__shared_owners_ = (uint64_t)v5;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[9].__vftable = v6;
    v5[9].__shared_owners_ = (uint64_t)v5;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
LABEL_10:
  int v33 = v6;
  int v34 = v5;
  (*(void (**)(SipServerInviteTransaction *, std::__shared_weak_count_vtbl **))(*(void *)this + 48))(this, &v33);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  std::string::size_type v9 = v35;
  uint64_t v8 = v36;
  uint64_t v10 = (std::__shared_weak_count *)operator new(0x100uLL);
  uint64_t v11 = v10;
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B75E8;
  uint64_t v12 = (std::__shared_weak_count_vtbl *)&v10[1];
  *(void *)&long long v37 = v9;
  *((void *)&v37 + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipServerInviteCompletedTransactionState::SipServerInviteCompletedTransactionState((uint64_t)&v10[1], (std::string::size_type *)&v37);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  long long v13 = (std::__shared_weak_count *)v11[9].__shared_owners_;
  if (v13)
  {
    if (v13->__shared_owners_ != -1) {
      goto LABEL_21;
    }
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[9].__vftable = v12;
    v11[9].__shared_owners_ = (uint64_t)v11;
    std::__shared_weak_count::__release_weak(v13);
  }
  else
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[9].__vftable = v12;
    v11[9].__shared_owners_ = (uint64_t)v11;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_21:
  long long v31 = v12;
  long long v32 = v11;
  (*(void (**)(SipServerInviteTransaction *, std::__shared_weak_count_vtbl **))(*(void *)this + 48))(this, &v31);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  std::string::size_type v15 = v35;
  uint64_t v14 = v36;
  uint64_t v16 = (std::string *)operator new(0xF8uLL);
  uint64_t v17 = (std::__shared_weak_count *)v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B7638;
  uint64_t v18 = (std::__shared_weak_count_vtbl *)&v16[1];
  *(void *)&long long v37 = v15;
  *((void *)&v37 + 1) = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipServerInviteConfirmedTransactionState::SipServerInviteConfirmedTransactionState(v16 + 1, (std::string::size_type *)&v37);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::locale v19 = (std::__shared_weak_count *)v17[9].__shared_owners_;
  if (v19)
  {
    if (v19->__shared_owners_ != -1) {
      goto LABEL_32;
    }
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v17[9].__vftable = v18;
    v17[9].__shared_owners_ = (uint64_t)v17;
    std::__shared_weak_count::__release_weak(v19);
  }
  else
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v17[9].__vftable = v18;
    v17[9].__shared_owners_ = (uint64_t)v17;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_32:
  int v29 = v18;
  long long v30 = v17;
  (*(void (**)(SipServerInviteTransaction *, std::__shared_weak_count_vtbl **))(*(void *)this + 48))(this, &v29);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  std::string::size_type v21 = v35;
  uint64_t v20 = v36;
  uint64_t v22 = (std::string *)operator new(0xF8uLL);
  uint64_t v23 = (std::__shared_weak_count *)v22;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B7688;
  uint64_t v24 = (std::__shared_weak_count_vtbl *)&v22[1];
  *(void *)&long long v37 = v21;
  *((void *)&v37 + 1) = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipServerInviteTerminationPendingTransactionState::SipServerInviteTerminationPendingTransactionState(v22 + 1, (std::string::size_type *)&v37);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v25 = (std::__shared_weak_count *)v23[9].__shared_owners_;
  if (v25)
  {
    if (v25->__shared_owners_ != -1) {
      goto LABEL_43;
    }
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v23[9].__vftable = v24;
    v23[9].__shared_owners_ = (uint64_t)v23;
    std::__shared_weak_count::__release_weak(v25);
  }
  else
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v23[9].__vftable = v24;
    v23[9].__shared_owners_ = (uint64_t)v23;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
LABEL_43:
  int v27 = v24;
  uint64_t v28 = v23;
  (*(void (**)(SipServerInviteTransaction *, std::__shared_weak_count_vtbl **))(*(void *)this + 48))(this, &v27);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::allocate_shared[abi:ne180100]<SipTerminatedTransactionState,std::allocator<SipTerminatedTransactionState>,std::shared_ptr<SipTransaction> &,void>(&v35, &v37);
  long long v26 = v37;
  long long v37 = 0uLL;
  (*(void (**)(SipServerInviteTransaction *, long long *))(*(void *)this + 48))(this, &v26);
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (*((void *)&v37 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
}

void sub_1C52334AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(v21 - 56);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  _Unwind_Resume(exception_object);
}

void SipServerInviteTransaction::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const std::string *a4@<X3>, SipServerInviteTransaction **a5@<X8>)
{
  uint64_t v6 = a1;
  *a5 = 0;
  a5[1] = 0;
  std::allocate_shared[abi:ne180100]<SipServerInviteTransaction,std::allocator<SipServerInviteTransaction>,SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,void>(&v6, a2, a3, a4, a5);
  SipServerInviteTransaction::constructStateMachine(*a5);
}

void sub_1C52335BC(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipServerInviteTransaction::initialState(SipServerInviteTransaction *this)
{
  return 3;
}

void *SipServerNonInviteTransaction::SipServerNonInviteTransaction(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const std::string *a5)
{
  a1[12] = &unk_1F20B2FA8;
  uint64_t result = SipServerTransaction::SipServerTransaction(a1, (uint64_t *)off_1F20B6EF8, a2, a3, a4, a5);
  *uint64_t result = &unk_1F20B6D30;
  result[9] = &unk_1F20B6DF0;
  result[12] = &unk_1F20B6E58;
  result[22] = &unk_1F20B6EA0;
  return result;
}

void SipServerNonInviteTransaction::constructStateMachine(SipServerNonInviteTransaction *this)
{
  std::string::size_type v27 = 0;
  uint64_t v28 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v27, (void *)this + 35);
  std::string::size_type v3 = v27;
  uint64_t v2 = v28;
  uint64_t v4 = (std::string *)operator new(0x100uLL);
  size_t v5 = (std::__shared_weak_count *)v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B7778;
  uint64_t v6 = (std::__shared_weak_count_vtbl *)&v4[1];
  *(void *)&long long v29 = v3;
  *((void *)&v29 + 1) = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipServerNonInviteTryingTransactionState::SipServerNonInviteTryingTransactionState(v4 + 1, (std::string::size_type *)&v29);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  shared_owners = (std::__shared_weak_count *)v5[9].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      goto LABEL_10;
    }
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[9].__vftable = v6;
    v5[9].__shared_owners_ = (uint64_t)v5;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[9].__vftable = v6;
    v5[9].__shared_owners_ = (uint64_t)v5;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
LABEL_10:
  uint64_t v25 = v6;
  long long v26 = v5;
  (*(void (**)(SipServerNonInviteTransaction *, std::__shared_weak_count_vtbl **))(*(void *)this + 48))(this, &v25);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::string::size_type v9 = v27;
  uint64_t v8 = v28;
  uint64_t v10 = (std::string *)operator new(0xF8uLL);
  uint64_t v11 = (std::__shared_weak_count *)v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B77C8;
  uint64_t v12 = (std::__shared_weak_count_vtbl *)&v10[1];
  *(void *)&long long v29 = v9;
  *((void *)&v29 + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipServerNonInviteProceedingTransactionState::SipServerNonInviteProceedingTransactionState(v10 + 1, (std::string::size_type *)&v29);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  long long v13 = (std::__shared_weak_count *)v11[9].__shared_owners_;
  if (v13)
  {
    if (v13->__shared_owners_ != -1) {
      goto LABEL_21;
    }
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[9].__vftable = v12;
    v11[9].__shared_owners_ = (uint64_t)v11;
    std::__shared_weak_count::__release_weak(v13);
  }
  else
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[9].__vftable = v12;
    v11[9].__shared_owners_ = (uint64_t)v11;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_21:
  uint64_t v23 = v12;
  uint64_t v24 = v11;
  (*(void (**)(SipServerNonInviteTransaction *, std::__shared_weak_count_vtbl **))(*(void *)this + 48))(this, &v23);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::string::size_type v15 = v27;
  uint64_t v14 = v28;
  uint64_t v16 = (std::string *)operator new(0xF8uLL);
  uint64_t v17 = (std::__shared_weak_count *)v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B7818;
  uint64_t v18 = (std::__shared_weak_count_vtbl *)&v16[1];
  *(void *)&long long v29 = v15;
  *((void *)&v29 + 1) = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipServerNonInviteCompletedTransactionState::SipServerNonInviteCompletedTransactionState(v16 + 1, (std::string::size_type *)&v29);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::locale v19 = (std::__shared_weak_count *)v17[9].__shared_owners_;
  if (v19)
  {
    if (v19->__shared_owners_ != -1) {
      goto LABEL_32;
    }
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v17[9].__vftable = v18;
    v17[9].__shared_owners_ = (uint64_t)v17;
    std::__shared_weak_count::__release_weak(v19);
  }
  else
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v17[9].__vftable = v18;
    v17[9].__shared_owners_ = (uint64_t)v17;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_32:
  uint64_t v21 = v18;
  uint64_t v22 = v17;
  (*(void (**)(SipServerNonInviteTransaction *, std::__shared_weak_count_vtbl **))(*(void *)this + 48))(this, &v21);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::allocate_shared[abi:ne180100]<SipTerminatedTransactionState,std::allocator<SipTerminatedTransactionState>,std::shared_ptr<SipTransaction> &,void>(&v27, &v29);
  long long v20 = v29;
  long long v29 = 0uLL;
  (*(void (**)(SipServerNonInviteTransaction *, long long *))(*(void *)this + 48))(this, &v20);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (*((void *)&v29 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
}

void sub_1C5233A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v19 - 56);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

void SipServerNonInviteTransaction::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const std::string *a4@<X3>, SipServerNonInviteTransaction **a5@<X8>)
{
  uint64_t v6 = a1;
  *a5 = 0;
  a5[1] = 0;
  std::allocate_shared[abi:ne180100]<SipServerNonInviteTransaction,std::allocator<SipServerNonInviteTransaction>,SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,void>(&v6, a2, a3, a4, a5);
  SipServerNonInviteTransaction::constructStateMachine(*a5);
}

void sub_1C5233B28(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipServerNonInviteTransaction::initialState(SipServerNonInviteTransaction *this)
{
  return 1;
}

uint64_t SipTypedStateMachine<SipTransactionState>::currentStateId(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t SipTransaction::stateMachineName(SipTransaction *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 12) + 24))();
}

void SipTypedStateMachine<SipTransactionState>::addState(uint64_t a1, void *a2)
{
  if (*a2)
  {
    uint64_t v3 = a1 + 16;
    unsigned int v8 = (*(uint64_t (**)(void))(*(void *)*a2 + 48))(*a2);
    std::string::size_type v9 = &v8;
    uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v3, &v8, (uint64_t)&std::piecewise_construct, &v9);
    uint64_t v6 = *a2;
    uint64_t v5 = a2[1];
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (std::__shared_weak_count *)v4[4];
    v4[3] = v6;
    v4[4] = v5;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

uint64_t SipTypedStateMachine<SipTransactionState>::currentState@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 64);
  *a2 = *(void *)(result + 56);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t SipTransaction::userName(SipTransaction *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 12) + 24))();
}

uint64_t non-virtual thunk to'SipTransaction::userName(SipTransaction *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 3) + 24))();
}

void SipServerInviteTransaction::~SipServerInviteTransaction(SipServerInviteTransaction *this)
{
}

{
  uint64_t vars8;

  SipServerTransaction::~SipServerTransaction(this, (uint64_t *)off_1F20B6CC8);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipServerInviteTransaction::~SipServerInviteTransaction(SipServerInviteTransaction *this)
{
}

{
  uint64_t vars8;

  SipServerTransaction::~SipServerTransaction((SipServerInviteTransaction *)((char *)this - 72), (uint64_t *)off_1F20B6CC8);
  JUMPOUT(0x1C878E320);
}

{
  SipServerTransaction::~SipServerTransaction((SipServerInviteTransaction *)((char *)this - 96), (uint64_t *)off_1F20B6CC8);
}

{
  uint64_t vars8;

  SipServerTransaction::~SipServerTransaction((SipServerInviteTransaction *)((char *)this - 96), (uint64_t *)off_1F20B6CC8);
  JUMPOUT(0x1C878E320);
}

{
  SipServerTransaction::~SipServerTransaction((SipServerInviteTransaction *)((char *)this - 176), (uint64_t *)off_1F20B6CC8);
}

{
  uint64_t vars8;

  SipServerTransaction::~SipServerTransaction((SipServerInviteTransaction *)((char *)this - 176), (uint64_t *)off_1F20B6CC8);
  JUMPOUT(0x1C878E320);
}

void SipServerNonInviteTransaction::~SipServerNonInviteTransaction(SipServerNonInviteTransaction *this)
{
}

{
  uint64_t vars8;

  SipServerTransaction::~SipServerTransaction(this, (uint64_t *)off_1F20B6EF8);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipServerNonInviteTransaction::~SipServerNonInviteTransaction(SipServerNonInviteTransaction *this)
{
}

{
  uint64_t vars8;

  SipServerTransaction::~SipServerTransaction((SipServerNonInviteTransaction *)((char *)this - 72), (uint64_t *)off_1F20B6EF8);
  JUMPOUT(0x1C878E320);
}

{
  SipServerTransaction::~SipServerTransaction((SipServerNonInviteTransaction *)((char *)this - 96), (uint64_t *)off_1F20B6EF8);
}

{
  uint64_t vars8;

  SipServerTransaction::~SipServerTransaction((SipServerNonInviteTransaction *)((char *)this - 96), (uint64_t *)off_1F20B6EF8);
  JUMPOUT(0x1C878E320);
}

{
  SipServerTransaction::~SipServerTransaction((SipServerNonInviteTransaction *)((char *)this - 176), (uint64_t *)off_1F20B6EF8);
}

{
  uint64_t vars8;

  SipServerTransaction::~SipServerTransaction((SipServerNonInviteTransaction *)((char *)this - 176), (uint64_t *)off_1F20B6EF8);
  JUMPOUT(0x1C878E320);
}

void *std::allocate_shared[abi:ne180100]<SipAutoRespondingTransactionUser,std::allocator<SipAutoRespondingTransactionUser>,unsigned int &,std::string const&,void>@<X0>(int *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x80uLL);
  uint64_t result = std::__shared_ptr_emplace<SipAutoRespondingTransactionUser>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,std::string const&,std::allocator<SipAutoRespondingTransactionUser>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1C5233F98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SipAutoRespondingTransactionUser>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,std::string const&,std::allocator<SipAutoRespondingTransactionUser>,0>(void *a1, int *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20B74E8;
  SipAutoRespondingTransactionUser::SipAutoRespondingTransactionUser((uint64_t)(a1 + 3), *a2, a3);
  return a1;
}

void sub_1C5233FF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipAutoRespondingTransactionUser>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B74E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipAutoRespondingTransactionUser>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B74E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipAutoRespondingTransactionUser>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t SipAutoRespondingTransactionUser::SipAutoRespondingTransactionUser(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F20B7538;
  uint64_t v5 = a1 + 8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8) = &unk_1F20B2680;
  *(void *)(a1 + 16) = &_bambiDomain;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  v8[0] = &unk_1F20B2680;
  v8[1] = &SipResultDomain::_domain;
  int v9 = a2;
  ImsResult::operator=(a1 + 8, (uint64_t)v8);
  ImsResult::~ImsResult((ImsResult *)v8);
  uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  if (v6) {
    ImsResult::operator<<<std::string>(v5, a3);
  }
  return a1;
}

void sub_1C52341B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v11 + 103) < 0) {
    operator delete(*v12);
  }
  ImsResult::~ImsResult(v10);
  _Unwind_Resume(a1);
}

void SipAutoRespondingTransactionUser::~SipAutoRespondingTransactionUser(void **this)
{
  *this = &unk_1F20B7538;
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  ImsResult::~ImsResult((ImsResult *)(this + 1));
}

{
  uint64_t vars8;

  *this = &unk_1F20B7538;
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  ImsResult::~ImsResult((ImsResult *)(this + 1));
  JUMPOUT(0x1C878E320);
}

uint64_t SipAutoRespondingTransactionUser::handleRequest(uint64_t a1, uint64_t a2, SipTransaction **a3)
{
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v5 = SipTransaction::messageEncoding(*a3);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0;
  LODWORD(v16) = 1065353216;
  *((void *)&v16 + 1) = 0;
  *(void *)&long long v17 = v5;
  uint64_t v11 = &unk_1F20DD488;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  DWORD2(v17) = 0;
  SipResponse::setStatusFromImsResult((SipResponse *)&v11, (const ImsResult *)(a1 + 8));
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a3 + 168))(&v8);
  int v6 = (*(uint64_t (**)(uint64_t, void))(*(void *)v9 + 24))(v9, v10);
  ImsResult::~ImsResult((ImsResult *)&v8);
  uint64_t v11 = &unk_1F20DD488;
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  SipMessage::~SipMessage((SipMessage *)&v11);
  return v6 ^ 1u;
}

void sub_1C52343E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

void *std::allocate_shared[abi:ne180100]<SipAutoRespondingTransactionUser,std::allocator<SipAutoRespondingTransactionUser>,ImsResult &,void>@<X0>(ImsResult *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x80uLL);
  uint64_t result = std::__shared_ptr_emplace<SipAutoRespondingTransactionUser>::__shared_ptr_emplace[abi:ne180100]<ImsResult &,std::allocator<SipAutoRespondingTransactionUser>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1C5234458(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SipAutoRespondingTransactionUser>::__shared_ptr_emplace[abi:ne180100]<ImsResult &,std::allocator<SipAutoRespondingTransactionUser>,0>(void *a1, ImsResult *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20B74E8;
  SipAutoRespondingTransactionUser::SipAutoRespondingTransactionUser((SipAutoRespondingTransactionUser *)(a1 + 3), a2);
  return a1;
}

void sub_1C52344B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void SipAutoRespondingTransactionUser::SipAutoRespondingTransactionUser(SipAutoRespondingTransactionUser *this, ImsResult *a2)
{
  *(void *)this = &unk_1F20B7538;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = 0;
  *((void *)this + 1) = &unk_1F20B2680;
  *((void *)this + 2) = &_bambiDomain;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  ImsResult::operator=((uint64_t)this + 8, (uint64_t)a2);
}

void sub_1C523455C(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 103) < 0) {
    operator delete(*v3);
  }
  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count **SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock(std::__shared_weak_count **a1, std::__shared_weak_count **a2, const std::string *a3)
{
  SipTerminationLockBase::SipTerminationLockBase((SipTerminationLockBase *)a1, a3);
  *uint64_t v5 = &unk_1F20B78D0;
  v5[4] = 0;
  int v6 = (std::__shared_weak_count **)(v5 + 4);
  v5[5] = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (!v8)
  {
    a1[5] = 0;
    a1[4] = v7;
    goto LABEL_7;
  }
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  unsigned int v10 = a1 + 5;
  uint64_t v9 = a1[5];
  a1[4] = v7;
  a1[5] = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    uint64_t v8 = *v10;
    uint64_t v7 = *v6;
    if (!*v10)
    {
LABEL_7:
      char v11 = 1;
      if (!v7) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  char v11 = 0;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v7) {
LABEL_8:
  }
    ((void (*)(std::__shared_weak_count *, std::__shared_weak_count **))v7->__on_zero_shared_weak)(v7, a1 + 1);
LABEL_9:
  if ((v11 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return a1;
}

void sub_1C5234684(_Unwind_Exception *exception_object)
{
  char v6 = v4;
  if ((v6 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*v5);
  }
  *(void *)uint64_t v1 = &unk_1F20B7918;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

void SipTerminationLockBase::SipTerminationLockBase(SipTerminationLockBase *this, const std::string *a2)
{
  *(void *)this = &unk_1F20B7918;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::string::operator=((std::string *)((char *)this + 8), a2);
}

void sub_1C5234734(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(uint64_t a1)
{
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(a1);
  JUMPOUT(0x1C878E320);
}

void SipTerminationLockBase::~SipTerminationLockBase(void **this)
{
  *this = &unk_1F20B7918;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20B7918;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(uint64_t a1)
{
  *(void *)a1 = &unk_1F20B78D0;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1 + 8);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  char v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *(void *)a1 = &unk_1F20B7918;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = *a2;
      if (v7 <= v6) {
        unint64_t v9 = v6 % v7;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v6;
    }
    unsigned int v10 = *(void ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      char v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v6)
          {
            if (*((_DWORD *)v11 + 4) == v6) {
              return v11;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= v7) {
                v12 %= v7;
              }
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v9) {
              break;
            }
          }
          char v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  long long v13 = (void *)(a1 + 16);
  char v11 = operator new(0x28uLL);
  *char v11 = 0;
  v11[1] = v6;
  *((_DWORD *)v11 + 4) = **a4;
  void v11[3] = 0;
  _OWORD v11[4] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v9 = v6 % v7;
      }
      else {
        unint64_t v9 = v6;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v6;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v9);
  if (v21)
  {
    *char v11 = *v21;
LABEL_38:
    *uint64_t v21 = v11;
    goto LABEL_39;
  }
  *char v11 = *v13;
  void *v13 = v11;
  *(void *)(v20 + 8 * v9) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7) {
        v22 %= v7;
      }
    }
    else
    {
      v22 &= v7 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1C5234B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__shared_ptr_emplace<SipServerInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipServerInviteProceedingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipServerInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B75E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B75E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipServerInviteCompletedTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipServerInviteConfirmedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerInviteConfirmedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipServerInviteConfirmedTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipServerInviteTerminationPendingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerInviteTerminationPendingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipServerInviteTerminationPendingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::allocate_shared[abi:ne180100]<SipTerminatedTransactionState,std::allocator<SipTerminatedTransactionState>,std::shared_ptr<SipTransaction> &,void>(std::string::size_type *a1@<X1>, void *a2@<X8>)
{
  char v4 = (std::string *)operator new(0xF8uLL);
  std::__shared_ptr_emplace<SipTerminatedTransactionState>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTransaction> &,std::allocator<SipTerminatedTransactionState>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4[9].__r_.__value_.__r.__words, (uint64_t)&v4[1]);
}

void sub_1C5234E98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<SipTerminatedTransactionState>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTransaction> &,std::allocator<SipTerminatedTransactionState>,0>(std::string *a1, std::string::size_type *a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B76D8;
  std::construct_at[abi:ne180100]<SipTerminatedTransactionState,std::shared_ptr<SipTransaction> &,SipTerminatedTransactionState*>(a1 + 1, a2);
  return a1;
}

void sub_1C5234EF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipTerminatedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B76D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipTerminatedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B76D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipTerminatedTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

std::string *std::construct_at[abi:ne180100]<SipTerminatedTransactionState,std::shared_ptr<SipTransaction> &,SipTerminatedTransactionState*>(std::string *a1, std::string::size_type *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  std::string::size_type v5 = *a2;
  unint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTerminatedTransactionState::SipTerminatedTransactionState(a1, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

void sub_1C5235000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *SipTerminatedTransactionState::SipTerminatedTransactionState(std::string *a1, std::string::size_type *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  std::string::size_type v5 = *a2;
  unint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTransactionState::SipTransactionState(a1, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E6978;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20E69F8;
  return a1;
}

void sub_1C52350B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<SipServerInviteTransaction,std::allocator<SipServerInviteTransaction>,SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,void>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, const std::string *a4@<X4>, void *a5@<X8>)
{
  unsigned int v10 = operator new(0x260uLL);
  std::__shared_ptr_emplace<SipServerInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipServerInviteTransaction>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a5, v10 + 38, (uint64_t)(v10 + 3));
}

void sub_1C5235148(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SipServerInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipServerInviteTransaction>,0>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const std::string *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20B7728;
  SipServerInviteTransaction::SipServerInviteTransaction(a1 + 3, *a2, a3, a4, a5);
  return a1;
}

void sub_1C52351A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipServerInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7728;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipServerInviteTransaction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SipServerNonInviteTryingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerNonInviteTryingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7778;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipServerNonInviteTryingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipServerNonInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B77C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerNonInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B77C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipServerNonInviteProceedingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipServerNonInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerNonInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipServerNonInviteCompletedTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::allocate_shared[abi:ne180100]<SipServerNonInviteTransaction,std::allocator<SipServerNonInviteTransaction>,SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,void>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, const std::string *a4@<X4>, void *a5@<X8>)
{
  unsigned int v10 = operator new(0x258uLL);
  std::__shared_ptr_emplace<SipServerNonInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipServerNonInviteTransaction>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a5, v10 + 38, (uint64_t)(v10 + 3));
}

void sub_1C52354AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SipServerNonInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipServerNonInviteTransaction>,0>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const std::string *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20B7868;
  SipServerNonInviteTransaction::SipServerNonInviteTransaction(a1 + 3, *a2, a3, a4, a5);
  return a1;
}

void sub_1C523550C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipServerNonInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerNonInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipServerNonInviteTransaction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t HttpRequest::HttpRequest(uint64_t a1, long long *a2, int a3, long long *a4, uint64_t a5, long long *a6)
{
  std::map<std::string,std::string,HttpMessage::ciLess,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100](v14, a5);
  HttpMessage::HttpMessage(a1, a2, (uint64_t)v14, a6);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v14, (void *)v14[1]);
  *(void *)a1 = &unk_1F20B7938;
  *(_DWORD *)(a1 + 80) = a3;
  uint64_t v11 = (std::string *)(a1 + 88);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v12 = *a4;
    *(void *)(a1 + 104) = *((void *)a4 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  return a1;
}

void sub_1C523567C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  HttpMessage::~HttpMessage(v11);
  _Unwind_Resume(a1);
}

__CFHTTPMessage *HttpRequest::serialize(HttpRequest *this)
{
  uint64_t v13 = 0;
  CFStringRef v14 = 0;
  if (*((_DWORD *)this + 20)) {
    uint64_t v2 = "PUT";
  }
  else {
    uint64_t v2 = "GET";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v2);
  ims::CFString::CFString(&v13, (char *)&__p, 0x8000100u);
  if (v12 < 0) {
    operator delete(__p);
  }
  std::string __p = 0;
  CFStringRef URLString = 0;
  ims::CFString::CFString(&__p, (char *)this + 88, 0x8000100u);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef v4 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], URLString, 0);
  CFStringRef v5 = v14;
  int v6 = std::string::compare((const std::string *)((char *)this + 32), "1.0");
  unint64_t v7 = (CFStringRef *)MEMORY[0x1E4F18F88];
  if (v6) {
    unint64_t v7 = (CFStringRef *)MEMORY[0x1E4F18F90];
  }
  Request = CFHTTPMessageCreateRequest(v3, v5, v4, *v7);
  CFRelease(v4);
  HttpMessage::serialize(this, Request);
  ims::CFType::~CFType((ims::CFType *)&__p);
  ims::CFType::~CFType((ims::CFType *)&v13);
  return Request;
}

void sub_1C52357C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t HttpRequest::deserialize(HttpRequest *this, CFHTTPMessageRef request)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = &unk_1F20E3908;
  CFStringRef v22 = CFHTTPMessageCopyRequestMethod(request);
  ims::CFString::asString(v22, (const void *)0x8000100, __p);
  std::string::size_type size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  int v5 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
  }
  if (size == 3)
  {
    int v6 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v6 = __p;
    }
    unsigned int v7 = bswap32(LOWORD(v6->__r_.__value_.__l.__data_)) >> 16;
    if (v7 == 20565)
    {
      int v8 = v6->__r_.__value_.__s.__data_[2] - 84;
    }
    else if (v7 < 0x5055)
    {
      int v8 = -1;
    }
    else
    {
      int v8 = 1;
    }
    BOOL v9 = v8 == 0;
  }
  else
  {
    BOOL v9 = 0;
  }
  *((_DWORD *)this + 20) = v9;
  if (v5 < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  CFURLRef v10 = CFHTTPMessageCopyRequestURL(request);
  if (!v10)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v13 = ims::error((uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Unable to copy URL from Http Request", 36);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    CFStringRef v14 = (void *)__p[0].__r_.__value_.__r.__words[0];
    goto LABEL_26;
  }
  bzero(__p, 0x400uLL);
  CFIndex v11 = CFURLGetBytes(v10, (UInt8 *)__p, 1024);
  CFRelease(v10);
  if (!v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v19, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v17, "");
    uint64_t v15 = ims::error((uint64_t)v19, (uint64_t)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Invalid HTTP Request URL", 24);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_27;
    }
    CFStringRef v14 = v19[0];
LABEL_26:
    operator delete(v14);
LABEL_27:
    uint64_t v12 = 0;
    goto LABEL_28;
  }
  std::string::__assign_external((std::string *)((char *)this + 88), (const std::string::value_type *)__p, v11);
  uint64_t v12 = HttpMessage::deserialize(this, request);
LABEL_28:
  ims::CFType::~CFType((ims::CFType *)&v21);
  return v12;
}

void sub_1C5235B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)&a22);
  _Unwind_Resume(a1);
}

void HttpRequest::clone(HttpRequest *this)
{
}

void sub_1C5235CCC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v2);
  }
  HttpMessage::~HttpMessage((void **)v1);
  MEMORY[0x1C878E320](v1, 0x10B3C40B48FAC4ELL);
  _Unwind_Resume(a1);
}

uint64_t HttpRequest::isRequest(HttpRequest *this)
{
  return 1;
}

uint64_t *std::map<std::string,std::string,HttpMessage::ciLess,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string,HttpMessage::ciLess,std::allocator<std::pair<std::string const,std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *(long long **)a2, (long long *)(a2 + 8));
  return a1;
}

void sub_1C5235D58(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string,HttpMessage::ciLess,std::allocator<std::pair<std::string const,std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, long long *a2, long long *a3)
{
  if (a2 != a3)
  {
    CFURLRef v4 = a2;
    int v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, (uint64_t)(v4 + 2), v4 + 2);
      unsigned int v7 = (long long *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          int v8 = v7;
          unsigned int v7 = *(long long **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (long long *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          CFURLRef v4 = v8;
        }
        while (!v9);
      }
      CFURLRef v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  CFIndex v11 = 0;
  uint64_t v12 = 0;
  int v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  unsigned int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    unsigned int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5)
{
  BOOL v9 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2
    || (*(char *)(a5 + 23) >= 0 ? (CFIndex v11 = (const char *)a5) : (CFIndex v11 = *(const char **)a5),
        *((char *)a2 + 55) >= 0 ? (uint64_t v12 = (const char *)(a2 + 4)) : (uint64_t v12 = (const char *)a2[4]),
        strcasecmp(v11, v12) < 0))
  {
    uint64_t v13 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      uint64_t v15 = a2;
LABEL_29:
      if (v13)
      {
        *a3 = v15;
        return v15 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v13)
    {
      CFStringRef v14 = (uint64_t *)*a2;
      do
      {
        uint64_t v15 = v14;
        CFStringRef v14 = (uint64_t *)v14[1];
      }
      while (v14);
    }
    else
    {
      char v18 = a2;
      do
      {
        uint64_t v15 = (uint64_t *)v18[2];
        BOOL v19 = *v15 == (void)v18;
        char v18 = v15;
      }
      while (v19);
    }
    if (*((char *)v15 + 55) >= 0) {
      char v20 = (const char *)(v15 + 4);
    }
    else {
      char v20 = (const char *)v15[4];
    }
    if (*(char *)(a5 + 23) >= 0) {
      uint64_t v21 = (const char *)a5;
    }
    else {
      uint64_t v21 = *(const char **)a5;
    }
    if (strcasecmp(v20, v21) < 0) {
      goto LABEL_29;
    }
  }
  else
  {
    if ((strcasecmp(v12, v11) & 0x80000000) == 0)
    {
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    uint64_t v16 = a2[1];
    if (v16)
    {
      unint64_t v17 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v17;
        unint64_t v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
    else
    {
      CFStringRef v22 = a2;
      do
      {
        a4 = (uint64_t **)v22[2];
        BOOL v19 = *a4 == v22;
        CFStringRef v22 = (uint64_t *)a4;
      }
      while (!v19);
    }
    if (a4 == v9
      || (*((char *)a4 + 55) >= 0 ? (uint64_t v23 = (const char *)(a4 + 4)) : (uint64_t v23 = (const char *)a4[4]),
          strcasecmp(v11, v23) < 0))
    {
      if (v16)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
  }
  return std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1C52360E8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void MediaSessionQueuedCollectionIterator::~MediaSessionQueuedCollectionIterator(MediaSessionQueuedCollectionIterator *this)
{
  *(void *)this = &unk_1F20B7990;
  uint64_t v2 = (MediaSessionQueuedCollectionIterator *)((char *)this + 24);
  *((void *)this + 3) = &unk_1F20B7A00;
  std::string::basic_string[abi:ne180100]<0>(v12, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"~MediaSessionQueuedCollectionIterator", 37);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  (*(void (**)(void))(**((void **)this + 7) + 192))(*((void *)this + 7));
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  *((void *)this + 4) = (char *)this + 40;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  CFURLRef v4 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  unsigned int v7 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  int v8 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  MediaSessionCollection::~MediaSessionCollection(v2);
  BOOL v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

{
  uint64_t vars8;

  MediaSessionQueuedCollectionIterator::~MediaSessionQueuedCollectionIterator(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'MediaSessionQueuedCollectionIterator::~MediaSessionQueuedCollectionIterator(MediaSessionQueuedCollectionIterator *this)
{
}

{
  uint64_t vars8;

  MediaSessionQueuedCollectionIterator::~MediaSessionQueuedCollectionIterator((MediaSessionQueuedCollectionIterator *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

void MediaSessionQueuedCollectionIterator::add(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v22, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v22, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v9 = v8;
  CFURLRef v10 = *(void **)(v8 + 8);
  size_t v11 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"add", 3);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" session=", 9);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  uint64_t v12 = a1[9];
  char v13 = (std::__shared_weak_count *)a3[1];
  unint64_t v17 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v12 + 16))(&v18);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  MediaSessionQueuedCollectionIterator::addNewBookmark(a1, a2, (long long *)(*a3 + 56));
  uint64_t v15 = a1[7];
  uint64_t v14 = a1[8];
  if (v15) {
    uint64_t v16 = v15 + 24;
  }
  else {
    uint64_t v16 = 0;
  }
  *a4 = v16;
  a4[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1C523658C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionQueuedCollectionIterator::addNewBookmark(void *a1, unint64_t a2, long long *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v41, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v41, (uint64_t)__p);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"addNewBookmark", 14);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" stackId=", 9);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v6 + 32))(v6, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v43 < 0) {
    operator delete(v41);
  }
  unint64_t v38 = a2;
  std::string::basic_string[abi:ne180100]<0>(&v41, "rtp.MediaSessionQueuedCollectionIterator");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)&v41, (uint64_t)__p);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"delegateForSession", 18);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v43 < 0) {
    operator delete(v41);
  }
  uint64_t v46 = 0;
  std::string v47 = 0;
  CFURLRef v10 = (void **)(a1 + 4);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  ims::getValueFromMap<unsigned long long,std::shared_ptr<MediaSessionQueuedCollectionIterator::MediaSessionBookmark>>(&v46, (uint64_t)(a1 + 4), &v38, (uint64_t)&v44);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (v46)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v46 + 152))(&v34);
    goto LABEL_36;
  }
  dispatch_object_t object = 0;
  long long v37 = 0;
  (*(void (**)(dispatch_object_t *__return_ptr))(*(void *)a1[9] + 24))(&object);
  if (!object)
  {
    std::string::basic_string[abi:ne180100]<0>(&v41, "rtp.collection");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::warn((uint64_t)&v41, (uint64_t)__p);
    size_t v15 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v15);
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"delegateForSession", 18);
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"No session or delegate found for session ", 41);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (v43 < 0) {
      operator delete(v41);
    }
    uint64_t v34 = 0;
    std::string::size_type v35 = 0;
    goto LABEL_34;
  }
  (*((void (**)(void **__return_ptr))object->isa + 19))(&v41);
  if (v42)
  {
    size_t v11 = std::__shared_weak_count::lock(v42);
    if (v11) {
      uint64_t v12 = v41;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v42) {
      std::__shared_weak_count::__release_weak(v42);
    }
    if (v12)
    {
      if (v12 == a1)
      {
        char v13 = (std::__shared_weak_count *)a1[14];
        if (v13)
        {
          if (v13->__shared_owners_ != -1)
          {
            uint64_t v34 = a1[13];
            std::string::size_type v35 = v13;
            atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            if (v11) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v11);
            }
            goto LABEL_34;
          }
        }
      }
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  (*((void (**)(uint64_t *__return_ptr))object->isa + 19))(&v34);
LABEL_34:
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
LABEL_36:
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  uint64_t v16 = *(NSObject **)(a1[7] + 72);
  dispatch_object_t object = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  unint64_t v17 = (std::__shared_weak_count *)operator new(0x78uLL);
  uint64_t v18 = v17;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7C88;
  uint64_t v19 = (uint64_t)&v17[1];
  uint64_t v20 = v34;
  char v21 = v35;
  uint64_t v34 = 0;
  std::string::size_type v35 = 0;
  uint64_t v46 = v20;
  std::string v47 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  MediaSessionInterface::MediaSessionInterface((uint64_t)&v17[1], &v46, a2, &v44, a3, &object);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7AC0;
  v18[4].__shared_weak_owners_ = (uint64_t)a1;
  std::string::basic_string[abi:ne180100]<0>(&v41, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v22 = ims::debug((uint64_t)&v41, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"MediaSessionBookmark", 20);
  *(unsigned char *)(v22 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v22 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v22 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v22 + 17) = 0;
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v43 < 0) {
    operator delete(v41);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  uint64_t v24 = (uint64_t **)(a1 + 5);
  char v23 = (uint64_t *)a1[5];
  if (v23)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v25 = (uint64_t **)v23;
        unint64_t v26 = v23[4];
        if (v26 <= a2) {
          break;
        }
        char v23 = *v25;
        uint64_t v24 = v25;
        if (!*v25) {
          goto LABEL_64;
        }
      }
      if (v26 >= a2) {
        break;
      }
      char v23 = v25[1];
      if (!v23)
      {
        uint64_t v24 = v25 + 1;
        goto LABEL_64;
      }
    }
    std::string::size_type v27 = (uint64_t *)v25;
  }
  else
  {
    uint64_t v25 = (uint64_t **)(a1 + 5);
LABEL_64:
    std::string::size_type v27 = (uint64_t *)operator new(0x38uLL);
    v27[5] = 0;
    v27[6] = 0;
    v27[4] = a2;
    *std::string::size_type v27 = 0;
    v27[1] = 0;
    v27[2] = (uint64_t)v25;
    std::__shared_weak_count *v24 = v27;
    uint64_t v28 = (void *)**v10;
    long long v29 = v27;
    if (v28)
    {
      *CFURLRef v10 = v28;
      long long v29 = *v24;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[5], v29);
    ++a1[6];
  }
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v30 = (std::__shared_weak_count *)v27[6];
  v27[5] = v19;
  v27[6] = (uint64_t)v18;
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  long long v31 = (void *)a1[7];
  uint64_t v32 = v19;
  int v33 = v18;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  MediaSessionQueue::setQueuedInterface(v31, &v32);
  if (v33) {
    std::__shared_weak_count::__release_weak(v33);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
}

void sub_1C5236E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, dispatch_object_t object, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  long long v30 = *(std::__shared_weak_count **)(v28 - 72);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MediaSessionQueuedCollectionIterator::add(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
}

void MediaSessionQueuedCollectionIterator::get(MediaSessionQueuedCollectionIterator *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v25 = a2;
  std::string::basic_string[abi:ne180100]<0>(&v22, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v22, (uint64_t)&__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"get", 3);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v21 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(v22);
  }
  uint64_t v22 = 0;
  char v23 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  ims::getValueFromMap<unsigned long long,std::shared_ptr<MediaSessionQueuedCollectionIterator::MediaSessionBookmark>>(&v22, (uint64_t)this + 32, &v25, (uint64_t)&v17);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v22)
  {
    CFURLRef v10 = (void *)*((void *)this + 7);
    size_t v15 = v22;
    uint64_t v16 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    MediaSessionQueue::setQueuedInterface(v10, (uint64_t *)&v15);
    if (v16) {
      std::__shared_weak_count::__release_weak(v16);
    }
LABEL_19:
    uint64_t v13 = *((void *)this + 7);
    uint64_t v12 = *((void *)this + 8);
    if (v13) {
      uint64_t v14 = v13 + 24;
    }
    else {
      uint64_t v14 = 0;
    }
    *a3 = v14;
    a3[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    goto LABEL_24;
  }
  std::string __p = 0;
  uint64_t v20 = 0;
  (*(void (**)(void **__return_ptr))(**((void **)this + 9) + 24))(&__p);
  size_t v11 = __p;
  if (__p)
  {
    MediaSessionQueuedCollectionIterator::addNewBookmark(this, a2, (long long *)((char *)__p + 56));
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v11) {
    goto LABEL_19;
  }
LABEL_24:
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
}

void sub_1C523720C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *a14, std::__shared_weak_count *a15, int a16, __int16 a17, char a18, char a19, void *__p,std::__shared_weak_count *a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  _Unwind_Resume(exception_object);
}

void ims::getValueFromMap<unsigned long long,std::shared_ptr<MediaSessionQueuedCollectionIterator::MediaSessionBookmark>>(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *(void **)(a2 + 8);
  uint64_t v6 = (void *)(a2 + 8);
  uint64_t v7 = v8;
  if (!v8) {
    goto LABEL_12;
  }
  unint64_t v9 = *a3;
  CFURLRef v10 = v6;
  do
  {
    unint64_t v11 = v7[4];
    BOOL v12 = v11 >= v9;
    if (v11 >= v9) {
      uint64_t v13 = v7;
    }
    else {
      uint64_t v13 = v7 + 1;
    }
    if (v12) {
      CFURLRef v10 = v7;
    }
    uint64_t v7 = (void *)*v13;
  }
  while (*v13);
  if (v10 != v6 && v9 >= v10[4])
  {
    uint64_t v16 = v10[5];
    uint64_t v15 = v10[6];
    *a1 = v16;
    a1[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(v19, "rtp.util");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::debug((uint64_t)v19, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"getValueFromMap", 15);
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" Object not found [key=", 23);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
}

void sub_1C5237410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MediaSessionQueuedCollectionIterator::get(MediaSessionQueuedCollectionIterator *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
}

void MediaSessionQueuedCollectionIterator::getRealSession(MediaSessionQueuedCollectionIterator *this, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v16, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v16, (uint64_t)__p);
  if (!a2) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"getRealSession", 14);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  uint64_t v10 = *(void *)(a2 + 88);
  if (v10 && (*(uint64_t (**)(uint64_t))(*(void *)v10 + 176))(v10) == a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "rtp.collection");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::warn((uint64_t)v16, (uint64_t)__p);
    size_t v12 = strlen((const char *)(*(void *)(*(void *)(*(void *)a2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v12);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"getRealSession", 14);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" Someone is accessing the session the iterator is pointing to: ", 63);
    *(unsigned char *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    uint64_t v13 = *(void *)(a2 + 96);
    *(void *)this = *(void *)(a2 + 88);
    *((void *)this + 1) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    (*(void (**)(void, uint64_t))(**(void **)(a2 + 72) + 24))(*(void *)(a2 + 72), a3);
  }
}

void sub_1C5237770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionQueuedCollectionIterator::iterationComplete(void *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v25, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v25, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"iterationComplete", 17);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [collection=", 13);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  RTPSharedPointerBase::getShared<MediaSessionCollectionIterator>((uint64_t)a1, v25);
  uint64_t v10 = *a2;
  uint64_t v11 = v25[0];
  if (v25[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v25[1]);
  }
  if (v10 == v11)
  {
    uint64_t v21 = a1[10];
    *(void *)a3 = a1[9];
    *(void *)(a3 + 8) = v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v12 = a1[9];
    uint64_t v13 = (std::__shared_weak_count *)a2[1];
    uint64_t v22 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void **__return_ptr))(*(void *)v12 + 88))(v25);
    long long v14 = *(_OWORD *)v25;
    v25[0] = 0;
    v25[1] = 0;
    char v15 = (std::__shared_weak_count *)a1[10];
    *(_OWORD *)(a1 + 9) = v14;
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      if (v25[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v25[1]);
      }
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    uint64_t v16 = a1[11];
    if (v16)
    {
      uint64_t v17 = a1[9];
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 176))(v16);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v17 + 24))(v25, v17, v18);
      long long v19 = *(_OWORD *)v25;
      v25[0] = 0;
      v25[1] = 0;
      char v20 = (std::__shared_weak_count *)a1[12];
      *(_OWORD *)(a1 + 11) = v19;
      if (v20)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        if (v25[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v25[1]);
        }
      }
    }
    RTPSharedPointerBase::getShared<MediaSessionCollectionIterator>((uint64_t)a1, (void **)a3);
  }
}

void sub_1C5237A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void RTPSharedPointerBase::getShared<MediaSessionCollectionIterator>(uint64_t a1@<X0>, void **a2@<X8>)
{
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v3, (void *)(a1 + 8));
  std::dynamic_pointer_cast[abi:ne180100]<MediaSessionCollectionIterator,RTPSharedPointerBase>(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void non-virtual thunk to'MediaSessionQueuedCollectionIterator::iterationComplete(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
}

void MediaSessionQueuedCollectionIterator::MediaSessionBookmark::initialize(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  std::string::basic_string[abi:ne180100]<0>(&v24, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v14 = ims::debug((uint64_t)&v24, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v15 = v14;
  uint64_t v16 = *(void **)(v14 + 8);
  size_t v17 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v17);
  *(unsigned char *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"initialize", 10);
  *(unsigned char *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v15 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v15 + 17) = 0;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v26 < 0) {
    operator delete(v24);
  }
  char v24 = 0;
  unint64_t v25 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v24, a1[11], a1[3]);
  uint64_t v18 = v24;
  if (v24)
  {
    long long v19 = (std::__shared_weak_count *)a7[1];
    uint64_t v20 = *a7;
    uint64_t v21 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v18 + 16))(v18, a2, a3, a4, a5, a6, &v20);
    if (v21) {
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
}

void sub_1C5237D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, std::__shared_weak_count *a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::terminate(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v9, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v9, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  CFURLRef v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"terminate", 9);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v9);
  }
  size_t v9 = 0;
  uint64_t v10 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v9, *((void *)this + 11), *((void *)this + 3));
  if (v9) {
    (*(void (**)(void *, void))(*(void *)v9 + 24))(v9, 0);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return 1;
}

void sub_1C5237F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::start(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v9, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v9, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  CFURLRef v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"start", 5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v9);
  }
  size_t v9 = 0;
  uint64_t v10 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v9, *((void *)this + 11), *((void *)this + 3));
  if (v9) {
    (*(void (**)(void *, void))(*(void *)v9 + 32))(v9, 0);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return 1;
}

void sub_1C523816C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::stop(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v9, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v9, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  CFURLRef v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"stop", 4);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v9);
  }
  size_t v9 = 0;
  uint64_t v10 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v9, *((void *)this + 11), *((void *)this + 3));
  if (v9) {
    (*(void (**)(void *, void))(*(void *)v9 + 40))(v9, 0);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return 0;
}

void sub_1C523837C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::setDirection(void *a1, unsigned int *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v13, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(v11, "");
  uint64_t v4 = ims::debug((uint64_t)&v13, (uint64_t)v11);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"setDirection", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" direction=", 11);
  *(unsigned char *)(v5 + 17) = 0;
  ims::toString<MediaDirection>(a2, &v9);
  LoggableString::LoggableString(&__p, &v9);
  (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 40))(v5, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v15 < 0) {
    operator delete(v13);
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v13, a1[11], a1[3]);
  if (v13) {
    (*(void (**)(void *, unsigned int *, void))(*(void *)v13 + 48))(v13, a2, 0);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return 0;
}

void sub_1C5238618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,std::__shared_weak_count *a28,int a29,__int16 a30,char a31,char a32)
{
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionQueuedCollectionIterator::MediaSessionBookmark::setConfiguration(void *a1, uint64_t *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v14, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"setConfiguration", 16);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v14);
  }
  uint64_t v14 = 0;
  char v15 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v14, a1[11], a1[3]);
  char v8 = v14;
  std::string v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = *a2;
  char v11 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, uint64_t *))(*(void *)v8 + 56))(v8, &v10);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1C523888C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, std::__shared_weak_count *a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::configure(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v9, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v9, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"configure", 9);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v9);
  }
  std::string v9 = 0;
  uint64_t v10 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v9, *((void *)this + 11), *((void *)this + 3));
  if (v9) {
    (*(void (**)(void *, void))(*(void *)v9 + 64))(v9, 0);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return 1;
}

void sub_1C5238AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::transactionPending(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v10, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v10, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"transactionPending", 18);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v10);
  }
  uint64_t v10 = 0;
  char v11 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v10, *((void *)this + 11), *((void *)this + 3));
  if (v10) {
    uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v10 + 72))(v10);
  }
  else {
    uint64_t v6 = 0;
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v6;
}

void sub_1C5238CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::active(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v10, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v10, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"active", 6);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v10);
  }
  uint64_t v10 = 0;
  char v11 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v10, *((void *)this + 11), *((void *)this + 3));
  if (v10) {
    uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v10 + 80))(v10);
  }
  else {
    uint64_t v6 = 0;
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v6;
}

void sub_1C5238ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::paused(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v10, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v10, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"paused", 6);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v10);
  }
  uint64_t v10 = 0;
  char v11 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v10, *((void *)this + 11), *((void *)this + 3));
  if (v10) {
    uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v10 + 88))(v10);
  }
  else {
    uint64_t v6 = 0;
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v6;
}

void sub_1C52390F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::direction(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v10, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v10, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"direction", 9);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v10);
  }
  uint64_t v10 = 0;
  char v11 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v10, *((void *)this + 11), *((void *)this + 3));
  if (v10) {
    uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v10 + 96))(v10);
  }
  else {
    uint64_t v6 = 4;
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v6;
}

void sub_1C5239308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::mediaType(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  std::string::basic_string[abi:ne180100]<0>(v9, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v9, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"mediaType", 9);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  return 2;
}

void sub_1C52394C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::mediaSupportEnabled(void *a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v12, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v12, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"mediaSupportEnabled", 19);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v12);
  }
  char v12 = 0;
  char v13 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v12, a1[11], a1[3]);
  if (v12) {
    uint64_t v8 = (*(uint64_t (**)(void *, uint64_t))(*(void *)v12 + 112))(v12, a2);
  }
  else {
    uint64_t v8 = a2 == 2;
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return v8;
}

void sub_1C52396E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionQueuedCollectionIterator::MediaSessionBookmark::startSendingDTMF(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v12, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v12, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"startSendingDTMF", 16);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v12);
  }
  char v12 = 0;
  char v13 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v12, *((void *)this + 11), *((void *)this + 3));
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(*(void *)v12 + 128))(v12, a2);
  }
  else
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741836;
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1C5239944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionQueuedCollectionIterator::MediaSessionBookmark::stopSendingDTMF(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v10, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v10, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"stopSendingDTMF", 15);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v10);
  }
  char v10 = 0;
  char v11 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v10, *((void *)this + 11), *((void *)this + 3));
  if (v10)
  {
    (*(void (**)(void *))(*(void *)v10 + 136))(v10);
  }
  else
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 1073741836;
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C5239BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionQueuedCollectionIterator::MediaSessionBookmark::sendDTMFDigits(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v12, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v12, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"sendDTMFDigits", 14);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v12);
  }
  char v12 = 0;
  char v13 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v12, a1[11], a1[3]);
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(*(void *)v12 + 144))(v12, a2);
  }
  else
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741836;
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1C5239E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::remove(MediaSessionQueuedCollectionIterator *this, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v11, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v11, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"remove", 6);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 9) + 32))(*((void *)this + 9), a2);
}

void sub_1C523A000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::contains(MediaSessionQueuedCollectionIterator *this, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v11, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v11, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"contains", 8);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 9) + 40))(*((void *)this + 9), a2);
}

void sub_1C523A1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::contains(void *a1, uint64_t *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v16, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"contains", 8);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  uint64_t v8 = a1[9];
  size_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v12 = *a2;
  char v13 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v8 + 48))(v8, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return v10;
}

void sub_1C523A3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::size(MediaSessionQueuedCollectionIterator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 9) + 56))();
}

uint64_t MediaSessionQueuedCollectionIterator::empty(MediaSessionQueuedCollectionIterator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 9) + 64))();
}

uint64_t MediaSessionQueuedCollectionIterator::clear(MediaSessionQueuedCollectionIterator *this)
{
  std::string::basic_string[abi:ne180100]<0>(v9, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v9, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"clear", 5);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  return (*(uint64_t (**)(void))(**((void **)this + 9) + 72))(*((void *)this + 9));
}

void sub_1C523A5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::sessionIdList(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v11, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v11, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"sessionIdList", 13);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 80))(*(void *)(a1 + 72), a2);
}

void sub_1C523A7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'MediaSessionQueuedCollectionIterator::remove(MediaSessionQueuedCollectionIterator *this, uint64_t a2)
{
  return MediaSessionQueuedCollectionIterator::remove((MediaSessionQueuedCollectionIterator *)((char *)this - 24), a2);
}

uint64_t non-virtual thunk to'MediaSessionQueuedCollectionIterator::contains(MediaSessionQueuedCollectionIterator *this, uint64_t a2)
{
  return MediaSessionQueuedCollectionIterator::contains((MediaSessionQueuedCollectionIterator *)((char *)this - 24), a2);
}

uint64_t non-virtual thunk to'MediaSessionQueuedCollectionIterator::contains(uint64_t a1, uint64_t *a2)
{
  return MediaSessionQueuedCollectionIterator::contains((void *)(a1 - 24), a2);
}

uint64_t non-virtual thunk to'MediaSessionQueuedCollectionIterator::size(MediaSessionQueuedCollectionIterator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 56))();
}

uint64_t non-virtual thunk to'MediaSessionQueuedCollectionIterator::empty(MediaSessionQueuedCollectionIterator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 64))();
}

uint64_t non-virtual thunk to'MediaSessionQueuedCollectionIterator::clear(MediaSessionQueuedCollectionIterator *this)
{
  return MediaSessionQueuedCollectionIterator::clear((MediaSessionQueuedCollectionIterator *)((char *)this - 24));
}

uint64_t non-virtual thunk to'MediaSessionQueuedCollectionIterator::sessionIdList(uint64_t a1, uint64_t a2)
{
  return MediaSessionQueuedCollectionIterator::sessionIdList(a1 - 24, a2);
}

void MediaSessionQueuedCollectionIterator::MediaSessionBookmark::~MediaSessionBookmark(void **this)
{
  MediaSessionQueuedCollectionIterator::MediaSessionBookmark::~MediaSessionBookmark(this);
  JUMPOUT(0x1C878E320);
}

{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  *this = &unk_1F20B7AC0;
  std::string::basic_string[abi:ne180100]<0>(v5, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"~MediaSessionBookmark", 21);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  MediaSessionInterface::~MediaSessionInterface(this);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::isAudioReady(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  return 1;
}

void MediaSessionInterface::~MediaSessionInterface(void **this)
{
  *this = &unk_1F20B7BB0;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  uint64_t v2 = this[6];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[5];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void *std::dynamic_pointer_cast[abi:ne180100]<MediaSessionCollectionIterator,RTPSharedPointerBase>@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
  {
    uint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  NSObject *v2 = 0;
  v2[1] = 0;
  return result;
}

void std::__shared_ptr_emplace<MediaSessionQueuedCollectionIterator::MediaSessionBookmark>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7C88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MediaSessionQueuedCollectionIterator::MediaSessionBookmark>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B7C88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<MediaSessionQueuedCollectionIterator::MediaSessionBookmark>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t MediaSessionInterface::MediaSessionInterface(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, long long *a5, dispatch_object_t *a6)
{
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  *(void *)a1 = &unk_1F20B7BB0;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *a4;
  uint64_t v10 = a4[1];
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 48) = *a6;
  if (*a6) {
    dispatch_retain(*a6);
  }
  char v12 = (std::string *)(a1 + 56);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v13 = *a5;
    *(void *)(a1 + 72) = *((void *)a5 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  *(_WORD *)(a1 + 80) = 1;
  return a1;
}

void sub_1C523AC60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[6];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[5];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

void SipProxyAuthenticateHeader::createAuthorizationHeader(SipProxyAuthenticateHeader *this)
{
}

void sub_1C523ACD8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40ADE1DEA6);
  _Unwind_Resume(a1);
}

void SipProxyAuthenticateHeader::~SipProxyAuthenticateHeader(SipProxyAuthenticateHeader *this)
{
  SipAuthenticateHeader::~SipAuthenticateHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipProxyAuthenticateHeader::clone(SipProxyAuthenticateHeader *this)
{
}

void sub_1C523AD9C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40ADE1DEA6);
  _Unwind_Resume(a1);
}

uint64_t SipAuthHeader::allowsDuplicates(SipAuthHeader *this)
{
  return 1;
}

const char *SipProxyAuthenticateHeader::matchingAuthorizationHeaderName(SipProxyAuthenticateHeader *this)
{
  return "Proxy-Authorization";
}

void sub_1C523AE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C523AFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void SipParameterListHeader::SipParameterListHeader(SipParameterListHeader *this, const SipParameterListHeader *a2)
{
  SipHeader::SipHeader(this, a2);
  void *v4 = &unk_1F20B7D80;
  v4[8] = &unk_1F20B37B0;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(v4 + 9, *((void ***)a2 + 9), (void **)a2 + 10);
  *((unsigned char *)this + 97) = 1;
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
}

void sub_1C523B0D4(_Unwind_Exception *a1)
{
  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

uint64_t SipParameterListHeader::encodeValue(SipParameterListHeader *this, ImsOutStream *a2)
{
  return 1;
}

uint64_t SipParameterListHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  uint64_t v3 = a1 + 64;
  uint64_t result = SipParameterMap::fromString(a1 + 64, a2, 0, 0);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112);
    return v5(a1, v3);
  }
  return result;
}

void SipBackoffTimer::initialize(std::string *a1, std::string::size_type a2, std::string::size_type *a3, std::string *__str)
{
  a1->__r_.__value_.__l.__size_ = a2;
  std::string::operator=(a1 + 1, __str);
  std::string::size_type v7 = *a3;
  std::string::size_type v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  std::string::size_type size = (std::__shared_weak_count *)a1[2].__r_.__value_.__l.__size_;
  a1[2].__r_.__value_.__r.__words[0] = v7;
  a1[2].__r_.__value_.__l.__size_ = v6;
  if (size)
  {
    std::__shared_weak_count::__release_weak(size);
  }
}

int8x8_t *SipBackoffTimer::reset(std::string *this)
{
  uint64_t result = (int8x8_t *)this->__r_.__value_.__l.__size_;
  if (result) {
    uint64_t result = (int8x8_t *)SipTimerContainer::cancelTimer(result, this + 1);
  }
  LODWORD(this->__r_.__value_.__r.__words[2]) = 0;
  return result;
}

void SipSimpleBackoffTimer::initialize(uint64_t a1, std::string::size_type a2, std::string::size_type *a3, std::string *a4, int a5, int a6)
{
  uint64_t v9 = (std::__shared_weak_count *)a3[1];
  v10[0] = *a3;
  v10[1] = (std::string::size_type)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipBackoffTimer::initialize((std::string *)a1, a2, v10, a4);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(_DWORD *)(a1 + 64) = a5;
  *(_DWORD *)(a1 + 68) = a6;
}

void sub_1C523B2AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSimpleBackoffTimer::scheduleRetry(SipSimpleBackoffTimer *this)
{
  void v7[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (int8x8_t *)*((void *)this + 1);
  if (!v2) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 4);
  uint64_t v4 = *((unsigned int *)this + 16);
  uint64_t v5 = ((1 << v3) + *((_DWORD *)this + 17));
  if (v5 <= v4)
  {
    *((_DWORD *)this + 4) = v3 + 1;
    uint64_t v4 = v5;
  }
  v7[0] = &unk_1F20B7EF0;
  v7[1] = this;
  v7[3] = v7;
  SipTimerContainer::startTimer(v2, (uint64_t)this + 24);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v7);
  return v4;
}

void sub_1C523B398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Rfc5626BackoffTimer::initialize(uint64_t a1, std::string::size_type a2, std::string::size_type *a3, std::string *a4, int a5, int a6)
{
  *(_DWORD *)(a1 + 64) = a5;
  *(_DWORD *)(a1 + 68) = a6;
  std::string::size_type v6 = (std::__shared_weak_count *)a3[1];
  v7[0] = *a3;
  v7[1] = (std::string::size_type)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipBackoffTimer::initialize((std::string *)a1, a2, v7, a4);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C523B41C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Rfc5626BackoffTimer::scheduleRetry(Rfc5626BackoffTimer *this)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 1)) {
    return 0;
  }
  int v2 = *((_DWORD *)this + 4) + 1;
  *((_DWORD *)this + 4) = v2;
  unsigned int v3 = *((_DWORD *)this + 17);
  unsigned int v4 = (*((_DWORD *)this + 16) / v3) >> v2;
  int v5 = v3 << v2;
  if (v4) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = *((_DWORD *)this + 16);
  }
  uint64_t v7 = (random() % (v6 >> 1)) + (v6 >> 1);
  uint64_t v8 = (int8x8_t *)*((void *)this + 1);
  v10[0] = &unk_1F20B7F70;
  v10[1] = this;
  std::string v10[3] = v10;
  SipTimerContainer::startTimer(v8, (uint64_t)this + 24);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v10);
  return v7;
}

void sub_1C523B524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void SipSimpleBackoffTimer::~SipSimpleBackoffTimer(SipSimpleBackoffTimer *this)
{
  SipBackoffTimer::~SipBackoffTimer(this);
  JUMPOUT(0x1C878E320);
}

void Rfc5626BackoffTimer::~Rfc5626BackoffTimer(Rfc5626BackoffTimer *this)
{
  SipBackoffTimer::~SipBackoffTimer(this);
  JUMPOUT(0x1C878E320);
}

void SipBackoffTimer::~SipBackoffTimer(SipBackoffTimer *this)
{
  *(void *)this = &unk_1F20B7E50;
  int v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

void std::__function::__func<SipSimpleBackoffTimer::scheduleRetry(void)::$_0,std::allocator<SipSimpleBackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::~__func()
{
}

void *std::__function::__func<SipSimpleBackoffTimer::scheduleRetry(void)::$_0,std::allocator<SipSimpleBackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F20B7EF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<SipSimpleBackoffTimer::scheduleRetry(void)::$_0,std::allocator<SipSimpleBackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20B7EF0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<SipSimpleBackoffTimer::scheduleRetry(void)::$_0,std::allocator<SipSimpleBackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 56);
  if (v3)
  {
    int v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unsigned int v6 = v5;
      uint64_t v7 = *(void (****)(void, uint64_t))(v2 + 48);
      if (v7) {
        (**v7)(v7, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C523B734(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSimpleBackoffTimer::scheduleRetry(void)::$_0,std::allocator<SipSimpleBackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSimpleBackoffTimer::scheduleRetry(void)::$_0,std::allocator<SipSimpleBackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void std::__function::__func<Rfc5626BackoffTimer::scheduleRetry(void)::$_0,std::allocator<Rfc5626BackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::~__func()
{
}

void *std::__function::__func<Rfc5626BackoffTimer::scheduleRetry(void)::$_0,std::allocator<Rfc5626BackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F20B7F70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Rfc5626BackoffTimer::scheduleRetry(void)::$_0,std::allocator<Rfc5626BackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20B7F70;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Rfc5626BackoffTimer::scheduleRetry(void)::$_0,std::allocator<Rfc5626BackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 56);
  if (v3)
  {
    int v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unsigned int v6 = v5;
      uint64_t v7 = *(void (****)(void, uint64_t))(v2 + 48);
      if (v7) {
        (**v7)(v7, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C523B8B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Rfc5626BackoffTimer::scheduleRetry(void)::$_0,std::allocator<Rfc5626BackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Rfc5626BackoffTimer::scheduleRetry(void)::$_0,std::allocator<Rfc5626BackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void XcapUrlHelper::createUrl(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  id v10 = [MEMORY[0x1E4F1CB10] URLWithString:@"/"];
  unsigned int v6 = objc_msgSend(MEMORY[0x1E4F29088], "componentsWithURL:resolvingAgainstBaseURL:");
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1]) {
      goto LABEL_12;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    goto LABEL_12;
  }
  uint64_t v7 = [NSString stringWithUTF8String:a1];
  [v6 setPath:v7];

  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1]) {
      goto LABEL_12;
    }
    a2 = (uint64_t *)*a2;
    goto LABEL_11;
  }
  if (*((unsigned char *)a2 + 23))
  {
LABEL_11:
    uint64_t v8 = [NSString stringWithUTF8String:a2];
    [v6 setQuery:v8];
  }
LABEL_12:
  id v9 = [v6 string];
  std::string::basic_string[abi:ne180100]<0>(a3, (char *)[v9 UTF8String]);
}

void sub_1C523BA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t BambiEmergencyCallHandler::BambiEmergencyCallHandler(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1F20B5B60;
  *(void *)(a1 + 8) = &unk_1F20B85A8;
  uint64_t v4 = a1 + 16;
  *(void *)(a1 + 16) = &unk_1F20B8318;
  *(void *)(a1 + 24) = &unk_1F20B41C0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "bambi.call");
  uint64_t v5 = *a2;
  if (*(char *)(*a2 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v5 + 4160);
  }
  ImsLogContainer::ImsLogContainer(a1 + 32, &__str, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)a1 = &unk_1F20B7FF0;
  *(void *)(a1 + 8) = &unk_1F20B8098;
  *(void *)(a1 + 16) = &unk_1F20B80C0;
  *(void *)(a1 + 24) = &unk_1F20B80F0;
  *(void *)(a1 + 32) = &unk_1F20B8118;
  *(void *)(a1 + 136) = &unk_1F20B8178;
  *(void *)(a1 + 144) = &unk_1F20B81A8;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  BambiEmergencyCallOptions::BambiEmergencyCallOptions((BambiEmergencyCallOptions *)(a1 + 216));
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 4928));
  *(_OWORD *)(a1 + 5080) = 0u;
  *(_OWORD *)(a1 + 5096) = 0u;
  *(void *)(a1 + 5112) = 0x40A7700000000000;
  *(_OWORD *)(a1 + 5120) = 0u;
  *(_OWORD *)(a1 + 5136) = 0u;
  *(_OWORD *)(a1 + 5152) = 0u;
  *(_OWORD *)(a1 + 5168) = 0u;
  *(_OWORD *)(a1 + 5184) = 0u;
  *(_OWORD *)(a1 + 5200) = 0u;
  *(_OWORD *)(a1 + 5212) = 0u;
  *(_OWORD *)(a1 + 5232) = 0u;
  *(_OWORD *)(a1 + 5248) = 0u;
  *(_OWORD *)(a1 + 5264) = 0u;
  *(_OWORD *)(a1 + 5280) = 0u;
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 176);
  *(void *)(a1 + 168) = v7;
  *(void *)(a1 + 176) = v6;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)(*a2 + 2872) = v4;
  id v9 = *(std::__shared_weak_count **)(a1 + 208);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(void *)(a1 + 4920) = 0;
  *(void *)(a1 + 5032) = a1 + 136;
  std::string::basic_string[abi:ne180100]<0>(&__str, "bambi.call");
  uint64_t v10 = *a2;
  if (*(char *)(*a2 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 4160), *(void *)(v10 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v10 + 4160);
  }
  std::string::operator=((std::string *)(a1 + 4976), &__str);
  std::string::operator=((std::string *)(a1 + 5000), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(a1 + 5072) = 0;
  *(_WORD *)(a1 + 187) = 0;
  if (*(unsigned char *)(*a2 + 176))
  {
    uint64_t v11 = *(void **)(*a2 + 144);
    uint64_t v13 = v11[31];
    char v12 = (std::__shared_weak_count *)v11[32];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)(v13 + 456) = a1;
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      uint64_t v11 = *(void **)(*a2 + 144);
    }
    else
    {
      *(void *)(v13 + 456) = a1;
    }
    v11[85] = a1 + 144;
  }
  BambiEmergencyCallHandler::resetConditions((BambiEmergencyCallHandler *)a1);
  return a1;
}

void sub_1C523BE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  char v26 = (std::__shared_weak_count *)v20[661];
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::deque<SipUri>::~deque[abi:ne180100](v20 + 654);
  ims::LocationInfo::~LocationInfo(v24);
  SipTimerContainer::~SipTimerContainer(v23);
  BambiEmergencyCallOptions::~BambiEmergencyCallOptions(v22);
  std::string::size_type v27 = (std::__shared_weak_count *)v20[26];
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v28 = (std::__shared_weak_count *)v20[22];
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  long long v29 = (std::__shared_weak_count *)v20[20];
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  ImsLogContainer::~ImsLogContainer(v21);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::resetConditions(BambiEmergencyCallHandler *this)
{
  std::string::basic_string[abi:ne180100]<0>(v15, "bambi.call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v15, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"EmergencyCallhandler: resetting conditions", 42);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  *((_WORD *)this + 92) = 257;
  *((unsigned char *)this + 186) = 1;
  *((_DWORD *)this + 48) = 0;
  *((unsigned char *)this + 188) = 0;
  SipTimerContainer::cancelAllTimers((BambiEmergencyCallHandler *)((char *)this + 4928));
  *((void *)this + 615) = 0;
  uint64_t v3 = (void **)*((void *)this + 655);
  uint64_t v4 = (void **)*((void *)this + 656);
  if (v4 == v3)
  {
    uint64_t v8 = (void *)((char *)this + 5272);
    uint64_t v4 = (void **)*((void *)this + 655);
  }
  else
  {
    unint64_t v5 = *((void *)this + 658);
    uint64_t v6 = &v3[v5 >> 4];
    uint64_t v7 = (char *)*v6 + 408 * (v5 & 0xF);
    uint64_t v8 = (void *)((char *)this + 5272);
    uint64_t v9 = *(uint64_t *)((char *)v3 + (((*((void *)this + 659) + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 408 * ((*((_DWORD *)this + 1318) + (int)v5) & 0xF);
    if (v7 != (char *)v9)
    {
      do
      {
        (**(void (***)(char *))v7)(v7);
        v7 += 408;
        if (v7 - (unsigned char *)*v6 == 6528)
        {
          uint64_t v10 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v10;
        }
      }
      while (v7 != (char *)v9);
      uint64_t v4 = (void **)*((void *)this + 656);
      uint64_t v3 = (void **)*((void *)this + 655);
    }
  }
  *uint64_t v8 = 0;
  unint64_t v11 = (char *)v4 - (char *)v3;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v3 = (void **)(*((void *)this + 655) + 8);
      *((void *)this + 655) = v3;
      unint64_t v11 = *((void *)this + 656) - (void)v3;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v12 = 8;
    goto LABEL_18;
  }
  if (v11 >> 3 == 2)
  {
    uint64_t v12 = 16;
LABEL_18:
    *((void *)this + 658) = v12;
  }
  BambiEmergencyCallHandler::clearLocation(this);
}

void sub_1C523C144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiEmergencyCallOptions::~BambiEmergencyCallOptions(void **this)
{
  if (*((char *)this + 4695) < 0) {
    operator delete(this[584]);
  }
  SipUri::~SipUri((SipUri *)(this + 533));
  SipStackConfig::~SipStackConfig(this + 219);
  SipRegistrationConfig::~SipRegistrationConfig(this + 10);
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void BambiEmergencyCallHandler::~BambiEmergencyCallHandler(BambiEmergencyCallHandler *this)
{
  *(void *)this = &unk_1F20B7FF0;
  *((void *)this + 1) = &unk_1F20B8098;
  *((void *)this + 2) = &unk_1F20B80C0;
  *((void *)this + 3) = &unk_1F20B80F0;
  *((void *)this + 4) = &unk_1F20B8118;
  *((void *)this + 17) = &unk_1F20B8178;
  *((void *)this + 18) = &unk_1F20B81A8;
  uint64_t v2 = (BambiEmergencyCallHandler *)((char *)this + 4928);
  SipTimerContainer::cancelAllTimers((BambiEmergencyCallHandler *)((char *)this + 4928));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 661);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::deque<SipUri>::~deque[abi:ne180100]((void *)this + 654);
  if (*((char *)this + 5223) < 0) {
    operator delete(*((void **)this + 650));
  }
  if (*((char *)this + 5199) < 0) {
    operator delete(*((void **)this + 647));
  }
  if (*((char *)this + 5175) < 0) {
    operator delete(*((void **)this + 644));
  }
  if (*((char *)this + 5151) < 0) {
    operator delete(*((void **)this + 641));
  }
  SipTimerContainer::~SipTimerContainer(v2);
  if (*((char *)this + 4911) < 0) {
    operator delete(*((void **)this + 611));
  }
  SipUri::~SipUri((BambiEmergencyCallHandler *)((char *)this + 4480));
  SipStackConfig::~SipStackConfig((void **)this + 246);
  SipRegistrationConfig::~SipRegistrationConfig((void **)this + 37);
  if (*((char *)this + 287) < 0) {
    operator delete(*((void **)this + 33));
  }
  if (*((char *)this + 263) < 0) {
    operator delete(*((void **)this + 30));
  }
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  *((void *)this + 4) = &unk_1F20C9CA0;
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
}

{
  uint64_t vars8;

  BambiEmergencyCallHandler::~BambiEmergencyCallHandler(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'BambiEmergencyCallHandler::~BambiEmergencyCallHandler(BambiEmergencyCallHandler *this)
{
}

{
  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 16));
}

{
  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 24));
}

{
  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 32));
}

{
  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 136));
}

{
  uint64_t vars8;

  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 32));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 136));
  JUMPOUT(0x1C878E320);
}

void BambiEmergencyCallHandler::cancelPendingEmergencyCall(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 200) && *(unsigned char *)(a1 + 187))
  {
    uint64_t v4 = a1 + 32;
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(a1 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(a1 + 32, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"canceling pending emergency call", 32);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    BambiEmergencyCallHandler::endEmergencyCallWithReason(a1, a2);
  }
  else
  {
    uint64_t v6 = a1 + 32;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(a1 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"cancelPendingEmergencyCall: no pending emergency call", 53);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
  }
}

uint64_t BambiEmergencyCallHandler::handleRegistrationActive(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"emergency registration is active", 32);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  *(_WORD *)(a1 + 185) = 0;
  BambiEmergencyCallHandler::checkConditions((BambiEmergencyCallHandler *)a1);
  uint64_t result = BambiEmergencyCallHandler::delegate((BambiEmergencyCallHandler *)a1);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)BambiEmergencyCallHandler::delegate((BambiEmergencyCallHandler *)a1) + 72);
    return v5();
  }
  return result;
}

void BambiEmergencyCallHandler::checkConditions(BambiEmergencyCallHandler *this)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 186))
  {
    uint64_t v2 = (char *)this + 32;
    uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v3);
    uint64_t v4 = *(void **)(v3 + 8);
    uint64_t v5 = "still waiting for emergency registration to complete";
LABEL_3:
    uint64_t v6 = 52;
LABEL_6:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    return;
  }
  if (*((unsigned char *)this + 184))
  {
    uint64_t v7 = (char *)this + 32;
    uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))(v7, v3);
    uint64_t v4 = *(void **)(v3 + 8);
    uint64_t v5 = "still waiting for emergency stack initialization";
    uint64_t v6 = 48;
    goto LABEL_6;
  }
  if (*((unsigned char *)this + 185))
  {
    uint64_t v8 = (char *)this + 32;
    uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))(v8, v3);
    uint64_t v4 = *(void **)(v3 + 8);
    uint64_t v5 = "still waiting for emergency transport initialization";
    goto LABEL_3;
  }
  if ((*((_DWORD *)this + 48) & 0xFFFFFFFE) != 2)
  {
    char v16 = (char *)this + 32;
    uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(void *)v16 + 16))(v16, v3);
    uint64_t v4 = *(void **)(v3 + 8);
    uint64_t v5 = "still waiting for emergency location";
    uint64_t v6 = 36;
    goto LABEL_6;
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v9)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v9);
    if (v10)
    {
      uint64_t v11 = *((void *)this + 21);
      if (v11)
      {
        if (*((void *)this + 25) && *((unsigned char *)this + 187))
        {
          SipTimerContainer::cancelTimer((int8x8_t *)this + 616, (std::string *)&kEmergencyCallSetupTimer);
          uint64_t v12 = (char *)this + 32;
          uint64_t v13 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
          (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"processing pending emergency call", 33);
          *(unsigned char *)(v13 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v13 + 17) = 0;
          uint64_t v15 = *((void *)this + 25);
          char v14 = (std::__shared_weak_count *)*((void *)this + 26);
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *((unsigned char *)this + 187) = 0;
          uint64_t v91 = 0;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v72 = 0u;
          memset(v71, 0, sizeof(v71));
          SipUri::SipUri((SipUri *)v71);
          if (SipUri::isValidUri((BambiEmergencyCallHandler *)((char *)this + 4480)))
          {
            SipUri::operator=((SipUri *)v71, (uint64_t)this + 4480);
          }
          else
          {
            if (*((char *)this + 2455) < 0) {
              uint64_t v23 = *((void *)this + 305);
            }
            else {
              uint64_t v23 = *((unsigned __int8 *)this + 2455);
            }
            if (v23)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              SipUri::setUser((uint64_t)v71, (const std::string *)((char *)this + 2432), (uint64_t)__p);
              if (SBYTE7(v46) < 0) {
                operator delete(__p[0]);
              }
              uint64_t v24 = *(void *)(v11 + 160);
              unint64_t v25 = *(std::__shared_weak_count **)(v11 + 168);
              if (v25) {
                atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (SHIBYTE(v73) < 0)
              {
                *(void *)&long long v73 = 3;
                char v26 = (char *)*((void *)&v72 + 1);
              }
              else
              {
                char v26 = (char *)&v72 + 8;
                HIBYTE(v73) = 3;
              }
              strcpy(v26, "sip");
              if (SBYTE7(v78) < 0)
              {
                *(unsigned char *)long long v77 = 0;
                *((void *)&v77 + 1) = 0;
              }
              else
              {
                LOBYTE(v77) = 0;
                BYTE7(v78) = 0;
              }
              if (SBYTE7(v81) < 0)
              {
                *(unsigned char *)long long v80 = 0;
                *((void *)&v80 + 1) = 0;
              }
              else
              {
                LOBYTE(v80) = 0;
                BYTE7(v81) = 0;
              }
              if (SHIBYTE(v82) < 0)
              {
                **((unsigned char **)&v81 + 1) = 0;
                *(void *)&long long v82 = 0;
              }
              else
              {
                BYTE8(v81) = 0;
                HIBYTE(v82) = 0;
              }
              if (SBYTE7(v84) < 0)
              {
                *(unsigned char *)long long v83 = 0;
                *((void *)&v83 + 1) = 0;
              }
              else
              {
                LOBYTE(v83) = 0;
                BYTE7(v84) = 0;
              }
              SipHost::operator=((uint64_t)v71 + 8, v24 + 1128);
              LOBYTE(v86) = 0;
              if (v25) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v25);
              }
            }
          }
          if (SipUri::isValidUri((SipUri *)v71))
          {
            uint64_t v27 = (*(uint64_t (**)(char *))(*(void *)v12 + 64))((char *)this + 32);
            (*(void (**)(char *, uint64_t))(*(void *)v12 + 16))((char *)this + 32, v27);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"setting preferred identity for anonymous calls to ", 50);
            *(unsigned char *)(v27 + 17) = 0;
            (*(void (**)(_OWORD *, uint64_t))(*(void *)&v71[0] + 40))(v71, v27);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v27 + 17) = 0;
            SipUserAgent::setPreferredIdentityForAnonymousCalls(*(SipUserAgent **)(v11 + 144), (const SipUri *)v71);
          }
          uint64_t v28 = *(void *)(v11 + 144);
          uint64_t v30 = *(void *)(v28 + 248);
          long long v29 = *(std::__shared_weak_count **)(v28 + 256);
          if (v29)
          {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
            int v31 = *(_DWORD *)(v30 + 528);
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
          else
          {
            int v31 = *(_DWORD *)(v30 + 528);
          }
          if (v31 == 2)
          {
            uint64_t v70 = 0;
            long long v68 = 0u;
            long long v69 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            long long v64 = 0u;
            long long v65 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            long long v60 = 0u;
            long long v61 = 0u;
            long long v58 = 0u;
            long long v59 = 0u;
            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            *(_OWORD *)size_t v52 = 0u;
            long long v53 = 0u;
            long long v50 = 0u;
            *(_OWORD *)char v51 = 0u;
            *(_OWORD *)uint64_t v48 = 0u;
            *(_OWORD *)size_t v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            *(_OWORD *)std::string __p = 0u;
            uint64_t v32 = *(void *)(v15 + 392);
            int v33 = *(std::__shared_weak_count **)(v15 + 400);
            if (v33) {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v34 = *(void *)(v32 + 248);
            std::string::size_type v35 = *(std::__shared_weak_count **)(v32 + 256);
            if (v35) {
              atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipStack::makeCanonicalUri((SipStack *)v11, (const SipUri *)(v34 + 232), (uint64_t)__p);
            if (v35) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v35);
            }
            if (v33) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v33);
            }
            uint64_t v36 = *(void *)(v15 + 392);
            long long v37 = *(std::__shared_weak_count **)(v15 + 400);
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v38 = *(SipDialog **)(v36 + 248);
            char v39 = *(std::__shared_weak_count **)(v36 + 256);
            if (v39) {
              atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipDialog::updateRemoteUri(v38, (const SipUri *)__p);
            if (v39) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v39);
            }
            if (v37) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v37);
            }
            SipUri::~SipUri((SipUri *)__p);
          }
          uint64_t v41 = *((void *)this + 19);
          char v40 = (std::__shared_weak_count *)*((void *)this + 20);
          if (v40)
          {
            atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 617, (unsigned __int8 *)&kEmergencySessionSetupTimer)&& !*((unsigned char *)this + 188))
          {
            long long v42 = (ImsPrefs *)SipStack::prefs((SipStack *)v11);
            EmergencySessionSetupTimeoutSecondsKey = (void **)ImsPrefs::getEmergencySessionSetupTimeoutSecondsKey(v42);
            if (ImsPrefs::intValue(v42, EmergencySessionSetupTimeoutSecondsKey))
            {
              if (v40) {
                atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              long long v93 = 0;
              uint64_t v44 = operator new(0x20uLL);
              void *v44 = &unk_1F20B8418;
              v44[1] = this;
              v44[2] = v41;
              v44[3] = v40;
              long long v93 = v44;
              SipTimerContainer::startTimer((int8x8_t *)this + 616, (uint64_t)&kEmergencySessionSetupTimer);
              std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v92);
            }
          }
          if (*((unsigned char *)this + 188) && *((double *)this + 640) > 0.0)
          {
            ims::LocationInfo::LocationInfo((ims::LocationInfo *)__p, (BambiEmergencyCallHandler *)((char *)this + 5080));
            BambiCall::setEmergencyLocationInfo(v15, (const std::string *)__p);
            if (SHIBYTE(v53) < 0) {
              operator delete(v52[1]);
            }
            if (SHIBYTE(v52[0]) < 0) {
              operator delete(v51[0]);
            }
            if (SHIBYTE(v50) < 0) {
              operator delete(v49[1]);
            }
            if (SHIBYTE(v49[0]) < 0) {
              operator delete(v48[0]);
            }
          }
          *((unsigned char *)this + 188) = 0;
          *(unsigned char *)(v15 + 465) = 1;
          (*(void (**)(void))(**(void **)(v11 + 2912) + 152))(*(void *)(v11 + 2912));
          if (v40)
          {
            std::__shared_weak_count::__release_weak(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
          SipUri::~SipUri((SipUri *)v71);
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
        }
        else
        {
          uint64_t v21 = *((void *)this + 4);
          uint64_t v20 = (char *)this + 32;
          uint64_t v22 = (*(uint64_t (**)(char *))(v21 + 64))(v20);
          (*(void (**)(char *, uint64_t))(*(void *)v20 + 16))(v20, v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"processPendingEmergencyCall: no pending emergency call", 54);
          *(unsigned char *)(v22 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v22 + 17) = 0;
        }
        goto LABEL_94;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v18 = *((void *)this + 4);
  char v17 = (char *)this + 32;
  uint64_t v19 = (*(uint64_t (**)(char *))(v18 + 64))(v17);
  (*(void (**)(char *, uint64_t))(*(void *)v17 + 16))(v17, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"SipStack is null", 16);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (v10) {
LABEL_94:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
}

void sub_1C523D30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((void *)(v64 - 120));
  if (v63)
  {
    std::__shared_weak_count::__release_weak(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  SipUri::~SipUri((SipUri *)&a61);
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  _Unwind_Resume(a1);
}

uint64_t BambiEmergencyCallHandler::delegate(BambiEmergencyCallHandler *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 22);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 21);
  if (v4) {
    uint64_t v5 = *(void *)(*(void *)(v4 + 136) + 248);
  }
  else {
    uint64_t v5 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v5;
}

void BambiEmergencyCallHandler::handleRegistrationTerminated(void *a1, int a2, SipRegistrationNotification *this)
{
  time_t Retry = SipRegistrationNotification::secondsUntilNextRetry(this);
  if ((uint64_t)a1[615] < 1 || (time_t v5 = Retry, time(0) >= a1[615]))
  {
    BambiEmergencyCallHandler::exitEmergencyState((BambiEmergencyCallHandler *)a1);
  }
  else if (v5 == -1)
  {
    uint64_t v6 = (std::__shared_weak_count *)a1[22];
    if (v6)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = (SipStack *)a1[21];
        if (v9) {
          SipStack::startRegistration(v9, (const SipRegistrationConfig *)(a1 + 37));
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
}

void sub_1C523D528(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::exitEmergencyState(BambiEmergencyCallHandler *this)
{
  uint64_t v2 = (char *)this + 5072;
  if (!*((unsigned char *)this + 5072))
  {
    uint64_t v8 = (char *)this + 32;
    uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))(v8, v4);
    time_t v5 = *(void **)(v4 + 8);
    uint64_t v6 = "exitEmergencyState: not in emergency state";
    uint64_t v7 = 42;
    goto LABEL_5;
  }
  if (*((void *)this + 25))
  {
    uint64_t v3 = (char *)this + 32;
    uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(void *)v3 + 16))(v3, v4);
    time_t v5 = *(void **)(v4 + 8);
    uint64_t v6 = "exitEmergencyState: still have an emergency call";
    uint64_t v7 = 48;
LABEL_5:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    return;
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v9)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v9);
    if (v10)
    {
      uint64_t v11 = *((void *)this + 21);
      if (v11)
      {
        if (*(unsigned char *)(v11 + 176))
        {
          uint64_t v12 = *(void *)(v11 + 144);
          uint64_t v14 = *(void *)(v12 + 248);
          uint64_t v13 = *(std::__shared_weak_count **)(v12 + 256);
          if (v13)
          {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            int v15 = *(_DWORD *)(v14 + 528);
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          else
          {
            int v15 = *(_DWORD *)(v14 + 528);
          }
          if (v15 == 2)
          {
            char v17 = (ImsPrefs *)SipStack::prefs((SipStack *)v11);
            uint64_t v18 = (void **)ImsPrefs::getEmergencyCallBackModeExpirationSecondsKey(v17);
            if (!ImsPrefs::intValue(v17, v18))
            {
              uint64_t v36 = *((void *)this + 4);
              std::string::size_type v35 = (char *)this + 32;
              uint64_t v37 = (*(uint64_t (**)(char *))(v36 + 64))(v35);
              (*(void (**)(char *, uint64_t))(*(void *)v35 + 16))(v35, v37);
              char v39 = (unsigned char *)ImsOutStream::operator<<(v37, "exitEmergencyState: still registered. Waiting for registration expiration at ");
              uint64_t v40 = *(void *)(v11 + 144);
              uint64_t v41 = *(void *)(v40 + 248);
              long long v42 = *(std::__shared_weak_count **)(v40 + 256);
              if (v42) {
                atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              ims::formatTimeAndIntervalFromNow(*(ims **)(v41 + 472), (uint64_t)v39, v38);
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v39[17] = 0;
              if (v42) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v42);
              }
              goto LABEL_42;
            }
          }
        }
        int v16 = 1;
      }
      else
      {
        int v16 = 0;
      }
    }
    else
    {
      int v16 = 0;
      uint64_t v11 = 0;
    }
  }
  else
  {
    int v16 = 0;
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  if (*((uint64_t *)this + 615) >= 1 && time(0) < *((void *)this + 615))
  {
    uint64_t v19 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"exitEmergencyState: waiting for ECBM expiration at ", 51);
    *(unsigned char *)(v19 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 615), v19, v20);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    goto LABEL_41;
  }
  memset(&v44, 0, sizeof(v44));
  if (!v16)
  {
    std::string::basic_string[abi:ne180100]<0>(&v44, "");
    goto LABEL_29;
  }
  if (*(char *)(v11 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)(v11 + 4160), *(void *)(v11 + 4168));
  }
  else {
    std::string v44 = *(std::string *)(v11 + 4160);
  }
  if (!*(unsigned char *)(v11 + 176))
  {
    uint64_t v29 = *(void *)(v11 + 136);
    uint64_t v31 = *(void *)(v29 + 168);
    uint64_t v30 = *(std::__shared_weak_count **)(v29 + 176);
    if (v30)
    {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      if (!v31) {
        goto LABEL_29;
      }
      uint64_t v32 = *(void *)(v11 + 136);
      uint64_t v31 = *(void *)(v32 + 168);
      int v33 = *(std::__shared_weak_count **)(v32 + 176);
      if (v33)
      {
        char v34 = 0;
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_50:
        if (*(char *)(v31 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)(v31 + 4160), *(void *)(v31 + 4168));
        }
        else {
          std::string v43 = *(std::string *)(v31 + 4160);
        }
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        std::string v44 = v43;
        *((unsigned char *)&v43.__r_.__value_.__s + 23) = 0;
        v43.__r_.__value_.__s.__data_[0] = 0;
        if ((v34 & 1) == 0) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        goto LABEL_29;
      }
    }
    else
    {
      if (!v31) {
        goto LABEL_29;
      }
      int v33 = 0;
    }
    char v34 = 1;
    goto LABEL_50;
  }
LABEL_29:
  unsigned char *v2 = 0;
  if (!BambiEmergencyCallHandler::delegate(this))
  {
    uint64_t v22 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"no BambiClient delegate to handle exitEmergencyState", 52);
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v22 + 17) = 0;
    if (!v16) {
      goto LABEL_39;
    }
LABEL_33:
    if (*(unsigned char *)(v11 + 176))
    {
      uint64_t v23 = *(void *)(v11 + 144);
      uint64_t v24 = *(void *)(v23 + 248);
      unint64_t v25 = *(std::__shared_weak_count **)(v23 + 256);
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t))(*(void *)v24 + 272))(v24);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      uint64_t v27 = *((void *)this + 4);
      char v26 = (char *)this + 32;
      uint64_t v28 = (*(uint64_t (**)(char *))(v27 + 64))(v26);
      (*(void (**)(char *, uint64_t))(*(void *)v26 + 16))(v26, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"exiting emergency state!", 24);
      *(unsigned char *)(v28 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v28 + 17) = 0;
      SipStack::deinitialize((SipStack *)v11, 0, 0);
    }
    goto LABEL_39;
  }
  uint64_t v21 = BambiEmergencyCallHandler::delegate(this);
  (*(void (**)(uint64_t, std::string *))(*(void *)v21 + 64))(v21, &v44);
  if (v16) {
    goto LABEL_33;
  }
LABEL_39:
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
LABEL_41:
  if (v10) {
LABEL_42:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
}

void sub_1C523DC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if ((v20 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiEmergencyCallHandler::handleRegistrationError(BambiEmergencyCallHandler *this, uint64_t a2, uint64_t a3)
{
  if (*((unsigned char *)this + 186))
  {
    time_t v5 = (char *)this + 32;
    uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 32, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"emergency registration failed: ", 31);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 + 64) + 16))(a3 + 64, v6);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (*((unsigned char *)BambiEmergencyCallHandler::config(this) + 2))
    {
      *((unsigned char *)this + 186) = 0;
      if (*((unsigned char *)this + 185)) {
        BambiEmergencyCallHandler::initializeTransportForAnonymousCall(this);
      }
      else {
        BambiEmergencyCallHandler::checkConditions(this);
      }
    }
    else
    {
      uint64_t v7 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 32, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"anonymous emergency calls are disabled. Waiting for registration retry.", 71);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
    }
  }
  else
  {
    BambiEmergencyCallHandler::exitEmergencyState(this);
  }
  uint64_t result = BambiEmergencyCallHandler::delegate(this);
  if (result)
  {
    uint64_t v9 = *(uint64_t (**)(void))(*(void *)BambiEmergencyCallHandler::delegate(this) + 88);
    return v9();
  }
  return result;
}

uint64_t *BambiEmergencyCallHandler::config(BambiEmergencyCallHandler *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 21);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  SipStack::carrierIdentifier((SipStack *)v2, &__p);
  time_t v5 = (uint64_t **)BambiPrefsManager::instance(v4);
  p_p = &__p;
  uint64_t v6 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v6 + 12;
}

void sub_1C523DFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void BambiEmergencyCallHandler::initializeTransportForAnonymousCall(BambiEmergencyCallHandler *this)
{
  uint64_t v2 = (void *)((char *)this + 32);
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(void *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"initializing emergency transport for anonymous call", 51);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  uint64_t v4 = (std::__shared_weak_count *)v2[18];
  if (v4)
  {
    time_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 21);
      if (v7)
      {
        uint64_t v17 = 0;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v14 = 0u;
        long long v13 = 0u;
        uint64_t v9 = *(int8x8_t **)(v7 + 160);
        uint64_t v8 = *(std::__shared_weak_count **)(v7 + 168);
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BambiEmergencyCallHandler::currentProxies((BambiEmergencyCallHandler *)v12, (uint64_t)this);
        SipTransportLayer::initializeTransportToProxy(v9, v12, *((unsigned int *)this + 1306), (uint64_t)this + 8, (uint64_t)&v13);
        std::deque<SipUri>::~deque[abi:ne180100](v12);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        if ((*(unsigned int (**)(void, void))(**((void **)&v13 + 1) + 24))(*((void *)&v13 + 1), v14))
        {
          uint64_t v10 = (*(uint64_t (**)(void *))(*v2 + 56))(v2);
          (*(void (**)(void *, uint64_t))(*v2 + 16))(v2, v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"unable to initialize emergency transport: ", 42);
          *(unsigned char *)(v10 + 17) = 0;
          (*(void (**)(long long *, uint64_t))(v13 + 16))(&v13, v10);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v10 + 17) = 0;
          BambiEmergencyCallHandler::tryNextProxy(this, (uint64_t)v11);
          ImsResult::~ImsResult((ImsResult *)v11);
        }
        ImsResult::~ImsResult((ImsResult *)&v13);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C523E274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::deque<SipUri>::~deque[abi:ne180100](va);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::stackInitComplete(void *a1, int a2, const std::string *a3)
{
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  ImsResult::ImsResult((ImsResult *)v16, a3);
  uint64_t v4 = (std::__shared_weak_count *)a1[22];
  if (v4)
  {
    time_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = a1[21];
      if (v7)
      {
        uint64_t v9 = a1[19];
        uint64_t v8 = (std::__shared_weak_count *)a1[20];
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = *(void *)(v7 + 136);
        LoggableString::LoggableString((LoggableString *)__p, "emergencyStackInitComplete");
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 1174405120;
        void v11[2] = ___ZN25BambiEmergencyCallHandler17stackInitCompleteENSt3__110shared_ptrI8SipStackEERK9ImsResult_block_invoke;
        void v11[3] = &__block_descriptor_tmp_30;
        _OWORD v11[4] = a1;
        v11[5] = v9;
        uint64_t v12 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        ImsResult::ImsResult((ImsResult *)v13, (const std::string *)v16);
        (*(void (**)(uint64_t, void **, void *))(*(void *)v10 + 208))(v10, __p, v11);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        ImsResult::~ImsResult((ImsResult *)v13);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        if (v8) {
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  ImsResult::~ImsResult((ImsResult *)v16);
}

void sub_1C523E42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::string::size_type v35 = v33;
  ImsResult::~ImsResult(v35);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  ImsResult::~ImsResult((ImsResult *)(v34 - 128));
  _Unwind_Resume(a1);
}

void ___ZN25BambiEmergencyCallHandler17stackInitCompleteENSt3__110shared_ptrI8SipStackEERK9ImsResult_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(BambiEmergencyCallHandler **)(a1 + 32);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      time_t v5 = v4;
      if (*(void *)(a1 + 40))
      {
        if ((*(uint64_t (**)(void, void))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64), *(unsigned int *)(a1 + 72)))
        {
          uint64_t v6 = (*(uint64_t (**)(void *))(*((void *)v3 + 4) + 64))((void *)v3 + 4);
          (*(void (**)(void *, uint64_t))(*((void *)v3 + 4) + 16))((void *)v3 + 4, v6);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"emergency SIP stack initialization failed: ", 43);
          *(unsigned char *)(v6 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(a1 + 56, v6);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v6 + 17) = 0;
          BambiEmergencyCallHandler::deferCancelPendingEmergencyCall(v3, 18);
        }
        else
        {
          BambiEmergencyCallHandler::handleStackInitialized(v3);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C523E628(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::handleStackInitialized(BambiEmergencyCallHandler *this)
{
  uint64_t v2 = (char *)this + 32;
  int v3 = *((unsigned __int8 *)this + 184);
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v4);
  time_t v5 = *(void **)(v4 + 8);
  if (!v3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"emergency SIP stack is already initialized", 42);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    return;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"emergency SIP stack initialization succeeded", 44);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  *((unsigned char *)this + 184) = 0;
  if (!*((void *)this + 25))
  {
    uint64_t v21 = (*(uint64_t (**)(char *))(*(void *)v2 + 64))(v2);
    (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"emergency stack initialized, but we no longer have a pending emergency call", 75);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    return;
  }
  BambiEmergencyCallHandler::clearLocation(this);
  uint64_t v6 = *((void *)this + 25);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 520);
    if (v7)
    {
      if (*(unsigned char *)(v7 + 4696))
      {
        uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)v2 + 64))(v2);
        (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"not acquiring location for suspicious emergency call", 52);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
LABEL_30:
        uint64_t v22 = (*(uint64_t (**)(char *))(*(void *)v2 + 64))(v2);
        (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Location lookup not required", 28);
        *(unsigned char *)(v22 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v22 + 17) = 0;
        int v20 = 3;
        goto LABEL_31;
      }
    }
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 22);
  if (!v9) {
    goto LABEL_30;
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  if (!v10) {
    goto LABEL_30;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *((void *)this + 21);
  if (!v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    goto LABEL_30;
  }
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  v46[0] = v12;
  v46[1] = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  BambiEmergencyCallHandler::createLocation((uint64_t)v46, (uint64_t)this + 24, &v47);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  uint64_t v13 = v47;
  if (v47)
  {
    long long v14 = v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((void *)this + 660) = v13;
    char v15 = (std::__shared_weak_count *)*((void *)this + 661);
    *((void *)this + 661) = v14;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    *(_OWORD *)((char *)this + 5080) = 0u;
    *(_OWORD *)((char *)this + 5096) = 0u;
    *((void *)this + 639) = 0x40A7700000000000;
    *((void *)this + 640) = 0;
    long long v16 = (void **)((char *)this + 5128);
    if (v2[5119] < 0) {
      operator delete(*v16);
    }
    uint64_t v17 = (void **)((char *)this + 5152);
    *long long v16 = 0;
    *((void *)this + 642) = 0;
    *((void *)this + 643) = 0;
    if (v2[5143] < 0) {
      operator delete(*v17);
    }
    uint64_t v18 = (void **)((char *)this + 5176);
    ImsPrefs *v17 = 0;
    *((void *)this + 645) = 0;
    *((void *)this + 646) = 0;
    if (v2[5167] < 0) {
      operator delete(*v18);
    }
    uint64_t v19 = (void **)((char *)this + 5200);
    std::__shared_weak_count *v18 = 0;
    *((void *)this + 648) = 0;
    *((void *)this + 649) = 0;
    if (v2[5191] < 0) {
      operator delete(*v19);
    }
    std::__shared_weak_count *v19 = 0;
    *((void *)this + 651) = 0;
    *((void *)this + 652) = 0;
    if (v14) {
      goto LABEL_25;
    }
  }
  else
  {
    long long v14 = v48;
    if (v48) {
LABEL_25:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  if (!v13) {
    goto LABEL_30;
  }
  int v20 = 1;
LABEL_31:
  *((_DWORD *)this + 48) = v20;
  uint64_t v23 = (std::__shared_weak_count *)*((void *)this + 22);
  if (!v23) {
    return;
  }
  uint64_t v24 = std::__shared_weak_count::lock(v23);
  if (!v24) {
    return;
  }
  unint64_t v25 = v24;
  uint64_t v26 = *((void *)this + 21);
  if (v26)
  {
    if (*(unsigned char *)(v26 + 176))
    {
      uint64_t v27 = (ImsPrefs *)SipStack::prefs(*((SipStack **)this + 21));
      EnableEmergencyRegistrationKey = (void **)ImsPrefs::getEnableEmergencyRegistrationKey(v27);
      if (ImsPrefs::BOOLValue(v27, EnableEmergencyRegistrationKey))
      {
        if (!*((unsigned char *)this + 288)
          || (uint64_t v29 = (ImsPrefs *)SipStack::prefs((SipStack *)v26),
              IgnoreLimitedServiceInEmergencyModeKey = (void **)ImsPrefs::getIgnoreLimitedServiceInEmergencyModeKey(v29),
              (ImsPrefs::BOOLValue(v29, IgnoreLimitedServiceInEmergencyModeKey) & 1) != 0)
          || ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v26 + 3160))
          && (uint64_t v40 = (ImsPrefs *)SipStack::prefs((SipStack *)v26),
              AllowEmergencyRegistrationInLimitedAccessOnWiFiKey = (void **)ImsPrefs::getAllowEmergencyRegistrationInLimitedAccessOnWiFiKey(v40),
              (ImsPrefs::BOOLValue(v40, AllowEmergencyRegistrationInLimitedAccessOnWiFiKey) & 1) != 0))
        {
          uint64_t v31 = (BambiEmergencyCallHandler *)((char *)this + 296);
          if (SipRegistrationConfig::isValid((BambiEmergencyCallHandler *)((char *)this + 296)))
          {
            uint64_t v32 = (ImsPrefs *)SipStack::prefs((SipStack *)v26);
            AlwaysEmergencyRegisterKey = (void **)ImsPrefs::getAlwaysEmergencyRegisterKey(v32);
            if ((ImsPrefs::BOOLValue(v32, AlwaysEmergencyRegisterKey) & 1) != 0
              || !SipStack::registered((SipStack *)v26))
            {
              uint64_t v44 = (*(uint64_t (**)(char *))(*(void *)v2 + 64))(v2);
              (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v44);
              uint64_t v45 = (unsigned char *)ImsOutStream::operator<<(v44, "attempting emergency registration");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v45[17] = 0;
              SipStack::startRegistration((SipStack *)v26, v31);
              goto LABEL_53;
            }
            uint64_t v34 = (*(uint64_t (**)(char *))(*(void *)v2 + 64))(v2);
            (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v34);
            uint64_t v35 = ImsOutStream::operator<<(v34, "already emergency registered. Not re-registering.");
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          else
          {
            uint64_t v39 = (*(uint64_t (**)(char *))(*(void *)v2 + 64))(v2);
            (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v39);
            uint64_t v35 = ImsOutStream::operator<<(v39, "emergency registration credentials are invalid");
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
        }
        else
        {
          uint64_t v42 = (*(uint64_t (**)(char *))(*(void *)v2 + 64))(v2);
          (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v42);
          uint64_t v35 = ImsOutStream::operator<<(v42, "emergency registration is disabled in Limited Access mode");
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        unint64_t v38 = (unsigned char *)(v35 + 17);
      }
      else
      {
        uint64_t v37 = (*(uint64_t (**)(char *))(*(void *)v2 + 64))(v2);
        (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"emergency registration is disabled in config", 44);
        *(unsigned char *)(v37 + 17) = 0;
        unint64_t v38 = (unsigned char *)(v37 + 17);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      unsigned char *v38 = 0;
      uint64_t v43 = (*(uint64_t (**)(char *))(*(void *)v2 + 64))(v2);
      (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"skipping emergency registration", 31);
      *(unsigned char *)(v43 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v43 + 17) = 0;
      BambiEmergencyCallHandler::dialAnonymousCall(this);
    }
    else
    {
      uint64_t v36 = (*(uint64_t (**)(char *))(*(void *)v2 + 64))(v2);
      (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"Emergency registration not required when using normal stack", 59);
      *(unsigned char *)(v36 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v36 + 17) = 0;
      *(_WORD *)((char *)this + 185) = 0;
      BambiEmergencyCallHandler::checkConditions(this);
    }
  }
LABEL_53:
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
}

void sub_1C523F0E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::deferCancelPendingEmergencyCall(void *a1, int a2)
{
  uint64_t v5 = a1[19];
  uint64_t v4 = (std::__shared_weak_count *)a1[20];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[22];
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[21];
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 136);
        LoggableString::LoggableString((LoggableString *)__p, "cancelPendingEmergencyCall");
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 1174405120;
        void v11[2] = ___ZN25BambiEmergencyCallHandler31deferCancelPendingEmergencyCallEN3ims16DisconnectReason10ReasonCodeE_block_invoke;
        void v11[3] = &__block_descriptor_tmp_61_0;
        _OWORD v11[4] = a1;
        v11[5] = v5;
        uint64_t v12 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        int v13 = a2;
        (*(void (**)(uint64_t, void **, void *))(*(void *)v10 + 208))(v10, __p, v11);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1C523F250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrI25BambiEmergencyCallHandlerEE56c14_ZTS9ImsResult(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  ImsResult::ImsResult((ImsResult *)(a1 + 7), (const std::string *)(a2 + 56));
}

void sub_1C523F2D8(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrI25BambiEmergencyCallHandlerEE56c14_ZTS9ImsResult(uint64_t a1)
{
  ImsResult::~ImsResult((ImsResult *)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void non-virtual thunk to'BambiEmergencyCallHandler::stackInitComplete(uint64_t a1, int a2, const std::string *a3)
{
}

void BambiEmergencyCallHandler::currentProxies(BambiEmergencyCallHandler *this, uint64_t a2)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  uint64_t v2 = *(void *)(a2 + 5240);
  if (*(void *)(a2 + 5248) != v2)
  {
    unint64_t v4 = *(void *)(a2 + 5264);
    uint64_t v5 = (void *)(v2 + 8 * (v4 >> 4));
    uint64_t v6 = (const SipUri *)(*v5 + 408 * (v4 & 0xF));
    uint64_t v7 = *(void *)(v2 + (((*(void *)(a2 + 5272) + v4) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 408 * ((*(_DWORD *)(a2 + 5272) + v4) & 0xF);
    if (v6 != (const SipUri *)v7)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v12 = 0;
        memset(v11, 0, sizeof(v11));
        SipUri::SipUri((SipUri *)v11, v6);
        if (v9 >= *(unsigned int *)(a2 + 5224)) {
          std::deque<SipUri>::push_back(this, (SipUri *)v11);
        }
        SipUri::~SipUri((SipUri *)v11);
        uint64_t v6 = (const SipUri *)((char *)v6 + 408);
        if ((const SipUri *)((char *)v6 - *v5) == (const SipUri *)6528)
        {
          uint64_t v10 = (const SipUri *)v5[1];
          ++v5;
          uint64_t v6 = v10;
        }
        ++v9;
      }
      while (v6 != (const SipUri *)v7);
    }
  }
}

void sub_1C523F478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SipUri::~SipUri((SipUri *)&a9);
  std::deque<SipUri>::~deque[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::tryNextProxy(BambiEmergencyCallHandler *this@<X0>, uint64_t a2@<X8>)
{
  ++*((_DWORD *)this + 1306);
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 22);
  if (!v4)
  {
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5
    || ((uint64_t v6 = (SipStack *)*((void *)this + 21),
         *((void *)this + 659) > (unint64_t)*((unsigned int *)this + 1306))
      ? (BOOL v7 = v6 == 0)
      : (BOOL v7 = 1),
        v7
     || (uint64_t v8 = (ImsPrefs *)SipStack::prefs(v6),
         EmergencyAnonymousAutomaticRedialKey = (void **)ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(v8),
         !ImsPrefs::BOOLValue(v8, EmergencyAnonymousAutomaticRedialKey))))
  {
LABEL_10:
    BambiEmergencyCallHandler::deferCancelPendingEmergencyCall(this, 18);
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 1073741834;
    if (!v5) {
      return;
    }
    goto LABEL_11;
  }
  uint64_t v10 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"will try next proxy in list: ", 29);
  *(unsigned char *)(v10 + 17) = 0;
  BambiEmergencyCallHandler::currentProxies((BambiEmergencyCallHandler *)v12, (uint64_t)this);
  uint64_t v11 = *(void *)(v12[1] + ((v13 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 408 * (v13 & 0xF);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 40))(v11, v10);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  std::deque<SipUri>::~deque[abi:ne180100](v12);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
LABEL_11:
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C523F6D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::deque<SipUri>::push_back(void *a1, SipUri *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 2 * (v5 - v4) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<SipUri>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = (SipUri *)(*(void *)(v4 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 408 * (v7 & 0xF));
  }
  SipUri::SipUri(v8, a2);
  ++a1[5];
}

uint64_t BambiEmergencyCallHandler::redialAnonymously@<X0>(BambiEmergencyCallHandler *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  BambiEmergencyCallHandler::tryNextProxy(this, a2);
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16));
  if ((result & 1) == 0) {
    *((unsigned char *)this + 188) = 1;
  }
  return result;
}

void sub_1C523F810(_Unwind_Exception *a1)
{
  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

double BambiEmergencyCallHandler::prepareCall@<D0>(BambiEmergencyCallHandler *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  void v39[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  if (!*(void *)(*a2 + 520))
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    v34[0] = &unk_1F20B2680;
    v34[1] = &_bambiDomain;
    int v35 = 1073741825;
    uint64_t v10 = (ImsResult *)ImsResult::operator<<<char [40]>((uint64_t)v34, "Emergency call has no emergency options");
    uint64_t v11 = ImsLogContainer::logResult((BambiEmergencyCallHandler *)((char *)this + 32), v10);
    ImsResult::ImsResult((ImsResult *)a3, (const std::string *)v11);
    ImsResult::~ImsResult((ImsResult *)v34);
    return result;
  }
  if (!*((unsigned char *)this + 188))
  {
    BambiEmergencyCallHandler::resetConditions(this);
    *((unsigned char *)this + 5072) = 1;
    uint64_t v14 = *a2;
    uint64_t v13 = a2[1];
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    char v15 = (std::__shared_weak_count *)*((void *)this + 26);
    *((void *)this + 25) = v14;
    *((void *)this + 26) = v13;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    *((unsigned char *)this + 187) = 1;
    BambiEmergencyCallOptions::operator=((uint64_t)this + 216, *(void *)(*a2 + 520));
    long long v16 = (char *)this + 32;
    uint64_t v17 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"preparing emergency call ", 25);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 32))(v17, *((void *)this + 25) + 472);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    *((_DWORD *)this + 1306) = 0;
    uint64_t v18 = (SipUri *)*((void *)this + 37);
    for (uint64_t i = (SipUri *)*((void *)this + 38); v18 != i; v18 = (SipUri *)((char *)v18 + 408))
      std::deque<SipUri>::push_back((void *)this + 654, v18);
    uint64_t v21 = *((void *)this + 19);
    int v20 = (std::__shared_weak_count *)*((void *)this + 20);
    if (v20)
    {
      atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 22);
    if (v22)
    {
      uint64_t v23 = std::__shared_weak_count::lock(v22);
      if (v23)
      {
        uint64_t v24 = *((void *)this + 21);
        if (v24)
        {
          unint64_t v25 = (ImsPrefs *)SipStack::prefs(*((SipStack **)this + 21));
          uint64_t v26 = (void **)ImsPrefs::getEmergencyCallSetupTimeoutSecondsKey(v25);
          if (ImsPrefs::intValue(v25, v26))
          {
            if (v20) {
              atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v27 = operator new(0x20uLL);
            *uint64_t v27 = &unk_1F20B8348;
            v27[1] = this;
            v27[2] = v21;
            v27[3] = v20;
            v39[3] = v27;
            SipTimerContainer::startTimer((int8x8_t *)this + 616, (uint64_t)&kEmergencyCallSetupTimer);
            std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v39);
          }
          switch(*(_DWORD *)(v24 + 200))
          {
            case 0:
              uint64_t v28 = (*(uint64_t (**)(char *))(*(void *)v16 + 64))((char *)this + 32);
              (*(void (**)(char *, uint64_t))(*(void *)v16 + 16))((char *)this + 32, v28);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"initializing emergency SIP stack", 32);
              *(unsigned char *)(v28 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v28 + 17) = 0;
              char v29 = 1;
              if (ims::AccessNetwork::isWifi((BambiEmergencyCallHandler *)((char *)this + 1304))) {
                int v30 = 1;
              }
              else {
                int v30 = 2;
              }
              *((_DWORD *)this + 1000) = v30;
              SipStack::initialize((SipStack *)v24, (BambiEmergencyCallHandler *)((char *)this + 1968));
              goto LABEL_41;
            case 1:
              uint64_t v31 = (*(uint64_t (**)(char *))(*(void *)v16 + 64))((char *)this + 32);
              (*(void (**)(char *, uint64_t))(*(void *)v16 + 16))(v16, v31);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"waiting for emergency SIP stack initialization to complete", 58);
              *(unsigned char *)(v31 + 17) = 0;
              uint64_t v32 = (unsigned char *)(v31 + 17);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_39;
            case 2:
              BambiEmergencyCallHandler::handleStackInitialized(this);
              goto LABEL_40;
            case 3:
              uint64_t v33 = (*(uint64_t (**)(char *))(*(void *)v16 + 64))((char *)this + 32);
              (*(void (**)(char *, uint64_t))(*(void *)v16 + 16))(v16, v33);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"waiting for emergency SIP stack deinitialization to complete", 60);
              *(unsigned char *)(v33 + 17) = 0;
              uint64_t v32 = (unsigned char *)(v33 + 17);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_39:
              unsigned char *v32 = 0;
              goto LABEL_40;
            default:
LABEL_40:
              char v29 = 1;
              break;
          }
          goto LABEL_41;
        }
      }
    }
    else
    {
      uint64_t v23 = 0;
    }
    char v29 = 0;
    double result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0x40000000;
    if (!v23)
    {
      if (!v20) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
LABEL_41:
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    if (!v20)
    {
LABEL_33:
      if ((v29 & 1) == 0) {
        return result;
      }
      goto LABEL_34;
    }
LABEL_32:
    std::__shared_weak_count::__release_weak(v20);
    std::__shared_weak_count::__release_weak(v20);
    goto LABEL_33;
  }
  *((unsigned char *)this + 5072) = 1;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 26);
  *((void *)this + 25) = v5;
  *((void *)this + 26) = v7;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *((unsigned char *)this + 187) = 1;
  uint64_t v9 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"preparing anonymous redial emergency call ", 42);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, *((void *)this + 25) + 472);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  BambiEmergencyCallHandler::dialAnonymousCall(this);
LABEL_34:
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void sub_1C523FF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  if (v10)
  {
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::dialAnonymousCall(BambiEmergencyCallHandler *this)
{
  if (*((unsigned char *)BambiEmergencyCallHandler::config(this) + 2))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 22);
    if (v2)
    {
      int v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        uint64_t v4 = (SipStack *)*((void *)this + 21);
        if (v4)
        {
          uint64_t v5 = (ImsPrefs *)SipStack::prefs(*((SipStack **)this + 21));
          UseNormalIdentityForEmergencyCallsKey = (void **)ImsPrefs::getUseNormalIdentityForEmergencyCallsKey(v5);
          if (ImsPrefs::BOOLValue(v5, UseNormalIdentityForEmergencyCallsKey))
          {
            uint64_t v27 = 0;
            uint64_t v28 = 0;
            uint64_t v29 = 0;
            SipStack::carrierIdentifier(v4, &__p);
            BambiPrefsManager::subscribers((BambiPrefsManager *)&__p, &v27);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            uint64_t v7 = v27;
            uint64_t v8 = v28;
            if (v27 != v28)
            {
              uint64_t v9 = (char *)this + 32;
              do
              {
                uint64_t v10 = *(void *)v7;
                if (*(void *)v7 && !*(unsigned char *)(v10 + 176))
                {
                  uint64_t v11 = *(void *)(v10 + 144);
                  uint64_t v13 = *(void *)(v11 + 248);
                  uint64_t v12 = *(std::__shared_weak_count **)(v11 + 256);
                  if (v12)
                  {
                    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                    int v14 = *(_DWORD *)(v13 + 528);
                    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
                  }
                  else
                  {
                    int v14 = *(_DWORD *)(v13 + 528);
                  }
                  if (v14 == 2)
                  {
                    char v15 = (const SipUri *)SipUserAgent::publicUri(*(SipUserAgent **)(*(void *)v7 + 144));
                    if (SipUri::isValidUri(v15) && !SipUri::isAnonymousUri(v15))
                    {
                      uint64_t v20 = (*(uint64_t (**)(char *))(*(void *)v9 + 64))((char *)this + 32);
                      (*(void (**)(char *, uint64_t))(*(void *)v9 + 16))((char *)this + 32, v20);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"copying preferred URI ", 22);
                      *(unsigned char *)(v20 + 17) = 0;
                      (*(void (**)(const SipUri *, uint64_t))(*(void *)v15 + 40))(v15, v20);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" from non-emergency UA", 22);
                      *(unsigned char *)(v20 + 17) = 0;
                      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      *(unsigned char *)(v20 + 17) = 0;
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E5228;
                      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
                      long long v25 = 0u;
                      long long v26 = 0u;
                      v22[0] = 0;
                      v22[1] = 0;
                      v21[0] = &unk_1F20B37B0;
                      v21[1] = v22;
                      __int16 v23 = 256;
                      SipRouteSet::addHop((SipRouteSet *)&__p, v15, 0, 0, (const SipParameterMap *)v21);
                    }
                    uint64_t v16 = (*(uint64_t (**)(char *))(*(void *)v9 + 64))((char *)this + 32);
                    (*(void (**)(char *, uint64_t))(*(void *)v9 + 16))((char *)this + 32, v16);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"non-emergency stack ", 20);
                    *(unsigned char *)(v16 + 17) = 0;
                    uint64_t v17 = *(void *)v7;
                    if (*(char *)(*(void *)v7 + 4183) < 0) {
                      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v17 + 4160), *(void *)(v17 + 4168));
                    }
                    else {
                      std::string __p = *(std::string *)(v17 + 4160);
                    }
                    (*(void (**)(uint64_t, std::string *))(*(void *)v16 + 32))(v16, &__p);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" doesn't have a valid public URI", 32);
                    *(unsigned char *)(v16 + 17) = 0;
                    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(unsigned char *)(v16 + 17) = 0;
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                  }
                }
                v7 += 16;
              }
              while (v7 != v8);
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
            std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          }
        }
      }
    }
    else
    {
      int v3 = 0;
    }
    if (*((void *)this + 37) == *((void *)this + 38))
    {
      uint64_t v19 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"no proxy specified in emergency call options.  Unable to attempt anonymous emergency call.", 90);
      *(unsigned char *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v19 + 17) = 0;
      BambiEmergencyCallHandler::deferCancelPendingEmergencyCall(this, 36);
    }
    else
    {
      *((unsigned char *)this + 186) = 0;
      BambiEmergencyCallHandler::initializeTransportForAnonymousCall(this);
    }
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else
  {
    uint64_t v18 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 48))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"anonymous emergency calls are not allowed, and we aren't able to register. Canceling emergency call.", 100);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    BambiEmergencyCallHandler::deferCancelPendingEmergencyCall(this, 18);
  }
}

void sub_1C5240604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  SipRouteSet::~SipRouteSet((SipRouteSet *)&__p);
  std::string __p = &a25;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(a1);
}

uint64_t BambiEmergencyCallOptions::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  SipRegistrationConfig::operator=(a1 + 80, a2 + 80);
  SipUserAgentConfig::operator=(a1 + 1752, (long long *)(a2 + 1752));
  SipTransportLayerConfig::operator=(a1 + 3152, a2 + 3152);
  int v4 = *(_DWORD *)(a2 + 3784);
  *(void *)(a1 + 3776) = *(void *)(a2 + 3776);
  *(_DWORD *)(a1 + 3784) = v4;
  BambiCallTerminationReasonsBase::assign((BambiCallTerminationReasonsBase *)(a1 + 3792), (const BambiCallTerminationReasonsBase *)(a2 + 3792));
  BambiCallIncomingTerminationReasons::assign((BambiCallIncomingTerminationReasons *)(a1 + 3960), (const BambiCallIncomingTerminationReasons *)(a2 + 3960));
  std::string::operator=((std::string *)(a1 + 4152), (const std::string *)(a2 + 4152));
  char v5 = *(unsigned char *)(a2 + 4184);
  *(void *)(a1 + 4176) = *(void *)(a2 + 4176);
  *(unsigned char *)(a1 + 4184) = v5;
  if (a1 != a2) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 4192), *(long long **)(a2 + 4192), (long long *)(a2 + 4200));
  }
  uint64_t v6 = *(void *)(a2 + 4216);
  *(_WORD *)(a1 + 4224) = *(_WORD *)(a2 + 4224);
  *(void *)(a1 + 4216) = v6;
  *(_WORD *)(a1 + 4232) = *(_WORD *)(a2 + 4232);
  std::string::operator=((std::string *)(a1 + 4240), (const std::string *)(a2 + 4240));
  SipUri::operator=((SipUri *)(a1 + 4264), a2 + 4264);
  std::string::operator=((std::string *)(a1 + 4672), (const std::string *)(a2 + 4672));
  *(unsigned char *)(a1 + 4696) = *(unsigned char *)(a2 + 4696);
  return a1;
}

void BambiEmergencyCallHandler::transportInitializedToProxy(BambiEmergencyCallHandler *this, const SipUri *a2, const ImsResult *a3)
{
  char v5 = (*(uint64_t (**)(void, void))(**((void **)a3 + 1) + 24))(*((void *)a3 + 1), *((unsigned int *)a3 + 4));
  uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v6);
  uint64_t v7 = *(void **)(v6 + 8);
  if (v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"emergency transport initialization failed: ", 43);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(void *)a3 + 16))(a3, v6);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    BambiEmergencyCallHandler::tryNextProxy(this, (uint64_t)v8);
    ImsResult::~ImsResult((ImsResult *)v8);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"emergency transport initialization succeeded", 44);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    *((unsigned char *)this + 185) = 0;
    BambiEmergencyCallHandler::checkConditions(this);
  }
}

void non-virtual thunk to'BambiEmergencyCallHandler::transportInitializedToProxy(BambiEmergencyCallHandler *this, const SipUri *a2, const ImsResult *a3)
{
}

void BambiEmergencyCallHandler::clearLocation(BambiEmergencyCallHandler *this)
{
  uint64_t v2 = (char *)this + 5151;
  uint64_t v3 = *((void *)this + 660);
  if (v3) {
    *(void *)(v3 + 104) = 0;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 661);
  long long v5 = 0uLL;
  *((_OWORD *)this + 330) = 0u;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    long long v5 = 0uLL;
  }
  *(_OWORD *)((char *)this + 5080) = v5;
  *(_OWORD *)((char *)this + 5096) = v5;
  *((void *)this + 639) = 0x40A7700000000000;
  *((void *)this + 640) = 0;
  uint64_t v6 = (void **)((char *)this + 5128);
  if (*v2 < 0) {
    operator delete(*v6);
  }
  uint64_t v7 = (void **)((char *)this + 5152);
  *uint64_t v6 = 0;
  *((void *)this + 642) = 0;
  *((void *)this + 643) = 0;
  if (v2[24] < 0) {
    operator delete(*v7);
  }
  uint64_t v8 = (char *)this + 5176;
  *uint64_t v7 = 0;
  *((void *)this + 645) = 0;
  *((void *)this + 646) = 0;
  if (v2[48] < 0) {
    operator delete(*(void **)v8);
  }
  uint64_t v9 = (char *)this + 5200;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  if (v2[72] < 0) {
    operator delete(*(void **)v9);
  }
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
}

void BambiEmergencyCallHandler::createLocation(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  long long v5 = *(SipStack **)a1;
  if (!v5)
  {
LABEL_34:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  uint64_t v7 = (ImsPrefs *)SipStack::prefs(v5);
  AlwaysAddGeolocationForEmergencyCallsKey = (void **)ImsPrefs::getAlwaysAddGeolocationForEmergencyCallsKey(v7);
  int v9 = ImsPrefs::BOOLValue(v7, AlwaysAddGeolocationForEmergencyCallsKey);
  uint64_t v10 = *(SipStack **)a1;
  if (v9)
  {
    if (*((unsigned char *)v10 + 2680))
    {
      uint64_t v11 = (ImsPrefs *)SipStack::prefs(v10);
      AllowGeolocationForEmergencyCallsWhileInboundRoamingKey = (void **)ImsPrefs::getAllowGeolocationForEmergencyCallsWhileInboundRoamingKey(v11);
      int v13 = ImsPrefs::BOOLValue(v11, AllowGeolocationForEmergencyCallsWhileInboundRoamingKey);
      uint64_t v10 = *(SipStack **)a1;
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  int v14 = (ImsPrefs *)SipStack::prefs(v10);
  EmergencyLocationLookupRequiredKey = (void **)ImsPrefs::getEmergencyLocationLookupRequiredKey(v14);
  if (!ImsPrefs::BOOLValue(v14, EmergencyLocationLookupRequiredKey)
    || ((uint64_t v16 = *(SipStack **)a1, *(unsigned char *)(*(void *)a1 + 176)) || *((unsigned char *)v16 + 2680))
    && (ims::AccessNetwork::isWifi((ims::AccessNetwork *)((char *)v16 + 3160)) | v13) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v33, "location");
    std::string::basic_string[abi:ne180100]<0>(v31, "");
    uint64_t v27 = ims::debug((uint64_t)&v33, (uint64_t)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"Location lookup is NOT enabled (roaming= ", 41);
    *(unsigned char *)(v27 + 17) = 0;
    if (*(unsigned char *)(*(void *)a1 + 2680)) {
      uint64_t v28 = "true";
    }
    else {
      uint64_t v28 = "false";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v28);
    (*(void (**)(uint64_t, void **))(*(void *)v27 + 32))(v27, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v27 + 17) = 0;
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    if (v35 < 0) {
      operator delete(v33);
    }
    goto LABEL_34;
  }
  std::string::basic_string[abi:ne180100]<0>(&v33, "location");
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  uint64_t v17 = ims::debug((uint64_t)&v33, (uint64_t)v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Location lookup is enabled (roaming= ", 37);
  *(unsigned char *)(v17 + 17) = 0;
  if (*(unsigned char *)(*(void *)a1 + 2680)) {
    uint64_t v18 = "true";
  }
  else {
    uint64_t v18 = "false";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v18);
  (*(void (**)(uint64_t, void **))(*(void *)v17 + 32))(v17, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (v35 < 0) {
    operator delete(v33);
  }
  uint64_t v19 = (ImsPrefs *)SipStack::prefs(*(SipStack **)a1);
  SendEmergencyLocationUpdatesKey = (void **)ImsPrefs::getSendEmergencyLocationUpdatesKey(v19);
  int v21 = ImsPrefs::BOOLValue(v19, SendEmergencyLocationUpdatesKey);
  __int16 v23 = *(SipStack **)a1;
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v24 = operator new(0x88uLL);
  long long v25 = v24;
  v24[1] = 0;
  void v24[2] = 0;
  void *v24 = &unk_1F20B83C8;
  long long v26 = v24 + 3;
  uint64_t v33 = v23;
  uint64_t v34 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ImsLocationSelector::ImsLocationSelector((uint64_t)(v24 + 3), a2, (uint64_t *)&v33, v21);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  *a3 = v26;
  a3[1] = v25;
}

void sub_1C5240E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,int a24,__int16 a25,char a26,char a27)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v29);
  _Unwind_Resume(a1);
}

uint64_t BambiEmergencyCallHandler::preferredLocationTimeout(SipStack **a1)
{
  uint64_t v2 = *a1;
  if (!v2) {
    return 8;
  }
  uint64_t v3 = (ImsPrefs *)SipStack::prefs(v2);
  FastEmergencyLocationEnabledKey = (void **)ImsPrefs::getFastEmergencyLocationEnabledKey(v3);
  int v5 = ImsPrefs::BOOLValue(v3, FastEmergencyLocationEnabledKey);
  uint64_t v6 = *a1;
  if (v5 && ims::AccessNetwork::isLTE((ims::AccessNetwork *)((char *)v6 + 3160)))
  {
    uint64_t v7 = (ImsPrefs *)SipStack::prefs(v6);
    FastEmergencyLocationTimeoutSecondsKey = (void **)ImsPrefs::getFastEmergencyLocationTimeoutSecondsKey(v7);
  }
  else
  {
    uint64_t v7 = (ImsPrefs *)SipStack::prefs(v6);
    FastEmergencyLocationTimeoutSecondsKey = (void **)ImsPrefs::getEmergencyLocationLookupTimeoutSecondsKey(v7);
  }
  LODWORD(result) = ImsPrefs::intValue(v7, FastEmergencyLocationTimeoutSecondsKey);
  if (result) {
    return result;
  }
  else {
    return 8;
  }
}

void BambiEmergencyCallHandler::handleLocationUpdate(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 32;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleLocationUpdate(", 21);
  *(unsigned char *)(v5 + 17) = 0;
  if (*((double *)a2 + 5) > 0.0) {
    uint64_t v6 = "true";
  }
  else {
    uint64_t v6 = "false";
  }
  std::string::basic_string[abi:ne180100]<0>(v60, v6);
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, v60);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v61 < 0) {
    operator delete(v60[0]);
  }
  int v7 = *(_DWORD *)(a1 + 192);
  if (*((double *)a2 + 5) <= 0.0)
  {
    if (v7 != 4)
    {
      if (v7 != 1) {
        return;
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(v4, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Initial location not available ", 31);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
      uint64_t v13 = *(void *)(a1 + 200);
      if (v13)
      {
        memset(v23, 0, sizeof(v23));
        uint64_t v24 = 0x40A7700000000000;
        *(_OWORD *)long long v25 = 0u;
        long long v26 = 0u;
        *(_OWORD *)uint64_t v27 = 0u;
        *(_OWORD *)uint64_t v28 = 0u;
        long long v29 = 0u;
        *(_OWORD *)std::string __p = 0u;
        uint64_t v31 = 0;
        BambiCall::setEmergencyLocationInfo(v13, (const std::string *)v23);
        if (SHIBYTE(v31) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v29) < 0) {
          operator delete(v28[1]);
        }
        if (SHIBYTE(v28[0]) < 0) {
          operator delete(v27[0]);
        }
        if (SHIBYTE(v26) < 0) {
          operator delete(v25[1]);
        }
      }
      *(_DWORD *)(a1 + 192) = 3;
      goto LABEL_31;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"We don't have a location to send in UPDATE", 42);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
  }
  else
  {
    switch(v7)
    {
      case 4:
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(v4);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(v4, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Update location available ", 26);
        *(unsigned char *)(v15 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v15 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)", ", 2);
        *(unsigned char *)(v15 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v15 + 17) = 0;
        uint64_t v16 = *(void *)(a1 + 200);
        if (v16)
        {
          ims::LocationInfo::LocationInfo((ims::LocationInfo *)v32, (const ims::LocationInfo *)a2);
          BambiCall::sendEmergencyLocationUpdate(v16, (const ims::LocationInfo *)v32, (ImsResult *)v41);
          ImsResult::~ImsResult((ImsResult *)v41);
          if (v40 < 0) {
            operator delete(v39);
          }
          if (v38 < 0) {
            operator delete(v37);
          }
          if (v36 < 0) {
            operator delete(v35);
          }
          if (v34 < 0)
          {
            uint64_t v17 = v33;
LABEL_51:
            operator delete(v17);
          }
        }
        break;
      case 2:
        uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(v4);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(v4, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Updated initial location available ", 35);
        *(unsigned char *)(v18 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v18 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)", ", 2);
        *(unsigned char *)(v18 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v18 + 17) = 0;
        uint64_t v19 = (const ims::LocationInfo *)(a1 + 5080);
        long long v20 = *a2;
        long long v21 = a2[2];
        *(_OWORD *)(a1 + 5096) = a2[1];
        *(_OWORD *)(a1 + 5112) = v21;
        *(_OWORD *)(a1 + 5080) = v20;
        std::string::operator=((std::string *)(a1 + 5128), (const std::string *)a2 + 2);
        std::string::operator=((std::string *)(a1 + 5152), (const std::string *)a2 + 3);
        std::string::operator=((std::string *)(a1 + 5176), (const std::string *)a2 + 4);
        std::string::operator=((std::string *)(a1 + 5200), (const std::string *)a2 + 5);
        uint64_t v22 = *(void *)(a1 + 200);
        if (v22)
        {
          ims::LocationInfo::LocationInfo((ims::LocationInfo *)v42, v19);
          BambiCall::setEmergencyLocationInfo(v22, v42);
          if (v50 < 0) {
            operator delete(v49);
          }
          if (v48 < 0) {
            operator delete(v47);
          }
          if (v46 < 0) {
            operator delete(v45);
          }
          if (v44 < 0)
          {
            uint64_t v17 = v43;
            goto LABEL_51;
          }
        }
        break;
      case 1:
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 64))(v4);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(v4, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Initial location available ", 27);
        *(unsigned char *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)", ", 2);
        *(unsigned char *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        *(_DWORD *)(a1 + 192) = 2;
        long long v9 = *a2;
        long long v10 = a2[2];
        *(_OWORD *)(a1 + 5096) = a2[1];
        *(_OWORD *)(a1 + 5112) = v10;
        *(_OWORD *)(a1 + 5080) = v9;
        std::string::operator=((std::string *)(a1 + 5128), (const std::string *)a2 + 2);
        std::string::operator=((std::string *)(a1 + 5152), (const std::string *)a2 + 3);
        std::string::operator=((std::string *)(a1 + 5176), (const std::string *)a2 + 4);
        std::string::operator=((std::string *)(a1 + 5200), (const std::string *)a2 + 5);
        uint64_t v11 = *(void *)(a1 + 200);
        if (v11)
        {
          ims::LocationInfo::LocationInfo((ims::LocationInfo *)v51, (const ims::LocationInfo *)(a1 + 5080));
          BambiCall::setEmergencyLocationInfo(v11, v51);
          if (v59 < 0) {
            operator delete(v58);
          }
          if (v57 < 0) {
            operator delete(v56);
          }
          if (v55 < 0) {
            operator delete(v54);
          }
          if (v53 < 0) {
            operator delete(v52);
          }
        }
LABEL_31:
        BambiEmergencyCallHandler::checkConditions((BambiEmergencyCallHandler *)a1);
        return;
      default:
        return;
    }
  }
}

void sub_1C52417A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
}

std::string *BambiCall::setEmergencyLocationInfo(uint64_t a1, const std::string *a2)
{
  long long v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
  long long v5 = *(_OWORD *)&a2[1].__r_.__value_.__r.__words[1];
  *(_OWORD *)(a1 + 544) = *(_OWORD *)&a2->__r_.__value_.__r.__words[2];
  *(_OWORD *)(a1 + 560) = v5;
  *(_OWORD *)(a1 + 528) = v4;
  std::string::operator=((std::string *)(a1 + 576), a2 + 2);
  std::string::operator=((std::string *)(a1 + 600), a2 + 3);
  std::string::operator=((std::string *)(a1 + 624), a2 + 4);
  return std::string::operator=((std::string *)(a1 + 648), a2 + 5);
}

void non-virtual thunk to'BambiEmergencyCallHandler::handleLocationUpdate(uint64_t a1, long long *a2)
{
}

void ___ZN25BambiEmergencyCallHandler31deferCancelPendingEmergencyCallEN3ims16DisconnectReason10ReasonCodeE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    long long v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      long long v5 = v4;
      if (*(void *)(a1 + 40)) {
        BambiEmergencyCallHandler::cancelPendingEmergencyCall(v3, *(_DWORD *)(a1 + 56));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C52418E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrI25BambiEmergencyCallHandlerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrI25BambiEmergencyCallHandlerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void BambiEmergencyCallHandler::endEmergencyCallWithReason(uint64_t a1, int a2)
{
  uint64_t v6 = *(BambiCall **)(a1 + 200);
  long long v5 = *(std::__shared_weak_count **)(a1 + 208);
  long long v4 = (void *)(a1 + 200);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    int v7 = *(std::__shared_weak_count **)(a1 + 208);
    void *v4 = 0;
    v4[1] = 0;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  else
  {
    void *v4 = 0;
    *(void *)(a1 + 208) = 0;
  }
  *(_WORD *)(a1 + 187) = 0;
  bzero(v8, 0x250uLL);
  BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)v8, 15, a2);
  v8[0] = &unk_1F20B85E8;
  (*(void (**)(BambiCall *, void *))(*(void *)v6 + 56))(v6, v8);
  BambiCall::handleInitializationFailure(v6);
  BambiEmergencyCallHandler::startEmergencyCallBackMode((BambiEmergencyCallHandler *)a1);
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)v8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5241A20(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiEmergencyCallHandler::startEmergencyCallBackMode(BambiEmergencyCallHandler *this)
{
  void v31[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (int8x8_t *)((char *)this + 4928);
  SipTimerContainer::cancelAllTimers((BambiEmergencyCallHandler *)((char *)this + 4928));
  BambiEmergencyCallHandler::clearLocation(this);
  uint64_t v3 = *((void *)this + 25);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 520);
    if (v4)
    {
      if (*(unsigned char *)(v4 + 4696))
      {
        uint64_t v6 = *((void *)this + 4);
        long long v5 = (char *)this + 32;
        uint64_t v7 = (*(uint64_t (**)(char *))(v6 + 64))(v5);
        (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))(v5, v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Skip ECBM for suspicious emergency call", 39);
        *(unsigned char *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v7 + 17) = 0;
        return;
      }
    }
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v8)
  {
    long long v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      long long v10 = (SipStack *)*((void *)this + 21);
      if (v10)
      {
        uint64_t v11 = (ImsPrefs *)SipStack::prefs(v10);
        uint64_t v12 = (void **)ImsPrefs::getEmergencyCallBackModeExpirationSecondsKey(v11);
        unsigned int v13 = ImsPrefs::intValue(v11, v12);
        if (v13)
        {
          uint64_t v15 = *((void *)this + 19);
          uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 20);
          if (v14)
          {
            atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          *((void *)this + 615) = time(0) + v13;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = operator new(0x20uLL);
          *uint64_t v16 = &unk_1F20B8498;
          v16[1] = this;
          uint64_t v16[2] = v15;
          v16[3] = v14;
          void v31[3] = v16;
          SipTimerContainer::startTimer(v2, (uint64_t)"ECBMTimer");
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v31);
          uint64_t v18 = *((void *)this + 4);
          uint64_t v17 = (char *)this + 32;
          uint64_t v19 = (unsigned char *)(*(uint64_t (**)(char *))(v18 + 64))(v17);
          (*(void (**)(char *, unsigned char *))(*(void *)v17 + 16))(v17, v19);
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v19[17] = 0;
          if (v14)
          {
            std::__shared_weak_count::__release_weak(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
LABEL_31:
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          return;
        }
      }
    }
  }
  else
  {
    long long v9 = 0;
  }
  uint64_t v21 = *((void *)this + 19);
  long long v20 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v22)
  {
    __int16 v23 = std::__shared_weak_count::lock(v22);
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = *((void *)this + 21);
      if (v25)
      {
        uint64_t v26 = *(void *)(v25 + 136);
        LoggableString::LoggableString((LoggableString *)__p, "exitEmergencyState");
        v27[0] = MEMORY[0x1E4F143A8];
        v27[1] = 1174405120;
        v27[2] = ___ZN25BambiEmergencyCallHandler23deferExitEmergencyStateEv_block_invoke;
        v27[3] = &__block_descriptor_tmp_71_1;
        v27[4] = this;
        v27[5] = v21;
        uint64_t v28 = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, void **, void *))(*(void *)v26 + 208))(v26, __p, v27);
        if (v30 < 0) {
          operator delete(__p[0]);
        }
        if (v28) {
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v9) {
    goto LABEL_31;
  }
}

void sub_1C5241E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](&a23);
  if (v24)
  {
    std::__shared_weak_count::__release_weak(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::handleCallEvent(BambiEmergencyCallHandler *this, BambiCallEvent *a2)
{
  if (*((_DWORD *)a2 + 2) == 9)
  {
    uint64_t v3 = (void *)((char *)this + 32);
    uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(void *, uint64_t))(*v3 + 16))(v3, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Call confirmed", 14);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    long long v5 = (std::__shared_weak_count *)v3[18];
    if (v5)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = (SipStack *)*((void *)this + 21);
        if (v8)
        {
          long long v9 = (ImsPrefs *)SipStack::prefs(v8);
          SendEmergencyLocationUpdatesKey = (void **)ImsPrefs::getSendEmergencyLocationUpdatesKey(v9);
          if (ImsPrefs::BOOLValue(v9, SendEmergencyLocationUpdatesKey))
          {
            if (*((void *)this + 660) && *((_DWORD *)this + 48)) {
              *((_DWORD *)this + 48) = 4;
            }
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
}

void sub_1C524200C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::handleCallInvalidated(BambiEmergencyCallHandler *this, void *a2)
{
  if (!*((unsigned char *)this + 188))
  {
    if (*a2 == *((void *)this + 25))
    {
      *((unsigned char *)this + 187) = 0;
      long long v5 = (std::__shared_weak_count *)*((void *)this + 26);
      *((void *)this + 25) = 0;
      *((void *)this + 26) = 0;
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      BambiEmergencyCallHandler::startEmergencyCallBackMode(this);
    }
    else
    {
      uint64_t v3 = (char *)this + 32;
      uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 64))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*(void *)v3 + 16))(v3, v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"cannot invalidate non-emergency call", 36);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
    }
  }
}

void BambiEmergencyCallHandler::handleTimer(BambiEmergencyCallHandler *this, unsigned __int8 *a2)
{
  uint64_t v2 = (const void **)a2;
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v6 != 9) {
    goto LABEL_12;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "ECBMTimer", v5)) {
      goto LABEL_12;
    }
LABEL_24:
    *((void *)this + 615) = 0;
    BambiEmergencyCallHandler::exitEmergencyState(this);
    return;
  }
  if (!a2[23]) {
    goto LABEL_24;
  }
  uint64_t v7 = "ECBMTimer";
  uint64_t v8 = a2;
  uint64_t v9 = a2[23];
  while (*v8 == *(unsigned __int8 *)v7)
  {
    ++v8;
    ++v7;
    if (!--v9) {
      goto LABEL_24;
    }
  }
LABEL_12:
  uint64_t v10 = qword_1EBBDB9B0;
  if (byte_1EBBDB9BF >= 0) {
    uint64_t v10 = byte_1EBBDB9BF;
  }
  if (v6 != v10) {
    goto LABEL_28;
  }
  if (byte_1EBBDB9BF >= 0) {
    uint64_t v11 = &kEmergencyCallSetupTimer;
  }
  else {
    uint64_t v11 = (uint64_t *)kEmergencyCallSetupTimer;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v11, v5)) {
      goto LABEL_28;
    }
LABEL_39:
    uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 22);
    if (v16)
    {
      uint64_t v17 = std::__shared_weak_count::lock(v16);
      if (v17)
      {
        uint64_t v18 = (SipStack *)*((void *)this + 21);
        if (v18)
        {
          uint64_t v19 = (ImsPrefs *)SipStack::prefs(v18);
          EmergencyAnonymousAutomaticRedialKey = (void **)ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(v19);
          if (ImsPrefs::BOOLValue(v19, EmergencyAnonymousAutomaticRedialKey))
          {
            BambiEmergencyCallHandler::dialAnonymousCall(this);
LABEL_52:
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            return;
          }
        }
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    BambiEmergencyCallHandler::cancelPendingEmergencyCall((uint64_t)this, 18);
    if (!v17) {
      return;
    }
    goto LABEL_52;
  }
  if (!v4) {
    goto LABEL_39;
  }
  uint64_t v12 = v2;
  uint64_t v13 = v4;
  while (*(unsigned __int8 *)v12 == *(unsigned __int8 *)v11)
  {
    uint64_t v12 = (const void **)((char *)v12 + 1);
    uint64_t v11 = (uint64_t *)((char *)v11 + 1);
    if (!--v13) {
      goto LABEL_39;
    }
  }
LABEL_28:
  uint64_t v14 = qword_1EBBDB738;
  if (byte_1EBBDB747 >= 0) {
    uint64_t v14 = byte_1EBBDB747;
  }
  if (v6 != v14) {
    return;
  }
  if (byte_1EBBDB747 >= 0) {
    uint64_t v15 = &kEmergencySessionSetupTimer;
  }
  else {
    uint64_t v15 = (uint64_t *)kEmergencySessionSetupTimer;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v15, v5)) {
      return;
    }
    goto LABEL_45;
  }
  if (!v4)
  {
LABEL_45:
    uint64_t v21 = (BambiCall *)*((void *)this + 25);
    if (v21)
    {
      if (*((unsigned char *)this + 187))
      {
        BambiEmergencyCallHandler::endEmergencyCallWithReason((uint64_t)this, 23);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "EmergencySetupTimeout");
        BambiCall::endWithReason(v21, (uint64_t)__p, (uint64_t)v27);
        ImsResult::~ImsResult((ImsResult *)v27);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      uint64_t v23 = *((void *)this + 4);
      uint64_t v22 = (char *)this + 32;
      uint64_t v24 = (*(uint64_t (**)(char *, uint64_t *))(v23 + 64))(v22, v15);
      (*(void (**)(char *, uint64_t))(*(void *)v22 + 16))(v22, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"No emergency call to terminate.", 31);
      *(unsigned char *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v24 + 17) = 0;
    }
    return;
  }
  while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v15)
  {
    uint64_t v2 = (const void **)((char *)v2 + 1);
    uint64_t v15 = (uint64_t *)((char *)v15 + 1);
    if (!--v4) {
      goto LABEL_45;
    }
  }
}

void sub_1C52424B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN25BambiEmergencyCallHandler23deferExitEmergencyStateEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (BambiEmergencyCallHandler *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5]) {
        BambiEmergencyCallHandler::exitEmergencyState(v3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C524255C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::checkTimers(int8x8_t *this)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  if (this[615])
  {
    uint64_t v2 = this + 616;
    SipTimerContainer::cancelTimer(this + 616, (std::string *)"ECBMTimer");
    if (*(void *)&this[615] <= time(0) + 4)
    {
      uint64_t v9 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[4] + 64))(this + 4);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)&this[4] + 16))(this + 4, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)". Exiting emergency state now.", 30);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
      this[615] = 0;
      BambiEmergencyCallHandler::exitEmergencyState((BambiEmergencyCallHandler *)this);
    }
    else
    {
      int8x8_t v4 = this[19];
      uint64_t v3 = (std::__shared_weak_count *)this[20];
      if (v3)
      {
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v5 = operator new(0x20uLL);
      *size_t v5 = &unk_1F20B8518;
      v5[1] = this;
      void v5[2] = v4;
      v5[3] = v3;
      std::string v10[3] = v5;
      SipTimerContainer::startTimer(v2, (uint64_t)"ECBMTimer");
      std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v10);
      int8x8_t v7 = this[4];
      uint64_t v6 = this + 4;
      uint64_t v8 = (unsigned char *)(*(uint64_t (**)(int8x8_t *))(*(void *)&v7 + 64))(v6);
      (*(void (**)(int8x8_t *, unsigned char *))(*(void *)v6 + 16))(v6, v8);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v8[17] = 0;
      if (v3)
      {
        std::__shared_weak_count::__release_weak(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_1C5242828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::handleInfoRequest(BambiEmergencyCallHandler *this, const SipRequest *a2)
{
  int8x8_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)a2 + 4, "Info-Package");
  if (v4) {
    uint64_t v5 = *((void *)v4 + 5);
  }
  else {
    uint64_t v5 = 0;
  }
  long long v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 22);
  if (!v6)
  {
    int8x8_t v7 = 0;
    goto LABEL_10;
  }
  int8x8_t v7 = std::__shared_weak_count::lock(v6);
  if (!v7
    || (uint64_t v8 = (SipStack *)*((void *)this + 21)) == 0
    || (uint64_t v9 = (ImsPrefs *)SipStack::prefs(v8),
        SupportsCurrentLocationDiscoveryKey = (void **)ImsPrefs::getSupportsCurrentLocationDiscoveryKey(v9),
        (ImsPrefs::BOOLValue(v9, SupportsCurrentLocationDiscoveryKey) & 1) != 0))
  {
LABEL_10:
    if (v5)
    {
      (*(void (**)(uint64_t, void ***))(*(void *)v5 + 40))(v5, &v54);
      uint64_t v14 = HIBYTE(v56);
      if (v56 < 0) {
        uint64_t v14 = v55;
      }
      if (v14 == 33
        && (v56 >= 0 ? (uint64_t v15 = (void **)&v54) : (uint64_t v15 = v54), !memcmp(v15, "g.3gpp.current-location-discovery", 0x21uLL)))
      {
        uint64_t v21 = SipMessage::bodyWithContentType((uint64_t)a2, SipLocationDiscoveryBody::kContentType);
        if (v21)
        {
          if (v22)
          {
            if (!v22[96])
            {
              uint64_t v23 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 48))((char *)this + 32);
              (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v23);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"Location discovery XML body found, but without oneShot directive.  Assuming oneShot.", 84);
              *(unsigned char *)(v23 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v23 + 17) = 0;
            }
            long long v52 = 0u;
            long long v53 = 0u;
            long long v50 = 0u;
            long long v51 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            long long v47 = 0u;
            memset(v46, 0, sizeof(v46));
            ims::LocationInfo::LocationInfo((ims::LocationInfo *)v46, (BambiEmergencyCallHandler *)((char *)this + 5080));
            uint64_t v24 = *((void *)this + 25);
            if (v24)
            {
              uint64_t v25 = *(SipSession **)(v24 + 392);
              if (v25)
              {
                if (SipSession::confirmed(v25))
                {
                  if (*((double *)&v47 + 1) <= 0.0)
                  {
                    uint64_t v31 = (*(uint64_t (**)(char *, double))(*((void *)this + 4) + 56))((char *)this + 32, *((double *)&v47 + 1));
                    (*(void (**)(char *, uint64_t))(*((void *)this + 4) + 16))((char *)this + 32, v31);
                    char v32 = (unsigned char *)ImsOutStream::operator<<(v31, "We don't have a location to send in PUBLISH");
                    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    v32[17] = 0;
                    uint64_t v33 = *((void *)this + 25);
                    memset(v34, 0, sizeof(v34));
                    uint64_t v35 = 0x40A7700000000000;
                    long long v36 = 0u;
                    long long v37 = 0u;
                    long long v38 = 0u;
                    long long v39 = 0u;
                    long long v40 = 0u;
                    long long v41 = 0u;
                    uint64_t v27 = (void **)v34;
                    uint64_t v28 = (ImsResult *)v43;
                    uint64_t v42 = 0;
                    BambiCall::sendEmergencyLocationPublish(v33, (const ims::LocationInfo *)v34, (ImsResult *)v43);
                  }
                  else
                  {
                    uint64_t v26 = *((void *)this + 25);
                    ims::LocationInfo::LocationInfo((ims::LocationInfo *)v44, (const ims::LocationInfo *)v46);
                    uint64_t v27 = (void **)v44;
                    uint64_t v28 = (ImsResult *)v45;
                    BambiCall::sendEmergencyLocationPublish(v26, (const ims::LocationInfo *)v44, (ImsResult *)v45);
                  }
                  ImsResult::~ImsResult(v28);
                  if (*((char *)v27 + 143) < 0) {
                    operator delete(v27[15]);
                  }
                  if (*((char *)v27 + 119) < 0) {
                    operator delete(v27[12]);
                  }
                  if (*((char *)v27 + 95) < 0) {
                    operator delete(v27[9]);
                  }
                  if (*((char *)v27 + 71) < 0) {
                    operator delete(v27[6]);
                  }
                }
              }
            }
            if (SHIBYTE(v53) < 0) {
              operator delete(*((void **)&v52 + 1));
            }
            if (SBYTE7(v52) < 0) {
              operator delete((void *)v51);
            }
            if (SHIBYTE(v50) < 0) {
              operator delete(*((void **)&v49 + 1));
            }
            if (SBYTE7(v49) < 0) {
              operator delete((void *)v48);
            }
LABEL_21:
            if (!v7) {
              goto LABEL_23;
            }
            goto LABEL_22;
          }
        }
        uint64_t v30 = *((void *)this + 4);
        long long v29 = (char *)this + 32;
        uint64_t v18 = (*(uint64_t (**)(char *))(v30 + 64))(v29);
        (*(void (**)(char *, uint64_t))(*(void *)v29 + 16))(v29, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Ignoring INFO request without location discovery body", 53);
        *(unsigned char *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        uint64_t v17 = *((void *)this + 4);
        uint64_t v16 = (char *)this + 32;
        uint64_t v18 = (*(uint64_t (**)(char *))(v17 + 64))(v16);
        (*(void (**)(char *, uint64_t))(*(void *)v16 + 16))(v16, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Ignoring INFO request without valid location discovery Info-Package header", 74);
        *(unsigned char *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
    }
    else
    {
      uint64_t v20 = *((void *)this + 4);
      uint64_t v19 = (char *)this + 32;
      uint64_t v18 = (*(uint64_t (**)(char *))(v20 + 64))(v19);
      (*(void (**)(char *, uint64_t))(*(void *)v19 + 16))(v19, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Ignoring INFO request without valid location discovery Info-Package header", 74);
      *(unsigned char *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(unsigned char *)(v18 + 17) = 0;
    goto LABEL_21;
  }
  uint64_t v12 = *((void *)this + 4);
  uint64_t v11 = (char *)this + 32;
  uint64_t v13 = (*(uint64_t (**)(char *))(v12 + 64))(v11);
  (*(void (**)(char *, uint64_t))(*(void *)v11 + 16))(v11, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Ignoring INFO request without location discovery enabled", 56);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
LABEL_22:
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_23:
  if (SHIBYTE(v56) < 0) {
    operator delete(v54);
  }
}

void sub_1C5242F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ims::LocationInfo::~LocationInfo(&a9);
  ims::LocationInfo::~LocationInfo((void **)(v10 - 224));
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*(char *)(v10 - 49) < 0) {
    operator delete(*(void **)(v10 - 72));
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'BambiEmergencyCallHandler::handleInfoRequest(BambiEmergencyCallHandler *this, const SipRequest *a2)
{
}

void BambiEmergencyCallHandler::loggableName(LoggableString *a1@<X8>)
{
}

void BambiEmergencyCallHandler::logPrefix(BambiEmergencyCallHandler *this, ImsOutStream *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 120))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5243074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'BambiEmergencyCallHandler::logPrefix(BambiEmergencyCallHandler *this, ImsOutStream *a2)
{
}

void non-virtual thunk to'BambiEmergencyCallHandler::loggableName(LoggableString *a1@<X8>)
{
}

void BambiEmergencyCallOptions::BambiEmergencyCallOptions(BambiEmergencyCallOptions *this)
{
  *(_OWORD *)((char *)this + 57) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  SipRegistrationConfig::SipRegistrationConfig((BambiEmergencyCallOptions *)((char *)this + 80));
  SipStackConfig::SipStackConfig((BambiEmergencyCallOptions *)((char *)this + 1752));
  SipUri::SipUri((BambiEmergencyCallOptions *)((char *)this + 4264));
  *((void *)this + 586) = 0;
  *((_OWORD *)this + 292) = 0u;
  *((unsigned char *)this + 4696) = 0;
}

void sub_1C5243134(_Unwind_Exception *a1)
{
  char v4 = v2;
  SipStackConfig::~SipStackConfig(v4);
  SipRegistrationConfig::~SipRegistrationConfig(v3);
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*(void **)(v1 + 48));
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void SipStackConfig::SipStackConfig(SipStackConfig *this)
{
  SipUserAgentConfig::SipUserAgentConfig(this);
  *(void *)(v2 + 1416) = 0;
  *(_OWORD *)(v2 + 1400) = 0u;
  SipUri::SipUri((SipUri *)(v2 + 1424));
  *((_DWORD *)this + 458) = 331617220;
  *((_DWORD *)this + 459) = 0x10000;
  *((_WORD *)this + 920) = 1;
  *((unsigned char *)this + 1842) = 0;
  *(_OWORD *)((char *)this + 1844) = xmmword_1C56C93C0;
  *((_DWORD *)this + 465) = 300;
  *((void *)this + 233) = 0;
  *((_OWORD *)this + 117) = 0u;
  *((void *)this + 236) = 0x100000005;
  *((_DWORD *)this + 474) = 0;
  *((void *)this + 238) = 0;
  *(_OWORD *)((char *)this + 1912) = 0u;
  *((_WORD *)this + 964) = 1;
  *((unsigned char *)this + 1930) = 0;
  *((_DWORD *)this + 483) = 0;
  *((void *)this + 242) = &unk_1F20D68F0;
  *((_OWORD *)this + 122) = 0u;
  *((void *)this + 243) = (char *)this + 1952;
  *((_DWORD *)this + 492) = 30;
  *((_WORD *)this + 986) = 256;
  *((unsigned char *)this + 1974) = 0;
  *((_DWORD *)this + 494) = 0;
  *((_WORD *)this + 990) = 256;
  *((unsigned char *)this + 1982) = 0;
  *((_OWORD *)this + 124) = xmmword_1C56C93D0;
  *((_OWORD *)this + 125) = xmmword_1C56C93E0;
  *((void *)this + 252) = 0;
  *((_DWORD *)this + 506) = 5000;
  *((unsigned char *)this + 2028) = -1;
  *((_DWORD *)this + 508) = 2;
  *((_DWORD *)this + 512) = 0;
  *((_OWORD *)this + 129) = 0u;
  *((_OWORD *)this + 130) = 0u;
  *((_OWORD *)this + 131) = 0u;
  *(_OWORD *)((char *)this + 2167) = 0u;
  *(_OWORD *)((char *)this + 2136) = 0u;
  *(_OWORD *)((char *)this + 2152) = 0u;
  *(_OWORD *)((char *)this + 2120) = 0u;
  *((unsigned char *)this + 2079) = 13;
  qmemcpy((char *)this + 2056, "Internal", 8);
  *(void *)((char *)this + 2108) = 0xA000001F4;
  *((_OWORD *)this + 137) = 0u;
  *((void *)this + 273) = (char *)this + 2192;
  *((void *)this + 255) = &unk_1F20DBBE8;
  *((_DWORD *)this + 554) = 0;
  *(_OWORD *)((char *)this + 2232) = 0u;
  *(_OWORD *)((char *)this + 2248) = 0u;
  *(_OWORD *)((char *)this + 2264) = 0u;
  *((_OWORD *)this + 143) = 0u;
  *((_OWORD *)this + 144) = 0u;
  *((_OWORD *)this + 145) = 0u;
  *(_OWORD *)((char *)this + 2335) = 0u;
  *((unsigned char *)this + 2247) = 13;
  qmemcpy((char *)this + 2224, "Internal", 8);
  *(void *)((char *)this + 2276) = 0xA000001F4;
  *(_OWORD *)((char *)this + 2360) = 0u;
  *((void *)this + 294) = (char *)this + 2360;
  *((void *)this + 276) = &unk_1F20DBC28;
  *((_OWORD *)this + 149) = 0u;
  *((void *)this + 297) = (char *)this + 2384;
  *((_OWORD *)this + 150) = 0u;
  *((void *)this + 302) = 0;
  *((_DWORD *)this + 606) = 3;
  *((unsigned char *)this + 2428) = 1;
  *((void *)this + 306) = 0;
  *((void *)this + 307) = 0;
  *(_DWORD *)((char *)this + 2429) = 0;
  *((void *)this + 305) = (char *)this + 2448;
  *((_WORD *)this + 1232) = 0;
  *((_DWORD *)this + 617) = 0;
  *((_WORD *)this + 1236) = 0;
  *((unsigned char *)this + 2480) = 1;
  *((void *)this + 312) = 0;
  *((void *)this + 311) = 0;
  *((void *)this + 313) = 0;
}

void sub_1C52433EC(_Unwind_Exception *a1)
{
  if (v1[1423] < 0) {
    operator delete(*v2);
  }
  SipUserAgentConfig::~SipUserAgentConfig((SipUserAgentConfig *)v1);
  _Unwind_Resume(a1);
}

void SipTransportLayerConfig::~SipTransportLayerConfig(SipTransportLayerConfig *this)
{
  *((void *)this + 67) = &unk_1F20D68F0;
  std::__tree<unsigned int>::destroy((uint64_t)this + 544, *((void **)this + 69));
  uint64_t v2 = (void **)((char *)this + 504);
  std::vector<SipSecurityAgreementConfig>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 487) < 0) {
    operator delete(*((void **)this + 58));
  }
  SipUri::~SipUri((SipTransportLayerConfig *)((char *)this + 24));
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void SipUserAgentConfig::SipUserAgentConfig(SipUserAgentConfig *this)
{
  *(_OWORD *)((char *)this + 25) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((unsigned char *)this + 41) = 1;
  SipUri::SipUri((SipUserAgentConfig *)((char *)this + 48));
  *((unsigned char *)this + 456) = 1;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  SipTimers::SipTimers((SipUserAgentConfig *)((char *)this + 512));
  *((_DWORD *)this + 136) = 16842752;
  *((unsigned char *)this + 548) = 0;
  *((void *)this + 69) = &unk_1F20B37B0;
  *((void *)this + 72) = 0;
  *((void *)this + 71) = 0;
  *((void *)this + 70) = (char *)this + 568;
  *((_WORD *)this + 292) = 256;
  *((_OWORD *)this + 37) = xmmword_1C56C93F0;
  *((void *)this + 76) = 0x100000101000101;
  *((_DWORD *)this + 154) = 0;
  *(_DWORD *)((char *)this + 619) = 0;
  *((_DWORD *)this + 156) = 5000;
  *((unsigned char *)this + 628) = 0;
  *((_DWORD *)this + 158) = 5000;
  *((void *)this + 82) = 0x200000000000000;
  *((_OWORD *)this + 40) = SipPrivacyHeader::kPrivacyId;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 83, "sip-client-11111");
  *((_WORD *)this + 344) = 257;
  *((void *)this + 87) = &unk_1F20E3DD0;
  *((void *)this + 90) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 88) = (char *)this + 712;
  *((void *)this + 91) = &unk_1F20E3DD0;
  *((void *)this + 94) = 0;
  *((void *)this + 93) = 0;
  *((void *)this + 92) = (char *)this + 744;
  *((void *)this + 95) = &unk_1F20E3DD0;
  *((void *)this + 98) = 0;
  *((void *)this + 97) = 0;
  *((void *)this + 96) = (char *)this + 776;
  *((_WORD *)this + 396) = 0;
  *(_OWORD *)((char *)this + 796) = xmmword_1C56C9400;
  *((_DWORD *)this + 203) = 16842752;
  *((unsigned char *)this + 816) = 0;
  *((_DWORD *)this + 205) = 0;
  *((void *)this + 103) = &unk_1F20E3DD0;
  *((void *)this + 106) = 0;
  *((void *)this + 105) = 0;
  *((void *)this + 104) = (char *)this + 840;
  *((_DWORD *)this + 214) = 65793;
  *((_DWORD *)this + 215) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 108, "NONE");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 111, "NONE");
  *((void *)this + 114) = 0x1000001000000;
  *((_WORD *)this + 460) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 116, "");
  *((_WORD *)this + 476) = 0;
  *((void *)this + 120) = 0;
  *((void *)this + 122) = 0;
  *((void *)this + 121) = 0;
  *((_DWORD *)this + 246) = 1;
  *((void *)this + 124) = &unk_1F20E3DD0;
  *((void *)this + 127) = 0;
  *((void *)this + 126) = 0;
  *((void *)this + 125) = (char *)this + 1008;
  *((void *)this + 128) = &unk_1F20E3DD0;
  *((void *)this + 131) = 0;
  *((void *)this + 130) = 0;
  *((void *)this + 129) = (char *)this + 1040;
  *((void *)this + 132) = &unk_1F20E3DD0;
  *((void *)this + 135) = 0;
  *((void *)this + 134) = 0;
  *((void *)this + 133) = (char *)this + 1072;
  *((void *)this + 136) = &unk_1F20E3DD0;
  *((void *)this + 139) = 0;
  *((void *)this + 138) = 0;
  *((void *)this + 137) = (char *)this + 1104;
  *((_WORD *)this + 560) = 1;
  *((unsigned char *)this + 1122) = 1;
  *((_DWORD *)this + 281) = 15000;
  *((void *)this + 143) = 0;
  *((void *)this + 142) = 0;
  *((void *)this + 141) = (char *)this + 1136;
  *((void *)this + 146) = 0;
  *((void *)this + 147) = 0;
  *((_DWORD *)this + 288) = 0;
  *((unsigned char *)this + 1156) = 0;
  *((void *)this + 145) = (char *)this + 1168;
  *((void *)this + 148) = &unk_1F20E3DD0;
  *((void *)this + 150) = 0;
  *((void *)this + 151) = 0;
  *((void *)this + 149) = (char *)this + 1200;
  *((unsigned char *)this + 1216) = 0;
  *((void *)this + 154) = 0;
  *((void *)this + 153) = (char *)this + 1232;
  *((void *)this + 155) = 0;
  SpamCategoryMap::SpamCategoryMap((SipUserAgentConfig *)((char *)this + 1248));
  *((unsigned char *)this + 1280) = 0;
  *((unsigned char *)this + 1292) = 0;
  *((unsigned char *)this + 1304) = 0;
  *((void *)this + 164) = &unk_1F20E3DD0;
  *((void *)this + 167) = 0;
  *((void *)this + 166) = 0;
  *((void *)this + 165) = (char *)this + 1328;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_OWORD *)this + 86) = 0u;
}

void sub_1C524392C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::__tree<unsigned int>::destroy(v25, *(void **)(v23 + 1232));
  *(void *)(v23 + 1184) = v24;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v29, *(void **)(v23 + 1200));
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(v27, *(void **)(v23 + 1168));
  std::__tree<std::string>::destroy(v32, *(char **)(v23 + 1136));
  *(void *)(v23 + 1088) = v31;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a11, *(void **)(v23 + 1104));
  *(void *)(v23 + 1056) = v30;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a12, *(void **)(v23 + 1072));
  *(void *)(v23 + 1024) = v28;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a13, *(void **)(v23 + 1040));
  *(void *)(v23 + 992) = v26;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a14, *(void **)(v23 + 1008));
  if (*(char *)(v23 + 983) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v23 + 951) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(v23 + 911) < 0) {
    operator delete(*a16);
  }
  if (*(char *)(v23 + 887) < 0) {
    operator delete(*a17);
  }
  *(void *)(v23 + 824) = *(void *)(v33 - 96);
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v23 + 832, *(void **)(v23 + 840));
  *(void *)(v23 + 760) = a19;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v23 + 768, *(void **)(v23 + 776));
  *(void *)(v23 + 728) = a20;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v23 + 736, *(void **)(v23 + 744));
  *(void *)(v23 + 696) = a21;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v23 + 704, *(void **)(v23 + 712));
  if (*(char *)(v23 + 687) < 0) {
    operator delete(*a18);
  }
  if (*(char *)(v23 + 663) < 0) {
    operator delete(*(void **)(v23 + 640));
  }
  *(void *)(v23 + 552) = a22;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v23 + 560, *(void **)(v23 + 568));
  *(void *)(v23 + 512) = &unk_1F20CA1D0;
  std::__tree<std::string>::destroy(v23 + 520, *(char **)(v23 + 528));
  if (*(char *)(v23 + 511) < 0) {
    operator delete(*(void **)(v23 + 488));
  }
  if (*(char *)(v23 + 487) < 0) {
    operator delete(*(void **)(v23 + 464));
  }
  SipUri::~SipUri(*(SipUri **)(v33 - 104));
  _Unwind_Resume(a1);
}

void sub_1C5243B10()
{
}

void std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<SipHeaderTemplateMap::HeaderTemplate>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::vector<SipHeaderTemplateMap::HeaderTemplate>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<SipHeaderTemplateMap::HeaderTemplate>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<SipHeaderTemplateMap::HeaderTemplate>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::vector<SipSecurityAgreementConfig>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    char v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 72;
      int8x8_t v7 = v4 - 72;
      uint64_t v8 = v4 - 72;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 72;
        (*v9)(v7);
        v6 -= 72;
        BOOL v10 = v7 == v2;
        int8x8_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase(BambiCallTerminationReasonsBase *this)
{
  *(void *)this = &unk_1F20DBC68;
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)this + 144, *((void **)this + 19));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void SipUserAgentConfig::~SipUserAgentConfig(SipUserAgentConfig *this)
{
  uint64_t v2 = (void **)((char *)this + 1368);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 1367) < 0) {
    operator delete(*((void **)this + 168));
  }
  *((void *)this + 164) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 1320, *((void **)this + 166));
  std::__tree<std::string>::destroy((uint64_t)this + 1248, *((char **)this + 157));
  std::__tree<unsigned int>::destroy((uint64_t)this + 1224, *((void **)this + 154));
  *((void *)this + 148) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 1192, *((void **)this + 150));
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy((uint64_t)this + 1160, *((void **)this + 146));
  std::__tree<std::string>::destroy((uint64_t)this + 1128, *((char **)this + 142));
  *((void *)this + 136) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 1096, *((void **)this + 138));
  *((void *)this + 132) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 1064, *((void **)this + 134));
  *((void *)this + 128) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 1032, *((void **)this + 130));
  *((void *)this + 124) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 1000, *((void **)this + 126));
  if (*((char *)this + 983) < 0) {
    operator delete(*((void **)this + 120));
  }
  if (*((char *)this + 951) < 0) {
    operator delete(*((void **)this + 116));
  }
  if (*((char *)this + 911) < 0) {
    operator delete(*((void **)this + 111));
  }
  if (*((char *)this + 887) < 0) {
    operator delete(*((void **)this + 108));
  }
  *((void *)this + 103) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 832, *((void **)this + 105));
  *((void *)this + 95) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 768, *((void **)this + 97));
  *((void *)this + 91) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 736, *((void **)this + 93));
  *((void *)this + 87) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 704, *((void **)this + 89));
  if (*((char *)this + 687) < 0) {
    operator delete(*((void **)this + 83));
  }
  if (*((char *)this + 663) < 0) {
    operator delete(*((void **)this + 80));
  }
  *((void *)this + 69) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 560, *((void **)this + 71));
  *((void *)this + 64) = &unk_1F20CA1D0;
  std::__tree<std::string>::destroy((uint64_t)this + 520, *((char **)this + 66));
  if (*((char *)this + 511) < 0) {
    operator delete(*((void **)this + 61));
  }
  if (*((char *)this + 487) < 0) {
    operator delete(*((void **)this + 58));
  }
  SipUri::~SipUri((SipUserAgentConfig *)((char *)this + 48));
}

void SipStackConfig::~SipStackConfig(void **this)
{
  if (*((char *)this + 2511) < 0) {
    operator delete(this[311]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 305), this[306]);
  if (*((char *)this + 2423) < 0) {
    operator delete(this[300]);
  }
  this[276] = &unk_1F20DBC28;
  std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy((uint64_t)(this + 297), this[298]);
  BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase((BambiCallTerminationReasonsBase *)(this + 276));
  BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase((BambiCallTerminationReasonsBase *)(this + 255));
  this[242] = &unk_1F20D68F0;
  std::__tree<unsigned int>::destroy((uint64_t)(this + 243), this[244]);
  uint64_t v2 = this + 238;
  std::vector<SipSecurityAgreementConfig>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 1887) < 0) {
    operator delete(this[233]);
  }
  SipUri::~SipUri((SipUri *)(this + 178));
  if (*((char *)this + 1423) < 0) {
    operator delete(this[175]);
  }
  SipUserAgentConfig::~SipUserAgentConfig((SipUserAgentConfig *)this);
}

void std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy(a1, a2[1]);
    std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(a2 + 5);
    operator delete(a2);
  }
}

uint64_t SipUserAgentConfig::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_OWORD *)(a1 + 26) = *(long long *)((char *)a2 + 26);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  SipUri::operator=((SipUri *)(a1 + 48), (uint64_t)(a2 + 3));
  *(unsigned char *)(a1 + 456) = *((unsigned char *)a2 + 456);
  std::string::operator=((std::string *)(a1 + 464), (const std::string *)(a2 + 29));
  std::string::operator=((std::string *)(a1 + 488), (const std::string *)((char *)a2 + 488));
  if ((long long *)a1 == a2)
  {
    int v7 = *((_DWORD *)a2 + 136);
    *(unsigned char *)(a1 + 548) = *((unsigned char *)a2 + 548);
    *(_DWORD *)(a1 + 544) = v7;
  }
  else
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,unsigned int>,std::__tree_node<std::__value_type<std::string,unsigned int>,void *> *,long>>((uint64_t *)(a1 + 520), *((void **)a2 + 65), (void *)a2 + 66);
    int v6 = *((_DWORD *)a2 + 136);
    *(unsigned char *)(a1 + 548) = *((unsigned char *)a2 + 548);
    *(_DWORD *)(a1 + 544) = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 560), *((long long **)a2 + 70), (long long *)((char *)a2 + 568));
  }
  *(unsigned char *)(a1 + 584) = *((unsigned char *)a2 + 584);
  long long v8 = a2[37];
  long long v9 = a2[38];
  *(_OWORD *)(a1 + 620) = *(long long *)((char *)a2 + 620);
  *(_OWORD *)(a1 + 592) = v8;
  *(_OWORD *)(a1 + 608) = v9;
  std::string::operator=((std::string *)(a1 + 640), (const std::string *)(a2 + 40));
  std::string::operator=((std::string *)(a1 + 664), (const std::string *)((char *)a2 + 664));
  *(_WORD *)(a1 + 688) = *((_WORD *)a2 + 344);
  if ((long long *)a1 != a2)
  {
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 704), *((long long **)a2 + 88), (long long *)((char *)a2 + 712));
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 736), *((long long **)a2 + 92), (long long *)((char *)a2 + 744));
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 768), *((long long **)a2 + 96), (long long *)((char *)a2 + 776));
    long long v10 = *(long long *)((char *)a2 + 808);
    *(_OWORD *)(a1 + 792) = *(long long *)((char *)a2 + 792);
    *(_OWORD *)(a1 + 808) = v10;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 832), *((long long **)a2 + 104), (long long *)((char *)a2 + 840));
  }
  *(void *)(a1 + 856) = *((void *)a2 + 107);
  std::string::operator=((std::string *)(a1 + 864), (const std::string *)a2 + 36);
  std::string::operator=((std::string *)(a1 + 888), (const std::string *)a2 + 37);
  __int16 v11 = *((_WORD *)a2 + 460);
  *(void *)(a1 + 912) = *((void *)a2 + 114);
  *(_WORD *)(a1 + 920) = v11;
  std::string::operator=((std::string *)(a1 + 928), (const std::string *)(a2 + 58));
  *(_WORD *)(a1 + 952) = *((_WORD *)a2 + 476);
  std::string::operator=((std::string *)(a1 + 960), (const std::string *)a2 + 40);
  *(_DWORD *)(a1 + 984) = *((_DWORD *)a2 + 246);
  if ((long long *)a1 == a2)
  {
    long long v15 = *(long long *)((char *)a2 + 1272);
    long long v16 = *(long long *)((char *)a2 + 1288);
    *(unsigned char *)(a1 + 1304) = *((unsigned char *)a2 + 1304);
    *(_OWORD *)(a1 + 1272) = v15;
    *(_OWORD *)(a1 + 1288) = v16;
    std::string::operator=((std::string *)(a1 + 1344), (const std::string *)(a1 + 1344));
  }
  else
  {
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1000), *((long long **)a2 + 125), a2 + 63);
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1032), *((long long **)a2 + 129), a2 + 65);
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1064), *((long long **)a2 + 133), a2 + 67);
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1096), *((long long **)a2 + 137), a2 + 69);
    *(void *)(a1 + 1120) = *((void *)a2 + 140);
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)(a1 + 1128), *((void **)a2 + 141), (void *)a2 + 142);
    int v12 = *((_DWORD *)a2 + 288);
    *(unsigned char *)(a1 + 1156) = *((unsigned char *)a2 + 1156);
    *(_DWORD *)(a1 + 1152) = v12;
    std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *> *,long>>((uint64_t **)(a1 + 1160), *((long long **)a2 + 145), a2 + 73);
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1192), *((long long **)a2 + 149), a2 + 75);
    *(unsigned char *)(a1 + 1216) = *((unsigned char *)a2 + 1216);
    std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t **)(a1 + 1224), *((unsigned int **)a2 + 153), (unsigned int *)a2 + 308);
    std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,ims::SpamCategory>,std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *> *,long>>((uint64_t *)(a1 + 1248), *((void **)a2 + 156), (void *)a2 + 157);
    long long v13 = *(long long *)((char *)a2 + 1272);
    long long v14 = *(long long *)((char *)a2 + 1288);
    *(unsigned char *)(a1 + 1304) = *((unsigned char *)a2 + 1304);
    *(_OWORD *)(a1 + 1272) = v13;
    *(_OWORD *)(a1 + 1288) = v14;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1320), *((long long **)a2 + 165), a2 + 83);
    std::string::operator=((std::string *)(a1 + 1344), (const std::string *)a2 + 56);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 1368), *((std::string **)a2 + 171), *((long long **)a2 + 172), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 172) - *((void *)a2 + 171)) >> 3));
  }
  *(_DWORD *)(a1 + 1392) = *((_DWORD *)a2 + 348);
  return a1;
}

uint64_t SipTransportLayerConfig::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  SipUri::operator=((SipUri *)(a1 + 24), a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v4;
  std::string::operator=((std::string *)(a1 + 464), (const std::string *)(a2 + 464));
  int v5 = *(_DWORD *)(a2 + 496);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(_DWORD *)(a1 + 496) = v5;
  if (a1 == a2)
  {
    long long v7 = *(_OWORD *)(a2 + 568);
    *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 568) = v7;
  }
  else
  {
    std::vector<SipSecurityAgreementConfig>::__assign_with_size[abi:ne180100]<SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>(a1 + 504, *(void *)(a2 + 504), *(void *)(a2 + 512), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 3));
    *(void *)(a1 + 528) = *(void *)(a2 + 528);
    std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t **)(a1 + 544), *(unsigned int **)(a2 + 544), (unsigned int *)(a2 + 552));
    long long v6 = *(_OWORD *)(a2 + 568);
    *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 568) = v6;
    *(_DWORD *)(a1 + 588) = *(_DWORD *)(a2 + 588);
    *(void *)(a1 + 592) = *(void *)(a2 + 592);
    *(void *)(a1 + 600) = *(void *)(a2 + 600);
    *(void *)(a1 + 608) = *(void *)(a2 + 608);
    *(void *)(a1 + 616) = *(void *)(a2 + 616);
  }
  return a1;
}

uint64_t **std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  int v5 = result;
  if (result[2])
  {
    long long v6 = *result;
    long long v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    std::string::size_type v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      long long v8 = (uint64_t *)v6[1];
    }
    else {
      long long v8 = v6;
    }
    long long v15 = result;
    long long v16 = v8;
    uint64_t v17 = v8;
    if (v8)
    {
      long long v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        long long v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          uint64_t v18 = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<unsigned int>::__insert_node_at(v5, v18, leaf_high, v17);
          uint64_t v17 = v16;
          if (v16) {
            long long v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          __int16 v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              __int16 v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              long long v9 = a2;
            }
            while (!v12);
          }
          long long v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          long long v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::string>::__emplace_multi<std::string const&>(v5, (uint64_t)(a2 + 4));
      long long v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          long long v14 = v13;
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1C52447C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::string>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::string>::__emplace_multi<std::string const&>(uint64_t **a1, uint64_t a2)
{
  memset(v6, 0, sizeof(v6));
  std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a2, v6);
  uint64_t v5 = 0;
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v5, v6[0] + 4);
  std::__tree<unsigned int>::__insert_node_at(a1, v5, leaf_high, v6[0]);
  return v6[0];
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  long long v6 = a3 + 1;
  long long v7 = (char *)operator new(0x38uLL);
  *a3 = v7;
  *long long v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  long long v8 = (std::string *)(v7 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v8->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C5244928(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v2, v3);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    long long v6 = *result;
    long long v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    std::string::size_type v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      long long v8 = (uint64_t *)v6[1];
    }
    else {
      long long v8 = v6;
    }
    long long v15 = result;
    long long v16 = v8;
    uint64_t v17 = v8;
    if (v8)
    {
      long long v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        long long v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::vector<SipHeaderTemplateMap::HeaderTemplate> &>::operator=[abi:ne180100]<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          v18[0] = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<unsigned int>::__insert_node_at(v5, v18[0], leaf_high, v17);
          uint64_t v17 = v16;
          if (v16) {
            long long v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          __int16 v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              __int16 v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              long long v9 = a2;
            }
            while (!v12);
          }
          long long v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          long long v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__emplace_multi<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>> const&>(v5, a2 + 2);
      long long v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          long long v14 = v13;
          long long v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1C5244AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::vector<SipHeaderTemplateMap::HeaderTemplate> &>::operator=[abi:ne180100]<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  long long v4 = *(uint64_t **)(a1 + 8);
  if (v4 != (uint64_t *)(a2 + 24)) {
    std::vector<SipHeaderTemplateMap::HeaderTemplate>::__assign_with_size[abi:ne180100]<SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>(v4, *(long long **)(a2 + 24), *(long long **)(a2 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  }
  return a1;
}

void std::vector<SipHeaderTemplateMap::HeaderTemplate>::__assign_with_size[abi:ne180100]<SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>(uint64_t *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<SipHeaderTemplateMap::HeaderTemplate>::__vdeallocate(a1);
    if (a4 > 0x666666666666666) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<SipHeaderTemplateMap::HeaderTemplate>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v9) >> 3) < a4)
  {
    long long v13 = (uint64_t *)a2 + ((a1[1] - v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,SipHeaderTemplateMap::HeaderTemplate *,SipHeaderTemplateMap::HeaderTemplate *,SipHeaderTemplateMap::HeaderTemplate *,0>((uint64_t *)a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>(v8, (long long *)v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,SipHeaderTemplateMap::HeaderTemplate *,SipHeaderTemplateMap::HeaderTemplate *,SipHeaderTemplateMap::HeaderTemplate *,0>((uint64_t *)a2, (uint64_t *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0) {
        operator delete(*(void **)(v16 - 24));
      }
      v16 -= 40;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_1C5244C9C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C5244CA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<SipHeaderTemplateMap::HeaderTemplate>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<SipHeaderTemplateMap::HeaderTemplate>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<SipHeaderTemplateMap::HeaderTemplate>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipHeaderTemplateMap::HeaderTemplate>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v14 = a4;
  uint64_t v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  uint64_t v13 = 0;
  if (a2 != a3)
  {
    long long v6 = a2 + 1;
    do
    {
      uint64_t v8 = v6 - 1;
      uint64_t v7 = *((void *)v6 - 2);
      *(_DWORD *)(v4 + 8) = *((_DWORD *)v6 - 2);
      *(void *)uint64_t v4 = v7;
      uint64_t v9 = (std::string *)(v4 + 16);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v15;
      }
      else
      {
        long long v10 = *v6;
        *(void *)(v4 + 32) = *((void *)v6 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      }
      v4 += 40;
      uint64_t v15 = v4;
      long long v6 = (long long *)((char *)v6 + 40);
    }
    while ((long long *)((char *)v8 + 40) != a3);
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1C5244DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 40;
  }
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,SipHeaderTemplateMap::HeaderTemplate *,SipHeaderTemplateMap::HeaderTemplate *,SipHeaderTemplateMap::HeaderTemplate *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    uint64_t v6 = *v4;
    *(_DWORD *)(a3 + 8) = *((_DWORD *)v4 + 2);
    *(void *)a3 = v6;
    std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v4 + 2));
    a3 += 40;
    v4 += 5;
  }
  while (v4 != v5);
  return v5;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipHeaderTemplateMap::HeaderTemplate>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__emplace_multi<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>> const&>(uint64_t **a1, long long *a2)
{
  memset(v7, 0, sizeof(v7));
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__construct_node<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>> const&>((uint64_t)a1, a2, v7);
  uint64_t v6 = 0;
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v6, v7[0] + 4);
  std::__tree<unsigned int>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1C524501C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__construct_node<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1C5245090(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<SipHeaderTemplateMap::HeaderTemplate>::__init_with_size[abi:ne180100]<SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>(this[1].__r_.__value_.__r.__words, *((long long **)a2 + 3), *((long long **)a2 + 4), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_1C5245120(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<SipHeaderTemplateMap::HeaderTemplate>::__init_with_size[abi:ne180100]<SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<SipHeaderTemplateMap::HeaderTemplate>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C52451A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<SipHeaderTemplateMap::HeaderTemplate>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::vector<SipSecurityAgreementConfig>::__assign_with_size[abi:ne180100]<SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<SipSecurityAgreementConfig>::__vdeallocate((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<SipSecurityAgreementConfig>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipSecurityAgreementConfig>,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipSecurityAgreementConfig *,SipSecurityAgreementConfig *,SipSecurityAgreementConfig *>((uint64_t)&v22, a2, v13, (uint64_t)v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipSecurityAgreementConfig>,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipSecurityAgreementConfig *,SipSecurityAgreementConfig *,SipSecurityAgreementConfig *>((uint64_t)&v23, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(uint64_t (****)(void))(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = v16 - 9;
    uint64_t v18 = v16 - 9;
    uint64_t v19 = v16 - 9;
    do
    {
      uint64_t v20 = *v19;
      v19 -= 9;
      uint64_t result = (*v20)(v18);
      v17 -= 9;
      BOOL v21 = v18 == v15;
      uint64_t v18 = v19;
    }
    while (!v21);
  }
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_1C52453DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C52453E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<SipSecurityAgreementConfig>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 72;
      uint64_t v6 = v3 - 72;
      uint64_t v7 = v3 - 72;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 72;
        (*v8)(v6);
        v5 -= 72;
        BOOL v9 = v6 == v1;
        uint64_t v6 = v7;
      }
      while (!v9);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<SipSecurityAgreementConfig>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipSecurityAgreementConfig>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipSecurityAgreementConfig>,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<SipSecurityAgreementConfig,SipSecurityAgreementConfig&,SipSecurityAgreementConfig*>(a4 + v7, a2 + v7);
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C5245544(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 72;
    do
    {
      (**(void (***)(void))(v4 + v2))();
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<SipSecurityAgreementConfig,SipSecurityAgreementConfig&,SipSecurityAgreementConfig*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F20D69D8;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 32) = &unk_1F20B37B0;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)(a1 + 40), *(void ***)(a2 + 40), (void **)(a2 + 48));
  *(unsigned char *)(a1 + 65) = 1;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

void sub_1C5245650(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipSecurityAgreementConfig *,SipSecurityAgreementConfig *,SipSecurityAgreementConfig *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = a4 + v7;
    uint64_t v9 = a2 + v7;
    std::string::operator=((std::string *)(a4 + v7 + 8), (const std::string *)(a2 + v7 + 8));
    if (a2 != a4) {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(v8 + 40), *(long long **)(v9 + 40), (long long *)(a2 + 48 + v7));
    }
    *(unsigned char *)(v8 + 64) = *(unsigned char *)(v9 + 64);
    v7 += 72;
  }
  while (a2 + v7 != v6);
  return v6;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipSecurityAgreementConfig>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a2);
}

void BambiCallSessionTerminatedEvent::~BambiCallSessionTerminatedEvent(BambiCallSessionTerminatedEvent *this)
{
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent(this);
  JUMPOUT(0x1C878E320);
}

void BambiCallEvent::loggableName(BambiCallEvent *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)this + 40))(&__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5245804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallSessionTerminatedEvent::clone(BambiCallSessionTerminatedEvent *this)
{
}

void sub_1C5245884(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4000B006BBLL);
  _Unwind_Resume(a1);
}

void BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent(BambiCallSessionTerminationBaseEvent *this, const BambiCallSessionTerminationBaseEvent *a2)
{
  BambiCallEvent::BambiCallEvent(this, a2);
  *(void *)uint64_t v4 = &unk_1F20C3500;
  long long v5 = *(_OWORD *)((char *)a2 + 40);
  *(unsigned char *)(v4 + 56) = *((unsigned char *)a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 64), *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 4);
    *(void *)(v4 + 80) = *((void *)a2 + 10);
    *(_OWORD *)(v4 + 64) = v6;
  }
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 88);
    *((void *)this + 13) = *((void *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v7;
  }
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 5, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 120);
    *((void *)this + 17) = *((void *)a2 + 17);
    *(_OWORD *)((char *)this + 120) = v8;
  }
  int v9 = *((_DWORD *)a2 + 36);
  *((unsigned char *)this + 148) = *((unsigned char *)a2 + 148);
  *((_DWORD *)this + 36) = v9;
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), *((const std::string::value_type **)a2 + 19), *((void *)a2 + 20));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 152);
    *((void *)this + 21) = *((void *)a2 + 21);
    *(_OWORD *)((char *)this + 152) = v10;
  }
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  SipUri::SipUri((BambiCallSessionTerminationBaseEvent *)((char *)this + 184), (const BambiCallSessionTerminationBaseEvent *)((char *)a2 + 184));
}

void sub_1C52459FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  *(void *)uint64_t v1 = &unk_1F20B8640;
  long long v6 = *(std::__shared_weak_count **)(v1 + 24);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallEvent::~BambiCallEvent(BambiCallEvent *this)
{
  *(void *)this = &unk_1F20B8640;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20B8640;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

void BambiCallEvent::clone(BambiCallEvent *this)
{
}

void BambiCallEvent::fullName(BambiCallEvent *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = eventNames + 24 * *((unsigned int *)this + 2);
  if (*(char *)(v2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *(void *)(v2 + 8));
  }
  else
  {
    long long v3 = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t std::deque<SipUri>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    long long v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    long long v6 = &v2[v5 >> 4];
    long long v7 = (char *)*v6 + 408 * (v5 & 0xF);
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 408 * ((*((_DWORD *)a1 + 10) + (int)v5) & 0xF);
    if (v7 != (char *)v8)
    {
      do
      {
        (**(void (***)(char *))v7)(v7);
        v7 += 408;
        if (v7 - (unsigned char *)*v6 == 6528)
        {
          int v9 = (char *)v6[1];
          ++v6;
          long long v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v2 = (void **)a1[1];
      long long v3 = (void **)a1[2];
    }
  }
  void *v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 8;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 16;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<SipUri *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<SipUri *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void std::deque<SipUri>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x10;
  unint64_t v4 = v2 - 16;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    long long v6 = (char *)a1[3];
    a1[4] = v4;
    long long v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      int v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1980uLL);
      std::__split_buffer<SipUri *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1980uLL);
    std::__split_buffer<SipUri *>::push_front((uint64_t)a1, &v54);
    char v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1980uLL);
  std::__split_buffer<SipUri *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<SipUri *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1C524604C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<SipUri *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  long long v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    long long v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      long long v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        long long v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        long long v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        long long v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      long long v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)long long v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    long long v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      long long v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<SipUri *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    long long v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    long long v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void *std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B8348;
  unint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B8348;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20B8348;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20B8348;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      long long v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C524674C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::target_type()
{
}

void std::__shared_ptr_emplace<ImsLocationSelector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B83C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsLocationSelector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B83C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<ImsLocationSelector>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B8418;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B8418;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20B8418;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20B8418;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      long long v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5246A90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B8498;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B8498;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20B8498;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20B8498;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      long long v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5246D38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B8518;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B8518;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20B8518;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20B8518;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      long long v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5246FE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_BambiEmergencyCallHandler_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&kEmergencyCallSetupTimer, "EmergencyCallSetupTimer");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  __cxa_atexit(MEMORY[0x1E4FBA210], &kEmergencyCallSetupTimer, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&kEmergencySessionSetupTimer, "EmergencySessionSetupTimer");
  return __cxa_atexit(v0, &kEmergencySessionSetupTimer, &dword_1C51D1000);
}

uint64_t SipStackConfig::initializeFromPrefs(SipStackConfig *this, const ImsPrefs *a2, char a3, int a4, char a5)
{
  SipTransportLayerConfig::initializeFromPrefs((SipStackConfig *)((char *)this + 1400), a2);
  SipUserAgentConfig::initializeFromPrefs(this, a2);
  if (a4)
  {
    ForceTcpKey = (void **)ImsPrefs::getForceTcpKey(v10);
    unint64_t v12 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, ForceTcpKey);
    if (!v12) {
      *((unsigned char *)this + 1839) = 1;
    }
    ForceTlsKey = (void **)ImsPrefs::getForceTlsKey(v12);
    uint64_t v10 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, ForceTlsKey);
    if (!v10) {
      *((unsigned char *)this + 1841) = 1;
    }
  }
  *((unsigned char *)this + 2472) = a3;
  *((unsigned char *)this + 2473) = a4;
  PCSCFDomainNameKey = (void **)ImsPrefs::getPCSCFDomainNameKey(v10);
  ImsPrefs::stringValue(a2, PCSCFDomainNameKey);
  *((unsigned char *)this + 2481) = a5;
  uint64_t v15 = std::string::operator=((std::string *)((char *)this + 2488), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  int64_t v16 = ImsPrefs::getCallEndReasonsKey((ImsPrefs *)v15);
  uint64_t v17 = (ImsPrefs *)ImsPrefs::typedPrefWithKey<ImsDictPref>(a2, (void **)v16);
  if (v17) {
    uint64_t v18 = (uint64_t)v17;
  }
  else {
    uint64_t v18 = *((void *)v16 + 11);
  }
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    BambiCallTerminationReasonsBase::setReasonsFromPref((void (***)(uint64_t *__return_ptr))this + 255, v18, (uint64_t)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v19 = ImsPrefs::getIncomingCallEndReasonsKey(v17);
  uint64_t v20 = (ImsPrefs *)ImsPrefs::typedPrefWithKey<ImsDictPref>(a2, (void **)v19);
  if (v20) {
    uint64_t v21 = (uint64_t)v20;
  }
  else {
    uint64_t v21 = *((void *)v19 + 11);
  }
  if (v21)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "Override_");
    BambiCallTerminationReasonsBase::setReasonsFromPref((void (***)(uint64_t *__return_ptr))this + 276, v21, (uint64_t)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  IncomingPhoneNumberPrefixMapKey = ImsPrefs::getIncomingPhoneNumberPrefixMapKey(v20);
  BOOL v23 = ImsPrefs::stringMapValue(a2, (uint64_t)IncomingPhoneNumberPrefixMapKey, (uint64_t **)this + 305);
  AddConferenceParticipantsToInviteKey = (void **)ImsPrefs::getAddConferenceParticipantsToInviteKey((ImsPrefs *)v23);
  unint64_t v25 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AddConferenceParticipantsToInviteKey);
  *((unsigned char *)this + 2464) = (_BYTE)v25;
  DeferMediaActivationOnSessionConfirmedKey = (void **)ImsPrefs::getDeferMediaActivationOnSessionConfirmedKey(v25);
  uint64_t v27 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, DeferMediaActivationOnSessionConfirmedKey);
  *((unsigned char *)this + 2465) = (_BYTE)v27;
  MediaInterfaceKey = (void **)ImsPrefs::getMediaInterfaceKey(v27);
  uint64_t v29 = (ImsPrefs *)ImsPrefs::stringValue(a2, MediaInterfaceKey);
  long long v30 = (void **)((char *)this + 2400);
  if (*((char *)this + 2423) < 0) {
    operator delete(*v30);
  }
  *(_OWORD *)long long v30 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *((void *)this + 302) = *((void *)&__str.__r_.__value_.__l + 2);
  MediaInitTimeoutKey = (void **)ImsPrefs::getMediaInitTimeoutKey(v29);
  long long v32 = (ImsPrefs *)ImsPrefs::intValue(a2, MediaInitTimeoutKey);
  *((_DWORD *)this + 506) = v32;
  unint64_t v33 = (void **)ImsPrefs::getPerCallQoSIndicationsKey(v32);
  char v34 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, v33);
  *((unsigned char *)this + 2428) = (_BYTE)v34;
  uint64_t v35 = (void **)ImsPrefs::getNetworkBasedCallWaitingKey(v34);
  uint64_t v36 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, v35);
  *((unsigned char *)this + 2429) = (_BYTE)v36;
  long long v37 = (void **)ImsPrefs::getEnableVideoCallWaitingKey(v36);
  long long v38 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, v37);
  *((unsigned char *)this + 2430) = (_BYTE)v38;
  UsePublicDomainForPhoneContextKey = (void **)ImsPrefs::getUsePublicDomainForPhoneContextKey(v38);
  uint64_t v40 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, UsePublicDomainForPhoneContextKey);
  *((unsigned char *)this + 2432) = (_BYTE)v40;
  AutoRingTimerMillisecondsKey = (void **)ImsPrefs::getAutoRingTimerMillisecondsKey(v40);
  uint64_t result = ImsPrefs::intValue(a2, AutoRingTimerMillisecondsKey);
  *((_DWORD *)this + 617) = result;
  return result;
}

void sub_1C5247348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XcapDocumentCommWaiting::XcapDocumentCommWaiting(XcapDocumentCommWaiting *this)
{
  unsigned __int8 v3 = 0;
  uint64_t v4 = (char *)&v3;
  uint64_t v2 = (long long *)(std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v3, (uint64_t)&std::piecewise_construct, &v4)+ 5);
  *(void *)this = &unk_1F20C81E8;
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)this + 8, (long long *)"communication-waiting", v2);
  *((void *)this + 8) = "communication-waiting";
  *((void *)this + 9) = v2;
  *((unsigned char *)this + 80) = 1;
  *(void *)this = &unk_1F20B8680;
  *((void *)this + 1) = &unk_1F20B8718;
}

uint64_t XcapDocumentCommWaiting::createChild(uint64_t a1, uint64_t a2)
{
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  uint64_t v3 = 0;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  if (size != 21)
  {
LABEL_11:
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v3;
    }
    goto LABEL_12;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    uint64_t v8 = (void *)__s1.__r_.__value_.__r.__words[0];
    if (!memcmp(__s1.__r_.__value_.__l.__data_, "communication-waiting", __s1.__r_.__value_.__l.__size_)) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = 0;
    }
    goto LABEL_16;
  }
  if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
    p_s1 = &__s1;
    uint64_t v6 = "communication-waiting";
    uint64_t v7 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v6)
    {
      p_s1 = (std::string *)((char *)p_s1 + 1);
      ++v6;
      if (!--v7)
      {
        uint64_t v3 = a1;
        goto LABEL_11;
      }
    }
    uint64_t v3 = 0;
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v3;
    }
LABEL_12:
    uint64_t v8 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_16:
    operator delete(v8);
    return v3;
  }
  return a1;
}

void XcapDocumentCommWaiting::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  uint64_t v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  char v7 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  if (size == 21)
  {
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v11 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, "communication-waiting", __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_15;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      uint64_t v10 = "communication-waiting";
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v10;
        if (!--v6) {
          goto LABEL_12;
        }
      }
      goto LABEL_13;
    }
LABEL_12:
    bambi::XmlParserItem::parseChild(a1, a2, a3);
    char v7 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
LABEL_13:
  if ((v7 & 0x80) == 0) {
    return;
  }
  uint64_t v11 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_15:
  operator delete(v11);
}

void sub_1C5247608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XcapDocumentCommWaiting::asString@<X0>(XcapDocumentCommWaiting *this@<X0>, void *a2@<X8>)
{
  uint64_t v15 = 0;
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  memset(v10, 0, sizeof(v10));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Call Waiting: ", 14);
  if (*((unsigned char *)this + 80)) {
    uint64_t v5 = "Enabled";
  }
  else {
    uint64_t v5 = "Disabled";
  }
  if (*((unsigned char *)this + 80)) {
    uint64_t v6 = 7;
  }
  else {
    uint64_t v6 = 8;
  }
  char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  uint64_t v8 = std::locale::use_facet(&v16, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10 + 8, a2);
  *(void *)&v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(*(void *)&v10[0] - MediaSessionQueuedCollectionIterator::~MediaSessionQueuedCollectionIterator((MediaSessionQueuedCollectionIterator *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v10[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v14);
}

void sub_1C5247830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::locale::~locale((std::locale *)(v9 - 40));
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void XcapDocumentCommWaiting::~XcapDocumentCommWaiting(void **this)
{
}

{
  uint64_t vars8;

  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
  JUMPOUT(0x1C878E320);
}

void XcapDocumentCommWaiting::clone(XcapDocumentCommWaiting *this)
{
}

void sub_1C52479F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  MEMORY[0x1C878E320](v2, 0x10F3C40F3942DEBLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'XcapDocumentCommWaiting::~XcapDocumentCommWaiting(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this);
  JUMPOUT(0x1C878E320);
}

void *std::vector<bambi::XmlTreeNs>::__init_with_size[abi:ne180100]<bambi::XmlTreeNs*,bambi::XmlTreeNs*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<bambi::XmlTreeNs>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<bambi::XmlTreeNs>,bambi::XmlTreeNs*,bambi::XmlTreeNs*,bambi::XmlTreeNs*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C5247AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<bambi::XmlTreeNs>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<bambi::XmlTreeNs>,bambi::XmlTreeNs*,bambi::XmlTreeNs*,bambi::XmlTreeNs*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<bambi::XmlTreeNs,bambi::XmlTreeNs&,bambi::XmlTreeNs*>((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C5247BB8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<bambi::XmlTreeNs,bambi::XmlTreeNs&,bambi::XmlTreeNs*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1C5247C58(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipPComNameIdReputationHeader::parseParameters(SipPComNameIdReputationHeader *this, const SipParameterMap *a2)
{
  return 1;
}

void SipPComNameIdReputationHeader::~SipPComNameIdReputationHeader(SipPComNameIdReputationHeader *this)
{
  *(void *)this = &unk_1F20B7D80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20B7D80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipPComNameIdReputationHeader::clone(SipPComNameIdReputationHeader *this)
{
}

void sub_1C5247DEC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4088B03871);
  _Unwind_Resume(a1);
}

uint64_t SDPMediaCandidate::SDPMediaCandidate(uint64_t a1, __int16 a2, const std::string *a3, __int16 a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "candidate");
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20E5C78;
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v10;
  }
  *(void *)a1 = &unk_1F20B8848;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 40) = a2;
  std::string::operator=((std::string *)(a1 + 48), a3);
  *(_WORD *)(a1 + 72) = a4;
  return a1;
}

void sub_1C5247F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaCandidate::value@<X0>(SDPMediaCandidate *this@<X0>, void *a2@<X8>)
{
  uint64_t v24 = 0;
  long long v22 = 0u;
  memset(v23, 0, sizeof(v23));
  *(_OWORD *)std::string __p = 0u;
  long long v21 = 0u;
  memset(v19, 0, sizeof(v19));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"1", 1);
  char v25 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v25, 1);
  uint64_t v5 = (void *)std::ostream::operator<<();
  char v25 = 32;
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v25, 1);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"UDP", 3);
  char v25 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v25, 1);
  uint64_t v8 = (void *)std::ostream::operator<<();
  char v25 = 32;
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v25, 1);
  int v10 = *((char *)this + 71);
  if (v10 >= 0) {
    uint64_t v11 = (char *)this + 48;
  }
  else {
    uint64_t v11 = (char *)*((void *)this + 6);
  }
  if (v10 >= 0) {
    uint64_t v12 = *((unsigned __int8 *)this + 71);
  }
  else {
    uint64_t v12 = *((void *)this + 7);
  }
  long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  char v25 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v25, 1);
  uint64_t v14 = (void *)std::ostream::operator<<();
  char v25 = 32;
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v25, 1);
  std::locale v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"typ", 3);
  char v25 = 32;
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v25, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"host", 4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19 + 8, a2);
  *(void *)&v19[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v19 + *(void *)(*(void *)&v19[0] - MediaSessionQueuedCollectionIterator::~MediaSessionQueuedCollectionIterator((MediaSessionQueuedCollectionIterator *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v19[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v23);
}

void sub_1C52481C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t BambiXcapClient::initialize(BambiXcapClient *this, const XcapConfig *a2)
{
  *((unsigned char *)this + 8) = 1;
  XcapConfig::operator=((uint64_t)this + 16, (uint64_t)a2);
  return 1;
}

uint64_t XcapConfig::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (a1 != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 8), *(std::string **)(a2 + 8), *(long long **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  }
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a2 + 104));
  char v4 = *(unsigned char *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 132) = v4;
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  char v5 = *(unsigned char *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 164) = v5;
  std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(a2 + 200));
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  std::string::operator=((std::string *)(a1 + 232), (const std::string *)(a2 + 232));
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  char v6 = *(unsigned char *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(unsigned char *)(a1 + 288) = v6;
  if (a1 != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 296), *(std::string **)(a2 + 296), *(long long **)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 3));
  }
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  std::string::operator=((std::string *)(a1 + 328), (const std::string *)(a2 + 328));
  __int16 v7 = *(_WORD *)(a2 + 356);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(_WORD *)(a1 + 356) = v7;
  return a1;
}

uint64_t BambiXcapClient::deinitialize(uint64_t this)
{
  *(unsigned char *)(this + 8) = 0;
  return this;
}

uint64_t BambiXcapClient::initialized(BambiXcapClient *this)
{
  return *((unsigned __int8 *)this + 8);
}

void BambiEmergencyPrefs::reset(BambiEmergencyPrefs *this)
{
  *(_WORD *)this = 0;
  *((unsigned char *)this + 2) = 0;
  *((_DWORD *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 10;
  BambiEmergencyUrnMap::reset((BambiEmergencyPrefs *)((char *)this + 8));
  uint64_t v3 = (void *)*((void *)this + 9);
  uint64_t v2 = (void *)((char *)this + 72);
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v2 - 1), v3);
  *(v2 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v2;
  void *v2 = 0;
  v2[1] = 0;
  std::vector<std::string>::__clear[abi:ne180100](v2 + 2);
  std::vector<std::string>::__clear[abi:ne180100](v2 + 5);
}

uint64_t BambiPrefsManager::instance(BambiPrefsManager *this)
{
  if (!BambiPrefsManager::_instance) {
    operator new();
  }
  return BambiPrefsManager::_instance;
}

void sub_1C524845C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B2C40F76E02BDLL);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,BambiCarrierPrefs>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void BambiPrefsManager::sanitize(void **a1)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  uint64_t v2 = (BambiPrefsManager *)BambiPrefsManager::instance((BambiPrefsManager *)a1);
  uint64_t v3 = (long long *)((char *)v2 + 8);
  char v4 = *(long long **)v2;
  if (*(BambiPrefsManager **)v2 != (BambiPrefsManager *)((char *)v2 + 8))
  {
    do
    {
      memset(v27, 0, sizeof(v27));
      std::pair<std::string const,BambiCarrierPrefs>::pair[abi:ne180100]((std::string *)v27, v4 + 2);
      if (a1 + 1 == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, (void **)v27))
      {
        char v5 = v29;
        if ((unint64_t)v29 >= v30)
        {
          __int16 v7 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v28, (long long *)v27);
        }
        else
        {
          if ((v27[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v27, *(std::string::size_type *)&v27[8]);
          }
          else
          {
            long long v6 = *(_OWORD *)v27;
            v29->__r_.__value_.__r.__words[2] = *(void *)&v27[16];
            *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
          }
          __int16 v7 = v5 + 1;
        }
        uint64_t v29 = v7;
        std::string::basic_string[abi:ne180100]<0>(v25, "prefs");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v8 = ims::debug((uint64_t)v25, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Carrier ", 8);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v8 + 32))(v8, v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" marked for deletion", 20);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        if (v26 < 0) {
          operator delete(v25[0]);
        }
      }
      BambiCarrierPrefs::~BambiCarrierPrefs((BambiCarrierPrefs *)&v27[24]);
      if ((v27[23] & 0x80000000) != 0) {
        operator delete(*(void **)v27);
      }
      uint64_t v9 = (long long *)*((void *)v4 + 1);
      if (v9)
      {
        do
        {
          int v10 = v9;
          uint64_t v9 = *(long long **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (long long *)*((void *)v4 + 2);
          BOOL v11 = *(void *)v10 == (void)v4;
          char v4 = v10;
        }
        while (!v11);
      }
      char v4 = v10;
    }
    while (v10 != v3);
  }
  uint64_t v12 = v28;
  for (uint64_t i = v29; v12 != (void **)i; v12 += 3)
  {
    uint64_t v14 = BambiPrefsManager::instance(v2);
    uint64_t v15 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v14, v12);
    uint64_t v2 = (BambiPrefsManager *)BambiPrefsManager::instance((BambiPrefsManager *)v15);
    if ((void **)((char *)v2 + 8) != v15)
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "prefs");
      std::string::basic_string[abi:ne180100]<0>(v25, "");
      uint64_t v16 = ims::debug((uint64_t)v27, (uint64_t)v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Removing prefs for carrier ", 27);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(void *)v16 + 32))(v16, v12);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if ((v27[23] & 0x80000000) != 0) {
        operator delete(*(void **)v27);
      }
      uint64_t v17 = (BambiPrefsManager *)v15[11];
      if (v17) {
        uint64_t v17 = (BambiPrefsManager *)(*(uint64_t (**)(BambiPrefsManager *))(*(void *)v17 + 8))(v17);
      }
      uint64_t v18 = (void ***)BambiPrefsManager::instance(v17);
      uint64_t v19 = (void **)v15[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          uint64_t v19 = (void **)*v19;
        }
        while (v19);
      }
      else
      {
        long long v21 = v15;
        do
        {
          uint64_t v20 = (void **)v21[2];
          BOOL v11 = *v20 == v21;
          long long v21 = v20;
        }
        while (!v11);
      }
      if (*v18 == v15) {
        SipStack *v18 = v20;
      }
      long long v22 = (uint64_t *)v18[1];
      uint64_t v18[2] = (void **)((char *)v18[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v22, (uint64_t *)v15);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,BambiCarrierPrefs>,0>((uint64_t)(v15 + 4));
      operator delete(v15);
    }
  }
  *(void *)uint64_t v27 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1C52488C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  a21 = (void *)(v26 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

uint64_t BambiPrefsManager::prefs(BambiPrefsManager *a1)
{
  uint64_t v2 = BambiPrefsManager::instance(a1);
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v2, (void **)a1);
  char v4 = (BambiPrefsManager *)BambiPrefsManager::instance((BambiPrefsManager *)v3);
  char v5 = (void **)((char *)v4 + 8);
  long long v6 = (uint64_t **)BambiPrefsManager::instance(v4);
  if (v5 == v3) {
    return (uint64_t)(v6 + 9);
  }
  uint64_t v8 = a1;
  return std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (void **)a1, (uint64_t)&std::piecewise_construct, (long long **)&v8)[11];
}

BOOL BambiPrefsManager::prefsValid(BambiPrefsManager *a1)
{
  uint64_t v2 = BambiPrefsManager::instance(a1);
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v2, (void **)a1);
  char v4 = (BambiPrefsManager *)BambiPrefsManager::instance((BambiPrefsManager *)v3);
  if ((void **)((char *)v4 + 8) == v3) {
    return 0;
  }
  char v5 = (uint64_t **)BambiPrefsManager::instance(v4);
  __int16 v7 = a1;
  return std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (void **)a1, (uint64_t)&std::piecewise_construct, (long long **)&v7)[11] != 0;
}

void BambiPrefsManager::audit(BambiPrefsManager *this)
{
  uint64_t v1 = (void *)BambiPrefsManager::instance(this);
  uint64_t v2 = (long long *)(v1 + 1);
  uint64_t v3 = (long long *)*v1;
  if ((void *)*v1 != v1 + 1)
  {
    do
    {
      memset(v12, 0, sizeof(v12));
      std::pair<std::string const,BambiCarrierPrefs>::pair[abi:ne180100]((std::string *)v12, v3 + 2);
      std::string::basic_string[abi:ne180100]<0>(v10, "audit");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::info((uint64_t)v10, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"  ", 2);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v4 + 32))(v4, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v4 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      if (v11 < 0) {
        operator delete(v10[0]);
      }
      BambiCarrierPrefs::~BambiCarrierPrefs((BambiCarrierPrefs *)&v12[24]);
      if ((v12[23] & 0x80000000) != 0) {
        operator delete(*(void **)v12);
      }
      char v5 = (long long *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          long long v6 = v5;
          char v5 = *(long long **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          long long v6 = (long long *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != v2);
  }
}

void sub_1C5248C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::pair<std::string const,BambiCarrierPrefs>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void BambiPrefsManager::dumpState(BambiPrefsManager *this, ImsOutStream *a2)
{
  uint64_t v3 = (void *)BambiPrefsManager::instance(this);
  uint64_t v4 = (long long *)(v3 + 1);
  char v5 = (long long *)*v3;
  if ((void *)*v3 != v3 + 1)
  {
    do
    {
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      memset(v10, 0, sizeof(v10));
      *(_OWORD *)std::string __p = 0u;
      std::pair<std::string const,BambiCarrierPrefs>::pair[abi:ne180100]((std::string *)__p, v5 + 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 1), (uint64_t)"Carrier Prefs for ", 18);
      *((unsigned char *)this + 17) = 0;
      (*(void (**)(BambiPrefsManager *, void **))(*(void *)this + 32))(this, __p);
      (*(void (**)(BambiPrefsManager *, void *(*)(void *)))(*(void *)this + 64))(this, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)this + 17) = 0;
      if (*((void *)&v11 + 1)) {
        (*(void (**)(void, BambiPrefsManager *))(**((void **)&v11 + 1) + 80))(*((void *)&v11 + 1), this);
      }
      (*(void (**)(BambiPrefsManager *, void *(*)(void *)))(*(void *)this + 64))(this, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)this + 17) = 0;
      BambiCarrierPrefs::~BambiCarrierPrefs((BambiCarrierPrefs *)((char *)v10 + 8));
      if (SBYTE7(v10[0]) < 0) {
        operator delete(__p[0]);
      }
      long long v6 = (long long *)*((void *)v5 + 1);
      if (v6)
      {
        do
        {
          BOOL v7 = v6;
          long long v6 = *(long long **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          BOOL v7 = (long long *)*((void *)v5 + 2);
          BOOL v8 = *(void *)v7 == (void)v5;
          char v5 = v7;
        }
        while (!v8);
      }
      char v5 = v7;
    }
    while (v7 != v4);
  }
}

void sub_1C5248E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void BambiPrefsManager::setPrefsForCarrier(BambiPrefsManager *a1, ImsPrefs *a2, int a3)
{
  uint64_t v6 = BambiPrefsManager::instance(a1);
  BOOL v7 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v6, (void **)a1);
  BOOL v8 = (BambiPrefsManager *)BambiPrefsManager::instance((BambiPrefsManager *)v7);
  if ((void **)((char *)v8 + 8) != v7)
  {
    char v9 = (uint64_t **)BambiPrefsManager::instance(v8);
    char v59 = a1;
    uint64_t v10 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)a1, (uint64_t)&std::piecewise_construct, (long long **)&v59)[11];
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v59, "prefs");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v11 = ims::debug((uint64_t)&v59, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Setting prefs (", 15);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)") for carrier ", 14);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, BambiPrefsManager *))(*(void *)v11 + 32))(v11, a1);
  long long v12 = (BambiPrefsManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61) < 0) {
    operator delete(v59);
  }
  long long v13 = (uint64_t **)BambiPrefsManager::instance(v12);
  char v59 = a1;
  long long v14 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (void **)a1, (uint64_t)&std::piecewise_construct, (long long **)&v59);
  long long v15 = std::string::operator=((std::string *)(v14 + 7), (const std::string *)a1);
  long long v16 = (uint64_t **)BambiPrefsManager::instance((BambiPrefsManager *)v15);
  char v59 = a1;
  long long v17 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (void **)a1, (uint64_t)&std::piecewise_construct, (long long **)&v59);
  v17[11] = (uint64_t)a2;
  long long v18 = (uint64_t **)BambiPrefsManager::instance((BambiPrefsManager *)v17);
  char v59 = a1;
  long long v19 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, (void **)a1, (uint64_t)&std::piecewise_construct, (long long **)&v59);
  *((unsigned char *)v19 + 80) = a3;
  long long v20 = (uint64_t **)BambiPrefsManager::instance((BambiPrefsManager *)v19);
  if (a2)
  {
    char v59 = a1;
    long long v21 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, (void **)a1, (uint64_t)&std::piecewise_construct, (long long **)&v59);
    BambiEmergencyPrefs::reset((BambiEmergencyPrefs *)(v21 + 12));
    long long v23 = (void **)ImsPrefs::getAllowIncomingCallsDuringEmergencyCallKey(v22);
    long long v24 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, v23);
    *((unsigned char *)v21 + 97) = (_BYTE)v24;
    EmergencyRegistrationTimeoutSecondsKey = (void **)ImsPrefs::getEmergencyRegistrationTimeoutSecondsKey(v24);
    uint64_t v26 = (ImsPrefs *)ImsPrefs::intValue(a2, EmergencyRegistrationTimeoutSecondsKey);
    *((_DWORD *)v21 + 25) = v26;
    uint64_t v27 = (void **)ImsPrefs::getAllowOutgoingCallsDuringEmergencyCallKey(v26);
    uint64_t v28 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, v27);
    if (v28)
    {
      uint64_t v29 = (void **)ImsPrefs::getAllowOutgoingCallsDuringEmergencyCallKey(v28);
      uint64_t v30 = ImsPrefs::BOOLValue(a2, v29);
    }
    else
    {
      uint64_t v30 = *((unsigned __int8 *)v21 + 97);
    }
    *((unsigned char *)v21 + 96) = v30;
    if (a3) {
      AllowAnonymousEmergencyCallsWhileRoamingKey = (void **)ImsPrefs::getAllowAnonymousEmergencyCallsWhileRoamingKey((ImsPrefs *)v30);
    }
    else {
      AllowAnonymousEmergencyCallsWhileRoamingKey = (void **)ImsPrefs::getAllowAnonymousEmergencyCallsKey((ImsPrefs *)v30);
    }
    unint64_t v33 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AllowAnonymousEmergencyCallsWhileRoamingKey);
    *((unsigned char *)v21 + 98) = (_BYTE)v33;
    AllowEmergencyRetryForIPSecKey = (void **)ImsPrefs::getAllowEmergencyRetryForIPSecKey(v33);
    uint64_t v35 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AllowEmergencyRetryForIPSecKey);
    *((unsigned char *)v21 + 99) = (_BYTE)v35;
    long long v60 = 0;
    uint64_t v61 = 0;
    char v59 = &v60;
    EmergencyURNsKey = ImsPrefs::getEmergencyURNsKey(v35);
    long long v37 = (std::string *)ImsPrefs::stringMapValue(a2, (uint64_t)EmergencyURNsKey, (uint64_t **)&v59);
    if (v37)
    {
      long long v38 = (char *)v59;
      if (v59 != &v60)
      {
        do
        {
          uint64_t v39 = (void **)(v38 + 32);
          uint64_t v40 = v38[55];
          int v41 = (char)v40;
          if ((v40 & 0x80u) != 0) {
            uint64_t v40 = *((void *)v38 + 5);
          }
          if (v40 != 7
            || (v41 >= 0 ? (uint64_t v42 = (int *)(v38 + 32)) : (uint64_t v42 = (int *)*v39),
                (int v43 = *v42, v44 = *(int *)((char *)v42 + 3), v43 == 1634100580) ? (v45 = v44 == 1953264993) : (v45 = 0),
                unint64_t v46 = (std::string *)(v21 + 13),
                !v45))
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v38 + 32);
            unint64_t v46 = (std::string *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v21 + 16, v39, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 7);
          }
          long long v37 = std::string::operator=(v46, (const std::string *)(v38 + 56));
          uint64_t v47 = (char *)*((void *)v38 + 1);
          if (v47)
          {
            do
            {
              long long v48 = v47;
              uint64_t v47 = *(char **)v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              long long v48 = (char *)*((void *)v38 + 2);
              BOOL v45 = *(void *)v48 == (void)v38;
              long long v38 = v48;
            }
            while (!v45);
          }
          long long v38 = v48;
        }
        while (v48 != (char *)&v60);
      }
    }
    memset(&__p, 0, sizeof(__p));
    PrivateEmergencyPrefixesKey = (void **)ImsPrefs::getPrivateEmergencyPrefixesKey((ImsPrefs *)v37);
    uint64_t v50 = (ImsPrefs *)ImsPrefs::stringValue(a2, PrivateEmergencyPrefixesKey);
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size) {
      uint64_t v50 = (ImsPrefs *)ims::tokenize(&__p, v21 + 23, 0x2Cu);
    }
    NonPrivateEmergencyPrefixesKey = (void **)ImsPrefs::getNonPrivateEmergencyPrefixesKey(v50);
    ImsPrefs::stringValue(a2, NonPrivateEmergencyPrefixesKey);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v57;
    std::string::size_type v53 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v53 = v57.__r_.__value_.__l.__size_;
    }
    if (v53) {
      ims::tokenize(&__p, v21 + 26, 0x2Cu);
    }
    long long v54 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(&v57, "REGISTER");
    EmergencyRegistrationRetryResponsesKey = (void **)ImsPrefs::getEmergencyRegistrationRetryResponsesKey(v54);
    ImsPrefs::stringValue(a2, EmergencyRegistrationRetryResponsesKey);
    SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)(v21 + 19), (uint64_t)&v57, &v56);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v59, v60);
  }
  else
  {
    char v59 = a1;
    long long v31 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, (void **)a1, (uint64_t)&std::piecewise_construct, (long long **)&v59);
    BambiEmergencyPrefs::reset((BambiEmergencyPrefs *)(v31 + 12));
  }
}

void sub_1C524938C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,void *a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a27, a28);
  _Unwind_Resume(a1);
}

uint64_t *BambiPrefsManager::subscribe(BambiPrefsManager *a1, unint64_t *a2)
{
  uint64_t v4 = BambiPrefsManager::instance(a1);
  char v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v4, (void **)a1);
  uint64_t result = (uint64_t *)BambiPrefsManager::instance((BambiPrefsManager *)v5);
  if (result + 1 != (uint64_t *)v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "prefs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v20, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Subscribing ", 12);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" to ", 4);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, BambiPrefsManager *))(*(void *)v7 + 32))(v7, a1);
    BOOL v8 = (BambiPrefsManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    char v9 = (uint64_t **)BambiPrefsManager::instance(v8);
    v20[0] = a1;
    uint64_t result = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)a1, (uint64_t)&std::piecewise_construct, (long long **)v20);
    unint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    long long v12 = (uint64_t *)result[36];
    if (v12)
    {
      while (1)
      {
        while (1)
        {
          long long v13 = (uint64_t **)v12;
          unint64_t v14 = v12[4];
          if (v14 <= v11) {
            break;
          }
          long long v12 = *v13;
          long long v15 = v13;
          if (!*v13) {
            goto LABEL_14;
          }
        }
        if (v14 >= v11) {
          break;
        }
        long long v12 = v13[1];
        if (!v12)
        {
          long long v15 = v13 + 1;
          goto LABEL_14;
        }
      }
    }
    else
    {
      long long v15 = (uint64_t **)(result + 36);
      long long v13 = (uint64_t **)(result + 36);
LABEL_14:
      long long v16 = (uint64_t **)(result + 35);
      long long v17 = (uint64_t *)operator new(0x30uLL);
      v17[4] = v11;
      v17[5] = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      return std::__tree<unsigned int>::__insert_node_at(v16, (uint64_t)v13, v15, v17);
    }
  }
  return result;
}

void sub_1C524961C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiPrefsManager::unsubscribe(BambiPrefsManager *a1, unint64_t *a2)
{
  uint64_t v4 = BambiPrefsManager::instance(a1);
  char v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v4, (void **)a1);
  if ((void **)(BambiPrefsManager::instance((BambiPrefsManager *)v5) + 8) != v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "prefs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)v24, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Unsubscribing ", 14);
    *(unsigned char *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" from ", 6);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, BambiPrefsManager *))(*(void *)v6 + 32))(v6, a1);
    uint64_t v7 = (BambiPrefsManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    BOOL v8 = (uint64_t **)BambiPrefsManager::instance(v7);
    v24[0] = a1;
    char v9 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (void **)a1, (uint64_t)&std::piecewise_construct, (long long **)v24);
    uint64_t v10 = (uint64_t *)v9[36];
    if (v10)
    {
      unint64_t v11 = *a2;
      long long v12 = v9 + 36;
      long long v13 = (void *)v9[36];
      do
      {
        unint64_t v14 = v13[4];
        BOOL v15 = v14 >= v11;
        if (v14 >= v11) {
          long long v16 = v13;
        }
        else {
          long long v16 = v13 + 1;
        }
        if (v15) {
          long long v12 = v13;
        }
        long long v13 = (void *)*v16;
      }
      while (*v16);
      if (v12 != v9 + 36 && v12[4] <= v11)
      {
        long long v17 = (uint64_t *)v12[1];
        if (v17)
        {
          do
          {
            long long v18 = v17;
            long long v17 = (uint64_t *)*v17;
          }
          while (v17);
        }
        else
        {
          char v19 = v12;
          do
          {
            long long v18 = (uint64_t *)v19[2];
            BOOL v20 = *v18 == (void)v19;
            char v19 = v18;
          }
          while (!v20);
        }
        if ((uint64_t *)v9[35] == v12) {
          v9[35] = (uint64_t)v18;
        }
        --v9[37];
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v10, v12);
        char v21 = (std::__shared_weak_count *)v12[5];
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        operator delete(v12);
      }
    }
  }
}

void sub_1C5249870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiPrefsManager::subscribers(BambiPrefsManager *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = BambiPrefsManager::instance(a1);
  char v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v4, (void **)a1);
  uint64_t v6 = (BambiPrefsManager *)BambiPrefsManager::instance((BambiPrefsManager *)v5);
  if ((void **)((char *)v6 + 8) != v5)
  {
    uint64_t v7 = (uint64_t **)BambiPrefsManager::instance(v6);
    long long v16 = a1;
    BOOL v8 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a1, (uint64_t)&std::piecewise_construct, (long long **)&v16);
    char v9 = (uint64_t *)v8[35];
    uint64_t v10 = v8 + 36;
    if (v9 != v8 + 36)
    {
      do
      {
        uint64_t v11 = v9[5];
        *(void *)&long long v15 = v9[4];
        *((void *)&v15 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v11;
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
        std::vector<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const>>::push_back[abi:ne180100](a2, &v15);
        if (*((void *)&v15 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
        }
        long long v12 = (uint64_t *)v9[1];
        if (v12)
        {
          do
          {
            long long v13 = v12;
            long long v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            long long v13 = (uint64_t *)v9[2];
            BOOL v14 = *v13 == (void)v9;
            char v9 = v13;
          }
          while (!v14);
        }
        char v9 = v13;
      }
      while (v13 != v10);
    }
  }
}

void sub_1C5249998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void **std::vector<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<ImpuType>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    BOOL v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18[2] = v15 + 16;
    std::vector<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const>>::__swap_out_circular_buffer(a1, v18);
    char v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    char v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1C5249AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void BambiPrefsManager::loadPrefs()
{
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  long long v3;
  long long v4;
  long long v5;

  uint64_t v3 = 0u;
  uint64_t v4 = 0u;
  unint64_t v5 = 0u;
  uint64_t v0 = &unk_1F20B2680;
  uint64_t v1 = &_bambiDomain;
  uint64_t v2 = 0;
  operator new();
}

void sub_1C5249E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult((ImsResult *)&a33);
  _Unwind_Resume(a1);
}

uint64_t BambiPrefsManager::loadPrefs(BambiPrefsManager *a1, ImsPrefs *a2, int a3)
{
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v26 = (void (**)(void **, uint64_t))&unk_1F20B2680;
  uint64_t v27 = &_bambiDomain;
  uint64_t v28 = 0;
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "prefs");
    std::string::basic_string[abi:ne180100]<0>(v32, "");
    uint64_t v6 = ims::error((uint64_t)__p, (uint64_t)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"unable to load prefs", 20);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v33 < 0) {
      operator delete(v32[0]);
    }
    if (SBYTE7(v25[0]) < 0) {
      operator delete(__p[0]);
    }
    memset((char *)v25 + 8, 0, 48);
    __p[0] = &unk_1F20B2680;
    __p[1] = &_bambiDomain;
    LODWORD(v25[0]) = 0x40000000;
    ImsResult::operator=((uint64_t)&v26, (uint64_t)__p);
    ImsResult::~ImsResult((ImsResult *)__p);
  }
  memset(&__s, 0, sizeof(__s));
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&v25[0] = 0;
  uint64_t v7 = std::string::basic_string[abi:ne180100]<0>(v32, "_wireless");
  ims::userHomeDirectory(v7, __p);
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if ((SBYTE7(v25[0]) & 0x80u) == 0) {
    size_t v8 = BYTE7(v25[0]);
  }
  else {
    size_t v8 = (size_t)__p[1];
  }
  memset(&v22, 0, sizeof(v22));
  char v9 = &v22;
  std::string::basic_string[abi:ne180100]((uint64_t)&v22, v8 + 8);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v9 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if ((SBYTE7(v25[0]) & 0x80u) == 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "/Library");
  if (SBYTE7(v25[0]) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v11 = std::string::append(&v22, "/Preferences/com.apple.ipTelephony_override.plist", 0x31uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  __s.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (os_variant_has_internal_content() && ims::fileExists(&__s, 0))
  {
    *(_OWORD *)std::string __p = 0u;
    memset(v25, 0, 56);
    std::string::basic_string[abi:ne180100]<0>(v32, "");
    std::string::basic_string[abi:ne180100]<0>(&v22, "override");
    ImsPrefs::loadPlist();
  }
  if ((*(uint64_t (**)(uint64_t *, void))(*v27 + 24))(v27, v28))
  {
    if (a2) {
      (*(void (**)(ImsPrefs *))(*(void *)a2 + 8))(a2);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "prefs");
    std::string::basic_string[abi:ne180100]<0>(v32, "");
    uint64_t v13 = ims::error((uint64_t)__p, (uint64_t)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"unable to load prefs: ", 22);
    *(unsigned char *)(v13 + 17) = 0;
    v26[2]((void **)&v26, v13);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v33 < 0) {
      operator delete(v32[0]);
    }
    if (SBYTE7(v25[0]) < 0) {
LABEL_38:
    }
      operator delete(__p[0]);
  }
  else
  {
    BambiPrefsManager::setPrefsForCarrier(a1, a2, a3);
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&v25[0] = 0;
    LoggingParamsKey = (void **)ImsPrefs::getLoggingParamsKey(v14);
    uint64_t v16 = (ims *)ImsPrefs::stringValue(a2, LoggingParamsKey);
    long long v17 = (void *)BYTE7(v25[0]);
    char v18 = BYTE7(v25[0]);
    if (SBYTE7(v25[0]) < 0) {
      long long v17 = __p[1];
    }
    if (v17)
    {
      char v19 = (ImsLogger *)ims::logger(v16);
      ImsLogger::setParams(v19, (std::string *)__p);
      char v18 = BYTE7(v25[0]);
    }
    if (v18 < 0) {
      goto LABEL_38;
    }
  }
  int v20 = (*(uint64_t (**)(uint64_t *, void))(*v27 + 24))(v27, v28);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  ImsResult::~ImsResult((ImsResult *)&v26);
  return v20 ^ 1u;
}

void sub_1C524A5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v41 - 65) < 0) {
    operator delete(*(void **)(v41 - 88));
  }
  ImsResult::~ImsResult((ImsResult *)&a28);
  if (a26 < 0) {
    operator delete(a21);
  }
  ImsResult::~ImsResult((ImsResult *)&a41);
  _Unwind_Resume(a1);
}

void sub_1C524AD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult((ImsResult *)&a33);
  _Unwind_Resume(a1);
}

void BambiPrefsManager::BambiPrefsManager(BambiPrefsManager *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  ImsPrefs::ImsPrefs((BambiPrefsManager *)((char *)this + 72));
}

void sub_1C524AEE4(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 71) < 0) {
      operator delete(*(void **)(v1 + v3 + 48));
    }
    v3 -= 24;
    if (v3 == -48)
    {
      std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::destroy(v1, *(void **)(v1 + 8));
      _Unwind_Resume(a1);
    }
  }
}

std::string *std::pair<std::string const,BambiCarrierPrefs>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = a2[3];
  BambiEmergencyPrefs::BambiEmergencyPrefs((BambiEmergencyPrefs *)&this[2].__r_.__value_.__r.__words[2], (const BambiEmergencyPrefs *)(a2 + 4));
  this[8].__r_.__value_.__l.__size_ = 0;
  this[8].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__r.__words[0] = 0;
  std::vector<ImpuType>::__init_with_size[abi:ne180100]<ImpuType*,ImpuType*>(&this[8].__r_.__value_.__l.__size_, *((const void **)a2 + 25), *((void *)a2 + 26), (uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 2);
  this[9].__r_.__value_.__l.__size_ = 0;
  this[9].__r_.__value_.__r.__words[2] = 0;
  this[10].__r_.__value_.__r.__words[0] = 0;
  std::vector<ImpuType>::__init_with_size[abi:ne180100]<ImpuType*,ImpuType*>(&this[9].__r_.__value_.__l.__size_, *((const void **)a2 + 28), *((void *)a2 + 29), (uint64_t)(*((void *)a2 + 29) - *((void *)a2 + 28)) >> 2);
  uint64_t v6 = &this[10].__r_.__value_.__r.__words[2];
  this[10].__r_.__value_.__l.__size_ = (std::string::size_type)&this[10].__r_.__value_.__r.__words[2];
  this[10].__r_.__value_.__r.__words[2] = 0;
  this[11].__r_.__value_.__r.__words[0] = 0;
  uint64_t v7 = (long long *)*((void *)a2 + 31);
  size_t v8 = a2 + 16;
  if (v7 != a2 + 16)
  {
    while (1)
    {
      unint64_t v10 = *((void *)v7 + 4);
      uint64_t v9 = *((void *)v7 + 5);
      std::string::size_type v11 = *v6;
      long long v12 = &this[10].__r_.__value_.__r.__words[2];
      if ((std::string::size_type *)this[10].__r_.__value_.__l.__size_ != v6)
      {
        uint64_t v13 = (std::string::size_type *)*v6;
        BOOL v14 = &this[10].__r_.__value_.__s.__data_[16];
        if (v11)
        {
          do
          {
            long long v12 = v13;
            uint64_t v13 = (std::string::size_type *)v13[1];
          }
          while (v13);
        }
        else
        {
          do
          {
            long long v12 = (std::string::size_type *)*((void *)v14 + 2);
            BOOL v15 = *v12 == (void)v14;
            BOOL v14 = (std::string::value_type *)v12;
          }
          while (v15);
        }
        if (v12[4] >= v10) {
          break;
        }
      }
      if (v11) {
        uint64_t v16 = (uint64_t **)v12;
      }
      else {
        uint64_t v16 = (uint64_t **)&this[10].__r_.__value_.__r.__words[2];
      }
      if (v11) {
        long long v17 = (uint64_t **)(v12 + 1);
      }
      else {
        long long v17 = (uint64_t **)&this[10].__r_.__value_.__r.__words[2];
      }
      if (!*v17) {
        goto LABEL_30;
      }
LABEL_33:
      char v21 = (long long *)*((void *)v7 + 1);
      if (v21)
      {
        do
        {
          std::string v22 = v21;
          char v21 = *(long long **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          std::string v22 = (long long *)*((void *)v7 + 2);
          BOOL v15 = *(void *)v22 == (void)v7;
          uint64_t v7 = v22;
        }
        while (!v15);
      }
      uint64_t v7 = v22;
      if (v22 == v8) {
        return this;
      }
    }
    long long v17 = (uint64_t **)&this[10].__r_.__value_.__r.__words[2];
    uint64_t v16 = (uint64_t **)&this[10].__r_.__value_.__r.__words[2];
    if (v11)
    {
      char v18 = (uint64_t *)*v6;
      while (1)
      {
        while (1)
        {
          uint64_t v16 = (uint64_t **)v18;
          unint64_t v19 = v18[4];
          if (v19 <= v10) {
            break;
          }
          char v18 = *v16;
          long long v17 = v16;
          if (!*v16) {
            goto LABEL_30;
          }
        }
        if (v19 >= v10) {
          goto LABEL_33;
        }
        char v18 = v16[1];
        if (!v18)
        {
          long long v17 = v16 + 1;
          break;
        }
      }
    }
LABEL_30:
    int v20 = (uint64_t *)operator new(0x30uLL);
    _OWORD v20[4] = v10;
    v20[5] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    std::__tree<unsigned int>::__insert_node_at((uint64_t **)&this[10].__r_.__value_.__l.__size_, (uint64_t)v16, v17, v20);
    goto LABEL_33;
  }
  return this;
}

void sub_1C524B164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, SipImpuRank *a11, BambiEmergencyPrefs *a12)
{
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(exception_object);
}

void SipImpuRank::~SipImpuRank(SipImpuRank *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v3;
    operator delete(v3);
  }
}

void BambiEmergencyPrefs::~BambiEmergencyPrefs(BambiEmergencyPrefs *this)
{
  uint64_t v2 = (void **)((char *)this + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((void *)this + 7) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void BambiEmergencyPrefs::BambiEmergencyPrefs(BambiEmergencyPrefs *this, const BambiEmergencyPrefs *a2)
{
  *(void *)this = *(void *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)this + 4, (uint64_t)a2 + 32);
  *((void *)this + 7) = &unk_1F20E3DD0;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 8, (uint64_t)a2 + 64);
  *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 88), *((long long **)a2 + 11), *((long long **)a2 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3));
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 112), *((long long **)a2 + 14), *((long long **)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 3));
}

void sub_1C524B3C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *(void *)(v3 + 56) = v5;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v4, *(void **)(v3 + 72));
  BambiEmergencyUrnMap::~BambiEmergencyUrnMap(v2);
  _Unwind_Resume(a1);
}

void sub_1C524B404()
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v0);
  }
  JUMPOUT(0x1C524B3FCLL);
}

void BambiEmergencyUrnMap::~BambiEmergencyUrnMap(BambiEmergencyUrnMap *this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1C524B49C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          size_t v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          size_t v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void *std::vector<ImpuType>::__init_with_size[abi:ne180100]<ImpuType*,ImpuType*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 62) {
      std::vector<ImpuType>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)(result + 2), a4);
    uint64_t v7 = result;
    void *v4 = result;
    v4[1] = result;
    _OWORD v4[2] = (char *)result + 4 * v8;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1C524B668(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<ImpuType>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void std::__tree<std::shared_ptr<SipStack>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::shared_ptr<SipStack>>::destroy(*a1);
    std::__tree<std::shared_ptr<SipStack>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[5];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

void BambiCarrierPrefs::~BambiCarrierPrefs(BambiCarrierPrefs *this)
{
  std::__tree<std::shared_ptr<SipStack>>::destroy(*((void **)this + 29));
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)((char *)this + 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  *((void *)this + 12) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 104, *((void **)this + 14));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t std::vector<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<SipStack> const>,std::reverse_iterator<std::shared_ptr<SipStack> const*>,std::reverse_iterator<std::shared_ptr<SipStack> const*>,std::reverse_iterator<std::shared_ptr<SipStack> const*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<SipStack> const>,std::reverse_iterator<std::shared_ptr<SipStack> const*>,std::reverse_iterator<std::shared_ptr<SipStack> const*>,std::reverse_iterator<std::shared_ptr<SipStack> const*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = a7;
  long long v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  v12[2] = &v14;
  void v12[3] = 1;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 16);
      a3 -= 16;
      *(void *)(v7 - 16) = v8;
      uint64_t v9 = *(void *)(a3 + 8);
      *(void *)(v7 - 8) = v9;
      if (v9)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        uint64_t v7 = *((void *)&v14 + 1);
      }
      v7 -= 16;
      *((void *)&v14 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v7;
    }
    while (a3 != a5);
    uint64_t v10 = v14;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<SipStack> const>,std::reverse_iterator<std::shared_ptr<SipStack> const*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<SipStack> const>,std::reverse_iterator<std::shared_ptr<SipStack> const*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<SipStack> const>,std::reverse_iterator<std::shared_ptr<SipStack> const*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<SipStack> const>,std::reverse_iterator<std::shared_ptr<SipStack> const*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v8 = 0;
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    memset(v7, 0, sizeof(v7));
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, v7);
    std::__tree<unsigned int>::__insert_node_at(a1, v8, v5, v7[0]);
    return v7[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,BambiCarrierPrefs>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,BambiCarrierPrefs>,0>(uint64_t a1)
{
  BambiCarrierPrefs::~BambiCarrierPrefs((BambiCarrierPrefs *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,BambiCarrierPrefs>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BambiCarrierPrefs>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (char *)operator new(0x130uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,BambiCarrierPrefs>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1C524BC60(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,BambiCarrierPrefs>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BambiCarrierPrefs>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,BambiCarrierPrefs>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  this[11].__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[9].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  BambiCarrierPrefs::BambiCarrierPrefs((BambiCarrierPrefs *)&this[1]);
  return this;
}

void sub_1C524BCF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiCarrierPrefs::BambiCarrierPrefs(BambiCarrierPrefs *this)
{
  *((void *)this + 4) = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 5) = 0xA00000000;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  BambiEmergencyUrnMap::reset((BambiCarrierPrefs *)((char *)this + 48));
  *((void *)this + 14) = 0;
  *((void *)this + 13) = (char *)this + 112;
  *((void *)this + 12) = &unk_1F20E3DD0;
  *((void *)this + 15) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = 0u;
  SipImpuRank::SipImpuRank((BambiCarrierPrefs *)((char *)this + 176));
  *((void *)this + 30) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 28) = (char *)this + 232;
}

void sub_1C524BE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v16 = v15;
  uint64_t v17 = v13;
  a10 = (void **)(v10 + 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  *(void *)(v10 + 96) = v14;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v17, *(void **)(v10 + 112));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v12, *(void **)(v10 + 80));
  if (*(char *)(v10 + 71) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,BambiCarrierPrefs>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BambiCarrierPrefs>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,BambiCarrierPrefs>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t SipUssdSession::SipUssdSession(uint64_t a1, const std::string *a2)
{
  *(void *)(a1 + 104) = &unk_1F20B2FA8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.ussd");
  SipSessionInterface::SipSessionInterface(a1, (uint64_t *)&off_1F20B8B18, &__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F20B8990;
  *(void *)(a1 + 104) = &unk_1F20B8AD8;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_WORD *)(a1 + 656) = 1;
  *(_DWORD *)(a1 + 676) = 0;
  *(_OWORD *)(a1 + 660) = 0u;
  return a1;
}

void sub_1C524BFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipUssdSession::~SipUssdSession(SipUssdSession *this)
{
  *(void *)this = &unk_1F20B8990;
  *((void *)this + 13) = &unk_1F20B8AD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 84);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 655) < 0) {
    operator delete(*((void **)this + 79));
  }
  SipSessionInterface::~SipSessionInterface(this, (uint64_t *)&off_1F20B8B18);
}

{
  uint64_t vars8;

  SipUssdSession::~SipUssdSession(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipUssdSession::~SipUssdSession(SipUssdSession *this)
{
}

{
  uint64_t vars8;

  SipUssdSession::~SipUssdSession((SipUssdSession *)((char *)this - 104));
  JUMPOUT(0x1C878E320);
}

void SipUssdSession::deinitialize(SipUssdSession *this)
{
  SipUssdSession::setState((unsigned __int8 *)this, 0);
  SipSessionInterface::deinitialize(this);
}

unsigned __int8 *SipUssdSession::setState(unsigned __int8 *result, int a2)
{
  if (*((_DWORD *)result + 165) != a2)
  {
    long long v3 = (int8x8_t *)result;
    uint64_t v4 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 64))(result);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v3 + 16))(v3, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"state transition [", 18);
    *(unsigned char *)(v4 + 17) = 0;
    unsigned int v5 = v3[82].i32[1] - 1;
    uint64_t v6 = v5 > 2 ? "Uninitialized" : off_1E650F350[v5];
    size_t v7 = strlen(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)v6, v7);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" -> ", 4);
    *(unsigned char *)(v4 + 17) = 0;
    uint64_t v8 = (a2 - 1) > 2 ? "Uninitialized" : off_1E650F350[a2 - 1];
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)v8, v9);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v4 + 17) = 0;
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    v3[82].i32[1] = a2;
    if (a2 >= 3)
    {
      return SipTimerContainer::cancelTimer(v3 + 34, (std::string *)"UssdResponseTimer");
    }
  }
  return result;
}

void SipUssdSession::terminationLocksReleased(SipUssdSession *this)
{
  size_t v9 = 0;
  uint64_t v10 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (void *)this + 23);
  if (lpsrc
  {
    size_t v9 = v2;
    uint64_t v10 = v8;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v9;
  }
  std::string *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v4 = *((void *)this + 78);
  if (v4 && v9)
  {
    unsigned int v5 = v9;
    uint64_t v6 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 16))(v4, &v5);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  SipSessionInterface::terminationLocksReleased(this);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C524C404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipUssdSession::terminationLocksReleased(SipUssdSession *this)
{
}

void SipUssdSession::loggableName(SipUssdSession *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C524C56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a16);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipUssdSession::loggableName(SipUssdSession *this)
{
}

void SipUssdSession::initialize(void *a1, void *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  v3[0] = *a2;
  v3[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSessionInterface::initialize(a1, (uint64_t)v3);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1C524C610(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipUssdSession::startSession(SipUssdSession *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  SipDialog::createRequestInDialog(*((void *)this + 31));
}

void sub_1C524CC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41,char a42)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a41);
  }
  SipHost::~SipHost((SipHost *)&a42);
  _Unwind_Resume(a1);
}

SipHeader *SipMessage::header<SipAcceptHeader>(SipMessage *a1, int a2)
{
  uint64_t result = SipMessage::headerWithName(a1, "Accept", a2);
  if (result)
  {
  }
  return result;
}

void SipUssdSession::sendAdditionalData(uint64_t a1@<X0>, const std::string *a2@<X1>, ImsResult *a3@<X8>)
{
  SipUssdData::SipUssdData((uint64_t)&v5, a2, (const std::string *)(a1 + 632));
  SipUssdSession::sendInfo((SipUssdSession *)a1, a3);
  unsigned int v5 = &unk_1F20C3FC0;
  v6[0] = &unk_1F20C4038;
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[7]);
  }
  bambi::XmlTreeItem::~XmlTreeItem(v6);
}

void sub_1C524CF28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SipUssdData::~SipUssdData((SipUssdData *)va);
  _Unwind_Resume(a1);
}

void SipUssdSession::sendInfo(SipUssdSession *this@<X0>, ImsResult *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 657)) {
    SipDialog::createRequestInDialog(*((void *)this + 31));
  }
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  __p[0] = &unk_1F20B2680;
  __p[1] = &_bambiDomain;
  int v6 = 1073741826;
  uint64_t v4 = (const std::string *)ImsResult::operator<<<char [30]>((uint64_t)__p, "woah, slow down there maestro");
  ImsResult::ImsResult(a2, v4);
  ImsResult::~ImsResult((ImsResult *)__p);
}

void sub_1C524D2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](&a23);
  if (v23)
  {
    std::__shared_weak_count::__release_weak(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [30]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C524D404(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t SipUssdSession::handleRequest(int8x8_t *a1, const SipMessage *a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(const SipMessage *))(*(void *)a2 + 112))(a2);
  long long v7 = (unsigned __int8 *)v6;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 23);
  size_t v9 = *(void *)(v6 + 8);
  if ((v8 & 0x80u) == 0) {
    uint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    uint64_t v10 = *(void *)(v6 + 8);
  }
  switch(v10)
  {
    case 3:
      if ((v8 & 0x80) == 0)
      {
        if (!*(unsigned char *)(v6 + 23)) {
          goto LABEL_52;
        }
        uint64_t v13 = &SipRequest::kMethodBye;
        uint64_t v14 = (unsigned __int8 *)v6;
        while (*v14 == *(unsigned __int8 *)v13)
        {
          ++v14;
          uint64_t v13 = (long long *)((char *)v13 + 1);
          if (!--v8) {
            goto LABEL_52;
          }
        }
        goto LABEL_29;
      }
      uint64_t v17 = *(const void **)v6;
      char v18 = (const char *)&SipRequest::kMethodBye;
      break;
    case 7:
      if ((v8 & 0x80) == 0)
      {
        if (!*(unsigned char *)(v6 + 23)) {
          goto LABEL_52;
        }
        BOOL v15 = "MESSAGE";
        uint64_t v16 = (unsigned __int8 *)v6;
        while (*v16 == *(unsigned __int8 *)v15)
        {
          ++v16;
          ++v15;
          if (!--v8) {
            goto LABEL_52;
          }
        }
        goto LABEL_29;
      }
      uint64_t v17 = *(const void **)v6;
      char v18 = "MESSAGE";
      break;
    case 4:
      if ((v8 & 0x80) == 0)
      {
        if (!*(unsigned char *)(v6 + 23)) {
          goto LABEL_52;
        }
        uint64_t v11 = "INFO";
        uint64_t v12 = (unsigned __int8 *)v6;
        while (*v12 == *(unsigned __int8 *)v11)
        {
          ++v12;
          ++v11;
          if (!--v8) {
            goto LABEL_52;
          }
        }
        goto LABEL_29;
      }
      uint64_t v17 = *(const void **)v6;
      char v18 = "INFO";
      break;
    default:
      goto LABEL_29;
  }
  if (!memcmp(v17, v18, v9)) {
    goto LABEL_52;
  }
LABEL_29:
  int8x8_t v19 = a1[31];
  if (*(void *)&v19 && (uint64_t v20 = *(void *)(*(void *)&v19 + 216)) != 0) {
    char v21 = *(SipUserAgent **)(v20 + 136);
  }
  else {
    char v21 = 0;
  }
  if (*(unsigned char *)(SipUserAgent::config(v21) + 628))
  {
    uint64_t v22 = v7[23];
    uint64_t v23 = (v22 & 0x80u) == 0 ? v7[23] : *((void *)v7 + 1);
    if (v23 == 6)
    {
      if ((v22 & 0x80) == 0)
      {
        if (v7[23])
        {
          long long v24 = "INVITE";
          while (*v7 == *(unsigned __int8 *)v24)
          {
            ++v7;
            ++v24;
            if (!--v22) {
              goto LABEL_52;
            }
          }
          goto LABEL_45;
        }
LABEL_52:
        uint64_t v27 = (unsigned __int8 *)(*(uint64_t (**)(const SipMessage *))(*(void *)a2 + 112))(a2);
        uint64_t v28 = v27[23];
        if ((v28 & 0x80u) == 0) {
          uint64_t v29 = v27[23];
        }
        else {
          uint64_t v29 = *((void *)v27 + 1);
        }
        if (v29 != 6) {
          goto LABEL_73;
        }
        if ((v28 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v27, "INVITE", *((void *)v27 + 1))) {
            goto LABEL_73;
          }
        }
        else if (v27[23])
        {
          long long v30 = "INVITE";
          while (*v27 == *(unsigned __int8 *)v30)
          {
            ++v27;
            ++v30;
            if (!--v28) {
              goto LABEL_63;
            }
          }
LABEL_73:
          long long v37 = (unsigned __int8 *)(*(uint64_t (**)(const SipMessage *))(*(void *)a2 + 112))(a2);
          uint64_t v38 = v37[23];
          if ((v38 & 0x80u) == 0) {
            uint64_t v39 = v37[23];
          }
          else {
            uint64_t v39 = *((void *)v37 + 1);
          }
          if (v39 == 3)
          {
            if ((v38 & 0x80) != 0)
            {
              BOOL v48 = memcmp(*(const void **)v37, &SipRequest::kMethodBye, *((void *)v37 + 1)) == 0;
            }
            else if (v37[23])
            {
              uint64_t v40 = v38 - 1;
              uint64_t v41 = &SipRequest::kMethodBye;
              do
              {
                int v43 = *v37++;
                int v42 = v43;
                int v45 = *(unsigned __int8 *)v41;
                uint64_t v41 = (long long *)((char *)v41 + 1);
                int v44 = v45;
                BOOL v47 = v40-- != 0;
                BOOL v48 = v42 == v44;
              }
              while (v42 == v44 && v47);
            }
            else
            {
              BOOL v48 = 1;
            }
          }
          else
          {
            BOOL v48 = 0;
          }
          uint64_t v49 = SipMessage::body<SipUssdDataBody>((uint64_t)a2);
          if (v49)
          {
            uint64_t v50 = v49;
            a1[82].i8[1] = 0;
            SipTimerContainer::cancelTimer(a1 + 34, (std::string *)"UssdResponseTimer");
            long long v51 = (void (***)(void))a1[78];
            if (v51)
            {
              uint64_t v52 = *v51;
              if (*((_DWORD *)v50 + 36)) {
                v52[1]();
              }
              else {
                (*v52)();
              }
              goto LABEL_102;
            }
            uint64_t v55 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
            (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v55);
            std::string v56 = *(void **)(v55 + 8);
            std::string v57 = "no delegate";
            uint64_t v58 = 11;
          }
          else
          {
            std::string::size_type v53 = SipMessage::bodyWithContentType((uint64_t)a2, "application/ussd");
            if (v53) {
            else
            }
              BOOL v54 = 1;
            uint64_t v55 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
            (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v55);
            std::string v56 = *(void **)(v55 + 8);
            if (v54)
            {
              std::string v57 = "no USSD body";
              uint64_t v58 = 12;
            }
            else
            {
              std::string v57 = "legacy USSD body found, but CT doesn't consume it";
              uint64_t v58 = 49;
            }
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
          *(unsigned char *)(v55 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v55 + 17) = 0;
LABEL_102:
          long long v74 = 0u;
          long long v73 = 0u;
          int8x8_t v59 = a1[31];
          if (v59)
          {
            int8x8_t v59 = *(int8x8_t *)(*(void *)&v59 + 216);
            if (v59) {
              int8x8_t v59 = *(int8x8_t *)(*(void *)&v59 + 136);
            }
          }
          uint64_t v72 = 0;
          long long v71 = 0uLL;
          long long v70 = 0uLL;
          long long v69 = 0uLL;
          LODWORD(v73) = 1065353216;
          *(void *)&long long v74 = *(void *)&v59 + 288;
          long long v68 = &unk_1F20DD488;
          uint64_t v76 = 0;
          uint64_t v77 = 0;
          std::string __p = 0;
          DWORD2(v74) = 200;
          long long v60 = (std::__shared_weak_count *)a3[1];
          uint64_t v62 = *a3;
          long long v63 = v60;
          if (v60) {
            atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(void *__return_ptr, int8x8_t *, void **, uint64_t *))(*(void *)a1 + 240))(v64, a1, &v68, &v62);
          ImsResult::~ImsResult((ImsResult *)v64);
          if (v63) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v63);
          }
          if (v48)
          {
            SipUssdSession::setState((unsigned __int8 *)a1, 3);
            (*(void (**)(int8x8_t *))(*(void *)a1 + 192))(a1);
          }
          goto LABEL_111;
        }
LABEL_63:
        int8x8_t v31 = a1[31];
        long long v32 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2);
        if (v32) {
          char v33 = SipUriHeader::tag(v32);
        }
        else {
          char v33 = &ims::kEmptyString;
        }
        char v34 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(*(void *)&v31 + 2048, (void **)v33);
        if ((void **)(*(void *)&v31 + 2056) != v34)
        {
          uint64_t v36 = (SipDialogFork *)v34[7];
          uint64_t v35 = (std::__shared_weak_count *)v34[8];
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v36)
          {
            SipDialogFork::updateRouteSet(v36, a2, 0);
            SipDialogFork::handleTargetRefresh(v36, a2);
          }
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
        }
        goto LABEL_73;
      }
      if (!memcmp(*(const void **)v7, "INVITE", *((void *)v7 + 1))) {
        goto LABEL_52;
      }
    }
  }
LABEL_45:
  long long v74 = 0u;
  long long v73 = 0u;
  int8x8_t v25 = a1[31];
  if (v25)
  {
    int8x8_t v25 = *(int8x8_t *)(*(void *)&v25 + 216);
    if (v25) {
      int8x8_t v25 = *(int8x8_t *)(*(void *)&v25 + 136);
    }
  }
  uint64_t v72 = 0;
  long long v71 = 0uLL;
  long long v70 = 0uLL;
  long long v69 = 0uLL;
  LODWORD(v73) = 1065353216;
  *(void *)&long long v74 = *(void *)&v25 + 288;
  long long v68 = &unk_1F20DD488;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  std::string __p = 0;
  DWORD2(v74) = 405;
  uint64_t v26 = (std::__shared_weak_count *)a3[1];
  uint64_t v65 = *a3;
  long long v66 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *__return_ptr, int8x8_t *, void **, uint64_t *))(*(void *)a1 + 240))(v67, a1, &v68, &v65);
  ImsResult::~ImsResult((ImsResult *)v67);
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
LABEL_111:
  long long v68 = &unk_1F20DD488;
  if (SHIBYTE(v77) < 0) {
    operator delete(__p);
  }
  SipMessage::~SipMessage((SipMessage *)&v68);
  return 1;
}

void sub_1C524DC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(exception_object);
}

char *SipMessage::body<SipUssdDataBody>(uint64_t a1)
{
  uint64_t result = SipMessage::bodyWithContentType(a1, (unsigned __int8 *)SipUssdDataBody::kContentType);
  if (result)
  {
  }
  return result;
}

uint64_t SipUssdSession::handleResponse(uint64_t a1, const SipResponse *a2, void *a3)
{
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  v26[0] = *a3;
  v26[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v7 = SipSessionInterface::handleResponse(a1, (uint64_t)a2, (uint64_t)v26);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v7) {
    return 1;
  }
  unsigned int v8 = *((_DWORD *)a2 + 22);
  if (v8 >= 0x12C)
  {
    uint64_t v9 = *(void *)(a1 + 624);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 8))(v9, __p, 1);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_41;
  }
  if (v8 - 200 <= 0x63)
  {
    uint64_t v10 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a2);
    uint64_t v11 = (long long *)(v10 + 64);
    if (!v10) {
      uint64_t v11 = &ims::kEmptyString;
    }
    uint64_t v12 = *((unsigned __int8 *)v11 + 23);
    uint64_t v13 = (v12 & 0x80u) == 0 ? *((unsigned __int8 *)v11 + 23) : *((void *)v11 + 1);
    if (v13 == 6)
    {
      if ((v12 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v11, "INVITE", *((void *)v11 + 1))) {
          goto LABEL_28;
        }
      }
      else if (*((unsigned char *)v11 + 23))
      {
        uint64_t v14 = "INVITE";
        while (*(unsigned __int8 *)v11 == *(unsigned __int8 *)v14)
        {
          uint64_t v11 = (long long *)((char *)v11 + 1);
          ++v14;
          if (!--v12) {
            goto LABEL_23;
          }
        }
        goto LABEL_28;
      }
LABEL_23:
      if (*(_DWORD *)(a1 + 660) == 1)
      {
        SipUssdSession::setState((unsigned __int8 *)a1, 2);
        BOOL v15 = (std::__shared_weak_count *)a3[1];
        uint64_t v22 = *a3;
        uint64_t v23 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipSessionInterface::addAckRetransmitHandlerForClientTransaction(a1, (uint64_t)&v22, a2, 0);
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        return 1;
      }
    }
  }
LABEL_28:
  uint64_t v16 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a2);
  uint64_t v17 = (long long *)(v16 + 64);
  if (!v16) {
    uint64_t v17 = &ims::kEmptyString;
  }
  uint64_t v18 = *((unsigned __int8 *)v17 + 23);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = *((unsigned __int8 *)v17 + 23);
  }
  else {
    uint64_t v19 = *((void *)v17 + 1);
  }
  if (v19 != 3) {
    return 1;
  }
  if ((v18 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v17, &SipRequest::kMethodBye, *((void *)v17 + 1))) {
      return 1;
    }
LABEL_41:
    (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
    return 1;
  }
  if (!*((unsigned char *)v17 + 23)) {
    goto LABEL_41;
  }
  uint64_t v20 = &SipRequest::kMethodBye;
  while (*(unsigned __int8 *)v17 == *(unsigned __int8 *)v20)
  {
    uint64_t v17 = (long long *)((char *)v17 + 1);
    uint64_t v20 = (long long *)((char *)v20 + 1);
    if (!--v18) {
      goto LABEL_41;
    }
  }
  return 1;
}

void sub_1C524DF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipUssdSession::handleTransactionError(void *a1, uint64_t a2, void *a3)
{
  if (*a3 == a1[83])
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[84];
    a1[83] = 0;
    a1[84] = 0;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  uint64_t v5 = a1[78];
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v5 + 8))(v5, __p, 1);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(void *))(*a1 + 192))(a1);
}

void sub_1C524E034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipUssdSession::removeClientTransaction(uint64_t a1, uint64_t *a2)
{
  if (*a2 == *(void *)(a1 + 664))
  {
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 672);
    *(void *)(a1 + 664) = 0;
    *(void *)(a1 + 672) = 0;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  v7[0] = v5;
  v7[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSessionInterface::removeClientTransaction((uint64_t **)a1, v7);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C524E0EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipUssdSession::handleTimer(int *a1, unsigned __int8 *a2)
{
  memset(v23, 0, sizeof(v23));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v19, (void *)a1 + 23);
  if (v19) {
    uint64_t v4 = (std::__shared_weak_count *)(v19 + 104);
  }
  else {
    uint64_t v4 = 0;
  }
  char v21 = v4;
  uint64_t v22 = v20;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "handleTimer");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v23, &v21, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v5 = (*(uint64_t (**)(int *))(*(void *)a1 + 64))(a1);
  (*(void (**)(int *, uint64_t))(*(void *)a1 + 16))(a1, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"SipUssdSession::handleTimer", 27);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t v6 = a2[23];
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = a2[23];
  }
  else {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (v7 != 17) {
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v23);
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "UssdResponseTimer", *((void *)a2 + 1))) {
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v23);
    }
    goto LABEL_21;
  }
  if (!a2[23])
  {
LABEL_21:
    uint64_t v9 = *(void *)a1;
    if (a1[165] > 2)
    {
      uint64_t v12 = (*(uint64_t (**)(int *))(v9 + 64))(a1);
      (*(void (**)(int *, uint64_t))(*(void *)a1 + 16))(a1, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"ignoring timer ", 15);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, const char *))(*(void *)v12 + 32))(v12, "UssdResponseTimer");
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" in state ", 10);
      *(unsigned char *)(v12 + 17) = 0;
      unsigned int v13 = a1[165] - 1;
      if (v13 > 2) {
        uint64_t v14 = "Uninitialized";
      }
      else {
        uint64_t v14 = off_1E650F350[v13];
      }
      size_t v15 = strlen(v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)v14, v15);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
    }
    else
    {
      uint64_t v10 = (*(uint64_t (**)(int *))(v9 + 48))(a1);
      (*(void (**)(int *, uint64_t))(*(void *)a1 + 16))(a1, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"no response from USSD server", 28);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      uint64_t v11 = *((void *)a1 + 78);
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v11 + 8))(v11, &__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      SipUssdSession::cancelSession((SipUssdSession *)a1, (uint64_t)v17);
      ImsResult::~ImsResult((ImsResult *)v17);
    }
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v23);
  }
  char v8 = "UssdResponseTimer";
  while (*a2 == *(unsigned __int8 *)v8)
  {
    ++a2;
    ++v8;
    if (!--v6) {
      goto LABEL_21;
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v23);
}

void sub_1C524E528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v25 - 80);
  _Unwind_Resume(a1);
}

void SipUssdSession::cancelSession(SipUssdSession *this@<X0>, uint64_t a2@<X8>)
{
  switch(*((_DWORD *)this + 165))
  {
    case 1:
      uint64_t v8 = (*(uint64_t (**)(SipUssdSession *))(*(void *)this + 64))(this);
      (*(void (**)(SipUssdSession *, uint64_t))(*(void *)this + 16))(this, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"SipUssdSession::cancelSession: StateUnconfirmed: sendCancel...", 62);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      uint64_t v9 = (void *)*((void *)this + 83);
      if (v9)
      {
        *(void *)(a2 + 64) = 0;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        uint64_t v10 = (SipDialog *)*((void *)this + 31);
        uint64_t v11 = (uint64_t *)*((void *)this + 84);
        std::string __p = v9;
        uint64_t v16 = v11;
        if (v11) {
          atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
        }
        SipDialog::cancelInviteRequest(v10, (uint64_t *)&__p, 0);
      }
      uint64_t v13 = (*(uint64_t (**)(SipUssdSession *))(*(void *)this + 56))(this);
      (*(void (**)(SipUssdSession *, uint64_t))(*(void *)this + 16))(this, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"no INVITE transaction to cancel", 31);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(SipUssdSession *))(*(void *)this + 192))(this);
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      std::string __p = &unk_1F20B2680;
      uint64_t v16 = &_bambiDomain;
      int v17 = 1073741826;
      uint64_t v14 = (const std::string *)ImsResult::operator<<<char [32]>((uint64_t)&__p, "no INVITE transaction to cancel");
      ImsResult::ImsResult((ImsResult *)a2, v14);
      ImsResult::~ImsResult((ImsResult *)&__p);
      return;
    case 2:
      uint64_t v12 = (*(uint64_t (**)(SipUssdSession *))(*(void *)this + 64))(this);
      (*(void (**)(SipUssdSession *, uint64_t))(*(void *)this + 16))(this, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"SipUssdSession::cancelSession: StateUnconfirmed: sendBye...", 59);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
      SipDialog::createRequestInDialog(*((void *)this + 31));
    case 3:
      uint64_t v4 = (*(uint64_t (**)(SipUssdSession *))(*(void *)this + 64))(this);
      (*(void (**)(SipUssdSession *, uint64_t))(*(void *)this + 16))(this, v4);
      uint64_t v5 = *(void **)(v4 + 8);
      uint64_t v6 = "SipUssdSession::cancelSession: StateTerminated: no op";
      uint64_t v7 = 53;
      goto LABEL_9;
    default:
      uint64_t v4 = (*(uint64_t (**)(SipUssdSession *))(*(void *)this + 64))(this);
      (*(void (**)(SipUssdSession *, uint64_t))(*(void *)this + 16))(this, v4);
      uint64_t v5 = *(void **)(v4 + 8);
      uint64_t v6 = "SipUssdSession::cancelSession: StateUninitialized: no op";
      uint64_t v7 = 56;
LABEL_9:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(void *)a2 = &unk_1F20B2680;
      *(void *)(a2 + 8) = &_bambiDomain;
      *(_DWORD *)(a2 + 16) = 0;
      return;
  }
}

void sub_1C524EB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  int v17 = *(std::__shared_weak_count **)(v15 - 40);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipUssdSession::printSessionInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ImsResult::operator<<<char [27]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C524EC94(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t SipUssdSession::desiredServices(std::__shared_weak_count *this)
{
  SipSessionInterface::stack(this, &v5);
  uint64_t v1 = (ImsPrefs *)SipStack::prefs(v5);
  AddServicesToUssdSessionsKey = (void **)ImsPrefs::getAddServicesToUssdSessionsKey(v1);
  uint64_t v3 = ImsPrefs::BOOLValue(v1, AddServicesToUssdSessionsKey);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

void sub_1C524ED18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipSessionInterface::localSdp(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t SipSessionInterface::handleRequest()
{
  return 0;
}

double SipSessionInterface::fillCommonRequestHeaders@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t SipSessionInterface::desiredServices(SipSessionInterface *this)
{
  return 0;
}

uint64_t SipUssdSession::terminated(SipUssdSession *this)
{
  return 0;
}

void *std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B8D70;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B8D70;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20B8D70;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20B8D70;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C524EFE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B8DF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20B8DF0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20B8DF0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20B8DF0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C524F290(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_SipUssdSession_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(kUssdSdp, "v=0\r\no=- 2987933615 2987933615 IN IP6 5555::aaa:bbb:ccc:ddd\r\ns=-\r\nc=IN IP6 5555::aaa:bbb:ccc:ddd\r\nt=0 0\r\nm=audio 0 RTP/AVP 97 96\r\na=rtpmap:97 AMR/8000\r\na=fmtp:97 mode-set=0,2,5,7; maxframes=2\r\n"
    "a=rtpmap:96 telephone-event/8000\r\n");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, kUssdSdp, &dword_1C51D1000);
}

void IBISipLogger::IBISipLogger(IBISipLogger *this, IMSCallManager *a2, BambiClient *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.sip.logger");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *(void *)this = &unk_1F20B8E70;
  *((void *)this + 13) = &unk_1F20B8FB8;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = &unk_1F20B8FE8;
  *((unsigned char *)this + 144) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((_WORD *)this + 96) = 257;
  *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 22) = a3;
  *((void *)this + 23) = a2;
}

void sub_1C524F430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IBISipLogger::~IBISipLogger(IBISipLogger *this)
{
  *(void *)this = &unk_1F20B8E70;
  *((void *)this + 13) = &unk_1F20B8FB8;
  *((void *)this + 17) = &unk_1F20B8FE8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 19);
  if (v3) {
    dispatch_release(v3);
  }
  *((void *)this + 13) = &unk_1F20B9188;
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  IBISipLogger::~IBISipLogger(this);
  JUMPOUT(0x1C878E320);
}

uint64_t IBISipLogger::start(IBISipLogger *this, char a2)
{
  *((unsigned char *)this + 193) = a2;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
    (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v6);
    uint64_t v7 = *(void **)(v6 + 8);
    uint64_t v8 = "No Baseband for architecture: skip start";
    uint64_t v9 = 40;
LABEL_8:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    return 0;
  }
  uint64_t v3 = *(void *)this;
  if (!*((unsigned char *)this + 192))
  {
    uint64_t v6 = (*(uint64_t (**)(IBISipLogger *))(v3 + 64))(this);
    (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v6);
    uint64_t v7 = *(void **)(v6 + 8);
    uint64_t v8 = "Baseband is currently not available: skip start";
    uint64_t v9 = 47;
    goto LABEL_8;
  }
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 80);
  return v4();
}

uint64_t non-virtual thunk to'IBISipLogger::start(IBISipLogger *this, char a2)
{
  return IBISipLogger::start((IBISipLogger *)((char *)this - 104), a2);
}

uint64_t IBISipLogger::start(IBISipLogger *this)
{
  if (!*((unsigned char *)this + 144))
  {
    uint64_t v2 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
    (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"initializing IBISipLogger", 25);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    if (!*((void *)this + 19))
    {
      dispatch_queue_t v3 = dispatch_queue_create("IBISipLogger", 0);
      uint64_t v4 = *((void *)this + 19);
      *((void *)this + 19) = v3;
      if (v4) {
        dispatch_release(v4);
      }
    }
    uint64_t v16 = 0;
    int v17 = 0;
    std::string::basic_string[abi:ne180100]<0>(v14, "IBISipLogger");
    ctu::LogServer::create();
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (v16)
    {
      uint64_t v5 = (std::__shared_weak_count *)operator new(0x30uLL);
      v5->__shared_owners_ = 0;
      v5->__shared_weak_owners_ = 0;
      v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B91B8;
      v5[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C9B38;
      v5[1].__shared_owners_ = (uint64_t)&unk_1F20C9B88;
      v5[1].__shared_weak_owners_ = (uint64_t)this;
      uint64_t v13 = v5;
      ctu::LogServer::addWriter();
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    uint64_t v6 = *((void *)this + 19);
    dispatch_object_t object = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "IBISipLogger");
    uint64_t v10 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ice::Client::create();
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 21);
    *((_OWORD *)this + SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = v12;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (object) {
      dispatch_release(object);
    }
    uint64_t v8 = *((void *)this + 20);
    v14[0] = &__block_literal_global_0;
    ice::Client::setEventHandler<void({block_pointer})(void)>(v8, 0, (uint64_t *)v14);
    ice::Client::start(*((ice::Client **)this + 20));
    *((unsigned char *)this + 144) = 1;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  return 1;
}

void sub_1C524F9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  long long v19 = *(std::__shared_weak_count **)(v17 - 24);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C524FA18()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1C524FA10);
}

void ice::Client::setEventHandler<void({block_pointer})(void)>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  aBlocuint64_t k = 0;
  ice::detail::wrapEventCallback<void>(*a3, &aBlock);
  dispatch_queue_t v3 = aBlock;
  if (aBlock) {
    dispatch_queue_t v3 = _Block_copy(aBlock);
  }
  uint64_t v4 = v3;
  ice::Client::regEventHandlerInternal();
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1C524FAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a10) {
    _Block_release(a10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN12IBISipLogger5startEv_block_invoke()
{
  std::string::basic_string[abi:ne180100]<0>(v3, "ibiclient");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v0 = ims::debug((uint64_t)v3, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v0 + 8), (uint64_t)"IBISipLogger ICE client started", 31);
  *(unsigned char *)(v0 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v0 + 64))(v0, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v0 + 17) = 0;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_1C524FBA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'IBISipLogger::start(IBISipLogger *this)
{
  return 1;
}

void IBISipLogger::stop(IBISipLogger *this)
{
  if (*((unsigned char *)this + 144))
  {
    *((unsigned char *)this + 144) = 0;
    *((unsigned char *)this + 193) = 0;
    uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 21);
    *((void *)this + 20) = 0;
    *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    if (v1) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    }
  }
}

void non-virtual thunk to'IBISipLogger::stop(IBISipLogger *this)
{
}

uint64_t IBISipLogger::eventIdForSipResponse(IBISipLogger *this, const SipResponse *a2)
{
  int v2 = (int)a2;
  int v4 = *((_DWORD *)this + 22);
  uint64_t v5 = SipMessage::header<SipCSeqHeader>((uint64_t)this);
  if (v5) {
    int v6 = v5[15];
  }
  else {
    int v6 = 0;
  }
  memset(&__s1, 0, sizeof(__s1));
  uint64_t v7 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)this);
  uint64_t v8 = (long long *)(v7 + 64);
  if (!v7) {
    uint64_t v8 = &ims::kEmptyString;
  }
  if (*((char *)v8 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else {
    std::string __s1 = *(std::string *)v8;
  }
  unsigned int v9 = *((_DWORD *)this + 22);
  if (v9 - 100 <= 0x63)
  {
    if (v4 == 180) {
      uint64_t v10 = 9;
    }
    else {
      uint64_t v10 = 0;
    }
    goto LABEL_60;
  }
  if (v9 - 200 <= 0x63)
  {
    uint64_t v11 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __s1.__r_.__value_.__l.__size_;
    }
    if (size == 6)
    {
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
        {
          p_s1 = &__s1;
          uint64_t v14 = "INVITE";
          while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v14)
          {
            p_s1 = (std::string *)((char *)p_s1 + 1);
            ++v14;
            if (!--v11) {
              goto LABEL_37;
            }
          }
          goto LABEL_59;
        }
LABEL_37:
        if (v2) {
          unsigned int v19 = 13;
        }
        else {
          unsigned int v19 = 12;
        }
        if (v6 == 1) {
          uint64_t v10 = v19;
        }
        else {
          uint64_t v10 = 19;
        }
        goto LABEL_60;
      }
      if (!memcmp(__s1.__r_.__value_.__l.__data_, "INVITE", __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_37;
      }
    }
    goto LABEL_59;
  }
  if (v9 < 0x12C) {
    goto LABEL_59;
  }
  uint64_t v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = __s1.__r_.__value_.__l.__size_;
  }
  if (v16 == 5)
  {
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__s1.__r_.__value_.__l.__data_, "PRACK", __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_59;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      long long v20 = &__s1;
      char v21 = "PRACK";
      uint64_t v10 = 38;
      while (v20->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v21)
      {
        long long v20 = (std::string *)((char *)v20 + 1);
        ++v21;
        if (!--v15) {
          goto LABEL_60;
        }
      }
      goto LABEL_59;
    }
    uint64_t v10 = 38;
    goto LABEL_60;
  }
  if (v16 != 6)
  {
LABEL_59:
    uint64_t v10 = 0;
    goto LABEL_60;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__s1.__r_.__value_.__l.__data_, "INVITE", __s1.__r_.__value_.__l.__size_)) {
      goto LABEL_59;
    }
  }
  else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
    uint64_t v17 = &__s1;
    long long v18 = "INVITE";
    while (v17->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v18)
    {
      uint64_t v17 = (std::string *)((char *)v17 + 1);
      ++v18;
      if (!--v15) {
        goto LABEL_50;
      }
    }
    goto LABEL_59;
  }
LABEL_50:
  if (v4 == 487) {
    unsigned int v22 = 0;
  }
  else {
    unsigned int v22 = 22;
  }
  if (v4 == 408) {
    unsigned int v22 = 23;
  }
  if (v6 == 1) {
    uint64_t v10 = v22;
  }
  else {
    uint64_t v10 = 25;
  }
LABEL_60:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return v10;
}

uint64_t IBISipLogger::eventIdForSipRequest(uint64_t a1, SipReferEventPackage *a2, int a3)
{
  int v6 = (unsigned __int8 *)(*(uint64_t (**)(SipReferEventPackage *))(*(void *)a2 + 112))(a2);
  uint64_t v7 = v6[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v6[23];
  }
  else {
    uint64_t v8 = *((void *)v6 + 1);
  }
  if (v8 != 6) {
    goto LABEL_12;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v6, "INVITE", *((void *)v6 + 1))) {
      goto LABEL_12;
    }
LABEL_22:
    uint64_t result = (uint64_t)SipMessage::header<SipCSeqHeader>((uint64_t)a2);
    if (result)
    {
      if (a3) {
        unsigned int v15 = 6;
      }
      else {
        unsigned int v15 = 5;
      }
      if (*(_DWORD *)(result + 60) == 1) {
        return v15;
      }
      else {
        return 0;
      }
    }
    return result;
  }
  if (!v6[23]) {
    goto LABEL_22;
  }
  unsigned int v9 = "INVITE";
  while (*v6 == *(unsigned __int8 *)v9)
  {
    ++v6;
    ++v9;
    if (!--v7) {
      goto LABEL_22;
    }
  }
LABEL_12:
  uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(SipReferEventPackage *))(*(void *)a2 + 112))(a2);
  uint64_t v11 = v10[23];
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = v10[23];
  }
  else {
    uint64_t v12 = *((void *)v10 + 1);
  }
  if (v12 != 6) {
    goto LABEL_30;
  }
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v10, "UPDATE", *((void *)v10 + 1))) {
      goto LABEL_30;
    }
LABEL_40:
    BOOL v20 = a3 == 0;
    unsigned int v21 = 27;
    goto LABEL_54;
  }
  if (!v10[23]) {
    goto LABEL_40;
  }
  uint64_t v13 = "UPDATE";
  while (*v10 == *(unsigned __int8 *)v13)
  {
    ++v10;
    ++v13;
    if (!--v11) {
      goto LABEL_40;
    }
  }
LABEL_30:
  std::string::size_type v16 = (unsigned __int8 *)(*(uint64_t (**)(SipReferEventPackage *))(*(void *)a2 + 112))(a2);
  uint64_t v17 = v16[23];
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = v16[23];
  }
  else {
    uint64_t v18 = *((void *)v16 + 1);
  }
  if (v18 == 5)
  {
    if ((v17 & 0x80) == 0)
    {
      if (v16[23])
      {
        unsigned int v19 = "PRACK";
        while (*v16 == *(unsigned __int8 *)v19)
        {
          ++v16;
          ++v19;
          if (!--v17) {
            goto LABEL_53;
          }
        }
        goto LABEL_42;
      }
      goto LABEL_53;
    }
    if (!memcmp(*(const void **)v16, "PRACK", *((void *)v16 + 1)))
    {
LABEL_53:
      BOOL v20 = a3 == 0;
      unsigned int v21 = 31;
LABEL_54:
      if (v20) {
        return 0;
      }
      else {
        return v21;
      }
    }
  }
LABEL_42:
  unsigned int v22 = (unsigned __int8 *)(*(uint64_t (**)(SipReferEventPackage *))(*(void *)a2 + 112))(a2);
  uint64_t v23 = v22[23];
  if ((v23 & 0x80u) == 0) {
    uint64_t v24 = v22[23];
  }
  else {
    uint64_t v24 = *((void *)v22 + 1);
  }
  if (v24 != 6) {
    return 0;
  }
  if ((v23 & 0x80) == 0)
  {
    if (v22[23])
    {
      uint64_t v25 = "NOTIFY";
      while (*v22 == *(unsigned __int8 *)v25)
      {
        ++v22;
        ++v25;
        if (!--v23) {
          goto LABEL_51;
        }
      }
      return 0;
    }
LABEL_51:
    if (!a3) {
      return 0;
    }
LABEL_59:
    uint64_t v27 = (unsigned __int8 *)SipMessage::header<SipEventHeader>((uint64_t)a2);
    if (!v27) {
      return 0;
    }
    uint64_t v28 = v27[127];
    uint64_t v29 = (SipMessageEncodingMap *)*((void *)v27 + 14);
    uint64_t v30 = (v28 & 0x80u) == 0 ? v27[127] : *((void *)v27 + 14);
    if (v30 != 5) {
      return 0;
    }
    int8x8_t v31 = (const void **)(v27 + 104);
    if ((v28 & 0x80) != 0)
    {
      if (memcmp(*v31, "refer", (size_t)v29)) {
        return 0;
      }
    }
    else if (v27[127])
    {
      long long v32 = "refer";
      while (*(unsigned __int8 *)v31 == *(unsigned __int8 *)v32)
      {
        int8x8_t v31 = (const void **)((char *)v31 + 1);
        ++v32;
        if (!--v28) {
          goto LABEL_71;
        }
      }
      return 0;
    }
LABEL_71:
    if (SipReferEventPackage::decodeSipFragmentResponseCodeFromNotify(a2, (const SipRequest *)(*(void *)(*(void *)a1 + 144) + 288), v29) == 200)return 42; {
    return 0;
    }
  }
  int v26 = memcmp(*(const void **)v22, "NOTIFY", *((void *)v22 + 1));
  uint64_t result = 0;
  if (!v26 && (a3 & 1) != 0) {
    goto LABEL_59;
  }
  return result;
}

void *SipMessage::header<SipEventHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "Event");
  if (!v1) {
    return 0;
  }
  int v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

uint64_t IBISipLogger::logAriRequest(IBISipLogger *this, AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *a2)
{
  uint64_t v4 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"-------------------------------------------------------------------------", 73);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v5 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"event id: ", 10);
  *(unsigned char *)(v5 + 17) = 0;
  switch(**((_DWORD **)a2 + 18))
  {
    case 0x13:
      int v6 = "IBI_SIP_EVENT_REINVITE_EST";
      break;
    case 0x14:
    case 0x15:
    case 0x18:
    case 0x1A:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x21:
    case 0x22:
    case 0x24:
    case 0x25:
    case 0x27:
    case 0x28:
    case 0x29:
LABEL_14:
      int v6 = "unknown";
      break;
    case 0x16:
      int v6 = "IBI_SIP_EVENT_SESSION_FAILURE";
      break;
    case 0x17:
      int v6 = "IBI_SIP_EVENT_SESSION_FAILIRE_TIMEOUT";
      break;
    case 0x19:
      int v6 = "IBI_SIP_EVENT_REINVITE_FAILIRE";
      break;
    case 0x1B:
      int v6 = "IBI_SIP_EVENT_INCOMING_UPDATE";
      break;
    case 0x1F:
      int v6 = "IBI_SIP_EVENT_PRACK";
      break;
    case 0x20:
      int v6 = "IBI_SIP_EVENT_INCOMING_SESSION_REFER";
      break;
    case 0x23:
      int v6 = "IBI_SIP_EVENT_FINAL_REFER";
      break;
    case 0x26:
      int v6 = "IBI_SIP_EVENT_PRACK_FAILURE";
      break;
    case 0x2A:
      int v6 = "IBI_SIP_EVENT_REFER_NOTIFY_OK";
      break;
    default:
      int v6 = "IBI_SIP_EVENT_NA";
      switch(**((_DWORD **)a2 + 18))
      {
        case 0x13:
          goto LABEL_19;
        case 0x18:
          int v6 = "IBI_SIP_EVENT_OUTGOING_SESSION";
          break;
        case 0x19:
          int v6 = "IBI_SIP_EVENT_INCOMING_SESSION";
          break;
        case 0x1C:
          int v6 = "IBI_SIP_EVENT_RINGING";
          break;
        case 0x1F:
          int v6 = "IBI_SIP_EVENT_INCOMING_SESSION_EST";
          break;
        case 0x20:
          int v6 = "IBI_SIP_EVENT_OUTGOING_SESSION_EST";
          break;
        default:
          goto LABEL_14;
      }
      break;
  }
LABEL_19:
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"direction: ", 11);
  *(unsigned char *)(v7 + 17) = 0;
  if (**((_DWORD **)a2 + 9) == 1) {
    uint64_t v8 = "incoming";
  }
  else {
    uint64_t v8 = "outgoing";
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)v8, 8);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v9 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"sdp present: ", 13);
  *(unsigned char *)(v9 + 17) = 0;
  int v10 = **((_DWORD **)a2 + 10);
  if (v10) {
    uint64_t v11 = "true";
  }
  else {
    uint64_t v11 = "false";
  }
  if (v10) {
    uint64_t v12 = 4;
  }
  else {
    uint64_t v12 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)v11, v12);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  uint64_t v13 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"message id: ", 12);
  *(unsigned char *)(v13 + 17) = 0;
  uint64_t v14 = **((int **)a2 + 11);
  if (v14 > 0xE) {
    unsigned int v15 = "unknown";
  }
  else {
    unsigned int v15 = off_1E650F458[v14];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v15);
  (*(void (**)(uint64_t, void **))(*(void *)v13 + 32))(v13, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"response code: ", 15);
  *(unsigned char *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  uint64_t v17 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"SIP call id: ", 13);
  *(unsigned char *)(v17 + 17) = 0;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(__p, *((char **)a2 + 15), *((char **)a2 + 16), *((void *)a2 + 16) - *((void *)a2 + 15));
  (*(void (**)(uint64_t, void **))(*(void *)v17 + 32))(v17, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v18 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"app call id: ", 13);
  *(unsigned char *)(v18 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v18 + 17) = 0;
  uint64_t v19 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"call type: ", 11);
  *(unsigned char *)(v19 + 17) = 0;
  uint64_t v20 = **((int **)a2 + 19);
  if (v20 > 7) {
    unsigned int v21 = "unknown";
  }
  else {
    unsigned int v21 = off_1E650F4D0[v20];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v21);
  (*(void (**)(uint64_t, void **))(*(void *)v19 + 32))(v19, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v22 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"-------------------------------------------------------------------------", 73);
  *(unsigned char *)(v22 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v22 + 17) = 0;
  return result;
}

void sub_1C5250C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IBISipLogger::logSipRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK((AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *)v12);
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK::ARI_IBISipMessageInjectToCpTrace_SDK((AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK *)v10);
  uint64_t v7 = *a2;
  int v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
    int v8 = *(_DWORD *)(v7 + 4100);
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    int v8 = 0;
    if (!v6)
    {
LABEL_6:
      int v9 = v8;
      fillCommonFields<AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK>(*(void *)(a1 + 184), *(void *)(a1 + 176), a3);
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  goto LABEL_6;
}

void sub_1C5250FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void fillCommonFields<AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v23 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v22, "ibi");
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  uint64_t v5 = ims::debug((uint64_t)&v22, (uint64_t)&v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"logging ", 8);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a3 + 48))(&__p, a3);
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v20 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  int v6 = (char *)SipMessage::header<SipCallIdHeader>(a3);
  if (v6) {
    uint64_t v7 = (unsigned __int8 *)(v6 + 64);
  }
  else {
    uint64_t v7 = (unsigned __int8 *)&ims::kEmptyString;
  }
  uint64_t v8 = IMSCallManager::callInfoForSipCallId(a1, v7);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 136);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    char v23 = *(unsigned char *)(v8 + 40);
    goto LABEL_36;
  }
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = 0uLL;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 216))(&v22, a1);
  std::string::size_type v10 = v22.__r_.__value_.__r.__words[0];
  if (v22.__r_.__value_.__r.__words[0])
  {
    uint64_t v11 = (char *)SipMessage::header<SipCallIdHeader>(a3);
    if (v11) {
      uint64_t v12 = (long long *)(v11 + 64);
    }
    else {
      uint64_t v12 = &ims::kEmptyString;
    }
    uint64_t v13 = *(unsigned __int8 *)(v10 + 495);
    if ((v13 & 0x80u) == 0) {
      uint64_t v14 = *(unsigned __int8 *)(v10 + 495);
    }
    else {
      uint64_t v14 = *(void *)(v10 + 480);
    }
    uint64_t v15 = *((unsigned __int8 *)v12 + 23);
    int v16 = (char)v15;
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *((void *)v12 + 1);
    }
    if (v14 == v15)
    {
      uint64_t v17 = (const void **)(v10 + 472);
      if (v16 >= 0) {
        uint64_t v18 = v12;
      }
      else {
        uint64_t v18 = *(long long **)v12;
      }
      if ((v13 & 0x80) == 0)
      {
        if (*(unsigned char *)(v10 + 495))
        {
          while (*(unsigned __int8 *)v17 == *(unsigned __int8 *)v18)
          {
            uint64_t v17 = (const void **)((char *)v17 + 1);
            uint64_t v18 = (long long *)((char *)v18 + 1);
            if (!--v13) {
              goto LABEL_37;
            }
          }
          goto LABEL_34;
        }
        goto LABEL_37;
      }
      if (!memcmp(*v17, v18, *(void *)(v10 + 480)))
      {
LABEL_37:
        if (v22.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v22.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
      }
    }
  }
LABEL_34:
  if (v22.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v22.__r_.__value_.__l.__size_);
  }
LABEL_36:
  LODWORD(v22.__r_.__value_.__l.__data_) = 1;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
}

void sub_1C525181C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  if (a32 < 0)
  {
    operator delete(__p);
    if (v35) {
      goto LABEL_5;
    }
  }
  else if (v35)
  {
LABEL_5:
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    if (!v32) {
      goto LABEL_10;
    }
LABEL_9:
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
LABEL_10:
    _Unwind_Resume(a1);
  }
  if (!v32) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void fillCommonFields<AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v23 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v22, "ibi");
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  uint64_t v5 = ims::debug((uint64_t)&v22, (uint64_t)&v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"logging ", 8);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a3 + 48))(&__p, a3);
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v20 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  int v6 = (char *)SipMessage::header<SipCallIdHeader>(a3);
  if (v6) {
    uint64_t v7 = (unsigned __int8 *)(v6 + 64);
  }
  else {
    uint64_t v7 = (unsigned __int8 *)&ims::kEmptyString;
  }
  uint64_t v8 = IMSCallManager::callInfoForSipCallId(a1, v7);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 136);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    char v23 = *(unsigned char *)(v8 + 40);
    goto LABEL_36;
  }
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = 0uLL;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 216))(&v22, a1);
  std::string::size_type v10 = v22.__r_.__value_.__r.__words[0];
  if (v22.__r_.__value_.__r.__words[0])
  {
    uint64_t v11 = (char *)SipMessage::header<SipCallIdHeader>(a3);
    if (v11) {
      uint64_t v12 = (long long *)(v11 + 64);
    }
    else {
      uint64_t v12 = &ims::kEmptyString;
    }
    uint64_t v13 = *(unsigned __int8 *)(v10 + 495);
    if ((v13 & 0x80u) == 0) {
      uint64_t v14 = *(unsigned __int8 *)(v10 + 495);
    }
    else {
      uint64_t v14 = *(void *)(v10 + 480);
    }
    uint64_t v15 = *((unsigned __int8 *)v12 + 23);
    int v16 = (char)v15;
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *((void *)v12 + 1);
    }
    if (v14 == v15)
    {
      uint64_t v17 = (const void **)(v10 + 472);
      if (v16 >= 0) {
        uint64_t v18 = v12;
      }
      else {
        uint64_t v18 = *(long long **)v12;
      }
      if ((v13 & 0x80) == 0)
      {
        if (*(unsigned char *)(v10 + 495))
        {
          while (*(unsigned __int8 *)v17 == *(unsigned __int8 *)v18)
          {
            uint64_t v17 = (const void **)((char *)v17 + 1);
            uint64_t v18 = (long long *)((char *)v18 + 1);
            if (!--v13) {
              goto LABEL_37;
            }
          }
          goto LABEL_34;
        }
        goto LABEL_37;
      }
      if (!memcmp(*v17, v18, *(void *)(v10 + 480)))
      {
LABEL_37:
        if (v22.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v22.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
      }
    }
  }
LABEL_34:
  if (v22.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v22.__r_.__value_.__l.__size_);
  }
LABEL_36:
  LODWORD(v22.__r_.__value_.__l.__data_) = 1;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
}

void sub_1C52521A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  if (a32 < 0)
  {
    operator delete(__p);
    if (v35) {
      goto LABEL_5;
    }
  }
  else if (v35)
  {
LABEL_5:
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    if (!v32) {
      goto LABEL_10;
    }
LABEL_9:
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
LABEL_10:
    _Unwind_Resume(a1);
  }
  if (!v32) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>()
{
}

double IBISipLogger::send<AriSdk::ARI_AriACK_SDK,AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK>(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = *((void *)a2 + 20);
  if (v5 && a2[192])
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    void v9[2] = ___ZN12IBISipLogger4sendIN6AriSdk14ARI_AriACK_SDKENS1_38ARI_IBISipMsgInjectToCpIMSTraceReq_SDKEEE9ImsResultRT0__block_invoke;
    _OWORD v9[3] = &__block_descriptor_tmp_153;
    v9[4] = a2;
    uint64_t v15 = 0;
    ice::detail::wrapCallback<void>((uint64_t)v9, &v15);
    LODWORD(v13) = 0;
    if (!*(void *)(a3 + 64)) {
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
    }
    memset(v10, 0, sizeof(v10));
    uint64_t v11 = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v13, (void *)(v5 + 8));
    ice::SendMsgBaseProxy::SendMsgBaseProxy();
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    uint64_t v12 = v15;
    uint64_t v15 = 0;
    ice::SendMsgBaseProxy::callback();
    if (v12) {
      _Block_release(v12);
    }
    if (v15) {
      _Block_release(v15);
    }
    MEMORY[0x1C878D520](v10);
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(unsigned char *))(*(void *)a2 + 64))(a2);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)a2 + 16))(a2, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: skip send", 78);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void sub_1C525259C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  uint64_t v9 = *(const void **)(v7 - 64);
  if (v9) {
    _Block_release(v9);
  }
  MEMORY[0x1C878D520](va);
  std::string::size_type v10 = *(const void **)(v7 - 40);
  if (v10) {
    _Block_release(v10);
  }
  _Unwind_Resume(a1);
}

double IBISipLogger::send<AriSdk::ARI_AriACK_SDK,AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK>(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = *((void *)a2 + 20);
  if (v4 && a2[192])
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 0x40000000;
    uint64_t v7[2] = ___ZN12IBISipLogger4sendIN6AriSdk14ARI_AriACK_SDKENS1_36ARI_IBISipMessageInjectToCpTrace_SDKEEE9ImsResultRT0__block_invoke;
    v7[3] = &__block_descriptor_tmp_157;
    void v7[4] = a2;
    uint64_t v13 = 0;
    ice::detail::wrapCallback<void>((uint64_t)v7, &v13);
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v11, (void *)(v4 + 8));
    ice::SendMsgBaseProxy::SendMsgBaseProxy();
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    std::string::size_type v10 = v13;
    uint64_t v13 = 0;
    ice::SendMsgBaseProxy::callback();
    if (v10) {
      _Block_release(v10);
    }
    if (v13) {
      _Block_release(v13);
    }
    MEMORY[0x1C878D520](v8);
  }
  else
  {
    uint64_t v5 = (*(uint64_t (**)(unsigned char *))(*(void *)a2 + 64))(a2);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)a2 + 16))(a2, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: skip send", 78);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void sub_1C52527E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  uint64_t v9 = *(const void **)(v7 - 64);
  if (v9) {
    _Block_release(v9);
  }
  MEMORY[0x1C878D520](va);
  std::string::size_type v10 = *(const void **)(v7 - 40);
  if (v10) {
    _Block_release(v10);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IBISipLogger::logSipRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void IBISipLogger::logSipResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK((AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *)v12);
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK::ARI_IBISipMessageInjectToCpTrace_SDK((AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK *)v10);
  uint64_t v7 = *a2;
  int v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
    int v8 = *(_DWORD *)(v7 + 4100);
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    int v8 = 0;
    if (!v6)
    {
LABEL_6:
      int v9 = v8;
      fillCommonFields<AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK>(*(void *)(a1 + 184), *(void *)(a1 + 176), a3);
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  goto LABEL_6;
}

void sub_1C5252AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  MEMORY[0x1C878DA50](&a29);
  MEMORY[0x1C878DAC0](v29 - 256);
  _Unwind_Resume(a1);
}

void AriSdk::Tlv<unsigned short>::operator=<unsigned int,void>()
{
}

void non-virtual thunk to'IBISipLogger::logSipResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void IBISipLogger::sendSessionStarted(uint64_t a1, uint64_t *a2, int a3)
{
  char v13 = a3;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"telling baseband ", 17);
  *(unsigned char *)(v6 + 17) = 0;
  if (a3) {
    uint64_t v7 = "emergency ";
  }
  else {
    uint64_t v7 = "";
  }
  if (a3) {
    uint64_t v8 = 10;
  }
  else {
    uint64_t v8 = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"session started", 15);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  memset(v12, 0, sizeof(v12));
  AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *)v12);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  if (v9) {
    LODWORD(v9) = *(_DWORD *)(v9 + 4100);
  }
  int v11 = v9;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
}

void sub_1C5252D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  MEMORY[0x1C878DC80](va);
  _Unwind_Resume(a1);
}

void AriSdk::Tlv<int>::operator=<BOOL &,void>()
{
}

double IBISipLogger::send<AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK,AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK>(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = *((void *)a2 + 20);
  if (v5 && a2[192])
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    void v9[2] = ___ZN12IBISipLogger4sendIN6AriSdk54ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDKENS1_52ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDKEEE9ImsResultRT0__block_invoke;
    _OWORD v9[3] = &__block_descriptor_tmp_158;
    v9[4] = a2;
    uint64_t v15 = 0;
    ice::detail::wrapCallback<void>((uint64_t)v9, &v15);
    LODWORD(v13) = 0;
    if (!*(void *)(a3 + 64)) {
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
    }
    memset(v10, 0, sizeof(v10));
    uint64_t v11 = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v13, (void *)(v5 + 8));
    ice::SendMsgBaseProxy::SendMsgBaseProxy();
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    uint64_t v12 = v15;
    uint64_t v15 = 0;
    ice::SendMsgBaseProxy::callback();
    if (v12) {
      _Block_release(v12);
    }
    if (v15) {
      _Block_release(v15);
    }
    MEMORY[0x1C878D520](v10);
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(unsigned char *))(*(void *)a2 + 64))(a2);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)a2 + 16))(a2, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: skip send", 78);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void sub_1C5252FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  uint64_t v9 = *(const void **)(v7 - 64);
  if (v9) {
    _Block_release(v9);
  }
  MEMORY[0x1C878D520](va);
  uint64_t v10 = *(const void **)(v7 - 40);
  if (v10) {
    _Block_release(v10);
  }
  _Unwind_Resume(a1);
}

void IBISipLogger::sendSessionEnded(uint64_t a1, uint64_t *a2, int a3)
{
  char v13 = a3;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"telling baseband ", 17);
  *(unsigned char *)(v6 + 17) = 0;
  if (a3) {
    uint64_t v7 = "emergency ";
  }
  else {
    uint64_t v7 = "";
  }
  if (a3) {
    uint64_t v8 = 10;
  }
  else {
    uint64_t v8 = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"session ended", 13);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  memset(v12, 0, sizeof(v12));
  AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *)v12);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  if (v9) {
    LODWORD(v9) = *(_DWORD *)(v9 + 4100);
  }
  int v11 = v9;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
}

void sub_1C5253214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  MEMORY[0x1C878DC80](va);
  _Unwind_Resume(a1);
}

void IBISipLogger::sendSessionDropped(uint64_t a1, uint64_t *a2, int a3)
{
  char v13 = a3;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"telling baseband ", 17);
  *(unsigned char *)(v6 + 17) = 0;
  if (a3) {
    uint64_t v7 = "emergency ";
  }
  else {
    uint64_t v7 = "";
  }
  if (a3) {
    uint64_t v8 = 10;
  }
  else {
    uint64_t v8 = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"session dropped", 15);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  memset(v12, 0, sizeof(v12));
  AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *)v12);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  if (v9) {
    LODWORD(v9) = *(_DWORD *)(v9 + 4100);
  }
  int v11 = v9;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
}

void sub_1C5253418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  MEMORY[0x1C878DC80](va);
  _Unwind_Resume(a1);
}

void IBISipLogger::logEarlyMTSessionRequestedEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(std::__shared_weak_count **)(*a2 + 368);
  if (!v5 || (uint64_t v6 = std::__shared_weak_count::lock(v5)) == 0)
  {
    if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)0xC58)) {
      return;
    }
LABEL_6:
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"telling baseband about incoming session attempt", 47);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    memset(v14, 0, sizeof(v14));
    AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *)v14);
    uint64_t v10 = *a2;
    int v11 = *(std::__shared_weak_count **)(*a2 + 368);
    if (v11 && std::__shared_weak_count::lock(v11))
    {
      uint64_t v12 = *(void *)(v10 + 360);
      if (v12) {
        LODWORD(v12) = *(_DWORD *)(v12 + 4100);
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
    int v13 = v12;
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
  }
  uint64_t v7 = v6;
  BOOL isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(*(void *)(v4 + 360) + 3160));
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  if (!isWifi) {
    goto LABEL_6;
  }
}

void sub_1C5253630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  MEMORY[0x1C878DC80](va);
  _Unwind_Resume(a1);
}

void sub_1C5253650()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x1C5253640);
}

void non-virtual thunk to'IBISipLogger::logEarlyMTSessionRequestedEvent(uint64_t a1, uint64_t *a2)
{
}

void IBISipLogger::logSessionRequestedEvent(void *a1, uint64_t *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = *(std::__shared_weak_count **)(*a2 + 368);
    if (v7 && (uint64_t v8 = std::__shared_weak_count::lock(v7)) != 0)
    {
      uint64_t v9 = v8;
      BOOL isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(*(void *)(v6 + 360) + 3160));
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      if (isWifi) {
        return;
      }
    }
    else if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)0xC58))
    {
      return;
    }
    uint64_t v11 = a1[22];
    v19[0] = 0uLL;
    if ((unint64_t)BambiClient::callCountExcludingCall(v11, v19) < 2)
    {
      uint64_t v14 = *(void *)(*a2 + 520);
      BOOL v20 = v14 != 0;
      if (v14) {
        uint64_t v15 = "emergency ";
      }
      else {
        uint64_t v15 = "";
      }
      if (v14) {
        uint64_t v16 = 10;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
      (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"telling baseband about ", 23);
      *(unsigned char *)(v17 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)v15, v16);
      *(unsigned char *)(v17 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"session attempt", 15);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
      memset(v19, 0, sizeof(v19));
      AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *)v19);
      uint64_t v18 = *(std::__shared_weak_count **)(*a2 + 368);
      if (v18) {
        std::__shared_weak_count::lock(v18);
      }
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
    }
    uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"call count = ", 13);
    *(unsigned char *)(v12 + 17) = 0;
    uint64_t v13 = a1[22];
    v19[0] = 0uLL;
    BambiClient::callCountExcludingCall(v13, v19);
    std::ostream::operator<<();
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)". We already told baseband we're in a call.", 43);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
  }
}

void sub_1C52539B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  MEMORY[0x1C878DC80](va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IBISipLogger::logSessionRequestedEvent(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
}

uint64_t IBISipLogger::logSessionConfirmedEvent(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[22];
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (BambiClient::callCountExcludingCall(v4, &v17) == 1)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = *(std::__shared_weak_count **)(*a2 + 368);
    if (v6 && (uint64_t v7 = std::__shared_weak_count::lock(v6)) != 0)
    {
      uint64_t v8 = v7;
      BOOL isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(*(void *)(v5 + 360) + 3160));
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      if (!isWifi) {
        goto LABEL_5;
      }
    }
    else if (!ims::AccessNetwork::isWifi((ims::AccessNetwork *)0xC58))
    {
LABEL_5:
      uint64_t v10 = *a2;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v11 = *(std::__shared_weak_count **)(v10 + 368);
      if (v11)
      {
        uint64_t v16 = std::__shared_weak_count::lock(v11);
        if (v16) {
          uint64_t v15 = *(void *)(v10 + 360);
        }
      }
      IBISipLogger::sendSessionStarted((uint64_t)a1, &v15, *(void *)(*a2 + 520) != 0);
    }
  }
  uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"call count = ", 13);
  *(unsigned char *)(v12 + 17) = 0;
  uint64_t v13 = a1[22];
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  BambiClient::callCountExcludingCall(v13, &v17);
  std::ostream::operator<<();
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)". We already told baseband we're in a call.", 43);
  *(unsigned char *)(v12 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  return result;
}

void sub_1C5253BDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'IBISipLogger::logSessionConfirmedEvent(uint64_t a1, uint64_t *a2)
{
  return IBISipLogger::logSessionConfirmedEvent((void *)(a1 - 136), a2);
}

uint64_t IBISipLogger::logSessionTerminationEvent(IBISipLogger *this, const BambiCallSessionTerminationBaseEvent *a2)
{
  uint64_t v4 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"logSessionTerminationEvent() for ", 33);
  *(unsigned char *)(v4 + 17) = 0;
  int v5 = *((_DWORD *)a2 + 10);
  if (v5 > 37) {
    int v5 = 10;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, reasonStrings + 24 * v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"...", 3);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (!v6)
  {
    uint64_t v8 = 0;
    goto LABEL_12;
  }
  uint64_t v7 = (void *)*((void *)a2 + 2);
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v8 = std::__shared_weak_count::lock(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v8 || !v7)
  {
LABEL_12:
    uint64_t v15 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
    (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"this call is null: no op", 24);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (!v8) {
      return 0;
    }
    goto LABEL_31;
  }
  uint64_t v9 = (std::__shared_weak_count *)v7[46];
  if (!v9)
  {
    uint64_t v11 = 0;
    goto LABEL_15;
  }
  uint64_t v10 = v7[65];
  uint64_t v11 = std::__shared_weak_count::lock(v9);
  if (!v11 || (uint64_t v12 = v7[45]) == 0)
  {
LABEL_15:
    uint64_t v16 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
    (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"this sipStack is null: no op", 28);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    if (!v11) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v13 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"this [sipStack simInstance] = [", 31);
  *(unsigned char *)(v13 + 17) = 0;
  uint64_t v14 = (_OWORD *)(v12 + 4160);
  if (*(char *)(v12 + 4183) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(v12 + 4160), *(void *)(v12 + 4168));
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *v14;
    v23.__r_.__value_.__r.__words[2] = *(void *)(v12 + 4176);
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 32))(v13, &v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" ", 1);
  *(unsigned char *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v12 + 3160)))
  {
    uint64_t v17 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
    (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"this call was on wifi: no op", 28);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    uint64_t v18 = *((void *)this + 22);
    if (*(char *)(v12 + 4183) < 0)
    {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(v12 + 4160), *(void *)(v12 + 4168));
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *v14;
      v23.__r_.__value_.__r.__words[2] = *(void *)(v12 + 4176);
    }
    uint64_t v19 = BambiClient::activeCallCountForStack(v18, v10 != 0, (unsigned __int8 *)&v23);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (!v19)
    {
      if (*((_DWORD *)a2 + 10) == 20)
      {
        v22[0] = v12;
        v22[1] = (uint64_t)v11;
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        IBISipLogger::sendSessionDropped((uint64_t)this, v22, v10 != 0);
      }
      v21[0] = v12;
      v21[1] = (uint64_t)v11;
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      IBISipLogger::sendSessionEnded((uint64_t)this, v21, v10 != 0);
    }
    uint64_t v17 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
    (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"this sipStack still has ", 24);
    *(unsigned char *)(v17 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" other active calls: no op", 26);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v17 + 17) = 0;
LABEL_30:
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_31:
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  return 0;
}

void sub_1C52542E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'IBISipLogger::logSessionTerminationEvent(IBISipLogger *this, const BambiCallSessionTerminationBaseEvent *a2)
{
  return 0;
}

void IBISipLogger::logWiFiHandover(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6 = *a2;
  if (!*a2) {
    goto LABEL_9;
  }
  uint64_t v7 = *(void *)(a1 + 176);
  if (*(char *)(v6 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v6 + 4160), *(void *)(v6 + 4168));
  }
  else {
    std::string v18 = *(std::string *)(v6 + 4160);
  }
  uint64_t v8 = BambiClient::callCountForStack(v7, (unsigned __int8 *)&v18);
  uint64_t v9 = v8;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v18.__r_.__value_.__l.__data_);
    if (!v9) {
      return;
    }
LABEL_9:
    uint64_t v10 = *(void **)(*(void *)(a1 + 176) + 336);
    if (v10)
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)(v10[2] + 520)) {
          ++v11;
        }
        uint64_t v10 = (void *)*v10;
      }
      while (v10);
      BOOL v12 = v11 != 0;
    }
    else
    {
      BOOL v12 = 0;
    }
    uint64_t v13 = *a2;
    if (a3)
    {
      uint64_t v14 = a2[1];
      v17[0] = v13;
      v17[1] = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      IBISipLogger::sendSessionEnded(a1, v17, v12);
    }
    uint64_t v15 = a2[1];
    v16[0] = v13;
    v16[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    IBISipLogger::sendSessionStarted(a1, v16, v12);
  }
  if (v8) {
    goto LABEL_9;
  }
}

void sub_1C52544BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IBISipLogger::logWiFiHandover(uint64_t a1, uint64_t *a2, int a3)
{
}

uint64_t IBISipLogger::logRegistrationError(uint64_t a1, uint64_t *a2, SipRegistrationNotification *a3)
{
  uint64_t result = TelephonyRadiosGetRadioVendor();
  if (result == 2)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"telling baseband about registration error. Throttle for ", 56);
    *(unsigned char *)(v7 + 17) = 0;
    SipRegistrationNotification::secondsUntilNextRetry(a3);
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" seconds", 8);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    memset(v11, 0, sizeof(v11));
    AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK((AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK *)v11);
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    if (v8) {
      LODWORD(v8) = *(_DWORD *)(v8 + 4100);
    }
    int v10 = v8;
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
  }
  return result;
}

void sub_1C525470C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  MEMORY[0x1C878DC30](va);
  _Unwind_Resume(a1);
}

double IBISipLogger::send<AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK,AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK>(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = *((void *)a2 + 20);
  if (v5 && a2[192])
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    void v9[2] = ___ZN12IBISipLogger4sendIN6AriSdk46ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDKENS1_44ARI_IBINetDcImsRegistrationStatusInfoReq_SDKEEE9ImsResultRT0__block_invoke;
    _OWORD v9[3] = &__block_descriptor_tmp_159;
    v9[4] = a2;
    uint64_t v15 = 0;
    ice::detail::wrapCallback<void>((uint64_t)v9, &v15);
    LODWORD(v13) = 0;
    if (!*(void *)(a3 + 64)) {
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
    }
    memset(v10, 0, sizeof(v10));
    uint64_t v11 = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v13, (void *)(v5 + 8));
    ice::SendMsgBaseProxy::SendMsgBaseProxy();
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    BOOL v12 = v15;
    uint64_t v15 = 0;
    ice::SendMsgBaseProxy::callback();
    if (v12) {
      _Block_release(v12);
    }
    if (v15) {
      _Block_release(v15);
    }
    MEMORY[0x1C878D520](v10);
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(unsigned char *))(*(void *)a2 + 64))(a2);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)a2 + 16))(a2, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: skip send", 78);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void sub_1C525495C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  uint64_t v9 = *(const void **)(v7 - 64);
  if (v9) {
    _Block_release(v9);
  }
  MEMORY[0x1C878D520](va);
  int v10 = *(const void **)(v7 - 40);
  if (v10) {
    _Block_release(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'IBISipLogger::logRegistrationError(uint64_t a1, uint64_t *a2, SipRegistrationNotification *a3)
{
  return IBISipLogger::logRegistrationError(a1 - 136, a2, a3);
}

uint64_t IBISipLogger::logRegistrationRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t result = TelephonyRadiosGetRadioVendor();
  if (result == 2)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"telling baseband about registration attempt", 43);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    memset(v9, 0, sizeof(v9));
    AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK((AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK *)v9);
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(v6 + 4100);
    }
    int v8 = v6;
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
  }
  return result;
}

void sub_1C5254B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  MEMORY[0x1C878DC30](va);
  _Unwind_Resume(a1);
}

void sub_1C5254BAC()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x1C5254B9CLL);
}

uint64_t non-virtual thunk to'IBISipLogger::logRegistrationRequest(uint64_t a1, uint64_t *a2)
{
  return IBISipLogger::logRegistrationRequest(a1 - 136, a2);
}

void IBISipLogger::logSmsSendAttemptedEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"telling baseband about sms attempt", 34);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  memset(v8, 0, sizeof(v8));
  AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *)v8);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  if (v5) {
    LODWORD(v5) = *(_DWORD *)(v5 + 4100);
  }
  int v7 = v5;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
}

void sub_1C5254D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  MEMORY[0x1C878DC80](va);
  _Unwind_Resume(a1);
}

void sub_1C5254D74()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x1C5254D64);
}

void non-virtual thunk to'IBISipLogger::logSmsSendAttemptedEvent(uint64_t a1, uint64_t *a2)
{
}

void IBISipLogger::logSmsSendCompletedEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"telling baseband about sms send finish.", 39);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  memset(v8, 0, sizeof(v8));
  AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *)v8);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  if (v5) {
    LODWORD(v5) = *(_DWORD *)(v5 + 4100);
  }
  int v7 = v5;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
}

void sub_1C5254F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  MEMORY[0x1C878DC80](va);
  _Unwind_Resume(a1);
}

void sub_1C5254F40()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x1C5254F30);
}

void non-virtual thunk to'IBISipLogger::logSmsSendCompletedEvent(uint64_t a1, uint64_t *a2)
{
}

uint64_t IBISipLogger::setBasebandAvailable(IBISipLogger *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"setting baseband available as ", 30);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  *((unsigned char *)this + 192) = a2;
  if (a2 && *((unsigned char *)this + 193) && !*((unsigned char *)this + 144))
  {
    uint64_t v6 = (*(uint64_t (**)(IBISipLogger *))(*(void *)this + 64))(this);
    (*(void (**)(IBISipLogger *, uint64_t))(*(void *)this + 16))(this, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Airplane mode changed to disabled, starting client...", 53);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    int v7 = *(uint64_t (**)(IBISipLogger *))(*(void *)this + 80);
    return v7(this);
  }
  return result;
}

uint64_t non-virtual thunk to'IBISipLogger::setBasebandAvailable(IBISipLogger *this, int a2)
{
  return IBISipLogger::setBasebandAvailable((IBISipLogger *)((char *)this - 136), a2);
}

void *IBISipLogger::logPrefix(IBISipLogger *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"IBISipLogger: ", 14);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

std::string *IMSMetricsLogger::setDomain(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void std::__shared_ptr_emplace<ImsLogWriter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B91B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsLogWriter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B91B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<ImsLogWriter>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *ice::detail::wrapEventCallback<void>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke;
  aBlock[3] = &unk_1E650F390;
  aBlock[4] = a1;
  uint64_t result = _Block_copy(aBlock);
  *a2 = result;
  return result;
}

uint64_t ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke(uint64_t a1)
{
  return 0;
}

BOOL isCallRelatedMethod(unsigned __int8 *a1)
{
  uint64_t v1 = a1[23];
  size_t v2 = *((void *)a1 + 1);
  if ((v1 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  if (v3 != 3)
  {
    if (v3 == 5)
    {
      if ((v1 & 0x80) != 0)
      {
        uint64_t v11 = *(const void **)a1;
        BOOL v12 = "PRACK";
        return memcmp(v11, v12, v2) == 0;
      }
      if (!a1[23]) {
        return 1;
      }
      int v7 = "PRACK";
      int v8 = a1;
      uint64_t v9 = a1[23];
      while (*v8 == *(unsigned __int8 *)v7)
      {
        ++v8;
        ++v7;
        if (!--v9) {
          return 1;
        }
      }
    }
    else if (v3 == 6)
    {
      if ((v1 & 0x80) != 0)
      {
        int v10 = *(const void **)a1;
        if (memcmp(*(const void **)a1, "INVITE", v2) && memcmp(v10, "UPDATE", v2))
        {
LABEL_56:
          BOOL v12 = "CANCEL";
          goto LABEL_57;
        }
      }
      else if (a1[23])
      {
        uint64_t v4 = "INVITE";
        uint64_t v5 = a1;
        uint64_t v6 = a1[23];
        while (*v5 == *(unsigned __int8 *)v4)
        {
          ++v5;
          ++v4;
          if (!--v6) {
            return 1;
          }
        }
        uint64_t v13 = "UPDATE";
        uint64_t v14 = a1;
        uint64_t v15 = a1[23];
        while (*v14 == *(unsigned __int8 *)v13)
        {
          ++v14;
          ++v13;
          BOOL v16 = 1;
          if (!--v15) {
            return v16;
          }
        }
        if ((v1 & 0x80) == 0)
        {
          uint64_t v29 = v1 - 1;
          uint64_t v30 = "CANCEL";
          do
          {
            int v32 = *a1++;
            int v31 = v32;
            int v34 = *(unsigned __int8 *)v30++;
            int v33 = v34;
            BOOL v26 = v29-- != 0;
            char v35 = v26;
            BOOL v28 = v31 == v33;
            BOOL v16 = v31 == v33;
          }
          while (v28 && (v35 & 1) != 0);
          return v16;
        }
        int v10 = *(const void **)a1;
        goto LABEL_56;
      }
      return 1;
    }
    return 0;
  }
  if ((v1 & 0x80) != 0)
  {
    int v10 = *(const void **)a1;
    if (memcmp(*(const void **)a1, &SipRequest::kMethodAck, v2))
    {
      BOOL v12 = (const char *)&SipRequest::kMethodBye;
LABEL_57:
      uint64_t v11 = v10;
      return memcmp(v11, v12, v2) == 0;
    }
    return 1;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v17 = &SipRequest::kMethodAck;
  std::string v18 = a1;
  uint64_t v19 = a1[23];
  while (*v18 == *(unsigned __int8 *)v17)
  {
    ++v18;
    uint64_t v17 = (long long *)((char *)v17 + 1);
    if (!--v19) {
      return 1;
    }
  }
  uint64_t v20 = v1 - 1;
  std::string v21 = &SipRequest::kMethodBye;
  do
  {
    int v23 = *a1++;
    int v22 = v23;
    int v25 = *(unsigned __int8 *)v21;
    std::string v21 = (long long *)((char *)v21 + 1);
    int v24 = v25;
    BOOL v26 = v20-- != 0;
    char v27 = v26;
    BOOL v28 = v22 == v24;
    BOOL v16 = v22 == v24;
  }
  while (v28 && (v27 & 1) != 0);
  return v16;
}

uint64_t messageIdForMethod(unsigned __int8 *a1)
{
  uint64_t v2 = a1[23];
  size_t v3 = *((void *)a1 + 1);
  if ((v2 & 0x80u) == 0) {
    uint64_t v4 = a1[23];
  }
  else {
    uint64_t v4 = *((void *)a1 + 1);
  }
  switch(v4)
  {
    case 3:
LABEL_5:
      if ((v2 & 0x80) != 0)
      {
        uint64_t v14 = *(const void **)a1;
        if (memcmp(*(const void **)a1, &SipRequest::kMethodAck, v3))
        {
          if (memcmp(v14, &SipRequest::kMethodBye, v3)) {
            goto LABEL_95;
          }
          return 6;
        }
      }
      else if (v2)
      {
        uint64_t v5 = &SipRequest::kMethodAck;
        uint64_t v6 = a1;
        uint64_t v7 = v2;
        uint64_t result = 5;
        while (*v6 == *(unsigned __int8 *)v5)
        {
          ++v6;
          uint64_t v5 = (long long *)((char *)v5 + 1);
          if (!--v7) {
            return result;
          }
        }
        switch(v4)
        {
          case 3:
            BOOL v16 = &SipRequest::kMethodBye;
            uint64_t v17 = a1;
            uint64_t result = 6;
            break;
          case 5:
            goto LABEL_103;
          case 6:
            goto LABEL_74;
          case 7:
            goto LABEL_87;
          case 9:
            goto LABEL_63;
          default:
            goto LABEL_95;
        }
        do
        {
          if (*v17 != *(unsigned __int8 *)v16) {
            goto LABEL_95;
          }
          ++v17;
          BOOL v16 = (long long *)((char *)v16 + 1);
          --v2;
        }
        while (v2);
        return result;
      }
      return 5;
    case 5:
LABEL_43:
      if ((v2 & 0x80) != 0)
      {
        uint64_t v15 = *(const void **)a1;
        if (memcmp(*(const void **)a1, "PRACK", v3)) {
          goto LABEL_50;
        }
      }
      else if (v2)
      {
        std::string v18 = "PRACK";
        uint64_t v19 = a1;
        uint64_t v20 = v2;
        uint64_t result = 3;
        do
        {
          if (*v19 != *(unsigned __int8 *)v18)
          {
            switch(v4)
            {
              case 3:
                goto LABEL_5;
              case 5:
                goto LABEL_103;
              case 6:
                goto LABEL_54;
              case 7:
                goto LABEL_87;
              case 9:
                goto LABEL_63;
              default:
                goto LABEL_95;
            }
          }
          ++v19;
          ++v18;
          --v20;
        }
        while (v20);
        return result;
      }
      return 3;
    case 6:
      if ((v2 & 0x80) != 0)
      {
        uint64_t v15 = *(const void **)a1;
        if (memcmp(*(const void **)a1, "INVITE", v3))
        {
LABEL_28:
          if (memcmp(v15, "CANCEL", v3)) {
            goto LABEL_29;
          }
          return 4;
        }
      }
      else if (a1[23])
      {
        uint64_t v9 = "INVITE";
        int v10 = a1;
        uint64_t v11 = a1[23];
        uint64_t result = 2;
        while (*v10 == *(unsigned __int8 *)v9)
        {
          ++v10;
          ++v9;
          if (!--v11) {
            return result;
          }
        }
        switch(v4)
        {
          case 3:
            goto LABEL_5;
          case 5:
            goto LABEL_43;
          case 6:
LABEL_54:
            if ((v2 & 0x80) != 0)
            {
              uint64_t v15 = *(const void **)a1;
              goto LABEL_28;
            }
            std::string v21 = "CANCEL";
            int v22 = a1;
            uint64_t v23 = v2;
            uint64_t result = 4;
            do
            {
              if (*v22 != *(unsigned __int8 *)v21)
              {
                switch(v4)
                {
                  case 3:
                    goto LABEL_5;
                  case 5:
                    goto LABEL_103;
                  case 6:
                    goto LABEL_74;
                  case 7:
                    goto LABEL_87;
                  case 9:
                    goto LABEL_63;
                  default:
                    goto LABEL_95;
                }
              }
              ++v22;
              ++v21;
              --v23;
            }
            while (v23);
            break;
          case 7:
            goto LABEL_87;
          case 9:
            goto LABEL_63;
          default:
            goto LABEL_95;
        }
        return result;
      }
      return 2;
    case 7:
      goto LABEL_87;
    case 8:
      if ((v2 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a1, "REGISTER", v3)) {
          goto LABEL_95;
        }
        return 1;
      }
      if (!a1[23]) {
        return 1;
      }
      BOOL v12 = "REGISTER";
      uint64_t v13 = a1;
      uint64_t result = 1;
      do
      {
        if (*v13 != *(unsigned __int8 *)v12) {
          goto LABEL_95;
        }
        ++v13;
        ++v12;
        --v2;
      }
      while (v2);
      return result;
    case 9:
LABEL_63:
      if ((v2 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a1, "SUBSCRIBE", v3)) {
          goto LABEL_95;
        }
      }
      else if (v2)
      {
        int v24 = "SUBSCRIBE";
        int v25 = a1;
        uint64_t v26 = v2;
        while (*v25 == *(unsigned __int8 *)v24)
        {
          ++v25;
          ++v24;
          if (!--v26) {
            return 7;
          }
        }
        if (v4 != 5)
        {
          if (v4 == 7)
          {
LABEL_87:
            if ((v2 & 0x80) == 0)
            {
              if (v2)
              {
                int v33 = "MESSAGE";
                for (uint64_t i = a1; *i == *(unsigned __int8 *)v33; ++i)
                {
                  ++v33;
                  if (!--v2) {
                    return 11;
                  }
                }
                goto LABEL_95;
              }
              return 11;
            }
            uint64_t v15 = *(const void **)a1;
LABEL_94:
            if (!memcmp(v15, "MESSAGE", v3)) {
              return 11;
            }
LABEL_95:
            if (std::operator==[abi:ne180100]<std::allocator<char>>(a1, "INFO")) {
              return 12;
            }
            if (std::operator==[abi:ne180100]<std::allocator<char>>(a1, "PUBLISH")) {
              return 13;
            }
            if (std::operator==[abi:ne180100]<std::allocator<char>>(a1, "OPTIONS")) {
              return 14;
            }
            return 0;
          }
          if (v4 != 6) {
            goto LABEL_95;
          }
LABEL_74:
          if ((v2 & 0x80) != 0)
          {
            uint64_t v15 = *(const void **)a1;
LABEL_29:
            if (!memcmp(v15, "NOTIFY", v3)) {
              return 8;
            }
            if (!memcmp(v15, "UPDATE", v3)) {
              return 9;
            }
            if (v3 != 5)
            {
              if (v3 != 7) {
                goto LABEL_95;
              }
              goto LABEL_94;
            }
            goto LABEL_50;
          }
          char v27 = "NOTIFY";
          BOOL v28 = a1;
          uint64_t v29 = v2;
          uint64_t result = 8;
          while (*v28 == *(unsigned __int8 *)v27)
          {
            ++v28;
            ++v27;
            if (!--v29) {
              return result;
            }
          }
          uint64_t v30 = "UPDATE";
          int v31 = a1;
          uint64_t v32 = v2;
          uint64_t result = 9;
          while (*v31 == *(unsigned __int8 *)v30)
          {
            ++v31;
            ++v30;
            if (!--v32) {
              return result;
            }
          }
          if (v4 != 5)
          {
LABEL_86:
            if (v4 != 7) {
              goto LABEL_95;
            }
            goto LABEL_87;
          }
        }
LABEL_103:
        if ((v2 & 0x80) == 0)
        {
          char v35 = "REFER";
          uint64_t v36 = a1;
          uint64_t v37 = v2;
          uint64_t result = 10;
          while (*v36 == *(unsigned __int8 *)v35)
          {
            ++v36;
            ++v35;
            if (!--v37) {
              return result;
            }
          }
          goto LABEL_86;
        }
        uint64_t v15 = *(const void **)a1;
LABEL_50:
        if (!memcmp(v15, "REFER", v3)) {
          return 10;
        }
        goto LABEL_95;
      }
      return 7;
    default:
      goto LABEL_95;
  }
}

void AriSdk::Tlv<unsigned char>::operator=<unsigned long,void>()
{
}

char **AriSdk::TlvArray<unsigned char,129ul>::operator=(char **a1, char **a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if ((unint64_t)(v5 - v4) < 0x82)
  {
    if (a1 != a2) {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, v4, v5, v5 - v4);
    }
  }
  else
  {
    AriOsa::LogSrcInfo((uint64_t *)__p, (AriOsa *)"/AppleInternal/Library/BuildRoots/9f16a0bb-a2ea-11ef-bacb-1e361567c031/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", v5);
    if (v11 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%d) max(%d)", v7, v8, 349, a1, a2[1] - *a2, 129);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_1C5255D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>()
{
}

void AriSdk::Tlv<unsigned short>::operator=<unsigned long,void>()
{
}

char **AriSdk::TlvArray<unsigned char,2001ul>::operator=(char **a1, char **a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if ((unint64_t)(v5 - v4) < 0x7D2)
  {
    if (a1 != a2) {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, v4, v5, v5 - v4);
    }
  }
  else
  {
    AriOsa::LogSrcInfo((uint64_t *)__p, (AriOsa *)"/AppleInternal/Library/BuildRoots/9f16a0bb-a2ea-11ef-bacb-1e361567c031/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", v5);
    if (v11 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%d) max(%d)", v7, v8, 349, a1, a2[1] - *a2, 2001);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_1C5255F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(char *result, char *a2, char *a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = (unsigned char *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      char v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v7;
  }
  return result;
}

void sub_1C5255F78(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::__append(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    uint64_t v13 = &v7[a2];
    do
    {
      *v7++ = *a3;
      --v4;
    }
    while (v4);
    a1[1] = v13;
  }
  else
  {
    char v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      BOOL v12 = operator new(v11);
    }
    else {
      BOOL v12 = 0;
    }
    uint64_t v14 = &v8[(void)v12];
    uint64_t v15 = &v8[(void)v12 + v4];
    BOOL v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    uint64_t v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--uint64_t v14 = v18;
      }
      while (v7 != v17);
      uint64_t v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }
  BOOL v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      uint64_t result = memmove(v9, __src, v16);
    }
    uint64_t v15 = &v9[v16];
    goto LABEL_20;
  }
  uint64_t v14 = &__src[v13];
  if (v12 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v13);
    unint64_t v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    uint64_t result = memmove(v9, v14, a3 - v14);
  }
  uint64_t v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

uint64_t ___ZN12IBISipLogger4sendIN6AriSdk14ARI_AriACK_SDKENS1_38ARI_IBISipMsgInjectToCpIMSTraceReq_SDKEEE9ImsResultRT0__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  AriSdk::ARI_AriACK_SDK::ARI_AriACK_SDK((AriSdk::ARI_AriACK_SDK *)v5, a2);
  if (AriSdk::ARI_AriACK_SDK::unpack((AriSdk::ARI_AriACK_SDK *)v5))
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Couldn't unpack ARI result", 26);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
  }
  return MEMORY[0x1C878D720](v5);
}

void *ice::detail::wrapCallback<void>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke;
  aBlock[3] = &unk_1E650F3D8;
  aBlock[4] = a1;
  uint64_t result = _Block_copy(aBlock);
  *a2 = result;
  return result;
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke(uint64_t a1)
{
  return 0;
}

uint64_t ___ZN12IBISipLogger4sendIN6AriSdk14ARI_AriACK_SDKENS1_36ARI_IBISipMessageInjectToCpTrace_SDKEEE9ImsResultRT0__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  AriSdk::ARI_AriACK_SDK::ARI_AriACK_SDK((AriSdk::ARI_AriACK_SDK *)v5, a2);
  if (AriSdk::ARI_AriACK_SDK::unpack((AriSdk::ARI_AriACK_SDK *)v5))
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Couldn't unpack ARI result", 26);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
  }
  return MEMORY[0x1C878D720](v5);
}

uint64_t ___ZN12IBISipLogger4sendIN6AriSdk54ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDKENS1_52ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDKEEE9ImsResultRT0__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  memset(v5, 0, sizeof(v5));
  AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK *)v5, a2);
  if (AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK::unpack((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK *)v5))
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Couldn't unpack ARI result", 26);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
  }
  return MEMORY[0x1C878DCB0](v5);
}

uint64_t ___ZN12IBISipLogger4sendIN6AriSdk46ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDKENS1_44ARI_IBINetDcImsRegistrationStatusInfoReq_SDKEEE9ImsResultRT0__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  memset(v5, 0, sizeof(v5));
  AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK((AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK *)v5, a2);
  if (AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK::unpack((AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK *)v5))
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Couldn't unpack ARI result", 26);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
  }
  return MEMORY[0x1C878DC60](v5);
}

uint64_t SipInsecureTransportGroup::SipInsecureTransportGroup(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_1F20B2FA8;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTransportGroup::SipTransportGroup((uint64_t *)a1, (uint64_t *)off_1F20B93E8, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)a1 = &unk_1F20B9240;
  *(void *)(a1 + 80) = &unk_1F20B9390;
  *(_WORD *)(a1 + 250) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(unsigned char *)(a1 + 248) = 0;
  return a1;
}

void sub_1C5256790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipInsecureTransportGroup::~SipInsecureTransportGroup(SipInsecureTransportGroup *this)
{
  *(void *)this = &unk_1F20B9240;
  *((void *)this + SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = &unk_1F20B9390;
  SipInsecureTransportGroup::transportLayerRequestedClose(this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  SipTransportGroup::~SipTransportGroup(this, (uint64_t *)off_1F20B93E8);
}

{
  uint64_t vars8;

  SipInsecureTransportGroup::~SipInsecureTransportGroup(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipInsecureTransportGroup::~SipInsecureTransportGroup(SipInsecureTransportGroup *this)
{
}

{
  uint64_t vars8;

  SipInsecureTransportGroup::~SipInsecureTransportGroup((SipInsecureTransportGroup *)((char *)this - 80));
  JUMPOUT(0x1C878E320);
}

void SipInsecureTransportGroup::loggableName(SipInsecureTransportGroup *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C5256A58(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)va);
  _Unwind_Resume(a1);
}

void SipInsecureTransportGroup::initialize(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 208);
  if (v6)
  {
    unint64_t v9 = std::__shared_weak_count::lock(v6);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 200);
      if (v10)
      {
        uint64_t v43 = 0;
        int v44 = 0;
        (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 32))(&v43);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v42 = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "67A03811-DB0A-594E-C2AE-8B0517EDF26F");
        size_t v11 = *(std::__shared_weak_count **)(a1 + 208);
        if (v11)
        {
          uint64_t v12 = *(void *)(a1 + 200);
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          size_t v13 = std::__shared_weak_count::lock(v11);
          std::__shared_weak_count::__release_weak(v11);
          if (v13)
          {
            if (v12)
            {
              uint64_t v14 = *(std::__shared_weak_count **)(v12 + 16);
              if (v14)
              {
                uint64_t v15 = std::__shared_weak_count::lock(v14);
                if (v15)
                {
                  uint64_t v16 = *(void *)(v12 + 8);
                  if (v16)
                  {
                    int v17 = *(unsigned __int8 *)(v16 + 2681);
                    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
                    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
                    if (v17)
                    {
                      ims::convertBundleIdToUuid(v45);
                      if (SHIBYTE(v42) < 0) {
                        operator delete(__p[0]);
                      }
                      *(_OWORD *)std::string __p = *(_OWORD *)v45;
                      uint64_t v42 = *(void *)&v45[16];
                    }
                    goto LABEL_19;
                  }
                  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
                }
              }
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
        }
LABEL_19:
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v45, (void *)(a1 + 184));
        uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 112))(v10);
        std::allocate_shared[abi:ne180100]<SipUdpTransport,std::allocator<SipUdpTransport>,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,void>((uint64_t *)v45, &v34, &v39);
        if (*(void *)&v45[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v45[8]);
        }
        memset(v45, 0, sizeof(v45));
        SipUdpTransport::initialize(v39, (uint64_t)&v43, (uint64_t)__p, (uint64_t)a3, (uint64_t)v45);
        if ((*(unsigned int (**)(void, void))(**(void **)&v45[8] + 24))(*(void *)&v45[8], *(unsigned int *)&v45[16]))
        {
          uint64_t v19 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 80), (ImsResult *)v45);
          ImsResult::ImsResult((ImsResult *)a4, (const std::string *)v19);
        }
        else
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v39 + 16))(&v34);
          uint64_t v20 = v34;
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
          if (v20)
          {
            uint64_t v21 = v43;
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v39 + 16))(&v34);
            uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 56))(v34);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 64))(v21, v22);
            if (v35) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v35);
            }
          }
          if (*(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10) + 436)) {
            __int16 v23 = 0;
          }
          else {
            __int16 v23 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 56))(v43);
          }
          uint64_t v24 = *(void *)(a1 + 80);
          *(_WORD *)(a1 + 250) = v23;
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v24 + 64))(a1 + 80);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"Using ", 6);
          *(unsigned char *)(v25 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v25 + 17) = 0;
          if (*(_WORD *)(a1 + 250)) {
            uint64_t v26 = "";
          }
          else {
            uint64_t v26 = "(Ephemeral)";
          }
          if (*(_WORD *)(a1 + 250)) {
            uint64_t v27 = 0;
          }
          else {
            uint64_t v27 = 11;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)v26, v27);
          *(unsigned char *)(v25 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)" port as TCP source port", 24);
          *(unsigned char *)(v25 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v25 + 17) = 0;
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v34, (void *)(a1 + 184));
          uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 112))(v10);
          std::allocate_shared[abi:ne180100]<SipTcpTransport,std::allocator<SipTcpTransport>,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,void>(&v34, &v36, &v37);
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
          SipTcpTransport::initialize(v37, a3, (uint64_t)&v43, (uint64_t)__p, *(unsigned __int16 *)(a1 + 250), (uint64_t)&v34);
          ImsResult::operator=((uint64_t)v45, (uint64_t)&v34);
          ImsResult::~ImsResult((ImsResult *)&v34);
          if ((*(unsigned int (**)(void, void))(**(void **)&v45[8] + 24))(*(void *)&v45[8], *(unsigned int *)&v45[16]))
          {
            *(void *)(a4 + 56) = 0;
            *(void *)(a4 + 64) = 0;
            *(void *)a4 = &unk_1F20B2680;
            *(void *)(a4 + 8) = &_bambiDomain;
            *(_DWORD *)(a4 + 16) = 0x40000000;
            *(void *)(a4 + 40) = 0;
            *(void *)(a4 + 48) = 0;
            *(void *)(a4 + 24) = 0;
            *(void *)(a4 + 32) = 0;
          }
          else
          {
            uint64_t v29 = v39;
            BOOL v28 = v40;
            if (v40) {
              atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v30 = *(std::__shared_weak_count **)(a1 + 224);
            *(void *)(a1 + 216) = v29;
            *(void *)(a1 + 224) = v28;
            if (v30) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v30);
            }
            uint64_t v32 = v37;
            int v31 = v38;
            if (v38) {
              atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v33 = *(std::__shared_weak_count **)(a1 + 240);
            *(void *)(a1 + 232) = v32;
            *(void *)(a1 + 240) = v31;
            if (v33) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v33);
            }
            *(unsigned char *)(a1 + 248) = 1;
            *(_OWORD *)(a4 + 24) = 0u;
            *(_OWORD *)(a4 + 40) = 0u;
            *(_OWORD *)(a4 + 56) = 0u;
            *(void *)a4 = &unk_1F20B2680;
            *(void *)(a4 + 8) = &_bambiDomain;
            *(_DWORD *)(a4 + 16) = 0;
          }
          if (v38) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v38);
          }
        }
        ImsResult::~ImsResult((ImsResult *)v45);
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        if (SHIBYTE(v42) < 0) {
          operator delete(__p[0]);
        }
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
        goto LABEL_58;
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  memset(&v45[24], 0, 48);
  *(void *)int v45 = &unk_1F20B2680;
  *(void *)&v45[8] = &_bambiDomain;
  *(_DWORD *)&v45[16] = 0x40000000;
  char v18 = (const std::string *)ImsResult::operator<<<char [33]>((uint64_t)v45, "No transport layer to initialize");
  ImsResult::ImsResult((ImsResult *)a4, v18);
  ImsResult::~ImsResult((ImsResult *)v45);
  if (v9) {
LABEL_58:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_1C5257120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,char a32,uint64_t a33)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [33]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5257278(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipInsecureTransportGroup::transportLayerRequestedClose(SipInsecureTransportGroup *this)
{
  uint64_t v2 = (char *)this + 80;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"InsecureTransport close", 23);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  v2[168] = 0;
  *((_WORD *)v2 + 85) = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 18);
  *((void *)v2 + 17) = 0;
  *((void *)v2 + 18) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  size_t v5 = (std::__shared_weak_count *)*((void *)this + 30);
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void SipInsecureTransportGroup::sendData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, ImsResult *a7@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 216);
  if (!v8)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t v34 = &unk_1F20B2680;
    char v35 = &_bambiDomain;
    int v36 = 1073741827;
    uint64_t v21 = (const std::string *)ImsResult::operator<<<char [41]>((uint64_t)&v34, "send() called on uninitialized transport");
    ImsResult::ImsResult(a7, v21);
LABEL_16:
    ImsResult::~ImsResult((ImsResult *)&v34);
    return;
  }
  uint64_t v10 = *(unsigned __int8 *)(a4 + 23);
  size_t v11 = *(void *)(a4 + 8);
  if ((v10 & 0x80u) == 0) {
    uint64_t v12 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a4 + 8);
  }
  if (v12 != 3) {
    goto LABEL_15;
  }
  if ((v10 & 0x80) == 0)
  {
    if (*(unsigned char *)(a4 + 23))
    {
      char v18 = &SipTransport::kTransportUDP;
      uint64_t v19 = (unsigned __int8 *)a4;
      uint64_t v20 = *(unsigned __int8 *)(a4 + 23);
      while (*v19 == *v18)
      {
        ++v19;
        ++v18;
        if (!--v20) {
          goto LABEL_17;
        }
      }
      uint64_t v32 = &SipTransport::kTransportTCP;
      int v33 = (unsigned __int8 *)a4;
      while (*v33 == *v32)
      {
        ++v33;
        ++v32;
        if (!--v10) {
          goto LABEL_24;
        }
      }
      goto LABEL_15;
    }
    goto LABEL_17;
  }
  uint64_t v22 = *(const void **)a4;
  if (memcmp(*(const void **)a4, &SipTransport::kTransportUDP, *(void *)(a4 + 8)))
  {
    if (!memcmp(v22, &SipTransport::kTransportTCP, v11))
    {
LABEL_24:
      uint64_t v27 = *(void *)(a1 + 232);
      uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v27 + 32);
      uint64_t v28 = a2;
      uint64_t v29 = a3;
      uint64_t v30 = a5;
      int v31 = a6;
      goto LABEL_25;
    }
LABEL_15:
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t v34 = &unk_1F20B2680;
    char v35 = &_bambiDomain;
    int v36 = 1073741825;
    uint64_t v23 = ImsResult::operator<<<char [24]>((uint64_t)&v34, "unknown transport type ");
    uint64_t v24 = (const std::string *)ImsResult::operator<<<std::string>(v23, a4);
    ImsResult::ImsResult(a7, v24);
    goto LABEL_16;
  }
LABEL_17:
  if (a6 && *a6)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t v34 = &unk_1F20B2680;
    char v35 = &_bambiDomain;
    int v36 = 1073741825;
    uint64_t v25 = (const std::string *)ImsResult::operator<<<char [53]>((uint64_t)&v34, "UDP transport specified, but TCP connection provided");
    ImsResult::ImsResult(a7, v25);
    goto LABEL_16;
  }
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v8 + 32);
  uint64_t v27 = v8;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v30 = a5;
  int v31 = 0;
LABEL_25:
  v26(v27, v28, v29, v30, v31);
}

void sub_1C52576B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t SipInsecureTransportGroup::localClientAddress@<X0>(SipInsecureTransportGroup *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 27);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t SipInsecureTransportGroup::localServerAddress@<X0>(SipInsecureTransportGroup *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 27);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t SipInsecureTransportGroup::remoteServerUri(SipInsecureTransportGroup *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)this + 25);
  if (v5) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 120))(v5);
  }
  else {
    uint64_t v6 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

void sub_1C52577B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipInsecureTransportGroup::processMessageFromTransport(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  unint64_t v9 = (std::__shared_weak_count *)a1[26];
  if (v9)
  {
    uint64_t v16 = std::__shared_weak_count::lock(v9);
    if (v16)
    {
      int v17 = v16;
      uint64_t v18 = a1[25];
      if (v18)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v22, a1 + 23);
        uint64_t v19 = (std::__shared_weak_count *)a8[1];
        uint64_t v20 = *a8;
        uint64_t v21 = v19;
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 128))(v18, a2, a3, a4, a5, a6, &v22, &v20);
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
}

void sub_1C52578CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void SipInsecureTransportGroup::printTransportInfo(SipInsecureTransportGroup *this, ImsOutStream *a2, int a3)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 24))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (!a3) {
      return;
    }
  }
  else if (!a3)
  {
    return;
  }
  uint64_t v6 = *((void *)this + 29);
  if (v6)
  {
    if (*(void *)(v6 + 224))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Open connections:", 19);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      SipTcpTransport::printConnectionMap(*((ImsOutStream **)this + 29), a2);
    }
  }
}

void sub_1C5257A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipInsecureTransportGroup::addTransportSpecificHeaders(SipInsecureTransportGroup *this, SipMessage *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 26);
  if (!v4)
  {
    uint64_t v5 = 0;
LABEL_8:
    uint64_t v8 = *((void *)this + 10);
    uint64_t v7 = (char *)this + 80;
    uint64_t v9 = (*(uint64_t (**)(char *))(v8 + 56))(v7);
    (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))(v7, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"No transport layer found. Not adding P-ANI to insecure ", 55);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(void **__return_ptr, SipMessage *))(*(void *)a2 + 48))(__p, a2);
    (*(void (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v6 = *((void *)this + 25);
  if (!v6) {
    goto LABEL_8;
  }
  if (!*(unsigned char *)((*(uint64_t (**)(void))(*(void *)v6 + 16))(*((void *)this + 25)) + 438)
    || *(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6) + 580))
  {
LABEL_6:
    SipTransportGroup::addAccessNetworkInfoHeader(this, a2);
    SipTransportGroup::addRoutableLocalAddressHeader(this, a2);
    goto LABEL_11;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 72))(v6))
  {
    uint64_t v10 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a2);
    size_t v11 = (long long *)(v10 + 64);
    if (!v10) {
      size_t v11 = &ims::kEmptyString;
    }
    uint64_t v12 = *((unsigned __int8 *)v11 + 23);
    uint64_t v13 = (v12 & 0x80u) == 0 ? *((unsigned __int8 *)v11 + 23) : *((void *)v11 + 1);
    if (v13 != 8) {
      goto LABEL_28;
    }
    if ((v12 & 0x80) == 0)
    {
      if (*((unsigned char *)v11 + 23))
      {
        uint64_t v14 = "REGISTER";
        while (*(unsigned __int8 *)v11 == *(unsigned __int8 *)v14)
        {
          size_t v11 = (long long *)((char *)v11 + 1);
          ++v14;
          if (!--v12) {
            goto LABEL_30;
          }
        }
        goto LABEL_28;
      }
      goto LABEL_30;
    }
    if (memcmp(*(const void **)v11, "REGISTER", *((void *)v11 + 1)))
    {
LABEL_28:
      uint64_t v15 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
      (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"this is the emergency stack. Allowing P-Access-Network-Info in insecure ", 72);
      *(unsigned char *)(v15 + 17) = 0;
      (*(void (**)(void **__return_ptr, SipMessage *))(*(void *)a2 + 48))(__p, a2);
      (*(void (**)(uint64_t, void **))(*(void *)v15 + 32))(v15, __p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v15 + 17) = 0;
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_6;
    }
  }
LABEL_30:
  uint64_t v17 = *((void *)this + 10);
  uint64_t v16 = (char *)this + 80;
  uint64_t v9 = (*(uint64_t (**)(char *))(v17 + 64))(v16);
  (*(void (**)(char *, uint64_t))(*(void *)v16 + 16))(v16, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"not adding P-Access-Network-Info to insecure ", 45);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(void **__return_ptr, SipMessage *))(*(void *)a2 + 48))(__p, a2);
  (*(void (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
  *(unsigned char *)(v9 + 17) = 0;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
LABEL_11:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5257F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void SipInsecureTransportGroup::updateServiceClass(SipInsecureTransportGroup *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *((void *)this + 25);
      if (v4)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 200))(&v8);
        uint64_t v5 = v8;
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v5 = 104;
LABEL_7:
  uint64_t v6 = *((void *)this + 27);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, v5);
  }
  uint64_t v7 = *((void *)this + 29);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v5);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C5258068(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipInsecureTransportGroup::updateCrlfKeepAliveInterval(SipInsecureTransportGroup *this, __int32 a2, __int32 a3)
{
  uint64_t v3 = (SipTcpTransport *)*((void *)this + 29);
  if (v3) {
    SipTcpTransport::updateCrlfKeepAliveInterval(v3, a2, a3);
  }
}

void SipInsecureTransportGroup::updateCrlfKeepAliveNetwork(SipInsecureTransportGroup *this)
{
  uint64_t v1 = (SipTcpTransport *)*((void *)this + 29);
  if (v1) {
    SipTcpTransport::updateCrlfKeepAliveNetwork(v1);
  }
}

SipTcpTransport *SipInsecureTransportGroup::handleKeepAliveWake(SipInsecureTransportGroup *this)
{
  uint64_t result = (SipTcpTransport *)*((void *)this + 29);
  if (result) {
    return (SipTcpTransport *)SipTcpTransport::handleKeepAliveWake(result);
  }
  return result;
}

void SipInsecureTransportGroup::triggerTcpErrors(SipTcpTransport **this, const ImsResult *a2)
{
}

uint64_t SipInsecureTransportGroup::udpTransport@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 224);
  *a2 = *(void *)(this + 216);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t SipInsecureTransportGroup::tcpTransport@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 240);
  *a2 = *(void *)(this + 232);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t SipInsecureTransportGroup::initialized(SipInsecureTransportGroup *this)
{
  return *((unsigned __int8 *)this + 248);
}

uint64_t SipInsecureTransportGroup::localPort(SipInsecureTransportGroup *this)
{
  return *((unsigned __int16 *)this + 125);
}

uint64_t SipInsecureTransportGroup::isSecure(SipInsecureTransportGroup *this)
{
  return 0;
}

void SipConversationIdHeader::~SipConversationIdHeader(void **this)
{
  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipConversationIdHeader::clone(SipConversationIdHeader *this)
{
}

void sub_1C5258250(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40EE8ABE80);
  _Unwind_Resume(a1);
}

void SipUnsupportedHeader::~SipUnsupportedHeader(char **this)
{
  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipUnsupportedHeader::clone(SipUnsupportedHeader *this)
{
}

void sub_1C525839C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

time_t ims::AccessNetwork::set(std::string *this, const std::string *a2)
{
  return ims::AccessNetwork::set(this, a2, a2 + 1);
}

BOOL ims::AccessNetwork::isIMS(ims::AccessNetwork *this)
{
  if (ims::AccessNetwork::isLTE(this) || ims::AccessNetwork::isWifi(this)) {
    return 1;
  }
  return ims::AccessNetwork::isNR(this);
}

BOOL ims::AccessNetwork::isCellularIMS(ims::AccessNetwork *this)
{
  if (ims::AccessNetwork::isLTE(this)) {
    return 1;
  }
  return ims::AccessNetwork::isNR(this);
}

BOOL ims::AccessNetwork::isUMTS(ims::AccessNetwork *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 23);
  size_t v2 = *((void *)this + 1);
  if ((v1 & 0x80u) == 0) {
    uint64_t v3 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v3 = *((void *)this + 1);
  }
  if (v3 != 14) {
    return 0;
  }
  if ((v1 & 0x80) != 0)
  {
    uint64_t v8 = *(const void **)this;
    if (memcmp(*(const void **)this, "3GPP-UTRAN-FDD", v2)) {
      return memcmp(v8, "3GPP-UTRAN-TDD", v2) == 0;
    }
    return 1;
  }
  if (!*((unsigned char *)this + 23)) {
    return 1;
  }
  uint64_t v4 = "3GPP-UTRAN-FDD";
  uint64_t v5 = this;
  uint64_t v6 = *((unsigned __int8 *)this + 23);
  while (*(unsigned __int8 *)v5 == *(unsigned __int8 *)v4)
  {
    uint64_t v5 = (ims::AccessNetwork *)((char *)v5 + 1);
    ++v4;
    if (!--v6) {
      return 1;
    }
  }
  uint64_t v10 = v1 - 1;
  size_t v11 = "3GPP-UTRAN-TDD";
  do
  {
    int v13 = *(unsigned __int8 *)this;
    this = (ims::AccessNetwork *)((char *)this + 1);
    int v12 = v13;
    int v15 = *(unsigned __int8 *)v11++;
    int v14 = v15;
    BOOL v17 = v10-- != 0;
    BOOL v18 = v12 == v14;
    BOOL v7 = v12 == v14;
  }
  while (v18 && v17);
  return v7;
}

BOOL ims::AccessNetwork::isGSM(ims::AccessNetwork *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 23);
  if ((v1 & 0x80u) == 0) {
    uint64_t v2 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v2 = *((void *)this + 1);
  }
  if (v2 != 10) {
    return 0;
  }
  if ((v1 & 0x80) != 0) {
    return memcmp(*(const void **)this, "3GPP-GERAN", *((void *)this + 1)) == 0;
  }
  if (!*((unsigned char *)this + 23)) {
    return 1;
  }
  uint64_t v3 = v1 - 1;
  uint64_t v4 = "3GPP-GERAN";
  do
  {
    int v6 = *(unsigned __int8 *)this;
    this = (ims::AccessNetwork *)((char *)this + 1);
    int v5 = v6;
    int v8 = *(unsigned __int8 *)v4++;
    int v7 = v8;
    BOOL v10 = v3-- != 0;
    BOOL v11 = v5 == v7;
    BOOL v12 = v5 == v7;
  }
  while (v11 && v10);
  return v12;
}

BOOL ims::AccessNetwork::is3GPP2(ims::AccessNetwork *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 23);
  if ((v1 & 0x80u) == 0) {
    uint64_t v2 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v2 = *((void *)this + 1);
  }
  switch(v2)
  {
    case 8:
      if ((v1 & 0x80) != 0)
      {
        uint64_t v27 = "3GPP2-1X";
        return memcmp(*(const void **)this, v27, *((void *)this + 1)) == 0;
      }
      if (!*((unsigned char *)this + 23)) {
        return 1;
      }
      uint64_t v13 = v1 - 1;
      int v14 = "3GPP2-1X";
      do
      {
        int v16 = *(unsigned __int8 *)this;
        this = (ims::AccessNetwork *)((char *)this + 1);
        int v15 = v16;
        int v18 = *(unsigned __int8 *)v14++;
        int v17 = v18;
        BOOL v9 = v13-- != 0;
        char v19 = v9;
        BOOL v11 = v15 == v17;
        BOOL v12 = v15 == v17;
      }
      while (v11 && (v19 & 1) != 0);
      break;
    case 13:
      if ((v1 & 0x80) != 0)
      {
        uint64_t v27 = "3GPP2-1X-HRPD";
        return memcmp(*(const void **)this, v27, *((void *)this + 1)) == 0;
      }
      if (!*((unsigned char *)this + 23)) {
        return 1;
      }
      uint64_t v20 = v1 - 1;
      uint64_t v21 = "3GPP2-1X-HRPD";
      do
      {
        int v23 = *(unsigned __int8 *)this;
        this = (ims::AccessNetwork *)((char *)this + 1);
        int v22 = v23;
        int v25 = *(unsigned __int8 *)v21++;
        int v24 = v25;
        BOOL v9 = v20-- != 0;
        char v26 = v9;
        BOOL v11 = v22 == v24;
        BOOL v12 = v22 == v24;
      }
      while (v11 && (v26 & 1) != 0);
      break;
    case 11:
      if ((v1 & 0x80) == 0)
      {
        if (*((unsigned char *)this + 23))
        {
          uint64_t v3 = v1 - 1;
          uint64_t v4 = "3GPP2-EHRPD";
          do
          {
            int v6 = *(unsigned __int8 *)this;
            this = (ims::AccessNetwork *)((char *)this + 1);
            int v5 = v6;
            int v8 = *(unsigned __int8 *)v4++;
            int v7 = v8;
            BOOL v9 = v3-- != 0;
            char v10 = v9;
            BOOL v11 = v5 == v7;
            BOOL v12 = v5 == v7;
          }
          while (v11 && (v10 & 1) != 0);
          return v12;
        }
        return 1;
      }
      uint64_t v27 = "3GPP2-EHRPD";
      return memcmp(*(const void **)this, v27, *((void *)this + 1)) == 0;
    default:
      return 0;
  }
  return v12;
}

BOOL ims::AccessNetwork::isEHRPD(ims::AccessNetwork *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 23);
  if ((v1 & 0x80u) == 0) {
    uint64_t v2 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v2 = *((void *)this + 1);
  }
  if (v2 != 11) {
    return 0;
  }
  if ((v1 & 0x80) != 0) {
    return memcmp(*(const void **)this, "3GPP2-EHRPD", *((void *)this + 1)) == 0;
  }
  if (!*((unsigned char *)this + 23)) {
    return 1;
  }
  uint64_t v3 = v1 - 1;
  uint64_t v4 = "3GPP2-EHRPD";
  do
  {
    int v6 = *(unsigned __int8 *)this;
    this = (ims::AccessNetwork *)((char *)this + 1);
    int v5 = v6;
    int v8 = *(unsigned __int8 *)v4++;
    int v7 = v8;
    BOOL v10 = v3-- != 0;
    BOOL v11 = v5 == v7;
    BOOL v12 = v5 == v7;
  }
  while (v11 && v10);
  return v12;
}

BOOL ims::AccessNetwork::isTDD(ims::AccessNetwork *this)
{
  uint64_t v1 = this;
  if (*((char *)this + 23) < 0)
  {
    uint64_t v1 = *(ims::AccessNetwork **)this;
    uint64_t v2 = *((void *)this + 1);
  }
  else
  {
    uint64_t v2 = *((unsigned __int8 *)this + 23);
  }
  uint64_t v3 = (char *)v1 + v2;
  if (v2 >= 3)
  {
    uint64_t v4 = v1;
    do
    {
      int v5 = (char *)memchr(v4, 84, v2 - 2);
      if (!v5) {
        break;
      }
      if (*(_WORD *)v5 == 17492 && v5[2] == 68) {
        return v5 != v3 && v5 - (char *)v1 != -1;
      }
      uint64_t v4 = (ims::AccessNetwork *)(v5 + 1);
      uint64_t v2 = v3 - (char *)v4;
    }
    while (v3 - (char *)v4 > 2);
  }
  int v5 = v3;
  return v5 != v3 && v5 - (char *)v1 != -1;
}

BOOL ims::AccessNetwork::isFDD(ims::AccessNetwork *this)
{
  uint64_t v1 = this;
  if (*((char *)this + 23) < 0)
  {
    uint64_t v1 = *(ims::AccessNetwork **)this;
    uint64_t v2 = *((void *)this + 1);
  }
  else
  {
    uint64_t v2 = *((unsigned __int8 *)this + 23);
  }
  uint64_t v3 = (char *)v1 + v2;
  if (v2 >= 3)
  {
    uint64_t v4 = v1;
    do
    {
      int v5 = (char *)memchr(v4, 70, v2 - 2);
      if (!v5) {
        break;
      }
      if (*(_WORD *)v5 == 17478 && v5[2] == 68) {
        return v5 != v3 && v5 - (char *)v1 != -1;
      }
      uint64_t v4 = (ims::AccessNetwork *)(v5 + 1);
      uint64_t v2 = v3 - (char *)v4;
    }
    while (v3 - (char *)v4 > 2);
  }
  int v5 = v3;
  return v5 != v3 && v5 - (char *)v1 != -1;
}

void ims::AccessNetworks::log(ims::AccessNetworks *this, ImsOutStream *a2, int a3)
{
  size_t v5 = a3;
  std::string::basic_string[abi:ne180100](&v6, a3, 32);
  LoggableString::LoggableString(&__p, &v6);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"reported: ", 10);
  *((unsigned char *)a2 + 17) = 0;
  ims::operator<<((uint64_t)a2, (uint64_t)this);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100](&v6, v5, 32);
  LoggableString::LoggableString(&__p, &v6);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"last: ", 6);
  *((unsigned char *)a2 + 17) = 0;
  ims::operator<<((uint64_t)a2, (uint64_t)this + 144);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100](&v6, v5, 32);
  LoggableString::LoggableString(&__p, &v6);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"camped: ", 8);
  *((unsigned char *)a2 + 17) = 0;
  ims::operator<<((uint64_t)a2, (uint64_t)this + 72);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C5258B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ims::AccessNetworks::cellular(ims::AccessNetworks *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = *((unsigned char *)this + 95);
  if (v4 < 0)
  {
    if (!*((void *)this + 10)) {
      goto LABEL_10;
    }
  }
  else if (!*((unsigned char *)this + 95))
  {
    goto LABEL_10;
  }
  int v5 = *((char *)this + 119);
  if (v5 < 0)
  {
    if (!*((void *)this + 13)) {
      goto LABEL_10;
    }
  }
  else if (!*((unsigned char *)this + 119))
  {
    goto LABEL_10;
  }
  std::string v6 = (_OWORD *)((char *)this + 72);
  if (!ims::AccessNetwork::isWifi((ims::AccessNetworks *)((char *)this + 72)))
  {
    if (v4 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a2, *((const std::string::value_type **)this + 9), *((void *)this + 10));
      LOBYTE(v5) = *((unsigned char *)this + 119);
    }
    else
    {
      *(_OWORD *)a2 = *v6;
      *(void *)(a2 + 16) = *((void *)this + 11);
    }
    BOOL v11 = (std::string *)(a2 + 24);
    if ((v5 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v11, *((const std::string::value_type **)this + 12), *((void *)this + 13));
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
      *(void *)(a2 + 40) = *((void *)this + 14);
    }
    *(_OWORD *)(a2 + 48) = *(_OWORD *)((char *)this + 120);
    char v10 = *((unsigned char *)this + 136);
    goto LABEL_40;
  }
LABEL_10:
  char v7 = *((unsigned char *)this + 23);
  if (v7 < 0)
  {
    if (!*((void *)this + 1)) {
      goto LABEL_21;
    }
  }
  else if (!*((unsigned char *)this + 23))
  {
    goto LABEL_21;
  }
  int v8 = *((char *)this + 47);
  if ((v8 & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 47)) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (!*((void *)this + 4))
  {
LABEL_21:
    if (*((char *)this + 167) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a2, *((const std::string::value_type **)this + 18), *((void *)this + 19));
    }
    else
    {
      *(_OWORD *)a2 = *((_OWORD *)this + 9);
      *(void *)(a2 + 16) = *((void *)this + 20);
    }
    BOOL v9 = (std::string *)(a2 + 24);
    if (*((char *)this + 191) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)this + 21), *((void *)this + 22));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 168);
      *(void *)(a2 + 40) = *((void *)this + 23);
    }
    *(_OWORD *)(a2 + 48) = *((_OWORD *)this + 12);
    char v10 = *((unsigned char *)this + 208);
    goto LABEL_40;
  }
LABEL_20:
  if (ims::AccessNetwork::isWifi(this)) {
    goto LABEL_21;
  }
  if (v7 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)this, *((void *)this + 1));
    LOBYTE(v8) = *((unsigned char *)this + 47);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(void *)(a2 + 16) = *((void *)this + 2);
  }
  BOOL v12 = (std::string *)(a2 + 24);
  if ((v8 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(v12, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    *(void *)(a2 + 40) = *((void *)this + 5);
  }
  *(_OWORD *)(a2 + 48) = *((_OWORD *)this + 3);
  char v10 = *((unsigned char *)this + 64);
LABEL_40:
  *(unsigned char *)(a2 + 64) = v10;
}

void sub_1C5258DAC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL ims::AccessNetworks::isIwlanOverCellular(ims::AccessNetworks *this)
{
  if (*((char *)this + 23) < 0)
  {
    if (!*((void *)this + 1)) {
      return 0;
    }
  }
  else if (!*((unsigned char *)this + 23))
  {
    return 0;
  }
  if (*((char *)this + 47) < 0)
  {
    if (!*((void *)this + 4)) {
      return 0;
    }
  }
  else if (!*((unsigned char *)this + 47))
  {
    return 0;
  }
  BOOL result = ims::AccessNetwork::isWifi(this);
  if (!result) {
    return result;
  }
  if (*((char *)this + 95) < 0)
  {
    if (!*((void *)this + 10)) {
      return 0;
    }
  }
  else if (!*((unsigned char *)this + 95))
  {
    return 0;
  }
  if (*((char *)this + 119) < 0)
  {
    if (*((void *)this + 13)) {
      return !ims::AccessNetwork::isWifi((ims::AccessNetworks *)((char *)this + 72));
    }
  }
  else if (*((unsigned char *)this + 119))
  {
    return !ims::AccessNetwork::isWifi((ims::AccessNetworks *)((char *)this + 72));
  }
  return 0;
}

void ims::AccessNetwork::extractCellularInfo(void *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  int v6 = *((char *)a1 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v7 = a1[1];
  }
  BOOL v11 = a1;
  BOOL v12 = (std::string *)(a1 + 3);
  switch(v7)
  {
    case 0xAuLL:
      if (v6 < 0) {
        a1 = (void *)*a1;
      }
      if (memcmp(a1, "3GPP-GERAN", v7)) {
        return;
      }
      *a2 = v13 & ~(v13 >> 31);
      if (*((char *)v11 + 47) < 0)
      {
        uint64_t v14 = v11[4];
        if (v14 == 14) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v14 = *((unsigned __int8 *)v11 + 47);
        if (v14 == 14)
        {
LABEL_10:
          *a3 = v15 & ~(v15 >> 31);
          *a4 = v16 & ~(v16 >> 31);
          int v17 = v12;
          std::string::size_type v18 = 10;
LABEL_62:
          std::string::size_type v41 = 4;
          goto LABEL_63;
        }
      }
      if (v14 == 13)
      {
        *a3 = v44 & ~(v44 >> 31);
        *a4 = v45 & ~(v45 >> 31);
        int v17 = v12;
        std::string::size_type v18 = 9;
        goto LABEL_62;
      }
      return;
    case 0xBuLL:
      if (v6 < 0) {
        a1 = (void *)*a1;
      }
      if ((*a1 != 0x2D524E2D50504733 || *(void *)((char *)a1 + 3) != 0x4444542D524E2D50)
        && (*a1 != 0x2D524E2D50504733 || *(void *)((char *)a1 + 3) != 0x4444462D524E2D50))
      {
        if (!memcmp(a1, "3GPP2-EHRPD", v7))
        {
          *a2 = v21 & ~(v21 >> 31);
          LODWORD(v22) = *((char *)v11 + 47);
          if ((v22 & 0x80000000) != 0) {
            uint64_t v22 = v11[4];
          }
          if (v22) {
            std::string::size_type v46 = 2;
          }
          else {
            std::string::size_type v46 = 3;
          }
          *a3 = v47 & ~(v47 >> 31);
        }
        return;
      }
      *a2 = v35 & ~(v35 >> 31);
      if (*((char *)v11 + 47) < 0)
      {
        uint64_t v36 = v11[4];
        if (v36 == 21) {
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v36 = *((unsigned __int8 *)v11 + 47);
        if (v36 == 21)
        {
LABEL_50:
          *a3 = v37 & ~(v37 >> 31);
          *a4 = v38 & ~(v38 >> 31);
          int v17 = v12;
          std::string::size_type v18 = 12;
LABEL_58:
          std::string::size_type v41 = 9;
          goto LABEL_63;
        }
      }
      if (v36 != 20) {
        return;
      }
      *a3 = v42 & ~(v42 >> 31);
      *a4 = v43 & ~(v43 >> 31);
      int v17 = v12;
      std::string::size_type v18 = 11;
      goto LABEL_58;
    case 0xEuLL:
      uint64_t v23 = 0x5254552D50504733;
      if (v6 >= 0) {
        int v24 = a1;
      }
      else {
        int v24 = (uint64_t *)*a1;
      }
      if (*v24 == 0x5254552D50504733 && *(uint64_t *)((char *)v24 + 6) == 0x4444462D4E415254) {
        goto LABEL_45;
      }
      uint64_t v26 = *v24;
      uint64_t v27 = *(uint64_t *)((char *)v24 + 6);
      goto LABEL_40;
    case 0x10uLL:
      uint64_t v23 = 0x552D452D50504733;
      if (v6 >= 0) {
        uint64_t v28 = a1;
      }
      else {
        uint64_t v28 = (uint64_t *)*a1;
      }
      if (*v28 == 0x552D452D50504733 && v28[1] == 0x4444462D4E415254) {
        goto LABEL_45;
      }
      uint64_t v26 = *v28;
      uint64_t v27 = v28[1];
LABEL_40:
      if (v26 != v23 || v27 != 0x4444542D4E415254) {
        return;
      }
LABEL_45:
      *a2 = v31 & ~(v31 >> 31);
      if (*((char *)v11 + 47) < 0)
      {
        uint64_t v32 = v11[4];
        if (v32 == 17) {
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v32 = *((unsigned __int8 *)v11 + 47);
        if (v32 == 17)
        {
LABEL_47:
          *a3 = v33 & ~(v33 >> 31);
          *a4 = v34 & ~(v34 >> 31);
          int v17 = v12;
          std::string::size_type v18 = 10;
          goto LABEL_54;
        }
      }
      if (v32 != 16) {
        return;
      }
      *a3 = v39 & ~(v39 >> 31);
      *a4 = v40 & ~(v40 >> 31);
      int v17 = v12;
      std::string::size_type v18 = 9;
LABEL_54:
      std::string::size_type v41 = 7;
LABEL_63:
      std::string::basic_string(&v48, v17, v18, v41, (std::allocator<char> *)&v49);
      if (*(char *)(a5 + 23) < 0) {
        operator delete(*(void **)a5);
      }
      *(std::string *)a5 = v48;
      return;
    default:
      return;
  }
}

uint64_t anonymous namespace'::parseNetinfo(std::string *__str, std::string::size_type __pos, std::string::size_type __n)
{
  int v3 = __pos;
  memset(&__stra, 0, sizeof(__stra));
  std::string::basic_string(&v8, __str, __pos, __n, (std::allocator<char> *)&v10);
  std::string __stra = v8;
  std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __stra.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (v3 <= 4) {
      int v5 = 10;
    }
    else {
      int v5 = 16;
    }
    uint64_t v6 = std::stoi(&__stra, 0, v5);
  }
  else
  {
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__stra.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_1C52594D0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 25) < 0) {
    operator delete(*(void **)(v1 - 48));
  }
  _Unwind_Resume(a1);
}

void sub_1C52594D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C878DE60](&a15);
  __cxa_end_catch();
  JUMPOUT(0x1C5259518);
}

BOOL SDPMediaTTYSettings::operator!=(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 280) != *(_DWORD *)(a2 + 280)
      || *(_DWORD *)(a1 + 284) != *(_DWORD *)(a2 + 284)
      || *(unsigned __int16 *)(a1 + 290) != *(unsigned __int16 *)(a2 + 290)
      || *(unsigned __int16 *)(a1 + 288) != *(unsigned __int16 *)(a2 + 288)
      || SDPMediaSettings::operator!=(a1, a2);
}

void SDPMediaTTYSettings::~SDPMediaTTYSettings(SDPMediaTTYSettings *this)
{
  SDPMediaSettings::~SDPMediaSettings(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipHeader::SipHeader(uint64_t a1, const std::string *a2)
{
  *(void *)a1 = &unk_1F20B9848;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(unsigned char *)(a1 + 56) = 1;
  std::string::operator=((std::string *)(a1 + 8), a2);
  return a1;
}

void sub_1C5259628(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*(void **)(v1 + 32));
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void SipHeader::SipHeader(SipHeader *this, const SipHeader *a2)
{
  *(void *)this = &unk_1F20B9848;
  *(_OWORD *)((char *)this + 8) = 0u;
  int v3 = (std::string *)((char *)this + 32);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((unsigned char *)this + 56) = 1;
  std::string::operator=((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
  std::string::operator=(v3, (const std::string *)((char *)a2 + 32));
}

void sub_1C52596D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipHeader::log(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t SipHeader::valueAndParamsAsString(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

void SipHeader::valueAsString()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C5259878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)va);
  _Unwind_Resume(a1);
}

uint64_t SipHeader::encode(SipHeader *this, ImsOutStream *a2, int a3)
{
  if (a3)
  {
    if (*((char *)this + 55) < 0)
    {
      if (*((void *)this + 5)) {
        goto LABEL_4;
      }
    }
    else if (*((unsigned char *)this + 55))
    {
LABEL_4:
      LoggableString::LoggableString((std::string *)__p, (const std::string *)((char *)this + 32));
      (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
      goto LABEL_7;
    }
  }
  LoggableString::LoggableString((std::string *)__p, (const std::string *)((char *)this + 8));
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
LABEL_7:
  *((unsigned char *)a2 + 17) = 0;
  if (SBYTE7(v7) < 0) {
    operator delete(__p[0]);
  }
  if (!*((unsigned char *)this + 56))
  {
    uint64_t v8 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v7 = 0u;
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)__p);
  }
  return (*(uint64_t (**)(SipHeader *, ImsOutStream *))(*(void *)this + 48))(this, a2);
}

void sub_1C5259AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a21);
  _Unwind_Resume(a1);
}

uint64_t SipHeader::decode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t _GLOBAL__sub_I_SipHeader_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(SipHeader::kHeaderPChargingFunctionAddresses, "P-Charging-Function-Addresses");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  __cxa_atexit(MEMORY[0x1E4FBA210], SipHeader::kHeaderPChargingFunctionAddresses, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(SipHeader::kHeaderPLastAccessNetworkInfo, "P-Last-Access-Network-Info");
  __cxa_atexit(v0, SipHeader::kHeaderPLastAccessNetworkInfo, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(SipHeader::kHeaderPComNameIdReputation, "P-Com.NameId-Reputation");
  __cxa_atexit(v0, SipHeader::kHeaderPComNameIdReputation, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(SipHeader::kHeaderPCellularNetworkInfo, "P-Cellular-Network-Info");
  __cxa_atexit(v0, SipHeader::kHeaderPCellularNetworkInfo, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(SipHeader::kInReplyToContributionId, "InReplyTo-Contribution-ID");
  return __cxa_atexit(v0, SipHeader::kInReplyToContributionId, &dword_1C51D1000);
}

void LazuliByteRangeHeader::create(void *a1@<X8>)
{
  int v3 = (char *)operator new(0x58uLL);
  *((void *)v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)int v3 = &unk_1F20B99A8;
  char v4 = v3 + 24;
  LazuliHeader::LazuliHeader((std::string *)v3 + 1, (const std::string *)"Byte-Range");
  *((void *)v3 + SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = 0;
  *((_DWORD *)v3 + 19) = 0;
  *((void *)v3 + 3) = &unk_1F20B99F8;
  int v5 = (std::__shared_weak_count *)*((void *)v3 + 5);
  if (!v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 2, 1uLL, memory_order_relaxed);
    *((void *)v3 + 4) = v4;
    *((void *)v3 + 5) = v3;
    goto LABEL_5;
  }
  if (v5->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 2, 1uLL, memory_order_relaxed);
    *((void *)v3 + 4) = v4;
    *((void *)v3 + 5) = v3;
    std::__shared_weak_count::__release_weak(v5);
LABEL_5:
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v3);
  }
  *a1 = v4;
  a1[1] = v3;
}

void sub_1C5259D48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t LazuliByteRangeHeader::encodeValue(LazuliByteRangeHeader *this, ImsOutStream *a2)
{
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"-", 1);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"/", 1);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  return 1;
}

uint64_t LazuliByteRangeHeader::setValueFromString(_DWORD *a1, std::string *this)
{
  std::string::size_type v4 = std::string::find(this, 45, 0);
  if (v4 == -1) {
    return 0;
  }
  std::string::size_type v5 = v4;
  std::string::size_type v6 = std::string::find(this, 47, v4);
  if (v6 == -1) {
    return 0;
  }
  std::string::size_type v7 = v6;
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = this;
  }
  else {
    uint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  a1[13] = strtoul((const char *)v8, 0, 10);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v9 = this;
  }
  else {
    BOOL v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  a1[14] = strtoul(&v9->__r_.__value_.__s.__data_[v5 + 1], 0, 10);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v10 = this;
  }
  else {
    char v10 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  a1[15] = strtoul(&v10->__r_.__value_.__s.__data_[v7 + 1], 0, 10);
  return 1;
}

void LazuliByteRangeHeader::~LazuliByteRangeHeader(void **this)
{
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C878E320);
}

std::string *LazuliHeader::loggableName@<X0>(const std::string *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, this + 1);
}

double LazuliByteRangeHeader::clone@<D0>(LazuliByteRangeHeader *this@<X0>, _OWORD *a2@<X8>)
{
  std::string::size_type v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)std::string::size_type v4 = &unk_1F20B9958;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_1F20D7EA8;
  std::string::size_type v5 = (std::string *)(v4 + 48);
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    *((void *)v4 + 8) = *((void *)this + 5);
  }
  v4[72] = *((unsigned char *)this + 48);
  *((void *)v4 + 3) = &unk_1F20B98E0;
  *(void *)(v4 + 76) = *(void *)((char *)this + 52);
  *((_DWORD *)v4 + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *((_DWORD *)this + 15);
  *(void *)&long long v7 = v4 + 24;
  *((void *)&v7 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v7, (void *)v4 + 4, (uint64_t)(v4 + 24));
  double result = *(double *)&v7;
  *a2 = v7;
  return result;
}

void sub_1C525A020(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void LazuliHeader::~LazuliHeader(void **this)
{
  *this = &unk_1F20D7EA8;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__shared_ptr_emplace<LazuliByteRangeHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliByteRangeHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliByteRangeHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<LazuliByteRangeHeader::create(void)::HeaderWrapper,std::allocator<LazuliByteRangeHeader::create(void)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B99A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliByteRangeHeader::create(void)::HeaderWrapper,std::allocator<LazuliByteRangeHeader::create(void)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B99A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliByteRangeHeader::create(void)::HeaderWrapper,std::allocator<LazuliByteRangeHeader::create(void)::HeaderWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void LazuliByteRangeHeader::create(void)::HeaderWrapper::~HeaderWrapper(void **a1)
{
  LazuliHeader::~LazuliHeader(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t MsrpTransportTls::MsrpTransportTls(uint64_t a1, void *a2)
{
  uint64_t v5 = *a2;
  std::string::size_type v4 = (std::__shared_weak_count *)a2[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F20CC538;
  *(void *)(a1 + 24) = &unk_1F20CC578;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_weak(v4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "msrp.tport");
  (*(void (**)(std::string *__return_ptr))(*(void *)*a2 + 48))(&__p);
  ImsLogContainer::ImsLogContainer(a1 + 80, &v9, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F20B9A70;
  *(void *)(a1 + 24) = &unk_1F20B9AD8;
  *(void *)(a1 + 80) = &unk_1F20B9B28;
  *(_OWORD *)(a1 + 216) = 0u;
  std::string::size_type v6 = (void **)(a1 + 216);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 232) = 0;
  ims::convertBundleIdToUuid(&v9);
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)std::string::size_type v6 = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
  *(void *)(a1 + 232) = *((void *)&v9.__r_.__value_.__l + 2);
  return a1;
}

void sub_1C525A3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 + 239) < 0) {
    operator delete(*v22);
  }
  int v24 = *(std::__shared_weak_count **)(v20 + 208);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  int v25 = *(std::__shared_weak_count **)(v20 + 192);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  ImsLogContainer::~ImsLogContainer(v21);
  MsrpTransportInterface::~MsrpTransportInterface((MsrpTransportInterface *)v20);
  _Unwind_Resume(a1);
}

void MsrpTransportTls::~MsrpTransportTls(MsrpTransportTls *this)
{
  *(void *)this = &unk_1F20B9A70;
  *((void *)this + 3) = &unk_1F20B9AD8;
  *((void *)this + SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = &unk_1F20B9B28;
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *((void *)this + SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = &unk_1F20C9CA0;
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  MsrpTransportInterface::~MsrpTransportInterface(this);
}

{
  uint64_t vars8;

  MsrpTransportTls::~MsrpTransportTls(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'MsrpTransportTls::~MsrpTransportTls(MsrpTransportTls *this)
{
}

{
  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)((char *)this - 80));
}

{
  uint64_t vars8;

  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)((char *)this - 80));
  JUMPOUT(0x1C878E320);
}

void MsrpTransportTls::createListener(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  BOOL v12 = (std::__shared_weak_count *)operator new(0x108uLL);
  int v13 = v12;
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9C60;
  uint64_t v14 = &v12[1].__vftable;
  uint64_t v15 = *a1;
  int v16 = (std::__shared_weak_count *)a1[1];
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long __p = v15;
  *((void *)&__p + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v16;
  MsrpTransportTls::MsrpTransportTls((uint64_t)&v12[1], &__p);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9CB0;
  v13[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9D18;
  p_shared_owners = &v13[4].__shared_owners_;
  v13[4].__shared_owners_ = (uint64_t)&unk_1F20B9D68;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  shared_weak_owners = (std::__shared_weak_count *)v13[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_12;
    }
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[1].__shared_owners_ = (uint64_t)v14;
    v13[1].__shared_weak_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[1].__shared_owners_ = (uint64_t)v14;
    v13[1].__shared_weak_owners_ = (uint64_t)v13;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_12:
  uint64_t v48 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  uint64_t v19 = *a2;
  uint64_t v20 = (std::__shared_weak_count *)a2[1];
  uint64_t v42 = *a2;
  int v43 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v21 = *(const void **)(a4 + 8);
  int v40 = &unk_1F20E38B0;
  CFTypeRef cf = v21;
  if (v21)
  {
    CFRetain(v21);
    uint64_t v19 = v42;
  }
  int v40 = &unk_1F20B3050;
  uint64_t v22 = v43;
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = (std::__shared_weak_count *)v13[2].__shared_weak_owners_;
  v13[2].__shared_owners_ = v19;
  v13[2].__shared_weak_owners_ = (uint64_t)v22;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v37, &v13[1].__shared_owners_);
  LODWORD(v54) = 0;
  std::allocate_shared[abi:ne180100]<ImsListenSocket,std::allocator<ImsListenSocket>,std::shared_ptr<MsrpTransportInterface>,DscpClass,void>((uint64_t *)&v37, (int *)&v54, &__p);
  long long v24 = __p;
  long long __p = 0uLL;
  int v25 = (std::__shared_weak_count *)v13[9].__vftable;
  *(_OWORD *)&v13[8].__shared_weak_owners_ = v24;
  if (v25)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    if (*((void *)&__p + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
    }
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  (*(void (**)(uint64_t, void))(*(void *)v13[2].__shared_owners_ + 64))(v13[2].__shared_owners_, 0);
  uint64_t v36 = a6;
  uint64_t v48 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  uint64_t v26 = v13[8].__shared_weak_owners_;
  uint64_t v27 = sImsDispatchQueue;
  if (sImsDispatchQueue)
  {
    dispatch_object_t v54 = (dispatch_object_t)sImsDispatchQueue;
  }
  else
  {
    uint64_t v27 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v27;
    dispatch_object_t v54 = v27;
    if (!v27) {
      goto LABEL_29;
    }
  }
  dispatch_retain(v27);
LABEL_29:
  int v37 = &unk_1F20E38B0;
  int v38 = (std::__shared_weak_count *)cf;
  if (cf) {
    CFRetain(cf);
  }
  int v37 = &unk_1F20B3050;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *, dispatch_object_t *, std::__shared_weak_count *, uint64_t, void **, uint64_t, long long *, _BYTE))(*(void *)v26 + 40))(&v44, v26, &v42, &v54, v13 + 10, a3, &v37, a5, &__p, 0);
  if (SHIBYTE(v50) < 0) {
    operator delete((void *)__p);
  }
  ims::CFType::~CFType((ims::CFType *)&v37);
  if (v54) {
    dispatch_release(v54);
  }
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  *(void *)&long long __p = &unk_1F20B2680;
  *((void *)&__p + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
  LODWORD(v50) = 0;
  if (*((uint64_t **)&v44 + 1) == &_bambiDomain)
  {
    int v28 = v45;
    ImsResult::~ImsResult((ImsResult *)&__p);
    if (!v28)
    {
      uint64_t v29 = v13[8].__shared_weak_owners_;
      uint64_t v30 = *(void *)(v29 + 24);
      int v31 = *(std::__shared_weak_count **)(v29 + 32);
      if (v31)
      {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = (std::__shared_weak_count *)v13[2].__shared_weak_owners_;
      v13[2].__shared_owners_ = v30;
      v13[2].__shared_weak_owners_ = (uint64_t)v31;
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      uint64_t v33 = (*(uint64_t (**)(uint64_t *))(*p_shared_owners + 64))(&v13[4].__shared_owners_);
      (*(void (**)(uint64_t *, uint64_t))(*p_shared_owners + 16))(&v13[4].__shared_owners_, v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"initialized listener on local port ", 35);
      *(unsigned char *)(v33 + 17) = 0;
      (*(void (**)(uint64_t))(*(void *)v13[2].__shared_owners_ + 56))(v13[2].__shared_owners_);
      std::ostream::operator<<();
      *(unsigned char *)(v33 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v33 + 17) = 0;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  ims::CFType::~CFType((ims::CFType *)&v40);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  *(void *)&long long __p = &unk_1F20B2680;
  *((void *)&__p + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
  LODWORD(v50) = 0;
  if (*((uint64_t **)&v44 + 1) == &_bambiDomain)
  {
    int v34 = v45;
    ImsResult::~ImsResult((ImsResult *)&__p);
    if (!v34)
    {
      ImsResult::~ImsResult((ImsResult *)&v44);
      *uint64_t v36 = v14;
      v36[1] = v13;
      return;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  long long __p = 0uLL;
  uint64_t v50 = 0;
  if (*a1) {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 48))(&__p);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, "msrp.tport");
  uint64_t v35 = ims::error((uint64_t)&v37, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"Failed to init listner! ", 24);
  *(unsigned char *)(v35 + 17) = 0;
  (*(void (**)(long long *, uint64_t))(v44 + 16))(&v44, v35);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v35 + 17) = 0;
  if (v39 < 0) {
    operator delete(v37);
  }
  *uint64_t v36 = 0;
  v36[1] = 0;
  if (SHIBYTE(v50) < 0) {
    operator delete((void *)__p);
  }
  ImsResult::~ImsResult((ImsResult *)&v44);
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
}

void sub_1C525ACE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (v38) {
    dispatch_release(v38);
  }
  ims::CFType::~CFType((ims::CFType *)&a18);
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  _Unwind_Resume(a1);
}

void MsrpTransportTls::createConnection(void *a1@<X0>, uint64_t *a2@<X1>, std::__shared_weak_count_vtbl **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  BOOL v11 = (std::__shared_weak_count *)operator new(0x108uLL);
  BOOL v12 = v11;
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9DE0;
  int v13 = &v11[1].__vftable;
  uint64_t v14 = (void *)*a1;
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v80 = v14;
  long long v81 = v15;
  MsrpTransportTls::MsrpTransportTls((uint64_t)&v11[1], &v80);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9E30;
  v12[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9E98;
  p_shared_owners = &v12[4].__shared_owners_;
  v12[4].__shared_owners_ = (uint64_t)&unk_1F20B9EE8;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  shared_weak_owners = (std::__shared_weak_count *)v12[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_12;
    }
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v12[1].__shared_owners_ = (uint64_t)v13;
    v12[1].__shared_weak_owners_ = (uint64_t)v12;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v12[1].__shared_owners_ = (uint64_t)v13;
    v12[1].__shared_weak_owners_ = (uint64_t)v12;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_12:
  uint64_t v76 = 0;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  uint64_t v18 = *a2;
  uint64_t v19 = (std::__shared_weak_count *)a2[1];
  uint64_t v70 = *a2;
  long long v71 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v62 = v13;
  uint64_t v20 = (std::__shared_weak_count *)a3[1];
  long long v68 = *a3;
  long long v69 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v21 = *(const void **)(a4 + 8);
  long long v66 = &unk_1F20E38B0;
  CFTypeRef cf = v21;
  if (v21)
  {
    CFRetain(v21);
    uint64_t v18 = v70;
  }
  long long v66 = &unk_1F20B3050;
  uint64_t v22 = v71;
  if (v71) {
    atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = (std::__shared_weak_count *)v12[2].__shared_weak_owners_;
  v12[2].__shared_owners_ = v18;
  v12[2].__shared_weak_owners_ = (uint64_t)v22;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  long long v24 = v69;
  if (v69) {
    atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  shared_owners = (std::__shared_weak_count *)v12[3].__shared_owners_;
  v12[3].__vftable = v68;
  v12[3].__shared_owners_ = (uint64_t)v24;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v86, &v12[1].__shared_owners_);
  uint64_t v26 = (std::__shared_weak_count *)operator new(0xF0uLL);
  uint64_t v27 = v26;
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9C10;
  int v28 = v26 + 1;
  uint64_t v29 = v87;
  dispatch_object_t v30 = v86 + 3;
  if (!v86) {
    dispatch_object_t v30 = 0;
  }
  long long v80 = v30;
  long long v81 = v87;
  dispatch_object_t v86 = 0;
  long long v87 = 0;
  ImsTlsSocket::ImsTlsSocket((uint64_t)&v26[1], (uint64_t *)&v80, 0, 0);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  long long __p = v28;
  long long v78 = v27;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&__p, &v27[1].__shared_owners_, (uint64_t)v28);
  int v31 = v78;
  if (__p) {
    uint64_t v32 = (char *)__p + 80;
  }
  else {
    uint64_t v32 = 0;
  }
  long long __p = 0;
  long long v78 = 0;
  uint64_t v33 = (std::__shared_weak_count *)v12[9].__shared_weak_owners_;
  v12[9].__shared_owners_ = (uint64_t)v32;
  v12[9].__shared_weak_owners_ = (uint64_t)v31;
  if (v33)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    if (v78) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v78);
    }
  }
  if (v87) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v87);
  }
  (*(void (**)(uint64_t, void))(*(void *)v12[2].__shared_owners_ + 64))(v12[2].__shared_owners_, 0);
  long long v73 = 0uLL;
  uint64_t v76 = 0;
  long long v75 = 0uLL;
  *(void *)&long long v72 = &unk_1F20B2680;
  *((void *)&v72 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
  long long v74 = 0uLL;
  int v34 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v70 + 128))(v70);
  uint64_t v35 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v68->~__shared_weak_count + 16))(v68);
  uint64_t v36 = v34[23];
  if ((v36 & 0x80u) == 0) {
    uint64_t v37 = v34[23];
  }
  else {
    uint64_t v37 = *((void *)v34 + 1);
  }
  uint64_t v38 = *(unsigned __int8 *)(v35 + 23);
  int v39 = (char)v38;
  if ((v38 & 0x80u) != 0) {
    uint64_t v38 = *(void *)(v35 + 8);
  }
  if (v37 != v38) {
    goto LABEL_53;
  }
  if (v39 >= 0) {
    int v40 = (unsigned __int8 *)v35;
  }
  else {
    int v40 = *(unsigned __int8 **)v35;
  }
  if ((v36 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v34, v40, *((void *)v34 + 1))) {
      goto LABEL_53;
    }
LABEL_56:
    uint64_t v48 = v12[9].__shared_owners_;
    long long __p = 0;
    long long v78 = 0;
    uint64_t v79 = 0;
    char v49 = sImsDispatchQueue;
    if (sImsDispatchQueue)
    {
      v88[0] = (dispatch_object_t)sImsDispatchQueue;
    }
    else
    {
      char v49 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v49;
      v88[0] = v49;
      if (!v49)
      {
LABEL_68:
        dispatch_object_t v86 = (dispatch_object_t)&unk_1F20E38B0;
        long long v87 = (std::__shared_weak_count *)cf;
        if (cf) {
          CFRetain(cf);
        }
        dispatch_object_t v86 = (dispatch_object_t)&unk_1F20B3050;
        LOBYTE(v6bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, void **, dispatch_object_t *, std::__shared_weak_count *, uint64_t, dispatch_object_t *, uint64_t, void))(*(void *)v48 + 16))(&v80, v48, &v70, &v68, &__p, v88, v12 + 10, 1, &v86, a5, v61);
        ImsResult::operator=((uint64_t)&v72, (uint64_t)&v80);
        ImsResult::~ImsResult((ImsResult *)&v80);
        ims::CFType::~CFType((ims::CFType *)&v86);
        if (v88[0]) {
          dispatch_release(v88[0]);
        }
        if (SHIBYTE(v79) < 0) {
          operator delete(__p);
        }
        goto LABEL_74;
      }
    }
    dispatch_retain(v49);
    goto LABEL_68;
  }
  if (!v34[23]) {
    goto LABEL_56;
  }
  while (*v34 == *v40)
  {
    ++v34;
    ++v40;
    if (!--v36) {
      goto LABEL_56;
    }
  }
LABEL_53:
  uint64_t v41 = (*(uint64_t (**)(uint64_t *))(*p_shared_owners + 64))(&v12[4].__shared_owners_);
  (*(void (**)(uint64_t *, uint64_t))(*p_shared_owners + 16))(&v12[4].__shared_owners_, v41);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"Ignoring local address recommendation ", 38);
  *(unsigned char *)(v41 + 17) = 0;
  uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 128))(v70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 32))(v41, v42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)" to match destination address type ", 35);
  *(unsigned char *)(v41 + 17) = 0;
  uint64_t v43 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v68->~__shared_weak_count + 16))(v68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 32))(v41, v43);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v41 + 17) = 0;
  uint64_t v44 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v68->~__shared_weak_count + 9))(v68);
  uint64_t v45 = socket(*(unsigned __int8 *)(v44 + 1), 1, 0);
  if (v45 != -1)
  {
    uint64_t v46 = v12[9].__shared_owners_;
    long long v47 = sImsDispatchQueue;
    if (sImsDispatchQueue)
    {
      dispatch_object_t v86 = (dispatch_object_t)sImsDispatchQueue;
    }
    else
    {
      long long v47 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v47;
      dispatch_object_t v86 = v47;
      if (!v47)
      {
LABEL_62:
        long long __p = &unk_1F20E38B0;
        long long v78 = (std::__shared_weak_count *)cf;
        if (cf) {
          CFRetain(cf);
        }
        long long __p = &unk_1F20B3050;
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::__shared_weak_count_vtbl **, dispatch_object_t *, std::__shared_weak_count *, uint64_t, void **, uint64_t, _DWORD))(*(void *)v46 + 24))(&v80, v46, v45, &v68, &v86, v12 + 10, 1, &__p, a5, 0);
        ImsResult::operator=((uint64_t)&v72, (uint64_t)&v80);
        ImsResult::~ImsResult((ImsResult *)&v80);
        ims::CFType::~CFType((ims::CFType *)&__p);
        if (v86) {
          dispatch_release(v86);
        }
        goto LABEL_74;
      }
    }
    dispatch_retain(v47);
    goto LABEL_62;
  }
  int v50 = *__error();
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v80 = &unk_1F20B2680;
  long long v81 = (std::__shared_weak_count *)&_posixDomain;
  LODWORD(v82) = v50;
  ImsResult::operator=((uint64_t)&v72, (uint64_t)&v80);
  ImsResult::~ImsResult((ImsResult *)&v80);
  if (((*(uint64_t (**)(void, void))(**((void **)&v72 + 1) + 24))(*((void *)&v72 + 1), v73) & 1) == 0)
  {
    long long v83 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v80 = &unk_1F20B2680;
    long long v81 = (std::__shared_weak_count *)&_bambiDomain;
    LODWORD(v82) = 1073741842;
    ImsResult::operator=((uint64_t)&v72, (uint64_t)&v80);
    ImsResult::~ImsResult((ImsResult *)&v80);
  }
LABEL_74:
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v80 = &unk_1F20B2680;
  long long v81 = (std::__shared_weak_count *)&_bambiDomain;
  LODWORD(v82) = 0;
  if (*((uint64_t **)&v72 + 1) == &_bambiDomain)
  {
    int v51 = v73;
    ImsResult::~ImsResult((ImsResult *)&v80);
    if (!v51)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v12[9].__shared_owners_ + 136))(&v80);
      long long v53 = v80;
      long long v52 = v81;
      if (v81) {
        atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      dispatch_object_t v54 = (std::__shared_weak_count *)v12[2].__shared_weak_owners_;
      v12[2].__shared_owners_ = (uint64_t)v53;
      v12[2].__shared_weak_owners_ = (uint64_t)v52;
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
      if (v81) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v81);
      }
      uint64_t v55 = (*(uint64_t (**)(uint64_t *))(*p_shared_owners + 64))(&v12[4].__shared_owners_);
      (*(void (**)(uint64_t *, uint64_t))(*p_shared_owners + 16))(&v12[4].__shared_owners_, v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"initialized on local port ", 26);
      *(unsigned char *)(v55 + 17) = 0;
      (*(void (**)(uint64_t))(*(void *)v12[2].__shared_owners_ + 56))(v12[2].__shared_owners_);
      std::ostream::operator<<();
      *(unsigned char *)(v55 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v55 + 17) = 0;
      std::string v56 = v12[4].__vftable;
      if (v56) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v56->__on_zero_shared, 1uLL, memory_order_relaxed);
      }
      long long v80 = 0;
      long long v81 = 0;
      (*(void (**)(void **__return_ptr))(*(void *)v12[9].__shared_owners_ + 104))(&v80);
      if (!sImsDispatchQueue) {
        sImsDispatchQueue = (uint64_t)dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      }
      if (v56) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v56->__on_zero_shared, 1uLL, memory_order_relaxed);
      }
      if (v81) {
        atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      operator new();
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v80);
  }
  ims::CFType::~CFType((ims::CFType *)&v66);
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v80 = &unk_1F20B2680;
  long long v81 = (std::__shared_weak_count *)&_bambiDomain;
  LODWORD(v82) = 0;
  if (*((uint64_t **)&v72 + 1) == &_bambiDomain)
  {
    int v57 = v73;
    ImsResult::~ImsResult((ImsResult *)&v80);
    if (!v57)
    {
      ImsResult::~ImsResult((ImsResult *)&v72);
      *a6 = v62;
      a6[1] = v12;
      return;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v80);
  }
  long long v80 = 0;
  long long v81 = 0;
  uint64_t v82 = 0;
  if (*a1) {
    (*(void (**)(void **__return_ptr))(*(void *)*a1 + 48))(&v80);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(&v80, "");
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "msrp.tport");
  uint64_t v58 = ims::error((uint64_t)&__p, (uint64_t)&v80);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v58 + 8), (uint64_t)"Failed to init connection! ", 27);
  *(unsigned char *)(v58 + 17) = 0;
  (*(void (**)(long long *, uint64_t))(v72 + 16))(&v72, v58);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v58 + 17) = 0;
  if (SHIBYTE(v79) < 0) {
    operator delete(__p);
  }
  uint64_t v59 = *a1;
  if (*a1)
  {
    long long v60 = (std::__shared_weak_count *)a3[1];
    uint64_t v64 = *a3;
    uint64_t v65 = v60;
    if (v60) {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(void *)v59 + 24))(v59, &v64);
    if (v65) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v65);
    }
  }
  *a6 = 0;
  a6[1] = 0;
  if (SHIBYTE(v82) < 0) {
    operator delete(v80);
  }
  ImsResult::~ImsResult((ImsResult *)&v72);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
}

void sub_1C525BB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  ImsResult::~ImsResult((ImsResult *)&a21);
  ims::CFType::~CFType((ims::CFType *)&a15);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  _Unwind_Resume(a1);
}

void MsrpTransportTls::send(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 200);
  if (v5)
  {
    uint64_t v27 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    (*(void (**)(long long *__return_ptr))(*(void *)v5 + 40))(&v23);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    v18[0] = &unk_1F20B2680;
    v18[1] = &_bambiDomain;
    int v19 = 0;
    if (*((uint64_t **)&v23 + 1) == &_bambiDomain)
    {
      int v11 = v24;
      ImsResult::~ImsResult((ImsResult *)v18);
      if (!v11)
      {
LABEL_15:
        ImsResult::~ImsResult((ImsResult *)&v23);
        return;
      }
    }
    else
    {
      ImsResult::~ImsResult((ImsResult *)v18);
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 56))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"send ", 5);
    *(unsigned char *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" bytes failed to ", 17);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v12);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    int v13 = *(std::__shared_weak_count **)(a1 + 72);
    if (v13)
    {
      uint64_t v14 = std::__shared_weak_count::lock(v13);
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = *(void *)(a1 + 64);
        if (v16)
        {
          ImsResult::ImsResult((ImsResult *)v17, (const std::string *)&v23);
          (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v16 + 40))(v16, a3, v17);
          ImsResult::~ImsResult((ImsResult *)v17);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    goto LABEL_15;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 56))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"drop ", 5);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" bytes on null socket", 21);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  long long v7 = *(std::__shared_weak_count **)(a1 + 72);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      std::string v9 = v8;
      uint64_t v10 = *(void *)(a1 + 64);
      if (v10)
      {
        long long v30 = 0u;
        long long v32 = 0u;
        long long v31 = 0u;
        v28[0] = &unk_1F20B2680;
        v28[1] = &_bambiDomain;
        int v29 = 1073741840;
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v10 + 40))(v10, a3, v28);
        ImsResult::~ImsResult((ImsResult *)v28);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_1C525C11C(_Unwind_Exception *a1)
{
  ImsResult::~ImsResult((ImsResult *)(v2 - 136));
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

ImsOutStream *MsrpTransportTls::toStream(MsrpTransportTls *this, ImsOutStream *a2)
{
  uint64_t v4 = *((void *)this + 4);
  if (!v4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"MSRP secure transport w/o local info", 36);
    *((unsigned char *)a2 + 17) = 0;
    goto LABEL_5;
  }
  uint64_t v5 = *((void *)this + 6);
  (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v4 + 40))(v4, a2);
  uint64_t v6 = (void *)*((void *)a2 + 1);
  if (v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" <-> ", 5);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(void, ImsOutStream *))(**((void **)this + 6) + 40))(*((void *)this + 6), a2);
LABEL_5:
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    return a2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" is ", 4);
  *((unsigned char *)a2 + 17) = 0;
  if (*((void *)this + 23))
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v9 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "not ");
  }
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 32))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"listening", 9);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  return a2;
}

void sub_1C525C340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MsrpTransportTls::handleIncomingConnection(void *a1, void *a2)
{
  uint64_t v4 = a1 + 10;
  uint64_t v5 = a1[25];
  uint64_t v6 = (*(uint64_t (**)(void *))(a1[10] + 56))(a1 + 10);
  (*(void (**)(void *, uint64_t))(*v4 + 16))(v4, v6);
  long long v7 = *(void **)(v6 + 8);
  if (v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"socket already set: ", 20);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[25] + 104))(&v23);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 40))(v23, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" ignoring: ", 11);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 104))(&v21);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 40))(v21, v6);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    uint64_t v8 = v24;
    if (!v24) {
      return;
    }
LABEL_25:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    return;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"incoming connection ", 20);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 104))(&v23);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 40))(v23, v6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  int v11 = (std::__shared_weak_count *)a1[26];
  a1[25] = v10;
  a1[26] = v9;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    uint64_t v10 = a1[25];
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v23, a1 + 1);
  if (v23) {
    uint64_t v12 = v23 + 24;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v19 = v12;
  long long v20 = v24;
  uint64_t v23 = 0;
  long long v24 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 184))(v10, &v19);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  int v13 = (std::__shared_weak_count *)a1[9];
  if (v13)
  {
    uint64_t v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = a1[8];
      if (v16)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 104))(&v17);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 16))(v16, &v17);
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      uint64_t v8 = v15;
      goto LABEL_25;
    }
  }
}

void sub_1C525C6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void MsrpTransportTls::handleDisconnect(MsrpTransportTls *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 8);
      if (v5)
      {
        (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 25) + 104))(&v7);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 24))(v5, &v7);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 26);
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C525C828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void MsrpTransportTls::connectionClosedByPeer(MsrpTransportTls *this)
{
  uint64_t v2 = (void **)((char *)this + 80);
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 56))((char *)this + 80);
  ((void (*)(void **, uint64_t))(*v2)[2])(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"closed by peer ", 15);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v2[15] + 104))(&v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, v3);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  MsrpTransportTls::handleDisconnect(this);
}

void sub_1C525C99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MsrpTransportTls::connectionClosedByPeer(MsrpTransportTls *this)
{
}

void MsrpTransportTls::connectionResetByPeer(MsrpTransportTls *this)
{
  uint64_t v2 = (void **)((char *)this + 80);
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 56))((char *)this + 80);
  ((void (*)(void **, uint64_t))(*v2)[2])(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"reset by peer ", 14);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v2[15] + 104))(&v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, v3);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  MsrpTransportTls::handleDisconnect(this);
}

void sub_1C525CB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MsrpTransportTls::connectionResetByPeer(MsrpTransportTls *this)
{
}

void MsrpTransportTls::handleConnectError(MsrpTransportTls *this, const ImsResult *a2)
{
  uint64_t v4 = (void **)((char *)this + 80);
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 56))((char *)this + 80);
  ((void (*)(void **, uint64_t))(*v4)[2])(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"connection error ", 17);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v4[15] + 104))(&v7);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v5);
  uint64_t v6 = *(void **)(v5 + 8);
  char v9 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v5);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  MsrpTransportTls::handleDisconnect(this);
}

void sub_1C525CCC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MsrpTransportTls::handleConnectError(MsrpTransportTls *this, const ImsResult *a2)
{
}

void MsrpTransportTls::handleSocketError(MsrpTransportTls *this, const ImsResult *a2)
{
  uint64_t v4 = (void **)((char *)this + 80);
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 56))((char *)this + 80);
  ((void (*)(void **, uint64_t))(*v4)[2])(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"socket error ", 13);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v4[15] + 104))(&v7);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v5);
  uint64_t v6 = *(void **)(v5 + 8);
  char v9 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v5);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  MsrpTransportTls::handleDisconnect(this);
}

void sub_1C525CE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MsrpTransportTls::handleSocketError(MsrpTransportTls *this, const ImsResult *a2)
{
}

void MsrpTransportTls::processDataFromSocket(void *a1, void *a2, size_t a3, void *a4)
{
  uint64_t v7 = (std::__shared_weak_count *)a1[9];
  if (!v7)
  {
    char v9 = 0;
    goto LABEL_7;
  }
  char v9 = std::__shared_weak_count::lock(v7);
  if (!v9 || (uint64_t v10 = a1[8]) == 0)
  {
LABEL_7:
    uint64_t v15 = a1[10];
    uint64_t v14 = a1 + 10;
    uint64_t v16 = (*(uint64_t (**)(void *))(v15 + 56))(v14);
    (*(void (**)(void *, uint64_t))(*v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"No delegate: dropping ", 22);
    *(unsigned char *)(v16 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v16 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" bytes from ", 12);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(void, uint64_t))(*(void *)*a4 + 40))(*a4, v16);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    if (!v9) {
      return;
    }
    goto LABEL_8;
  }
  uint64_t v12 = a1[10];
  int v11 = a1 + 10;
  uint64_t v13 = (*(uint64_t (**)(void *))(v12 + 64))(v11);
  (*(void (**)(void *, uint64_t))(*v11 + 16))(v11, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Received ", 9);
  *(unsigned char *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" bytes from ", 12);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(void, uint64_t))(*(void *)*a4 + 40))(*a4, v13);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = 0;
  std::string::basic_string[abi:ne180100](__p, a2, a3);
  (*(void (**)(uint64_t, void **))(*(void *)v10 + 32))(v10, __p);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_1C525D168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MsrpTransportTls::processDataFromSocket(uint64_t a1, void *a2, size_t a3, void *a4)
{
}

void *MsrpTransportTls::type@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "TLS");
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void std::allocate_shared[abi:ne180100]<ImsListenSocket,std::allocator<ImsListenSocket>,std::shared_ptr<MsrpTransportInterface>,DscpClass,void>(uint64_t *a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xA0uLL);
  std::__shared_ptr_emplace<ImsListenSocket>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<MsrpTransportInterface>,DscpClass,std::allocator<ImsListenSocket>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1C525D2D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ImsListenSocket>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<MsrpTransportInterface>,DscpClass,std::allocator<ImsListenSocket>,0>(void *a1, uint64_t *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20B9BC0;
  std::construct_at[abi:ne180100]<ImsListenSocket,std::shared_ptr<MsrpTransportInterface>,DscpClass,ImsListenSocket*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1C525D334(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ImsListenSocket>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9BC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsListenSocket>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9BC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<ImsListenSocket>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

uint64_t std::construct_at[abi:ne180100]<ImsListenSocket,std::shared_ptr<MsrpTransportInterface>,DscpClass,ImsListenSocket*>(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = (uint64_t)v4;
  *a2 = 0;
  a2[1] = 0;
  ImsListenSocket::ImsListenSocket(a1, v6, *a3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void sub_1C525D434(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<ImsTlsSocket>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9C10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsTlsSocket>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9C10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<ImsTlsSocket>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

uint64_t *std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    MEMORY[0x1C878E320](v2, 0x20C40DC1BFBCFLL);
  }
  return a1;
}

uint64_t *dispatch::async<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>(dispatch_queue_s *,std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  size_t v8 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *a1;
      if (*a1)
      {
        uint64_t v6 = (std::__shared_weak_count *)a1[3];
        uint64_t v9 = a1[2];
        uint64_t v10 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 16))(v5, &v9);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void sub_1C525D5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper,std::allocator<MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper,std::allocator<MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9C60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper,std::allocator<MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper::~MsrpTransportTlsWrapper(MsrpTransportTls *a1)
{
  MsrpTransportTls::~MsrpTransportTls(a1);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper::~MsrpTransportTlsWrapper(uint64_t a1)
{
}

{
  uint64_t vars8;

  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)(a1 - 24));
  JUMPOUT(0x1C878E320);
}

{
  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)(a1 - 80));
}

{
  uint64_t vars8;

  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)(a1 - 80));
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper,std::allocator<MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9DE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper,std::allocator<MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9DE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper,std::allocator<MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper::~MsrpTransportTlsWrapper(MsrpTransportTls *a1)
{
  MsrpTransportTls::~MsrpTransportTls(a1);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper::~MsrpTransportTlsWrapper(uint64_t a1)
{
}

{
  uint64_t vars8;

  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)(a1 - 24));
  JUMPOUT(0x1C878E320);
}

{
  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)(a1 - 80));
}

{
  uint64_t vars8;

  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)(a1 - 80));
  JUMPOUT(0x1C878E320);
}

void SipDialogInfoBody::SipDialogInfoBody(SipDialogInfoBody *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"></dialog-info>");
  SipGenericXmlBody::SipGenericXmlBody(this, &SipDialogInfoBody::kContentType, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_1F20B9F60;
  *((unsigned char *)this + 240) = 1;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = (char *)this + 256;
  *((unsigned char *)this + 272) = 1;
  *((_DWORD *)this + 69) = 0;
  *((unsigned char *)this + 280) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 36) = 0;
}

void sub_1C525D978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipGenericXmlBody::~SipGenericXmlBody(void **this)
{
  *this = &unk_1F20C0C58;
  XmlParserGenericItem::~XmlParserGenericItem((XmlParserGenericItem *)(this + 7));
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  *this = &unk_1F20CC498;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  *this = &unk_1F20C0C58;
  XmlParserGenericItem::~XmlParserGenericItem((XmlParserGenericItem *)(this + 7));
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  *this = &unk_1F20CC498;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C0C58;
  XmlParserGenericItem::~XmlParserGenericItem((XmlParserGenericItem *)(this + 7));
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  *this = &unk_1F20CC498;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipDialogTable::~SipDialogTable(void **this)
{
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy((uint64_t)this, this[1]);
}

double SipDialogInfoBody::setContent@<D0>(uint64_t a1@<X0>, bambi::XmlParser *a2@<X1>, uint64_t a3@<X2>, bambi::XmlParserItem *a4@<X3>, uint64_t a5@<X8>)
{
  SipGenericXmlBody::setContent(a1, a2, a3, a4, (uint64_t)v125);
  if ((*(uint64_t (**)(uint64_t, void))(*(void *)v126 + 24))(v126, v127)) {
    goto LABEL_13;
  }
  uint64_t v7 = a1 + 248;
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(a1 + 248, *(void **)(a1 + 256));
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(unsigned char *)(a1 + 280) = 0;
  uint64_t v8 = *(unsigned __int8 *)(a1 + 143);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 128);
  }
  if (v8 != 11
    || (v9 >= 0 ? (uint64_t v10 = (uint64_t *)(a1 + 120)) : (uint64_t v10 = *(uint64_t **)(a1 + 120)),
        (uint64_t v11 = *v10, v12 = *(uint64_t *)((char *)v10 + 3), v11 == 0x692D676F6C616964)
      ? (BOOL v13 = v12 == 0x6F666E692D676F6CLL)
      : (BOOL v13 = 0),
        !v13))
  {
    *(unsigned char *)(a1 + 240) = 0;
LABEL_13:
    ImsResult::~ImsResult((ImsResult *)v125);
    goto LABEL_14;
  }
  memset(&__str, 0, sizeof(__str));
  std::string::basic_string[abi:ne180100]<0>(v141, "state");
  uint64_t v16 = a1 + 56;
  int v17 = (*(uint64_t (**)(uint64_t, unsigned char *, std::string *))(*(void *)(a1 + 56) + 104))(a1 + 56, v141, &__str);
  if ((v141[23] & 0x80000000) != 0) {
    operator delete(*(void **)v141);
  }
  if (v17)
  {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      if (size == 4)
      {
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        BOOL v20 = LODWORD(p_str->__r_.__value_.__l.__data_) == 1819047270;
      }
      else
      {
        BOOL v20 = 0;
      }
      *(unsigned char *)(a1 + 272) = v20;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v141, "version");
  int v21 = (*(uint64_t (**)(uint64_t, unsigned char *, std::string *))(*(void *)v16 + 104))(a1 + 56, v141, &__str);
  if ((v141[23] & 0x80000000) != 0) {
    operator delete(*(void **)v141);
  }
  if (v21)
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__str.__r_.__value_.__l.__size_) {
        goto LABEL_37;
      }
      long long v22 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
        goto LABEL_37;
      }
      long long v22 = &__str;
    }
    *(_DWORD *)(a1 + 276) = strtoul((const char *)v22, 0, 10);
    *(unsigned char *)(a1 + 280) = 1;
  }
LABEL_37:
  std::string::basic_string[abi:ne180100]<0>(v141, "entity");
  int v23 = (*(uint64_t (**)(uint64_t, unsigned char *, std::string *))(*(void *)v16 + 104))(a1 + 56, v141, &__str);
  int v24 = v23;
  if ((v141[23] & 0x80000000) == 0)
  {
    if (!v23) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  operator delete(*(void **)v141);
  if (v24) {
LABEL_41:
  }
    std::string::operator=((std::string *)(a1 + 288), &__str);
LABEL_42:
  uint64_t v128 = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  std::vector<XmlParserGenericItem *>::__init_with_size[abi:ne180100]<XmlParserGenericItem **,XmlParserGenericItem **>(&v128, *(const void **)(a1 + 216), *(void *)(a1 + 224), (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 3);
  long long v26 = v128;
  long long v25 = v129;
  if (v128 == v129)
  {
LABEL_301:
    if (v26)
    {
      uint64_t v129 = v26;
      operator delete(v26);
    }
    char v119 = 1;
    goto LABEL_304;
  }
  std::string v123 = (void **)(a1 + 256);
  while (1)
  {
    uint64_t v27 = *v26;
    if (!*v26) {
      goto LABEL_296;
    }
    uint64_t v28 = *(unsigned __int8 *)(v27 + 87);
    int v29 = (char)v28;
    if ((v28 & 0x80u) != 0) {
      uint64_t v28 = *(void *)(v27 + 72);
    }
    if (v28 != 6) {
      goto LABEL_296;
    }
    uint64_t v30 = v29 >= 0 ? v27 + 64 : *(void *)(v27 + 64);
    if (*(_DWORD *)v30 != 1818323300 || *(_WORD *)(v30 + 4) != 26479) {
      goto LABEL_296;
    }
    int v32 = *(_DWORD *)v30;
    int v33 = *(unsigned __int16 *)(v30 + 4);
    if (v32 != 1818323300 || v33 != 26479) {
      break;
    }
    memset(&v138, 0, sizeof(v138));
    memset(&v137, 0, sizeof(v137));
    std::string::basic_string[abi:ne180100]<0>(v141, "id");
    int v35 = (*(uint64_t (**)(uint64_t, unsigned char *, std::string *))(*(void *)v27 + 104))(v27, v141, &v138);
    int v36 = v35;
    if ((v141[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v141);
      if (!v36) {
        goto LABEL_66;
      }
LABEL_65:
      std::string::operator=(&v137, &v138);
      goto LABEL_66;
    }
    if (v35) {
      goto LABEL_65;
    }
LABEL_66:
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v136, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
    }
    else {
      std::string v136 = v137;
    }
    uint64_t v37 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v7, (void **)&v136.__r_.__value_.__l.__data_);
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v136.__r_.__value_.__l.__data_);
    }
    if (v123 == v37) {
      operator new();
    }
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v135, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
    }
    else {
      std::string v135 = v137;
    }
    uint64_t v38 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v7, (void **)&v135.__r_.__value_.__l.__data_);
    if (v123 == v38) {
      int v39 = 0;
    }
    else {
      int v39 = v38 + 7;
    }
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v135.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(v141, "call-id");
    int v40 = (*(uint64_t (**)(uint64_t, unsigned char *, std::string *))(*(void *)v27 + 104))(v27, v141, &v138);
    int v41 = v40;
    if ((v141[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v141);
      if (!v41) {
        goto LABEL_86;
      }
LABEL_85:
      std::string::operator=((std::string *)v39 + 1, &v138);
      goto LABEL_86;
    }
    if (v40) {
      goto LABEL_85;
    }
LABEL_86:
    std::string::basic_string[abi:ne180100]<0>(v141, "local-tag");
    int v42 = (*(uint64_t (**)(uint64_t, unsigned char *, std::string *))(*(void *)v27 + 104))(v27, v141, &v138);
    int v43 = v42;
    if ((v141[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v141);
      if (!v43) {
        goto LABEL_91;
      }
LABEL_90:
      std::string::operator=((std::string *)v39 + 2, &v138);
      goto LABEL_91;
    }
    if (v42) {
      goto LABEL_90;
    }
LABEL_91:
    std::string::basic_string[abi:ne180100]<0>(v141, "remote-tag");
    int v44 = (*(uint64_t (**)(uint64_t, unsigned char *, std::string *))(*(void *)v27 + 104))(v27, v141, &v138);
    int v45 = v44;
    if ((v141[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v141);
      if (!v45) {
        goto LABEL_96;
      }
LABEL_95:
      std::string::operator=((std::string *)v39 + 3, &v138);
      goto LABEL_96;
    }
    if (v44) {
      goto LABEL_95;
    }
LABEL_96:
    std::string::basic_string[abi:ne180100]<0>(v141, "direction");
    int v46 = (*(uint64_t (**)(uint64_t, unsigned char *, std::string *))(*(void *)v27 + 104))(v27, v141, &v138);
    int v47 = v46;
    if ((v141[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v141);
      if (!v47) {
        goto LABEL_117;
      }
    }
    else if (!v46)
    {
      goto LABEL_117;
    }
    v141[0] = 1;
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v141[8], v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
      std::string::size_type v48 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
    }
    else
    {
      std::string::size_type v48 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
      *(std::string *)&v141[8] = v138;
    }
    int v49 = (char)v48;
    if ((v48 & 0x80u) != 0) {
      std::string::size_type v48 = v138.__r_.__value_.__l.__size_;
    }
    if (v48 == 9)
    {
      int v50 = (std::string *)v138.__r_.__value_.__r.__words[0];
      if (v49 >= 0) {
        int v50 = &v138;
      }
      std::string::size_type v51 = v50->__r_.__value_.__r.__words[0];
      int v52 = v50->__r_.__value_.__s.__data_[8];
      BOOL v53 = v51 == 0x6F74616974696E69 && v52 == 114;
      BOOL v54 = v53;
    }
    else
    {
      BOOL v54 = 0;
    }
    LOBYTE(v142) = v54;
    *((unsigned char *)v39 + 96) = v141[0];
    std::string::operator=((std::string *)(v39 + 13), (const std::string *)&v141[8]);
    *((unsigned char *)v39 + 128) = v142;
    if ((v141[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v141[8]);
    }
LABEL_117:
    uint64_t v124 = v39;
    long long __p = 0;
    unint64_t v133 = 0;
    uint64_t v134 = 0;
    std::vector<XmlParserGenericItem *>::__init_with_size[abi:ne180100]<XmlParserGenericItem **,XmlParserGenericItem **>(&__p, *(const void **)(v27 + 160), *(void *)(v27 + 168), (uint64_t)(*(void *)(v27 + 168) - *(void *)(v27 + 160)) >> 3);
    uint64_t v55 = (uint64_t *)__p;
    if (__p != v133)
    {
      uint64_t v122 = (std::string *)(v39 + 18);
      uint64_t v120 = (std::string *)(v39 + 37);
      long long v121 = (std::string *)(v39 + 34);
      while (1)
      {
        uint64_t v56 = *v55;
        if (!*v55) {
          goto LABEL_281;
        }
        int v57 = (uint64_t **)(v56 + 64);
        char v58 = *(unsigned char *)(v56 + 87);
        uint64_t v59 = v58 >= 0 ? *(unsigned __int8 *)(v56 + 87) : *(void *)(v56 + 72);
        if (v59 != 8) {
          break;
        }
        if (v58 >= 0) {
          long long v66 = (uint64_t *)(v56 + 64);
        }
        else {
          long long v66 = *v57;
        }
        if (*v66 != 0x6E6F697461727564) {
          goto LABEL_140;
        }
        memset(v141, 0, 24);
        if (*(char *)(v56 + 111) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v141, *(const std::string::value_type **)(v56 + 88), *(void *)(v56 + 96));
        }
        else
        {
          *(_OWORD *)std::string::size_type v141 = *(_OWORD *)(v56 + 88);
          *(void *)&v141[16] = *(void *)(v56 + 104);
        }
        if ((v141[23] & 0x80000000) != 0)
        {
          if (!*(void *)&v141[8]) {
            goto LABEL_209;
          }
          long long v97 = *(const char **)v141;
        }
        else
        {
          if (!v141[23]) {
            goto LABEL_281;
          }
          long long v97 = v141;
        }
        *((_DWORD *)v124 + 45) = strtoul(v97, 0, 10);
        *((unsigned char *)v124 + 184) = 1;
        if ((v141[23] & 0x80000000) != 0)
        {
LABEL_209:
          long long v98 = *(void **)v141;
LABEL_280:
          operator delete(v98);
        }
LABEL_281:
        if (++v55 == v133)
        {
          uint64_t v55 = (uint64_t *)__p;
          goto LABEL_287;
        }
      }
      if (v59 != 5
        || (v58 >= 0 ? (long long v60 = (uint64_t *)(v56 + 64)) : (long long v60 = *v57),
            (int v61 = *(_DWORD *)v60, v62 = *((unsigned __int8 *)v60 + 4), v61 == 1952543859)
          ? (BOOL v63 = v62 == 101)
          : (BOOL v63 = 0),
            !v63))
      {
LABEL_140:
        long long v67 = (uint64_t *)(v56 + 64);
        uint64_t v68 = *(unsigned __int8 *)(v56 + 87);
        if ((*(unsigned char *)(v56 + 87) & 0x80) != 0)
        {
          long long v67 = *v57;
          uint64_t v68 = *(void *)(v56 + 72);
        }
        if (v68 >= 9)
        {
          long long v69 = (char *)v67 + v68;
          uint64_t v70 = v67;
          while (1)
          {
            long long v71 = (char *)memchr(v70, 101, v68 - 8);
            if (!v71) {
              goto LABEL_161;
            }
            if (*(void *)v71 == 0x766973756C637865 && v71[8] == 101) {
              break;
            }
            uint64_t v70 = (uint64_t *)(v71 + 1);
            uint64_t v68 = v69 - (char *)v70;
            if (v69 - (char *)v70 < 9) {
              goto LABEL_161;
            }
          }
          if (v71 == v69 || v71 - (char *)v67 == -1) {
            goto LABEL_161;
          }
          if (v59 != 9)
          {
            if (v59 == 12)
            {
              if (v58 >= 0) {
                long long v73 = (uint64_t *)(v56 + 64);
              }
              else {
                long long v73 = *v57;
              }
              uint64_t v74 = *v73;
              int v75 = *((_DWORD *)v73 + 2);
              BOOL v76 = v74 == 0x756C6378653A6173;
              int v77 = 1702259059;
              goto LABEL_229;
            }
            goto LABEL_298;
          }
          if (v58 >= 0) {
            char v102 = (uint64_t *)(v56 + 64);
          }
          else {
            char v102 = *v57;
          }
          uint64_t v103 = *v102;
          int v75 = *((unsigned __int8 *)v102 + 8);
          BOOL v76 = v103 == 0x766973756C637865;
          int v77 = 101;
LABEL_229:
          if (!v76 || v75 != v77)
          {
LABEL_298:
            if (__p)
            {
              unint64_t v133 = (uint64_t *)__p;
              operator delete(__p);
            }
            int v118 = 0;
            goto LABEL_290;
          }
          memset(v141, 0, 24);
          if (*(char *)(v56 + 111) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v141, *(const std::string::value_type **)(v56 + 88), *(void *)(v56 + 96));
          }
          else
          {
            *(_OWORD *)std::string::size_type v141 = *(_OWORD *)(v56 + 88);
            *(void *)&v141[16] = *(void *)(v56 + 104);
          }
          uint64_t v105 = v141[23];
          int v106 = v141[23];
          if (v141[23] < 0) {
            uint64_t v105 = *(void *)&v141[8];
          }
          if (v105 == 5)
          {
            char v108 = 0;
            uint64_t v109 = *(unsigned char **)v141;
            if (v141[23] >= 0) {
              uint64_t v109 = v141;
            }
            int v110 = *(_DWORD *)v109;
            int v111 = v109[4];
            if (v110 == 1936482662 && v111 == 101)
            {
              char v117 = 0;
              goto LABEL_285;
            }
            if ((v141[23] & 0x80000000) == 0) {
              goto LABEL_254;
            }
          }
          else
          {
            if (v105 != 4) {
              goto LABEL_244;
            }
            uint64_t v107 = *(unsigned char **)v141;
            if (v141[23] >= 0) {
              uint64_t v107 = v141;
            }
            if (*(_DWORD *)v107 != 1702195828)
            {
LABEL_244:
              char v108 = 0;
              if ((v141[23] & 0x80000000) != 0) {
                goto LABEL_245;
              }
LABEL_254:
              if (v108) {
                goto LABEL_281;
              }
              goto LABEL_298;
            }
            char v117 = 1;
LABEL_285:
            *((unsigned char *)v124 + 176) = v117;
            char v108 = 1;
            if ((v106 & 0x80000000) == 0) {
              goto LABEL_254;
            }
          }
LABEL_245:
          operator delete(*(void **)v141);
          if (v108) {
            goto LABEL_281;
          }
          goto LABEL_298;
        }
LABEL_161:
        switch(v59)
        {
          case 5:
            if (v58 >= 0) {
              long long v78 = (uint64_t *)(v56 + 64);
            }
            else {
              long long v78 = *v57;
            }
            int v79 = *(_DWORD *)v78;
            int v80 = *((unsigned __int8 *)v78 + 4);
            if (v79 != 1633906540 || v80 != 108) {
              goto LABEL_281;
            }
            std::string::basic_string[abi:ne180100]<0>(v141, "local");
            char v82 = SipDialogTableParser::parseParticipant(v56, (SipDialogInfo *)v124, v141);
            goto LABEL_180;
          case 6:
            if (v58 >= 0) {
              long long v83 = (uint64_t *)(v56 + 64);
            }
            else {
              long long v83 = *v57;
            }
            int v84 = *(_DWORD *)v83;
            int v85 = *((unsigned __int16 *)v83 + 2);
            if (v84 != 1869440370 || v85 != 25972) {
              goto LABEL_281;
            }
            std::string::basic_string[abi:ne180100]<0>(v141, "remote");
            char v82 = SipDialogTableParser::parseParticipant(v56, (SipDialogInfo *)v124, v141);
LABEL_180:
            char v87 = v82;
            if ((v141[23] & 0x80000000) != 0) {
              operator delete(*(void **)v141);
            }
            if ((v87 & 1) == 0) {
              goto LABEL_298;
            }
            goto LABEL_281;
          case 8:
            if (v58 >= 0) {
              long long v88 = (uint64_t *)(v56 + 64);
            }
            else {
              long long v88 = *v57;
            }
            if (*v88 != 0x736563616C706572) {
              goto LABEL_281;
            }
            memset(&v145, 0, sizeof(v145));
            long long v142 = 0u;
            memset(&v143, 0, sizeof(v143));
            memset(v141, 0, sizeof(v141));
            std::string::basic_string[abi:ne180100]<0>(&v144, "call-id");
            int v89 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(void *)v56 + 104))(v56, &v144, &v145);
            int v90 = v89;
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v144.__r_.__value_.__l.__data_);
              if (!v90) {
                goto LABEL_258;
              }
            }
            else if (!v89)
            {
              goto LABEL_258;
            }
            std::string::operator=((std::string *)v141, &v145);
LABEL_258:
            std::string::basic_string[abi:ne180100]<0>(&v144, "local-tag");
            int v113 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(void *)v56 + 104))(v56, &v144, &v145);
            int v114 = v113;
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v144.__r_.__value_.__l.__data_);
              if (!v114) {
                goto LABEL_266;
              }
            }
            else if (!v113)
            {
              goto LABEL_266;
            }
            std::string::operator=((std::string *)&v141[24], &v145);
LABEL_266:
            std::string::basic_string[abi:ne180100]<0>(&v144, "remote-tag");
            int v115 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(void *)v56 + 104))(v56, &v144, &v145);
            int v116 = v115;
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v144.__r_.__value_.__l.__data_);
              if (!v116) {
                goto LABEL_271;
              }
            }
            else if (!v115)
            {
              goto LABEL_271;
            }
            std::string::operator=(&v143, &v145);
LABEL_271:
            SipDialogInfo::setReplaces((std::string *)v124, (const std::string *)v141);
            if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v143.__r_.__value_.__l.__data_);
            }
            goto LABEL_273;
          case 11:
            if (v58 >= 0) {
              uint64_t v91 = (uint64_t *)(v56 + 64);
            }
            else {
              uint64_t v91 = *v57;
            }
            uint64_t v92 = *v91;
            uint64_t v93 = *(uint64_t *)((char *)v91 + 3);
            if (v92 != 0x6465727265666572 || v93 != 0x79622D6465727265) {
              goto LABEL_281;
            }
            memset(&v145, 0, sizeof(v145));
            long long v142 = 0u;
            memset(v141, 0, sizeof(v141));
            std::string::basic_string[abi:ne180100]<0>(&v144, "display");
            int v95 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(void *)v56 + 104))(v56, &v144, &v145);
            int v96 = v95;
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v144.__r_.__value_.__l.__data_);
              if (!v96) {
                goto LABEL_263;
              }
            }
            else if (!v95)
            {
              goto LABEL_263;
            }
            std::string::operator=((std::string *)v141, &v145);
LABEL_263:
            std::string::operator=((std::string *)&v141[24], (const std::string *)(v56 + 88));
            std::string::operator=(v121, (const std::string *)v141);
            std::string::operator=(v120, (const std::string *)&v141[24]);
            *((unsigned char *)v124 + 320) = 1;
LABEL_273:
            if (SHIBYTE(v142) < 0) {
              operator delete(*(void **)&v141[24]);
            }
            if ((v141[23] & 0x80000000) == 0) {
              goto LABEL_278;
            }
            uint64_t v101 = *(void **)v141;
            break;
          default:
            goto LABEL_281;
        }
        goto LABEL_277;
      }
      memset(&v145, 0, sizeof(v145));
      memset(&v144, 0, sizeof(v144));
      memset(&v140, 0, sizeof(v140));
      memset(&v139, 0, sizeof(v139));
      std::string::basic_string[abi:ne180100]<0>(v141, "code");
      int v64 = (*(uint64_t (**)(uint64_t, unsigned char *, std::string *))(*(void *)v56 + 104))(v56, v141, &v145);
      int v65 = v64;
      if ((v141[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v141);
        if (!v65) {
          goto LABEL_212;
        }
      }
      else if (!v64)
      {
LABEL_212:
        std::string::basic_string[abi:ne180100]<0>(v141, "event");
        int v99 = (*(uint64_t (**)(uint64_t, unsigned char *, std::string *))(*(void *)v56 + 104))(v56, v141, &v145);
        int v100 = v99;
        if ((v141[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v141);
          if (!v100)
          {
LABEL_217:
            std::string::operator=(&v139, (const std::string *)(v56 + 88));
            SipDialogState::SipDialogState((uint64_t)v141, (uint64_t *)&v139, &v140, (uint64_t)&v144);
            *((_DWORD *)v124 + 34) = *(_DWORD *)v141;
            std::string::operator=(v122, (const std::string *)&v141[8]);
            *((_WORD *)v124 + 84) = v142;
            *((unsigned char *)v124 + 170) = BYTE2(v142);
            if ((v141[31] & 0x80000000) != 0) {
              operator delete(*(void **)&v141[8]);
            }
            if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v139.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v140.__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_278:
              if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
              {
                long long v98 = (void *)v145.__r_.__value_.__r.__words[0];
                goto LABEL_280;
              }
              goto LABEL_281;
            }
            uint64_t v101 = (void *)v144.__r_.__value_.__r.__words[0];
LABEL_277:
            operator delete(v101);
            goto LABEL_278;
          }
        }
        else if (!v99)
        {
          goto LABEL_217;
        }
        std::string::operator=(&v140, &v145);
        goto LABEL_217;
      }
      std::string::operator=(&v144, &v145);
      goto LABEL_212;
    }
LABEL_287:
    if (v55)
    {
      unint64_t v133 = v55;
      operator delete(v55);
    }
    int v118 = 1;
LABEL_290:
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v137.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v138.__r_.__value_.__l.__data_);
    }
    if (!v118) {
      break;
    }
    long long v25 = v129;
    uint64_t v7 = a1 + 248;
LABEL_296:
    if (++v26 == v25)
    {
      long long v26 = v128;
      goto LABEL_301;
    }
  }
  if (v128)
  {
    uint64_t v129 = v128;
    operator delete(v128);
  }
  char v119 = 0;
LABEL_304:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(a1 + 240) = v119;
  ImsResult::~ImsResult((ImsResult *)v125);
  if (v119)
  {
    int v14 = 0;
    goto LABEL_15;
  }
LABEL_14:
  int v14 = 1073741835;
LABEL_15:
  double result = 0.0;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(void *)a5 = &unk_1F20B2680;
  *(void *)(a5 + 8) = &_bambiDomain;
  *(_DWORD *)(a5 + 16) = v14;
  return result;
}

void sub_1C525EBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  ImsResult::~ImsResult((ImsResult *)&a19);
  _Unwind_Resume(a1);
}

uint64_t SipDialogInfoBody::decode(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 120))(&v3);
  uint64_t v1 = (*(unsigned int (**)(uint64_t, void))(*(void *)v4 + 24))(v4, v5) ^ 1;
  ImsResult::~ImsResult((ImsResult *)&v3);
  return v1;
}

void sub_1C525EED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipDialogInfoBody::~SipDialogInfoBody(void **this)
{
  SipDialogInfoBody::~SipDialogInfoBody(this);
  JUMPOUT(0x1C878E320);
}

{
  char *v2;

  *this = &unk_1F20B9F60;
  uint64_t v2 = (char *)(this + 31);
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy((uint64_t)v2, this[32]);
  *this = &unk_1F20C0C58;
  XmlParserGenericItem::~XmlParserGenericItem((XmlParserGenericItem *)(this + 7));
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  *this = &unk_1F20CC498;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void SipDialogInfoBody::clone(SipDialogInfoBody *this)
{
}

void sub_1C525EFE0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(v2, *(void **)(v1 + 256));
  SipGenericXmlBody::~SipGenericXmlBody((void **)v1);
  MEMORY[0x1C878E320](v1, 0x10B3C40E8B2BFBALL);
  _Unwind_Resume(a1);
}

uint64_t SipGenericXmlBody::contentType(SipGenericXmlBody *this)
{
  return (uint64_t)this + 32;
}

uint64_t SipGenericXmlBody::rootItem(SipGenericXmlBody *this)
{
  return (uint64_t)this + 56;
}

uint64_t *std::map<std::string,SipDialogInfo>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,SipDialogInfo>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,SipDialogInfo>,std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1C525F078(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,SipDialogInfo>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,SipDialogInfo>,std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unsigned int v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      double result = std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,SipDialogInfo> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,SipDialogInfo> const&>(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__construct_node<std::pair<std::string const,SipDialogInfo> const&>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__construct_node<std::pair<std::string const,SipDialogInfo> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (char *)operator new(0x290uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  double result = std::pair<std::string const,SipDialogInfo>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1C525F21C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,SipDialogInfo>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  SipDialogInfo::SipDialogInfo(this + 1, (const SipDialogInfo *)((char *)a2 + 24));
  return this;
}

void sub_1C525F290(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void SipDialogInfo::SipDialogInfo(std::string *this, const SipDialogInfo *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  SipDialogDirection::SipDialogDirection(&this[4], (uint64_t)a2 + 96);
  SipDialogState::SipDialogState((uint64_t)&this[5].__r_.__value_.__r.__words[2], (uint64_t)a2 + 136);
  std::string::size_type v8 = *((void *)a2 + 22);
  this[7].__r_.__value_.__s.__data_[16] = *((unsigned char *)a2 + 184);
  this[7].__r_.__value_.__l.__size_ = v8;
  if (*((char *)a2 + 215) < 0)
  {
    std::string::__init_copy_ctor_external(this + 8, *((const std::string::value_type **)a2 + 24), *((void *)a2 + 25));
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 12);
    this[8].__r_.__value_.__r.__words[2] = *((void *)a2 + 26);
    *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a2 + 239) < 0)
  {
    std::string::__init_copy_ctor_external(this + 9, *((const std::string::value_type **)a2 + 27), *((void *)a2 + 28));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 216);
    this[9].__r_.__value_.__r.__words[2] = *((void *)a2 + 29);
    *(_OWORD *)&this[9].__r_.__value_.__l.__data_ = v10;
  }
  uint64_t v11 = this + 10;
  if (*((char *)a2 + 263) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *((const std::string::value_type **)a2 + 30), *((void *)a2 + 31));
  }
  else
  {
    long long v12 = *((_OWORD *)a2 + 15);
    this[10].__r_.__value_.__r.__words[2] = *((void *)a2 + 32);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  this[11].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 264);
  if (*((char *)a2 + 295) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 272), *((const std::string::value_type **)a2 + 34), *((void *)a2 + 35));
  }
  else
  {
    long long v13 = *((_OWORD *)a2 + 17);
    this[12].__r_.__value_.__r.__words[0] = *((void *)a2 + 36);
    *(_OWORD *)&this[11].__r_.__value_.__r.__words[1] = v13;
  }
  int v14 = (std::string *)((char *)this + 296);
  if (*((char *)a2 + 319) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *((const std::string::value_type **)a2 + 37), *((void *)a2 + 38));
  }
  else
  {
    long long v15 = *(_OWORD *)((char *)a2 + 296);
    this[13].__r_.__value_.__r.__words[0] = *((void *)a2 + 39);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  this[13].__r_.__value_.__s.__data_[8] = *((unsigned char *)a2 + 320);
  SipDialogParticipantInfo::SipDialogParticipantInfo((SipDialogParticipantInfo *)&this[13].__r_.__value_.__r.__words[2], (const SipDialogInfo *)((char *)a2 + 328));
  this[19].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 456);
  SipDialogParticipantInfo::SipDialogParticipantInfo((SipDialogParticipantInfo *)&this[19].__r_.__value_.__r.__words[1], (const SipDialogInfo *)((char *)a2 + 464));
  this[24].__r_.__value_.__s.__data_[16] = *((unsigned char *)a2 + 592);
}

void sub_1C525F4F0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 295) < 0) {
    operator delete(*v6);
  }
  SipLazuliManager::OutgoingMsrp::~OutgoingMsrp(v5);
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*(void **)(v1 + 144));
  }
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*(void **)(v1 + 104));
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void SipDialogParticipantInfo::~SipDialogParticipantInfo(void **this)
{
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  uint64_t v2 = this[9];
  if (v2)
  {
    this[10] = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 6), this[7]);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v3 = this;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&v3);
}

unsigned char *SipDialogDirection::SipDialogDirection(unsigned char *a1, uint64_t a2)
{
  *a1 = *(unsigned char *)a2;
  long long v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  a1[32] = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t SipDialogState::SipDialogState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  return a1;
}

void SipDialogParticipantInfo::SipDialogParticipantInfo(SipDialogParticipantInfo *this, const SipDialogParticipantInfo *a2)
{
  *(void *)this = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<SipDialogParticipantIdentity>::__init_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(this, *(void *)a2, *((void *)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4));
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 24);
    *((void *)this + 5) = *((void *)a2 + 5);
    *(_OWORD *)((char *)this + 24) = v4;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)this + 6, (uint64_t)a2 + 48);
  *((void *)this + 9) = 0;
  *((void *)this + SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = 0;
  *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  std::vector<SipDialogParticipantMediaAttribute>::__init_with_size[abi:ne180100]<SipDialogParticipantMediaAttribute*,SipDialogParticipantMediaAttribute*>((void *)this + 9, *((const void **)a2 + 9), *((void *)a2 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2));
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
  long long v5 = (std::string *)((char *)this + 104);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 104);
    *((void *)this + 15) = *((void *)a2 + 15);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1C525F834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  int v14 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 80) = v14;
    operator delete(v14);
  }
  BambiEmergencyUrnMap::~BambiEmergencyUrnMap(v11);
  a10 = v10;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void *std::vector<SipDialogParticipantIdentity>::__init_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<bambi::XmlTreeNs>::__vallocate[abi:ne180100](result, a4);
    double result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipDialogParticipantIdentity>,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C525F8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipDialogParticipantIdentity>,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<SipDialogParticipantIdentity,SipDialogParticipantIdentity&,SipDialogParticipantIdentity*>((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C525F974(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<SipDialogParticipantIdentity,SipDialogParticipantIdentity&,SipDialogParticipantIdentity*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1C525FA14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<SipDialogParticipantMediaAttribute>::__init_with_size[abi:ne180100]<SipDialogParticipantMediaAttribute*,SipDialogParticipantMediaAttribute*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    double result = std::vector<SipDialogParticipantMediaAttribute>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8 - 3);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C525FA90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<SipDialogParticipantMediaAttribute>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogParticipantMediaAttribute>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogParticipantMediaAttribute>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a2);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipDialogInfo>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipDialogInfo>,0>(uint64_t a1)
{
  SipDialogInfo::~SipDialogInfo((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void SipDialogInfo::~SipDialogInfo(void **this)
{
  if (*((char *)this + 591) < 0) {
    operator delete(this[71]);
  }
  uint64_t v2 = this[67];
  if (v2)
  {
    this[68] = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 64), this[65]);
  if (*((char *)this + 511) < 0) {
    operator delete(this[61]);
  }
  uint64_t v4 = this + 58;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 455) < 0) {
    operator delete(this[54]);
  }
  uint64_t v3 = this[50];
  if (v3)
  {
    this[51] = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 47), this[48]);
  if (*((char *)this + 375) < 0) {
    operator delete(this[44]);
  }
  uint64_t v4 = this + 41;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 319) < 0) {
    operator delete(this[37]);
  }
  if (*((char *)this + 295) < 0) {
    operator delete(this[34]);
  }
  if (*((char *)this + 263) < 0) {
    operator delete(this[30]);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipDialogInfo>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void *std::vector<XmlParserGenericItem *>::__init_with_size[abi:ne180100]<XmlParserGenericItem **,XmlParserGenericItem **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 61) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    double result = std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(result + 2), a4);
    uint64_t v7 = result;
    void *v4 = result;
    v4[1] = result;
    _OWORD v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      double result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1C525FE44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipDialogTableParser::parseParticipant(uint64_t a1, SipDialogInfo *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 87);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 72);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  uint64_t v10 = (const void **)(a1 + 64);
  if (v7 >= 0) {
    uint64_t v11 = a3;
  }
  else {
    uint64_t v11 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v10, v11, *(void *)(a1 + 72))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 87))
  {
    while (*(unsigned __int8 *)v10 == *v11)
    {
      uint64_t v10 = (const void **)((char *)v10 + 1);
      ++v11;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  v124[1] = 0;
  long long v122 = 0u;
  v124[0] = 0;
  int64x2_t v120 = 0u;
  *(_OWORD *)long long v121 = 0u;
  std::string v123 = (uint64_t *)v124;
  memset(&v128, 0, sizeof(v128));
  uint64_t v127 = 0;
  long long v126 = 0uLL;
  unint64_t v125 = 0;
  char v117 = 0;
  int v118 = 0;
  long long v13 = *(const void **)(a1 + 160);
  uint64_t v14 = *(void *)(a1 + 168);
  uint64_t v119 = 0;
  std::vector<XmlParserGenericItem *>::__init_with_size[abi:ne180100]<XmlParserGenericItem **,XmlParserGenericItem **>(&v117, v13, v14, (v14 - (uint64_t)v13) >> 3);
  long long v15 = v117;
  if (v117 == v118) {
    goto LABEL_226;
  }
  int v114 = v3;
  int v115 = a2;
  do
  {
    uint64_t v16 = *v15;
    if (!*v15) {
      goto LABEL_223;
    }
    int v17 = (uint64_t *)(v16 + 64);
    uint64_t v18 = *(unsigned __int8 *)(v16 + 87);
    int v19 = (char)v18;
    if ((v18 & 0x80u) != 0) {
      uint64_t v18 = *(void *)(v16 + 72);
    }
    if (v18 > 14)
    {
      if (v18 != 15)
      {
        if (v18 != 19) {
          goto LABEL_223;
        }
        if (v19 < 0) {
          int v17 = (uint64_t *)*v17;
        }
        long long v22 = (uint64_t *)*v17;
        uint64_t v23 = v17[1];
        uint64_t v24 = *(uint64_t *)((char *)v17 + 11);
        BOOL v25 = v22 == (uint64_t *)0x2D6E6F6973736573 && v23 == 0x7470697263736564;
        if (!v25 || v24 != 0x6E6F697470697263) {
          goto LABEL_223;
        }
        long long v133 = 0uLL;
        *(void *)&long long v134 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "type");
        int v27 = (*(uint64_t (**)(uint64_t, std::__split_buffer<std::pair<std::string, std::string>> *, long long *))(*(void *)v16 + 104))(v16, &__p, &v133);
        int v28 = v27;
        if (SHIBYTE(__p.__end_) < 0)
        {
          operator delete(__p.__first_);
          if (!v28) {
            goto LABEL_157;
          }
        }
        else if (!v27)
        {
LABEL_157:
          if (SBYTE7(v134) < 0) {
            operator delete((void *)v133);
          }
          goto LABEL_223;
        }
        std::string::operator=(&v128, (const std::string *)&v133);
        goto LABEL_157;
      }
      if (v19 < 0) {
        int v17 = (uint64_t *)*v17;
      }
      int v34 = (uint64_t *)*v17;
      uint64_t v35 = *(uint64_t *)((char *)v17 + 7);
      if (v34 != (uint64_t *)0x747441616964656DLL || v35 != 0x7365747562697274) {
        goto LABEL_223;
      }
      memset(&__str, 0, sizeof(__str));
      std::vector<XmlParserGenericItem *>::__init_with_size[abi:ne180100]<XmlParserGenericItem **,XmlParserGenericItem **>(&__str, *(const void **)(v16 + 160), *(void *)(v16 + 168), (uint64_t)(*(void *)(v16 + 168) - *(void *)(v16 + 160)) >> 3);
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
      uint64_t v38 = (uint64_t *)__str.__r_.__value_.__r.__words[0];
      if (__str.__r_.__value_.__r.__words[0] == __str.__r_.__value_.__l.__size_)
      {
        uint64_t v116 = 0;
        char v39 = 0;
LABEL_133:
        uint64_t v65 = v126;
        if ((unint64_t)v126 >= *((void *)&v126 + 1))
        {
          unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v126 - (void)v125) >> 2);
          unint64_t v68 = v67 + 1;
          if (v67 + 1 > 0x1555555555555555) {
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*((void *)&v126 + 1) - (void)v125) >> 2) > v68) {
            unint64_t v68 = 0x5555555555555556 * ((uint64_t)(*((void *)&v126 + 1) - (void)v125) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v126 + 1) - (void)v125) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v69 = 0x1555555555555555;
          }
          else {
            unint64_t v69 = v68;
          }
          if (v69) {
            uint64_t v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogParticipantMediaAttribute>>((uint64_t)&v126 + 8, v69);
          }
          else {
            uint64_t v70 = 0;
          }
          int v100 = &v70[12 * v67];
          *(_DWORD *)int v100 = HIDWORD(v116);
          *((_DWORD *)v100 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v116;
          v100[8] = v39;
          *(_WORD *)(v100 + 9) = 0;
          v100[11] = 0;
          char v102 = v125;
          uint64_t v101 = (char *)v126;
          uint64_t v103 = v100;
          if ((char *)v126 != v125)
          {
            do
            {
              uint64_t v104 = *(void *)(v101 - 12);
              v101 -= 12;
              char v105 = v101[8];
              *(void *)(v103 - 12) = v104;
              v103 -= 12;
              v103[8] = v105;
            }
            while (v101 != v102);
            uint64_t v101 = v125;
          }
          long long v66 = v100 + 12;
          unint64_t v125 = v103;
          *(void *)&long long v126 = v100 + 12;
          *((void *)&v126 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &v70[12 * v69];
          if (v101) {
            operator delete(v101);
          }
        }
        else
        {
          *(_DWORD *)long long v126 = HIDWORD(v116);
          *(_DWORD *)(v65 + 4) = v116;
          *(unsigned char *)(v65 + 8) = v39;
          *(_WORD *)(v65 + 9) = 0;
          long long v66 = (char *)(v65 + 12);
          *(unsigned char *)(v65 + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
        }
        *(void *)&long long v126 = v66;
        int v106 = 1;
LABEL_220:
        if (__str.__r_.__value_.__r.__words[0])
        {
          __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v106) {
          goto LABEL_223;
        }
        if (v117)
        {
          int v118 = v117;
          operator delete(v117);
        }
        uint64_t v12 = 0;
        goto LABEL_240;
      }
      uint64_t v116 = 0;
      char v39 = 0;
      while (1)
      {
        uint64_t v40 = *v38;
        if (!*v38) {
          goto LABEL_114;
        }
        int v41 = (uint64_t *)(v40 + 64);
        uint64_t v42 = *(unsigned __int8 *)(v40 + 87);
        int v43 = (char)v42;
        if ((v42 & 0x80u) != 0) {
          uint64_t v42 = *(void *)(v40 + 72);
        }
        switch(v42)
        {
          case 5:
            int v50 = (uint64_t *)*v41;
            if (v43 >= 0) {
              int v50 = v41;
            }
            if (*((unsigned char *)v50 + 4) == 48 && *(_DWORD *)v50 == 1953656688) {
              char v39 = 1;
            }
            goto LABEL_114;
          case 14:
            if (v43 < 0) {
              int v41 = (uint64_t *)*v41;
            }
            int v47 = (uint64_t *)*v41;
            uint64_t v48 = *(uint64_t *)((char *)v41 + 6);
            if (v47 != (uint64_t *)0x726944616964656DLL || v48 != 0x6E6F697463657269) {
              goto LABEL_114;
            }
            long long v133 = 0uLL;
            *(void *)&long long v134 = 0;
            if (*(char *)(v40 + 111) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v133, *(const std::string::value_type **)(v40 + 88), *(void *)(v40 + 96));
            }
            else
            {
              long long v133 = *(_OWORD *)(v40 + 88);
              *(void *)&long long v134 = *(void *)(v40 + 104);
            }
            unsigned int v52 = 0;
            BOOL v53 = 1;
            while (1)
            {
              LODWORD(v139.__r_.__value_.__l.__data_) = v52;
              ims::toString<MediaDirection>((unsigned int *)&v139, &__p);
              int end_high = SHIBYTE(__p.__end_);
              std::__split_buffer<std::pair<std::string, std::string>>::pointer first = __p.__first_;
              if (SHIBYTE(__p.__end_) >= 0) {
                std::__split_buffer<std::pair<std::string, std::string>>::pointer p_p = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&__p;
              }
              else {
                std::__split_buffer<std::pair<std::string, std::string>>::pointer p_p = __p.__first_;
              }
              if ((SBYTE7(v134) & 0x80u) == 0) {
                int v57 = (const char *)&v133;
              }
              else {
                int v57 = (const char *)v133;
              }
              int v58 = strcasecmp((const char *)p_p, v57);
              if (end_high < 0) {
                operator delete(first);
              }
              if (!v58) {
                break;
              }
              BOOL v53 = v52++ < 4;
              if (v52 == 5)
              {
                BOOL v53 = 0;
                goto LABEL_111;
              }
            }
            HIDWORD(v116) = v52;
LABEL_111:
            if ((SBYTE7(v134) & 0x80000000) == 0) {
              goto LABEL_113;
            }
            break;
          case 9:
            if (v43 < 0) {
              int v41 = (uint64_t *)*v41;
            }
            int v44 = (uint64_t *)*v41;
            int v45 = *((unsigned __int8 *)v41 + 8);
            if (v44 != (uint64_t *)0x707954616964656DLL || v45 != 101) {
              goto LABEL_114;
            }
            long long v133 = 0uLL;
            *(void *)&long long v134 = 0;
            if (*(char *)(v40 + 111) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v133, *(const std::string::value_type **)(v40 + 88), *(void *)(v40 + 96));
            }
            else
            {
              long long v133 = *(_OWORD *)(v40 + 88);
              *(void *)&long long v134 = *(void *)(v40 + 104);
            }
            unint64_t v59 = 0;
            BOOL v53 = 1;
            while (1)
            {
              if ((SBYTE7(v134) & 0x80u) == 0) {
                long long v60 = (const char *)&v133;
              }
              else {
                long long v60 = (const char *)v133;
              }
              int v61 = SHIBYTE(__p.__end_);
              std::__split_buffer<std::pair<std::string, std::string>>::pointer v62 = __p.__first_;
              if (SHIBYTE(__p.__end_) >= 0) {
                std::__split_buffer<std::pair<std::string, std::string>>::pointer v63 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&__p;
              }
              else {
                std::__split_buffer<std::pair<std::string, std::string>>::pointer v63 = __p.__first_;
              }
              int v64 = strcasecmp(v60, (const char *)v63);
              if (v61 < 0) {
                operator delete(v62);
              }
              if (!v64) {
                break;
              }
              BOOL v53 = v59++ < 6;
              if (v59 == 7)
              {
                BOOL v53 = 0;
                goto LABEL_130;
              }
            }
            LODWORD(v116) = v59;
LABEL_130:
            if ((SBYTE7(v134) & 0x80000000) == 0) {
              goto LABEL_113;
            }
            break;
          default:
            goto LABEL_114;
        }
        operator delete((void *)v133);
LABEL_113:
        if (!v53)
        {
          int v106 = 0;
          goto LABEL_220;
        }
LABEL_114:
        if (++v38 == (uint64_t *)size) {
          goto LABEL_133;
        }
      }
    }
    if (v18 != 6)
    {
      if (v18 != 8) {
        goto LABEL_223;
      }
      if (v19 < 0) {
        int v17 = (uint64_t *)*v17;
      }
      if (*v17 != 0x797469746E656469) {
        goto LABEL_223;
      }
      memset(&__str, 0, sizeof(__str));
      long long v134 = 0u;
      long long v135 = 0u;
      long long v133 = 0u;
      std::string::basic_string[abi:ne180100]<0>(&__p, "display");
      int v20 = (*(uint64_t (**)(uint64_t, std::__split_buffer<std::pair<std::string, std::string>> *, std::string *))(*(void *)v16 + 104))(v16, &__p, &__str);
      int v21 = v20;
      if (SHIBYTE(__p.__end_) < 0)
      {
        operator delete(__p.__first_);
        if (!v21) {
          goto LABEL_145;
        }
      }
      else if (!v20)
      {
LABEL_145:
        std::string::operator=((std::string *)((char *)&v134 + 8), (const std::string *)(v16 + 88));
        long long v71 = (std::pair<std::string, std::string> *)v120.i64[1];
        if ((void *)v120.i64[1] >= v121[0])
        {
          unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((v120.i64[1] - v120.i64[0]) >> 4);
          unint64_t v74 = v73 + 1;
          if (v73 + 1 > 0x555555555555555) {
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((uint64_t)v121[0] - v120.i64[0]) >> 4) > v74) {
            unint64_t v74 = 0x5555555555555556 * (((uint64_t)v121[0] - v120.i64[0]) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v121[0] - v120.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v75 = 0x555555555555555;
          }
          else {
            unint64_t v75 = v74;
          }
          __p.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)v121;
          if (v75) {
            BOOL v76 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>>((uint64_t)v121, v75);
          }
          else {
            BOOL v76 = 0;
          }
          __p.__first_ = v76;
          __p.__begin_ = v76 + v73;
          __p.__end_ = __p.__begin_;
          __p.__end_cap_.__value_ = &v76[v75];
          std::construct_at[abi:ne180100]<SipDialogParticipantIdentity,SipDialogParticipantIdentity const&,SipDialogParticipantIdentity*>(&__p.__begin_->first, &v133);
          uint64_t v92 = v120.i64[1];
          uint64_t v93 = v120.i64[0];
          std::__split_buffer<std::pair<std::string, std::string>>::pointer begin = __p.__begin_;
          std::__split_buffer<std::pair<std::string, std::string>>::pointer end = __p.__end_;
          if (v120.i64[1] == v120.i64[0])
          {
            int64x2_t v98 = vdupq_n_s64(v120.u64[1]);
          }
          else
          {
            do
            {
              long long v96 = *(_OWORD *)(v92 - 48);
              begin[-1].first.__r_.__value_.__r.__words[2] = *(void *)(v92 - 32);
              *(_OWORD *)&begin[-1].first.__r_.__value_.__l.__data_ = v96;
              *(void *)(v92 - 40) = 0;
              *(void *)(v92 - 32) = 0;
              *(void *)(v92 - 48) = 0;
              long long v97 = *(_OWORD *)(v92 - 24);
              begin[-1].second.__r_.__value_.__r.__words[2] = *(void *)(v92 - 8);
              *(_OWORD *)&begin[-1].second.__r_.__value_.__l.__data_ = v97;
              --begin;
              *(void *)(v92 - 16) = 0;
              *(void *)(v92 - 8) = 0;
              *(void *)(v92 - 24) = 0;
              v92 -= 48;
            }
            while (v92 != v93);
            int64x2_t v98 = v120;
          }
          std::__split_buffer<std::pair<std::string, std::string>>::pointer v72 = end + 1;
          v120.i64[0] = (uint64_t)begin;
          v120.i64[1] = (uint64_t)&end[1];
          *(int64x2_t *)&__p.__begin_ = v98;
          int v99 = (std::pair<std::string, std::string> *)v121[0];
          v121[0] = __p.__end_cap_.__value_;
          __p.__end_cap_.__value_ = v99;
          __p.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v98.i64[0];
          std::__split_buffer<bambi::XmlTreeNs>::~__split_buffer(&__p);
        }
        else
        {
          std::construct_at[abi:ne180100]<SipDialogParticipantIdentity,SipDialogParticipantIdentity const&,SipDialogParticipantIdentity*>((std::string *)v120.i64[1], &v133);
          std::__split_buffer<std::pair<std::string, std::string>>::pointer v72 = v71 + 1;
        }
        v120.i64[1] = (uint64_t)v72;
        if (SHIBYTE(v135) < 0) {
          operator delete(*((void **)&v134 + 1));
        }
        if (SBYTE7(v134) < 0) {
          operator delete((void *)v133);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v91 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_212:
          operator delete(v91);
        }
        goto LABEL_223;
      }
      std::string::operator=((std::string *)&v133, &__str);
      goto LABEL_145;
    }
    if (v19 < 0) {
      int v17 = (uint64_t *)*v17;
    }
    int v29 = *(_DWORD *)v17;
    int v30 = *((unsigned __int16 *)v17 + 2);
    if (v29 != 1735549300 || v30 != 29797) {
      goto LABEL_223;
    }
    memset(&v136, 0, sizeof(v136));
    *(void *)&long long v134 = 0;
    long long v135 = 0u;
    long long v133 = 0u;
    *((void *)&v134 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &v135;
    std::string::basic_string[abi:ne180100]<0>(&__p, "uri");
    int v32 = (*(uint64_t (**)(uint64_t, std::__split_buffer<std::pair<std::string, std::string>> *, std::string *))(*(void *)v16 + 104))(v16, &__p, &v136);
    int v33 = v32;
    if (SHIBYTE(__p.__end_) < 0)
    {
      operator delete(__p.__first_);
      if (!v33) {
        goto LABEL_162;
      }
LABEL_161:
      std::string::operator=((std::string *)&v133, &v136);
      goto LABEL_162;
    }
    if (v32) {
      goto LABEL_161;
    }
LABEL_162:
    uint64_t v130 = 0;
    long long v131 = 0;
    uint64_t v132 = 0;
    std::vector<XmlParserGenericItem *>::__init_with_size[abi:ne180100]<XmlParserGenericItem **,XmlParserGenericItem **>(&v130, *(const void **)(v16 + 160), *(void *)(v16 + 168), (uint64_t)(*(void *)(v16 + 168) - *(void *)(v16 + 160)) >> 3);
    long long v78 = v130;
    int v77 = v131;
    if (v130 == v131) {
      goto LABEL_194;
    }
    do
    {
      uint64_t v79 = *v78;
      if (*v78)
      {
        uint64_t v80 = *(unsigned __int8 *)(v79 + 87);
        int v81 = (char)v80;
        if ((v80 & 0x80u) != 0) {
          uint64_t v80 = *(void *)(v79 + 72);
        }
        if (v80 == 5)
        {
          uint64_t v82 = v81 >= 0 ? v79 + 64 : *(void *)(v79 + 64);
          int v83 = *(_DWORD *)v82;
          int v84 = *(unsigned __int8 *)(v82 + 4);
          if (v83 == 1634886000 && v84 == 109)
          {
            memset(&__p, 0, 24);
            memset(&__str, 0, sizeof(__str));
            memset(&v139, 0, sizeof(v139));
            std::string::basic_string[abi:ne180100]<0>(v137, "pname");
            int v86 = (*(uint64_t (**)(uint64_t, long long **, std::__split_buffer<std::pair<std::string, std::string>> *))(*(void *)v79 + 104))(v79, v137, &__p);
            int v87 = v86;
            if (v138 < 0)
            {
              operator delete(v137[0]);
              if (!v87) {
                goto LABEL_180;
              }
            }
            else if (!v86)
            {
LABEL_180:
              std::string::basic_string[abi:ne180100]<0>(v137, "pval");
              int v88 = (*(uint64_t (**)(uint64_t, long long **, std::__split_buffer<std::pair<std::string, std::string>> *))(*(void *)v79 + 104))(v79, v137, &__p);
              int v89 = v88;
              if (v138 < 0)
              {
                operator delete(v137[0]);
                if (!v89)
                {
LABEL_185:
                  v137[0] = (long long *)&__str;
                  int v90 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v134 + 1, (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v137);
                  std::string::operator=((std::string *)(v90 + 7), &v139);
                  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v139.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(__p.__end_) < 0) {
                    operator delete(__p.__first_);
                  }
                  int v77 = v131;
                  goto LABEL_192;
                }
              }
              else if (!v88)
              {
                goto LABEL_185;
              }
              std::string::operator=(&v139, (const std::string *)&__p);
              goto LABEL_185;
            }
            std::string::operator=(&__str, (const std::string *)&__p);
            goto LABEL_180;
          }
        }
      }
LABEL_192:
      ++v78;
    }
    while (v78 != v77);
    long long v78 = v130;
LABEL_194:
    if (v78)
    {
      long long v131 = v78;
      operator delete(v78);
    }
    std::string::operator=((std::string *)&v121[1], (const std::string *)&v133);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(&v123, *((long long **)&v134 + 1), &v135);
    LOBYTE(v127) = 1;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v134 + 8, (void *)v135);
    if (SBYTE7(v134) < 0) {
      operator delete((void *)v133);
    }
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v91 = (void *)v136.__r_.__value_.__r.__words[0];
      goto LABEL_212;
    }
LABEL_223:
    ++v15;
  }
  while (v15 != v118);
  long long v15 = v117;
  uint64_t v3 = v114;
  a2 = v115;
LABEL_226:
  if (v15)
  {
    int v118 = v15;
    operator delete(v15);
  }
  uint64_t v107 = v3[23];
  int v108 = (char)v107;
  if ((v107 & 0x80u) != 0) {
    uint64_t v107 = *((void *)v3 + 1);
  }
  if (v107 == 5
    && (v108 >= 0 ? (uint64_t v109 = (int *)v3) : (uint64_t v109 = *(int **)v3),
        (v110 = *v109, int v111 = *((unsigned __int8 *)v109 + 4), v110 == 1633906540) ? (v112 = v111 == 108) : (v112 = 0),
        v112))
  {
    SipDialogInfo::setLocal(a2, (const SipDialogParticipantInfo *)&v120);
  }
  else
  {
    SipDialogInfo::setRemote(a2, (const SipDialogParticipantInfo *)&v120);
  }
  uint64_t v12 = 1;
LABEL_240:
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v128.__r_.__value_.__l.__data_);
  }
  if (v125)
  {
    *(void *)&long long v126 = v125;
    operator delete(v125);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v123, v124[0]);
  if (SHIBYTE(v122) < 0) {
    operator delete(v121[1]);
  }
  *(void *)&long long v133 = &v120;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  return v12;
}

void sub_1C5260B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__pa,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__split_buffer<std::pair<std::string, std::string>> *a31,uint64_t a32,uint64_t a33)
{
  uint64_t v35 = *(void **)(v33 - 120);
  if (v35)
  {
    *(void *)(v33 - 112) = v35;
    operator delete(v35);
  }
  if (__pa) {
    operator delete(__pa);
  }
  SipDialogParticipantInfo::~SipDialogParticipantInfo(&a23);
  _Unwind_Resume(a1);
}

void SipDialogInfo::SipDialogInfo(SipDialogInfo *this)
{
  *((unsigned char *)this + 96) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 13, "");
  *((unsigned char *)this + 128) = 0;
  std::string::basic_string[abi:ne180100]<0>(v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  SipDialogState::SipDialogState((uint64_t)this + 136, (uint64_t *)v5, &__str, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  *((unsigned char *)this + 176) = 0;
  *((_DWORD *)this + 45) = 0;
  *((unsigned char *)this + 184) = 0;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *(_OWORD *)((char *)this + 249) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((unsigned char *)this + 320) = 0;
  *((void *)this + 47) = (char *)this + 384;
  *((void *)this + 48) = 0;
  *((unsigned char *)this + 424) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 5bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 66) = 0;
  *((void *)this + 65) = 0;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0u;
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 54) = 0;
  *((unsigned char *)this + 456) = 0;
  *((void *)this + 64) = (char *)this + 520;
  *((void *)this + 69) = 0;
  *((void *)this + 67) = 0;
  *((void *)this + 68) = 0;
  *((unsigned char *)this + 560) = 0;
  *((void *)this + 73) = 0;
  *((void *)this + 7bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 72) = 0;
  *((unsigned char *)this + 592) = 0;
}

void sub_1C5260E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 + 127) < 0) {
    operator delete(*v28);
  }
  if (*(char *)(v27 + 95) < 0) {
    operator delete(*(void **)(v27 + 72));
  }
  if (*(char *)(v27 + 71) < 0) {
    operator delete(*(void **)(v27 + 48));
  }
  if (*(char *)(v27 + 47) < 0) {
    operator delete(*(void **)(v27 + 24));
  }
  if (*(char *)(v27 + 23) < 0) {
    operator delete(*(void **)v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipDialogState::SipDialogState(uint64_t a1, uint64_t *a2, std::string *__str, uint64_t a4)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  uint64_t v6 = *((unsigned __int8 *)a2 + 23);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = a2[1];
  }
  switch(v6)
  {
    case 5:
      if (v7 >= 0) {
        uint64_t v8 = a2;
      }
      else {
        uint64_t v8 = (uint64_t *)*a2;
      }
      int v9 = *(_DWORD *)v8;
      int v10 = *((unsigned __int8 *)v8 + 4);
      if (v9 == 1819435365 && v10 == 121)
      {
        int v12 = 3;
        goto LABEL_45;
      }
      goto LABEL_46;
    case 6:
      if (v7 >= 0) {
        long long v13 = (int *)a2;
      }
      else {
        long long v13 = (int *)*a2;
      }
      int v14 = *v13;
      int v15 = *((unsigned __int16 *)v13 + 2);
      if (v14 == 1769566836 && v15 == 26478)
      {
        int v12 = 1;
        goto LABEL_45;
      }
      goto LABEL_46;
    case 9:
      if (v7 >= 0) {
        int v17 = a2;
      }
      else {
        int v17 = (uint64_t *)*a2;
      }
      uint64_t v18 = *v17;
      int v19 = *((unsigned __int8 *)v17 + 8);
      if (v18 == 0x656D7269666E6F63 && v19 == 100)
      {
        int v12 = 4;
        goto LABEL_45;
      }
      goto LABEL_46;
    case 10:
      if (v7 >= 0) {
        int v21 = a2;
      }
      else {
        int v21 = (uint64_t *)*a2;
      }
      if (*v21 == 0x69646565636F7270 && *((_WORD *)v21 + 4) == 26478)
      {
        int v12 = 2;
        goto LABEL_45;
      }
      uint64_t v23 = *v21;
      int v24 = *((unsigned __int16 *)v21 + 4);
      if (v23 == 0x74616E696D726574 && v24 == 25701)
      {
        int v12 = 5;
LABEL_45:
        *(_DWORD *)a1 = v12;
      }
LABEL_46:
      std::string::operator=((std::string *)(a1 + 8), __str);
      uint64_t v26 = *(unsigned __int8 *)(a4 + 23);
      if ((v26 & 0x80u) != 0) {
        uint64_t v26 = *(void *)(a4 + 8);
      }
      if (v26)
      {
        *(unsigned char *)(a1 + 34) = 1;
        if (*(char *)(a4 + 23) >= 0) {
          uint64_t v27 = (const char *)a4;
        }
        else {
          uint64_t v27 = *(const char **)a4;
        }
        *(_WORD *)(a1 + 32) = strtoul(v27, 0, 10);
      }
      return a1;
    default:
      goto LABEL_46;
  }
}

void sub_1C5261100(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipDialogInfo::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a2 + 104));
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
  char v4 = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = v4;
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  std::string::operator=((std::string *)(a1 + 240), (const std::string *)(a2 + 240));
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  std::string::operator=((std::string *)(a1 + 272), (const std::string *)(a2 + 272));
  std::string::operator=((std::string *)(a1 + 296), (const std::string *)(a2 + 296));
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  if (a1 != a2)
  {
    std::vector<SipDialogParticipantIdentity>::__assign_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(a1 + 328, *(std::string **)(a2 + 328), *(std::string **)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 4));
    std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 376), *(long long **)(a2 + 376), (long long *)(a2 + 384));
    std::vector<SipDialogParticipantMediaAttribute>::__assign_with_size[abi:ne180100]<SipDialogParticipantMediaAttribute*,SipDialogParticipantMediaAttribute*>((char *)(a1 + 400), *(char **)(a2 + 400), *(void *)(a2 + 408), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 408) - *(void *)(a2 + 400)) >> 2));
  }
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  std::string::operator=((std::string *)(a1 + 432), (const std::string *)(a2 + 432));
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
  if (a1 != a2)
  {
    std::vector<SipDialogParticipantIdentity>::__assign_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(a1 + 464, *(std::string **)(a2 + 464), *(std::string **)(a2 + 472), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 472) - *(void *)(a2 + 464)) >> 4));
    std::string::operator=((std::string *)(a1 + 488), (const std::string *)(a2 + 488));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 512), *(long long **)(a2 + 512), (long long *)(a2 + 520));
    std::vector<SipDialogParticipantMediaAttribute>::__assign_with_size[abi:ne180100]<SipDialogParticipantMediaAttribute*,SipDialogParticipantMediaAttribute*>((char *)(a1 + 536), *(char **)(a2 + 536), *(void *)(a2 + 544), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 2));
  }
  *(unsigned char *)(a1 + 560) = *(unsigned char *)(a2 + 560);
  std::string::operator=((std::string *)(a1 + 568), (const std::string *)(a2 + 568));
  *(unsigned char *)(a1 + 592) = *(unsigned char *)(a2 + 592);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (char *)operator new(0x290uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  double result = std::pair<std::string const,SipDialogInfo>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1C5261430(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,SipDialogInfo>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  bzero(&this[1], 0x258uLL);
  SipDialogInfo::SipDialogInfo((SipDialogInfo *)&this[1]);
  return this;
}

void sub_1C52614B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__erase_unique<std::string>(uint64_t **a1, void **a2)
{
  long long v3 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  char v4 = v3;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipDialogInfo>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void std::vector<SipDialogParticipantIdentity>::__assign_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<SipDialogParticipantIdentity>::__vdeallocate((void **)a1);
    if (a4 > 0x555555555555555) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<bambi::XmlTreeNs>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipDialogParticipantIdentity>,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(v8, (uint64_t)__str, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    long long v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipDialogParticipantIdentity *,SipDialogParticipantIdentity *,SipDialogParticipantIdentity *>((int)&v17, __str, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipDialogParticipantIdentity>,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipDialogParticipantIdentity *,SipDialogParticipantIdentity *,SipDialogParticipantIdentity *>((int)&v18, __str, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 48;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1C5261698(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C52616A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<SipDialogParticipantIdentity>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    char v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v3);
      }
      while ((void *)v3 != v1);
      char v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipDialogParticipantIdentity *,SipDialogParticipantIdentity *,SipDialogParticipantIdentity *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    this += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

char *std::vector<SipDialogParticipantMediaAttribute>::__assign_with_size[abi:ne180100]<SipDialogParticipantMediaAttribute*,SipDialogParticipantMediaAttribute*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      uint64_t v7[2] = 0;
    }
    if (a4 > 0x1555555555555555) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x1555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    double result = std::vector<SipDialogParticipantMediaAttribute>::__vallocate[abi:ne180100](v7, v12);
    uint64_t v14 = (char *)v7[1];
    long long v13 = (void **)(v7 + 1);
    int v9 = v14;
LABEL_16:
    uint64_t v17 = a3 - (void)__src;
    if (v17)
    {
      size_t v18 = v17 - 3;
      int v19 = v9;
      int v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v15 - v9 - 3);
    int v9 = (char *)*v13;
  }
  uint64_t v17 = a3 - (void)v16;
  if (v17)
  {
    size_t v18 = v17 - 3;
    int v19 = v9;
    int v20 = v16;
LABEL_18:
    double result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  std::string *v13 = &v9[v17];
  return result;
}

std::string *SipDialogInfo::setReplaces(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 8, a2);
  std::string::operator=(a1 + 9, a2 + 1);
  double result = std::string::operator=(a1 + 10, a2 + 2);
  a1[11].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

std::string *SipDialogInfo::setLocal(SipDialogInfo *this, const SipDialogParticipantInfo *a2)
{
  char v4 = (SipDialogInfo *)((char *)this + 328);
  if (v4 == a2)
  {
    std::string::operator=((std::string *)((char *)this + 352), (const std::string *)a2 + 1);
  }
  else
  {
    std::vector<SipDialogParticipantIdentity>::__assign_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>((uint64_t)v4, *(std::string **)a2, *((std::string **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4));
    std::string::operator=((std::string *)((char *)this + 352), (const std::string *)a2 + 1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 47, *((long long **)a2 + 6), (long long *)((char *)a2 + 56));
    std::vector<SipDialogParticipantMediaAttribute>::__assign_with_size[abi:ne180100]<SipDialogParticipantMediaAttribute*,SipDialogParticipantMediaAttribute*>((char *)this + 400, *((char **)a2 + 9), *((void *)a2 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2));
  }
  *((unsigned char *)this + 424) = *((unsigned char *)a2 + 96);
  double result = std::string::operator=((std::string *)this + 18, (const std::string *)((char *)a2 + 104));
  *((unsigned char *)this + 456) = 1;
  return result;
}

std::string *SipDialogInfo::setRemote(SipDialogInfo *this, const SipDialogParticipantInfo *a2)
{
  char v4 = (SipDialogInfo *)((char *)this + 464);
  if (v4 == a2)
  {
    std::string::operator=((std::string *)((char *)this + 488), (const std::string *)a2 + 1);
  }
  else
  {
    std::vector<SipDialogParticipantIdentity>::__assign_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>((uint64_t)v4, *(std::string **)a2, *((std::string **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4));
    std::string::operator=((std::string *)((char *)this + 488), (const std::string *)a2 + 1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 64, *((long long **)a2 + 6), (long long *)((char *)a2 + 56));
    std::vector<SipDialogParticipantMediaAttribute>::__assign_with_size[abi:ne180100]<SipDialogParticipantMediaAttribute*,SipDialogParticipantMediaAttribute*>((char *)this + 536, *((char **)a2 + 9), *((void *)a2 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2));
  }
  *((unsigned char *)this + 560) = *((unsigned char *)a2 + 96);
  double result = std::string::operator=((std::string *)((char *)this + 568), (const std::string *)((char *)a2 + 104));
  *((unsigned char *)this + 592) = 1;
  return result;
}

std::string *std::construct_at[abi:ne180100]<SipDialogParticipantIdentity,SipDialogParticipantIdentity const&,SipDialogParticipantIdentity*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1C5261AF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_SipDialogInfoBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&SipDialogInfoBody::kContentType, "application/dialog-info+xml");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &SipDialogInfoBody::kContentType, &dword_1C51D1000);
}

const char *ims::analytics::asString(unsigned int a1)
{
  if (a1 > 0x3D) {
    return "RtpError Undefined";
  }
  else {
    return off_1E650F510[a1];
  }
}

uint64_t awd::metrics::protobuf_ShutdownFile_CATM_2eproto(awd::metrics *this)
{
  if (qword_1EBBDBCA8) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBCA8 + 8))(qword_1EBBDBCA8);
  }
  if (qword_1EBBDBCB0) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBCB0 + 8))(qword_1EBBDBCB0);
  }
  if (qword_1EBBDBCB8) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBCB8 + 8))(qword_1EBBDBCB8);
  }
  if (qword_1EBBDBCC0) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBCC0 + 8))(qword_1EBBDBCC0);
  }
  if (qword_1EBBDBCC8) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBCC8 + 8))(qword_1EBBDBCC8);
  }
  if (qword_1EBBDBCD0) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBCD0 + 8))(qword_1EBBDBCD0);
  }
  if (qword_1EBBDBCD8) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBCD8 + 8))(qword_1EBBDBCD8);
  }
  if (qword_1EBBDBCE0) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBCE0 + 8))(qword_1EBBDBCE0);
  }
  if (qword_1EBBDBCE8) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBCE8 + 8))(qword_1EBBDBCE8);
  }
  if (qword_1EBBDBCF0) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBCF0 + 8))(qword_1EBBDBCF0);
  }
  if (qword_1EBBDBCF8) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBCF8 + 8))(qword_1EBBDBCF8);
  }
  if (qword_1EBBDBD00) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBD00 + 8))(qword_1EBBDBD00);
  }
  if (qword_1EBBDBD08) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBD08 + 8))(qword_1EBBDBD08);
  }
  if (qword_1EBBDBD10) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBD10 + 8))(qword_1EBBDBD10);
  }
  if (qword_1EBBDBD18) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBD18 + 8))(qword_1EBBDBD18);
  }
  if (qword_1EBBDBD20) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBD20 + 8))(qword_1EBBDBD20);
  }
  if (qword_1EBBDBD28) {
    (*(void (**)(uint64_t))(*(void *)qword_1EBBDBD28 + 8))(qword_1EBBDBD28);
  }
  uint64_t result = qword_1EBBDBD30;
  if (qword_1EBBDBD30)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)qword_1EBBDBD30 + 8);
    return v2();
  }
  return result;
}

uint64_t awd::metrics::session_termination_reason_IsValid(awd::metrics *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if ((v1 - 1) >= 0xA)
  {
    unsigned int v3 = v1 - 101;
    if (v3 > 9 || ((1 << v3) & 0x27F) == 0) {
      return 0;
    }
  }
  return result;
}

BOOL awd::metrics::enum_ATM_CallEndReason_IsValid(awd::metrics *this)
{
  int v1 = (int)this;
  BOOL result = 1;
  uint64_t v3 = (v1 + 1);
  if (v3 > 0x2A || v3 == 19) {
    return v1 == 99;
  }
  return result;
}

uint64_t awd::metrics::RESPONSE_Code_IsValid(awd::metrics *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 > 477)
  {
    if (v1 > 999)
    {
      if (((v1 - 1000) > 0x1F || v1 == 1018)
        && ((v1 - 1500) > 0xD || ((1 << (v1 + 36)) & 0x203F) == 0)
        && v1 != 1580)
      {
        return 0;
      }
      return result;
    }
    if (v1 > 579)
    {
      if (((v1 - 580) > 0x1A || ((1 << (v1 - 68)) & 0x5900001) == 0) && v1 != 700 && v1 != 800) {
        return 0;
      }
      return result;
    }
    unsigned int v7 = v1 - 478;
    if (v7 > 0x23) {
      return 0;
    }
    uint64_t v5 = 1 << v7;
    uint64_t v6 = 0x80FC1A7FDLL;
LABEL_23:
    if ((v5 & v6) != 0) {
      return result;
    }
    return 0;
  }
  if (v1 <= 179)
  {
    if (v1 < 0x1F) {
      return result;
    }
    unsigned int v4 = v1 - 50;
    if (v4 > 0x32) {
      return 0;
    }
    uint64_t v5 = 1 << v4;
    uint64_t v6 = 0x4000000000C03;
    goto LABEL_23;
  }
  if (((v1 - 380) > 0x2B || ((1 << (v1 - 124)) & 0xF1E7FF00001) == 0)
    && ((v1 - 180) > 0x16 || ((1 << (v1 + 76)) & 0x58000F) == 0))
  {
    unsigned int v3 = v1 - 300;
    if (v3 > 5 || ((1 << v3) & 0x27) == 0) {
      return 0;
    }
  }
  return result;
}

double awd::metrics::ATM_Registration_Attempt::SharedCtor(awd::metrics::ATM_Registration_Attempt *this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 2) = v1;
  *((unsigned char *)this + 60) = 0;
  *(void *)&double result = 0x100000001;
  *((void *)this + 3) = 0x100000001;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 4) = v1;
  *((void *)this + 5) = v1;
  *(_WORD *)((char *)this + 6bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 6) = v1;
  *((void *)this + 8) = v1;
  *((void *)this + 9) = v1;
  *((void *)this + SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = v1;
  *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v1;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = v1;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = v1;
  *((void *)this + 19) = 0;
  return result;
}

void *awd::metrics::ATM_Registration_Attempt::SharedDtor(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[2];
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (void *)MEMORY[0x1C878E320](v2, 0x1012C40EC159624);
  }
  uint64_t v5 = v1[4];
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    this = (void *)MEMORY[0x1C878E320](v5, 0x1012C40EC159624);
  }
  uint64_t v7 = v1[5];
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    this = (void *)MEMORY[0x1C878E320](v7, 0x1012C40EC159624);
  }
  uint64_t v9 = v1[6];
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    this = (void *)MEMORY[0x1C878E320](v9, 0x1012C40EC159624);
  }
  uint64_t v11 = v1[8];
  if (v11 != v3 && v11)
  {
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    this = (void *)MEMORY[0x1C878E320](v11, 0x1012C40EC159624);
  }
  uint64_t v12 = v1[9];
  if (v12 != v3 && v12)
  {
    if (*(char *)(v12 + 23) < 0) {
      operator delete(*(void **)v12);
    }
    this = (void *)MEMORY[0x1C878E320](v12, 0x1012C40EC159624);
  }
  uint64_t v13 = v1[10];
  if (v13 != v3 && v13)
  {
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    this = (void *)MEMORY[0x1C878E320](v13, 0x1012C40EC159624);
  }
  uint64_t v14 = v1[11];
  if (v14 != v3 && v14)
  {
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    this = (void *)MEMORY[0x1C878E320](v14, 0x1012C40EC159624);
  }
  uint64_t v15 = v1[15];
  if (v15 != v3 && v15)
  {
    if (*(char *)(v15 + 23) < 0) {
      operator delete(*(void **)v15);
    }
    this = (void *)MEMORY[0x1C878E320](v15, 0x1012C40EC159624);
  }
  uint64_t v16 = v1[18];
  if (v16 != v3 && v16)
  {
    if (*(char *)(v16 + 23) < 0) {
      operator delete(*(void **)v16);
    }
    JUMPOUT(0x1C878E320);
  }
  return this;
}

void awd::metrics::ATM_Registration_Attempt::~ATM_Registration_Attempt(awd::metrics::ATM_Registration_Attempt *this)
{
  *(void *)this = &unk_1F20BA008;
  awd::metrics::ATM_Registration_Attempt::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20BA008;
  awd::metrics::ATM_Registration_Attempt::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::ATM_Registration_Attempt::New(awd::metrics::ATM_Registration_Attempt *this)
{
}

uint64_t awd::metrics::ATM_Registration_Attempt::Clear(uint64_t this)
{
  char v1 = *(unsigned char *)(this + 156);
  if (v1)
  {
    *(void *)(this + 8) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(this + 16);
      if (v2 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    *(unsigned char *)(this + 60) = 0;
    *(void *)(this + 24) = 0x100000001;
    *(_DWORD *)(this + 56) = 0;
    if ((*(unsigned char *)(this + 156) & 0x40) != 0)
    {
      uint64_t v3 = *(void *)(this + 32);
      if (v3 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(this + 156) & 0x80) != 0)
    {
      uint64_t v4 = *(void *)(this + 40);
      if (v4 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
  }
  unsigned int v5 = *(_DWORD *)(this + 156);
  if ((v5 & 0xFF00) != 0)
  {
    *(unsigned char *)(this + 6bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    if ((v5 & 0x200) != 0)
    {
      uint64_t v6 = *(void *)(this + 48);
      if (v6 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(unsigned char **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v6 = 0;
          *(unsigned char *)(v6 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(this + 157) & 4) != 0)
    {
      uint64_t v7 = *(void *)(this + 64);
      if (v7 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(unsigned char **)uint64_t v7 = 0;
          *(void *)(v7 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v7 = 0;
          *(unsigned char *)(v7 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(this + 157) & 8) != 0)
    {
      uint64_t v8 = *(void *)(this + 72);
      if (v8 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(unsigned char **)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v8 = 0;
          *(unsigned char *)(v8 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(this + 157) & 0x10) != 0)
    {
      uint64_t v9 = *(void *)(this + 80);
      if (v9 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v9 + 23) < 0)
        {
          **(unsigned char **)uint64_t v9 = 0;
          *(void *)(v9 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v9 = 0;
          *(unsigned char *)(v9 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(this + 157) & 0x20) != 0)
    {
      uint64_t v10 = *(void *)(this + 88);
      if (v10 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(unsigned char **)uint64_t v10 = 0;
          *(void *)(v10 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v10 = 0;
          *(unsigned char *)(v10 + 23) = 0;
        }
      }
    }
    *(void *)(this + 96) = 0;
    unsigned int v5 = *(_DWORD *)(this + 156);
  }
  if ((v5 & 0xFF0000) != 0)
  {
    *(_DWORD *)(this + 128) = 0;
    *(void *)(this + 104) = 0;
    *(void *)(this + 112) = 0;
    if ((v5 & 0x200000) != 0)
    {
      uint64_t v11 = *(void *)(this + 120);
      if (v11 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(unsigned char **)uint64_t v11 = 0;
          *(void *)(v11 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v11 = 0;
          *(unsigned char *)(v11 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 132) = 0;
    *(_DWORD *)(this + 136) = 0;
    unsigned int v5 = *(_DWORD *)(this + 156);
  }
  if (HIBYTE(v5))
  {
    *(unsigned char *)(this + 62) = 0;
    *(_DWORD *)(this + 140) = 0;
    if ((v5 & 0x4000000) != 0)
    {
      uint64_t v12 = *(void *)(this + 144);
      if (v12 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v12 + 23) < 0)
        {
          **(unsigned char **)uint64_t v12 = 0;
          *(void *)(v12 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v12 = 0;
          *(unsigned char *)(v12 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 156) = 0;
  return this;
}

uint64_t awd::metrics::ATM_Registration_Attempt::MergePartialFromCodedStream(awd::metrics::ATM_Registration_Attempt *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 56);
  unsigned int v5 = (unsigned int *)((char *)this + 96);
  uint64_t v6 = (unsigned int *)((char *)this + 100);
  uint64_t v7 = (unsigned int *)((char *)this + 104);
  uint64_t v80 = (unsigned int *)((char *)this + 112);
  int v81 = (unsigned int *)((char *)this + 108);
  uint64_t v79 = (unsigned int *)((char *)this + 116);
  int v77 = (unint64_t *)((char *)this + 8);
  long long v78 = (unsigned int *)((char *)this + 128);
  uint64_t v8 = (unsigned int *)((char *)this + 132);
  uint64_t v9 = (unsigned int *)((char *)this + 136);
  uint64_t v10 = (unsigned int *)((char *)this + 140);
  uint64_t v11 = MEMORY[0x1E4FBA920];
  while (2)
  {
    uint64_t v12 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 < 0)
    {
      TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      TagFallbacuint64_t k = *v12;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v12 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    unsigned int v14 = TagFallback >> 3;
    switch(TagFallback >> 3)
    {
      case 1u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        uint64_t v17 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v77);
          if (!result) {
            return result;
          }
          size_t v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v77 = *v17;
          size_t v18 = v17 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v18;
        }
        int v21 = *((_DWORD *)this + 39) | 1;
        *((_DWORD *)this + 39) = v21;
        if ((unint64_t)v18 < v16 && *v18 == 18)
        {
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v18 + 1;
          goto LABEL_125;
        }
        continue;
      case 2u:
        int v15 = TagFallback & 7;
        if (v15 != 2) {
          goto LABEL_84;
        }
        int v21 = *((_DWORD *)this + 39);
LABEL_125:
        *((_DWORD *)this + 39) = v21 | 2;
        if (*((void *)this + 2) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        BOOL v53 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        if ((unint64_t)v53 >= v22 || *v53 != 24) {
          continue;
        }
        uint64_t v23 = v53 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v23;
LABEL_131:
        unsigned int v82 = 0;
        if ((unint64_t)v23 >= v22 || *v23 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v82);
          if (!result) {
            return result;
          }
          unsigned int v54 = v82;
          uint64_t v55 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v22 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v54 = *v23;
          uint64_t v55 = v23 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v55;
        }
        *((unsigned char *)this + 60) = v54 != 0;
        *((_DWORD *)this + 39) |= 4u;
        if ((unint64_t)v55 >= v22 || *v55 != 32) {
          continue;
        }
        int v24 = v55 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v24;
LABEL_139:
        unsigned int v82 = 0;
        if ((unint64_t)v24 >= v22 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v82);
          if (!result) {
            return result;
          }
          unsigned int v56 = v82;
        }
        else
        {
          unsigned int v56 = *v24;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v24 + 1;
        }
        if (v56 - 1 <= 0xC)
        {
          *((_DWORD *)this + 39) |= 8u;
          *((_DWORD *)this + 6) = v56;
        }
        int v57 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        if ((unint64_t)v57 >= v25 || *v57 != 40) {
          continue;
        }
        uint64_t v26 = v57 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v26;
LABEL_149:
        unsigned int v82 = 0;
        if ((unint64_t)v26 >= v25 || *v26 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v82);
          if (!result) {
            return result;
          }
          unsigned int v58 = v82;
        }
        else
        {
          unsigned int v58 = *v26;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v26 + 1;
        }
        if (v58 - 1 <= 3)
        {
          *((_DWORD *)this + 39) |= 0x10u;
          *((_DWORD *)this + 7) = v58;
        }
        unint64_t v59 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        if ((unint64_t)v59 >= v27 || *v59 != 48) {
          continue;
        }
        int v28 = v59 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v28;
LABEL_159:
        if ((unint64_t)v28 >= v27 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          long long v60 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v4 = *v28;
          long long v60 = v28 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v60;
        }
        int v29 = *((_DWORD *)this + 39) | 0x20;
        *((_DWORD *)this + 39) = v29;
        if ((unint64_t)v60 >= v27 || *v60 != 58) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v60 + 1;
LABEL_167:
        *((_DWORD *)this + 39) = v29 | 0x40;
        if (*((void *)this + 4) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v61 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v61 >= *((void *)a2 + 2) || *v61 != 66) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v61 + 1;
LABEL_173:
        *((_DWORD *)this + 39) |= 0x80u;
        if (*((void *)this + 5) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v62 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        if ((unint64_t)v62 >= v30 || *v62 != 72) {
          continue;
        }
        long long v31 = v62 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v31;
LABEL_179:
        unsigned int v82 = 0;
        if ((unint64_t)v31 >= v30 || *v31 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v82);
          if (!result) {
            return result;
          }
          unsigned int v63 = v82;
          int v64 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v63 = *v31;
          int v64 = v31 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v64;
        }
        *((unsigned char *)this + 6bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v63 != 0;
        int v32 = *((_DWORD *)this + 39) | 0x100;
        *((_DWORD *)this + 39) = v32;
        if ((unint64_t)v64 >= v30 || *v64 != 82) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v64 + 1;
LABEL_187:
        *((_DWORD *)this + 39) = v32 | 0x200;
        if (*((void *)this + 6) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        uint64_t v65 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v65 >= *((void *)a2 + 2) || *v65 != 90) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v65 + 1;
LABEL_193:
        *((_DWORD *)this + 39) |= 0x400u;
        if (*((void *)this + 8) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        long long v66 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v66 >= *((void *)a2 + 2) || *v66 != 98) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v66 + 1;
LABEL_199:
        *((_DWORD *)this + 39) |= 0x800u;
        if (*((void *)this + 9) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unint64_t v67 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v67 >= *((void *)a2 + 2) || *v67 != 106) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v67 + 1;
LABEL_205:
        *((_DWORD *)this + 39) |= 0x1000u;
        if (*((void *)this + 10) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unint64_t v68 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v68 >= *((void *)a2 + 2) || *v68 != 114) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v68 + 1;
LABEL_211:
        *((_DWORD *)this + 39) |= 0x2000u;
        if (*((void *)this + 11) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unint64_t v69 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v33 = *((void *)a2 + 2);
        if ((unint64_t)v69 >= v33 || *v69 != 120) {
          continue;
        }
        int v34 = v69 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v34;
LABEL_217:
        if ((unint64_t)v34 >= v33 || (char)*v34 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          uint64_t v70 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v33 = *((void *)a2 + 2);
        }
        else
        {
          *unsigned int v5 = *v34;
          uint64_t v70 = v34 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v70;
        }
        *((_DWORD *)this + 39) |= 0x4000u;
        if ((int)v33 - (int)v70 < 2 || *v70 != 128 || v70[1] != 1) {
          continue;
        }
        uint64_t v35 = v70 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v35;
LABEL_226:
        if ((unint64_t)v35 >= v33 || (char)*v35 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          long long v71 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v33 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v6 = *v35;
          long long v71 = v35 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v71;
        }
        *((_DWORD *)this + 39) |= 0x8000u;
        if ((int)v33 - (int)v71 < 2 || *v71 != 136 || v71[1] != 1) {
          continue;
        }
        int v36 = v71 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v36;
LABEL_235:
        if ((unint64_t)v36 >= v33 || (char)*v36 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          std::__split_buffer<std::pair<std::string, std::string>>::pointer v72 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v33 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v7 = *v36;
          std::__split_buffer<std::pair<std::string, std::string>>::pointer v72 = v36 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v72;
        }
        *((_DWORD *)this + 39) |= 0x10000u;
        if ((int)v33 - (int)v72 < 2 || *v72 != 144 || v72[1] != 1) {
          continue;
        }
        uint64_t v37 = v72 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v37;
LABEL_244:
        if ((unint64_t)v37 >= v33 || (char)*v37 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v81);
          if (!result) {
            return result;
          }
          unint64_t v73 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v33 = *((void *)a2 + 2);
        }
        else
        {
          *int v81 = *v37;
          unint64_t v73 = v37 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v73;
        }
        *((_DWORD *)this + 39) |= 0x20000u;
        if ((int)v33 - (int)v73 < 2 || *v73 != 152 || v73[1] != 1) {
          continue;
        }
        uint64_t v38 = v73 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v38;
LABEL_253:
        if ((unint64_t)v38 >= v33 || (char)*v38 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v80);
          if (!result) {
            return result;
          }
          unint64_t v74 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v33 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v80 = *v38;
          unint64_t v74 = v38 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v74;
        }
        *((_DWORD *)this + 39) |= 0x40000u;
        if ((int)v33 - (int)v74 < 2 || *v74 != 160 || v74[1] != 1) {
          continue;
        }
        char v39 = v74 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v39;
LABEL_262:
        if ((unint64_t)v39 >= v33 || (char)*v39 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v79);
          if (!result) {
            return result;
          }
          unint64_t v75 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v33 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v79 = *v39;
          unint64_t v75 = v39 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v75;
        }
        *((_DWORD *)this + 39) |= 0x80000u;
        if ((int)v33 - (int)v75 < 2 || *v75 != 168 || v75[1] != 1) {
          continue;
        }
        uint64_t v40 = v75 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v40;
LABEL_271:
        if ((unint64_t)v40 >= v33 || (char)*v40 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v78);
          if (!result) {
            return result;
          }
          BOOL v76 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v33 = *((void *)a2 + 2);
        }
        else
        {
          *long long v78 = *v40;
          BOOL v76 = v40 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v76;
        }
        int v41 = *((_DWORD *)this + 39) | 0x100000;
        *((_DWORD *)this + 39) = v41;
        if ((int)v33 - (int)v76 < 2 || *v76 != 178 || v76[1] != 1) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v76 + 2;
LABEL_65:
        *((_DWORD *)this + 39) = v41 | 0x200000;
        if (*((void *)this + 15) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v43 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v42 = *((void *)a2 + 2);
        if ((int)v42 - (int)v43 < 2 || *v43 != 184 || v43[1] != 1) {
          continue;
        }
        int v44 = v43 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v44;
LABEL_74:
        if ((unint64_t)v44 >= v42 || (char)*v44 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!result) {
            return result;
          }
          int v45 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v8 = *v44;
          int v45 = v44 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v45;
        }
        *((_DWORD *)this + 39) |= 0x400000u;
        if ((int)v42 - (int)v45 < 2 || *v45 != 192 || v45[1] != 1) {
          continue;
        }
        int v46 = v45 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v46;
LABEL_93:
        if ((unint64_t)v46 >= v42 || (char)*v46 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!result) {
            return result;
          }
          int v49 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v9 = *v46;
          int v49 = v46 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v49;
        }
        *((_DWORD *)this + 39) |= 0x800000u;
        if ((int)v42 - (int)v49 < 2 || *v49 != 200 || v49[1] != 1) {
          continue;
        }
        int v47 = v49 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v47;
LABEL_102:
        unsigned int v82 = 0;
        if ((unint64_t)v47 >= v42 || (char)*v47 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v82);
          if (!result) {
            return result;
          }
          unsigned int v50 = v82;
          std::string::size_type v51 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v50 = *v47;
          std::string::size_type v51 = v47 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v51;
        }
        *((unsigned char *)this + 62) = v50 != 0;
        *((_DWORD *)this + 39) |= 0x1000000u;
        if ((int)v42 - (int)v51 < 2 || *v51 != 240 || v51[1] != 34) {
          continue;
        }
        uint64_t v48 = v51 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v48;
        goto LABEL_111;
      case 3u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        uint64_t v23 = (char *)*((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        goto LABEL_131;
      case 4u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        int v24 = (char *)*((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        goto LABEL_139;
      case 5u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        uint64_t v26 = (char *)*((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        goto LABEL_149;
      case 6u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        int v28 = (char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_159;
      case 7u:
        int v15 = TagFallback & 7;
        if (v15 != 2) {
          goto LABEL_84;
        }
        int v29 = *((_DWORD *)this + 39);
        goto LABEL_167;
      case 8u:
        int v15 = TagFallback & 7;
        if (v15 == 2) {
          goto LABEL_173;
        }
        goto LABEL_84;
      case 9u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        long long v31 = (char *)*((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        goto LABEL_179;
      case 0xAu:
        int v15 = TagFallback & 7;
        if (v15 != 2) {
          goto LABEL_84;
        }
        int v32 = *((_DWORD *)this + 39);
        goto LABEL_187;
      case 0xBu:
        int v15 = TagFallback & 7;
        if (v15 == 2) {
          goto LABEL_193;
        }
        goto LABEL_84;
      case 0xCu:
        int v15 = TagFallback & 7;
        if (v15 == 2) {
          goto LABEL_199;
        }
        goto LABEL_84;
      case 0xDu:
        int v15 = TagFallback & 7;
        if (v15 == 2) {
          goto LABEL_205;
        }
        goto LABEL_84;
      case 0xEu:
        int v15 = TagFallback & 7;
        if (v15 == 2) {
          goto LABEL_211;
        }
        goto LABEL_84;
      case 0xFu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        int v34 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v33 = *((void *)a2 + 2);
        goto LABEL_217;
      case 0x10u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        uint64_t v35 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v33 = *((void *)a2 + 2);
        goto LABEL_226;
      case 0x11u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        int v36 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v33 = *((void *)a2 + 2);
        goto LABEL_235;
      case 0x12u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        uint64_t v37 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v33 = *((void *)a2 + 2);
        goto LABEL_244;
      case 0x13u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        uint64_t v38 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v33 = *((void *)a2 + 2);
        goto LABEL_253;
      case 0x14u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        char v39 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v33 = *((void *)a2 + 2);
        goto LABEL_262;
      case 0x15u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        uint64_t v40 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v33 = *((void *)a2 + 2);
        goto LABEL_271;
      case 0x16u:
        int v15 = TagFallback & 7;
        if (v15 != 2) {
          goto LABEL_84;
        }
        int v41 = *((_DWORD *)this + 39);
        goto LABEL_65;
      case 0x17u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        int v44 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v42 = *((void *)a2 + 2);
        goto LABEL_74;
      case 0x18u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        int v46 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v42 = *((void *)a2 + 2);
        goto LABEL_93;
      case 0x19u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_84;
        }
        int v47 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v42 = *((void *)a2 + 2);
        goto LABEL_102;
      default:
        if (v14 == 558)
        {
          int v15 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_84;
          }
          uint64_t v48 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
LABEL_111:
          if ((unint64_t)v48 >= v42 || (char)*v48 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
            if (!result) {
              return result;
            }
            unsigned int v52 = (unsigned __int8 *)*((void *)a2 + 1);
            unint64_t v42 = *((void *)a2 + 2);
          }
          else
          {
            *uint64_t v10 = *v48;
            unsigned int v52 = v48 + 1;
            *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v52;
          }
          int v19 = *((_DWORD *)this + 39) | 0x2000000;
          *((_DWORD *)this + 39) = v19;
          if ((int)v42 - (int)v52 >= 2 && *v52 == 250 && v52[1] == 34)
          {
            *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v52 + 2;
            goto LABEL_16;
          }
          continue;
        }
        if (v14 == 559)
        {
          int v15 = TagFallback & 7;
          if (v15 != 2) {
            goto LABEL_84;
          }
          int v19 = *((_DWORD *)this + 39);
LABEL_16:
          *((_DWORD *)this + 39) = v19 | 0x4000000;
          if (*((void *)this + 18) == v11) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!result) {
            return result;
          }
          if (*((void *)a2 + 1) == *((void *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        int v15 = TagFallback & 7;
LABEL_84:
        if (v15 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
          continue;
          }
        }
        return 1;
    }
  }
}

uint64_t awd::metrics::ATM_Registration_Attempt::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 156);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 156);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 60), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 56), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 61), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(unsigned int *)(v5 + 96), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 100), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(unsigned int *)(v5 + 104), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, *(unsigned int *)(v5 + 108), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(unsigned int *)(v5 + 112), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(unsigned int *)(v5 + 116), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned int *)(v5 + 128), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, *(unsigned int *)(v5 + 132), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18, *(unsigned int *)(v5 + 136), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
LABEL_54:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22E, *(unsigned int *)(v5 + 140), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 156) & 0x4000000) == 0) {
      return this;
    }
    goto LABEL_55;
  }
LABEL_53:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19, *(unsigned __int8 *)(v5 + 62), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x2000000) != 0) {
    goto LABEL_54;
  }
LABEL_27:
  if ((v6 & 0x4000000) == 0) {
    return this;
  }
LABEL_55:
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t awd::metrics::ATM_Registration_Attempt::ByteSize(awd::metrics::ATM_Registration_Attempt *this)
{
  unsigned int v2 = *((_DWORD *)this + 39);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_59;
  }
  if (v2)
  {
    LODWORD(v3) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 1))
                + 1;
    unsigned int v2 = *((_DWORD *)this + 39);
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
  }
  else
  {
    LODWORD(v3) = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  char v6 = v5;
  uint64_t v7 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 >= 0x80)
  {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v7 = *(void *)(v4 + 8);
    unsigned int v2 = *((_DWORD *)this + 39);
    char v6 = *(unsigned char *)(v4 + 23);
  }
  else
  {
    int v9 = 1;
  }
  if (v6 < 0) {
    int v5 = v7;
  }
  LODWORD(v3) = v3 + v9 + v5 + 1;
LABEL_16:
  if ((v2 & 4) != 0) {
    uint64_t v3 = (v3 + 2);
  }
  else {
    uint64_t v3 = v3;
  }
  if ((v2 & 8) != 0)
  {
    uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if ((v10 & 0x80000000) != 0)
    {
      int v11 = 10;
    }
    else if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
      unsigned int v2 = *((_DWORD *)this + 39);
    }
    else
    {
      int v11 = 1;
    }
    uint64_t v3 = (v3 + v11 + 1);
    if ((v2 & 0x10) == 0)
    {
LABEL_21:
      if ((v2 & 0x20) == 0) {
        goto LABEL_22;
      }
      goto LABEL_37;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_21;
  }
  uint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if ((v12 & 0x80000000) != 0)
  {
    int v13 = 10;
  }
  else if (v12 >= 0x80)
  {
    int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
    unsigned int v2 = *((_DWORD *)this + 39);
  }
  else
  {
    int v13 = 1;
  }
  uint64_t v3 = (v3 + v13 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_41;
  }
LABEL_37:
  unsigned int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
  if (v14 >= 0x80)
  {
    int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    unsigned int v2 = *((_DWORD *)this + 39);
  }
  else
  {
    int v15 = 1;
  }
  uint64_t v3 = (v3 + v15 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_59;
    }
    goto LABEL_50;
  }
LABEL_41:
  uint64_t v16 = *((void *)this + 4);
  int v17 = *(unsigned __int8 *)(v16 + 23);
  char v18 = v17;
  uint64_t v19 = *(void *)(v16 + 8);
  if ((v17 & 0x80u) == 0) {
    unint64_t v20 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    unint64_t v20 = v19;
  }
  if (v20 >= 0x80)
  {
    int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20);
    int v17 = *(unsigned __int8 *)(v16 + 23);
    uint64_t v19 = *(void *)(v16 + 8);
    unsigned int v2 = *((_DWORD *)this + 39);
    char v18 = *(unsigned char *)(v16 + 23);
  }
  else
  {
    int v21 = 1;
  }
  if (v18 < 0) {
    int v17 = v19;
  }
  uint64_t v3 = (v3 + v21 + v17 + 1);
  if ((v2 & 0x80) != 0)
  {
LABEL_50:
    uint64_t v22 = *((void *)this + 5);
    int v23 = *(unsigned __int8 *)(v22 + 23);
    char v24 = v23;
    uint64_t v25 = *(void *)(v22 + 8);
    if ((v23 & 0x80u) == 0) {
      unint64_t v26 = *(unsigned __int8 *)(v22 + 23);
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26 >= 0x80)
    {
      int v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v26);
      int v23 = *(unsigned __int8 *)(v22 + 23);
      uint64_t v25 = *(void *)(v22 + 8);
      unsigned int v2 = *((_DWORD *)this + 39);
      char v24 = *(unsigned char *)(v22 + 23);
    }
    else
    {
      int v27 = 1;
    }
    if (v24 < 0) {
      int v23 = v25;
    }
    uint64_t v3 = (v3 + v27 + v23 + 1);
  }
LABEL_59:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_124;
  }
  if ((v2 & 0x100) != 0) {
    uint64_t v3 = (v3 + 2);
  }
  else {
    uint64_t v3 = v3;
  }
  if ((v2 & 0x200) != 0)
  {
    uint64_t v28 = *((void *)this + 6);
    int v29 = *(unsigned __int8 *)(v28 + 23);
    char v30 = v29;
    uint64_t v31 = *(void *)(v28 + 8);
    if ((v29 & 0x80u) == 0) {
      unint64_t v32 = *(unsigned __int8 *)(v28 + 23);
    }
    else {
      unint64_t v32 = v31;
    }
    if (v32 >= 0x80)
    {
      int v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32);
      int v29 = *(unsigned __int8 *)(v28 + 23);
      uint64_t v31 = *(void *)(v28 + 8);
      unsigned int v2 = *((_DWORD *)this + 39);
      char v30 = *(unsigned char *)(v28 + 23);
    }
    else
    {
      int v33 = 1;
    }
    if (v30 < 0) {
      int v29 = v31;
    }
    uint64_t v3 = (v3 + v33 + v29 + 1);
    if ((v2 & 0x400) == 0)
    {
LABEL_65:
      if ((v2 & 0x800) == 0) {
        goto LABEL_66;
      }
      goto LABEL_89;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_65;
  }
  uint64_t v34 = *((void *)this + 8);
  int v35 = *(unsigned __int8 *)(v34 + 23);
  char v36 = v35;
  uint64_t v37 = *(void *)(v34 + 8);
  if ((v35 & 0x80u) == 0) {
    unint64_t v38 = *(unsigned __int8 *)(v34 + 23);
  }
  else {
    unint64_t v38 = v37;
  }
  if (v38 >= 0x80)
  {
    int v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v38);
    int v35 = *(unsigned __int8 *)(v34 + 23);
    uint64_t v37 = *(void *)(v34 + 8);
    unsigned int v2 = *((_DWORD *)this + 39);
    char v36 = *(unsigned char *)(v34 + 23);
  }
  else
  {
    int v39 = 1;
  }
  if (v36 < 0) {
    int v35 = v37;
  }
  uint64_t v3 = (v3 + v39 + v35 + 1);
  if ((v2 & 0x800) == 0)
  {
LABEL_66:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_98;
  }
LABEL_89:
  uint64_t v40 = *((void *)this + 9);
  int v41 = *(unsigned __int8 *)(v40 + 23);
  char v42 = v41;
  uint64_t v43 = *(void *)(v40 + 8);
  if ((v41 & 0x80u) == 0) {
    unint64_t v44 = *(unsigned __int8 *)(v40 + 23);
  }
  else {
    unint64_t v44 = v43;
  }
  if (v44 >= 0x80)
  {
    int v45 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v44);
    int v41 = *(unsigned __int8 *)(v40 + 23);
    uint64_t v43 = *(void *)(v40 + 8);
    unsigned int v2 = *((_DWORD *)this + 39);
    char v42 = *(unsigned char *)(v40 + 23);
  }
  else
  {
    int v45 = 1;
  }
  if (v42 < 0) {
    int v41 = v43;
  }
  uint64_t v3 = (v3 + v45 + v41 + 1);
  if ((v2 & 0x1000) == 0)
  {
LABEL_67:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_107;
  }
LABEL_98:
  uint64_t v46 = *((void *)this + 10);
  int v47 = *(unsigned __int8 *)(v46 + 23);
  char v48 = v47;
  uint64_t v49 = *(void *)(v46 + 8);
  if ((v47 & 0x80u) == 0) {
    unint64_t v50 = *(unsigned __int8 *)(v46 + 23);
  }
  else {
    unint64_t v50 = v49;
  }
  if (v50 >= 0x80)
  {
    int v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v50);
    int v47 = *(unsigned __int8 *)(v46 + 23);
    uint64_t v49 = *(void *)(v46 + 8);
    unsigned int v2 = *((_DWORD *)this + 39);
    char v48 = *(unsigned char *)(v46 + 23);
  }
  else
  {
    int v51 = 1;
  }
  if (v48 < 0) {
    int v47 = v49;
  }
  uint64_t v3 = (v3 + v51 + v47 + 1);
  if ((v2 & 0x2000) == 0)
  {
LABEL_68:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_116;
  }
LABEL_107:
  uint64_t v52 = *((void *)this + 11);
  int v53 = *(unsigned __int8 *)(v52 + 23);
  char v54 = v53;
  uint64_t v55 = *(void *)(v52 + 8);
  if ((v53 & 0x80u) == 0) {
    unint64_t v56 = *(unsigned __int8 *)(v52 + 23);
  }
  else {
    unint64_t v56 = v55;
  }
  if (v56 >= 0x80)
  {
    int v57 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v56);
    int v53 = *(unsigned __int8 *)(v52 + 23);
    uint64_t v55 = *(void *)(v52 + 8);
    unsigned int v2 = *((_DWORD *)this + 39);
    char v54 = *(unsigned char *)(v52 + 23);
  }
  else
  {
    int v57 = 1;
  }
  if (v54 < 0) {
    int v53 = v55;
  }
  uint64_t v3 = (v3 + v57 + v53 + 1);
  if ((v2 & 0x4000) == 0)
  {
LABEL_69:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_120;
  }
LABEL_116:
  unsigned int v58 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 24);
  if (v58 >= 0x80)
  {
    int v59 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v58);
    unsigned int v2 = *((_DWORD *)this + 39);
  }
  else
  {
    int v59 = 1;
  }
  uint64_t v3 = (v3 + v59 + 1);
  if ((v2 & 0x8000) != 0)
  {
LABEL_120:
    long long v60 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 25);
    if (v60 >= 0x80)
    {
      int v61 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v60);
      unsigned int v2 = *((_DWORD *)this + 39);
    }
    else
    {
      int v61 = 1;
    }
    uint64_t v3 = (v3 + v61 + 2);
  }
LABEL_124:
  if ((v2 & 0xFF0000) == 0) {
    goto LABEL_171;
  }
  if ((v2 & 0x10000) != 0)
  {
    std::__split_buffer<std::pair<std::string, std::string>>::pointer v62 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 26);
    if (v62 >= 0x80)
    {
      int v63 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v62);
      unsigned int v2 = *((_DWORD *)this + 39);
    }
    else
    {
      int v63 = 1;
    }
    uint64_t v3 = (v3 + v63 + 2);
    if ((v2 & 0x20000) == 0)
    {
LABEL_127:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_128;
      }
      goto LABEL_142;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_127;
  }
  int v64 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 27);
  if (v64 >= 0x80)
  {
    int v65 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v64);
    unsigned int v2 = *((_DWORD *)this + 39);
  }
  else
  {
    int v65 = 1;
  }
  uint64_t v3 = (v3 + v65 + 2);
  if ((v2 & 0x40000) == 0)
  {
LABEL_128:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_129;
    }
    goto LABEL_146;
  }
LABEL_142:
  long long v66 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 28);
  if (v66 >= 0x80)
  {
    int v67 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v66) + 2;
    unsigned int v2 = *((_DWORD *)this + 39);
  }
  else
  {
    int v67 = 3;
  }
  uint64_t v3 = (v67 + v3);
  if ((v2 & 0x80000) == 0)
  {
LABEL_129:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_130;
    }
    goto LABEL_150;
  }
LABEL_146:
  unint64_t v68 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 29);
  if (v68 >= 0x80)
  {
    int v69 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v68) + 2;
    unsigned int v2 = *((_DWORD *)this + 39);
  }
  else
  {
    int v69 = 3;
  }
  uint64_t v3 = (v69 + v3);
  if ((v2 & 0x100000) == 0)
  {
LABEL_130:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_131;
    }
    goto LABEL_154;
  }
LABEL_150:
  uint64_t v70 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 32);
  if (v70 >= 0x80)
  {
    int v71 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v70) + 2;
    unsigned int v2 = *((_DWORD *)this + 39);
  }
  else
  {
    int v71 = 3;
  }
  uint64_t v3 = (v71 + v3);
  if ((v2 & 0x200000) == 0)
  {
LABEL_131:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_132;
    }
    goto LABEL_163;
  }
LABEL_154:
  uint64_t v72 = *((void *)this + 15);
  int v73 = *(unsigned __int8 *)(v72 + 23);
  char v74 = v73;
  uint64_t v75 = *(void *)(v72 + 8);
  if ((v73 & 0x80u) == 0) {
    unint64_t v76 = *(unsigned __int8 *)(v72 + 23);
  }
  else {
    unint64_t v76 = v75;
  }
  if (v76 >= 0x80)
  {
    int v77 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v76);
    int v73 = *(unsigned __int8 *)(v72 + 23);
    uint64_t v75 = *(void *)(v72 + 8);
    unsigned int v2 = *((_DWORD *)this + 39);
    char v74 = *(unsigned char *)(v72 + 23);
  }
  else
  {
    int v77 = 1;
  }
  if (v74 < 0) {
    int v73 = v75;
  }
  uint64_t v3 = (v3 + v77 + v73 + 2);
  if ((v2 & 0x400000) == 0)
  {
LABEL_132:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_171;
    }
    goto LABEL_167;
  }
LABEL_163:
  long long v78 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 33);
  if (v78 >= 0x80)
  {
    int v79 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v78) + 2;
    unsigned int v2 = *((_DWORD *)this + 39);
  }
  else
  {
    int v79 = 3;
  }
  uint64_t v3 = (v79 + v3);
  if ((v2 & 0x800000) != 0)
  {
LABEL_167:
    uint64_t v80 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 34);
    if (v80 >= 0x80)
    {
      int v81 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v80) + 2;
      unsigned int v2 = *((_DWORD *)this + 39);
    }
    else
    {
      int v81 = 3;
    }
    uint64_t v3 = (v81 + v3);
  }
LABEL_171:
  if (HIBYTE(v2))
  {
    if ((v2 & 0x1000000) != 0) {
      uint64_t v3 = (v3 + 3);
    }
    else {
      uint64_t v3 = v3;
    }
    if ((v2 & 0x2000000) != 0)
    {
      unsigned int v82 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 35);
      if (v82 >= 0x80)
      {
        int v83 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v82) + 2;
        unsigned int v2 = *((_DWORD *)this + 39);
      }
      else
      {
        int v83 = 3;
      }
      uint64_t v3 = (v83 + v3);
    }
    if ((v2 & 0x4000000) != 0)
    {
      uint64_t v84 = *((void *)this + 18);
      int v85 = *(unsigned __int8 *)(v84 + 23);
      char v86 = v85;
      uint64_t v87 = *(void *)(v84 + 8);
      if ((v85 & 0x80u) == 0) {
        unint64_t v88 = *(unsigned __int8 *)(v84 + 23);
      }
      else {
        unint64_t v88 = v87;
      }
      if (v88 >= 0x80)
      {
        int v89 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v88);
        int v85 = *(unsigned __int8 *)(v84 + 23);
        uint64_t v87 = *(void *)(v84 + 8);
        char v86 = *(unsigned char *)(v84 + 23);
      }
      else
      {
        int v89 = 1;
      }
      if (v86 < 0) {
        int v85 = v87;
      }
      uint64_t v3 = (v3 + v89 + v85 + 2);
    }
  }
  *((_DWORD *)this + 38) = v3;
  return v3;
}

void awd::metrics::ATM_Registration_Attempt::CheckTypeAndMergeFrom(const std::string **this, const std::string **lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v42);
  }
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if (!(_BYTE)v4) {
    goto LABEL_30;
  }
  if (v4)
  {
    int v5 = lpsrc[1];
    *((_DWORD *)this + 39) |= 1u;
    this[1] = v5;
    unsigned int v4 = *((_DWORD *)lpsrc + 39);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  char v6 = lpsrc[2];
  *((_DWORD *)this + 39) |= 2u;
  uint64_t v7 = (std::string *)this[2];
  if (v7 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v7, v6);
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v8 = *((unsigned char *)lpsrc + 60);
  *((_DWORD *)this + 39) |= 4u;
  *((unsigned char *)this + 60) = v8;
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_19:
  int v9 = *((_DWORD *)lpsrc + 6);
  if ((v9 - 1) >= 0xD) {
    __assert_rtn("set_type", "CATM.pb.h", 6747, "::awd::metrics::enum_ims_reg_type_IsValid(value)");
  }
  *((_DWORD *)this + 39) |= 8u;
  *((_DWORD *)this + 6) = v9;
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_23:
    int v11 = *((_DWORD *)lpsrc + 14);
    *((_DWORD *)this + 39) |= 0x20u;
    *((_DWORD *)this + 14) = v11;
    unsigned int v4 = *((_DWORD *)lpsrc + 39);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0) {
        goto LABEL_30;
      }
      goto LABEL_27;
    }
    goto LABEL_24;
  }
LABEL_21:
  int v10 = *((_DWORD *)lpsrc + 7);
  if ((v10 - 1) >= 4) {
    __assert_rtn("set_feature", "CATM.pb.h", 6770, "::awd::metrics::enum_ims_reg_feature_IsValid(value)");
  }
  *((_DWORD *)this + 39) |= 0x10u;
  *((_DWORD *)this + 7) = v10;
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x20) != 0) {
    goto LABEL_23;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    goto LABEL_12;
  }
LABEL_24:
  uint64_t v12 = lpsrc[4];
  *((_DWORD *)this + 39) |= 0x40u;
  int v13 = (std::string *)this[4];
  if (v13 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v13, v12);
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x80) != 0)
  {
LABEL_27:
    unsigned int v14 = lpsrc[5];
    *((_DWORD *)this + 39) |= 0x80u;
    int v15 = (std::string *)this[5];
    if (v15 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    std::string::operator=(v15, v14);
    unsigned int v4 = *((_DWORD *)lpsrc + 39);
  }
LABEL_30:
  if ((v4 & 0xFF00) == 0) {
    goto LABEL_40;
  }
  if ((v4 & 0x100) != 0)
  {
    char v18 = *((unsigned char *)lpsrc + 61);
    *((_DWORD *)this + 39) |= 0x100u;
    *((unsigned char *)this + 6bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v18;
    unsigned int v4 = *((_DWORD *)lpsrc + 39);
    if ((v4 & 0x200) == 0)
    {
LABEL_33:
      if ((v4 & 0x400) == 0) {
        goto LABEL_34;
      }
      goto LABEL_59;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_33;
  }
  uint64_t v19 = lpsrc[6];
  *((_DWORD *)this + 39) |= 0x200u;
  unint64_t v20 = (std::string *)this[6];
  if (v20 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v20, v19);
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x400) == 0)
  {
LABEL_34:
    if ((v4 & 0x800) == 0) {
      goto LABEL_35;
    }
    goto LABEL_62;
  }
LABEL_59:
  int v21 = lpsrc[8];
  *((_DWORD *)this + 39) |= 0x400u;
  uint64_t v22 = (std::string *)this[8];
  if (v22 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v22, v21);
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x800) == 0)
  {
LABEL_35:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_65;
  }
LABEL_62:
  int v23 = lpsrc[9];
  *((_DWORD *)this + 39) |= 0x800u;
  char v24 = (std::string *)this[9];
  if (v24 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v24, v23);
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x1000) == 0)
  {
LABEL_36:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_68;
  }
LABEL_65:
  uint64_t v25 = lpsrc[10];
  *((_DWORD *)this + 39) |= 0x1000u;
  unint64_t v26 = (std::string *)this[10];
  if (v26 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v26, v25);
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x2000) == 0)
  {
LABEL_37:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_71;
  }
LABEL_68:
  int v27 = lpsrc[11];
  *((_DWORD *)this + 39) |= 0x2000u;
  uint64_t v28 = (std::string *)this[11];
  if (v28 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v28, v27);
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x4000) == 0)
  {
LABEL_38:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
LABEL_71:
  int v29 = *((_DWORD *)lpsrc + 24);
  *((_DWORD *)this + 39) |= 0x4000u;
  *((_DWORD *)this + 24) = v29;
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x8000) != 0)
  {
LABEL_39:
    int v16 = *((_DWORD *)lpsrc + 25);
    *((_DWORD *)this + 39) |= 0x8000u;
    *((_DWORD *)this + 25) = v16;
    unsigned int v4 = *((_DWORD *)lpsrc + 39);
  }
LABEL_40:
  if ((v4 & 0xFF0000) == 0) {
    goto LABEL_50;
  }
  if ((v4 & 0x10000) != 0)
  {
    int v30 = *((_DWORD *)lpsrc + 26);
    *((_DWORD *)this + 39) |= 0x10000u;
    *((_DWORD *)this + 26) = v30;
    unsigned int v4 = *((_DWORD *)lpsrc + 39);
    if ((v4 & 0x20000) == 0)
    {
LABEL_43:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_75;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_43;
  }
  int v31 = *((_DWORD *)lpsrc + 27);
  *((_DWORD *)this + 39) |= 0x20000u;
  *((_DWORD *)this + 27) = v31;
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x40000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_76;
  }
LABEL_75:
  int v32 = *((_DWORD *)lpsrc + 28);
  *((_DWORD *)this + 39) |= 0x40000u;
  *((_DWORD *)this + 28) = v32;
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x80000) == 0)
  {
LABEL_45:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_77;
  }
LABEL_76:
  int v33 = *((_DWORD *)lpsrc + 29);
  *((_DWORD *)this + 39) |= 0x80000u;
  *((_DWORD *)this + 29) = v33;
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x100000) == 0)
  {
LABEL_46:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_78;
  }
LABEL_77:
  int v34 = *((_DWORD *)lpsrc + 32);
  *((_DWORD *)this + 39) |= 0x100000u;
  *((_DWORD *)this + 32) = v34;
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x200000) == 0)
  {
LABEL_47:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_81;
  }
LABEL_78:
  int v35 = lpsrc[15];
  *((_DWORD *)this + 39) |= 0x200000u;
  char v36 = (std::string *)this[15];
  if (v36 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v36, v35);
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x400000) == 0)
  {
LABEL_48:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
LABEL_81:
  int v37 = *((_DWORD *)lpsrc + 33);
  *((_DWORD *)this + 39) |= 0x400000u;
  *((_DWORD *)this + 33) = v37;
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x800000) != 0)
  {
LABEL_49:
    int v17 = *((_DWORD *)lpsrc + 34);
    *((_DWORD *)this + 39) |= 0x800000u;
    *((_DWORD *)this + 34) = v17;
    unsigned int v4 = *((_DWORD *)lpsrc + 39);
  }
LABEL_50:
  if (!HIBYTE(v4)) {
    return;
  }
  if ((v4 & 0x1000000) == 0)
  {
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_53;
    }
LABEL_84:
    int v39 = *((_DWORD *)lpsrc + 35);
    *((_DWORD *)this + 39) |= 0x2000000u;
    *((_DWORD *)this + 35) = v39;
    if ((*((_DWORD *)lpsrc + 39) & 0x4000000) == 0) {
      return;
    }
    goto LABEL_85;
  }
  char v38 = *((unsigned char *)lpsrc + 62);
  *((_DWORD *)this + 39) |= 0x1000000u;
  *((unsigned char *)this + 62) = v38;
  unsigned int v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x2000000) != 0) {
    goto LABEL_84;
  }
LABEL_53:
  if ((v4 & 0x4000000) == 0) {
    return;
  }
LABEL_85:
  uint64_t v40 = lpsrc[18];
  *((_DWORD *)this + 39) |= 0x4000000u;
  int v41 = (std::string *)this[18];
  if (v41 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v41, v40);
}

void sub_1C5264810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::ATM_Registration_Attempt::IsInitialized(awd::metrics::ATM_Registration_Attempt *this)
{
  return 1;
}

void *awd::metrics::ATM_Registration_Attempt::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_Registration_Attempt");
}

double awd::metrics::ATM_Registration_Result::ATM_Registration_Result(awd::metrics::ATM_Registration_Result *this)
{
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_DWORD *)this + 52) = 0;
  *(void *)this = &unk_1F20BA080;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 2) = 0x100000001;
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *((void *)this + 3) = MEMORY[0x1E4FBA920];
  *((void *)this + 4) = v1;
  *((void *)this + 5) = v1;
  double result = 0.0;
  *((void *)this + 6) = 0;
  *((void *)this + SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = v1;
  *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 12) = v1;
  *((_DWORD *)this + 45) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 162) = 0u;
  *((void *)this + 23) = v1;
  *((void *)this + 25) = v1;
  *((void *)this + 24) = 0;
  *((unsigned char *)this + 178) = 0;
  *(void *)((char *)this + 212) = 0;
  return result;
}

void awd::metrics::ATM_Registration_Result::~ATM_Registration_Result(awd::metrics::ATM_Registration_Result *this)
{
  *(void *)this = &unk_1F20BA080;
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C878E320](v2, 0x1012C40EC159624);
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    MEMORY[0x1C878E320](v5, 0x1012C40EC159624);
  }
  uint64_t v7 = *((void *)this + 5);
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    MEMORY[0x1C878E320](v7, 0x1012C40EC159624);
  }
  uint64_t v9 = *((void *)this + 10);
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    MEMORY[0x1C878E320](v9, 0x1012C40EC159624);
  }
  uint64_t v11 = *((void *)this + 12);
  if (v11 != v3 && v11)
  {
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    MEMORY[0x1C878E320](v11, 0x1012C40EC159624);
  }
  uint64_t v12 = *((void *)this + 23);
  if (v12 != v3 && v12)
  {
    if (*(char *)(v12 + 23) < 0) {
      operator delete(*(void **)v12);
    }
    MEMORY[0x1C878E320](v12, 0x1012C40EC159624);
  }
  uint64_t v13 = *((void *)this + 25);
  if (v13 != v3 && v13)
  {
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    MEMORY[0x1C878E320](v13, 0x1012C40EC159624);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 14);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  awd::metrics::ATM_Registration_Result::~ATM_Registration_Result(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::ATM_Registration_Result::New(awd::metrics::ATM_Registration_Result *this)
{
}

uint64_t awd::metrics::ATM_Registration_Result::Clear(awd::metrics::ATM_Registration_Result *this)
{
  unsigned int v2 = *((_DWORD *)this + 53);
  if ((_BYTE)v2)
  {
    *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    *((void *)this + 2) = 0x100000001;
    if ((v2 & 8) != 0)
    {
      uint64_t v3 = *((void *)this + 3);
      if (v3 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 212) & 0x10) != 0)
    {
      uint64_t v4 = *((void *)this + 4);
      if (v4 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 12) = 0;
    if ((*((unsigned char *)this + 212) & 0x40) != 0)
    {
      uint64_t v5 = *((void *)this + 5);
      if (v5 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(unsigned char **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v5 = 0;
          *(unsigned char *)(v5 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 13) = 0;
    unsigned int v2 = *((_DWORD *)this + 53);
  }
  if ((v2 & 0x1FE00) != 0)
  {
    if ((v2 & 0x200) != 0)
    {
      uint64_t v6 = *((void *)this + 10);
      if (v6 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(unsigned char **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v6 = 0;
          *(unsigned char *)(v6 + 23) = 0;
        }
      }
    }
    *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    if ((*((unsigned char *)this + 213) & 0x10) != 0)
    {
      uint64_t v7 = *((void *)this + 12);
      if (v7 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(unsigned char **)uint64_t v7 = 0;
          *(void *)(v7 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v7 = 0;
          *(unsigned char *)(v7 + 23) = 0;
        }
      }
    }
    *((void *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    unsigned int v2 = *((_DWORD *)this + 53);
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *((unsigned char *)this + 176) = 0;
    *(_OWORD *)((char *)this + 116) = 0u;
    *(_OWORD *)((char *)this + 132) = 0u;
    *((_DWORD *)this + 37) = 0;
  }
  if (HIBYTE(v2))
  {
    *((_DWORD *)this + 45) = 0;
    *((unsigned char *)this + 177) = 0;
    *((_DWORD *)this + 48) = 0;
    *((void *)this + 20) = 0;
    *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    *((void *)this + 19) = 0;
    if ((v2 & 0x40000000) != 0)
    {
      uint64_t v8 = *((void *)this + 23);
      if (v8 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(unsigned char **)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v8 = 0;
          *(unsigned char *)(v8 + 23) = 0;
        }
      }
    }
    if ((*((_DWORD *)this + 53) & 0x80000000) != 0)
    {
      uint64_t v10 = *((void *)this + 25);
      if (v10 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(unsigned char **)uint64_t v10 = 0;
          *(void *)(v10 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v10 = 0;
          *(unsigned char *)(v10 + 23) = 0;
        }
      }
    }
  }
  if (*((unsigned char *)this + 216))
  {
    *((_DWORD *)this + 49) = 0;
    *((unsigned char *)this + 178) = 0;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Clear<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56);
  *(void *)((char *)this + 212) = 0;
  return result;
}

uint64_t awd::metrics::ATM_Registration_Result::MergePartialFromCodedStream(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = (unint64_t *)(this + 8);
  uint64_t v5 = (unsigned int *)(this + 48);
  uint64_t v6 = (unsigned int *)(this + 52);
  uint64_t v7 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 56);
  uint64_t v8 = (unsigned int *)(this + 92);
  uint64_t v9 = (unsigned int *)(this + 104);
  uint64_t v10 = (unsigned int *)(this + 108);
  uint64_t v11 = (unsigned int *)(this + 112);
  uint64_t v116 = (unsigned int *)(this + 120);
  char v117 = (unsigned int *)(this + 116);
  int v114 = (unsigned int *)(this + 128);
  int v115 = (unsigned int *)(this + 124);
  BOOL v112 = (unint64_t *)(this + 136);
  int v113 = (unsigned int *)(this + 132);
  int v110 = (unint64_t *)(this + 152);
  int v111 = (unint64_t *)(this + 144);
  int v108 = (unint64_t *)(this + 168);
  uint64_t v109 = (unint64_t *)(this + 160);
  int v106 = (unsigned int *)(this + 192);
  uint64_t v107 = (unsigned int *)(this + 180);
  int v118 = (unsigned int *)(this + 196);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
LABEL_2:
          uint64_t v12 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 < 0)
          {
            this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)this;
            *((_DWORD *)a2 + 8) = this;
            if (!this) {
              return 1;
            }
          }
          else
          {
            uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v12;
            *((_DWORD *)a2 + 8) = v13;
            *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v12 + 1;
            if (!v13) {
              return 1;
            }
          }
          unsigned int v14 = v13 >> 3;
          if (v13 >> 3 <= 0x22D)
          {
            switch(v14)
            {
              case 1u:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                int v17 = (char *)*((void *)a2 + 1);
                unint64_t v16 = *((void *)a2 + 2);
                if ((unint64_t)v17 >= v16 || *v17 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
                  if (!this) {
                    return this;
                  }
                  char v18 = (unsigned char *)*((void *)a2 + 1);
                  unint64_t v16 = *((void *)a2 + 2);
                }
                else
                {
                  unint64_t *v4 = *v17;
                  char v18 = v17 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v18;
                }
                *(_DWORD *)(v3 + 212) |= 1u;
                if ((unint64_t)v18 >= v16 || *v18 != 16) {
                  continue;
                }
                int v23 = v18 + 1;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v23;
LABEL_125:
                unsigned int v119 = 0;
                if ((unint64_t)v23 >= v16 || *v23 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v119);
                  if (!this) {
                    return this;
                  }
                  unsigned int v59 = v119;
                }
                else
                {
                  unsigned int v59 = *v23;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v23 + 1;
                }
                if (v59 - 1 <= 0xC)
                {
                  *(_DWORD *)(v3 + 212) |= 2u;
                  *(_DWORD *)(v3 + 16) = v59;
                }
                long long v60 = (unsigned char *)*((void *)a2 + 1);
                unint64_t v24 = *((void *)a2 + 2);
                if ((unint64_t)v60 >= v24 || *v60 != 24) {
                  continue;
                }
                uint64_t v25 = v60 + 1;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v25;
LABEL_135:
                unsigned int v119 = 0;
                if ((unint64_t)v25 >= v24 || *v25 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v119);
                  if (!this) {
                    return this;
                  }
                  unsigned int v61 = v119;
                }
                else
                {
                  unsigned int v61 = *v25;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v25 + 1;
                }
                if (v61 - 1 <= 3)
                {
                  *(_DWORD *)(v3 + 212) |= 4u;
                  *(_DWORD *)(v3 + 20) = v61;
                }
                std::__split_buffer<std::pair<std::string, std::string>>::pointer v62 = (unsigned char *)*((void *)a2 + 1);
                if ((unint64_t)v62 >= *((void *)a2 + 2) || *v62 != 34) {
                  continue;
                }
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v62 + 1;
LABEL_145:
                *(_DWORD *)(v3 + 212) |= 8u;
                if (*(void *)(v3 + 24) == MEMORY[0x1E4FBA920]) {
                  operator new();
                }
                this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                if (!this) {
                  return this;
                }
                int v63 = (unsigned char *)*((void *)a2 + 1);
                if ((unint64_t)v63 >= *((void *)a2 + 2) || *v63 != 42) {
                  continue;
                }
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v63 + 1;
LABEL_151:
                *(_DWORD *)(v3 + 212) |= 0x10u;
                if (*(void *)(v3 + 32) == MEMORY[0x1E4FBA920]) {
                  operator new();
                }
                this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                if (!this) {
                  return this;
                }
                int v64 = (unsigned char *)*((void *)a2 + 1);
                unint64_t v26 = *((void *)a2 + 2);
                if ((unint64_t)v64 >= v26 || *v64 != 48) {
                  continue;
                }
                int v27 = v64 + 1;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v27;
LABEL_157:
                if ((unint64_t)v27 >= v26 || *v27 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
                  if (!this) {
                    return this;
                  }
                  int v65 = (unsigned char *)*((void *)a2 + 1);
                  unint64_t v26 = *((void *)a2 + 2);
                }
                else
                {
                  *uint64_t v5 = *v27;
                  int v65 = v27 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v65;
                }
                int v28 = *(_DWORD *)(v3 + 212) | 0x20;
                *(_DWORD *)(v3 + 212) = v28;
                if ((unint64_t)v65 >= v26 || *v65 != 58) {
                  continue;
                }
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v65 + 1;
LABEL_165:
                *(_DWORD *)(v3 + 212) = v28 | 0x40;
                if (*(void *)(v3 + 40) == MEMORY[0x1E4FBA920]) {
                  operator new();
                }
                this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                if (!this) {
                  return this;
                }
                long long v66 = (unsigned char *)*((void *)a2 + 1);
                unint64_t v29 = *((void *)a2 + 2);
                if ((unint64_t)v66 >= v29 || *v66 != 64) {
                  continue;
                }
                int v30 = v66 + 1;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v30;
LABEL_171:
                if ((unint64_t)v30 >= v29 || *v30 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
                  if (!this) {
                    return this;
                  }
                  int v67 = (unsigned char *)*((void *)a2 + 1);
                  unint64_t v29 = *((void *)a2 + 2);
                }
                else
                {
                  *uint64_t v6 = *v30;
                  int v67 = v30 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v67;
                }
                *(_DWORD *)(v3 + 212) |= 0x80u;
                if ((unint64_t)v67 >= v29 || *v67 != 74) {
                  continue;
                }
                do
                {
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v67 + 1;
LABEL_179:
                  int v68 = *(_DWORD *)(v3 + 68);
                  int v69 = *(_DWORD *)(v3 + 64);
                  if (v69 >= v68)
                  {
                    if (v68 == *(_DWORD *)(v3 + 72))
                    {
                      this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7);
                      int v68 = *(_DWORD *)(v3 + 68);
                    }
                    *(_DWORD *)(v3 + 68) = v68 + 1;
                    uint64_t v70 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)this);
                    uint64_t v71 = *(void *)(v3 + 56);
                    uint64_t v72 = *(int *)(v3 + 64);
                    *(_DWORD *)(v3 + 64) = v72 + 1;
                    *(void *)(v71 + 8 * v72) = v70;
                  }
                  else
                  {
                    *(_DWORD *)(v3 + 64) = v69 + 1;
                  }
                  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                  if (!this) {
                    return this;
                  }
                  int v67 = (unsigned char *)*((void *)a2 + 1);
                  if ((unint64_t)v67 >= *((void *)a2 + 2)) {
                    goto LABEL_2;
                  }
                  int v73 = *v67;
                }
                while (v73 == 74);
                if (v73 != 82) {
                  continue;
                }
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v67 + 1;
LABEL_189:
                *(_DWORD *)(v3 + 212) |= 0x200u;
                if (*(void *)(v3 + 80) == MEMORY[0x1E4FBA920]) {
                  operator new();
                }
                this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                if (!this) {
                  return this;
                }
                char v74 = (unsigned char *)*((void *)a2 + 1);
                unint64_t v31 = *((void *)a2 + 2);
                if ((unint64_t)v74 >= v31 || *v74 != 88) {
                  continue;
                }
                int v32 = v74 + 1;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v32;
LABEL_195:
                unsigned int v119 = 0;
                char v105 = v11;
                if ((unint64_t)v32 >= v31 || *v32 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v119);
                  if (!this) {
                    return this;
                  }
                  uint64_t v75 = v9;
                  unint64_t v76 = v6;
                  int v77 = v5;
                  long long v78 = v8;
                  int v79 = v10;
                  uint64_t v80 = v7;
                  int v81 = v4;
                  unint64_t v82 = v119;
                }
                else
                {
                  uint64_t v75 = v9;
                  unint64_t v76 = v6;
                  int v77 = v5;
                  long long v78 = v8;
                  int v79 = v10;
                  uint64_t v80 = v7;
                  int v81 = v4;
                  unint64_t v82 = *v32;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v32 + 1;
                }
                this = awd::metrics::RESPONSE_Code_IsValid((awd::metrics *)v82);
                if (this)
                {
                  *(_DWORD *)(v3 + 212) |= 0x400u;
                  *(_DWORD *)(v3 + 88) = v82;
                }
                int v83 = (unsigned char *)*((void *)a2 + 1);
                unint64_t v33 = *((void *)a2 + 2);
                uint64_t v4 = v81;
                uint64_t v7 = v80;
                uint64_t v10 = v79;
                uint64_t v8 = v78;
                uint64_t v5 = v77;
                uint64_t v6 = v76;
                uint64_t v9 = v75;
                uint64_t v11 = v105;
                if ((unint64_t)v83 >= v33 || *v83 != 96) {
                  continue;
                }
                int v34 = v83 + 1;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v34;
LABEL_205:
                if ((unint64_t)v34 >= v33 || *v34 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
                  if (!this) {
                    return this;
                  }
                  uint64_t v84 = (unsigned char *)*((void *)a2 + 1);
                  unint64_t v33 = *((void *)a2 + 2);
                }
                else
                {
                  *uint64_t v8 = *v34;
                  uint64_t v84 = v34 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v84;
                }
                int v35 = *(_DWORD *)(v3 + 212) | 0x800;
                *(_DWORD *)(v3 + 212) = v35;
                if ((unint64_t)v84 >= v33 || *v84 != 106) {
                  continue;
                }
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v84 + 1;
LABEL_213:
                *(_DWORD *)(v3 + 212) = v35 | 0x1000;
                if (*(void *)(v3 + 96) == MEMORY[0x1E4FBA920]) {
                  operator new();
                }
                this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                if (!this) {
                  return this;
                }
                int v85 = (unsigned char *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                if ((unint64_t)v85 >= v36 || *v85 != 112) {
                  continue;
                }
                int v37 = v85 + 1;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v37;
LABEL_219:
                if ((unint64_t)v37 >= v36 || *v37 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
                  if (!this) {
                    return this;
                  }
                  char v86 = (unsigned char *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  unsigned int *v9 = *v37;
                  char v86 = v37 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v86;
                }
                *(_DWORD *)(v3 + 212) |= 0x2000u;
                if ((unint64_t)v86 >= v36 || *v86 != 120) {
                  continue;
                }
                char v38 = v86 + 1;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v38;
LABEL_227:
                if ((unint64_t)v38 >= v36 || (char)*v38 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
                  if (!this) {
                    return this;
                  }
                  uint64_t v87 = (unsigned __int8 *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  *uint64_t v10 = *v38;
                  uint64_t v87 = v38 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v87;
                }
                *(_DWORD *)(v3 + 212) |= 0x4000u;
                if ((int)v36 - (int)v87 < 2 || *v87 != 128 || v87[1] != 1) {
                  continue;
                }
                int v39 = v87 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v39;
LABEL_236:
                if ((unint64_t)v39 >= v36 || (char)*v39 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v11);
                  if (!this) {
                    return this;
                  }
                  unint64_t v88 = (unsigned __int8 *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  *uint64_t v11 = *v39;
                  unint64_t v88 = v39 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v88;
                }
                *(_DWORD *)(v3 + 212) |= 0x8000u;
                if ((int)v36 - (int)v88 < 2 || *v88 != 136 || v88[1] != 1) {
                  continue;
                }
                uint64_t v40 = v88 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v40;
LABEL_245:
                unsigned int v119 = 0;
                if ((unint64_t)v40 >= v36 || (char)*v40 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v119);
                  if (!this) {
                    return this;
                  }
                  unsigned int v89 = v119;
                  int v90 = (unsigned __int8 *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  unsigned int v89 = *v40;
                  int v90 = v40 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v90;
                }
                *(unsigned char *)(v3 + 176) = v89 != 0;
                *(_DWORD *)(v3 + 212) |= 0x10000u;
                if ((int)v36 - (int)v90 < 2 || *v90 != 144 || v90[1] != 1) {
                  continue;
                }
                int v41 = v90 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v41;
LABEL_254:
                if ((unint64_t)v41 >= v36 || (char)*v41 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v117);
                  if (!this) {
                    return this;
                  }
                  uint64_t v91 = (unsigned __int8 *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  *char v117 = *v41;
                  uint64_t v91 = v41 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v91;
                }
                *(_DWORD *)(v3 + 212) |= 0x20000u;
                if ((int)v36 - (int)v91 < 2 || *v91 != 152 || v91[1] != 1) {
                  continue;
                }
                char v42 = v91 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v42;
LABEL_263:
                if ((unint64_t)v42 >= v36 || (char)*v42 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116);
                  if (!this) {
                    return this;
                  }
                  uint64_t v92 = (unsigned __int8 *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  *uint64_t v116 = *v42;
                  uint64_t v92 = v42 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v92;
                }
                *(_DWORD *)(v3 + 212) |= 0x40000u;
                if ((int)v36 - (int)v92 < 2 || *v92 != 160 || v92[1] != 1) {
                  continue;
                }
                uint64_t v43 = v92 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v43;
LABEL_272:
                if ((unint64_t)v43 >= v36 || (char)*v43 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v115);
                  if (!this) {
                    return this;
                  }
                  uint64_t v93 = (unsigned __int8 *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  *int v115 = *v43;
                  uint64_t v93 = v43 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v93;
                }
                *(_DWORD *)(v3 + 212) |= 0x80000u;
                if ((int)v36 - (int)v93 < 2 || *v93 != 168 || v93[1] != 1) {
                  continue;
                }
                unint64_t v44 = v93 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v44;
LABEL_281:
                if ((unint64_t)v44 >= v36 || (char)*v44 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v114);
                  if (!this) {
                    return this;
                  }
                  uint64_t v94 = (unsigned __int8 *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  *int v114 = *v44;
                  uint64_t v94 = v44 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v94;
                }
                *(_DWORD *)(v3 + 212) |= 0x100000u;
                if ((int)v36 - (int)v94 < 2 || *v94 != 176 || v94[1] != 1) {
                  continue;
                }
                int v45 = v94 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v45;
LABEL_290:
                if ((unint64_t)v45 >= v36 || (char)*v45 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v113);
                  if (!this) {
                    return this;
                  }
                  int v95 = (unsigned __int8 *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  *int v113 = *v45;
                  int v95 = v45 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v95;
                }
                *(_DWORD *)(v3 + 212) |= 0x200000u;
                if ((int)v36 - (int)v95 < 2 || *v95 != 184 || v95[1] != 1) {
                  continue;
                }
                uint64_t v46 = v95 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v46;
LABEL_299:
                if ((unint64_t)v46 >= v36 || (char)*v46 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v112);
                  if (!this) {
                    return this;
                  }
                  long long v96 = (unsigned __int8 *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  *BOOL v112 = *v46;
                  long long v96 = v46 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v96;
                }
                *(_DWORD *)(v3 + 212) |= 0x400000u;
                if ((int)v36 - (int)v96 < 2 || *v96 != 192 || v96[1] != 1) {
                  continue;
                }
                int v47 = v96 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v47;
LABEL_308:
                if ((unint64_t)v47 >= v36 || (char)*v47 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v111);
                  if (!this) {
                    return this;
                  }
                  long long v97 = (unsigned __int8 *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  *int v111 = *v47;
                  long long v97 = v47 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v97;
                }
                *(_DWORD *)(v3 + 212) |= 0x800000u;
                if ((int)v36 - (int)v97 < 2 || *v97 != 200 || v97[1] != 1) {
                  continue;
                }
                char v48 = v97 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v48;
LABEL_317:
                if ((unint64_t)v48 >= v36 || (char)*v48 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v110);
                  if (!this) {
                    return this;
                  }
                  int64x2_t v98 = (unsigned __int8 *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  unint64_t *v110 = *v48;
                  int64x2_t v98 = v48 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v98;
                }
                *(_DWORD *)(v3 + 212) |= 0x1000000u;
                if ((int)v36 - (int)v98 < 2 || *v98 != 208 || v98[1] != 1) {
                  continue;
                }
                uint64_t v49 = v98 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v49;
LABEL_326:
                if ((unint64_t)v49 >= v36 || (char)*v49 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v109);
                  if (!this) {
                    return this;
                  }
                  int v99 = (unsigned __int8 *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  *uint64_t v109 = *v49;
                  int v99 = v49 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v99;
                }
                *(_DWORD *)(v3 + 212) |= 0x2000000u;
                if ((int)v36 - (int)v99 < 2 || *v99 != 216 || v99[1] != 1) {
                  continue;
                }
                unint64_t v50 = v99 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v50;
LABEL_335:
                if ((unint64_t)v50 >= v36 || (char)*v50 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v108);
                  if (!this) {
                    return this;
                  }
                  int v100 = (unsigned __int8 *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  *int v108 = *v50;
                  int v100 = v50 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v100;
                }
                *(_DWORD *)(v3 + 212) |= 0x4000000u;
                if ((int)v36 - (int)v100 < 2 || *v100 != 224 || v100[1] != 1) {
                  continue;
                }
                int v51 = v100 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v51;
LABEL_344:
                if ((unint64_t)v51 >= v36 || (char)*v51 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v107);
                  if (!this) {
                    return this;
                  }
                  uint64_t v101 = (unsigned __int8 *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  unsigned int *v107 = *v51;
                  uint64_t v101 = v51 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v101;
                }
                *(_DWORD *)(v3 + 212) |= 0x8000000u;
                if ((int)v36 - (int)v101 < 2 || *v101 != 232 || v101[1] != 1) {
                  continue;
                }
                uint64_t v52 = v101 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v52;
LABEL_353:
                unsigned int v119 = 0;
                if ((unint64_t)v52 >= v36 || (char)*v52 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v119);
                  if (!this) {
                    return this;
                  }
                  unsigned int v102 = v119;
                  uint64_t v103 = (unsigned __int8 *)*((void *)a2 + 1);
                  unint64_t v36 = *((void *)a2 + 2);
                }
                else
                {
                  unsigned int v102 = *v52;
                  uint64_t v103 = v52 + 1;
                  *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v103;
                }
                *(unsigned char *)(v3 + 177) = v102 != 0;
                *(_DWORD *)(v3 + 212) |= 0x10000000u;
                if ((int)v36 - (int)v103 < 2 || *v103 != 240 || v103[1] != 34) {
                  continue;
                }
                unint64_t v56 = v103 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v56;
                break;
              case 2u:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                int v23 = (char *)*((void *)a2 + 1);
                unint64_t v16 = *((void *)a2 + 2);
                goto LABEL_125;
              case 3u:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                uint64_t v25 = (char *)*((void *)a2 + 1);
                unint64_t v24 = *((void *)a2 + 2);
                goto LABEL_135;
              case 4u:
                int v15 = v13 & 7;
                if (v15 != 2) {
                  goto LABEL_102;
                }
                goto LABEL_145;
              case 5u:
                int v15 = v13 & 7;
                if (v15 != 2) {
                  goto LABEL_102;
                }
                goto LABEL_151;
              case 6u:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                int v27 = (char *)*((void *)a2 + 1);
                unint64_t v26 = *((void *)a2 + 2);
                goto LABEL_157;
              case 7u:
                int v15 = v13 & 7;
                if (v15 != 2) {
                  goto LABEL_102;
                }
                int v28 = *(_DWORD *)(v3 + 212);
                goto LABEL_165;
              case 8u:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                int v30 = (char *)*((void *)a2 + 1);
                unint64_t v29 = *((void *)a2 + 2);
                goto LABEL_171;
              case 9u:
                int v15 = v13 & 7;
                if (v15 != 2) {
                  goto LABEL_102;
                }
                goto LABEL_179;
              case 0xAu:
                int v15 = v13 & 7;
                if (v15 != 2) {
                  goto LABEL_102;
                }
                goto LABEL_189;
              case 0xBu:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                int v32 = (char *)*((void *)a2 + 1);
                unint64_t v31 = *((void *)a2 + 2);
                goto LABEL_195;
              case 0xCu:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                int v34 = (char *)*((void *)a2 + 1);
                unint64_t v33 = *((void *)a2 + 2);
                goto LABEL_205;
              case 0xDu:
                int v15 = v13 & 7;
                if (v15 != 2) {
                  goto LABEL_102;
                }
                int v35 = *(_DWORD *)(v3 + 212);
                goto LABEL_213;
              case 0xEu:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                int v37 = (char *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_219;
              case 0xFu:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                char v38 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_227;
              case 0x10u:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                int v39 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_236;
              case 0x11u:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                uint64_t v40 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_245;
              case 0x12u:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                int v41 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_254;
              case 0x13u:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                char v42 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_263;
              case 0x14u:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                uint64_t v43 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_272;
              case 0x15u:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                unint64_t v44 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_281;
              case 0x16u:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                int v45 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_290;
              case 0x17u:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                uint64_t v46 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_299;
              case 0x18u:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                int v47 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_308;
              case 0x19u:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                char v48 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_317;
              case 0x1Au:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                uint64_t v49 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_326;
              case 0x1Bu:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                unint64_t v50 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_335;
              case 0x1Cu:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                int v51 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_344;
              case 0x1Du:
                int v15 = v13 & 7;
                if ((v13 & 7) != 0) {
                  goto LABEL_102;
                }
                uint64_t v52 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v36 = *((void *)a2 + 2);
                goto LABEL_353;
              default:
                goto LABEL_101;
            }
            goto LABEL_362;
          }
          if (v13 >> 3 > 0x257) {
            break;
          }
          if (v14 == 558)
          {
            int v15 = v13 & 7;
            if ((v13 & 7) != 0) {
              goto LABEL_102;
            }
            unint64_t v56 = (unsigned __int8 *)*((void *)a2 + 1);
            unint64_t v36 = *((void *)a2 + 2);
LABEL_362:
            if ((unint64_t)v56 >= v36 || (char)*v56 < 0)
            {
              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v106);
              if (!this) {
                return this;
              }
              uint64_t v104 = (unsigned __int8 *)*((void *)a2 + 1);
              unint64_t v36 = *((void *)a2 + 2);
            }
            else
            {
              *int v106 = *v56;
              uint64_t v104 = v56 + 1;
              *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v104;
            }
            int v21 = *(_DWORD *)(v3 + 212) | 0x20000000;
            *(_DWORD *)(v3 + 212) = v21;
            if ((int)v36 - (int)v104 >= 2 && *v104 == 250 && v104[1] == 34)
            {
              *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v104 + 2;
              goto LABEL_23;
            }
          }
          else
          {
            if (v14 != 559)
            {
LABEL_101:
              int v15 = v13 & 7;
              goto LABEL_102;
            }
            int v15 = v13 & 7;
            if (v15 != 2) {
              goto LABEL_102;
            }
            int v21 = *(_DWORD *)(v3 + 212);
LABEL_23:
            *(_DWORD *)(v3 + 212) = v21 | 0x40000000;
            if (*(void *)(v3 + 184) == MEMORY[0x1E4FBA920]) {
              operator new();
            }
            this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
            if (!this) {
              return this;
            }
            uint64_t v22 = (unsigned __int8 *)*((void *)a2 + 1);
            if (*((_DWORD *)a2 + 4) - (int)v22 >= 2 && *v22 == 194 && v22[1] == 37)
            {
              *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v22 + 2;
LABEL_87:
              *(_DWORD *)(v3 + 212) |= 0x80000000;
              if (*(void *)(v3 + 200) == MEMORY[0x1E4FBA920]) {
                operator new();
              }
              this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
              if (!this) {
                return this;
              }
              int v53 = (unsigned __int8 *)*((void *)a2 + 1);
              unint64_t v19 = *((void *)a2 + 2);
              if ((int)v19 - (int)v53 >= 2 && *v53 == 200 && v53[1] == 37)
              {
                char v54 = v53 + 2;
                *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v54;
                goto LABEL_96;
              }
            }
          }
        }
        if (v14 != 600) {
          break;
        }
        int v15 = v13 & 7;
        if (v15 == 2) {
          goto LABEL_87;
        }
LABEL_102:
        if (v15 == 4) {
          return 1;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, v13);
        if ((this & 1) == 0) {
          return 0;
        }
      }
      if (v14 != 601) {
        break;
      }
      int v15 = v13 & 7;
      if ((v13 & 7) != 0) {
        goto LABEL_102;
      }
      char v54 = (unsigned __int8 *)*((void *)a2 + 1);
      unint64_t v19 = *((void *)a2 + 2);
LABEL_96:
      if ((unint64_t)v54 >= v19 || (char)*v54 < 0)
      {
        this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v118);
        if (!this) {
          return this;
        }
        uint64_t v55 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v19 = *((void *)a2 + 2);
      }
      else
      {
        *int v118 = *v54;
        uint64_t v55 = v54 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v55;
      }
      *(_DWORD *)(v3 + 216) |= 1u;
      if ((int)v19 - (int)v55 >= 2 && *v55 == 208 && v55[1] == 37)
      {
        unint64_t v20 = (char *)(v55 + 2);
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v20;
        goto LABEL_111;
      }
    }
    if (v14 != 602) {
      goto LABEL_101;
    }
    int v15 = v13 & 7;
    if ((v13 & 7) != 0) {
      goto LABEL_102;
    }
    unint64_t v20 = (char *)*((void *)a2 + 1);
    unint64_t v19 = *((void *)a2 + 2);
LABEL_111:
    unsigned int v119 = 0;
    if ((unint64_t)v20 >= v19 || *v20 < 0)
    {
      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v119);
      if (!this) {
        return this;
      }
      unsigned int v57 = v119;
      unsigned int v58 = (unsigned __int8 *)*((void *)a2 + 1);
      unint64_t v19 = *((void *)a2 + 2);
    }
    else
    {
      unsigned int v57 = *v20;
      unsigned int v58 = (unsigned __int8 *)(v20 + 1);
      *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v58;
    }
    *(unsigned char *)(v3 + 178) = v57 != 0;
    *(_DWORD *)(v3 + 216) |= 2u;
  }
  while (v58 != (unsigned __int8 *)v19 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  this = 1;
  *((unsigned char *)a2 + 36) = 1;
  return this;
}

uint64_t awd::metrics::ATM_Registration_Result::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 212);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 212);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_42;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 212);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 212);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 212);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 212);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 48), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 212);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_46:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  if ((*(_DWORD *)(v5 + 212) & 0x80) != 0) {
LABEL_9:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 52), (uint64_t)a2, a4);
LABEL_10:
  if (*(int *)(v5 + 64) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
      ++v7;
    }
    while (v7 < *(int *)(v5 + 64));
  }
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x200) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    int v8 = *(_DWORD *)(v5 + 212);
    if ((v8 & 0x400) == 0)
    {
LABEL_15:
      if ((v8 & 0x800) == 0) {
        goto LABEL_16;
      }
      goto LABEL_50;
    }
  }
  else if ((v8 & 0x400) == 0)
  {
    goto LABEL_15;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 88), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x800) == 0)
  {
LABEL_16:
    if ((v8 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 92), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x1000) == 0)
  {
LABEL_17:
    if ((v8 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x2000) == 0)
  {
LABEL_18:
    if ((v8 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned int *)(v5 + 104), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x4000) == 0)
  {
LABEL_19:
    if ((v8 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(unsigned int *)(v5 + 108), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x8000) == 0)
  {
LABEL_20:
    if ((v8 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 112), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x10000) == 0)
  {
LABEL_21:
    if ((v8 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(unsigned __int8 *)(v5 + 176), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x20000) == 0)
  {
LABEL_22:
    if ((v8 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, *(unsigned int *)(v5 + 116), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x40000) == 0)
  {
LABEL_23:
    if ((v8 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(unsigned int *)(v5 + 120), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x80000) == 0)
  {
LABEL_24:
    if ((v8 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(unsigned int *)(v5 + 124), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x100000) == 0)
  {
LABEL_25:
    if ((v8 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned int *)(v5 + 128), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x200000) == 0)
  {
LABEL_26:
    if ((v8 & 0x400000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(unsigned int *)(v5 + 132), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x400000) == 0)
  {
LABEL_27:
    if ((v8 & 0x800000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, *(void *)(v5 + 136), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x800000) == 0)
  {
LABEL_28:
    if ((v8 & 0x1000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18, *(void *)(v5 + 144), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v8 & 0x2000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19, *(void *)(v5 + 152), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_30:
    if ((v8 & 0x4000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1A, *(void *)(v5 + 160), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v8 & 0x8000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, *(void *)(v5 + 168), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_32:
    if ((v8 & 0x10000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, *(unsigned int *)(v5 + 180), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x20000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, *(unsigned __int8 *)(v5 + 177), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x40000000) == 0) {
      goto LABEL_35;
    }
LABEL_69:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((*(_DWORD *)(v5 + 212) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_70;
  }
LABEL_68:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22E, *(unsigned int *)(v5 + 192), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x40000000) != 0) {
    goto LABEL_69;
  }
LABEL_35:
  if ((v8 & 0x80000000) == 0) {
    goto LABEL_36;
  }
LABEL_70:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
LABEL_36:
  int v9 = *(_DWORD *)(v5 + 216);
  if (v9)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x259, *(unsigned int *)(v5 + 196), (uint64_t)a2, a4);
    int v9 = *(_DWORD *)(v5 + 216);
  }
  if ((v9 & 2) != 0)
  {
    uint64_t v10 = *(unsigned __int8 *)(v5 + 178);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25A, v10, (uint64_t)a2, a4);
  }
  return this;
}

uint64_t awd::metrics::ATM_Registration_Result::ByteSize(awd::metrics::ATM_Registration_Result *this)
{
  unsigned int v2 = *((_DWORD *)this + 53);
  if (!(_BYTE)v2)
  {
    int v3 = 0;
    goto LABEL_61;
  }
  if (v2)
  {
    int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                     + 1))
       + 1;
    unsigned int v2 = *((_DWORD *)this + 53);
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    int v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
  }
  uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if ((v4 & 0x80000000) != 0)
  {
    int v5 = 10;
  }
  else if (v4 >= 0x80)
  {
    int v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    unsigned int v2 = *((_DWORD *)this + 53);
  }
  else
  {
    int v5 = 1;
  }
  v3 += v5 + 1;
LABEL_13:
  if ((v2 & 4) != 0)
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if ((v6 & 0x80000000) != 0)
    {
      int v7 = 10;
    }
    else if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
      unsigned int v2 = *((_DWORD *)this + 53);
    }
    else
    {
      int v7 = 1;
    }
    v3 += v7 + 1;
    if ((v2 & 8) == 0)
    {
LABEL_15:
      if ((v2 & 0x10) == 0) {
        goto LABEL_16;
      }
      goto LABEL_35;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)this + 3);
  int v9 = *(unsigned __int8 *)(v8 + 23);
  char v10 = v9;
  uint64_t v11 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    unint64_t v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    unint64_t v12 = v11;
  }
  if (v12 >= 0x80)
  {
    int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12);
    int v9 = *(unsigned __int8 *)(v8 + 23);
    uint64_t v11 = *(void *)(v8 + 8);
    unsigned int v2 = *((_DWORD *)this + 53);
    char v10 = *(unsigned char *)(v8 + 23);
  }
  else
  {
    int v13 = 1;
  }
  if (v10 < 0) {
    int v9 = v11;
  }
  v3 += v13 + v9 + 1;
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_35:
  uint64_t v14 = *((void *)this + 4);
  int v15 = *(unsigned __int8 *)(v14 + 23);
  char v16 = v15;
  uint64_t v17 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    unint64_t v18 = v17;
  }
  if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18);
    int v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v17 = *(void *)(v14 + 8);
    unsigned int v2 = *((_DWORD *)this + 53);
    char v16 = *(unsigned char *)(v14 + 23);
  }
  else
  {
    int v19 = 1;
  }
  if (v16 < 0) {
    int v15 = v17;
  }
  v3 += v19 + v15 + 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_44:
  unint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
  if (v20 >= 0x80)
  {
    int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
    unsigned int v2 = *((_DWORD *)this + 53);
  }
  else
  {
    int v21 = 1;
  }
  v3 += v21 + 1;
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_61;
    }
    goto LABEL_57;
  }
LABEL_48:
  uint64_t v22 = *((void *)this + 5);
  int v23 = *(unsigned __int8 *)(v22 + 23);
  char v24 = v23;
  uint64_t v25 = *(void *)(v22 + 8);
  if ((v23 & 0x80u) == 0) {
    unint64_t v26 = *(unsigned __int8 *)(v22 + 23);
  }
  else {
    unint64_t v26 = v25;
  }
  if (v26 >= 0x80)
  {
    int v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v26);
    int v23 = *(unsigned __int8 *)(v22 + 23);
    uint64_t v25 = *(void *)(v22 + 8);
    unsigned int v2 = *((_DWORD *)this + 53);
    char v24 = *(unsigned char *)(v22 + 23);
  }
  else
  {
    int v27 = 1;
  }
  if (v24 < 0) {
    int v23 = v25;
  }
  v3 += v27 + v23 + 1;
  if ((v2 & 0x80) != 0)
  {
LABEL_57:
    int v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
    if (v28 >= 0x80)
    {
      int v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28);
      unsigned int v2 = *((_DWORD *)this + 53);
    }
    else
    {
      int v29 = 1;
    }
    v3 += v29 + 1;
  }
LABEL_61:
  if ((v2 & 0x1FE00) == 0) {
    goto LABEL_110;
  }
  if ((v2 & 0x200) != 0)
  {
    uint64_t v30 = *((void *)this + 10);
    int v31 = *(unsigned __int8 *)(v30 + 23);
    char v32 = v31;
    uint64_t v33 = *(void *)(v30 + 8);
    if ((v31 & 0x80u) == 0) {
      unint64_t v34 = *(unsigned __int8 *)(v30 + 23);
    }
    else {
      unint64_t v34 = v33;
    }
    if (v34 >= 0x80)
    {
      int v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
      int v31 = *(unsigned __int8 *)(v30 + 23);
      uint64_t v33 = *(void *)(v30 + 8);
      unsigned int v2 = *((_DWORD *)this + 53);
      char v32 = *(unsigned char *)(v30 + 23);
    }
    else
    {
      int v35 = 1;
    }
    if (v32 < 0) {
      int v31 = v33;
    }
    v3 += v35 + v31 + 1;
    if ((v2 & 0x400) == 0)
    {
LABEL_64:
      if ((v2 & 0x800) == 0) {
        goto LABEL_65;
      }
      goto LABEL_85;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_64;
  }
  unint64_t v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 22);
  if ((v36 & 0x80000000) != 0)
  {
    int v37 = 10;
  }
  else if (v36 >= 0x80)
  {
    int v37 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36);
    unsigned int v2 = *((_DWORD *)this + 53);
  }
  else
  {
    int v37 = 1;
  }
  v3 += v37 + 1;
  if ((v2 & 0x800) == 0)
  {
LABEL_65:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_89;
  }
LABEL_85:
  char v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 23);
  if (v38 >= 0x80)
  {
    int v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38);
    unsigned int v2 = *((_DWORD *)this + 53);
  }
  else
  {
    int v39 = 1;
  }
  v3 += v39 + 1;
  if ((v2 & 0x1000) == 0)
  {
LABEL_66:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_98;
  }
LABEL_89:
  uint64_t v40 = *((void *)this + 12);
  int v41 = *(unsigned __int8 *)(v40 + 23);
  char v42 = v41;
  uint64_t v43 = *(void *)(v40 + 8);
  if ((v41 & 0x80u) == 0) {
    unint64_t v44 = *(unsigned __int8 *)(v40 + 23);
  }
  else {
    unint64_t v44 = v43;
  }
  if (v44 >= 0x80)
  {
    int v45 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v44);
    int v41 = *(unsigned __int8 *)(v40 + 23);
    uint64_t v43 = *(void *)(v40 + 8);
    unsigned int v2 = *((_DWORD *)this + 53);
    char v42 = *(unsigned char *)(v40 + 23);
  }
  else
  {
    int v45 = 1;
  }
  if (v42 < 0) {
    int v41 = v43;
  }
  v3 += v45 + v41 + 1;
  if ((v2 & 0x2000) == 0)
  {
LABEL_67:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_102;
  }
LABEL_98:
  uint64_t v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 26);
  if (v46 >= 0x80)
  {
    int v47 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v46);
    unsigned int v2 = *((_DWORD *)this + 53);
  }
  else
  {
    int v47 = 1;
  }
  v3 += v47 + 1;
  if ((v2 & 0x4000) == 0)
  {
LABEL_68:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_110;
    }
    goto LABEL_106;
  }
LABEL_102:
  char v48 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 27);
  if (v48 >= 0x80)
  {
    int v49 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v48);
    unsigned int v2 = *((_DWORD *)this + 53);
  }
  else
  {
    int v49 = 1;
  }
  v3 += v49 + 1;
  if ((v2 & 0x8000) != 0)
  {
LABEL_106:
    unint64_t v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 28);
    if (v50 >= 0x80)
    {
      int v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v50);
      unsigned int v2 = *((_DWORD *)this + 53);
    }
    else
    {
      int v51 = 1;
    }
    v3 += v51 + 2;
  }
LABEL_110:
  if ((v2 & 0xFF0000) == 0) {
    goto LABEL_121;
  }
  if ((v2 & 0x10000) != 0) {
    v3 += 3;
  }
  if ((v2 & 0x20000) != 0)
  {
    uint64_t v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 29);
    if (v52 >= 0x80)
    {
      int v53 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52);
      unsigned int v2 = *((_DWORD *)this + 53);
    }
    else
    {
      int v53 = 1;
    }
    v3 += v53 + 2;
    if ((v2 & 0x40000) == 0)
    {
LABEL_115:
      if ((v2 & 0x80000) == 0) {
        goto LABEL_116;
      }
      goto LABEL_140;
    }
  }
  else if ((v2 & 0x40000) == 0)
  {
    goto LABEL_115;
  }
  unint64_t v56 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 30);
  if (v56 >= 0x80)
  {
    int v57 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v56);
    unsigned int v2 = *((_DWORD *)this + 53);
  }
  else
  {
    int v57 = 1;
  }
  v3 += v57 + 2;
  if ((v2 & 0x80000) == 0)
  {
LABEL_116:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_117;
    }
    goto LABEL_144;
  }
LABEL_140:
  unsigned int v58 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 31);
  if (v58 >= 0x80)
  {
    int v59 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v58);
    unsigned int v2 = *((_DWORD *)this + 53);
  }
  else
  {
    int v59 = 1;
  }
  v3 += v59 + 2;
  if ((v2 & 0x100000) == 0)
  {
LABEL_117:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_118;
    }
    goto LABEL_148;
  }
LABEL_144:
  long long v60 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 32);
  if (v60 >= 0x80)
  {
    int v61 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v60);
    unsigned int v2 = *((_DWORD *)this + 53);
  }
  else
  {
    int v61 = 1;
  }
  v3 += v61 + 2;
  if ((v2 & 0x200000) == 0)
  {
LABEL_118:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_119;
    }
    goto LABEL_152;
  }
LABEL_148:
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v62 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 33);
  if (v62 >= 0x80)
  {
    int v63 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v62);
    unsigned int v2 = *((_DWORD *)this + 53);
  }
  else
  {
    int v63 = 1;
  }
  v3 += v63 + 2;
  if ((v2 & 0x400000) == 0)
  {
LABEL_119:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_121;
    }
    goto LABEL_120;
  }
LABEL_152:
  v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 17))
      + 2;
  unsigned int v2 = *((_DWORD *)this + 53);
  if ((v2 & 0x800000) != 0)
  {
LABEL_120:
    v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                      + 18))
        + 2;
    unsigned int v2 = *((_DWORD *)this + 53);
  }
LABEL_121:
  if (!HIBYTE(v2)) {
    goto LABEL_184;
  }
  if ((v2 & 0x1000000) != 0)
  {
    v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                      + 19))
        + 2;
    unsigned int v2 = *((_DWORD *)this + 53);
    if ((v2 & 0x2000000) == 0)
    {
LABEL_124:
      if ((v2 & 0x4000000) == 0) {
        goto LABEL_125;
      }
      goto LABEL_131;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_124;
  }
  v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 20))
      + 2;
  unsigned int v2 = *((_DWORD *)this + 53);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_125:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_156;
    }
    goto LABEL_132;
  }
LABEL_131:
  v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 21))
      + 2;
  unsigned int v2 = *((_DWORD *)this + 53);
  if ((v2 & 0x8000000) == 0) {
    goto LABEL_156;
  }
LABEL_132:
  char v54 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 45);
  if (v54 >= 0x80)
  {
    int v55 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v54) + 2;
    unsigned int v2 = *((_DWORD *)this + 53);
  }
  else
  {
    int v55 = 3;
  }
  v3 += v55;
LABEL_156:
  if ((v2 & 0x10000000) != 0) {
    v3 += 3;
  }
  if ((v2 & 0x20000000) != 0)
  {
    int v64 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 48);
    if (v64 >= 0x80)
    {
      int v65 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v64) + 2;
      unsigned int v2 = *((_DWORD *)this + 53);
    }
    else
    {
      int v65 = 3;
    }
    v3 += v65;
    if ((v2 & 0x40000000) == 0)
    {
LABEL_160:
      if ((v2 & 0x80000000) == 0) {
        goto LABEL_184;
      }
      goto LABEL_175;
    }
  }
  else if ((v2 & 0x40000000) == 0)
  {
    goto LABEL_160;
  }
  uint64_t v66 = *((void *)this + 23);
  int v67 = *(unsigned __int8 *)(v66 + 23);
  char v68 = v67;
  uint64_t v69 = *(void *)(v66 + 8);
  if ((v67 & 0x80u) == 0) {
    unint64_t v70 = *(unsigned __int8 *)(v66 + 23);
  }
  else {
    unint64_t v70 = v69;
  }
  if (v70 >= 0x80)
  {
    int v71 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v70);
    int v67 = *(unsigned __int8 *)(v66 + 23);
    uint64_t v69 = *(void *)(v66 + 8);
    unsigned int v2 = *((_DWORD *)this + 53);
    char v68 = *(unsigned char *)(v66 + 23);
  }
  else
  {
    int v71 = 1;
  }
  if (v68 < 0) {
    int v67 = v69;
  }
  v3 += v71 + v67 + 2;
  if ((v2 & 0x80000000) != 0)
  {
LABEL_175:
    uint64_t v72 = *((void *)this + 25);
    int v73 = *(unsigned __int8 *)(v72 + 23);
    char v74 = v73;
    uint64_t v75 = *(void *)(v72 + 8);
    if ((v73 & 0x80u) == 0) {
      unint64_t v76 = *(unsigned __int8 *)(v72 + 23);
    }
    else {
      unint64_t v76 = v75;
    }
    if (v76 >= 0x80)
    {
      int v77 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v76);
      int v73 = *(unsigned __int8 *)(v72 + 23);
      uint64_t v75 = *(void *)(v72 + 8);
      char v74 = *(unsigned char *)(v72 + 23);
    }
    else
    {
      int v77 = 1;
    }
    if (v74 < 0) {
      int v73 = v75;
    }
    v3 += v77 + v73 + 2;
  }
LABEL_184:
  LOBYTE(v78) = *((unsigned char *)this + 216);
  if ((_BYTE)v78)
  {
    if (*((unsigned char *)this + 216))
    {
      int v79 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 49);
      if (v79 >= 0x80)
      {
        int v80 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v79) + 2;
        int v78 = *((_DWORD *)this + 54);
      }
      else
      {
        int v80 = 3;
      }
      v3 += v80;
    }
    if ((v78 & 2) != 0) {
      v3 += 3;
    }
  }
  int v81 = *((_DWORD *)this + 16);
  uint64_t v82 = (v81 + v3);
  if (v81 >= 1)
  {
    for (uint64_t i = 0; i < v81; ++i)
    {
      uint64_t v84 = *(void *)(*((void *)this + 7) + 8 * i);
      int v85 = *(unsigned __int8 *)(v84 + 23);
      char v86 = v85;
      uint64_t v87 = *(void *)(v84 + 8);
      if ((v85 & 0x80u) == 0) {
        unint64_t v88 = *(unsigned __int8 *)(v84 + 23);
      }
      else {
        unint64_t v88 = v87;
      }
      if (v88 >= 0x80)
      {
        int v89 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v88);
        int v85 = *(unsigned __int8 *)(v84 + 23);
        uint64_t v87 = *(void *)(v84 + 8);
        int v81 = *((_DWORD *)this + 16);
        char v86 = *(unsigned char *)(v84 + 23);
      }
      else
      {
        int v89 = 1;
      }
      if (v86 < 0) {
        int v85 = v87;
      }
      uint64_t v82 = (v89 + v82 + v85);
    }
  }
  *((_DWORD *)this + 52) = v82;
  return v82;
}

uint64_t awd::metrics::ATM_Registration_Result::CheckTypeAndMergeFrom(const std::string **this, const std::string **lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v56);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 7));
  if (*((int *)lpsrc + 16) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      int v6 = (const std::string *)*((void *)&lpsrc[7]->__r_.__value_.__l.__data_ + v5);
      int v7 = *((_DWORD *)this + 17);
      uint64_t v8 = *((int *)this + 16);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 18))
        {
          uint64_t result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 7));
          int v7 = *((_DWORD *)this + 17);
        }
        *((_DWORD *)this + 17) = v7 + 1;
        char v10 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
        uint64_t v11 = this[7];
        uint64_t v12 = *((int *)this + 16);
        *((_DWORD *)this + 16) = v12 + 1;
        v11->__r_.__value_.__r.__words[v12] = (std::string::size_type)v10;
      }
      else
      {
        int v9 = this[7];
        *((_DWORD *)this + 16) = v8 + 1;
        char v10 = (std::string *)*((void *)&v9->__r_.__value_.__l.__data_ + v8);
      }
      uint64_t result = (uint64_t)std::string::operator=(v10, v6);
      ++v5;
    }
    while (v5 < *((int *)lpsrc + 16));
  }
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if (!(_BYTE)v13) {
    goto LABEL_27;
  }
  if (v13)
  {
    uint64_t v14 = lpsrc[1];
    *((_DWORD *)this + 53) |= 1u;
    this[1] = v14;
    unsigned int v13 = *((_DWORD *)lpsrc + 53);
  }
  if ((v13 & 2) != 0)
  {
    int v15 = *((_DWORD *)lpsrc + 4);
    if ((v15 - 1) >= 0xD) {
      __assert_rtn("set_type", "CATM.pb.h", 7735, "::awd::metrics::enum_ims_reg_type_IsValid(value)");
    }
    *((_DWORD *)this + 53) |= 2u;
    *((_DWORD *)this + 4) = v15;
    unsigned int v13 = *((_DWORD *)lpsrc + 53);
  }
  if ((v13 & 4) != 0)
  {
    int v16 = *((_DWORD *)lpsrc + 5);
    if ((v16 - 1) >= 4) {
      __assert_rtn("set_feature", "CATM.pb.h", 7758, "::awd::metrics::enum_ims_reg_feature_IsValid(value)");
    }
    *((_DWORD *)this + 53) |= 4u;
    *((_DWORD *)this + 5) = v16;
    unsigned int v13 = *((_DWORD *)lpsrc + 53);
  }
  uint64_t v17 = (std::string *)MEMORY[0x1E4FBA920];
  if ((v13 & 8) != 0)
  {
    int v31 = lpsrc[3];
    *((_DWORD *)this + 53) |= 8u;
    char v32 = (std::string *)this[3];
    if (v32 == v17) {
      operator new();
    }
    uint64_t result = (uint64_t)std::string::operator=(v32, v31);
    unsigned int v13 = *((_DWORD *)lpsrc + 53);
    if ((v13 & 0x10) == 0)
    {
LABEL_23:
      if ((v13 & 0x20) == 0) {
        goto LABEL_24;
      }
LABEL_75:
      int v35 = *((_DWORD *)lpsrc + 12);
      *((_DWORD *)this + 53) |= 0x20u;
      *((_DWORD *)this + 12) = v35;
      unsigned int v13 = *((_DWORD *)lpsrc + 53);
      if ((v13 & 0x40) == 0)
      {
LABEL_25:
        if ((v13 & 0x80) == 0) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
      goto LABEL_76;
    }
  }
  else if ((v13 & 0x10) == 0)
  {
    goto LABEL_23;
  }
  uint64_t v33 = lpsrc[4];
  *((_DWORD *)this + 53) |= 0x10u;
  unint64_t v34 = (std::string *)this[4];
  if (v34 == v17) {
    operator new();
  }
  uint64_t result = (uint64_t)std::string::operator=(v34, v33);
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x20) != 0) {
    goto LABEL_75;
  }
LABEL_24:
  if ((v13 & 0x40) == 0) {
    goto LABEL_25;
  }
LABEL_76:
  unint64_t v36 = lpsrc[5];
  *((_DWORD *)this + 53) |= 0x40u;
  int v37 = (std::string *)this[5];
  if (v37 == v17) {
    operator new();
  }
  uint64_t result = (uint64_t)std::string::operator=(v37, v36);
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x80) != 0)
  {
LABEL_26:
    int v18 = *((_DWORD *)lpsrc + 13);
    *((_DWORD *)this + 53) |= 0x80u;
    *((_DWORD *)this + 13) = v18;
    unsigned int v13 = *((_DWORD *)lpsrc + 53);
  }
LABEL_27:
  if ((v13 & 0x1FE00) == 0) {
    goto LABEL_41;
  }
  if ((v13 & 0x200) != 0)
  {
    int v19 = lpsrc[10];
    *((_DWORD *)this + 53) |= 0x200u;
    unint64_t v20 = (std::string *)this[10];
    if (v20 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    uint64_t result = (uint64_t)std::string::operator=(v20, v19);
    unsigned int v13 = *((_DWORD *)lpsrc + 53);
  }
  if ((v13 & 0x400) != 0)
  {
    unsigned int v21 = *((_DWORD *)lpsrc + 22);
    uint64_t result = awd::metrics::RESPONSE_Code_IsValid((awd::metrics *)v21);
    if ((result & 1) == 0) {
      __assert_rtn("set_result", "CATM.pb.h", 8149, "::awd::metrics::RESPONSE_Code_IsValid(value)");
    }
    *((_DWORD *)this + 53) |= 0x400u;
    *((_DWORD *)this + 22) = v21;
    unsigned int v13 = *((_DWORD *)lpsrc + 53);
  }
  if ((v13 & 0x800) != 0)
  {
    int v38 = *((_DWORD *)lpsrc + 23);
    *((_DWORD *)this + 53) |= 0x800u;
    *((_DWORD *)this + 23) = v38;
    unsigned int v13 = *((_DWORD *)lpsrc + 53);
    if ((v13 & 0x1000) == 0)
    {
LABEL_37:
      if ((v13 & 0x2000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_84;
    }
  }
  else if ((v13 & 0x1000) == 0)
  {
    goto LABEL_37;
  }
  int v39 = lpsrc[12];
  *((_DWORD *)this + 53) |= 0x1000u;
  uint64_t v40 = (std::string *)this[12];
  if (v40 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  uint64_t result = (uint64_t)std::string::operator=(v40, v39);
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x2000) == 0)
  {
LABEL_38:
    if ((v13 & 0x4000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_85;
  }
LABEL_84:
  int v41 = *((_DWORD *)lpsrc + 26);
  *((_DWORD *)this + 53) |= 0x2000u;
  *((_DWORD *)this + 26) = v41;
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x4000) == 0)
  {
LABEL_39:
    if ((v13 & 0x8000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
LABEL_85:
  int v42 = *((_DWORD *)lpsrc + 27);
  *((_DWORD *)this + 53) |= 0x4000u;
  *((_DWORD *)this + 27) = v42;
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x8000) != 0)
  {
LABEL_40:
    int v22 = *((_DWORD *)lpsrc + 28);
    *((_DWORD *)this + 53) |= 0x8000u;
    *((_DWORD *)this + 28) = v22;
    unsigned int v13 = *((_DWORD *)lpsrc + 53);
  }
LABEL_41:
  if ((v13 & 0xFF0000) == 0) {
    goto LABEL_51;
  }
  if ((v13 & 0x10000) != 0)
  {
    char v24 = *((unsigned char *)lpsrc + 176);
    *((_DWORD *)this + 53) |= 0x10000u;
    *((unsigned char *)this + 176) = v24;
    unsigned int v13 = *((_DWORD *)lpsrc + 53);
    if ((v13 & 0x20000) == 0)
    {
LABEL_44:
      if ((v13 & 0x40000) == 0) {
        goto LABEL_45;
      }
      goto LABEL_63;
    }
  }
  else if ((v13 & 0x20000) == 0)
  {
    goto LABEL_44;
  }
  int v25 = *((_DWORD *)lpsrc + 29);
  *((_DWORD *)this + 53) |= 0x20000u;
  *((_DWORD *)this + 29) = v25;
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x40000) == 0)
  {
LABEL_45:
    if ((v13 & 0x80000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v26 = *((_DWORD *)lpsrc + 30);
  *((_DWORD *)this + 53) |= 0x40000u;
  *((_DWORD *)this + 30) = v26;
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x80000) == 0)
  {
LABEL_46:
    if ((v13 & 0x100000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v27 = *((_DWORD *)lpsrc + 31);
  *((_DWORD *)this + 53) |= 0x80000u;
  *((_DWORD *)this + 3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v27;
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x100000) == 0)
  {
LABEL_47:
    if ((v13 & 0x200000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_66;
  }
LABEL_65:
  int v28 = *((_DWORD *)lpsrc + 32);
  *((_DWORD *)this + 53) |= 0x100000u;
  *((_DWORD *)this + 32) = v28;
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x200000) == 0)
  {
LABEL_48:
    if ((v13 & 0x400000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_67;
  }
LABEL_66:
  int v29 = *((_DWORD *)lpsrc + 33);
  *((_DWORD *)this + 53) |= 0x200000u;
  *((_DWORD *)this + 33) = v29;
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x400000) == 0)
  {
LABEL_49:
    if ((v13 & 0x800000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
LABEL_67:
  uint64_t v30 = lpsrc[17];
  *((_DWORD *)this + 53) |= 0x400000u;
  this[17] = v30;
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x800000) != 0)
  {
LABEL_50:
    int v23 = lpsrc[18];
    *((_DWORD *)this + 53) |= 0x800000u;
    this[18] = v23;
    unsigned int v13 = *((_DWORD *)lpsrc + 53);
  }
LABEL_51:
  if (!HIBYTE(v13)) {
    goto LABEL_99;
  }
  if ((v13 & 0x1000000) != 0)
  {
    uint64_t v43 = lpsrc[19];
    *((_DWORD *)this + 53) |= 0x1000000u;
    this[19] = v43;
    unsigned int v13 = *((_DWORD *)lpsrc + 53);
    if ((v13 & 0x2000000) == 0)
    {
LABEL_54:
      if ((v13 & 0x4000000) == 0) {
        goto LABEL_55;
      }
      goto LABEL_89;
    }
  }
  else if ((v13 & 0x2000000) == 0)
  {
    goto LABEL_54;
  }
  unint64_t v44 = lpsrc[20];
  *((_DWORD *)this + 53) |= 0x2000000u;
  this[20] = v44;
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x4000000) == 0)
  {
LABEL_55:
    if ((v13 & 0x8000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_90;
  }
LABEL_89:
  int v45 = lpsrc[21];
  *((_DWORD *)this + 53) |= 0x4000000u;
  this[21] = v45;
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x8000000) == 0)
  {
LABEL_56:
    if ((v13 & 0x10000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_91;
  }
LABEL_90:
  int v46 = *((_DWORD *)lpsrc + 45);
  *((_DWORD *)this + 53) |= 0x8000000u;
  *((_DWORD *)this + 45) = v46;
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x10000000) == 0)
  {
LABEL_57:
    if ((v13 & 0x20000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_92;
  }
LABEL_91:
  char v47 = *((unsigned char *)lpsrc + 177);
  *((_DWORD *)this + 53) |= 0x10000000u;
  *((unsigned char *)this + 177) = v47;
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x20000000) == 0)
  {
LABEL_58:
    if ((v13 & 0x40000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_93;
  }
LABEL_92:
  int v48 = *((_DWORD *)lpsrc + 48);
  *((_DWORD *)this + 53) |= 0x20000000u;
  *((_DWORD *)this + 48) = v48;
  unsigned int v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x40000000) == 0)
  {
LABEL_59:
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_99;
    }
    goto LABEL_96;
  }
LABEL_93:
  int v49 = lpsrc[23];
  *((_DWORD *)this + 53) |= 0x40000000u;
  unint64_t v50 = (std::string *)this[23];
  if (v50 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  uint64_t result = (uint64_t)std::string::operator=(v50, v49);
  if ((*((_DWORD *)lpsrc + 53) & 0x80000000) != 0)
  {
LABEL_96:
    int v51 = lpsrc[25];
    *((_DWORD *)this + 53) |= 0x80000000;
    uint64_t v52 = (std::string *)this[25];
    if (v52 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    uint64_t result = (uint64_t)std::string::operator=(v52, v51);
  }
LABEL_99:
  LOBYTE(v53) = *((unsigned char *)lpsrc + 216);
  if ((_BYTE)v53)
  {
    if ((_BYTE)lpsrc[27])
    {
      int v54 = *((_DWORD *)lpsrc + 49);
      *((_DWORD *)this + 54) |= 1u;
      *((_DWORD *)this + 49) = v54;
      int v53 = *((_DWORD *)lpsrc + 54);
    }
    if ((v53 & 2) != 0)
    {
      char v55 = *((unsigned char *)lpsrc + 178);
      *((_DWORD *)this + 54) |= 2u;
      *((unsigned char *)this + 178) = v55;
    }
  }
  return result;
}

void sub_1C5267474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::ATM_Registration_Result::IsInitialized(awd::metrics::ATM_Registration_Result *this)
{
  return 1;
}

void *awd::metrics::ATM_Registration_Result::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_Registration_Result");
}

double awd::metrics::ATM_CallAttemptEvent::SharedCtor(awd::metrics::ATM_CallAttemptEvent *this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 2) = v1;
  *((void *)this + 3) = 0xFFFFFFFFLL;
  *((void *)this + 4) = 0xFFFFFFFFLL;
  *((void *)this + 5) = v1;
  *((void *)this + 6) = v1;
  *((void *)this + 7) = v1;
  *((void *)this + 8) = v1;
  *((void *)this + SipIPSecTransportGroup::~SipIPSecTransportGroup(this - 10) = v1;
  *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v1;
  *((void *)this + 13) = v1;
  *((void *)this + 14) = v1;
  *((void *)this + 9) = 0;
  double result = 0.0;
  *((void *)this + 12) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = v1;
  *((void *)this + 17) = v1;
  *((_WORD *)this + 94) = 0;
  *((_DWORD *)this + 46) = 0;
  *((void *)this + 18) = v1;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 22) = v1;
  *((void *)this + 32) = 0;
  *((void *)this + 27) = v1;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v1;
  *((void *)this + 33) = 0;
  return result;
}

void awd::metrics::ATM_CallAttemptEvent::~ATM_CallAttemptEvent(awd::metrics::ATM_CallAttemptEvent *this)
{
  *(void *)this = &unk_1F20BA0F8;
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C878E320](v2, 0x1012C40EC159624);
  }
  uint64_t v5 = *((void *)this + 5);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    MEMORY[0x1C878E320](v5, 0x1012C40EC159624);
  }
  uint64_t v7 = *((void *)this + 6);
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    MEMORY[0x1C878E320](v7, 0x1012C40EC159624);
  }
  uint64_t v9 = *((void *)this + 7);
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    MEMORY[0x1C878E320](v9, 0x1012C40EC159624);
  }
  uint64_t v11 = *((void *)this + 8);
  if (v11 != v3 && v11)
  {
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    MEMORY[0x1C878E320](v11, 0x1012C40EC159624);
  }
  uint64_t v12 = *((void *)this + 10);
  if (v12 != v3 && v12)
  {
    if (*(char *)(v12 + 23) < 0) {
      operator delete(*(void **)v12);
    }
    MEMORY[0x1C878E320](v12, 0x1012C40EC159624);
  }
  uint64_t v13 = *((void *)this + 11);
  if (v13 != v3 && v13)
  {
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    MEMORY[0x1C878E320](v13, 0x1012C40EC159624);
  }
  uint64_t v14 = *((void *)this + 13);
  if (v14 != v3 && v14)
  {
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    MEMORY[0x1C878E320](v14, 0x1012C40EC159624);
  }
  uint64_t v15 = *((void *)this + 14);
  if (v15 != v3 && v15)
  {
    if (*(char *)(v15 + 23) < 0) {
      operator delete(*(void **)v15);
    }
    MEMORY[0x1C878E320](v15, 0x1012C40EC159624);
  }
  uint64_t v16 = *((void *)this + 16);
  if (v16 != v3 && v16)
  {
    if (*(char *)(v16 + 23) < 0) {
      operator delete(*(void **)v16);
    }
    MEMORY[0x1C878E320](v16, 0x1012C40EC159624);
  }
  uint64_t v17 = *((void *)this + 17);
  if (v17 != v3 && v17)
  {
    if (*(char *)(v17 + 23) < 0) {
      operator delete(*(void **)v17);
    }
    MEMORY[0x1C878E320](v17, 0x1012C40EC159624);
  }
  uint64_t v18 = *((void *)this + 18);
  if (v18 != v3 && v18)
  {
    if (*(char *)(v18 + 23) < 0) {
      operator delete(*(void **)v18);
    }
    MEMORY[0x1C878E320](v18, 0x1012C40EC159624);
  }
  uint64_t v19 = *((void *)this + 22);
  if (v19 != v3 && v19)
  {
    if (*(char *)(v19 + 23) < 0) {
      operator delete(*(void **)v19);
    }
    MEMORY[0x1C878E320](v19, 0x1012C40EC159624);
  }
  uint64_t v20 = *((void *)this + 27);
  if (v20 != v3 && v20)
  {
    if (*(char *)(v20 + 23) < 0) {
      operator delete(*(void **)v20);
    }
    MEMORY[0x1C878E320](v20, 0x1012C40EC159624);
  }
  uint64_t v21 = *((void *)this + 31);
  if (v21 != v3 && v21)
  {
    if (*(char *)(v21 + 23) < 0) {
      operator delete(*(void **)v21);
    }
    MEMORY[0x1C878E320](v21, 0x1012C40EC159624);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 48);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  awd::metrics::ATM_CallAttemptEvent::~ATM_CallAttemptEvent(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::ATM_CallAttemptEvent::New(awd::metrics::ATM_CallAttemptEvent *this)
{
}

uint64_t awd::metrics::ATM_CallAttemptEvent::Clear(awd::metrics::ATM_CallAttemptEvent *this)
{
  unsigned int v2 = *((_DWORD *)this + 66);
  if ((_BYTE)v2)
  {
    *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    if ((v2 & 2) != 0)
    {
      uint64_t v3 = *((void *)this + 2);
      if (v3 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    *((void *)this + 3) = 0xFFFFFFFFLL;
    *((unsigned char *)this + 72) = 0;
    unsigned int v2 = *((_DWORD *)this + 66);
  }
  if ((v2 & 0xFF00) != 0)
  {
    *((_DWORD *)this + 8) = -1;
    if ((v2 & 0x200) != 0)
    {
      uint64_t v4 = *((void *)this + 5);
      if (v4 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 9) = 0;
    if ((*((unsigned char *)this + 265) & 8) != 0)
    {
      uint64_t v5 = *((void *)this + 6);
      if (v5 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(unsigned char **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v5 = 0;
          *(unsigned char *)(v5 + 23) = 0;
        }
      }
    }
    *((unsigned char *)this + 73) = 0;
    if ((*((unsigned char *)this + 265) & 0x20) != 0)
    {
      uint64_t v6 = *((void *)this + 7);
      if (v6 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(unsigned char **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v6 = 0;
          *(unsigned char *)(v6 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 265) & 0x40) != 0)
    {
      uint64_t v7 = *((void *)this + 8);
      if (v7 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(unsigned char **)uint64_t v7 = 0;
          *(void *)(v7 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v7 = 0;
          *(unsigned char *)(v7 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 19) = 0;
    unsigned int v2 = *((_DWORD *)this + 66);
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *((_DWORD *)this + 24) = 0;
    *((unsigned char *)this + 74) = 0;
    if ((v2 & 0x40000) != 0)
    {
      uint64_t v8 = *((void *)this + 10);
      if (v8 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(unsigned char **)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v8 = 0;
          *(unsigned char *)(v8 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 266) & 8) != 0)
    {
      uint64_t v9 = *((void *)this + 11);
      if (v9 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v9 + 23) < 0)
        {
          **(unsigned char **)uint64_t v9 = 0;
          *(void *)(v9 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v9 = 0;
          *(unsigned char *)(v9 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 266) & 0x10) != 0)
    {
      uint64_t v10 = *((void *)this + 13);
      if (v10 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(unsigned char **)uint64_t v10 = 0;
          *(void *)(v10 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v10 = 0;
          *(unsigned char *)(v10 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 266) & 0x20) != 0)
    {
      uint64_t v11 = *((void *)this + 14);
      if (v11 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(unsigned char **)uint64_t v11 = 0;
          *(void *)(v11 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v11 = 0;
          *(unsigned char *)(v11 + 23) = 0;
        }
      }
    }
    *((unsigned char *)this + 75) = 0;
    *((_DWORD *)this + 25) = 0;
    unsigned int v2 = *((_DWORD *)this + 66);
  }
  if (HIBYTE(v2))
  {
    *((void *)this + 15) = 0;
    if ((v2 & 0x4000000) != 0)
    {
      uint64_t v12 = *((void *)this + 16);
      if (v12 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v12 + 23) < 0)
        {
          **(unsigned char **)uint64_t v12 = 0;
          *(void *)(v12 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v12 = 0;
          *(unsigned char *)(v12 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 267) & 8) != 0)
    {
      uint64_t v13 = *((void *)this + 17);
      if (v13 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v13 + 23) < 0)
        {
          **(unsigned char **)uint64_t v13 = 0;
          *(void *)(v13 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v13 = 0;
          *(unsigned char *)(v13 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 267) & 0x10) != 0)
    {
      uint64_t v14 = *((void *)this + 18);
      if (v14 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v14 + 23) < 0)
        {
          **(unsigned char **)uint64_t v14 = 0;
          *(void *)(v14 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v14 = 0;
          *(unsigned char *)(v14 + 23) = 0;
        }
      }
    }
    *((void *)this + 19) = 0;
    *((unsigned char *)this + 188) = 0;
  }
  int v15 = *((_DWORD *)this + 67);
  if ((_BYTE)v15)
  {
    *((_DWORD *)this + 46) = 0;
    *((void *)this + 20) = 0;
    *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    if ((v15 & 0x10) != 0)
    {
      uint64_t v16 = *((void *)this + 22);
      if (v16 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v16 + 23) < 0)
        {
          **(unsigned char **)uint64_t v16 = 0;
          *(void *)(v16 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v16 = 0;
          *(unsigned char *)(v16 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 268) & 0x40) != 0)
    {
      uint64_t v17 = *((void *)this + 27);
      if (v17 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v17 + 23) < 0)
        {
          **(unsigned char **)uint64_t v17 = 0;
          *(void *)(v17 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v17 = 0;
          *(unsigned char *)(v17 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 56) = 0;
    int v15 = *((_DWORD *)this + 67);
  }
  if ((v15 & 0xFF00) != 0)
  {
    *((unsigned char *)this + 189) = 0;
    *((_DWORD *)this + 64) = 0;
    *(void *)((char *)this + 236) = 0;
    *(void *)((char *)this + 228) = 0;
    *((_DWORD *)this + 6bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    if ((v15 & 0x8000) != 0)
    {
      uint64_t v18 = *((void *)this + 31);
      if (v18 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v18 + 23) < 0)
        {
          **(unsigned char **)uint64_t v18 = 0;
          *(void *)(v18 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v18 = 0;
          *(unsigned char *)(v18 + 23) = 0;
        }
      }
    }
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Clear<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 192);
  *((void *)this + 33) = 0;
  return result;
}

uint64_t awd::metrics::ATM_CallAttemptEvent::MergePartialFromCodedStream(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = (unsigned int *)(this + 36);
  uint64_t v5 = (unsigned int *)(this + 76);
  uint64_t v6 = (unsigned int *)(this + 152);
  std::string v144 = (unsigned int *)(this + 156);
  std::string v145 = (unsigned int *)(this + 100);
  char v138 = (unsigned int *)(this + 184);
  long long v135 = (unint64_t *)(this + 8);
  std::string v136 = (unint64_t *)(this + 168);
  long long v134 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 192);
  long long v142 = (unsigned int *)(this + 96);
  std::string v143 = (unsigned int *)(this + 124);
  std::string v140 = (unsigned int *)(this + 164);
  std::string::size_type v141 = (unsigned int *)(this + 224);
  std::string v139 = (unsigned int *)(this + 228);
  std::string v137 = (unsigned int *)(this + 232);
  uint64_t v7 = (unsigned int *)(this + 236);
  uint64_t v8 = (unsigned int *)(this + 240);
  uint64_t v9 = (unsigned int *)(this + 244);
  uint64_t v10 = (unsigned int *)(this + 256);
  uint64_t v11 = MEMORY[0x1E4FBA920];
LABEL_2:
  while (2)
  {
    uint64_t v12 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 < 0)
    {
      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)this;
      *((_DWORD *)a2 + 8) = this;
      if (!this) {
        return 1;
      }
    }
    else
    {
      uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v12;
      *((_DWORD *)a2 + 8) = v13;
      *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v12 + 1;
      if (!v13) {
        return 1;
      }
    }
    unsigned int v14 = v13 >> 3;
    switch(v13 >> 3)
    {
      case 1u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        uint64_t v17 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v135);
          if (!this) {
            return this;
          }
          uint64_t v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *long long v135 = *v17;
          uint64_t v18 = v17 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v18;
        }
        int v20 = *(_DWORD *)(v3 + 264) | 1;
        *(_DWORD *)(v3 + 264) = v20;
        if ((unint64_t)v18 < v16 && *v18 == 18)
        {
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v18 + 1;
          goto LABEL_303;
        }
        continue;
      case 2u:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_153;
        }
        int v20 = *(_DWORD *)(v3 + 264);
LABEL_303:
        *(_DWORD *)(v3 + 264) = v20 | 2;
        if (*(void *)(v3 + 16) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        uint64_t v93 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        if ((unint64_t)v93 >= v21 || *v93 != 24) {
          continue;
        }
        int v22 = v93 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v22;
LABEL_309:
        unsigned int v146 = 0;
        if ((unint64_t)v22 >= v21 || *v22 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v146);
          if (!this) {
            return this;
          }
          unsigned int v94 = v146;
          int v95 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v94 = *v22;
          int v95 = v22 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v95;
        }
        *(unsigned char *)(v3 + 28) = v94 != 0;
        *(_DWORD *)(v3 + 264) |= 4u;
        if ((unint64_t)v95 >= v21 || *v95 != 32) {
          continue;
        }
        int v23 = v95 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v23;
LABEL_317:
        unsigned int v146 = 0;
        if ((unint64_t)v23 >= v21 || *v23 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v146);
          if (!this) {
            return this;
          }
          unsigned int v96 = v146;
        }
        else
        {
          unsigned int v96 = *v23;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v23 + 1;
        }
        if (v96 + 1 <= 7)
        {
          *(_DWORD *)(v3 + 264) |= 8u;
          *(_DWORD *)(v3 + 24) = v96;
        }
        long long v97 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v24 = *((void *)a2 + 2);
        if ((unint64_t)v97 >= v24 || *v97 != 40) {
          continue;
        }
        int v25 = v97 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v25;
LABEL_327:
        unsigned int v146 = 0;
        if ((unint64_t)v25 >= v24 || *v25 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v146);
          if (!this) {
            return this;
          }
          unsigned int v98 = v146;
          int v99 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v24 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v98 = *v25;
          int v99 = v25 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v99;
        }
        *(unsigned char *)(v3 + 29) = v98 != 0;
        *(_DWORD *)(v3 + 264) |= 0x10u;
        if ((unint64_t)v99 >= v24 || *v99 != 48) {
          continue;
        }
        int v26 = v99 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v26;
LABEL_335:
        unsigned int v146 = 0;
        if ((unint64_t)v26 >= v24 || *v26 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v146);
          if (!this) {
            return this;
          }
          unsigned int v100 = v146;
          uint64_t v101 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v24 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v100 = *v26;
          uint64_t v101 = v26 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v101;
        }
        *(unsigned char *)(v3 + 30) = v100 != 0;
        *(_DWORD *)(v3 + 264) |= 0x20u;
        if ((unint64_t)v101 >= v24 || *v101 != 56) {
          continue;
        }
        int v27 = v101 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v27;
LABEL_343:
        unsigned int v146 = 0;
        if ((unint64_t)v27 >= v24 || *v27 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v146);
          if (!this) {
            return this;
          }
          unsigned int v102 = v146;
          uint64_t v103 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v24 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v102 = *v27;
          uint64_t v103 = v27 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v103;
        }
        *(unsigned char *)(v3 + 3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v102 != 0;
        *(_DWORD *)(v3 + 264) |= 0x40u;
        if ((unint64_t)v103 >= v24 || *v103 != 64) {
          continue;
        }
        int v28 = v103 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v28;
LABEL_351:
        unsigned int v146 = 0;
        if ((unint64_t)v28 >= v24 || *v28 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v146);
          if (!this) {
            return this;
          }
          unsigned int v104 = v146;
          char v105 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v24 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v104 = *v28;
          char v105 = v28 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v105;
        }
        *(unsigned char *)(v3 + 72) = v104 != 0;
        *(_DWORD *)(v3 + 264) |= 0x80u;
        if ((unint64_t)v105 >= v24 || *v105 != 72) {
          continue;
        }
        int v29 = v105 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v29;
LABEL_359:
        unsigned int v146 = 0;
        if ((unint64_t)v29 >= v24 || *v29 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v146);
          if (!this) {
            return this;
          }
          unsigned int v106 = v146;
        }
        else
        {
          unsigned int v106 = *v29;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v29 + 1;
        }
        if (v106 - 1 < 6 || v106 == -1)
        {
          *(_DWORD *)(v3 + 264) |= 0x100u;
          *(_DWORD *)(v3 + 32) = v106;
        }
        int v108 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v108 >= *((void *)a2 + 2) || *v108 != 82) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v108 + 1;
LABEL_373:
        *(_DWORD *)(v3 + 264) |= 0x200u;
        if (*(void *)(v3 + 40) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        uint64_t v109 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        if ((unint64_t)v109 >= v30 || *v109 != 88) {
          continue;
        }
        int v31 = v109 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v31;
LABEL_379:
        if ((unint64_t)v31 >= v30 || *v31 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!this) {
            return this;
          }
          int v110 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v4 = *v31;
          int v110 = v31 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v110;
        }
        int v32 = *(_DWORD *)(v3 + 264) | 0x400;
        *(_DWORD *)(v3 + 264) = v32;
        if ((unint64_t)v110 >= v30 || *v110 != 98) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v110 + 1;
LABEL_387:
        *(_DWORD *)(v3 + 264) = v32 | 0x800;
        if (*(void *)(v3 + 48) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        int v111 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v33 = *((void *)a2 + 2);
        if ((unint64_t)v111 >= v33 || *v111 != 104) {
          continue;
        }
        unint64_t v34 = v111 + 1;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v34;
LABEL_393:
        unsigned int v146 = 0;
        if ((unint64_t)v34 >= v33 || *v34 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v146);
          if (!this) {
            return this;
          }
          unsigned int v112 = v146;
          int v113 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v33 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v112 = *v34;
          int v113 = v34 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v113;
        }
        *(unsigned char *)(v3 + 73) = v112 != 0;
        int v35 = *(_DWORD *)(v3 + 264) | 0x1000;
        *(_DWORD *)(v3 + 264) = v35;
        if ((unint64_t)v113 >= v33 || *v113 != 114) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v113 + 1;
LABEL_401:
        *(_DWORD *)(v3 + 264) = v35 | 0x2000;
        if (*(void *)(v3 + 56) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        int v114 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v114 >= *((void *)a2 + 2) || *v114 != 122) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v114 + 1;
LABEL_407:
        *(_DWORD *)(v3 + 264) |= 0x4000u;
        if (*(void *)(v3 + 64) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        int v115 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v36 = *((void *)a2 + 2);
        if ((int)v36 - (int)v115 < 2 || *v115 != 128 || v115[1] != 1) {
          continue;
        }
        int v37 = v115 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v37;
LABEL_414:
        if ((unint64_t)v37 >= v36 || (char)*v37 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!this) {
            return this;
          }
          uint64_t v116 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v36 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v5 = *v37;
          uint64_t v116 = v37 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v116;
        }
        int v38 = *(_DWORD *)(v3 + 264) | 0x8000;
        *(_DWORD *)(v3 + 264) = v38;
        if ((int)v36 - (int)v116 < 2 || *v116 != 138 || v116[1] != 1) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v116 + 2;
LABEL_423:
        *(_DWORD *)(v3 + 264) = v38 | 0x40000;
        if (*(void *)(v3 + 80) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        char v117 = (unsigned __int8 *)*((void *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v117 < 2 || *v117 != 146 || v117[1] != 1) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v117 + 2;
LABEL_430:
        *(_DWORD *)(v3 + 264) |= 0x80000u;
        if (*(void *)(v3 + 88) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        int v118 = (unsigned __int8 *)*((void *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v118 < 2 || *v118 != 154 || v118[1] != 1) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v118 + 2;
LABEL_437:
        *(_DWORD *)(v3 + 264) |= 0x100000u;
        if (*(void *)(v3 + 104) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        unsigned int v119 = (unsigned __int8 *)*((void *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v119 < 2 || *v119 != 162 || v119[1] != 1) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v119 + 2;
LABEL_444:
        *(_DWORD *)(v3 + 264) |= 0x200000u;
        if (*(void *)(v3 + 112) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        int64x2_t v120 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v39 = *((void *)a2 + 2);
        if ((int)v39 - (int)v120 < 2 || *v120 != 168 || v120[1] != 1) {
          continue;
        }
        uint64_t v40 = v120 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v40;
LABEL_451:
        unsigned int v146 = 0;
        if ((unint64_t)v40 >= v39 || (char)*v40 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v146);
          if (!this) {
            return this;
          }
          unsigned int v121 = v146;
          long long v122 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v39 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v121 = *v40;
          long long v122 = v40 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v122;
        }
        *(unsigned char *)(v3 + 75) = v121 != 0;
        *(_DWORD *)(v3 + 264) |= 0x400000u;
        if ((int)v39 - (int)v122 < 2 || *v122 != 176 || v122[1] != 1) {
          continue;
        }
        int v41 = v122 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v41;
LABEL_460:
        if ((unint64_t)v41 >= v39 || (char)*v41 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v145);
          if (!this) {
            return this;
          }
          std::string v123 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v39 = *((void *)a2 + 2);
        }
        else
        {
          *std::string v145 = *v41;
          std::string v123 = v41 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v123;
        }
        *(_DWORD *)(v3 + 264) |= 0x800000u;
        if ((int)v39 - (int)v123 < 2 || *v123 != 184 || v123[1] != 1) {
          continue;
        }
        int v42 = v123 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v42;
LABEL_469:
        if ((unint64_t)v42 >= v39 || (char)*v42 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v143);
          if (!this) {
            return this;
          }
          uint64_t v124 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v39 = *((void *)a2 + 2);
        }
        else
        {
          *std::string v143 = *v42;
          uint64_t v124 = v42 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v124;
        }
        int v43 = *(_DWORD *)(v3 + 264) | 0x2000000;
        *(_DWORD *)(v3 + 264) = v43;
        if ((int)v39 - (int)v124 < 2 || *v124 != 194 || v124[1] != 1) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v124 + 2;
LABEL_69:
        *(_DWORD *)(v3 + 264) = v43 | 0x4000000;
        if (*(void *)(v3 + 128) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        unint64_t v44 = (unsigned __int8 *)*((void *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v44 < 2 || *v44 != 202 || v44[1] != 1) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v44 + 2;
LABEL_77:
        *(_DWORD *)(v3 + 264) |= 0x8000000u;
        if (*(void *)(v3 + 136) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        int v45 = (unsigned __int8 *)*((void *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v45 < 2 || *v45 != 210 || v45[1] != 1) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v45 + 2;
LABEL_85:
        *(_DWORD *)(v3 + 264) |= 0x10000000u;
        if (*(void *)(v3 + 144) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        char v47 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v46 = *((void *)a2 + 2);
        if ((int)v46 - (int)v47 < 2 || *v47 != 216 || v47[1] != 1) {
          continue;
        }
        int v48 = v47 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v48;
LABEL_94:
        if ((unint64_t)v48 >= v46 || (char)*v48 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!this) {
            return this;
          }
          int v49 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v46 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v6 = *v48;
          int v49 = v48 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v49;
        }
        *(_DWORD *)(v3 + 264) |= 0x20000000u;
        if ((int)v46 - (int)v49 < 2 || *v49 != 224 || v49[1] != 1) {
          continue;
        }
        unint64_t v50 = v49 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v50;
LABEL_162:
        if ((unint64_t)v50 >= v46 || (char)*v50 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v144);
          if (!this) {
            return this;
          }
          uint64_t v75 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v46 = *((void *)a2 + 2);
        }
        else
        {
          *std::string v144 = *v50;
          uint64_t v75 = v50 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v75;
        }
        *(_DWORD *)(v3 + 264) |= 0x40000000u;
        if ((int)v46 - (int)v75 < 2 || *v75 != 232 || v75[1] != 1) {
          continue;
        }
        int v51 = v75 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v51;
LABEL_182:
        unsigned int v146 = 0;
        if ((unint64_t)v51 >= v46 || (char)*v51 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v146);
          if (!this) {
            return this;
          }
          unsigned int v78 = v146;
          int v79 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v46 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v78 = *v51;
          int v79 = v51 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v79;
        }
        *(unsigned char *)(v3 + 188) = v78 != 0;
        *(_DWORD *)(v3 + 264) |= 0x80000000;
        if ((int)v46 - (int)v79 < 2 || *v79 != 240 || v79[1] != 1) {
          continue;
        }
        uint64_t v52 = v79 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v52;
LABEL_202:
        if ((unint64_t)v52 >= v46 || (char)*v52 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v140);
          if (!this) {
            return this;
          }
          uint64_t v82 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v46 = *((void *)a2 + 2);
        }
        else
        {
          *std::string v140 = *v52;
          uint64_t v82 = v52 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v82;
        }
        *(_DWORD *)(v3 + 268) |= 2u;
        if ((int)v46 - (int)v82 < 2 || *v82 != 248 || v82[1] != 1) {
          continue;
        }
        int v53 = v82 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v53;
LABEL_220:
        if ((unint64_t)v53 >= v46 || (char)*v53 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v138);
          if (!this) {
            return this;
          }
          uint64_t v84 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v46 = *((void *)a2 + 2);
        }
        else
        {
          *char v138 = *v53;
          uint64_t v84 = v53 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v84;
        }
        *(_DWORD *)(v3 + 268) |= 4u;
        if ((int)v46 - (int)v84 < 2 || *v84 != 128 || v84[1] != 2) {
          continue;
        }
        int v54 = v84 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v54;
LABEL_238:
        if ((unint64_t)v54 >= v46 || (char)*v54 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v136);
          if (!this) {
            return this;
          }
          char v86 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v46 = *((void *)a2 + 2);
        }
        else
        {
          *std::string v136 = *v54;
          char v86 = v54 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v86;
        }
        int v55 = *(_DWORD *)(v3 + 268) | 8;
        *(_DWORD *)(v3 + 268) = v55;
        if ((int)v46 - (int)v86 < 2 || *v86 != 138 || v86[1] != 2) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v86 + 2;
LABEL_109:
        *(_DWORD *)(v3 + 268) = v55 | 0x10;
        if (*(void *)(v3 + 176) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        unint64_t v56 = (unsigned __int8 *)*((void *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v56 < 2 || *v56 != 146) {
          continue;
        }
        while (1)
        {
          if (v56[1] != 2) {
            goto LABEL_2;
          }
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v56 + 2;
LABEL_480:
          int v125 = *(_DWORD *)(v3 + 204);
          int v126 = *(_DWORD *)(v3 + 200);
          if (v126 >= v125)
          {
            if (v125 == *(_DWORD *)(v3 + 208))
            {
              this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v134);
              int v125 = *(_DWORD *)(v3 + 204);
            }
            *(_DWORD *)(v3 + 204) = v125 + 1;
            uint64_t v127 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)this);
            uint64_t v128 = *(void *)(v3 + 192);
            uint64_t v129 = *(int *)(v3 + 200);
            *(_DWORD *)(v3 + 200) = v129 + 1;
            *(void *)(v128 + 8 * v129) = v127;
          }
          else
          {
            *(_DWORD *)(v3 + 200) = v126 + 1;
          }
          this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!this) {
            return this;
          }
          unint64_t v56 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v57 = *((void *)a2 + 2);
          if ((int)v57 - (int)v56 < 2) {
            goto LABEL_2;
          }
          int v130 = *v56;
          if (v130 == 152) {
            break;
          }
          if (v130 != 146) {
            goto LABEL_2;
          }
        }
        if (v56[1] != 2) {
          continue;
        }
        unsigned int v58 = v56 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v58;
LABEL_492:
        if ((unint64_t)v58 >= v57 || (char)*v58 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v142);
          if (!this) {
            return this;
          }
          long long v131 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v57 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v142 = *v58;
          long long v131 = v58 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v131;
        }
        *(_DWORD *)(v3 + 264) |= 0x10000u;
        if ((int)v57 - (int)v131 < 2 || *v131 != 160 || v131[1] != 2) {
          continue;
        }
        int v59 = v131 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v59;
LABEL_501:
        unsigned int v146 = 0;
        if ((unint64_t)v59 >= v57 || (char)*v59 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v146);
          if (!this) {
            return this;
          }
          unsigned int v132 = v146;
          long long v133 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v57 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v132 = *v59;
          long long v133 = v59 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v133;
        }
        *(unsigned char *)(v3 + 74) = v132 != 0;
        *(_DWORD *)(v3 + 264) |= 0x20000u;
        if ((int)v57 - (int)v133 < 2 || *v133 != 170 || v133[1] != 2) {
          continue;
        }
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v133 + 2;
LABEL_122:
        *(_DWORD *)(v3 + 268) |= 0x40u;
        if (*(void *)(v3 + 216) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        int v61 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v60 = *((void *)a2 + 2);
        if ((int)v60 - (int)v61 < 2 || *v61 != 176 || v61[1] != 2) {
          continue;
        }
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v62 = (char *)(v61 + 2);
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v62;
LABEL_131:
        unsigned int v146 = 0;
        if ((unint64_t)v62 >= v60 || *v62 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v146);
          if (!this) {
            return this;
          }
          unsigned int v63 = v146;
        }
        else
        {
          unsigned int v63 = *v62;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v62 + 1;
        }
        if (v63 <= 5)
        {
          *(_DWORD *)(v3 + 264) |= 0x1000000u;
          *(_DWORD *)(v3 + 120) = v63;
        }
        unint64_t v76 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v64 = *((void *)a2 + 2);
        if ((int)v64 - (int)v76 < 2 || *v76 != 184 || v76[1] != 2) {
          continue;
        }
        int v65 = (char *)(v76 + 2);
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v65;
LABEL_173:
        unsigned int v146 = 0;
        if ((unint64_t)v65 >= v64 || *v65 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v146);
          if (!this) {
            return this;
          }
          unsigned int v77 = v146;
        }
        else
        {
          unsigned int v77 = *v65;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v65 + 1;
        }
        if (v77 <= 2)
        {
          *(_DWORD *)(v3 + 268) |= 1u;
          *(_DWORD *)(v3 + 160) = v77;
        }
        int v80 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        if ((int)v66 - (int)v80 < 2 || *v80 != 192 || v80[1] != 2) {
          continue;
        }
        int v67 = v80 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v67;
LABEL_193:
        if ((unint64_t)v67 >= v66 || (char)*v67 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v141);
          if (!this) {
            return this;
          }
          int v81 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
        }
        else
        {
          *std::string::size_type v141 = *v67;
          int v81 = v67 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v81;
        }
        *(_DWORD *)(v3 + 268) |= 0x80u;
        if ((int)v66 - (int)v81 < 2 || *v81 != 200 || v81[1] != 2) {
          continue;
        }
        char v68 = v81 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v68;
LABEL_211:
        if ((unint64_t)v68 >= v66 || (char)*v68 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v139);
          if (!this) {
            return this;
          }
          int v83 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
        }
        else
        {
          *std::string v139 = *v68;
          int v83 = v68 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v83;
        }
        *(_DWORD *)(v3 + 268) |= 0x100u;
        if ((int)v66 - (int)v83 < 2 || *v83 != 208 || v83[1] != 2) {
          continue;
        }
        uint64_t v69 = v83 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v69;
LABEL_229:
        if ((unint64_t)v69 >= v66 || (char)*v69 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v137);
          if (!this) {
            return this;
          }
          int v85 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
        }
        else
        {
          *std::string v137 = *v69;
          int v85 = v69 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v85;
        }
        *(_DWORD *)(v3 + 268) |= 0x200u;
        if ((int)v66 - (int)v85 < 2 || *v85 != 216 || v85[1] != 2) {
          continue;
        }
        unint64_t v70 = v85 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v70;
LABEL_247:
        if ((unint64_t)v70 >= v66 || (char)*v70 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!this) {
            return this;
          }
          uint64_t v87 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v7 = *v70;
          uint64_t v87 = v70 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v87;
        }
        *(_DWORD *)(v3 + 268) |= 0x400u;
        if ((int)v66 - (int)v87 < 2 || *v87 != 224 || v87[1] != 2) {
          continue;
        }
        int v71 = v87 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v71;
LABEL_262:
        if ((unint64_t)v71 >= v66 || (char)*v71 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!this) {
            return this;
          }
          unint64_t v88 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v8 = *v71;
          unint64_t v88 = v71 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v88;
        }
        *(_DWORD *)(v3 + 268) |= 0x800u;
        if ((int)v66 - (int)v88 < 2 || *v88 != 232 || v88[1] != 2) {
          continue;
        }
        uint64_t v72 = v88 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v72;
LABEL_271:
        if ((unint64_t)v72 >= v66 || (char)*v72 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!this) {
            return this;
          }
          int v89 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v9 = *v72;
          int v89 = v72 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v89;
        }
        *(_DWORD *)(v3 + 268) |= 0x1000u;
        if ((int)v66 - (int)v89 < 2 || *v89 != 240 || v89[1] != 2) {
          continue;
        }
        int v73 = v89 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v73;
LABEL_280:
        unsigned int v146 = 0;
        if ((unint64_t)v73 >= v66 || (char)*v73 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v146);
          if (!this) {
            return this;
          }
          unsigned int v90 = v146;
          uint64_t v91 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v90 = *v73;
          uint64_t v91 = v73 + 1;
          *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v91;
        }
        *(unsigned char *)(v3 + 189) = v90 != 0;
        *(_DWORD *)(v3 + 268) |= 0x2000u;
        if ((int)v66 - (int)v91 < 2 || *v91 != 240 || v91[1] != 34) {
          continue;
        }
        char v74 = v91 + 2;
        *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v74;
        goto LABEL_289;
      case 3u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v22 = (char *)*((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        goto LABEL_309;
      case 4u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v23 = (char *)*((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        goto LABEL_317;
      case 5u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v25 = (char *)*((void *)a2 + 1);
        unint64_t v24 = *((void *)a2 + 2);
        goto LABEL_327;
      case 6u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v26 = (char *)*((void *)a2 + 1);
        unint64_t v24 = *((void *)a2 + 2);
        goto LABEL_335;
      case 7u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v27 = (char *)*((void *)a2 + 1);
        unint64_t v24 = *((void *)a2 + 2);
        goto LABEL_343;
      case 8u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v28 = (char *)*((void *)a2 + 1);
        unint64_t v24 = *((void *)a2 + 2);
        goto LABEL_351;
      case 9u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v29 = (char *)*((void *)a2 + 1);
        unint64_t v24 = *((void *)a2 + 2);
        goto LABEL_359;
      case 0xAu:
        int v15 = v13 & 7;
        if (v15 == 2) {
          goto LABEL_373;
        }
        goto LABEL_153;
      case 0xBu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v31 = (char *)*((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        goto LABEL_379;
      case 0xCu:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_153;
        }
        int v32 = *(_DWORD *)(v3 + 264);
        goto LABEL_387;
      case 0xDu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        unint64_t v34 = (char *)*((void *)a2 + 1);
        unint64_t v33 = *((void *)a2 + 2);
        goto LABEL_393;
      case 0xEu:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_153;
        }
        int v35 = *(_DWORD *)(v3 + 264);
        goto LABEL_401;
      case 0xFu:
        int v15 = v13 & 7;
        if (v15 == 2) {
          goto LABEL_407;
        }
        goto LABEL_153;
      case 0x10u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v37 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v36 = *((void *)a2 + 2);
        goto LABEL_414;
      case 0x11u:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_153;
        }
        int v38 = *(_DWORD *)(v3 + 264);
        goto LABEL_423;
      case 0x12u:
        int v15 = v13 & 7;
        if (v15 == 2) {
          goto LABEL_430;
        }
        goto LABEL_153;
      case 0x13u:
        int v15 = v13 & 7;
        if (v15 == 2) {
          goto LABEL_437;
        }
        goto LABEL_153;
      case 0x14u:
        int v15 = v13 & 7;
        if (v15 == 2) {
          goto LABEL_444;
        }
        goto LABEL_153;
      case 0x15u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        uint64_t v40 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v39 = *((void *)a2 + 2);
        goto LABEL_451;
      case 0x16u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v41 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v39 = *((void *)a2 + 2);
        goto LABEL_460;
      case 0x17u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v42 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v39 = *((void *)a2 + 2);
        goto LABEL_469;
      case 0x18u:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_153;
        }
        int v43 = *(_DWORD *)(v3 + 264);
        goto LABEL_69;
      case 0x19u:
        int v15 = v13 & 7;
        if (v15 == 2) {
          goto LABEL_77;
        }
        goto LABEL_153;
      case 0x1Au:
        int v15 = v13 & 7;
        if (v15 == 2) {
          goto LABEL_85;
        }
        goto LABEL_153;
      case 0x1Bu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v48 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v46 = *((void *)a2 + 2);
        goto LABEL_94;
      case 0x1Cu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        unint64_t v50 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v46 = *((void *)a2 + 2);
        goto LABEL_162;
      case 0x1Du:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v51 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v46 = *((void *)a2 + 2);
        goto LABEL_182;
      case 0x1Eu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        uint64_t v52 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v46 = *((void *)a2 + 2);
        goto LABEL_202;
      case 0x1Fu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v53 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v46 = *((void *)a2 + 2);
        goto LABEL_220;
      case 0x20u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v54 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v46 = *((void *)a2 + 2);
        goto LABEL_238;
      case 0x21u:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_153;
        }
        int v55 = *(_DWORD *)(v3 + 268);
        goto LABEL_109;
      case 0x22u:
        int v15 = v13 & 7;
        if (v15 == 2) {
          goto LABEL_480;
        }
        goto LABEL_153;
      case 0x23u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        unsigned int v58 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v57 = *((void *)a2 + 2);
        goto LABEL_492;
      case 0x24u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v59 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v57 = *((void *)a2 + 2);
        goto LABEL_501;
      case 0x25u:
        int v15 = v13 & 7;
        if (v15 == 2) {
          goto LABEL_122;
        }
        goto LABEL_153;
      case 0x26u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v62 = (char *)*((void *)a2 + 1);
        unint64_t v60 = *((void *)a2 + 2);
        goto LABEL_131;
      case 0x27u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v65 = (char *)*((void *)a2 + 1);
        unint64_t v64 = *((void *)a2 + 2);
        goto LABEL_173;
      case 0x28u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v67 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        goto LABEL_193;
      case 0x29u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        char v68 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        goto LABEL_211;
      case 0x2Au:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        uint64_t v69 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        goto LABEL_229;
      case 0x2Bu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        unint64_t v70 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        goto LABEL_247;
      case 0x2Cu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v71 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        goto LABEL_262;
      case 0x2Du:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        uint64_t v72 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        goto LABEL_271;
      case 0x2Eu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_153;
        }
        int v73 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        goto LABEL_280;
      default:
        if (v14 == 558)
        {
          int v15 = v13 & 7;
          if ((v13 & 7) != 0) {
            goto LABEL_153;
          }
          char v74 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
LABEL_289:
          if ((unint64_t)v74 >= v66 || (char)*v74 < 0)
          {
            this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
            if (!this) {
              return this;
            }
            uint64_t v92 = (unsigned __int8 *)*((void *)a2 + 1);
            unint64_t v66 = *((void *)a2 + 2);
          }
          else
          {
            *uint64_t v10 = *v74;
            uint64_t v92 = v74 + 1;
            *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v92;
          }
          int v19 = *(_DWORD *)(v3 + 268) | 0x4000;
          *(_DWORD *)(v3 + 268) = v19;
          if ((int)v66 - (int)v92 >= 2 && *v92 == 250 && v92[1] == 34)
          {
            *((void *)a2 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v92 + 2;
            goto LABEL_16;
          }
          continue;
        }
        if (v14 == 559)
        {
          int v15 = v13 & 7;
          if (v15 != 2) {
            goto LABEL_153;
          }
          int v19 = *(_DWORD *)(v3 + 268);
LABEL_16:
          *(_DWORD *)(v3 + 268) = v19 | 0x8000;
          if (*(void *)(v3 + 248) == v11) {
            operator new();
          }
          this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!this) {
            return this;
          }
          if (*((void *)a2 + 1) == *((void *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            this = 1;
            *((unsigned char *)a2 + 36) = 1;
            return this;
          }
          continue;
        }
        int v15 = v13 & 7;
LABEL_153:
        if (v15 != 4)
        {
          this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, v13);
          if ((this & 1) == 0) {
            return 0;
          }
          continue;
        }
        return 1;
    }
  }
}